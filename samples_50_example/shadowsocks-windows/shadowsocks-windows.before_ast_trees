unit ( decl_stmt ( decl ( type ( name ( ( system ) , ( operator , . ) , ( io ) , ( operator , . ) , ( file , stream ) ) ) , ( file , stream ) , init ( expr ( ( operator , new ) , call ( name ( ( system ) , ( operator , . ) , ( io ) , ( operator , . ) , ( file , stream ) ) , argument_list ( argument ( expr ( ( file , name ) ) ) , argument ( expr ( name ( ( system ) , ( operator , . ) , ( io ) , ( operator , . ) , ( file , mode ) , ( operator , . ) , ( create ) ) ) ) , argument ( expr ( name ( ( system ) , ( operator , . ) , ( io ) , ( operator , . ) , ( file , access ) , ( operator , . ) , ( write ) ) ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( states ) , init ( expr ( ( operator , ( ) , name ( ( object ) , index ( ) ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( on , success ) , init ( expr ( ( operator , ( ) , ( action ) , ( operator , ) ) , name ( ( states ) , index ( expr ( (  ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( session ) , init ( expr ( ( operator , new ) , call ( ( async , session ) , argument_list ( argument ( expr ( ( remote ) ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( timer ) , init ( expr ( ( operator , ( ) , ( proxy , timer ) , ( operator , ) ) , ( sender ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( session ) , init ( expr ( ( operator , ( ) , name ( ( async , session ) , argument_list ( argument ( ( proxy , timer ) ) ) ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( timer ) , init ( expr ( ( operator , ( ) , ( server , timer ) , ( operator , ) ) , ( sender ) ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( closed ) ) ) , block ( block_content ( return ( ) ) ) ) ) , try ( block ( block_content ( decl_stmt ( decl ( type ( ( var ) ) , ( session ) , init ( expr ( ( operator , ( ) , name ( ( async , session ) , argument_list ( argument ( ( server , timer ) ) ) ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( closed ) ) ) , block ( block_content ( return ( ) ) ) ) ) , try ( block ( block_content ( decl_stmt ( decl ( type ( ( var ) ) , ( session ) , init ( expr ( ( operator , ( ) , ( async , session ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) ) ) ) )
unit ( block ( block_content ( expr_stmt ( expr ( call ( ( close ) , argument_list ( ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( ( running , port ) , ( operator , = ) , call ( name ( ( this ) , ( operator , . ) , ( get , free , port ) ) , argument_list ( ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( call ( name ( ( string ) , ( operator , . ) , ( is , null , or , empty ) ) , argument_list ( argument ( expr ( ( password ) ) ) ) ) ) ) , block ( block_content ( ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( call ( name ( ( string ) , ( operator , . ) , ( is , null , or , empty ) ) , argument_list ( argument ( expr ( ( server ) ) ) ) ) ) ) , block ( block_content ( ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( call ( name ( ( string ) , ( operator , . ) , ( is , null , or , empty ) ) , argument_list ( argument ( expr ( ( server ) ) ) ) ) ) ) , block ( block_content ( ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( call ( name ( ( string ) , ( operator , . ) , ( is , null , or , empty ) ) , argument_list ( argument ( expr ( ( remarks ) ) ) ) ) ) ) , block ( block_content ( ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( call ( name ( ( string ) , ( operator , . ) , ( is , null , or , empty ) ) , argument_list ( argument ( expr ( call ( name ( ( controller ) , ( operator , . ) , ( get , configuration , copy ) ) , argument_list ( ) ) , ( operator , . ) , ( pac , url ) ) ) ) ) ) ) , block ( block_content ( ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( operator , ! ) , call ( name ( ( string ) , ( operator , . ) , ( is , null , or , empty ) ) , argument_list ( argument ( expr ( call ( name ( ( controller ) , ( operator , . ) , ( get , configuration , copy ) ) , argument_list ( ) ) , ( operator , . ) , ( pac , url ) ) ) ) ) ) ) , block ( block_content ( ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( string ) ) , ( temppath ) , init ( expr ( call ( name ( ( utils ) , ( operator , . ) , ( get , temp , path ) ) , argument_list ( ) ) ) ) ) ) , expr_stmt ( expr ( ( log , file ) , ( operator , = ) , call ( name ( ( path ) , ( operator , . ) , ( combine ) ) , argument_list ( argument ( expr ( ( temppath ) ) ) , argument ( expr ( ( str ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( ( total , write ) , ( operator , += ) , ( bytes , read ) ) ) , decl_stmt ( decl ( type ( ( var ) ) , ( session ) , init ( expr ( ( operator , ( ) , name ( ( async , session ) , argument_list ( argument ( ( bool ) ) ) ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( console ) , ( operator , . ) , ( write , line ) ) , argument_list ( argument ( expr ( name ( ( e ) , ( operator , . ) , ( message ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( menu , item ) ) , ( item ) , init ( expr ( ( operator , new ) , call ( ( menu , item ) , argument_list ( argument ( expr ( call ( name ( ( i , n ) , ( operator , . ) , ( get , string ) ) , argument_list ( argument ( expr ( name ( ( strategy ) , ( operator , . ) , ( name ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( buffer ) , ( operator , == ) , ( first , packge ) ) ) , block ( block_content ( expr_stmt ( expr ( ( buffer , data , index ) , ( operator , = ) , ( index ) ) ) ) ) ) , else ( block ( block_content ( expr_stmt ( expr ( call ( name ( ( array ) , ( operator , . ) , ( copy ) ) , argument_list ( argument ( expr ( ( first , packge ) ) ) , argument ( expr ( ( index ) ) ) , argument ( expr ( ( line , buffer ) ) ) , argument ( expr ( (  ) ) ) , argument ( expr ( ( length ) ) ) ) ) ) ) ) ) ) ) )
unit ( if_stmt ( else ( block ( block_content ( expr_stmt ( expr ( call ( name ( ( file , manager ) , ( operator , . ) , ( uncompress , file ) ) , argument_list ( argument ( expr ( ( pac , file ) ) ) , argument ( expr ( name ( ( resources ) , ( operator , . ) , ( proxy , pac , txt ) ) ) ) ) ) ) ) , return ( expr ( ( pac , file ) ) ) ) ) ) ) )
unit ( return ( expr ( call ( name ( ( utils ) , ( operator , . ) , ( un , gzip ) ) , argument_list ( argument ( expr ( name ( ( resources ) , ( operator , . ) , ( proxy , pac , txt ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( ( lines ) , ( operator , = ) , ( operator , new ) , name ( ( string ) , index ( ) ) , block ( expr ( ( data , line ) ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( server ) ) , ( operator , = ) , ( server ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( states ) , init ( expr ( ( operator , ( ) , name ( ( object ) , index ( ) ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( on , success ) , init ( expr ( ( operator , ( ) , ( action ) , ( operator , ) ) , name ( ( states ) , index ( expr ( (  ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( timer ) , init ( expr ( ( operator , ( ) , ( proxy , timer ) , ( operator , ) ) , ( sender ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( session ) , init ( expr ( ( operator , ( ) , name ( ( async , session ) , argument_list ( argument ( ( proxy , timer ) ) ) ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( timer ) , init ( expr ( ( operator , ( ) , ( server , timer ) , ( operator , ) ) , ( sender ) ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( closed ) ) ) , block ( block_content ( return ( ) ) ) ) ) , try ( block ( block_content ( decl_stmt ( decl ( type ( ( var ) ) , ( session ) , init ( expr ( ( operator , ( ) , name ( ( async , session ) , argument_list ( argument ( ( server , timer ) ) ) ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( closed ) ) ) , block ( block_content ( return ( ) ) ) ) ) , try ( block ( block_content ( decl_stmt ( decl ( type ( ( var ) ) , ( session ) , init ( expr ( ( operator , ( ) , ( async , session ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( encryptor ) ) , ( operator , = ) , call ( name ( ( encryptor , factory ) , ( operator , . ) , ( get , encryptor ) ) , argument_list ( argument ( expr ( name ( ( server ) , ( operator , . ) , ( method ) ) ) ) , argument ( expr ( name ( ( server ) , ( operator , . ) , ( password ) ) ) ) , argument ( expr ( name ( ( server ) , ( operator , . ) , ( auth ) ) ) ) , argument ( expr ( ( false ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( first , packet ) ) , ( operator , = ) , ( first , packet ) ) ) , expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( first , packet , length ) ) , ( operator , = ) , ( length ) ) ) , expr_stmt ( expr ( call ( name ( ( this ) , ( operator , . ) , ( handshake , receive ) ) , argument_list ( ) ) ) ) , expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( last , activity ) ) , ( operator , = ) , name ( ( date , time ) , ( operator , . ) , ( now ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( this ) , ( operator , . ) , ( close ) ) , argument_list ( ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( this ) , ( operator , . ) , ( close ) ) , argument_list ( ) ) ) ) , catch ( parameter_list ( parameter ( decl ( type ( ( exception ) ) , ( e ) ) ) ) , block ( block_content ( expr_stmt ( expr ( call ( name ( ( logging ) , ( operator , . ) , ( log , useful , exception ) ) , argument_list ( argument ( expr ( ( e ) ) ) ) ) ) ) , expr_stmt ( expr ( call ( name ( ( this ) , ( operator , . ) , ( close ) ) , argument_list ( ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( this ) , ( operator , . ) , ( close ) ) , argument_list ( ) ) ) ) , expr_stmt ( expr ( ( operator , ( ) , ( exception ) , ( e ) , ( operator , ) ) , block ( expr ( call ( name ( ( logging ) , ( operator , . ) , ( log , useful , exception ) ) , argument_list ( argument ( expr ( ( e ) ) ) ) ) ) , expr ( call ( name ( ( this ) , ( operator , . ) , ( close ) ) , argument_list ( ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( this ) , ( operator , . ) , ( close ) ) , argument_list ( ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( last , activity ) ) , ( operator , = ) , name ( ( date , time ) , ( operator , . ) , ( now ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( strategy ) , ( operator , . ) , ( update , last , read ) ) , argument_list ( argument ( expr ( name ( ( this ) , ( operator , . ) , ( server ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( strategy ) , ( operator , . ) , ( update , last , write ) ) , argument_list ( argument ( expr ( name ( ( this ) , ( operator , . ) , ( server ) ) ) ) ) ) ) ) )
unit ( lock ( init ( expr ( ( encryption , lock ) ) ) , block ( block_content ( lock ( init ( expr ( ( decryption , lock ) ) ) , block ( block_content ( expr_stmt ( expr ( ( encryptor ) , ( operator , = ) , call ( name ( ( encryptor , factory ) , ( operator , . ) , ( get , encryptor ) ) , argument_list ( argument ( expr ( name ( ( server ) , ( operator , . ) , ( method ) ) ) ) , argument ( expr ( name ( ( server ) , ( operator , . ) , ( password ) ) ) ) , argument ( expr ( name ( ( server ) , ( operator , . ) , ( auth ) ) ) ) , argument ( expr ( ( false ) ) ) ) ) ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( ( operator , new ) , call ( ( async , callback ) , argument_list ( argument ( expr ( ( response , callback ) ) ) ) ) ) , ( operator ,  ) , expr ( ( null ) ) ) , empty_stmt ( ) )
unit ( expr_stmt ( expr ( call ( name ( ( connection ) , ( operator , . ) , ( begin , send ) ) , argument_list ( argument ( expr ( ( response ) ) ) , argument ( expr ( (  ) ) ) , argument ( expr ( name ( ( response ) , ( operator , . ) , ( length ) ) ) ) , argument ( expr ( name ( ( socket , flags ) , ( operator , . ) , ( none ) ) ) ) , argument ( expr ( ( operator , new ) , call ( ( async , callback ) , argument_list ( argument ( expr ( ( read , all ) ) ) ) ) ) ) , argument ( expr ( ( true ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( connection ) , ( operator , . ) , ( begin , receive ) ) , argument_list ( argument ( expr ( ( connetion , recv , buffer ) ) ) , argument ( expr ( (  ) ) ) , argument ( expr ( ( recv , size ) ) ) , argument ( expr ( name ( ( socket , flags ) , ( operator , . ) , ( none ) ) ) ) , argument ( expr ( ( operator , new ) , call ( ( async , callback ) , argument_list ( argument ( expr ( ( read , all ) ) ) ) ) ) ) , argument ( expr ( ( null ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( connection ) , ( operator , . ) , ( begin , receive ) ) , argument_list ( argument ( expr ( ( connetion , recv , buffer ) ) ) , argument ( expr ( (  ) ) ) , argument ( expr ( ( recv , size ) ) ) , argument ( expr ( name ( ( socket , flags ) , ( operator , . ) , ( none ) ) ) ) , argument ( expr ( ( operator , new ) , call ( ( async , callback ) , argument_list ( argument ( expr ( ( read , all ) ) ) ) ) ) ) , argument ( expr ( ( null ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( remote ) , ( operator , . ) , ( begin , connect , dest ) ) , argument_list ( argument ( expr ( ( dest , end , point ) ) ) , argument ( expr ( ( operator , new ) , call ( ( async , callback ) , argument_list ( argument ( expr ( ( connect , callback ) ) ) ) ) ) ) , argument ( expr ( ( operator , new ) , call ( name ( ( async , session ) , argument_list ( argument ( ( server , timer ) ) ) ) , argument_list ( argument ( expr ( ( session ) ) ) , argument ( expr ( ( connect , timer ) ) ) ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( my , cancel , button ) , ( operator , . ) , ( margin ) ) , ( operator , = ) , ( operator , new ) , call ( name ( ( system ) , ( operator , . ) , ( windows ) , ( operator , . ) , ( forms ) , ( operator , . ) , ( padding ) ) , argument_list ( argument ( expr ( ( num ) ) ) , argument ( expr ( ( num ) ) ) , argument ( expr ( (  ) ) ) , argument ( expr ( (  ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( ( package , loss ) , ( operator , = ) , call ( name ( ( response , records ) , ( operator , . ) , ( count ) ) , argument_list ( argument ( expr ( lambda ( parameter_list ( parameter ( decl ( ( response ) ) ) ) , block ( block_content ( expr ( ( response ) , ( operator , != ) , ( null ) ) ) ) ) ) ) ) ) , ( operator , / ) , ( operator , ( ) , ( float ) , ( operator , ) ) , call ( name ( ( response , records ) , ( operator , . ) , ( count ) ) , argument_list ( ) ) ) ) )
unit ( expr_stmt ( expr ( ( all , text , boxes ) , ( operator , = ) , call ( name ( ( hot , keys ) , ( operator , . ) , name ( ( get , child , controls ) , argument_list ( argument ( ( text , box ) ) ) ) ) , argument_list ( argument ( expr ( name ( ( this ) , ( operator , . ) , ( table , layout , panel ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( text ) ) , ( operator , = ) , call ( name ( ( i , n ) , ( operator , . ) , ( get , string ) ) , argument_list ( argument ( expr ( ( str ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( this ) , ( operator , . ) , ( close ) ) , argument_list ( ) ) ) ) )
unit ( try ( block ( block_content ( decl_stmt ( decl ( type ( ( socket ) ) , ( listener ) , init ( expr ( ( operator , ( ) , ( socket ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) ) ) ) )
unit ( try ( block ( block_content ( decl_stmt ( decl ( type ( ( socket ) ) , ( listener ) , init ( expr ( ( operator , ( ) , ( socket ) , ( operator , ) ) , name ( ( ar ) , ( operator , . ) , ( async , state ) ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( sodium ) , ( operator , . ) , ( ss , onetimeauth ) ) , argument_list ( argument ( expr ( ( auth ) ) ) , argument ( expr ( ( buf ) ) ) , argument ( expr ( ( head , len ) ) ) , argument ( expr ( ( encrypt , iv ) ) ) , argument ( expr ( ( iv , len ) ) ) , argument ( expr ( ( key ) ) ) , argument ( expr ( ( key , len ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( font ) ) , ( operator , = ) , name ( ( system , fonts ) , ( operator , . ) , ( message , box , font ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( servers , list , box ) , ( operator , . ) , ( dock ) ) , ( operator , = ) , name ( ( dock , style ) , ( operator , . ) , ( fill ) ) ) ) , expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( table , layout , panel ) , ( operator , . ) , ( dock ) ) , ( operator , = ) , name ( ( dock , style ) , ( operator , . ) , ( fill ) ) ) ) , expr_stmt ( expr ( call ( name ( ( this ) , ( operator , . ) , ( perform , layout ) ) , argument_list ( ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( icon ) ) , ( operator , = ) , call ( name ( ( icon ) , ( operator , . ) , ( from , handle ) ) , argument_list ( argument ( expr ( call ( name ( ( resources ) , ( operator , . ) , ( ssw ) , ( operator , . ) , ( get , hicon ) ) , argument_list ( ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( tool , tip ) , ( operator , . ) , ( set , tool , tip ) ) , argument_list ( argument ( expr ( name ( ( this ) , ( operator , . ) , ( portable , mode , check , box ) ) ) ) , argument ( expr ( call ( name ( ( i , n ) , ( operator , . ) , ( get , string ) ) , argument_list ( argument ( expr ( ( str ) ) ) ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( text ) ) , ( operator , = ) , call ( name ( ( i , n ) , ( operator , . ) , ( get , string ) ) , argument_list ( argument ( expr ( ( str ) ) ) ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( read , proxy , server ) , ( operator , != ) , ( null ) , ( operator , && ) , call ( name ( ( read , proxy , server ) , ( operator , . ) , ( equals ) ) , argument_list ( argument ( expr ( ( str ) , ( operator , + ) , call ( name ( ( config ) , ( operator , . ) , ( local , port ) , ( operator , . ) , ( to , string ) ) , argument_list ( ) ) ) ) ) ) ) ) , block ( block_content ( expr_stmt ( expr ( call ( name ( ( registry ) , ( operator , . ) , ( set , value ) ) , argument_list ( argument ( expr ( ( str ) ) ) , argument ( expr ( ( str ) ) ) ) ) ) ) ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( global ) ) ) , block ( block_content ( expr_stmt ( expr ( call ( name ( ( registry ) , ( operator , . ) , ( set , value ) ) , argument_list ( argument ( expr ( ( str ) ) ) , argument ( expr ( ( str ) ) ) ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( method ) ) , ( operator , = ) , name ( ( parts ) , index ( expr ( (  ) ) ) ) ) ) , expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( password ) ) , ( operator , = ) , name ( ( parts ) , index ( expr ( (  ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( console ) , ( operator , . ) , ( write , line ) ) , argument_list ( argument ( expr ( name ( ( e ) , ( operator , . ) , ( message ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( color ) ) , ( fly , blue ) , init ( expr ( call ( name ( ( color ) , ( operator , . ) , ( from , argb ) ) , argument_list ( argument ( expr ( ( num ) ) ) , argument ( expr ( ( num ) ) ) , argument ( expr ( ( num ) ) ) ) ) ) ) ) ) )
unit ( using ( ( raw , statistics ) , init ( expr ( name ( ( dictionary ) , argument_list ( argument ( ( string ) ) , argument ( name ( ( list ) , argument_list ( argument ( name ( ( availability , statistics ) , ( operator , . ) , ( raw , statistics , data ) ) ) ) ) ) ) ) ) ) ) , using ( ( statistics ) , init ( expr ( name ( ( dictionary ) , argument_list ( argument ( ( string ) ) , argument ( name ( ( list ) , argument_list ( argument ( name ( ( availability , statistics ) , ( operator , . ) , ( statistics , data ) ) ) ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( var ) ) , ( old , server ) , init ( expr ( ( current , server ) ) ) ) ) , if_stmt ( if ( condition ( expr ( ( old , server ) , ( operator , == ) , ( null ) ) ) , block ( block_content ( ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( context , menu , strip ) ) , ( operator , = ) , ( operator , new ) , call ( name ( ( system ) , ( operator , . ) , ( windows ) , ( operator , . ) , ( forms ) , ( operator , . ) , ( context , menu , strip ) ) , argument_list ( argument ( expr ( name ( ( this ) , ( operator , . ) , ( components ) ) ) ) ) ) ) ) , expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( main , menu ) ) , ( operator , = ) , ( operator , new ) , call ( name ( ( system ) , ( operator , . ) , ( windows ) , ( operator , . ) , ( forms ) , ( operator , . ) , ( main , menu ) ) , argument_list ( argument ( expr ( name ( ( this ) , ( operator , . ) , ( components ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( specifier , private ) , name ( ( system ) , ( operator , . ) , ( windows ) , ( operator , . ) , ( forms ) , ( operator , . ) , ( context , menu , strip ) ) ) , ( context , menu , strip ) ) ) , decl_stmt ( decl ( type ( ( specifier , private ) , name ( ( system ) , ( operator , . ) , ( windows ) , ( operator , . ) , ( forms ) , ( operator , . ) , ( main , menu ) ) ) , ( main , menu ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( target , port ) ) , ( operator , = ) , ( target , port ) ) ) )
unit ( expr_stmt ( expr ( ( operator , new ) , call ( ( handler ) , argument_list ( ) ) , ( operator , . ) , call ( ( start ) , argument_list ( argument ( expr ( ( first , packet ) ) ) , argument ( expr ( ( length ) ) ) , argument ( expr ( ( socket ) ) ) , argument ( expr ( name ( ( this ) , ( operator , . ) , ( target , port ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( this ) , ( operator , . ) , ( close ) ) , argument_list ( ) ) ) ) )
unit ( expr_stmt ( expr ( ( operator , new ) , call ( ( async , callback ) , argument_list ( argument ( expr ( ( pipe , remote , receive , callback ) ) ) ) ) ) , ( operator ,  ) , expr ( ( null ) ) ) , empty_stmt ( ) )
unit ( expr_stmt ( expr ( ( operator , new ) , call ( ( async , callback ) , argument_list ( argument ( expr ( ( pipe , connection , receive , callback ) ) ) ) ) ) , ( operator ,  ) , expr ( ( null ) ) ) , empty_stmt ( ) , expr_stmt ( expr ( ( operator , ( ) , ( exception ) , ( e ) , ( operator , ) ) , block ( expr ( call ( name ( ( logging ) , ( operator , . ) , ( log , useful , exception ) ) , argument_list ( argument ( expr ( ( e ) ) ) ) ) ) , expr ( call ( name ( ( this ) , ( operator , . ) , ( close ) ) , argument_list ( ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( this ) , ( operator , . ) , ( close ) ) , argument_list ( ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( mbed , tls ) , ( operator , . ) , ( md ) ) , argument_list ( argument ( expr ( ( input ) ) ) , argument ( expr ( ( operator , ( ) , ( uint ) , ( operator , ) ) , name ( ( input ) , ( operator , . ) , ( length ) ) ) ) , argument ( expr ( ( output ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( context , menu , strip ) ) , ( operator , = ) , ( operator , new ) , call ( name ( ( system ) , ( operator , . ) , ( windows ) , ( operator , . ) , ( forms ) , ( operator , . ) , ( context , menu , strip ) ) , argument_list ( argument ( expr ( name ( ( this ) , ( operator , . ) , ( components ) ) ) ) ) ) ) ) , expr_stmt ( expr ( name ( ( this ) , ( operator , . ) , ( main , menu ) ) , ( operator , = ) , ( operator , new ) , call ( name ( ( system ) , ( operator , . ) , ( windows ) , ( operator , . ) , ( forms ) , ( operator , . ) , ( main , menu ) ) , argument_list ( argument ( expr ( name ( ( this ) , ( operator , . ) , ( components ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( specifier , private ) , name ( ( system ) , ( operator , . ) , ( windows ) , ( operator , . ) , ( forms ) , ( operator , . ) , ( context , menu , strip ) ) ) , ( context , menu , strip ) ) ) , decl_stmt ( decl ( type ( ( specifier , private ) , name ( ( system ) , ( operator , . ) , ( windows ) , ( operator , . ) , ( forms ) , ( operator , . ) , ( main , menu ) ) ) , ( main , menu ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( bytes , read ) , ( operator , > ) , (  ) ) ) , block ( block_content ( decl_stmt ( decl ( type ( ( string ) ) , ( text ) , init ( macro ( ( string ) ) , expr ( ( operator , . ) , macro ( ( format ) , argument_list ( argument ( ( str ) ) ) ) ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( string ) ) , ( proxy ) , init ( expr ( ( str ) , ( operator , + ) , name ( ( local , end , point ) , ( operator , . ) , ( address ) ) , ( operator , + ) , ( str ) ) ) ) ) , return ( expr ( ( proxy ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( e ) , ( operator , is ) , ( socket , exception ) ) ) , block ( block_content ( decl_stmt ( decl ( type ( ( socket , exception ) ) , ( se ) , init ( expr ( ( operator , ( ) , ( socket , exception ) , ( operator , ) ) , ( e ) ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( bool ) ) , ( parsed ) , init ( expr ( call ( name ( ( ip , address ) , ( operator , . ) , ( try , parse ) ) , argument_list ( argument ( expr ( name ( ( config ) , ( operator , . ) , ( server ) ) ) ) , argument ( modifier ( ) , expr ( ( ip , address ) ) ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( ip , host , entry ) ) , ( ip , host , info ) , init ( expr ( call ( name ( ( dns ) , ( operator , . ) , ( get , host , entry ) ) , argument_list ( argument ( expr ( name ( ( config ) , ( operator , . ) , ( server ) ) ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( ( operator , new ) , call ( ( task ) , argument_list ( argument ( expr ( lambda ( parameter_list ( ) , block ( block_content ( expr ( call ( name ( ( availability , statistics ) , ( operator , . ) , ( update , latency ) ) , argument_list ( argument ( expr ( ( server ) ) ) , argument ( expr ( ( operator , ( ) , ( int ) , ( operator , ) ) , name ( ( latency ) , ( operator , . ) , ( total , milliseconds ) ) ) ) ) ) ) ) ) ) ) ) ) ) , ( operator , . ) , call ( ( start ) , argument_list ( ) ) ) ) )
unit ( expr_stmt ( expr ( ( operator , new ) , call ( ( task ) , argument_list ( argument ( expr ( lambda ( parameter_list ( ) , block ( block_content ( expr ( call ( name ( ( availability , statistics ) , ( operator , . ) , ( update , inbound , counter ) ) , argument_list ( argument ( expr ( ( server ) ) ) , argument ( expr ( ( n ) ) ) ) ) ) ) ) ) ) ) ) ) , ( operator , . ) , call ( ( start ) , argument_list ( ) ) ) ) )
unit ( expr_stmt ( expr ( ( operator , new ) , call ( ( task ) , argument_list ( argument ( expr ( lambda ( parameter_list ( ) , block ( block_content ( expr ( call ( name ( ( availability , statistics ) , ( operator , . ) , ( update , outbound , counter ) ) , argument_list ( argument ( expr ( ( server ) ) ) , argument ( expr ( ( n ) ) ) ) ) ) ) ) ) ) ) ) ) , ( operator , . ) , call ( ( start ) , argument_list ( ) ) ) ) )
unit ( decl ( type ( ( specifier , public ) , ( specifier , extern ) , ( specifier , static ) , ( void ) ) , ( ss , sha , hmac , ex ) , argument_list ( argument ( expr ( name ( ( byte ) , index ( ) ) , ( key ) ) ) , argument ( expr ( ( uint ) , ( keylen ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( controller ) , ( operator , . ) , ( get , current , strategy ) ) , argument_list ( ) ) , ( operator , . ) , call ( ( update , latency ) , argument_list ( argument ( expr ( name ( ( this ) , ( operator , . ) , ( server ) ) ) ) , argument ( expr ( ( latency ) ) ) ) ) ) ) )
unit ( decl_stmt ( decl ( type ( ( registry , key ) ) , ( reg , hkcu ) , init ( expr ( name ( ( registry ) , ( operator , . ) , ( current , user ) ) ) ) ) ) , decl_stmt ( decl ( type ( ( registry , key ) ) , ( reg , themes , personalize ) , init ( expr ( call ( name ( ( reg , hkcu ) , ( operator , . ) , ( open , sub , key ) ) , argument_list ( argument ( expr ( ( str ) ) ) , argument ( expr ( ( false ) ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( ( retval ) , ( operator , = ) , call ( name ( ( ras ) , ( operator , . ) , ( ras , enum , entries ) ) , argument_list ( argument ( expr ( ( null ) ) ) , argument ( expr ( ( null ) ) ) , argument ( expr ( ( names ) ) ) , argument ( modifier ( ) , expr ( ( lp , size ) ) ) , argument ( modifier ( ) , expr ( ( lp , names ) ) ) ) ) ) ) )
unit ( lock ( init ( expr ( ( locker ) ) ) , block ( block_content ( expr_stmt ( expr ( ( encryptor ) , ( operator , = ) , ( operator , new ) , call ( ( polar , ssl , encryptor ) , argument_list ( argument ( expr ( ( str ) ) ) , argument ( expr ( ( str ) ) ) ) ) ) ) , expr_stmt ( expr ( ( decryptor ) , ( operator , = ) , ( operator , new ) , call ( ( polar , ssl , encryptor ) , argument_list ( argument ( expr ( ( str ) ) ) , argument ( expr ( ( str ) ) ) ) ) ) ) ) ) ) )
unit ( expr_stmt ( expr ( call ( name ( ( polipo , runner ) , ( operator , . ) , ( start ) ) , argument_list ( argument ( expr ( call ( name ( ( config ) , ( operator , . ) , ( get , current , server ) ) , argument_list ( ) ) ) ) ) ) ) ) , expr_stmt ( expr ( ( local ) , ( operator , = ) , ( operator , new ) , call ( ( local ) , argument_list ( argument ( expr ( call ( name ( ( config ) , ( operator , . ) , ( get , current , server ) ) , argument_list ( ) ) ) ) ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( operator , ! ) , call ( name ( ( int ) , ( operator , . ) , ( try , parse ) ) , argument_list ( argument ( expr ( name ( ( locs ) , index ( expr ( (  ) ) ) ) ) ) , argument ( modifier ( ) , expr ( ( target , port ) ) ) ) ) ) ) , block ( block_content ( throw ( expr ( ( operator , new ) , call ( ( exception ) , argument_list ( argument ( expr ( ( str ) , ( operator , + ) , ( line ) ) ) ) ) ) ) ) ) ) ) , block ( block_content ( expr_stmt ( expr ( ( target , port ) , ( operator , = ) , ( num ) ) ) ) ) )
unit ( if_stmt ( if ( condition ( expr ( ( operator , ! ) , call ( name ( ( int ) , ( operator , . ) , ( try , parse ) ) , argument_list ( argument ( expr ( name ( ( locs ) , index ( expr ( (  ) ) ) ) ) ) , argument ( modifier ( ) , expr ( ( target , port ) ) ) ) ) ) ) , block ( block_content ( throw ( expr ( ( operator , new ) , call ( ( exception ) , argument_list ( argument ( expr ( ( str ) , ( operator , + ) , ( line ) ) ) ) ) ) ) ) ) ) ) , block ( block_content ( expr_stmt ( expr ( ( target , port ) , ( operator , = ) , ( num ) ) ) ) ) )
