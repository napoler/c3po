bool [ ] = wave [ ] [ ] ; bool [ ] = wave [ ] [ ] ; for ( int = 0 ; < t ; + + ) if ( [ ] ) { bool [ ] prop = propagator [ d ] [ ] ;
for ( int = 0 ; < t & & ! b ; + + ) if ( [ ] ) b = prop [ ] ;

propagator [ x ] [ y ] [ t ] = new int [ list . count ] ; for ( int c = 0 ; c < list . count ; c + + ) propagator [ x ] [ y ] [ t ] [ c ] = list [ c ] ;
int , ;
if ( < 0 ) + = fmy ; else if ( > = fmy ) - = fmy ; if ( ! periodic & & ( + n > fmx | | + n > fmy ) ) continue ; bool [ ] = wave [ ] [ ] ; bool [ ] = wave [ ] [ ] ; int [ ] [ ] p = propagator [ n - 1 - dx ] [ n - 1 - dy ] ;
if ( ! [ ] ) continue ;
int [ ] prop = p [ ] ; for ( int = 0 ; < prop . length & & ! b ; + + ) b = [ prop [ ] ] ;
changes [ ] [ ] = true ;
[ ] = false ;
weights = temp _ stationary . to _ array ( ) ; propagator = new int [ NUM ] [ ] [ ] ;


protected int [ ] [ ] [ ] propagator ; int [ ] [ ] [ ] compatible ;
tuple < int , int > [ ] stack ; int stacksize ;
protected double [ ] weights ; double [ ] weight _ log _ weights ; int [ ] sums _ of _ ones ; double sum _ of _ weights , sum _ of _ weight _ log _ weights , starting _ entropy ; double [ ] sums _ of _ weights , sums _ of _ weight _ log _ weights , entropies ; protected model ( int width , int height )
compatible = new int [ wave . length ] [ ] [ ] ; for ( int i = 0 ; i < wave . length ; i + + ) { wave [ i ] = new bool [ t ] ; compatible [ i ] = new int [ t ] [ ] ; for ( int t = 0 ; t < t ; t + + ) compatible [ i ] [ t ] = new int [ NUM ] ; } weight _ log _ weights = new double [ t ] ; sum _ of _ weights = 0 ; sum _ of _ weight _ log _ weights = 0 ; for ( int t = 0 ; t < t ; t + + ) { weight _ log _ weights [ t ] = weights [ t ] * math . log ( weights [ t ] ) ; sum _ of _ weights + = weights [ t ] ; sum _ of _ weight _ log _ weights + = weight _ log _ weights [ t ] ; } starting _ entropy = math . log ( sum _ of _ weights ) - sum _ of _ weight _ log _ weights / sum _ of _ weights ; sums _ of _ ones = new int [ fmx * fmy ] ; sums _ of _ weights = new double [ fmx * fmy ] ; sums _ of _ weight _ log _ weights = new double [ fmx * fmy ] ; entropies = new double [ fmx * fmy ] ; stack = new tuple < int , int > [ wave . length * t ] ;

if ( on _ boundary ( i % fmx , i / fmx ) ) continue ; int amount = sums _ of _ ones [ i ] ; if ( amount = = 0 ) return false ; double entropy = entropies [ i ] ; if ( amount > 1 & & entropy < = min )

if ( entropy + noise < min )
for ( int t = 0 ; t < t ; t + + ) distribution [ t ] = wave [ argmin ] [ t ] ? weights [ t ] : 0 ;
bool [ ] w = wave [ argmin ] ; for ( int t = 0 ; t < t ; t + + ) if ( w [ t ] ! = ( t = = r ) ) ban ( argmin , t ) ;
if ( wave = = null ) init ( ) ;
protected void ban ( int i , int t )
wave [ i ] [ t ] = false ; int [ ] comp = compatible [ i ] [ t ] ; for ( int d = 0 ; d < NUM ; d + + ) comp [ d ] = 0 ; stack [ stacksize ] = new tuple < int , int > ( i , t ) ;
double sum = sums _ of _ weights [ i ] ; entropies [ i ] + = sums _ of _ weight _ log _ weights [ i ] / sum - math . log ( sum ) ; sums _ of _ ones [ i ] - = 1 ; sums _ of _ weights [ i ] - = weights [ t ] ; sums _ of _ weight _ log _ weights [ i ] - = weight _ log _ weights [ t ] ; sum = sums _ of _ weights [ i ] ; entropies [ i ] - = sums _ of _ weight _ log _ weights [ i ] / sum - math . log ( sum ) ;
for ( int t = 0 ; t < t ; t + + ) { wave [ i ] [ t ] = true ; for ( int d = 0 ; d < NUM ; d + + ) compatible [ i ] [ t ] [ d ] = propagator [ opposite [ d ] ] [ t ] . length ; } sums _ of _ ones [ i ] = weights . length ; sums _ of _ weights [ i ] = sum _ of _ weights ; sums _ of _ weight _ log _ weights [ i ] = sum _ of _ weight _ log _ weights ; entropies [ i ] = starting _ entropy ;
protected abstract bool on _ boundary ( int x , int y ) ;
base . weights = new double [ t ] ;
base . weights [ counter ] = weights [ w ] ;

propagator = new int [ NUM ] [ ] [ ] ; for ( int d = 0 ; d < NUM ; d + + )
propagator [ d ] = new int [ t ] [ ] ;
for ( int = 0 ; < t ; + + ) if ( agrees ( patterns [ t ] , patterns [ ] , dx [ d ] , dy [ d ] ) ) list . add ( ) ; propagator [ d ] [ t ] = new int [ list . count ] ; for ( int c = 0 ; c < list . count ; c + + ) propagator [ d ] [ t ] [ c ] = list [ c ] ;
protected override bool on _ boundary ( int x , int y ) = > ! periodic & & ( x + n > fmx | | y + n > fmy | | x < 0 | | y < 0 ) ;

for ( int j = 0 ; j < a . length ; j + + ) a [ j ] = 1 ;
for ( int j = 0 ; j < a . length ; j + + ) a [ j ] / = sum ;
while ( i < a . length )
public static t get < t > ( this x _ element xelem , string attribute , t default _ t = default ( t ) )
x _ attribute a = xelem . attribute ( attribute ) ; return a = = null ? default _ t : ( t ) type _ descriptor . get _ converter ( typeof ( t ) ) . convert _ from _ invariant _ string ( a . value ) ;

x _ element xroot = x _ document . load ( $ STR ) . root ; tilesize = xroot . get ( STR , NUM ) ; bool unique = xroot . get ( STR , false ) ;
x _ element xsubset = xroot . element ( STR ) . elements ( STR ) . first _ or _ default ( x = > x . get < string > ( STR ) = = subset _ name ) ; if ( xsubset = = null ) console . write _ line ( $ STR ) ; else subset = xsubset . elements ( STR ) . select ( x = > x . get < string > ( STR ) ) . to _ list ( ) ; } color [ ] tile ( func < int , int , color > f )
color [ ] rotate ( color [ ] array ) = > tile ( ( x , y ) = > array [ tilesize - 1 - y + x * tilesize ] ) ;
foreach ( x _ element xtile in xroot . element ( STR ) . elements ( STR ) )
protected override void propagate ( ) { while ( stacksize > 0 ) { int = stack [ stacksize - 1 ] ; changes [ ] = false ; stacksize - - ; bool [ ] = wave [ ] ; int = % fmx , = / fmx ; for ( int d = 0 ; d < NUM ; d + + ) { int = , = ;
if ( = = fmx - 1 ) { if ( ! periodic ) continue ; else = 0 ; } else = + 1 ;
if ( = = 0 ) { if ( ! periodic ) continue ; else = fmy - 1 ; } else = - 1 ;
if ( = = 0 ) { if ( ! periodic ) continue ; else = fmx - 1 ; } else = - 1 ; } else { if ( = = fmy - 1 ) { if ( ! periodic ) continue ; else = 0 ; } else = + 1 ; } int = + * fmx ; bool [ ] = wave [ ] ; int [ ] [ ] prop = propagator [ d ] ; for ( int = 0 ; < t ; + + ) if ( [ ] ) { bool b = false ; int [ ] p = prop [ ] ; for ( int l = 0 ; l < p . length & & ! b ; l + + ) b = [ p [ l ] ] ;
change ( ) ;
} } protected override bool on _ boundary ( int i ) = > false ;
color [ ] tile = tiles [ observed [ x + y * fmx ] ] ;
byte [ ] pattern ( func < int , int , byte > f )
byte [ ] pattern _ from _ sample ( int x , int y ) = > pattern ( ( dx , dy ) = > sample [ ( x + dx ) % smx , ( y + dy ) % smy ] ) ; byte [ ] rotate ( byte [ ] p ) = > pattern ( ( x , y ) = > p [ n - 1 - y + x * n ] ) ; byte [ ] reflect ( byte [ ] p ) = > pattern ( ( x , y ) = > p [ n - 1 - x + y * n ] ) ; long index ( byte [ ] p )
byte [ ] pattern _ from _ index ( long ind )
protected override bool on _ boundary ( int i ) = > ! periodic & & ( i % fmx + n > fmx | | i / fmx + n > fmy ) ; override protected void propagate ( ) {   while ( stacksize > 0 ) { int = stack [ stacksize - 1 ] ; stacksize - - ; changes [ ] = false ; bool [ ] = wave [ ] ; int = % fmx , = / fmx ;
int = + dx ;
int = + dy ;
int = + * fmx ; bool [ ] = wave [ ] ; int [ ] [ ] prop = propagator [ n - 1 - dx ] [ n - 1 - dy ] ; for ( int = 0 ; < t ; + + ) if ( [ ] ) { bool b = false ; int [ ] p = prop [ ] ; for ( int l = 0 ; l < p . length & & ! b ; l + + ) b = [ p [ l ] ] ;
change ( ) ;

color c = colors [ patterns [ observed [ x - dx + ( y - dy ) * fmx ] ] [ dx + dy * n ] ] ;
for ( int i = 0 ; i < wave . length ; i + + )
int s = sx + sy * fmx ; if ( on _ boundary ( s ) ) continue ; for ( int t = 0 ; t < t ; t + + ) if ( wave [ s ] [ t ] )
bitmap _ data [ i ] = unchecked ( ( int ) 0 xff | ( ( r / contributors ) < < NUM ) | ( ( g / contributors ) < < NUM ) | b / contributors ) ;
for ( int t = 0 ; t < t ; t + + ) if ( t ! = ground ) wave [ x + ( fmy - 1 ) * fmx ] [ t ] = false ; change ( x + ( fmy - 1 ) * fmx ) ;
wave [ x + y * fmx ] [ ground ] = false ; change ( x + y * fmx ) ; } } propagate ( ) ; } } }
using system _ xml _ linq ;
x _ document xdoc = x _ document . load ( STR ) ;
foreach ( x _ element xelem in xdoc . root . elements ( STR , STR ) )

string name = xelem . get < string > ( STR ) ;
if ( xelem . name = = STR ) model = new overlapping _ model ( name , xelem . get ( STR , 2 ) , xelem . get ( STR , NUM ) , xelem . get ( STR , NUM ) , xelem . get ( STR , true ) , xelem . get ( STR , false ) , xelem . get ( STR , NUM ) , xelem . get ( STR , 0 ) ) ; else if ( xelem . name = = STR ) model = new simple _ tiled _ model ( name , xelem . get < string > ( STR ) , xelem . get ( STR , NUM ) , xelem . get ( STR , NUM ) , xelem . get ( STR , false ) , xelem . get ( STR , false ) ) ;
for ( int i = 0 ; i < xelem . get ( STR , 2 ) ; i + + )
bool finished = model . run ( seed , xelem . get ( STR , 0 ) ) ;
protected bool [ ] [ ] wave ;
protected int [ ] observed ; protected bool [ ] changes ; protected int [ ] stack ; protected int stacksize ;
protected int fmx , fmy , t ;
wave = new bool [ fmx * fmy ] [ ] ; changes = new bool [ fmx * fmy ] ; stack = new int [ fmx * fmy ] ; stacksize = 0 ;
protected abstract void propagate ( ) ;
if ( on _ boundary ( i ) ) continue ; bool [ ] w = wave [ i ] ; int amount = 0 ; double sum = 0 ;
double main _ sum = 0 ; double log _ sum = math . log ( sum ) ;
argmin = i ;
if ( argmin = = - 1 )
observed = new int [ fmx * fmy ] ; for ( int i = 0 ; i < wave . length ; i + + ) for ( int t = 0 ; t < t ; t + + ) if ( wave [ i ] [ t ] ) { observed [ i ] = t ; break ; }
for ( int t = 0 ; t < t ; t + + ) distribution [ t ] = wave [ argmin ] [ t ] ? stationary [ t ] : 0 ;
for ( int t = 0 ; t < t ; t + + ) wave [ argmin ] [ t ] = t = = r ; change ( argmin ) ;
propagate ( ) ;
for ( int i = 0 ; i < wave . length ; i + + )
for ( int t = 0 ; t < t ; t + + ) wave [ i ] [ t ] = true ; changes [ i ] = false ;
protected abstract bool on _ boundary ( int i ) ;
else { weights . add ( ind , 1 ) ; ordering . add ( ind ) ; }
foreach ( int w in ordering )
if ( ! b )
long w = stuff . power ( c , n * n ) ;
func < byte [ ] , long > index = p = > { long result = 0 , power = 1 ;
func < long , byte [ ] > pattern _ from _ index = ind = > { long residue = ind , power = w ;
int contributors _ nb = 0 , r = 0 , g = 0 , b = 0 ;
for ( int t = 0 ; t < t ; t + + ) if ( wave [ sx ] [ sy ] [ t ] ) { contributors _ nb + + ; color color = colors [ patterns [ t ] [ dx + dy * n ] ] ;
for ( int t = 0 ; t < t ; t + + ) if ( w [ t ] )
for ( int t = 0 ; t < t ; t + + ) if ( w [ t ] ) main _ sum + = stationary [ t ] * log _ prob [ t ] ;
if ( argminx = = - 1 & & argminy = = - 1 ) { observed = new int [ fmx ] [ ] ; for ( int x = 0 ; x < fmx ; x + + ) { observed [ x ] = new int [ fmy ] ; for ( int y = 0 ; y < fmy ; y + + ) for ( int t = 0 ; t < t ; t + + ) if ( wave [ x ] [ y ] [ t ] ) { observed [ x ] [ y ] = t ; break ; } } return true ; }
public overlapping _ model ( string name , int n , int width , int height , bool periodic _ input , bool periodic _ output , int symmetry , int ground ) : base ( width , height )

int [ ] bitmap _ data = new int [ result . height * result . width ] ;
int contributors = 0 , r = 0 , g = 0 , b = 0 ;
contributors + + ;
bitmap _ data [ x + y * fmx ] = unchecked ( ( int ) 0 xff | ( ( r / contributors ) < < NUM ) | ( ( g / contributors ) < < NUM ) | b / contributors ) ; } var bits = result . lock _ bits ( new rectangle ( 0 , 0 , result . width , result . height ) , image _ lock _ mode . write _ only , pixel _ format . format _ bpp _ argb ) ; system . runtime . interop _ services . marshal . copy ( bitmap _ data , 0 , bits . scan , bitmap _ data . length ) ;
for ( int t = 0 ; t < t ; t + + ) if ( t ! = ground ) wave [ x ] [ fmy - 1 ] [ t ] = false ;
wave [ x ] [ y ] [ ground ] = false ;
} while ( propagate ( ) ) ; } } }
tilenames . add ( $ STR ) ; for ( int t = 1 ; t < cardinality ; t + + ) { tiles . add ( rotate ( tiles [ t + t - 1 ] ) ) ; tilenames . add ( $ STR ) ; }
stack [ stacksize ] = ( i , t ) ;

double sum = sums _ of _ weights [ i ] ; entropies [ i ] = math . log ( sum ) - sums _ of _ weight _ log _ weights [ i ] / sum ;
public static int random ( this double [ ] a , double r ) { double sum = a . sum ( ) ; for ( int j = 0 ; j < a . length ; j + + ) a [ j ] / = sum ; int i = 0 ; double x = 0 ; while ( i < a . length ) { x + = a [ i ] ; if ( r < = x ) return i ; i + + ; } return 0 ; } public static long power ( int a , int n ) { long product = 1 ; for ( int i = 0 ; i < n ; i + + ) product * = a ; return product ; } public static t get < t > ( this x _ element xelem , string attribute , t default _ t = default ( t ) ) { x _ attribute a = xelem . attribute ( attribute ) ; return a = = null ? default _ t : ( t ) type _ descriptor . get _ converter ( typeof ( t ) ) . convert _ from _ invariant _ string ( a . value ) ; } public static i _ enumerable < x _ element > elements ( this x _ element x , params string [ ] names ) = > x . elements ( ) . where ( xelem = > names . any ( s = > s = = xelem . name ) ) ;

static void main ( ) { stopwatch sw = stopwatch . start _ new ( ) ; random random = new random ( ) ; x _ document xdoc = x _ document . load ( STR ) ; int counter = 1 ; foreach ( x _ element xelem in xdoc . root . elements ( STR , STR ) ) { model model ; string name = xelem . get < string > ( STR ) ; console . write _ line ( $ STR ) ; if ( xelem . name = = STR ) model = new overlapping _ model ( name , xelem . get ( STR , 2 ) , xelem . get ( STR , NUM ) , xelem . get ( STR , NUM ) , xelem . get ( STR , true ) , xelem . get ( STR , false ) , xelem . get ( STR , NUM ) , xelem . get ( STR , 0 ) ) ; else if ( xelem . name = = STR ) model = new simple _ tiled _ model ( name , xelem . get < string > ( STR ) , xelem . get ( STR , NUM ) , xelem . get ( STR , NUM ) , xelem . get ( STR , false ) , xelem . get ( STR , false ) ) ; else continue ; for ( int i = 0 ; i < xelem . get ( STR , 2 ) ; i + + ) { for ( int k = 0 ; k < NUM ; k + + ) { console . write ( STR ) ; int seed = random . next ( ) ; bool finished = model . run ( seed , xelem . get ( STR , 0 ) ) ; if ( finished ) { console . write _ line ( STR ) ; model . graphics ( ) . save ( $ STR ) ; if ( model is simple _ tiled _ model & & xelem . get ( STR , false ) ) system . io . file . write _ all _ text ( $ STR , ( model as simple _ tiled _ model ) . text _ output ( ) ) ; break ; } else console . write _ line ( STR ) ; } } counter + + ; } console . write _ line ( $ STR ) ; }

var temp _ propagator = new bool [ NUM ] [ ] [ ] ; propagator = new int [ NUM ] [ ] [ ] ;
temp _ propagator [ d ] = new bool [ t ] [ ] ; propagator [ d ] = new int [ t ] [ ] ; for ( int t = 0 ; t < t ; t + + ) temp _ propagator [ d ] [ t ] = new bool [ t ] ;
temp _ propagator [ 0 ] [ r ] [ l ] = true ; temp _ propagator [ 0 ] [ action [ r ] [ NUM ] ] [ action [ l ] [ NUM ] ] = true ; temp _ propagator [ 0 ] [ action [ l ] [ NUM ] ] [ action [ r ] [ NUM ] ] = true ; temp _ propagator [ 0 ] [ action [ l ] [ 2 ] ] [ action [ r ] [ 2 ] ] = true ; temp _ propagator [ 1 ] [ u ] [ d ] = true ; temp _ propagator [ 1 ] [ action [ d ] [ NUM ] ] [ action [ u ] [ NUM ] ] = true ; temp _ propagator [ 1 ] [ action [ u ] [ NUM ] ] [ action [ d ] [ NUM ] ] = true ; temp _ propagator [ 1 ] [ action [ d ] [ 2 ] ] [ action [ u ] [ 2 ] ] = true ;
temp _ propagator [ 2 ] [ ] [ ] = temp _ propagator [ 0 ] [ ] [ ] ; temp _ propagator [ NUM ] [ ] [ ] = temp _ propagator [ 1 ] [ ] [ ] ; } list < int > [ ] [ ] sparse _ propagator = new list < int > [ NUM ] [ ] ; for ( int d = 0 ; d < NUM ; d + + ) { sparse _ propagator [ d ] = new list < int > [ t ] ; for ( int t = 0 ; t < t ; t + + ) sparse _ propagator [ d ] [ t ] = new list < int > ( ) ; } for ( int d = 0 ; d < NUM ; d + + ) for ( int = 0 ; < t ; + + ) { list < int > sp = sparse _ propagator [ d ] [ ] ; bool [ ] tp = temp _ propagator [ d ] [ ] ; for ( int = 0 ; < t ; + + ) if ( tp [ ] ) sp . add ( ) ; int st = sp . count ; propagator [ d ] [ ] = new int [ st ] ; for ( int st = 0 ; st < st ; st + + ) propagator [ d ] [ ] [ st ] = sp [ st ] ;
for ( int = 0 ; < t ; + + ) { if ( ! [ ] ) continue ;
int [ ] prop = propagator [ d ] [ ] ; for ( int = 0 ; < prop . length & & ! b ; + + ) b = [ prop [ ] ] ;
