b = false;\nfor (int t1 = 0; t1 < T && !b; t1++) if (wave[x1][y1][t1]) b = propagator[d][t1][t2];\nif (!b)\n{\nwave[x2][y2][t2] = false;\nchanges[x2][y2] = true;\nchange = true;\n}\n}\n}
if (!b)\n{\nwave[x2][y2][t2] = false;\nchanges[x2][y2] = true;\nchange = true;\n}\n}\n}\nreturn change;\n}
{\nList<int> list = new List<int>();\nfor (int t2 = 0; t2 < T; t2++) if (agrees(patterns[t], patterns[t2], x - N + 1, y - N + 1)) list.Add(t2);\npropagator[t][x][y] = new int[list.Count];\nfor (int c = 0; c < list.Count; c++) propagator[t][x][y][c] = list[c];\n}\n}\n}\n}\nprotected override bool OnBoundary(int x, int y) => !periodic && (x + N > FMX || y + N > FMY);
}\n}\n}\n}\nprotected override bool OnBoundary(int x, int y) => !periodic && (x + N > FMX || y + N > FMY);\noverride protected bool Propagate()\n{\nbool change = false, b;\nint x2, y2, sx, sy;\nbool[] allowed;
for (int x1 = 0; x1 < FMX; x1++) for (int y1 = 0; y1 < FMY; y1++) if (changes[x1][y1])\n{\nchanges[x1][y1] = false;\nfor (int dx = -N + 1; dx < N; dx++) for (int dy = -N + 1; dy < N; dy++)\n{\nx2 = x1 + dx;\ny2 = y1 + dy;\nsx = x2;
for (int t2 = 0; t2 < T; t2++)\n{\nif (!allowed[t2]) continue;\nb = false;\nint[] prop = propagator[t2][N - 1 - dx][N - 1 - dy];\nfor (int i1 = 0; i1 < prop.Length && !b; i1++) b = wave[x1][y1][prop[i1]];\nif (!b)\n{\nchanges[sx][sy] = true;\nchange = true;
b = false;\nint[] prop = propagator[t2][N - 1 - dx][N - 1 - dy];\nfor (int i1 = 0; i1 < prop.Length && !b; i1++) b = wave[x1][y1][prop[i1]];\nif (!b)\n{\nchanges[sx][sy] = true;\nchange = true;\nallowed[t2] = false;\n}\n}
if (!b)\n{\nchanges[sx][sy] = true;\nchange = true;\nallowed[t2] = false;\n}\n}\n}\n}\nreturn change;
change = true;\nallowed[t2] = false;\n}\n}\n}\n}\nreturn change;\n}\npublic override Bitmap Graphics()\n{
}\n}\n}\n}\nreturn change;\n}\npublic override Bitmap Graphics()\n{\nBitmap result = new Bitmap(FMX, FMY);\nint[] bitmapData = new int[result.Height * result.Width];
var tempPropagator = new bool[4][][];\npropagator = new int[4][][];\nfor (int d = 0; d < 4; d++)\n{\ntempPropagator[d] = new bool[T][];\npropagator[d] = new int[T][];\nfor (int t = 0; t < T; t++) tempPropagator[d][t] = new bool[T];\n}\nfor (int i = 0; i < wave.Length; i++) wave[i] = new bool[T];\nforeach (XElement xneighbor in xroot.Element("neighbors").Elements("neighbor"))
for (int d = 0; d < 4; d++)\n{\ntempPropagator[d] = new bool[T][];\npropagator[d] = new int[T][];\nfor (int t = 0; t < T; t++) tempPropagator[d][t] = new bool[T];\n}\nfor (int i = 0; i < wave.Length; i++) wave[i] = new bool[T];\nforeach (XElement xneighbor in xroot.Element("neighbors").Elements("neighbor"))\n{\nstring[] left = xneighbor.Get<string>("left").Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
foreach (XElement xneighbor in xroot.Element("neighbors").Elements("neighbor"))\n{\nstring[] left = xneighbor.Get<string>("left").Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\nstring[] right = xneighbor.Get<string>("right").Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\nif (subset != null && (!subset.Contains(left[0]) || !subset.Contains(right[0]))) continue;\nint L = action[firstOccurrence[left[0]]][left.Length == 1 ? 0 : int.Parse(left[1])], D = action[L][1];\nint R = action[firstOccurrence[right[0]]][right.Length == 1 ? 0 : int.Parse(right[1])], U = action[R][1];\ntempPropagator[0][R][L] = true;\ntempPropagator[0][action[R][6]][action[L][6]] = true;\ntempPropagator[0][action[L][4]][action[R][4]] = true;
protected int[] observed;\nprotected bool[] changes;\nprotected int[] stack;\nprotected int stacksize;\nprotected Random random;\nprotected int FMX, FMY, T;\nprotected bool periodic;\ndouble[] logProb;
protected Random random;\nprotected int FMX, FMY, T;\nprotected bool periodic;\ndouble[] logProb;\ndouble logT;\nprotected Model(int width, int height)\n{
{\nFMX = width;\nFMY = height;\nwave = new bool[FMX * FMY][];\nchanges = new bool[FMX * FMY];\nstack = new int[FMX * FMY];
stacksize = 0;\n}\nprotected abstract void Propagate();

{\namount += 1;\nsum += stationary[t];\n}\nif (sum == 0) return false;

{\nmin = entropy + noise;\nargmin = i;\n}\n}\nif (argmin == -1)\n{\nobserved = new int[FMX * FMY];\nfor (int i = 0; i < wave.Length; i++) for (int t = 0; t < T; t++) if (wave[i][t]) { observed[i] = t; break; }
int r = distribution.Random(random.NextDouble());\nfor (int t = 0; t < T; t++) wave[argmin][t] = t == r;\nChange(argmin);\nreturn null;
return null;
Clear();\nrandom = new Random(seed);\nfor (int l = 0; l < limit || limit == 0; l++)\n{\nbool? result = Observe();\nif (result != null) return (bool)result;\nPropagate();\n}\nreturn true;\n}
{\nif (changes[i]) return;\nstack[stacksize] = i;\nstacksize++;\nchanges[i] = true;
stacksize++;\nchanges[i] = true;\n}
}\nprotected virtual void Clear()\n{\nfor (int i = 0; i < wave.Length; i++)\n{\nfor (int t = 0; t < T; t++) wave[i][t] = true;\nchanges[i] = false;
}\n}\nprotected abstract bool OnBoundary(int i);\npublic abstract System.Drawing.Bitmap Graphics();\n}
public abstract System.Drawing.Bitmap Graphics();\n}
int counter = 0;\nforeach (long w in ordering)\n{\npatterns[counter] = patternFromIndex(w);\nstationary[counter] = weights[w];\ncounter++;\n}\nfor (int i = 0; i < wave.Length; i++) wave[i] = new bool[T];\nbool agrees(byte[] p1, byte[] p2, int dx, int dy)\n{
counter++;\n}\nfor (int i = 0; i < wave.Length; i++) wave[i] = new bool[T];\nbool agrees(byte[] p1, byte[] p2, int dx, int dy)\n{\nint xmin = dx < 0 ? 0 : dx, xmax = dx < 0 ? dx + N : N, ymin = dy < 0 ? 0 : dy, ymax = dy < 0 ? dy + N : N;\nfor (int y = ymin; y < ymax; y++) for (int x = xmin; x < xmax; x++) if (p1[x + N * y] != p2[x - dx + N * (y - dy)]) return false;\nreturn true;\n};\nfor (int x = 0; x < 2 * N - 1; x++)
bool agrees(byte[] p1, byte[] p2, int dx, int dy)\n{\nint xmin = dx < 0 ? 0 : dx, xmax = dx < 0 ? dx + N : N, ymin = dy < 0 ? 0 : dy, ymax = dy < 0 ? dy + N : N;\nfor (int y = ymin; y < ymax; y++) for (int x = xmin; x < xmax; x++) if (p1[x + N * y] != p2[x - dx + N * (y - dy)]) return false;\nreturn true;\n};\nfor (int x = 0; x < 2 * N - 1; x++)\n{
{\npropagator[x] = new int[2 * N - 1][][];\nfor (int y = 0; y < 2 * N - 1; y++)\n{\npropagator[x][y] = new int[T][];\nfor (int t = 0; t < T; t++)\n{\nList<int> list = new List<int>();\nfor (int t2 = 0; t2 < T; t2++) if (agrees(patterns[t], patterns[t2], x - N + 1, y - N + 1)) list.Add(t2);
for (int t = 0; t < T; t++)\n{\nList<int> list = new List<int>();\nfor (int t2 = 0; t2 < T; t2++) if (agrees(patterns[t], patterns[t2], x - N + 1, y - N + 1)) list.Add(t2);\npropagator[x][y][t] = new int[list.Count];\nfor (int c = 0; c < list.Count; c++) propagator[x][y][t][c] = list[c];\n}\n}\n}\n}
}\n}\n}\n}\nprotected override bool OnBoundary(int i) => !periodic && (i % FMX + N > FMX || i / FMX + N > FMY);\noverride protected void Propagate()\n{\nwhile (stacksize > 0)\n{\nint i1 = stack[stacksize - 1];
public override Bitmap Graphics()\n{\nBitmap result = new Bitmap(FMX, FMY);\nint[] bitmapData = new int[result.Height * result.Width];\nif (observed != null)\n{\nfor (int y = 0; y < FMY; y++)\n{\nint dy = y < FMY - N + 1 ? 0 : N - 1;\nfor (int x = 0; x < FMX; x++)
using System.Linq;\nusing System.ComponentModel;\nstatic class Stuff\n{\npublic static int Random(this double[] a, double r)\n{\ndouble sum = a.Sum();\nif (sum == 0)
sum = a.Sum();\n}\nfor (int j = 0; j < a.Count(); j++) a[j] /= sum;\nint i = 0;\ndouble x = 0;\nwhile (i < a.Count())\n{\nx += a[i];\nif (r <= x) return i;\ni++;
int i = 0;\ndouble x = 0;\nwhile (i < a.Count())\n{\nx += a[i];\nif (r <= x) return i;\ni++;\n}\nreturn 0;\n}
{\nx += a[i];\nif (r <= x) return i;\ni++;\n}\nreturn 0;\n}\npublic static long Power(int a, int n)\n{\nlong product = 1;
{\nstring s = ((XmlElement)node).GetAttribute(attribute);\nvar converter = TypeDescriptor.GetConverter(typeof(T));\nreturn s == "" ? defaultT : (T)converter.ConvertFromInvariantString(s);\n}\n}
}\n}
using System.Linq;\nusing System.Drawing;\nusing System.Drawing.Imaging;\nusing System.Collections.Generic;\nclass SimpleTiledModel : Model\n{\nint[][][] propagator;\nList<Color[]> tiles;\nList<string> tilenames;
List<string> subset = null;\nif (subsetName != default(string))\n{\nsubset = new List<string>();\nforeach (XmlNode xsubset in xnode.NextSibling.NextSibling.ChildNodes) \nif (xsubset.NodeType != XmlNodeType.Comment && xsubset.Get<string>("name") == subsetName)\nforeach (XmlNode stile in xsubset.ChildNodes) subset.Add(stile.Get<string>("name"));\n}\nFunc<Func<int, int, Color>, Color[]> tile = f =>\n{
{\nColor[] result = new Color[tilesize * tilesize];\nfor (int y = 0; y < tilesize; y++) for (int x = 0; x < tilesize; x++) result[x + y * tilesize] = f(x, y);\nreturn result;\n};\nFunc<Color[], Color[]> rotate = array => tile((x, y) => array[tilesize - 1 - y + x * tilesize]);\ntiles = new List<Color[]>();\ntilenames = new List<string>();\nvar tempStationary = new List<double>();\nList<int[]> action = new List<int[]>();
tiles = new List<Color[]>();\ntilenames = new List<string>();\nvar tempStationary = new List<double>();\nList<int[]> action = new List<int[]>();\nDictionary<string, int> firstOccurrence = new Dictionary<string, int>();\nforeach (XmlNode xtile in xnode.ChildNodes)

if (d == 0)\n{\nif (x2 == 0)\n{\nif (!periodic) continue;\nelse x1 = FMX - 1;\n}\nelse x1 = x2 - 1;\n}\nelse if (d == 1)
}\nelse if (d == 1)\n{\nif (y2 == FMY - 1)\n{\nif (!periodic) continue;\nelse y1 = 0;\n}\nelse y1 = y2 + 1;\n}
}\nelse if (d == 2)\n{\nif (x2 == FMX - 1)\n{\nif (!periodic) continue;\nelse x1 = 0;\n}\nelse x1 = x2 + 1;\n}
if (!b)\n{\nchanges[x2][y2] = true;\nchange = true;\nw2[t2] = false;\n}\n}\n}\nreturn change;
w2[t2] = false;\n}\n}\n}\nreturn change;\n}\nprotected override bool OnBoundary(int x, int y) => false;\npublic override Bitmap Graphics()\n{\nBitmap result = new Bitmap(FMX * tilesize, FMY * tilesize);
public override Bitmap Graphics()\n{\nBitmap result = new Bitmap(FMX * tilesize, FMY * tilesize);\nint[] bitmapData = new int[result.Height * result.Width];\nif (observed != null)\n{\nfor (int x = 0; x < FMX; x++) for (int y = 0; y < FMY; y++)\n{\nColor[] tile = tiles[observed[x][y]];\nfor (int yt = 0; yt < tilesize; yt++) for (int xt = 0; xt < tilesize; xt++)
for (int yt = 0; yt < tilesize; yt++) for (int xt = 0; xt < tilesize; xt++)\n{\nColor c = tile[xt + yt * tilesize];\nbitmapData[x * tilesize + xt + (y * tilesize + yt) * FMX * tilesize] =\nunchecked((int)0xff000000 | (c.R << 16) | (c.G << 8) | c.B);\n}\n}\n}\nelse\n{
{\nbyte[] result = new byte[N * N];\nfor (int y = 0; y < N; y++) for (int x = 0; x < N; x++) result[x + y * N] = f(x, y);\nreturn result;\n};\nFunc<int, int, byte[]> patternFromSample = (x, y) => pattern((dx, dy) => sample[(x + dx) % SMX, (y + dy) % SMY]);\nFunc<byte[], byte[]> rotate = p => pattern((x, y) => p[N - 1 - y + x * N]);\nFunc<byte[], byte[]> reflect = p => pattern((x, y) => p[N - 1 - x + y * N]);\nFunc<byte[], long> index = p =>\n{
{\nlong result = 0, power = 1;\nfor (int i = 0; i < p.Length; i++)\n{\nresult += p[p.Length - 1 - i] * power;\npower *= C;\n}\nreturn result;\n};\nFunc<long, byte[]> patternFromIndex = ind =>
{\nlong residue = ind, power = W;\nbyte[] result = new byte[N * N];\nfor (int i = 0; i < result.Length; i++)\n{\npower /= C;\nint count = 0;\nwhile (residue >= power)\n{\nresidue -= power;
for (int dx = -N + 1; dx < N; dx++) for (int dy = -N + 1; dy < N; dy++)\n{\nx2 = x1 + dx;\nif (x2 < 0) x2 += FMX;\nelse if (x2 >= FMX) x2 -= FMX;\ny2 = y1 + dy;\nif (y2 < 0) y2 += FMY;\nelse if (y2 >= FMY) y2 -= FMY;\nif (!periodic && (x2 + N > FMX || y2 + N > FMY)) continue;\nbool[] w1 = wave[x1][y1];
if (x2 < 0) x2 += FMX;\nelse if (x2 >= FMX) x2 -= FMX;\ny2 = y1 + dy;\nif (y2 < 0) y2 += FMY;\nelse if (y2 >= FMY) y2 -= FMY;\nif (!periodic && (x2 + N > FMX || y2 + N > FMY)) continue;\nbool[] w1 = wave[x1][y1];\nbool[] w2 = wave[x2][y2];\nint[][] p = propagator[N - 1 - dx][N - 1 - dy];\nfor (int t2 = 0; t2 < T; t2++)
if (y2 < 0) y2 += FMY;\nelse if (y2 >= FMY) y2 -= FMY;\nif (!periodic && (x2 + N > FMX || y2 + N > FMY)) continue;\nbool[] w1 = wave[x1][y1];\nbool[] w2 = wave[x2][y2];\nint[][] p = propagator[N - 1 - dx][N - 1 - dy];\nfor (int t2 = 0; t2 < T; t2++)\n{\nif (!w2[t2]) continue;\nb = false;
if (!b)\n{\nchanges[x2][y2] = true;\nchange = true;\nw2[t2] = false;\n}\n}\n}\n}
w2[t2] = false;\n}\n}\n}\n}\nreturn change;\n}\npublic override Bitmap Graphics()\n{\nBitmap result = new Bitmap(FMX, FMY);
}\npublic override Bitmap Graphics()\n{\nBitmap result = new Bitmap(FMX, FMY);\nint[] bitmapData = new int[result.Height * result.Width];\nif (observed != null)\n{\nfor (int y = 0; y < FMY; y++)\n{\nint dy = y < FMY - N + 1 ? 0 : N - 1;
bitmapData[x + y * FMX] = unchecked((int)0xff000000 | (c.R << 16) | (c.G << 8) | c.B);\n}\n}\n}\nelse\n{\nfor (int y = 0; y < FMY; y++) for (int x = 0; x < FMX; x++)\n{\nint contributors = 0, r = 0, g = 0, b = 0;
{\nint contributors = 0, r = 0, g = 0, b = 0;\nfor (int dy = 0; dy < N; dy++) for (int dx = 0; dx < N; dx++)\n{\nint sx = x - dx;\nif (sx < 0) sx += FMX;\nint sy = y - dy;\nif (sy < 0) sy += FMY;\nif (OnBoundary(sx, sy)) continue;
{\ncontributors++;\nColor color = colors[patterns[t][dx + dy * N]];\nr += color.R;\ng += color.G;\nb += color.B;\n}\n}\nbitmapData[x + y * FMX] = unchecked((int)0xff000000 | ((r / contributors) << 16) | ((g / contributors) << 8) | b / contributors);\n}
}\n}\nvar bits = result.LockBits(new Rectangle(0, 0, result.Width, result.Height), ImageLockMode.WriteOnly, PixelFormat.Format32bppArgb);\n        System.Runtime.InteropServices.Marshal.Copy(bitmapData, 0, bits.Scan0, bitmapData.Length);\n        result.UnlockBits(bits);\nreturn result;\n}\nprotected override void Clear()\n{\nbase.Clear();
for (int y = 0; y < FMY - 1; y++)\n{\nwave[x][y][ground] = false;\nchanges[x][y] = true;\n}\n}\nwhile (Propagate()) ;\n}\n}\n}

static class Program\n{\nstatic void Main()\n{\nRandom random = new Random();\nvar xdoc = new XmlDocument();\nxdoc.Load("samples.xml");\nint counter = 1;\nforeach (XmlNode xnode in xdoc.FirstChild.ChildNodes)
int counter = 1;\nforeach (XmlNode xnode in xdoc.FirstChild.ChildNodes)\n{\nif (xnode.Name == "#comment") continue;\nModel model;\nstring name = xnode.Get<string>("name");\nConsole.WriteLine($"< {name}");\nif (xnode.Name == "overlapping") model = new OverlappingModel(name, xnode.Get("N", 2), xnode.Get("width", 48), xnode.Get("height", 48), \nxnode.Get("periodicInput", true), xnode.Get("periodic", false), xnode.Get("symmetry", 8), xnode.Get("ground", 0));\nelse if (xnode.Name == "simpletiled") model = new SimpleTiledModel(name, xnode.Get<string>("subset"), 
{\nif (xnode.Name == "#comment") continue;\nModel model;\nstring name = xnode.Get<string>("name");\nConsole.WriteLine($"< {name}");\nif (xnode.Name == "overlapping") model = new OverlappingModel(name, xnode.Get("N", 2), xnode.Get("width", 48), xnode.Get("height", 48), \nxnode.Get("periodicInput", true), xnode.Get("periodic", false), xnode.Get("symmetry", 8), xnode.Get("ground", 0));\nelse if (xnode.Name == "simpletiled") model = new SimpleTiledModel(name, xnode.Get<string>("subset"), \nxnode.Get("width", 10), xnode.Get("height", 10), xnode.Get("periodic", false), xnode.Get("black", false));\nelse continue;
Model model;\nstring name = xnode.Get<string>("name");\nConsole.WriteLine($"< {name}");\nif (xnode.Name == "overlapping") model = new OverlappingModel(name, xnode.Get("N", 2), xnode.Get("width", 48), xnode.Get("height", 48), \nxnode.Get("periodicInput", true), xnode.Get("periodic", false), xnode.Get("symmetry", 8), xnode.Get("ground", 0));\nelse if (xnode.Name == "simpletiled") model = new SimpleTiledModel(name, xnode.Get<string>("subset"), \nxnode.Get("width", 10), xnode.Get("height", 10), xnode.Get("periodic", false), xnode.Get("black", false));\nelse continue;\nfor (int i = 0; i < xnode.Get("screenshots", 2); i++)\n{
Console.WriteLine($"< {name}");\nif (xnode.Name == "overlapping") model = new OverlappingModel(name, xnode.Get("N", 2), xnode.Get("width", 48), xnode.Get("height", 48), \nxnode.Get("periodicInput", true), xnode.Get("periodic", false), xnode.Get("symmetry", 8), xnode.Get("ground", 0));\nelse if (xnode.Name == "simpletiled") model = new SimpleTiledModel(name, xnode.Get<string>("subset"), \nxnode.Get("width", 10), xnode.Get("height", 10), xnode.Get("periodic", false), xnode.Get("black", false));\nelse continue;\nfor (int i = 0; i < xnode.Get("screenshots", 2); i++)\n{\nfor (int k = 0; k < 10; k++)\n{
else continue;\nfor (int i = 0; i < xnode.Get("screenshots", 2); i++)\n{\nfor (int k = 0; k < 10; k++)\n{\nConsole.Write("> ");\nint seed = random.Next();\nbool finished = model.Run(seed, xnode.Get("limit", 0));\nif (finished)\n{
{\nfor (int k = 0; k < 10; k++)\n{\nConsole.Write("> ");\nint seed = random.Next();\nbool finished = model.Run(seed, xnode.Get("limit", 0));\nif (finished)\n{\nConsole.WriteLine("DONE");\nmodel.Graphics().Save($"{counter} {name} {i}.png");
if (finished)\n{\nConsole.WriteLine("DONE");\nmodel.Graphics().Save($"{counter} {name} {i}.png");\nif (model is SimpleTiledModel && xnode.Get("textOutput", false))\nSystem.IO.File.WriteAllText($"{counter} {name} {i}.txt", (model as SimpleTiledModel).TextOutput());\nbreak;\n}\nelse Console.WriteLine("CONTRADICTION");\n}
protected double[] stationary;\nprotected int[][] observed;\nprotected Random random;\nprotected int FMX, FMY, T, limit;\nprotected bool periodic;\ndouble[] logProb;
protected Random random;\nprotected int FMX, FMY, T, limit;\nprotected bool periodic;\ndouble[] logProb;\ndouble logT;\nprotected Model(int width, int height)\n{\nFMX = width;\nFMY = height;\nwave = new bool[FMX][][];
protected bool periodic;\ndouble[] logProb;\ndouble logT;\nprotected Model(int width, int height)\n{\nFMX = width;\nFMY = height;\nwave = new bool[FMX][][];\nchanges = new bool[FMX][];\nfor (int x = 0; x < FMX; x++)
}\n}\nprotected abstract bool Propagate();\nbool? Observe()\n{\nif (OnBoundary(x, y)) continue;\nw = wave[x][y];\namount = 0;
bool? Observe()\n{\nif (OnBoundary(x, y)) continue;\nw = wave[x][y];\namount = 0;\nsum = 0;\nfor (int t = 0; t < T; t++) if (w[t])\n{\namount += 1;
for (int t = 0; t < T; t++) if (w[t])\n{\namount += 1;\nsum += stationary[t];\n}\nif (sum == 0) return false;
for (int t = 0; t < T; t++) if (w[t]) mainSum += stationary[t] * logProb[t];\nentropy = logSum - mainSum / sum;\n}\nif (entropy > 0 && entropy + noise < min)\n{\nmin = entropy + noise;\nargminx = x;\nargminy = y;\n}
}\n}\nif (argminx == -1 && argminy == -1)\n{\nobserved = new int[FMX][];\nfor (int x = 0; x < FMX; x++)\n{\nobserved[x] = new int[FMY];\nfor (int y = 0; y < FMY; y++) for (int t = 0; t < T; t++) if (wave[x][y][t])\n{
{\nobserved = new int[FMX][];\nfor (int x = 0; x < FMX; x++)\n{\nobserved[x] = new int[FMY];\nfor (int y = 0; y < FMY; y++) for (int t = 0; t < T; t++) if (wave[x][y][t])\n{\nobserved[x][y] = t;\nbreak;\n}
return true;\n}\ndouble[] distribution = new double[T];\nfor (int t = 0; t < T; t++) distribution[t] = wave[argminx][argminy][t] ? stationary[t] : 0;\nint r = distribution.Random(random.NextDouble());\nfor (int t = 0; t < T; t++) wave[argminx][argminy][t] = t == r;\nchanges[argminx][argminy] = true;\nreturn null;\n}\npublic bool Run(int seed, int limit)
int r = distribution.Random(random.NextDouble());\nfor (int t = 0; t < T; t++) wave[argminx][argminy][t] = t == r;\nchanges[argminx][argminy] = true;\nreturn null;\n}\npublic bool Run(int seed, int limit)\n{\nlogT = Math.Log(T);\nlogProb = new double[T];\nfor (int t = 0; t < T; t++) logProb[t] = Math.Log(stationary[t]);
return null;\n}\npublic bool Run(int seed, int limit)\n{\nlogT = Math.Log(T);\nlogProb = new double[T];\nfor (int t = 0; t < T; t++) logProb[t] = Math.Log(stationary[t]);\nClear();\nrandom = new Random(seed);\nfor (int l = 0; l < limit || limit == 0; l++)
}\nreturn true;\n}
{\nfor (int t = 0; t < T; t++) wave[x][y][t] = true;\nchanges[x][y] = false;\n}\n}\nprotected abstract bool OnBoundary(int x, int y);\npublic abstract System.Drawing.Bitmap Graphics();\n}
}\n}\nprotected abstract bool OnBoundary(int x, int y);\npublic abstract System.Drawing.Bitmap Graphics();\n}
public abstract System.Drawing.Bitmap Graphics();\n}
}\n}\nT = weights.Count;\nthis.ground = (ground + T) % T;\npatterns = new byte[T][];\nstationary = new double[T];\npropagator = new int[T][][][];\nint counter = 0;\nforeach (int w in weights.Keys)


Func<Func<int, int, byte>, byte[]> pattern = f =>\n{\nbyte[] result = new byte[N * N];\nfor (int y = 0; y < N; y++) for (int x = 0; x < N; x++) result[x + y * N] = f(x, y);\nreturn result;\n};\nFunc<int, int, byte[]> patternFromSample = (x, y) => pattern((dx, dy) => sample[(x + dx) % SMX, (y + dy) % SMY]);\nFunc<byte[], byte[]> rotate = p => pattern((x, y) => p[N - 1 - y + x * N]);\nFunc<byte[], byte[]> reflect = p => pattern((x, y) => p[N - 1 - x + y * N]);\nFunc<byte[], int> index = p =>
for (int i = 0; i < p.Length; i++)\n{\nresult += p[p.Length - 1 - i] * power;\npower *= C;\n}\nreturn result;\n};\nFunc<int, byte[]> patternFromIndex = ind =>\n{\nint residue = ind, power = W;
byte[] result = new byte[N * N];\nfor (int i = 0; i < result.Length; i++)\n{\npower /= C;\nint count = 0;\nwhile (residue >= power)\n{\nresidue -= power;\ncount++;\n}
for (int dy = 0; dy < N; dy++) for (int dx = 0; dx < N; dx++)\n{\nint sx = x - dx;\nif (sx < 0) sx += FMX;\nint sy = y - dy;\nif (sy < 0) sy += FMY;\nif (OnBoundary(sx, sy)) continue;\nfor (int t = 0; t < T; t++) if (wave[sx][sy][t]) contributors.Add(patterns[t][dx + dy * N]);\n}\nint r = 0, g = 0, b = 0;
r += color.R;\ng += color.G;\nb += color.B;\n}

entropy = logSum - mainSum / sum;\n}\nif (entropy > 0 && entropy + noise < min)\n{\nmin = entropy + noise;\nargminx = x;\nargminy = y;\n}\n}\nif (argminx == -1 && argminy == -1) return true;
double[] distribution = new double[T];\nfor (int t = 0; t < T; t++) distribution[t] = wave[argminx][argminy][t] ? stationary[t] : 0;\nint r = distribution.Random(random.NextDouble());\nfor (int t = 0; t < T; t++) wave[argminx][argminy][t] = t == r;\nchanges[argminx][argminy] = true;\nreturn null;\n}\npublic bool Run(int seed, int limit)\n{\nlogT = Math.Log(T);
{\nthis.N = N;\nFMX = width;\nFMY = height;\nperiodic = periodicOutput;\nvar bitmap = new Bitmap($"samples/{name}.png");\nint SMX = bitmap.Width, SMY = bitmap.Height;\nbyte[,] sample = new byte[SMX, SMY];\ncolors = new List<Color>();\nfor (int y = 0; y < SMY; y++) for (int x = 0; x < SMX; x++)
periodic = periodicOutput;\nvar bitmap = new Bitmap($"samples/{name}.png");\nint SMX = bitmap.Width, SMY = bitmap.Height;\nbyte[,] sample = new byte[SMX, SMY];\ncolors = new List<Color>();\nfor (int y = 0; y < SMY; y++) for (int x = 0; x < SMX; x++)\n{\nColor color = bitmap.GetPixel(x, y);\nint i = 0;\nforeach (var c in colors)
for (int y = 0; y < FMY; y++) for (int x = 0; x < FMX; x++)\n{\nint contributorsNb = 0, r = 0, g = 0, b = 0;\nfor (int dy = 0; dy < N; dy++) for (int dx = 0; dx < N; dx++)\n{\nint sx = x - dx;\nif (sx < 0) sx += FMX;\nint sy = y - dy;\nif (sy < 0) sy += FMY;\nif (OnBoundary(sx, sy)) continue;
for (int dy = 0; dy < N; dy++) for (int dx = 0; dx < N; dx++)\n{\nint sx = x - dx;\nif (sx < 0) sx += FMX;\nint sy = y - dy;\nif (sy < 0) sy += FMY;\nif (OnBoundary(sx, sy)) continue;\nfor (int t = 0; t < T; t++) if (wave[sx][sy][t])\n{\ncontributorsNb++;
Color color = colors[patterns[t][dx + dy * N]];\nr += color.R;\ng += color.G;\nb += color.B;\n}\n}\n                bmpData[x + y * FMX] = unchecked((int)0xff000000 | ((r / contributorsNb) << 16) | ((g / contributorsNb) << 8) | b / contributorsNb);\n}\nvar bits = result.LockBits(new Rectangle(0, 0, result.Width, result.Height), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);\n        System.Runtime.InteropServices.Marshal.Copy(bmpData, 0, bits.Scan0, bmpData.Length);
        result.UnlockBits(bits);\nreturn result;\n}\nprotected override void Clear()\n{\nbase.Clear();\nif (ground != 0)\n{\nfor (int x = 0; x < FMX; x++)\n{
changes[x][FMY - 1] = true;\nfor (int y = 0; y < FMY - 1; y++)\n{\nwave[x][y][foundation] = false;\nchanges[x][y] = true;\n}\nwhile (Propagate());\n}\n}\n}
changes[x][y] = true;\n}\nwhile (Propagate());\n}\n}\n}\n}


stacksize++;\ndouble sum = sumsOfWeights[i];\nentropies[i] += sumsOfWeightLogWeights[i] / sum - Math.Log(sum);\nsumsOfOnes[i] -= 1;\nsumsOfWeights[i] -= weights[t];\nsumsOfWeightLogWeights[i] -= weightLogWeights[t];\nsum = sumsOfWeights[i];\nentropies[i] -= sumsOfWeightLogWeights[i] / sum - Math.Log(sum);\n}\nprotected virtual void Clear()
sumsOfOnes[i] -= 1;\nsumsOfWeights[i] -= weights[t];\nsumsOfWeightLogWeights[i] -= weightLogWeights[t];\nsum = sumsOfWeights[i];\nentropies[i] -= sumsOfWeightLogWeights[i] / sum - Math.Log(sum);\n}\nprotected virtual void Clear()\n{\nfor (int i = 0; i < wave.Length; i++)\n{
}\nprotected virtual void Clear()\n{\nfor (int i = 0; i < wave.Length; i++)\n{\nfor (int t = 0; t < T; t++)\n{\nwave[i][t] = true;\nfor (int d = 0; d < 4; d++) compatible[i][t][d] = propagator[opposite[d]][t].Length;\n}
}\nreturn 0;\n}\npublic static long Power(int a, int n)\n{\nlong product = 1;\nfor (int i = 0; i < n; i++) product *= a;\nreturn product;\n}\npublic static T Get<T>(this XElement xelem, string attribute, T defaultT = default(T))

}\nelse Console.WriteLine("CONTRADICTION");\n}\n}\ncounter++;\n}\nConsole.WriteLine($"time = {sw.ElapsedMilliseconds}");\n}\n}

for (int d = 0; d < 4; d++)\n{\npropagator[d] = new bool[T][];\nfor (int t = 0; t < T; t++) propagator[d][t] = new bool[T];\n}\nfor (int x = 0; x < FMX; x++) for (int y = 0; y < FMY; y++) wave[x][y] = new bool[T];\nforeach (XmlNode xneighbor in xnode.NextSibling.ChildNodes)
}\nfor (int x = 0; x < FMX; x++) for (int y = 0; y < FMY; y++) wave[x][y] = new bool[T];\nforeach (XmlNode xneighbor in xnode.NextSibling.ChildNodes)\n{\nstring[] left = xneighbor.Get<string>("left").Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\nstring[] right = xneighbor.Get<string>("right").Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\nif (subset != null && (!subset.Contains(left[0]) || !subset.Contains(right[0]))) continue;\nint L = action[firstOccurrence[left[0]]][left.Length == 1 ? 0 : int.Parse(left[1])], D = action[L][1];\nint R = action[firstOccurrence[right[0]]][right.Length == 1 ? 0 : int.Parse(right[1])], U = action[R][1];\npropagator[0][R][L] = true;
}\nfor (int t2 = 0; t2 < T; t2++) for (int t1 = 0; t1 < T; t1++)\n{\npropagator[2][t2][t1] = propagator[0][t1][t2];\npropagator[3][t2][t1] = propagator[1][t1][t2];
}\n}\nprotected override bool Propagate()\n{\nbool change = false, b;\nfor (int x2 = 0; x2 < FMX; x2++) for (int y2 = 0; y2 < FMY; y2++) for (int d = 0; d < 4; d++)\n{\nint x1 = x2, y1 = y2;\nif (d == 0)\n{
b = false;\nfor (int t1 = 0; t1 < T && !b; t1++) if (w1[t1]) b = prop[t1];\nif (!b)\n{\nw2[t2] = false;\nchanges[x2][y2] = true;\nchange = true;
if (!b)\n{\nw2[t2] = false;\nchanges[x2][y2] = true;\nchange = true;
changes[x2][y2] = true;\nchange = true;