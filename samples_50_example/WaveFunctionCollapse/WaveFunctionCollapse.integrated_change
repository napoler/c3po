<%> <+> bool [ ] = wave [ ] [ ] ; bool [ ] = wave [ ] [ ] ; </%> for ( int = 0 ; < t ; + + ) if ( <%> <-> wave [ ] [ ] </%> [ ] ) { <%> <+> bool [ ] prop = propagator [ d ] [ ] ; </%>
for ( int = 0 ; < t & & ! b ; + + ) if ( <%> <-> wave [ ] [ ] </%> [ ] ) b = <%> <*> propagator [ d ] [ ] -> prop </%> [ ] ;
<%> <-> { propagator [ t ] = new int [ 2 * n - 1 ] [ ] [ ] ; for ( int x = 0 ; x < 2 * n - 1 ; x + + ) { propagator [ t ] [ x ] = new int [ 2 * n - 1 ] [ ] ; for ( int y = 0 ; y < 2 * n - 1 ; y + + ) </%>
propagator [ <%> <*> t -> x </%> ] [ <%> <*> x -> y </%> ] [ <%> <*> y -> t </%> ] = new int [ list . count ] ; for ( int c = 0 ; c < list . count ; c + + ) propagator [ <%> <*> t -> x </%> ] [ <%> <*> x -> y </%> ] [ <%> <*> y -> t </%> ] [ c ] = list [ c ] ;
<%> <*> int , , sx , sy ; bool [ ] allowed ; -> int , ; </%>
<%> <*> sx = ; if ( sx < 0 ) sx + = fmx ; else if ( sx > = fmx ) sx - = fmx ; sy = ; if ( sy < 0 ) sy + = fmy ; else if ( sy > = fmy ) sy - = fmy ; if ( ! periodic & & ( sx + n > fmx | | sy + n > fmy ) ) continue ; allowed = wave [ sx ] [ sy ] ; -> if ( < 0 ) + = fmy ; </%> <%> <+> else if ( > = fmy ) - = fmy ; if ( ! periodic & & ( + n > fmx | | + n > fmy ) ) continue ; bool [ ] = wave [ ] [ ] ; bool [ ] = wave [ ] [ ] ; int [ ] [ ] p = propagator [ n - 1 - dx ] [ n - 1 - dy ] ; </%>
if ( ! <%> <-> allowed </%> [ ] ) continue ;
int [ ] prop = <%> <*> propagator -> p </%> [ ] <%> <*> [ n - 1 - dx ] [ n - 1 - dy ] ; -> ; </%> for ( int = 0 ; < prop . length & & ! b ; + + ) b = <%> <-> wave [ ] [ ] </%> [ prop [ ] ] ;
changes [ <%> <-> sx </%> ] [ <%> <-> sy </%> ] = true ;
<%> <-> allowed </%> [ ] = false ;
<%> <*> stationary = temp _ stationary . to _ array ( ) ; -> weights = temp _ stationary . to _ array ( ) ; </%> <%> <+> propagator = new int [ NUM ] [ ] [ ] ; </%>
<%> <-> propagator = new int [ NUM ] [ ] [ ] ; </%>
<%> <-> for ( int i = 0 ; i < wave . length ; i + + ) wave [ i ] = new bool [ t ] ; </%>
<%> <*> protected double [ ] stationary ; -> protected int [ ] [ ] [ ] propagator ; </%> <%> <+> int [ ] [ ] [ ] compatible ; </%>
<%> <*> protected bool [ ] changes ; protected int [ ] stack ; protected int stacksize ; -> tuple < int , int > [ ] stack ; </%> <%> <+> int stacksize ; </%>
<%> <+> protected double [ ] weights ; double [ ] weight _ log _ weights ; int [ ] sums _ of _ ones ; </%> <%> <*> double [ ] -> double sum _ of _ weights , sum _ of _ weight _ </%> log <%> <+> _ weights , starting </%> _ <%> <*> prob -> entropy </%> ; <%> <*> double -> double [ ] sums _ of _ weights , sums _ of _ weight _ </%> log _ <%> <*> t -> weights , entropies </%> ; protected model ( int width , int height )
<%> <*> changes = new bool [ fmx * fmy ] ; stack = new int [ fmx * fmy ] ; -> compatible = new int [ wave . length ] [ ] [ ] ; </%> <%> <+> for ( int i = 0 ; i < wave . length ; i + + ) { wave [ i ] = new bool [ t ] ; compatible [ i ] = new int [ t ] [ ] ; for ( int t = 0 ; t < t ; t + + ) compatible [ i ] [ t ] = new int [ NUM ] ; } weight _ log _ weights = new double [ t ] ; sum _ of _ weights = 0 ; sum _ of _ weight _ log _ weights = 0 ; for ( int t = 0 ; t < t ; t + + ) { weight _ log _ weights [ t ] = weights [ t ] * math . log ( weights [ t ] ) ; sum _ of _ weights + = weights [ t ] ; sum _ of _ weight _ log _ weights + = weight _ log _ weights [ t ] ; } starting _ entropy = math . log ( sum _ of _ weights ) - sum _ of _ weight _ log _ weights / sum _ of _ weights ; sums _ of _ ones = new int [ fmx * fmy ] ; sums _ of _ weights = new double [ fmx * fmy ] ; sums _ of _ weight _ log _ weights = new double [ fmx * fmy ] ; entropies = new double [ fmx * fmy ] ; stack = new tuple < int , int > [ wave . length * t ] ; </%>
<%> <-> protected abstract void propagate ( ) ; </%>
if ( on _ boundary ( i <%> <+> % fmx , i / fmx </%> ) ) continue ; <%> <*> bool [ ] w -> int amount </%> = <%> <*> wave -> sums _ of _ ones </%> [ i ] ; <%> <*> int -> if ( </%> amount = <%> <+> = </%> 0 <%> <+> ) return false </%> ; double <%> <*> sum -> entropy </%> = <%> <*> 0 -> entropies [ i ] </%> ; <%> <*> for -> if </%> ( <%> <*> int t = 0 ; t -> amount > 1 & & entropy </%> < <%> <*> t ; t + + -> = min </%> ) <%> <-> if ( w [ t ] ) </%>
<%> <-> amount + = 1 ; sum + = stationary [ t ] ; } if ( sum = = 0 ) return false ; </%>
<%> <*> double entropy ; if ( amount = = 1 ) entropy = 0 ; else if ( amount = = t ) entropy = log _ t ; else { double main _ sum = 0 ; double log _ sum = math . log ( sum ) ; for ( int t = 0 ; t < t ; t + + ) if ( w [ t ] ) main _ sum + = stationary [ t ] * log _ prob [ t ] ; entropy = log _ sum - main _ sum / sum ; } if ( entropy > 0 & & entropy + noise < min ) -> if ( entropy + noise < min ) </%>
for ( int t = 0 ; t < t ; t + + ) distribution [ t ] = wave [ argmin ] [ t ] ? <%> <*> stationary -> weights </%> [ t ] : 0 ;
<%> <*> for ( int t = 0 ; t < t ; t + + ) -> bool [ ] w = </%> wave [ argmin ] <%> <*> [ t ] = t = = r ; change -> ; for ( int t = 0 ; t < t ; t + + ) if ( w [ t ] ! = ( t = = r ) ) ban </%> ( argmin <%> <+> , t </%> ) ;
<%> <*> log _ t = math . log ( t ) ; log _ prob = new double [ t ] ; for ( int t = 0 ; t < t ; t + + ) log _ prob [ t ] = math . log ( stationary [ t ] ) ; -> if ( wave = = null ) init ( ) ; </%>
protected void <%> <*> change -> ban </%> ( int i <%> <+> , int t </%> )
<%> <*> if ( changes [ i ] ) return ; stack [ stacksize ] = i ; -> wave [ i ] [ t ] = false ; </%> <%> <+> int [ ] comp = compatible [ i ] [ t ] ; for ( int d = 0 ; d < NUM ; d + + ) comp [ d ] = 0 ; stack [ stacksize ] = new tuple < int , int > ( i , t ) ; </%>
<%> <*> changes [ i ] = true ; -> double sum = sums _ of _ weights [ i ] ; </%> <%> <+> entropies [ i ] + = sums _ of _ weight _ log _ weights [ i ] / sum - math . log ( sum ) ; sums _ of _ ones [ i ] - = 1 ; sums _ of _ weights [ i ] - = weights [ t ] ; sums _ of _ weight _ log _ weights [ i ] - = weight _ log _ weights [ t ] ; sum = sums _ of _ weights [ i ] ; entropies [ i ] - = sums _ of _ weight _ log _ weights [ i ] / sum - math . log ( sum ) ; </%>
<%> <*> for ( int t = 0 ; t < t ; t + + ) wave [ i ] [ t ] = true ; changes [ i ] = false ; -> for ( int t = 0 ; t < t ; t + + ) </%> <%> <+> { wave [ i ] [ t ] = true ; for ( int d = 0 ; d < NUM ; d + + ) compatible [ i ] [ t ] [ d ] = propagator [ opposite [ d ] ] [ t ] . length ; } sums _ of _ ones [ i ] = weights . length ; sums _ of _ weights [ i ] = sum _ of _ weights ; sums _ of _ weight _ log _ weights [ i ] = sum _ of _ weight _ log _ weights ; entropies [ i ] = starting _ entropy ; </%>
protected abstract bool on _ boundary ( <%> <+> int x , </%> int <%> <*> i -> y </%> ) ;
<%> <*> stationary = new double [ t ] ; propagator = new int [ 2 * n - 1 ] [ ] [ ] [ ] ; -> base . weights = new double [ t ] ; </%>
<%> <*> stationary -> base . weights </%> [ counter ] = weights [ w ] ;
<%> <-> for ( int i = 0 ; i < wave . length ; i + + ) wave [ i ] = new bool [ t ] ; </%>
<%> <*> for ( int x = 0 ; x < 2 * n - 1 ; x + + ) -> propagator = new int [ NUM ] [ ] [ ] ; </%> <%> <+> for ( int d = 0 ; d < NUM ; d + + ) </%>
<%> <*> propagator [ x ] = new int [ 2 * n - 1 ] [ ] [ ] ; for ( int y = 0 ; y < 2 * n - 1 ; y + + ) { propagator [ x ] [ y ] = new int [ t ] [ ] ; -> propagator [ d ] = new int [ t ] [ ] ; </%>
for ( int = 0 ; < t ; + + ) if ( agrees ( patterns [ t ] , patterns [ ] , <%> <*> x - n + 1 -> dx [ d ] </%> , <%> <*> y - n + 1 -> dy [ d ] </%> ) ) list . add ( ) ; propagator <%> <-> [ x ] </%> [ <%> <*> y -> d </%> ] [ t ] = new int [ list . count ] ; for ( int c = 0 ; c < list . count ; c + + ) propagator <%> <-> [ x ] </%> [ <%> <*> y -> d </%> ] [ t ] [ c ] = list [ c ] ;
<%> <*> } protected override bool on _ boundary ( int i ) = > ! periodic & & ( i % fmx + n > fmx | | i / fmx + n > fmy ) ; override protected void propagate ( ) { while ( stacksize > 0 ) { int = stack [ stacksize - 1 ] ; stacksize - - ; changes [ ] = false ; bool [ ] = wave [ ] ; int = % fmx , = / fmx ; for ( int dx = - n + 1 ; dx < n ; dx + + ) for ( int dy = - n + 1 ; dy < n ; dy + + ) { int = + dx ; if ( < 0 ) + = fmx ; else if ( > = fmx ) - = fmx ; int = + dy ; if ( < 0 ) + = fmy ; else if ( > = fmy ) - = fmy ; if ( ! periodic & & ( + n > fmx | | + n > fmy ) ) continue ; int = + * fmx ; bool [ ] = wave [ ] ; int [ ] [ ] prop = propagator [ n - 1 - dx ] [ n - 1 - dy ] ; for ( int = 0 ; < t ; + + ) if ( [ ] ) { bool b = false ; int [ ] p = prop [ ] ; for ( int l = 0 ; l < p . length & & ! b ; l + + ) b = [ p [ l ] ] ; if ( ! b ) { change ( ) ; [ ] = false ; } } } } } -> protected override bool on _ boundary ( int x , int y ) = > ! periodic & & ( x + n > fmx | | y + n > fmy | | x < 0 | | y < 0 ) ; </%>
<%> <-> using system _ xml ; </%>
for ( int j = 0 ; j < a . <%> <*> count ( ) -> length </%> ; j + + ) a [ j ] = 1 ;
for ( int j = 0 ; j < a . <%> <*> count ( ) -> length </%> ; j + + ) a [ j ] / = sum ;
while ( i < a . <%> <*> count ( -> length </%> ) <%> <-> ) </%>
public static t get < t > ( this <%> <*> xml -> x </%> _ <%> <*> node node -> element xelem </%> , string attribute , t default _ t = default ( t ) )
<%> <*> string s = ( ( xml _ element ) node ) . get _ attribute ( attribute ) ; var converter = type _ descriptor . get _ converter ( typeof ( t ) ) ; return s = = STR ? default _ t : ( t ) converter . convert _ from _ invariant _ string ( s ) ; -> x _ attribute a = xelem . attribute ( attribute ) ; </%> <%> <+> return a = = null ? default _ t : ( t ) type _ descriptor . get _ converter ( typeof ( t ) ) . convert _ from _ invariant _ string ( a . value ) ; </%>
<%> <-> using system _ xml ; </%>
<%> <*> var xdoc = new xml _ document ( ) ; xdoc . load ( $ STR ) ; xml _ node xnode = xdoc . first _ child ; tilesize = xnode . get ( STR , NUM ) ; bool unique = xnode . get ( STR , false ) ; xnode = xnode . first _ child ; -> x _ element xroot = x _ document . load ( $ STR ) . root ; </%> <%> <+> tilesize = xroot . get ( STR , NUM ) ; bool unique = xroot . get ( STR , false ) ; </%>
<%> <-> subset = new list < string > ( ) ; </%> <%> <*> foreach ( xml -> x </%> _ <%> <*> node -> element </%> xsubset <%> <*> in xnode -> = xroot </%> . <%> <*> next _ sibling -> element ( STR ) </%> . <%> <*> next _ sibling -> elements ( STR ) </%> . <%> <*> child -> first </%> _ <%> <*> nodes ) -> or _ default ( x = > x . get < string > ( STR ) = = subset _ name ) ; </%> if ( xsubset <%> <-> . node _ type ! </%> = <%> <*> xml _ node _ type . comment & & xsubset -> = null ) console </%> . <%> <*> get < string > -> write _ line </%> ( <%> <+> $ </%> STR ) <%> <*> = = subset _ name ) foreach ( xml _ node stile in -> ; else subset = </%> xsubset . <%> <*> child _ nodes -> elements ( STR </%> ) <%> <-> subset </%> . <%> <*> add -> select </%> ( <%> <*> stile -> x = > x </%> . get < string > ( STR ) ) <%> <*> ; -> . to _ list ( ) ; </%> } <%> <*> func < -> color [ ] tile ( </%> func < int , int , color > <%> <*> , color [ ] > tile = f = > -> f ) </%>
<%> <-> func < </%> color [ ] <%> <*> , -> rotate ( </%> color [ ] <%> <-> > rotate = </%> array <%> <+> ) </%> = > tile ( ( x , y ) = > array [ tilesize - 1 - y + x * tilesize ] ) ;
foreach ( <%> <*> xml -> x </%> _ <%> <*> node -> element </%> xtile in <%> <*> xnode -> xroot </%> . <%> <*> child _ nodes -> element ( STR </%> ) <%> <+> . elements ( STR ) ) </%>
<%> <+> protected override void propagate ( ) { </%> <%> <*> protected override bool propagate -> while </%> ( <%> <+> stacksize > 0 </%> ) { <%> <+> int = stack [ stacksize - 1 ] ; changes [ ] = false ; stacksize - - ; bool [ ] = wave [ ] ; </%> <%> <*> bool change -> int </%> = <%> <*> false -> % fmx </%> , <%> <*> b -> = / fmx </%> ; <%> <-> for ( int = 0 ; < fmx ; + + ) for ( int = 0 ; < fmy ; + + ) </%> for ( int d = 0 ; d < NUM ; d + + ) { int = , = ;
if ( = = <%> <*> 0 -> fmx - 1 </%> ) { if ( ! periodic ) continue ; else = <%> <*> fmx - 1 -> 0 </%> ; } else = <%> <*> - -> + </%> 1 ;
if ( = = <%> <*> fmy - 1 -> 0 </%> ) { if ( ! periodic ) continue ; else = <%> <*> 0 -> fmy - 1 </%> ; } else = <%> <*> + -> - </%> 1 ;
if ( = = <%> <*> fmx - 1 -> 0 </%> ) { if ( ! periodic ) continue ; else = <%> <*> 0 -> fmx - 1 </%> ; } else = <%> <*> + -> - </%> 1 ; } else { if ( = = <%> <*> 0 -> fmy - 1 </%> ) { if ( ! periodic ) continue ; else = <%> <*> fmy - 1 -> 0 </%> ; } else = <%> <*> - -> + </%> 1 ; } <%> <*> if ( ! changes [ ] [ ] ) continue -> int = + * fmx </%> ; bool [ ] = wave <%> <-> [ ] </%> [ ] ; <%> <*> bool -> int </%> [ ] <%> <-> = wave </%> [ ] <%> <+> prop = propagator </%> [ <%> <+> d </%> ] ; for ( int = 0 ; < t ; + + ) <%> <+> if ( [ ] ) </%> { <%> <*> if ( ! [ ] ) continue -> bool b = false </%> ; <%> <*> b -> int [ ] p </%> = <%> <*> false -> prop [ ] </%> ; <%> <*> int [ ] prop -> for ( int l = 0 ; l < p . length & & ! b ; l + + ) b </%> = <%> <*> propagator -> [ p </%> [ <%> <*> d -> l </%> ] <%> <-> [ </%> ] ; <%> <-> for ( int = 0 ; < prop . length & & ! b ; + + ) b = [ prop [ ] ] ; </%>
<%> <*> changes [ ] [ ] = true ; change = true ; -> change ( ) ; </%>
<%> <-> return change ; </%> <%> <+> } </%> } protected override bool on _ boundary ( <%> <-> int x , </%> int <%> <*> y -> i </%> ) = > false ;
color [ ] tile = tiles [ observed [ x <%> <*> ] [ -> + </%> y <%> <+> * fmx </%> ] ] ;
<%> <*> func < -> byte [ ] pattern ( </%> func < int , int , byte > <%> <*> , byte [ ] > pattern = f = > -> f ) </%>
<%> <-> func < int , int , </%> byte [ ] <%> <-> > </%> pattern _ from _ sample <%> <-> = </%> ( <%> <+> int </%> x , <%> <+> int </%> y ) = > pattern ( ( dx , dy ) = > sample [ ( x + dx ) % smx , ( y + dy ) % smy ] ) ; <%> <-> func < </%> byte [ ] <%> <*> , -> rotate ( </%> byte [ ] <%> <-> > rotate = </%> p <%> <+> ) </%> = > pattern ( ( x , y ) = > p [ n - 1 - y + x * n ] ) ; <%> <-> func < </%> byte [ ] <%> <*> , -> reflect ( </%> byte [ ] <%> <-> > reflect = </%> p <%> <+> ) </%> = > pattern ( ( x , y ) = > p [ n - 1 - x + y * n ] ) ; <%> <*> func < -> long index ( </%> byte [ ] <%> <-> , long > index = </%> p <%> <*> = > -> ) </%>
<%> <-> func < long , </%> byte [ ] <%> <-> > </%> pattern _ from _ index <%> <*> = -> ( long </%> ind <%> <*> = > -> ) </%>
protected override bool on _ boundary ( <%> <-> int x , </%> int <%> <*> y -> i </%> ) = > ! periodic & & ( <%> <*> x -> i % fmx </%> + n > fmx | | <%> <*> y -> i / fmx </%> + n > fmy ) ; override protected <%> <*> bool -> void </%> propagate ( ) { <%> <-> bool change = false , b ; int , ; </%> <%> <*> for ( int = 0 ; < fmx ; + + ) for -> while </%> ( <%> <*> int = -> stacksize > </%> 0 <%> <-> ; < fmy ; + + </%> ) <%> <-> if ( changes [ ] [ ] ) </%> { <%> <*> changes -> int = stack </%> [ <%> <*> ] [ -> stacksize - 1 </%> ] <%> <-> = false </%> ; <%> <+> stacksize - - ; changes [ ] = false ; bool [ ] = wave [ ] ; int = % fmx , = / fmx ; </%>
<%> <+> int </%> = + dx ;
<%> <+> int </%> = + dy ;
<%> <*> bool [ ] -> int </%> = <%> <*> wave [ ] [ ] -> + * fmx </%> ; bool [ ] = wave <%> <-> [ ] </%> [ ] ; int [ ] [ ] <%> <*> p -> prop </%> = propagator [ n - 1 - dx ] [ n - 1 - dy ] ; for ( int = 0 ; < t ; + + ) <%> <+> if ( [ ] ) </%> { <%> <*> if ( ! [ ] ) continue -> bool b = false </%> ; <%> <*> b -> int [ ] p </%> = <%> <*> false -> prop [ ] </%> ; <%> <*> int [ ] prop -> for ( int l = 0 ; l < p . length & & ! b ; l + + ) b </%> = <%> <+> [ </%> p [ <%> <+> l ] </%> ] ; <%> <-> for ( int = 0 ; < prop . length & & ! b ; + + ) b = [ prop [ ] ] ; </%>
<%> <*> changes [ ] [ ] = true ; change = true ; -> change ( ) ; </%>
<%> <-> return change ; </%>
color c = colors [ patterns [ observed [ x - dx <%> <*> ] [ -> + ( </%> y - dy <%> <+> ) * fmx </%> ] ] [ dx + dy * n ] ] ;
<%> <-> for ( int y = 0 ; y < fmy ; y + + ) </%> for ( int <%> <*> x -> i </%> = 0 ; <%> <*> x -> i </%> < <%> <*> fmx -> wave . length </%> ; <%> <*> x -> i </%> + + )
<%> <*> if ( on _ boundary ( sx , sy ) ) continue ; for ( int t = 0 ; t < t ; t + + ) if ( wave [ sx ] [ sy ] [ t ] ) -> int s = sx + sy * fmx ; </%> <%> <+> if ( on _ boundary ( s ) ) continue ; for ( int t = 0 ; t < t ; t + + ) if ( wave [ s ] [ t ] ) </%>
bitmap _ data [ <%> <*> x + y * fmx -> i </%> ] = unchecked ( ( int ) 0 xff | ( ( r / contributors ) < < NUM ) | ( ( g / contributors ) < < NUM ) | b / contributors ) ;
for ( int t = 0 ; t < t ; t + + ) if ( t ! = ground ) wave [ x <%> <*> ] [ -> + ( </%> fmy - 1 <%> <+> ) * fmx </%> ] [ t ] = false ; <%> <*> changes [ -> change ( </%> x <%> <*> ] [ -> + ( </%> fmy - 1 <%> <*> ] = true -> ) * fmx ) </%> ;
wave [ x <%> <*> ] [ -> + </%> y <%> <+> * fmx </%> ] [ ground ] = false ; <%> <*> changes [ -> change ( </%> x <%> <*> ] [ -> + </%> y <%> <*> ] = true -> * fmx ) </%> ; } } <%> <-> while ( </%> propagate ( <%> <-> ) </%> ) ; } } }
using system _ xml <%> <+> _ linq </%> ;
<%> <*> var xdoc = new xml _ document ( ) ; xdoc . load ( STR ) ; -> x _ document xdoc = x _ document . load ( STR ) ; </%>
foreach ( <%> <*> xml -> x </%> _ <%> <*> node xnode -> element xelem </%> in xdoc . <%> <*> first _ child . child _ nodes -> root . elements ( STR , STR </%> ) <%> <+> ) </%>
<%> <-> if ( xnode . name = = STR ) continue ; </%>
string name = <%> <*> xnode -> xelem </%> . get < string > ( STR ) ;
if ( <%> <*> xnode -> xelem </%> . name = = STR ) model = new overlapping _ model ( name , <%> <*> xnode -> xelem </%> . get ( STR , 2 ) , <%> <*> xnode -> xelem </%> . get ( STR , NUM ) , <%> <*> xnode -> xelem </%> . get ( STR , NUM ) , <%> <*> xnode -> xelem </%> . get ( STR , true ) , <%> <*> xnode -> xelem </%> . get ( STR , false ) , <%> <*> xnode -> xelem </%> . get ( STR , NUM ) , <%> <*> xnode -> xelem </%> . get ( STR , 0 ) ) ; else if ( <%> <*> xnode -> xelem </%> . name = = STR ) model = new simple _ tiled _ model ( name , <%> <*> xnode -> xelem </%> . get < string > ( STR ) , <%> <*> xnode -> xelem </%> . get ( STR , NUM ) , <%> <*> xnode -> xelem </%> . get ( STR , NUM ) , <%> <*> xnode -> xelem </%> . get ( STR , false ) , <%> <*> xnode -> xelem </%> . get ( STR , false ) ) ;
for ( int i = 0 ; i < <%> <*> xnode -> xelem </%> . get ( STR , 2 ) ; i + + )
bool finished = model . run ( seed , <%> <*> xnode -> xelem </%> . get ( STR , 0 ) ) ;
<%> <*> protected bool [ ] [ ] [ ] wave ; protected bool [ ] [ ] changes ; -> protected bool [ ] [ ] wave ; </%>
<%> <*> protected int [ ] [ ] observed ; -> protected int [ ] observed ; </%> <%> <+> protected bool [ ] changes ; protected int [ ] stack ; protected int stacksize ; </%>
protected int fmx , fmy , t <%> <-> , limit </%> ;
<%> <*> wave = new bool [ fmx ] [ ] [ ] ; changes = new bool [ fmx ] [ ] ; for ( int x = 0 ; x < fmx ; x + + ) { wave [ x ] = new bool [ fmy ] [ ] ; changes [ x ] = new bool [ fmy ] ; -> wave = new bool [ fmx * fmy ] [ ] ; </%> <%> <+> changes = new bool [ fmx * fmy ] ; stack = new int [ fmx * fmy ] ; stacksize = 0 ; </%>
<%> <*> } protected abstract bool propagate ( ) ; -> protected abstract void propagate ( ) ; </%>
if ( on _ boundary ( <%> <*> x , y -> i </%> ) ) continue ; <%> <+> bool [ ] </%> w = wave <%> <-> [ x ] </%> [ <%> <*> y -> i </%> ] ; <%> <+> int </%> amount = 0 ; <%> <+> double </%> sum = 0 ;
<%> <+> double </%> main _ sum = 0 ; <%> <+> double </%> log _ sum = math . log ( sum ) ;
<%> <*> argminx = x ; argminy = y ; -> argmin = i ; </%>
if ( <%> <*> argminx -> argmin </%> = = - 1 <%> <*> & & argminy = = - 1 ) -> ) </%>
<%> <*> observed = new int [ fmx ] [ ] ; for ( int x = 0 ; x < fmx ; x + + ) { observed [ x ] = new int [ fmy ] ; for ( int y = 0 ; y < fmy ; y + + ) for ( int t = 0 ; t < t ; t + + ) if ( wave [ x ] [ y ] [ t ] ) { observed [ x ] [ y ] = t ; break ; } } -> observed = new int [ fmx * fmy ] ; </%> <%> <+> for ( int i = 0 ; i < wave . length ; i + + ) for ( int t = 0 ; t < t ; t + + ) if ( wave [ i ] [ t ] ) { observed [ i ] = t ; break ; } </%>
for ( int t = 0 ; t < t ; t + + ) distribution [ t ] = wave <%> <-> [ argminx ] </%> [ <%> <*> argminy -> argmin </%> ] [ t ] ? stationary [ t ] : 0 ;
for ( int t = 0 ; t < t ; t + + ) wave <%> <-> [ argminx ] </%> [ <%> <*> argminy -> argmin </%> ] [ t ] = t = = r ; <%> <*> changes [ argminx ] [ argminy ] = true -> change ( argmin ) </%> ;
<%> <-> while ( </%> propagate ( <%> <-> ) </%> ) ;
<%> <-> for ( int x = 0 ; x < fmx ; x + + ) </%> for ( int <%> <*> y -> i </%> = 0 ; <%> <*> y -> i </%> < <%> <*> fmy -> wave . length </%> ; <%> <*> y -> i </%> + + )
for ( int t = 0 ; t < t ; t + + ) wave <%> <-> [ x ] </%> [ <%> <*> y -> i </%> ] [ t ] = true ; changes <%> <-> [ x ] </%> [ <%> <*> y -> i </%> ] = false ;
protected abstract bool on _ boundary ( <%> <-> int x , </%> int <%> <*> y -> i </%> ) ;
<%> <*> else weights . add ( ind , 1 ) ; -> else </%> <%> <+> { weights . add ( ind , 1 ) ; ordering . add ( ind ) ; } </%>
foreach ( int w in <%> <*> weights . keys -> ordering </%> )
if ( <%> <-> allowed [ ] & & </%> ! b )
<%> <*> int -> long </%> w = stuff . power ( c , n * n ) ;
func < byte [ ] , <%> <*> int -> long </%> > index = p = > { <%> <*> int -> long </%> result = 0 , power = 1 ;
func < <%> <*> int -> long </%> , byte [ ] > pattern _ from _ index = ind = > { <%> <*> int -> long </%> residue = ind , power = w ;
<%> <*> list < byte > -> int </%> contributors <%> <+> _ nb </%> = <%> <*> new list < byte > ( ) ; -> 0 , r = 0 , g = 0 , b = 0 ; </%>
<%> <-> for ( int t = 0 ; t < t ; t + + ) if ( wave [ sx ] [ sy ] [ t ] ) contributors . add ( patterns [ t ] [ dx + dy * n ] ) ; } int r = 0 , g = 0 , b = 0 ; </%> <%> <*> foreach -> for </%> ( <%> <*> byte c in contributors ) -> int t = 0 ; t < t ; t + + ) if ( wave [ sx ] [ sy ] [ t ] ) </%> { <%> <*> color color = colors [ c ] -> contributors _ nb + + </%> ; <%> <+> color color = colors [ patterns [ t ] [ dx + dy * n ] ] ; </%>
for ( int t = 0 ; t < t ; t + + ) if ( <%> <*> wave [ x ] [ y ] -> w </%> [ t ] )
for ( int t = 0 ; t < t ; t + + ) if ( <%> <*> wave [ x ] [ y ] -> w </%> [ t ] ) main _ sum + = stationary [ t ] * log _ prob [ t ] ;
<%> <*> if ( argminx = = - 1 & & argminy = = - 1 ) return true ; -> if ( argminx = = - 1 & & argminy = = - 1 ) </%> <%> <+> { observed = new int [ fmx ] [ ] ; for ( int x = 0 ; x < fmx ; x + + ) { observed [ x ] = new int [ fmy ] ; for ( int y = 0 ; y < fmy ; y + + ) for ( int t = 0 ; t < t ; t + + ) if ( wave [ x ] [ y ] [ t ] ) { observed [ x ] [ y ] = t ; break ; } } return true ; } </%>
public overlapping _ model ( string name , int n , int width , int height , bool periodic _ input , bool periodic _ output , int symmetry , int ground ) <%> <+> : base ( width , height ) </%>
<%> <-> fmx = width ; fmy = height ; </%>
int [ ] <%> <*> bmp -> bitmap </%> _ data = new int [ result . height * result . width ] ;
int contributors <%> <-> _ nb </%> = 0 , r = 0 , g = 0 , b = 0 ;
contributors <%> <-> _ nb </%> + + ;
<%> <*> bmp -> bitmap </%> _ data [ x + y * fmx ] = unchecked ( ( int ) 0 xff | ( ( r / contributors <%> <-> _ nb </%> ) < < NUM ) | ( ( g / contributors <%> <-> _ nb </%> ) < < NUM ) | b / contributors <%> <-> _ nb </%> ) ; } var bits = result . lock _ bits ( new rectangle ( 0 , 0 , result . width , result . height ) , <%> <-> system . drawing . imaging . </%> image _ lock _ mode . write _ only , <%> <-> system . drawing . imaging . </%> pixel _ format . format _ bpp _ argb ) ; system . runtime . interop _ services . marshal . copy ( <%> <*> bmp -> bitmap </%> _ data , 0 , bits . scan , <%> <*> bmp -> bitmap </%> _ data . length ) ;
for ( int t = 0 ; t < t ; t + + ) if ( t ! = <%> <*> foundation -> ground </%> ) wave [ x ] [ fmy - 1 ] [ t ] = false ;
wave [ x ] [ y ] [ <%> <*> foundation -> ground </%> ] = false ;
<%> <-> while ( propagate ( ) ) ; </%> <%> <*> } -> } </%> <%> <+> while ( propagate ( ) ) ; </%> } } }
<%> <*> for ( int t = 1 ; t < cardinality ; t + + ) tiles . add ( rotate ( tiles [ t + t - 1 ] ) ) ; -> tilenames . add ( $ STR ) ; </%> <%> <+> for ( int t = 1 ; t < cardinality ; t + + ) { tiles . add ( rotate ( tiles [ t + t - 1 ] ) ) ; tilenames . add ( $ STR ) ; } </%>
stack [ stacksize ] = <%> <-> new tuple < int , int > </%> ( i , t ) ;
<%> <-> double sum = sums _ of _ weights [ i ] ; entropies [ i ] + = sums _ of _ weight _ log _ weights [ i ] / sum - math . log ( sum ) ; </%>
<%> <+> double </%> sum = sums _ of _ weights [ i ] ; entropies [ i ] <%> <+> = math . log ( sum ) </%> - <%> <-> = </%> sums _ of _ weight _ log _ weights [ i ] / sum <%> <*> - math . log ( sum ) ; -> ; </%>
public static int random ( this double [ ] a , double r ) { double sum = a . sum ( ) ; for ( int j = 0 ; j < a . length ; j + + ) a [ j ] / = sum ; int i = 0 ; double x = 0 ; while ( i < a . length ) { x + = a [ i ] ; if ( r < = x ) return i ; i + + ; <%> <+> } return 0 ; } public static long power ( int a , int n ) { long product = 1 ; for ( int i = 0 ; i < n ; i + + ) product * = a ; return product ; } public static t get < t > ( this x _ element xelem , string attribute , t default _ t = default ( t ) ) { x _ attribute a = xelem . attribute ( attribute ) ; return a = = null ? default _ t : ( t ) type _ descriptor . get _ converter ( typeof ( t ) ) . convert _ from _ invariant _ string ( a . value ) ; } public static i _ enumerable < x _ element > elements ( this x _ element x , params string [ ] names ) = > x . elements ( ) . where ( xelem = > names . any ( s = > s = = xelem . name ) ) ; </%>
<%> <-> return 0 ; } public static long power ( int a , int n ) { long product = 1 ; for ( int i = 0 ; i < n ; i + + ) product * = a ; return product ; } public static t get < t > ( this x _ element xelem , string attribute , t default _ t = default ( t ) ) { x _ attribute a = xelem . attribute ( attribute ) ; return a = = null ? default _ t : ( t ) type _ descriptor . get _ converter ( typeof ( t ) ) . convert _ from _ invariant _ string ( a . value ) ; } public static i _ enumerable < x _ element > elements ( this x _ element x , params string [ ] names ) = > x . elements ( ) . where ( xelem = > names . any ( s = > s = = xelem . name ) ) ; } </%>
static void main ( ) { stopwatch sw = stopwatch . start _ new ( ) ; random random = new random ( ) ; x _ document xdoc = x _ document . load ( STR ) ; int counter = 1 ; foreach ( x _ element xelem in xdoc . root . elements ( STR , STR ) ) { model model ; string name = xelem . get < string > ( STR ) ; console . write _ line ( $ STR ) ; if ( xelem . name = = STR ) model = new overlapping _ model ( name , xelem . get ( STR , 2 ) , xelem . get ( STR , NUM ) , xelem . get ( STR , NUM ) , xelem . get ( STR , true ) , xelem . get ( STR , false ) , xelem . get ( STR , NUM ) , xelem . get ( STR , 0 ) ) ; else if ( xelem . name = = STR ) model = new simple _ tiled _ model ( name , xelem . get < string > ( STR ) , xelem . get ( STR , NUM ) , xelem . get ( STR , NUM ) , xelem . get ( STR , false ) , xelem . get ( STR , false ) ) ; else continue ; for ( int i = 0 ; i < xelem . get ( STR , 2 ) ; i + + ) { for ( int k = 0 ; k < NUM ; k + + ) { console . write ( STR ) ; int seed = random . next ( ) ; bool finished = model . run ( seed , xelem . get ( STR , 0 ) ) ; if ( finished ) { console . write _ line ( STR ) ; model . graphics ( ) . save ( $ STR ) ; if ( model is simple _ tiled _ model & & xelem . get ( STR , false ) ) system . io . file . write _ all _ text ( $ STR , ( model as simple _ tiled _ model ) . text _ output ( ) ) ; break ; <%> <+> } else console . write _ line ( STR ) ; } } counter + + ; } console . write _ line ( $ STR ) ; } </%>
<%> <-> else console . write _ line ( STR ) ; } } counter + + ; } console . write _ line ( $ STR ) ; } } </%>
<%> <*> propagator = new bool [ NUM ] [ ] [ ] ; -> var temp _ propagator = new bool [ NUM ] [ ] [ ] ; </%> <%> <+> propagator = new int [ NUM ] [ ] [ ] ; </%>
<%> <*> propagator [ d ] = new bool [ t ] [ ] ; for ( int t = 0 ; t < t ; t + + ) propagator [ d ] [ t ] = new bool [ t ] ; -> temp _ propagator [ d ] = new bool [ t ] [ ] ; </%> <%> <+> propagator [ d ] = new int [ t ] [ ] ; for ( int t = 0 ; t < t ; t + + ) temp _ propagator [ d ] [ t ] = new bool [ t ] ; </%>
<%> <+> temp _ </%> propagator [ 0 ] [ r ] [ l ] = true ; <%> <+> temp _ </%> propagator [ 0 ] [ action [ r ] [ NUM ] ] [ action [ l ] [ NUM ] ] = true ; <%> <+> temp _ </%> propagator [ 0 ] [ action [ l ] [ NUM ] ] [ action [ r ] [ NUM ] ] = true ; <%> <+> temp _ </%> propagator [ 0 ] [ action [ l ] [ 2 ] ] [ action [ r ] [ 2 ] ] = true ; <%> <+> temp _ </%> propagator [ 1 ] [ u ] [ d ] = true ; <%> <+> temp _ </%> propagator [ 1 ] [ action [ d ] [ NUM ] ] [ action [ u ] [ NUM ] ] = true ; <%> <+> temp _ </%> propagator [ 1 ] [ action [ u ] [ NUM ] ] [ action [ d ] [ NUM ] ] = true ; <%> <+> temp _ </%> propagator [ 1 ] [ action [ d ] [ 2 ] ] [ action [ u ] [ 2 ] ] = true ;
<%> <*> propagator [ 2 ] [ ] [ ] = propagator [ 0 ] [ ] [ ] ; propagator [ NUM ] [ ] [ ] = propagator [ 1 ] [ ] [ ] ; -> temp _ propagator [ 2 ] [ ] [ ] = temp _ propagator [ 0 ] [ ] [ ] ; </%> <%> <+> temp _ propagator [ NUM ] [ ] [ ] = temp _ propagator [ 1 ] [ ] [ ] ; } list < int > [ ] [ ] sparse _ propagator = new list < int > [ NUM ] [ ] ; for ( int d = 0 ; d < NUM ; d + + ) { sparse _ propagator [ d ] = new list < int > [ t ] ; for ( int t = 0 ; t < t ; t + + ) sparse _ propagator [ d ] [ t ] = new list < int > ( ) ; } for ( int d = 0 ; d < NUM ; d + + ) for ( int = 0 ; < t ; + + ) { list < int > sp = sparse _ propagator [ d ] [ ] ; bool [ ] tp = temp _ propagator [ d ] [ ] ; for ( int = 0 ; < t ; + + ) if ( tp [ ] ) sp . add ( ) ; int st = sp . count ; propagator [ d ] [ ] = new int [ st ] ; for ( int st = 0 ; st < st ; st + + ) propagator [ d ] [ ] [ st ] = sp [ st ] ; </%>
for ( int = 0 ; < t ; + + ) <%> <-> if ( [ ] ) </%> { <%> <*> bool [ ] prop = propagator -> if ( ! </%> [ <%> <-> d </%> ] <%> <*> [ ] -> ) continue </%> ;
<%> <*> for ( int = 0 ; < t & & ! b ; + + ) if ( [ ] ) b = prop [ ] ; -> int [ ] prop = propagator [ d ] [ ] ; </%> <%> <+> for ( int = 0 ; < prop . length & & ! b ; + + ) b = [ prop [ ] ] ; </%>
<%> <-> [ ] = false ; </%>