 <@> public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) </@> <%> <*> logger _ factory -> app </%> <%> <*> add -> use </%> <%> <*> console ( log -> developer _ exception </%> <%> <*> level . warning -> page ( </%> <%> <-> if ( env . is _ development ( ) ) { app . use _ developer _ exception _ page ( ) ; } else { app . use _ exception _ handler ( STR ) ; } app . use _ iis _ platform _ handler ( ) ; </%>
<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> <@> public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) </@> <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } </%> <%> <*> else -> if ( env . is _ development ( ) ) { </%> <%> <*> { -> app . use _ webpack _ dev _ middleware ( new webpack _ dev _ middleware _ options { </%> <%> <-> app . use _ exception _ handler ( STR ) ; </%>
<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> <@> public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) </@> <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } </%> <%> <*> else -> if ( env . is _ development ( ) ) { </%> <%> <*> { -> app . use _ webpack _ dev _ middleware ( new webpack _ dev _ middleware _ options { </%> <%> <-> app . use _ exception _ handler ( STR ) ; </%>
<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> <%> <*> services . add _ mvc ( ) . add _ json _ options ( options = > { options . serializer _ settings . contract _ resolver = new camel _ case _ property _ names _ contract _ resolver ( ) ; } ) ; -> services . add _ mvc ( ) ; </%> <@> public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) </@> <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } </%> <%> <*> else -> if ( env . is _ development ( ) ) { </%> <%> <*> { -> app . use _ webpack _ dev _ middleware ( new webpack _ dev _ middleware _ options { </%> <%> <-> app . use _ exception _ handler ( STR ) ; </%>
<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> <@> public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) </@> <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } else { app . use _ exception _ handler ( STR ) ; </%>
<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> <@> public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) </@> <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } </%> <%> <*> else -> if ( env . is _ development ( ) ) { </%> <%> <*> { -> app . use _ webpack _ dev _ middleware ( new webpack _ dev _ middleware _ options { </%> <%> <-> app . use _ exception _ handler ( STR ) ; </%>
<%> <+> make _ command _ line _ options ( port , watch _ file _ extensions ) ) </%> <%> <*> { var result = STR + port . to _ string ( ) ; if ( watch _ file _ extensions ! -> { var result </%> <%> <*> null & & watch _ file _ extensions . length > 0 ) { -> STR + port ; </%> <%> <+> if ( watch _ file _ extensions ! = null & & watch _ file _ extensions . length > 0 ) { </%> <@> public override async task < t > invoke < t > ( node _ invocation _ info invocation _ info ) { await this . ensure _ ready ( ) ; using ( var client = new http _ client ( ) ) { </@> <%> <-> this . </%> <%> <*> if ( ! response . is _ success _ status _ code ) { -> if ( ! response . is _ success _ status _ code ) </%> <%> <+> { </%>
<%> <*> null & & watch _ file _ extensions . length > 0 ) { -> STR + port ; </%> <%> <+> if ( watch _ file _ extensions ! = null & & watch _ file _ extensions . length > 0 ) { </%> <%> <*> public override async task < t > invoke < t > ( node _ invocation _ info invocation _ info ) { await this . ensure _ ready ( ) ; using ( var client = new http _ client ( ) ) { -> public override async task < t > invoke < t > ( node _ invocation _ info invocation _ info ) </%> <%> <+> { await ensure _ ready ( ) ; using ( var client = new http _ client ( ) ) { </%> <@> var response = await client . post _ async ( STR + this . port _ number , payload ) ; </@> <%> <*> if ( ! response . is _ success _ status _ code ) { -> if ( ! response . is _ success _ status _ code ) </%> <%> <+> { </%> <%> <*> if ( response _ is _ json ) { -> if ( response _ is _ json ) </%> <%> <+> { </%>
<%> <*> protected override void on _ output _ data _ received ( string output _ data ) { var match = this . port _ number ! = 0 ? null : port _ message _ regex . match ( output _ data ) ; if ( match ! = null & & match . success ) { this . port _ number = int . parse ( match . groups [ 1 ] . captures [ 0 ] . value ) ; } else { -> protected override void on _ output _ data _ received ( string output _ data ) </%> <%> <+> { var match = port _ number ! = 0 ? null : port _ message _ regex . match ( output _ data ) ; if ( match ! = null & & match . success ) { port _ number = int . parse ( match . groups [ 1 ] . captures [ 0 ] . value ) ; } else { </%> <%> <*> protected override void on _ before _ launch _ process ( ) { -> protected override void on _ before _ launch _ process ( ) </%> <%> <+> { </%> <@> this . port _ number = 0 ; </@> 
<%> <*> namespace microsoft _ asp _ net _ core _ node _ services -> namespace microsoft _ asp _ net _ core _ node _ services </%> <@> private semaphore _ slim invocation _ semaphore = new semaphore _ slim ( 1 ) ; private task _ completion _ source < string > current _ invocation _ result ; private readonly static json _ serializer _ settings json _ serializer _ settings = new json _ serializer _ settings { </@> <%> <+> private task _ completion _ source < string > current _ invocation _ result ; private readonly semaphore _ slim invocation _ semaphore = new semaphore _ slim ( 1 ) ; </%> <%> <*> embedded _ resource _ reader . read ( typeof ( input _ output _ stream _ node _ instance ) , STR ) , project _ path ) -> embedded _ resource _ reader . read ( </%> <%> <+> typeof ( input _ output _ stream _ node _ instance ) , STR ) , project _ path ) </%>
<%> <-> await this . invocation _ semaphore . wait _ async ( ) ; </%> <%> <*> try -> try </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> } finally { this . invocation _ semaphore . release ( ) ; this . current _ invocation _ result = null ; </@> <%> <*> protected override void on _ output _ data _ received ( string output _ data ) { if ( this . current _ invocation _ result ! = null ) { this . current _ invocation _ result . set _ result ( output _ data ) ; } else { -> protected override void on _ output _ data _ received ( string output _ data ) </%> <%> <+> { if ( current _ invocation _ result ! = null ) { </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <*> } finally { this . invocation _ semaphore . release ( ) ; this . current _ invocation _ result = null ; -> } </%> <%> <+> finally { invocation _ semaphore . release ( ) ; current _ invocation _ result = null ; </%> <@> protected override void on _ output _ data _ received ( string output _ data ) { if ( this . current _ invocation _ result ! = null ) { this . current _ invocation _ result . set _ result ( output _ data ) ; } else { </@> 
<%> <-> private string application _ base _ path ; private i _ node _ services node _ services ; public prerender _ tag _ helper ( i _ service _ provider service _ provider ) { var host _ env = ( i _ hosting _ environment ) service _ provider . get _ service ( typeof ( i _ hosting _ environment ) ) ; this . node _ services = ( i _ node _ services ) service _ provider . get _ service ( typeof ( i _ node _ services ) ) ? ? fallback _ node _ services ; this . application _ base _ path = host _ env . content _ root _ path ; if ( this . node _ services = = null ) { this . node _ services = fallback _ node _ services = configuration . create _ node _ services ( new node _ services _ options { hosting _ model = node _ hosting _ model . http , project _ path = this . application _ base _ path } ) ; } } </%> <%> <-> this . </%> <%> <*> application _ base _ path : this . application _ base _ path , node _ services : this . node _ services , boot _ module : new java _ script _ module _ export ( this . module _ name ) { export _ name = this . export _ name , webpack _ config = this . webpack _ config _ path -> application _ base _ path , </%> <%> <+> node _ services , new java _ script _ module _ export ( module _ name ) { export _ name = export _ name , webpack _ config = webpack _ config _ path </%> <@> request _ absolute _ url : uri _ helper . get _ encoded _ url ( request ) , request _ path _ and _ query : request . path + request . query _ string . value ) ; </@> <%> <*> if ( result . globals ! = null ) { -> if ( result . globals ! = null ) </%> <%> <+> { </%> <%> <*> foreach ( var property in result . globals . properties ( ) ) { -> foreach ( var property in result . globals . properties ( ) ) </%> <%> <+> { </%>
<%> <*> namespace microsoft _ asp _ net _ core _ node _ services { -> namespace microsoft _ asp _ net _ core _ node _ services </%> <%> <+> { </%> <%> <-> { public string file _ name </%> <%> <-> get ; private set ; } </%> <@> public string _ as _ temp _ file ( string content ) { this . file _ name = path . get _ temp _ file _ name ( ) ; file . write _ all _ text ( this . file _ name , content ) ; </@> <%> <-> private void dispose _ impl ( bool disposing ) { if ( ! disposed _ value ) { if ( disposing ) { } file . delete ( this . file _ name ) ; disposed _ value = true ; } } </%>
<%> <-> using microsoft _ asp _ net _ node _ services ; using microsoft _ asp _ net _ node _ services _ react ; </%> <@> private i _ node _ services node _ services ; public home _ controller ( i _ node _ services node _ services ) { this . node _ services = node _ services ; } public async task < i _ action _ result > index ( int page _ index ) </@> <%> <-> view _ data [ STR ] = await react _ renderer . render _ to _ string ( this . node _ services , module _ name : STR , base _ url : request . path ) ; </%>
<%> <*> private readonly object child _ process _ launcher _ lock ; private string command _ line _ arguments ; -> private const string connection _ established _ message = STR ; </%> <%> <+> private readonly task _ completion _ source < object > connection _ is _ ready _ source = new task _ completion _ source < object > ( ) ; private bool disposed ; </%> <@> private process node _ process ; private task _ completion _ source < bool > node _ process _ is _ ready _ source ; private readonly string project _ path ; private bool disposed ; </@> <%> <-> child _ process _ launcher _ lock = new object ( ) ; </%> <%> <+> node _ process = launch _ node _ process ( entry _ point _ script . file _ name , </%> <%> <*> = project -> , command </%> <%> <*> path -> line _ arguments ) </%> <%> <*> command -> connect </%> <%> <*> line -> to </%> <%> <*> arguments = command -> input </%> <%> <*> line -> output </%> <%> <*> arguments ? ? string . empty -> streams ( ) </%> <%> <*> public -> public async task < t > invoke _ export _ async < t > ( string module _ name , </%> <%> <*> command -> export </%> <%> <*> line -> name </%> <%> <*> arguments -> or _ null , params object [ ] args ) </%> <%> <-> get { return command _ line _ arguments ; } </%>
<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> <@> public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) </@> <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } else { app . use _ exception _ handler ( STR ) ; </%>
<%> <+> . add _ json _ file ( $ STR , optional : true ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; } </%> <%> <*> services . add _ mvc ( ) . add _ json _ options ( options = > { options . serializer _ settings . contract _ resolver = new camel _ case _ property _ names _ contract _ resolver ( ) ; } ) ; -> services . add _ mvc ( ) ; </%> <@> public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env ) </@> <%> <+> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> if ( env . is _ development ( ) ) { </%>
<%> <+> . add _ json _ file ( $ STR , optional : true ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; } </%> <%> <*> services . add _ mvc ( ) . add _ json _ options ( options = > { options . serializer _ settings . contract _ resolver = new camel _ case _ property _ names _ contract _ resolver ( ) ; } ) ; -> services . add _ mvc ( ) ; </%> <@> public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env ) </@> <%> <+> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> if ( env . is _ development ( ) ) { </%>
<%> <+> . add _ json _ file ( STR , optional : true , reload _ on _ change : true ) . add _ json _ file ( $ STR , optional : true ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; } </%> <@> public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env ) </@> <%> <+> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <+> } else { app . use _ exception _ handler ( STR ) ; </%>
<%> <+> . add _ json _ file ( $ STR , optional : true ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; } </%> <%> <*> services . add _ mvc ( ) . add _ json _ options ( options = > { options . serializer _ settings . contract _ resolver = new camel _ case _ property _ names _ contract _ resolver ( ) ; } ) ; -> services . add _ mvc ( ) ; </%> <@> public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env ) </@> <%> <+> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> if ( env . is _ development ( ) ) { </%>
<%> <+> . add _ json _ file ( $ STR , optional : true ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; } </%> <%> <*> services . add _ mvc ( ) . add _ json _ options ( options = > { options . serializer _ settings . contract _ resolver = new camel _ case _ property _ names _ contract _ resolver ( ) ; } ) ; -> services . add _ mvc ( ) ; </%> <@> public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env ) </@> <%> <+> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> if ( env . is _ development ( ) ) { </%>
<%> <+> { public interface i _ drag _ handler </%> <@> public interface i _ drag _ handler { bool on _ drag _ enter ( i _ web _ browser browser _ control , i _ browser browser , i _ drag _ data drag _ data , drag _ operations _ mask mask ) ; } </@> <%> <+> } </%>
<%> <*> control control = ( control ) sender ; form old _ form = parent _ form ; form new _ form = control . find _ form ( ) ; if ( old _ form = = null | | new _ form = = null | | old _ form . handle ! = new _ form . handle ) -> var control = ( control ) sender ; </%> <%> <+> var old _ form = parent _ form ; var new _ form = control . find _ form ( ) ; if ( old _ form = = null | | new _ form = = null | | old _ form . handle ! = new _ form . handle ) </%> <@> if ( this . handle ! = int _ ptr . zero ) </@> 
<%> <+> & & ( parent _ form . left ! = x | | parent _ form . top ! = y ) </%> <%> <*> if ( parent _ form . left > = 0 & & parent _ form . right > = 0 ) -> if ( parent _ form . left > = 0 & & parent _ form . right > = 0 ) </%> <@> this . def _ wnd _ proc ( ref m ) ; </@> 
 <@> if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . send _ focus _ event ( true ) ; } </@> <%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%>
<%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%> <@> if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . send _ focus _ event ( false ) ; } </@> 
 <@> if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . load _ html ( html , url ) ; } </@> <%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%>
<%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%> <@> if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . go _ back ( ) ; } </@> <%> <-> if ( is _ offscreen _ browser _ created ) { </%>
<%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%> <@> if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . go _ forward ( ) ; } </@> <%> <-> if ( is _ offscreen _ browser _ created ) { </%>
<%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%> <@> if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . reload ( ) ; } </@> 
<%> <*> web -> on </%> <%> <*> view . on -> tooltip </%> <%> <-> web _ view . </%> <@> web _ view . browser _ core . address = web _ view . address ; if ( web _ view . is _ offscreen _ browser _ created ) { web _ view . cef _ browser _ wrapper . load _ url ( web _ view . address ) ; </@> <%> <-> web _ view . </%> <%> <-> web _ view . </%>
<%> <-> web _ view . </%> <%> <-> web _ view . </%> <%> <*> web -> browser </%> <%> <*> view -> core </%> <%> <-> web _ view . </%> <%> <-> web _ view . </%> <%> <-> web _ view . </%> <@> if ( web _ view . source ! = null ) </@> <%> <-> web _ view . </%>
<%> <-> web _ view . </%> <%> <*> web -> browser </%> <%> <*> view -> core </%> <%> <-> web _ view . </%> <%> <-> web _ view . </%> <%> <-> web _ view . </%> <%> <-> web _ view . </%> <@> web _ view . create _ offscreen _ browser ( ) ; </@> 
 <@> using system _ collections _ specialized ; using system _ io ; </@> <%> <*> public interface i _ scheme _ handler _ response -> obsolete _ use _ i _ resource _ handler _ response _ instead </%> <%> <+> public interface i _ scheme _ handler _ response : i _ resource _ handler _ response </%> <%> <-> stream response _ stream { get ; set ; } string mime _ type { get ; set ; } name _ value _ collection response _ headers { get ; set ; } int status _ code { get ; set ; } </%>
 <@> if ( ! e . handled ) { on _ preview _ key ( e ) ; } base . on _ preview _ key _ down ( e ) ; </@> <%> <-> if ( ! e . handled ) { </%> <%> <-> } base . on _ preview _ key _ up ( e ) ; </%>
<%> <-> if ( ! e . handled ) { </%> <%> <-> } base . on _ preview _ key _ down ( e ) ; </%> <@> if ( ! e . handled ) { on _ preview _ key ( e ) ; } base . on _ preview _ key _ up ( e ) ; </@> <%> <*> if -> var modifiers = get _ modifiers </%> <%> <*> . key = = key . tab | | e . key = = key . home | | e . key = = key . end | | e . key = = key . up | | e . key = = key . down ) -> ) ; </%> <%> <-> { </%> <%> <*> var modifiers = get _ modifiers ( e ) ; -> if ( keys _ to _ sendto _ browser . contains ( e . key ) | | modifiers > 0 ) </%> <%> <+> { </%> <%> <*> e . handled = managed _ cef _ browser _ adapter . send _ key _ event ( message , virtual _ key , ( int ) modifiers ) ; -> managed _ cef _ browser _ adapter . send _ key _ event ( message , virtual _ key , modifiers ) ; </%>
<%> <+> obsolete _ this _ method _ will _ be _ removed _ implement _ i _ render _ handler _ and _ assign _ browser _ render _ handler </%> <@> var is _ popup = type = = paint _ element _ type . popup ; render _ handler ? . on _ paint ( is _ popup , dirty _ rect , buffer , width , height ) ; </@> <%> <+> obsolete _ this _ method _ will _ be _ removed _ implement _ i _ render _ handler _ and _ assign _ browser _ render _ handler </%> <%> <+> render _ handler ? . on _ cursor _ change ( cursor , type , custom _ cursor _ info ) ; </%>
<%> <*> mouse . capture ( this ) ; mouse _ captured _ in _ on _ mouse _ leave = true ; -> browser . get _ host ( ) . send _ mouse _ click _ event ( ( int ) point . x , ( int ) point . y , mouse _ button _ type . left , mouse _ up : true , click _ count : 1 , modifiers : modifiers ) ; </%> <@> else { browser . get _ host ( ) . send _ mouse _ move _ event ( ( int ) point . x , ( int ) point . y , true , modifiers ) ; } </@> 
<%> <+> args </%> <@> var wrapper = new cef _ app _ wrapper ( subprocess ) ; result = wrapper . run ( args ) ; </@> 
<%> <+> this . browser _ split _ container . dock = system . windows . forms . dock _ style . fill ; this . browser _ split _ container . location = new system . drawing . point ( 0 , NUM ) ; this . browser _ split _ container . name = STR ; this . browser _ split _ container . panel . controls . add ( this . browser _ panel ) ; this . browser _ split _ container . panel _ collapsed = true ; this . browser _ split _ container . size = new system . drawing . size ( NUM , NUM ) ; this . browser _ split _ container . splitter _ distance = NUM ; this . browser _ split _ container . tab _ index = 2 ; </%> <@> this . browser _ panel . location = new system . drawing . point ( 0 , NUM ) ; </@> <%> <*> 2 -> NUM </%> <%> <+> _ split </%> <%> <*> panel -> container </%>
 <@> using system _ windows ; using cef _ sharp _ wpf _ example _ views _ main ; </@> <%> <*> var main _ view -> content . content </%>
<%> <+> { </%> <%> <+> } </%> <@> if ( e . old _ items ! = null ) { foreach ( var item in e . old _ items ) </@> <%> <+> foreach ( var item in e . old _ items ) { </%> <%> <+> { </%> <%> <+> } } </%>
<%> <+> public </%> <@> int result = 0 ; using ( var subprocess = cef _ sub _ process . create ( args ) ) </@> <%> <+> public static cef _ sub _ process create ( i _ enumerable < string > args ) { const string type _ prefix = STR ; var type _ argument = args . single _ or _ default ( arg = > arg . starts _ with ( type _ prefix ) ) ; </%>
<%> <-> popup </%> <%> <*> owner . dispatcher . invoke ( ( ) = > -> var chromium _ web _ browser = ( chromium _ web _ browser ) browser ; </%> <%> <+> chromium _ web _ browser . dispatcher . invoke ( ( ) = > { var owner = window . get _ window ( chromium _ web _ browser ) ; if ( owner ! = null & & owner . content = = browser & & ! ( owner is main _ window ) ) </%> <@> if ( owner ! = null & & owner . content = = browser & & ! ( owner is main _ window ) ) { owner . show ( ) ; } } ) ; </@> <%> <*> owner . dispatcher . invoke ( ( ) = > -> var chromium _ web _ browser = ( chromium _ web _ browser ) browser ; </%> <%> <+> chromium _ web _ browser . dispatcher . invoke ( ( ) = > { var owner = window . get _ window ( chromium _ web _ browser ) ; if ( owner ! = null & & owner . content = = browser ) </%>
<%> <*> owner . dispatcher . invoke ( ( ) = > -> var chromium _ web _ browser = ( chromium _ web _ browser ) browser ; </%> <%> <+> chromium _ web _ browser . dispatcher . invoke ( ( ) = > { var owner = window . get _ window ( chromium _ web _ browser ) ; if ( owner ! = null & & owner . content = = browser ) </%> <%> <-> owner </%> <%> <*> = null & & -> ( </%> <%> <*> . content = = browser -> is main _ window ) </%> <@> if ( ! ( owner is main _ window ) ) { owner . close ( ) ; } } } ) ; </@> 
 <@> if ( managed _ cef _ browser _ adapter ! = null ) { resize _ browser ( ) ; } </@> <%> <*> ) -> & & managed _ cef _ browser _ adapter ! = null ) </%>
<%> <*> separate -> main </%> <%> <*> opened -> open </%> <%> <-> _ back _ ground _ popup </%> <@> else { return bitmap = = null ? null : new bitmap ( bitmap ) ; } </@> <%> <+> if ( blend = = popup _ blending . popup ) </%> <%> <*> opened -> open </%> <%> <-> else { return bitmap = = null ? null : new bitmap ( bitmap ) ; </%>
 <@> void i _ render _ handler . on _ paint ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image ) </@> <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%>
<%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%> <@> create _ or _ update _ bitmap ( is _ popup , buffer , dirty _ rect , width , height , image , ref popup _ size , ref popup _ memory _ mapped _ file , ref popup _ memory _ mapped _ view _ accessor ) ; </@> <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%>
<%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%> <@> private void create _ or _ update _ bitmap ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image , ref size current _ size , ref memory _ mapped _ file mapped _ file , ref memory _ mapped _ view _ accessor view _ accessor ) </@> 
 <@> void i _ render _ handler . on _ paint ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image ) </@> <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%>
<%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%> <@> create _ or _ update _ bitmap ( is _ popup , buffer , dirty _ rect , width , height , image , ref popup _ size , ref popup _ memory _ mapped _ file , ref popup _ memory _ mapped _ view _ accessor ) ; </@> <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%>
<%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%> <@> private void create _ or _ update _ bitmap ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image , ref size current _ size , ref memory _ mapped _ file mapped _ file , ref memory _ mapped _ view _ accessor view _ accessor ) </@> 
 <@> void i _ render _ handler . on _ paint ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image ) </@> <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%>
<%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%> <@> create _ or _ update _ bitmap ( is _ popup , buffer , dirty _ rect , width , height , image , ref popup _ size , ref popup _ memory _ mapped _ file , ref popup _ memory _ mapped _ view _ accessor ) ; </@> <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%>
<%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%> <@> private void create _ or _ update _ bitmap ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image , ref size current _ size , ref memory _ mapped _ file mapped _ file , ref memory _ mapped _ view _ accessor view _ accessor ) </@> 
<%> <*> void on _ loading _ state _ change ( i _ web _ browser browser _ control , i _ browser browser , bool is _ loading , bool can _ go _ back , bool can _ go _ forward ) ; void on _ status _ message ( i _ web _ browser browser _ control , i _ browser browser , string message ) ; -> void on _ address _ changed ( i _ web _ browser browser _ control , address _ changed _ event _ args address _ changed _ args ) ; </%> <%> <+> void on _ loading _ state _ change ( i _ web _ browser browser _ control , loading _ state _ changed _ event _ args loading _ state _ changed _ args ) ; void on _ status _ message ( i _ web _ browser browser _ control , status _ message _ event _ args status _ message _ args ) ; </%> <%> <*> void on _ load _ error ( i _ web _ browser browser _ control , i _ browser browser , load _ error _ event _ args load _ error _ args ) ; -> void on _ load _ error ( i _ web _ browser browser _ control , load _ error _ event _ args load _ error _ args ) ; </%> <@> bool on _ before _ browse ( i _ web _ browser browser _ control , i _ browser browser , i _ request request , bool is _ redirect , i _ frame frame ) ; </@> 
<%> <-> public event property _ changed _ event _ handler property _ changed ; </%> <@> managed _ cef _ browser _ adapter . create _ browser ( browser _ settings ? ? new browser _ settings ( ) , handle , browser _ core . address ) ; </@> <%> <-> browser _ core . </%>
 <@> browser _ core . address = browser _ core . address ; </@> <%> <-> if ( source ! = null ) { create _ offscreen _ browser ( ) ; } </%>
<%> <+> browser _ settings = browser _ settings ? ? new browser _ settings ( ) ; </%> <@> managed _ cef _ browser _ adapter . create _ offscreen _ browser ( int _ ptr . zero , browser _ settings ? ? new browser _ settings ( ) , address ) ; </@> 
<%> <-> set { } </%> <@> get { return new int [ ] { 1 , 2 , NUM , NUM , NUM , NUM , NUM , NUM } ; } set { } </@> <%> <-> set { } </%> <%> <-> set { } </%>
<%> <*> bool osr , bool multi -> abstract </%> <%> <*> threaded -> cef </%> <%> <*> message _ loop -> settings settings </%> <%> <-> var settings = new cef _ settings ( ) ; </%> <%> <-> settings . multi _ threaded _ message _ loop = multi _ threaded _ message _ loop ; settings . external _ message _ pump = ! multi _ threaded _ message _ loop ; </%> <@> if ( osr ) { settings . windowless _ rendering _ enabled = true ;  settings . cef _ command _ line _ args . add ( STR , STR ) ; settings . cef _ command _ line _ args . add ( STR , STR ) ; </@> 
<%> <+> _ control </%> <%> <+> _ control </%> <%> <+> _ control </%> <@> if ( ! ( owner is main _ window ) ) { owner . close ( ) ; } </@> 
<%> <-> if ( debugging _ sub _ process ) { var architecture = environment . is _ bit _ process ? STR : STR ; settings . browser _ subprocess _ path = STR + architecture + STR ; } </%> <@> if ( ! cef . initialize ( settings , shutdown _ on _ process _ exit : true , perform _ dependency _ check : ! debugging _ sub _ process ) ) </@> 
<%> <*> if ( context . object . get _ type ( ) = = typeof ( dictionary < string , object > ) ) -> var dictionary = ( i _ dictionary < string , object > ) context . object ; </%> <%> <+> if ( dictionary . contains _ key ( property _ name ) ) </%> <@> var dictionary = ( dictionary < string , object > ) context . object ; if ( dictionary . contains _ key ( property _ name ) ) { return dictionary [ property _ name ] ; } </@> 
 <@> this . is _ loading = isloading ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . can _ go _ back = can _ go _ back ; this . can _ go _ forward = can _ go _ forward ; this . can _ reload = can _ reload ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . title = title ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . tooltip _ text = tooltip _ text ; </@> 
<%> <+> { if ( browser ! = null ) </%> <@> if ( browser ! = null ) { browser . get _ host ( ) . was _ hidden ( false ) ; } break ; </@> <%> <+> break ; } </%> <%> <+> { if ( browser ! = null ) </%> <%> <-> if ( browser ! = null ) { </%>
<%> <-> if ( browser ! = null ) { </%> <%> <-> } break ; </%> <%> <+> break ; } </%> <%> <+> { if ( browser ! = null ) </%> <@> if ( browser ! = null ) { browser . get _ host ( ) . was _ hidden ( true ) ; } break ; </@> <%> <+> break ; } </%>
 <@> lock ( sync ) { interop _ bitmap = null ; } </@> <%> <+> var bitmap = interop _ bitmap ; </%> <%> <*> sync ) -> render _ client _ adapter . bitmap _ lock ) </%> <%> <-> interop _ </%>
<%> <*> var notify _ dpi _ changed = ! matrix . equals ( source . composition _ target . transform _ to _ device ) ; matrix = source . composition _ target . transform _ to _ device ; -> var matrix = source . composition _ target . transform _ to _ device ; </%> <%> <+> var notify _ dpi _ changed = dpi _ scale _ factor > 0 & & ! dpi _ scale _ factor . equals ( matrix . ) ; dpi _ scale _ factor = source . composition _ target . transform _ to _ device . ; </%> <%> <*> ) -> & & browser ! = null ) </%> <@> if ( browser ! = null ) { browser . get _ host ( ) . notify _ screen _ info _ changed ( ) ; } </@> 
<%> <-> var wcf _ enabled _ argument = args . single _ or _ default ( arg = > arg . starts _ with ( cef _ sharp _ arguments . wcf _ enabled _ argument ) ) ; </%> <%> <-> var wcf _ enabled = wcf _ enabled _ argument ! = default ( string ) ; </%> <@> return wcf _ enabled ? new cef _ wcf _ render _ process ( args ) : new cef _ render _ process ( args ) ; </@> 
<%> <-> set { } </%> <@> get { return new int [ ] { 1 , 2 , NUM , NUM , NUM , NUM , NUM , NUM } ; } set { } </@> <%> <-> set { } </%> <%> <-> set { } </%>
<%> <+> ignore _ uri _ change = false ; } </%> <@> uri = browser _ core . address ; </@> 
<%> <+> public static task < double > get _ zoom _ level _ async ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; return host . get _ zoom _ level _ async ( ) ; } </%> <@> throw _ exception _ if _ browser _ null ( cef _ browser ) ; var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; return host . get _ zoom _ level _ async ( ) ; </@> <%> <+> public static void set _ zoom _ level ( this i _ browser cef _ browser , double zoom _ level ) { throw _ exception _ if _ browser _ null ( cef _ browser ) ; var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . set _ zoom _ level ( zoom _ level ) ; } </%>
<%> <+> cef _ browser . find ( identifier , search _ text , forward , match _ case , find _ next ) ; } public static void stop _ finding ( this i _ browser cef _ browser , bool clear _ selection ) { </%> <%> <*> find ( identifier , search _ text , forward , match -> stop </%> <%> <*> case , find -> finding ( clear </%> <%> <*> next -> selection </%> <@> var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . stop _ finding ( clear _ selection ) ; </@> <%> <+> public static void print ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . print ( ) ; } </%>
<%> <+> public static void print ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . print ( ) ; } </%> <@> var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . print ( ) ; </@> <%> <+> public static void show _ dev _ tools ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . show _ dev _ tools ( ) ; } </%>
<%> <+> public static void show _ dev _ tools ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . show _ dev _ tools ( ) ; } </%> <@> var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . show _ dev _ tools ( ) ; </@> <%> <+> public static void close _ dev _ tools ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . close _ dev _ tools ( ) ; } </%>
<%> <+> public static void close _ dev _ tools ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . close _ dev _ tools ( ) ; } </%> <@> var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . close _ dev _ tools ( ) ; </@> <%> <+> public static void replace _ misspelling ( this i _ browser cef _ browser , string word ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . replace _ misspelling ( word ) ; } </%>
<%> <+> cef _ browser . replace _ misspelling ( word ) ; } public static void add _ word _ to _ dictionary ( this i _ browser cef _ browser , string word ) { </%> <%> <*> replace -> add _ word _ to </%> <%> <*> misspelling -> dictionary </%> <@> var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . add _ word _ to _ dictionary ( word ) ; </@> 
<%> <-> } </%> <%> <*> return is _ browser _ initialized ? managed _ cef _ browser _ adapter . get _ main _ frame ( ) : null ; -> this . throw _ exception _ if _ browser _ not _ initialized ( ) ; </%> <%> <+> return managed _ cef _ browser _ adapter . get _ main _ frame ( ) ; </%> <@> return is _ browser _ initialized ? managed _ cef _ browser _ adapter . get _ focused _ frame ( ) : null ; </@> <%> <*> return is _ browser _ initialized ? -> return </%> <%> <-> : null </%>
<%> <*> return is _ browser _ initialized ? managed _ cef _ browser _ adapter . get _ main _ frame ( ) : null ; -> this . throw _ exception _ if _ browser _ not _ initialized ( ) ; </%> <%> <+> return managed _ cef _ browser _ adapter . get _ main _ frame ( ) ; </%> <%> <*> return is _ browser _ initialized ? -> return </%> <%> <-> : null </%> <@> return is _ browser _ initialized ? managed _ cef _ browser _ adapter . get _ browser ( ) : null ; </@> 
<%> <+> var modifiers = e . get _ modifiers ( ) ; </%> <@> modifiers : cef _ event _ flags . none ) ; </@> 
<%> <*> public -> private </%> <@> return wcf _ enabled ? new cef _ render _ process ( args ) : new cef _ sub _ process ( ) ; </@> <%> <+> args </%>
 <@> internal sealed class javascript _ callback _ surrogate : javascript _ callback _ factory , i _ data _ contract _ surrogate </@> <%> <*> public -> private readonly i _ </%> <%> <*> surrogate ( weak -> factory callback </%> <%> <*> reference browser _ process _ weak _ reference ) : base -> factory ; public javascript _ callback _ surrogate </%> <%> <*> browser -> i </%> <%> <*> process -> javascript </%> <%> <*> weak -> callback _ factory callback </%> <%> <*> reference -> factory </%> <%> <+> this . callback _ factory = callback _ factory ; </%>
<%> <*> private task _ factory factory ; public win _ forms _ browser _ process _ handler ( task _ scheduler scheduler ) -> public win _ forms _ browser _ process _ handler ( i _ container components ) </%> <%> <*> factory = new task _ factory ( scheduler ) ; timer = new timer { interval = max _ timer _ delay , auto _ reset = true } ; -> timer = new timer ( components ) { interval = sixty _ times _ per _ second } ; </%> <%> <*> elapsed -> tick </%> <@> factory . start _ new ( ( ) = > cef . do _ message _ loop _ work ( ) ) ; </@> 
<%> <*> object -> bool </%> <%> <+> , out object result </%> <@> object result ; javascript _ object _ repository . try _ call _ method ( object _ id , name , parameters , out result ) ; return result ; </@> <%> <*> object -> bool </%> <%> <+> , out object result </%> <%> <*> object result ; javascript _ object _ repository . try _ get _ property ( object _ id , name , out result ) ; return result ; -> return javascript _ object _ repository . try _ get _ property ( object _ id , name , out result ) ; </%> <%> <*> void -> bool </%>
<%> <*> object -> bool </%> <%> <+> , out object result </%> <%> <*> object result ; javascript _ object _ repository . try _ call _ method ( object _ id , name , parameters , out result ) ; return result ; -> return javascript _ object _ repository . try _ call _ method ( object _ id , name , parameters , out result ) ; </%> <%> <*> object -> bool </%> <%> <+> , out object result </%> <@> object result ; javascript _ object _ repository . try _ get _ property ( object _ id , name , out result ) ; return result ; </@> <%> <*> void -> bool </%> <%> <+> return </%>
<%> <+> m _ instance . padding = system . security . cryptography . padding _ mode . pkc ; </%> <%> <*> public override void encrypt ( system . io . stream input , system . io . stream output ) -> public override string filename _ extension { get { return STR ; } } </%> <%> <+> public override system . io . stream encrypt ( system . io . stream input ) </%> <%> <*> using ( system . security . cryptography . crypto _ stream cs = new system . security . cryptography . crypto _ stream ( output , ct , system . security . cryptography . crypto _ stream _ mode . write ) ) { core . utility . copy _ stream ( input , cs ) ; cs . flush _ final _ block ( ) ; } -> return new crypto _ stream _ wrapper ( new system . security . cryptography . crypto _ stream ( input , ct , system . security . cryptography . crypto _ stream _ mode . write ) ) ; </%> <@> public override void decrypt ( system . io . stream input , system . io . stream output ) </@> <%> <*> using ( system . security . cryptography . crypto _ stream cs = new system . security . cryptography . crypto _ stream ( input , ct , system . security . cryptography . crypto _ stream _ mode . read ) ) core . utility . copy _ stream ( cs , output ) ; -> return new system . security . cryptography . crypto _ stream ( input , ct , system . security . cryptography . crypto _ stream _ mode . read ) ; </%>
<%> <*> public override void encrypt ( system . io . stream input , system . io . stream output ) -> public override string filename _ extension { get { return STR ; } } </%> <%> <+> public override system . io . stream encrypt ( system . io . stream input ) </%> <%> <+> return </%> <%> <*> output -> true </%> <@> public override void decrypt ( system . io . stream input , system . io . stream output ) </@> <%> <+> return </%> <%> <*> output -> false </%> <%> <*> void -> system . io . stream </%> <%> <*> system . io . stream output -> bool encrypt </%>
<%> <+> . any ( </%> <%> <+> ) </%> <@> new _ opts [ STR ] = true ; </@> 
<%> <*> ) ) -> , string _ comparison . invariant _ culture _ ignore _ case ) & & s . name . ends _ with ( suffix , string _ comparison . invariant _ culture _ ignore _ case ) ) </%> <@> var missing = new list < key _ value _ pair < remote _ volume _ entry , library . interface . i _ file _ entry > > ( ) ; </@> 
 <@> public void post ( string key , request _ info info ) { patch ( key , info ) ; } public void patch ( string key , request _ info info ) </@> <%> <+> patch ( key , info ) ; } public void patch ( string key , request _ info info ) { </%>
<%> <-> system . io . </%> <%> <+> if ( m _ is _ writing ) </%> <%> <*> if ( m -> throw new invalid </%> <%> <*> zip = = null -> operation _ exception ( STR </%> <%> <+> ; </%> <%> <*> throw new exception ( strings . file -> i </%> <%> <*> zip . attempt _ read _ while -> entry ze = get </%> <%> <*> writing _ error -> entry ( file </%> <%> <*> ic _ sharp _ code . sharp _ zip _ lib . zip . zip _ entry ze = get _ entry ( file ) ; -> return ze = = null ? null : ze . open _ entry _ stream ( ) ; </%> <%> <-> if ( ze = = null ) return null ; else if ( ze . size = = 0 ) return new zerobyte _ stream ( ) ; else return m _ zip . get _ input _ stream ( ze ) ; </%> <@> public system . io . stream open _ write ( string file ) </@> <%> <*> system . io . stream -> var </%>
 <@> using ( sftp _ con con = create _ managed _ connection ( true ) ) con . put ( get _ full _ path ( remotename ) , stream ) ; </@> <%> <*> using ( sftp _ con con = create _ managed _ connection ( true ) ) con . get ( get _ full _ path ( remotename ) , stream ) ; -> create _ managed _ connection ( true ) . get ( get _ full _ path ( remotename ) , stream ) ; </%>
<%> <*> using ( sftp _ con con = create _ managed _ connection ( true ) ) con . put ( get _ full _ path ( remotename ) , stream ) ; -> create _ managed _ connection ( true ) . put ( get _ full _ path ( remotename ) , stream ) ; </%> <@> using ( sftp _ con con = create _ managed _ connection ( true ) ) con . get ( get _ full _ path ( remotename ) , stream ) ; </@> 
 <@> else return run _ from _ most _ recent _ spawn ( method , cmdargs , defaultstrategy ) ; </@> <%> <-> if ( disable _ update _ domain ) </%>
<%> <+> , string _ comparer . ordinal _ ignore _ case </%> <%> <+> . key , sc . value </%> <@> known _ storage _ classes = ns . to _ array ( ) ; </@> 
<%> <+> commandline _ options . contains _ key ( STR ) ? </%> <%> <+> : false </%> <@> program . use _ database _ encryption = ! ( commandline _ options . contains _ key ( STR ) ? library . utility . utility . parse _ bool _ option ( commandline _ options , STR ) : true ) ; </@> 
 <@> var sshfolder = client . list _ directory ( STR ) . where ( x = > x . name = = STR ) . first ( ) ; </@> <%> <*> where -> any </%> <%> <-> ) . any ( </%>
<%> <*> where -> first </%> <%> <-> ) . first ( </%> <@> var existing _ authorized _ keys = client . list _ directory ( ssh _ folder ) . where ( x = > x . name = = authorized _ keys _ file ) . any ( ) ; </@> 
 <@> i _ node parent = nodes . where ( x = > x . type = = node _ type . root ) . first ( ) ; </@> <%> <*> where -> first _ or _ default </%> <%> <*> . first _ or _ default ( ) ; -> ; </%>
 <@> var cur = notifications . where ( x = > x . id = = id ) . first _ or _ default ( ) ; </@> <%> <*> where -> any </%> <%> <-> ) . any ( </%> <%> <*> where -> any </%> <%> <-> ) . any ( </%>
<%> <+> async </%> <%> <-> system . io . </%> <%> <+> await </%> <%> <+> _ async </%> <%> <+> , cancel _ token </%> <@> throw new interface . folder _ missing _ exception ( ex ) ; </@> <%> <-> return task . from _ result ( true ) ; </%>
 <@> using ( var backend = new fh _ backend ( m _ backendurl , m _ options , restoredb , m _ stat , null ) ) </@> <%> <-> & & n . encryption _ module = = ( m _ options . no _ encryption ? null : m _ options . encryption _ module ) </%>
<%> <-> } </%> <@> lock ( m _ lock ) { using ( var tr = new temporary _ transaction _ wrapper ( m _ connection , transaction ) ) { </@> <%> <-> } </%>
 <@> using ( var backend = new fh _ backend ( m _ backendurl , m _ options , db , m _ stat , null ) ) </@> <%> <*> var filename = fileset . file . name -> list < string > res </%> <%> <*> filename -> fileset . file . name </%> <%> <*> filename -> fileset . file . name </%> <%> <*> - 1 -> fileset . file . size </%>
<%> <+> , null </%> <@> using ( var backend = new fh _ backend ( m _ backendurl , m _ options , database , m _ stat , null ) ) </@> 
 <@> using ( var tr = db . begin _ transaction ( ) ) using ( var backend = new fh _ backend ( m _ backendurl , m _ options , db , m _ stat , tr ) ) </@> <%> <-> var extra = tp . item . to _ list ( ) ; var missing = tp . item . to _ list ( ) ; </%>
<%> <*> public runner _ state active _ backup _ state { get { } public long active _ schedule _ id -> public tuple < long , string > active _ task </%> <@> if ( t = = null | | t . item ! = duplicati _ operation . backup ) return - 1 ; </@> <%> <*> return -> return new tuple < long , string > ( t . task _ id , </%> <%> <*> item -> backup . id ) </%> <%> <+> < tuple </%> <%> <+> , string > </%> <%> <*> item = -> backup ! </%> <%> <*> duplicati -> null select new tuple < long , string > ( n . task </%> <%> <*> operation -> id , n </%> <%> <-> select n </%> <%> <*> item -> id </%> <%> <+> ) </%>
 <@> using ( system . io . file _ stream fs = system . io . file . open _ read ( filename ) ) </@> <%> <-> system . io . </%> <%> <-> system . io . </%>
<%> <-> system . io . </%> <%> <-> system . io . </%> <@> using ( system . io . file _ stream fs = system . io . file . create ( filename ) ) </@> 
<%> <+> private bool m _ has _ enabled _ background _ io _ priority ; </%> <%> <+> private int m _ original _ nice _ level ; private int m _ original _ nice _ class ; private win . io _ priority _ hint m _ original _ win _ priority _ class ; private bool m _ has _ started _ background _ mode = false ; </%> <@> m _ options = options ; if ( m _ options = = null ) </@> <%> <+> options </%>
 <@> temp _ file ret _ target , dl _ target = null , decrypt _ target = null ; </@> <%> <-> dl _ target = new temp _ file ( ) ; </%> <%> <-> { </%> <%> <-> m _ backend . get ( item . remote _ filename , dl _ target ) ; } </%>
<%> <+> duplicati . library . </%> <%> <+> . library </%> <%> <+> duplicati . library . </%> <%> <+> . library </%> <@> using ( core . temp _ folder ttf = new duplicati . core . temp _ folder ( ) ) </@> <%> <-> logging . </%> <%> <+> . library </%> <%> <-> logging . </%>
<%> <-> core . </%> <%> <-> duplicati . core . </%> <%> <-> logging . </%> <%> <+> . library </%> <@> using ( new logging . timer ( STR + folders [ i ] ) ) </@> <%> <-> logging . </%> <%> <-> logging . </%> <%> <-> logging . </%> <%> <-> core . </%>
<%> <-> logging . </%> <%> <+> . library </%> <%> <-> logging . </%> <@> ( logging . log . current _ log as logging . stream _ log ) . dispose ( ) ; logging . log . current _ log = null ; </@> <%> <-> core . </%> <%> <-> core . </%> <%> <-> core . </%> <%> <-> core . </%>
<%> <*> backend -> interface </%> <%> <*> backend -> interface </%> <@> public static void print _ argument ( list < string > lines , duplicati . library . backend . i _ command _ line _ argument arg ) </@> <%> <+> if ( arg . deprecated ) lines . add ( STR + strings . command _ line _ argument . deprecation _ marker + STR + arg . deprecation _ message ) ; </%>
<%> <*> var conopts = new dictionary < string , string > ( m _ options . raw _ options ) ; -> var pristinefilter = string . join ( system . io . path . path _ separator . to _ string ( ) , filter _ expression . serialize ( filter ) ) ; m _ options . raw _ options [ STR ] = pristinefilter ; </%> <%> <-> conopts [ ( string ) k ] = qp [ ( string ) k ] ; </%> <%> <*> var pristinefilter = conopts [ STR ] = string . join ( system . io . path . path _ separator . to _ string ( ) , filter _ expression . serialize ( filter ) ) ; -> m _ options . raw _ options [ ( string ) k ] = qp [ ( string ) k ] ; </%> <@> if ( mx . value is library . interface . i _ connection _ module ) mx . value . configure ( conopts ) ; else mx . value . configure ( m _ options . raw _ options ) ; </@> 
<%> <*> fhopts -> m _ options </%> <@> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; forest _ hash . forest _ hash . restore ( m _ backend , fhopts , rs , target [ 0 ] ) ; </@> <%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , fhopts , rs , target ) ) -> using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , m _ options , rs , target ) ) </%>
<%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; forest _ hash . forest _ hash . restore ( m _ backend , fhopts , rs , target [ 0 ] ) ; -> forest _ hash . forest _ hash . restore ( m _ backend , m _ options , rs , target [ 0 ] ) ; </%> <@> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , fhopts , rs , target ) ) </@> <%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , fhopts , rs ) ) -> using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , m _ options , rs ) ) </%>
<%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , fhopts , rs , target ) ) -> using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , m _ options , rs , target ) ) </%> <@> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , fhopts , rs ) ) </@> <%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , fhopts , rs ) ) -> using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , m _ options , rs ) ) </%>
<%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , fhopts , rs ) ) -> using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , m _ options , rs ) ) </%> <@> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , fhopts , rs ) ) </@> <%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . list _ files _ handler ( m _ backend , fhopts , rs ) ) -> using ( var handler = new forest _ hash . operation . list _ files _ handler ( m _ backend , m _ options , rs ) ) </%>
<%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , fhopts , rs ) ) -> using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , m _ options , rs ) ) </%> <@> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . list _ files _ handler ( m _ backend , fhopts , rs ) ) </@> 
<%> <+> if ( string . is _ null _ or _ empty ( m _ options . fhdbpath ) ) m _ options . fhdbpath = forest _ hash . database _ locator . get _ database _ path ( m _ backend , m _ options ) ; </%> <@> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . find _ last _ file _ version _ handler ( m _ backend , fhopts , rs ) ) </@> 
 <@> var writer _ guids = new guid [ ] { hyper _ v _ writer _ guid } ; </@> <%> <-> duplicati . library . </%>
 <@> if ( operation _ progress ! = null ) operation _ progress ( this , duplicati _ operation . backup , - 1 , - 1 , strings . interface . status _ loading _ filelist , STR ) ; </@> <%> <+> backend . progress _ event + = new duplicati . library . main . r _ sync . r _ sync _ dir . progress _ event _ delegate ( backup _ transfer _ progress _ event ) ; </%>
<%> <-> fh _ </%> <@> n = n . union ( db . delete _ all _ but _ n ( m _ options . delete _ all _ but _ n _ full , m _ options . allow _ full _ removal , m _ stat , m _ options , tr ) ) ; </@> 
<%> <*> void -> task </%> <%> <*> ) -> , cancellation _ token cancel _ token ) </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <+> , cancel _ token </%> <%> <+> return task . from _ result ( true ) ; </%> <@> using ( system . io . file _ stream fs = system . io . file . create ( filename ) ) </@> 
<%> <*> var nonce = request . cookies [ nonce _ cookie _ name ] ; if ( nonce = = null | | string . is _ null _ or _ white _ space ( nonce . value ) | | ! m _ active _ nonces . contains _ key ( nonce . value ) ) -> var nonce _ el = request . cookies [ nonce _ cookie _ name ] ; </%> <%> <+> var nonce = nonce _ el = = null | | string . is _ null _ or _ white _ space ( nonce _ el . value ) ? STR : nonce _ el . value ; var urldecoded = nonce = = null ? STR : duplicati . library . utility . uri . url _ decode ( nonce ) ; if ( m _ active _ nonces . contains _ key ( urldecoded ) ) nonce = urldecoded ; if ( ! m _ active _ nonces . contains _ key ( nonce ) ) </%> <@> var pwd = m _ active _ nonces [ nonce . value ] . item ; m _ active _ nonces . remove ( nonce . value ) ; </@> 
 <@> else if ( result is system . collections . i _ enumerable ) </@> <%> <-> system . collections . </%> <%> <*> ie -> result _ enumerable </%> <%> <-> system . collections . </%> <%> <-> system . collections . </%> <%> <*> ien -> result _ enumerator </%> <%> <*> ie -> result _ enumerable </%> <%> <*> ien -> result _ enumerator </%> <%> <*> ien -> result _ enumerator </%> <%> <*> object c = ien . current ; -> object current = result _ enumerator . current ; </%> <%> <+> if ( current = = null ) { </%>
<%> <-> static </%> <%> <*> m _ last -> string cert </%> <%> <*> certificate -> hash </%> <@> string cert _ hash = core . utility . byte _ array _ as _ hex _ string ( cert . get _ cert _ hash ( ) ) ; m _ last _ certificate = cert _ hash ; </@> <%> <*> m _ last -> cert </%> <%> <*> certificate -> hash </%>
<%> <*> key -> async </%> <%> <*> value _ pair < i _ remote _ volume , library . utility . temp -> downloaded </%> <%> <-> > ? </%> <%> <*> public key _ value _ pair < -> public </%> <%> <*> remote -> async </%> <%> <*> volume , library . utility . temp -> downloaded </%> <%> <-> > </%> <@> get { return m _ current . value ; } </@> <%> <*> value . value . dispose -> dispose _ temp _ file </%>
<%> <+> backend . i _ backend _ interface backend = backend . backend _ loader . get _ backend ( source , options ) ; </%> <@> list < backup _ entry > entries = parse _ file _ list ( source , options ) ; backend . i _ backend _ interface backend = backend . backend _ loader . get _ backend ( source , options ) ; </@> 
 <@> var pristinepaths = paths ; foreach ( key _ value _ pair < bool , library . interface . i _ generic _ module > mx in m _ options . loaded _ modules ) </@> <%> <*> ( ( library . interface . i _ generic _ source _ module ) mx . value ) . parse _ source ( ref paths , ref conopts ) ; -> { </%> <%> <+> var sourceoptions = ( ( library . interface . i _ generic _ source _ module ) mx . value ) . parse _ source ( ref paths , ref pristinefilter ) ; </%>
<%> <-> using system _ text ; </%> <@> public class hyper _ v _ options : interface . i _ generic _ module , interface . i _ generic _ source _ module </@> <%> <*> http -> hyper _ v </%>
 <@> if ( rd . read ( ) ) { var more = false ; do </@> <%> <+> var more = false ; do { </%>
<%> <*> . -> _ </%> <%> <*> . -> _ </%> <%> <*> . -> _ </%> <%> <-> . create </%> <%> <*> directory -> create </%> <@> if ( m _ username ! = null ) m _ username = null ; if ( m _ password ! = null ) m _ password = null ; </@> 
<%> <-> else </%> <@> else { return null ; } </@> 
<%> <*> long lid ; if ( long . try _ parse ( id , out lid ) ) return get _ backup ( lid ) ; else return get _ temporary _ backup ( id ) ; -> return long . try _ parse ( id , out long lid ) ? get _ backup ( lid ) : get _ temporary _ backup ( id ) ; </%> <@> ( rd ) = > new backup ( ) { </@> 
<%> <*> string _ builder filename = new string _ builder ( ) ; int filenamelen = rnd . next ( min _ filename _ size , max _ filename _ size ) ; for ( int j = 0 ; j < filenamelen ; j + + ) filename . append ( allowed _ chars [ rnd . next ( 0 , allowed _ chars . length ) ] ) ; -> string filename = create _ random _ remote _ file _ name ( min _ filename _ size , max _ filename _ size , allowed _ chars , trim _ filename _ spaces , rnd ) ; </%> <@> files . add ( new temp _ file ( filename . to _ string ( ) , localfilename , sha . compute _ hash ( fs ) , fs . length ) ) ; </@> 
<%> <-> var url = new uri ( url ) ; </%> <@> remote _ path = url . absolute _ path . ends _ with ( STR ) ? url . absolute _ path . substring ( 0 , url . absolute _ path . length - 1 ) : url . absolute _ path ; </@> <%> <-> STR + </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> void enumerate _ files _ and _ folders ( string startpath , duplicati . library . core . filename _ filter filter , duplicati . library . core . utility . enumeration _ callback _ delegate callback ) ; </@> 
 <@> m _ statusmessage = string . format ( strings . backend _ wrapper . status _ message _ uploading , remotename , core . utility . format _ size _ string ( new system . io . file _ info ( filename ) . length ) ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
 <@> if ( core . utility . is _ client _ linux ) </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> m _ path = core . utility . append _ dir _ separator ( path ) ; </@> 
 <@> public void enumerate _ files _ and _ folders ( string rootpath , duplicati . library . core . filename _ filter filter , duplicati . library . core . utility . enumeration _ callback _ delegate callback ) </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> callback ( rootpath , r . key , duplicati . library . core . utility . enumerated _ file _ status . file ) ; </@> 
 <@> if ( r . value . usn > = last _ usn & & r . key . starts _ with ( source _ folder , core . utility . client _ filename _ string _ comparision ) ) </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> if ( r . key . starts _ with ( m _ path , core . utility . client _ filename _ string _ comparision ) ) </@> 
 <@> success = core . utility . compare _ streams ( m _ original _ signature _ stream , m _ signature _ stream , true ) ; </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> core . utility . copy _ stream ( m _ signature _ stream , , true ) ; </@> 
<%> <*> core -> utility </%> <@> sourcefolder [ i ] = core . utility . append _ dir _ separator ( sourcefolder [ i ] ) ; </@> <%> <*> core -> utility </%>
 <@> if ( core . utility . is _ client _ linux & & options . usn _ strategy ! = options . optimization _ strategy . auto ) </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> usn _ helpers = new dictionary < string , duplicati . library . snapshots . usn _ helper > ( core . utility . client _ filename _ string _ comparer ) ; </@> 
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> int ix = m _ unproccesed . files . binary _ search ( folder , core . utility . client _ filename _ string _ comparer ) ; </@> 
 <@> fs = new core . temp _ file _ stream ( ) ; core . utility . copy _ stream ( ts , fs , false ) ; </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> if ( ! core . utility . compare _ streams ( signature , new _ sig , true ) ) </@> 
<%> <*> core -> utility </%> <@> return m _ filter . should _ include ( core . utility . directory _ separator _ string , core . utility . directory _ separator _ string + core . utility . append _ dir _ separator ( element ) ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> destination [ i ] = core . utility . append _ dir _ separator ( destination [ i ] ) ; </@> 
 <@> string contentprefix = core . utility . append _ dir _ separator ( content _ root ) ; </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> string deltaprefix = core . utility . append _ dir _ separator ( delta _ root ) ; </@> 
<%> <*> core -> utility </%> <@> core . utility . copy _ stream ( , st ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
 <@> public void callback ( string rootpath , string path , core . utility . enumerated _ file _ status status ) { if ( status = = core . utility . enumerated _ file _ status . folder ) </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> else if ( status = = core . utility . enumerated _ file _ status . file ) </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> else if ( status = = core . utility . enumerated _ file _ status . error ) </@> 
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> if ( ! library . core . utility . is _ client _ linux ) </@> 
 <@> dictionary < string , int > duplicates = new dictionary < string , int > ( library . core . utility . client _ filename _ string _ comparer ) ; </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> targets [ index ] = string . is _ null _ or _ empty ( m _ default _ target ) ? STR : library . core . utility . append _ dir _ separator ( m _ default _ target ) + suffix ; </@> 
 <@> public void callback ( string rootpath , string path , core . utility . enumerated _ file _ status status ) { if ( status = = duplicati . library . core . utility . enumerated _ file _ status . file ) </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> else if ( status = = duplicati . library . core . utility . enumerated _ file _ status . folder ) </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
 <@> public void enumerate _ files _ and _ folders ( string startpath , duplicati . library . core . filename _ filter filter , duplicati . library . core . utility . enumeration _ callback _ delegate callback ) </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
 <@> parent _ folders . add ( duplicati . library . core . utility . append _ dir _ separator ( folder ) ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
 <@> m _ folder = core . utility . append _ dir _ separator ( basefolder ) ; </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> return core . utility . enumerate _ files ( system . io . path . combine ( m _ folder , prefix ) ) . to _ array ( ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> return core . utility . enumerate _ folders ( system . io . path . combine ( m _ folder , prefix ) ) . to _ array ( ) ; </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> return core . utility . enumerate _ file _ system _ entries ( system . io . path . combine ( m _ folder , prefix ) ) . to _ array ( ) ; </@> 
 <@> sources [ i ] = core . utility . append _ dir _ separator ( sources [ i ] ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> if ( sources [ i ] . equals ( sources [ j ] , core . utility . is _ fs _ case _ sensitive ? string _ comparison . current _ culture : string _ comparison . current _ culture _ ignore _ case ) ) </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> else if ( sources [ i ] . starts _ with ( sources [ j ] , core . utility . is _ fs _ case _ sensitive ? string _ comparison . current _ culture : string _ comparison . current _ culture _ ignore _ case ) ) </@> 
 <@> manifest . content _ hashes . add ( core . utility . calculate _ hash ( contentfile ) ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> manifest . signature _ hashes . add ( core . utility . calculate _ hash ( signaturefile ) ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
 <@> string prefix = core . utility . append _ dir _ separator ( r _ sync . r _ sync _ dir . control _ root ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> system . threading . thread . current _ thread . priority = core . utility . parse _ priority ( m _ options . thread _ priority ) ; </@> 
 <@> string root = duplicati . library . core . utility . append _ dir _ separator ( application . startup _ path ) ; </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> foreach ( string s in duplicati . library . core . utility . enumerate _ files ( application . startup _ path ) ) </@> 
 <@> if ( ! library . core . utility . is _ client _ linux ) </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> if ( ! library . core . utility . is _ client _ linux & & string . is _ null _ or _ empty ( environment . get _ environment _ variable ( db _ key _ env _ name ) ) ) </@> 
 <@> entry . folder _ size = library . core . utility . format _ size _ string ( m _ sizes [ path ] ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <@> total _ size . text = string . format ( strings . select _ files . final _ size _ calculated , library . core . utility . format _ size _ string ( s ) ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> total _ size . text = string . format ( strings . select _ files . partial _ size _ calculated , library . core . utility . format _ size _ string ( s ) ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> my _ music _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( m _ my _ music ) ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> my _ pictures _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( m _ my _ pictures ) ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> desktop _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( m _ desktop ) ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> appdata _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( m _ app _ data ) ) ; </@> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> my _ documents _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( m _ my _ documents ) ) ; </@> 
 <@> m _ sourcefolders [ i ] = core . utility . append _ dir _ separator ( folders [ i ] ) ; </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <@> if ( s . equals ( startpath , core . utility . client _ filename _ string _ comparision ) ) </@> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>
<%> <+> x = special _ folders . expand _ environment _ variables ( x ) ; </%> <%> <*> var n = system . io . path . get _ file _ name ( x ) ; -> var nx = x ; </%> <%> <+> if ( nx . ends _ with ( system . io . path . directory _ separator _ char . to _ string ( ) ) ) nx = nx . substring ( 0 , nx . length - 1 ) ; var n = system _ io . path _ get _ file _ name ( nx ) ; </%> <@> return new key _ value _ pair < string , string > ( x , system . io . path . get _ file _ name ( n ) ) ; </@> 
 <@> return STR + this . username + STR + this . host + STR + this . port + STR + this . folder ; </@> <%> <+> options [ STR ] = this . username ; </%>
 <@> return STR + this . username + STR + this . host + STR + this . folder ; </@> <%> <+> if ( ! string . is _ null _ or _ empty ( this . username ) ) options [ STR ] = this . username ; </%>
 <@> if ( ! string . is _ null _ or _ empty ( this . username ) ) return STR + this . username + STR + this . destination _ folder ; else return STR + this . destination _ folder ; </@> <%> <+> if ( ! string . is _ null _ or _ empty ( this . username ) ) options [ STR ] = this . username ; </%>
<%> <-> result . add _ verbose _ message ( STR , sources [ j ] ) ; sources . remove _ at ( j ) ; j - - ; } else if ( sources [ i ] . starts _ with ( sources [ j ] , library . utility . utility . client _ filename _ string _ comparision ) ) { bool includes ; bool excludes ; filter _ expression . analyze _ filters ( filter , out includes , out excludes ) ; </%> <%> <*> if ( excludes ) -> if ( filter ! = null ) </%> <%> <+> bool includes ; bool excludes ; filter _ expression . analyze _ filters ( filter , out includes , out excludes ) ; if ( excludes ) { </%> <%> <+> } else result . add _ verbose _ message ( STR , sources [ i ] , sources [ j ] ) ; </%> <@> { result . add _ verbose _ message ( STR , sources [ i ] , sources [ j ] ) ; } </@> <%> <-> } </%>
<%> <+> private static string override _ server = null ; public static string oauth _ server { get { return string . is _ null _ or _ white _ space ( override _ server ) ? duplicati _ oauth _ service : override _ server ; } set { override _ server = value ; } } </%> <@> private const string oauth _ login _ url _ template = STR ; public static string oauth _ login _ url ( string modulename ) { return string . format ( STR , modulename ) ; } </@> 
 <@> return this . to _ string ( ) + </@> <%> <-> . to _ string ( ) </%>
<%> <-> . to _ string ( ) </%> <@> ? environment . new _ line + exception . to _ string ( ) </@> 
 <@> throw new exception ( string . format ( STR , error _ builder . to _ string ( ) ) ) ; </@> <%> <-> . to _ string ( ) </%>
<%> <-> . to _ string ( ) </%> <@> console . error . write _ line ( error _ builder . to _ string ( ) ) ; </@> 
<%> <+> if ( changed & & m _ options . upload _ verification _ file ) filelist _ processor . upload _ verification _ file ( m _ backendurl , m _ options , m _ result . backend _ writer , db , null ) ; </%> <@> internal void do _ compact ( local _ delete _ database db , bool has _ verified _ backend , system . data . i _ db _ transaction transaction ) </@> 
<%> <-> try { </%> <@> if ( old _ id < 0 | | m _ options . disable _ filetime _ check | | local _ database . normalize _ date _ time ( last _ modified ) > = old _ scanned & & ( m _ options . skip _ files _ larger _ than = = long . max _ value | | filestatsize < m _ options . skip _ files _ larger _ than ) ) </@> 
 <@> assert . are _ equal ( filesets , NUM , STR ) ; </@> <%> <-> filecount , </%> <%> <+> , filecount </%>
<%> <*> filesets -> NUM </%> <%> <*> NUM -> filesets </%> <@> assert . are _ equal ( filecount , filenames . count + 1 , STR ) ; </@> <%> <+> NUM , </%> <%> <-> , NUM </%> <%> <+> NUM , </%> <%> <-> , NUM </%>
<%> <-> filecount , </%> <%> <+> , filecount </%> <@> assert . are _ equal ( res . rewritten _ file _ lists , NUM , STR ) ; assert . are _ equal ( res . removed _ file _ count , NUM , STR ) ; </@> <%> <+> 1 , </%> <%> <-> , 1 </%> <%> <+> 1 , </%> <%> <-> , 1 </%>
<%> <+> 1 , </%> <%> <-> , 1 </%> <%> <+> 1 , </%> <%> <-> , 1 </%> <@> assert . are _ equal ( res . rewritten _ file _ lists , 2 , STR ) ; assert . are _ equal ( res . removed _ file _ count , NUM , STR ) ; </@> <%> <+> 1 , </%> <%> <-> , 1 </%> <%> <+> 2 , </%> <%> <-> , 2 </%>
<%> <+> 2 , </%> <%> <-> , 2 </%> <%> <+> NUM , </%> <%> <-> , NUM </%> <@> assert . are _ equal ( res . rewritten _ file _ lists , 1 , STR ) ; assert . are _ equal ( res . removed _ file _ count , 2 , STR ) ; </@> <%> <*> filesets -> NUM </%> <%> <*> NUM -> filesets </%> <%> <-> filecount , </%> <%> <+> , filecount </%>
<%> <+> 1 , </%> <%> <-> , 1 </%> <%> <+> 2 , </%> <%> <-> , 2 </%> <@> assert . are _ equal ( filesets , NUM , STR ) ; assert . are _ equal ( filecount , filenames . count - NUM + 1 , STR ) ; </@> <%> <*> filesets -> NUM </%> <%> <*> NUM -> filesets </%>
<%> <-> filecount , </%> <%> <+> , filecount </%> <@> assert . are _ equal ( filesets , NUM , STR ) ; assert . are _ equal ( filecount , filenames . count + 1 , STR ) ; </@> 
<%> <-> if ( m _ old _ signatures . contains _ key ( s ) ) </%> <%> <+> { </%> <%> <+> m _ last _ verification _ time . remove ( s ) ; } </%> <%> <+> { archive _ wrapper aw = new archive _ wrapper ( z , patch . key . time . to _ universal _ time ( ) , prefix ) ; </%> <%> <*> m _ old _ signatures [ f . substring ( prefix . length ) ] = new archive _ wrapper ( z , prefix ) ; -> { </%> <%> <+> string name = f . substring ( prefix . length ) ; m _ old _ signatures [ name ] = aw ; m _ last _ verification _ time . remove ( name ) ; } } if ( z . file _ exists ( unmodified _ files ) ) foreach ( string s in filenames _ from _ platform _ independant ( z . read _ all _ lines ( unmodified _ files ) ) ) m _ last _ verification _ time [ s ] = patch . key . time . to _ universal _ time ( ) ; </%> <@> if ( m _ old _ folders . contains _ key ( s ) ) m _ old _ folders . remove ( s ) ; </@> 
 <@> target = new upload _ request ( new block _ volume _ writer ( options ) , options . indexfile _ policy = = options . index _ file _ strategy . none ? null : new index _ volume _ writer ( options ) ) ; </@> <%> <-> if ( target . index _ volume ! = null ) target . index _ volume . volume _ id = await database . register _ remote _ volume _ async ( target . index _ volume . remote _ filename , remote _ volume _ type . index , remote _ volume _ state . temporary ) ; </%>
 <@> using ( activate _ certificate _ validator ( ) ) { system . net . http _ web _ request req = create _ request ( remotename , STR ) ; req . method = STR ; using ( req . get _ response ( ) ) { } } </@> <%> <-> new command _ line _ argument ( STR , command _ line _ argument . argument _ type . string , strings . tahoe _ backend . description _ accept _ hash _ short , strings . tahoe _ backend . description _ accept _ hash _ long ) , new command _ line _ argument ( STR , command _ line _ argument . argument _ type . boolean , strings . tahoe _ backend . description _ accept _ any _ certificate _ short , strings . tahoe _ backend . description _ accept _ any _ certificate _ long ) , </%>
<%> <+> channel _ name _ progress _ channel private i _ write _ channel < progress _ event > m _ progresschannel ; </%> <@> private i _ write _ channel < file _ splitter _ process . data _ block > m _ blockoutput ; </@> <%> <-> database . local _ </%> <%> <-> database . local _ </%>
 <@> private async task < bool > add _ folder _ to _ output ( string filename , date _ time last _ modified , i _ metahash meta ) </@> <%> <*> long metadataid ; bool r = false ; -> long metadataid = - 1 ; </%> <%> <-> r | = await file _ splitter _ process . data _ block . add _ block _ to _ output _ async ( m _ blockoutput , meta . hash , meta . blob , 0 , ( int ) meta . size , compression _ hint . default , false ) ; lock ( m _ database . access _ lock ) r | = m _ database . add _ metadataset ( meta . hash , meta . size , out metadataid , m _ transaction ) ; m _ database . add _ directory _ entry ( filename , metadataid , last _ modified , m _ transaction ) ; </%>
<%> <*> string query = STR ; var args = new list < object > ( ) ; if ( time . ticks > 0 | | ( versions ! = null & & versions . length > 0 ) ) { query = STR ; if ( time . ticks > 0 ) { if ( time . kind = = date _ time _ kind . unspecified ) throw new exception ( STR ) ; query + = STR ; args . add ( time . to _ universal _ time ( ) ) ; } if ( versions ! = null & & versions . length > 0 ) { var qs = STR ; foreach ( var v in versions ) if ( v > = 0 & & v < m _ filesets . length ) { args . add ( m _ filesets [ v ] . key ) ; qs + = STR ; } if ( qs . length > 0 ) { qs = qs . substring ( 0 , qs . length - 1 ) ; if ( args . count ! = 0 ) query + = STR ; query + = STR + qs + STR ; } } } -> var tmp = owner . get _ filelist _ where _ clause ( time , versions , m _ filesets ) ; </%> <%> <+> string query = tmp . item ; var args = tmp . item ; </%> <@> cmd . execute _ non _ query ( string . format ( STR + query , m _ tablename ) , args . to _ array ( ) ) ; </@> 
 <@> void runner _ duplicati _ progress ( duplicati . library . main . duplicati _ operation operation , duplicati _ runner . runner _ state state , string message , string submessage , int progress , int subprogress ) </@> <%> <-> duplicati _ runner . </%>
 <@> public void set _ current _ icon ( duplicati _ runner . runner _ result icon , string message ) { if ( icon = = duplicati _ runner . runner _ result . error ) </@> <%> <-> duplicati _ runner . </%> <%> <-> duplicati _ runner . </%> <%> <-> duplicati _ runner . </%>
 <@> void runner _ result _ event ( duplicati _ runner . runner _ result result , string parsed _ message , string message ) </@> <%> <-> duplicati _ runner . </%>
 <@> var system _ io = system _ io . io _ os ( library . utility . utility . is _ client _ windows ) ; foreach ( var s in system _ io . enumerate _ file _ system _ entries ( entrypath ) ) </@> <%> <+> . io _ os </%> <%> <+> . io _ os </%>
<%> <*> target -> s </%> <%> <*> STR -> destination </%> <%> <+> , destination </%> <@> string target = system . io . path . combine ( destination , s . trim ( ) ) ; if ( system . io . directory . exists ( target ) ) </@> <%> <*> target -> s </%> <%> <*> target -> s </%> <%> <*> target -> s </%>
<%> <*> target -> s </%> <%> <*> STR -> destination </%> <%> <+> , destination </%> <@> string target = system . io . path . combine ( destination , s . trim ( ) ) ; if ( ! system . io . directory . exists ( target ) ) </@> <%> <*> target -> s </%> <%> <*> target -> s </%> <%> <*> target -> s </%>
 <@> void connection _ status _ updated ( server . serialization . i _ serializable _ status status ) </@> <%> <*> if -> switch </%> <%> <*> active -> suggested </%> <%> <*> schedule -> status </%> <%> <*> id < 0 -> icon </%> <%> <+> case suggested _ status _ icon . active : tray _ icon . icon = properties . resources . tray _ working ; break ; </%>
<%> <-> ( string . format </%> <%> <*> , -> ( </%> <%> <-> ( string . format </%> <%> <*> , -> ( </%> <@> logging . log . write _ message ( string . format ( strings . run _ script . invalid _ exit _ code _ error , scriptpath , p . exit _ code ) , duplicati . library . logging . log _ message _ type . warning ) ; </@> <%> <-> ( string . format </%> <%> <*> , -> ( </%> <%> <-> ( string . format </%> <%> <*> , -> ( </%>
<%> <-> ( string . format </%> <%> <*> , -> ( </%> <%> <-> ( string . format </%> <%> <*> , -> ( </%> <@> logging . log . write _ message ( string . format ( strings . run _ script . std _ error _ report , scriptpath , stderr ) , duplicati . library . logging . log _ message _ type . warning ) ; </@> 
 <@> return string . format ( strings . utility . format _ string _ gb , ( double ) size / ( NUM * NUM * NUM ) ) ; </@> <%> <-> string . format ( </%> <%> <*> , -> ( </%> <%> <-> string . format ( </%> <%> <*> , -> ( </%> <%> <-> string . format ( </%> <%> <*> , -> ( </%>
<%> <-> string . format ( </%> <%> <*> , -> ( </%> <@> return string . format ( strings . utility . format _ string _ mb , ( double ) size / ( NUM * NUM ) ) ; </@> <%> <-> string . format ( </%> <%> <*> , -> ( </%> <%> <-> string . format ( </%> <%> <*> , -> ( </%>
<%> <-> string . format ( </%> <%> <*> , -> ( </%> <%> <-> string . format ( </%> <%> <*> , -> ( </%> <@> return string . format ( strings . utility . format _ string _ kb , ( double ) size / NUM ) ; </@> <%> <-> string . format ( </%> <%> <*> , -> ( </%>
 <@> throw new exception ( string . format ( strings . google _ docs . folder _ has _ multiple _ owners _ error , cur . title , string . join ( STR , pids ) ) ) ; </@> <%> <-> ( string . format </%> <%> <*> , -> ( </%>
<%> <-> string . format ( </%> <%> <*> , -> ( </%> <%> <-> , string . join ( STR </%> <%> <-> ) </%> <@> return string . format ( strings . controller . unsupported _ boolean _ value , optionname , value ) ; </@> <%> <-> string . format ( </%> <%> <*> , -> ( </%>
<%> <-> string . format ( </%> <%> <*> , -> ( </%> <@> return string . format ( strings . controller . unsupported _ integer _ value , optionname , value ) ; </@> <%> <-> string . format ( </%> <%> <*> , -> ( </%>
<%> <-> string . format ( </%> <%> <*> , -> ( </%> <@> return string . format ( strings . controller . unsupported _ path _ value , optionname , p ) ; </@> <%> <-> string . format ( </%> <%> <*> , -> ( </%>
<%> <-> string . format ( </%> <%> <*> , -> ( </%> <@> return string . format ( strings . controller . unsupported _ size _ value , optionname , value ) ; </@> 
<%> <*> , i _ enumerable < byte [ ] > data = null ) -> ) </%> <%> <-> if ( data ! = null ) foreach ( var d in data ) add _ hash ( d ) ; </%> <%> <*> byte [ ] -> ulong </%> <@> var bit = bit _ converter . to _ u _ int ( data , 0 ) % m _ bits ; </@> <%> <*> byte [ ] -> ulong </%> <%> <-> bit _ converter . to _ u _ int ( </%> <%> <-> , 0 ) </%>
<%> <-> if ( data ! = null ) foreach ( var d in data ) add _ hash ( d ) ; </%> <%> <*> byte [ ] -> ulong </%> <%> <-> bit _ converter . to _ u _ int ( </%> <%> <-> , 0 ) </%> <%> <*> byte [ ] -> ulong </%> <@> var bit = bit _ converter . to _ u _ int ( data , 0 ) % m _ bits ; </@> 
<%> <-> backend . </%> <%> <-> backend . </%> <%> <+> m _ </%> <%> <+> m _ </%> <@> task = new key _ value _ pair < int , task > ( 1 , backend . upload _ file _ async ( ( ( fileset _ upload _ request ) req ) . fileset ) ) ; </@> <%> <-> backend . </%>
<%> <-> backend . </%> <%> <-> backend . </%> <%> <+> m _ </%> <%> <+> m _ </%> <%> <-> backend . </%> <@> task = new key _ value _ pair < int , task > ( 1 , backend . upload _ file _ async ( ( ( index _ volume _ upload _ request ) req ) . index _ volume ) ) ; </@> 
 <@> if ( enable _ signing . checked ) m _ task . signaturekey = signkey . text ; else m _ task . signaturekey = null ; </@> <%> <-> private void generate _ sign _ key _ click ( object sender , event _ args e ) { signkey . text = key _ generator . generate _ sign _ key ( ) ; } </%>
<%> <+> private i _ backend m _ backend ; </%> <@> private i _ backend m _ backend ; private backend _ handler m _ backend _ handler ; private common . i _ task _ reader m _ taskreader ; </@> <%> <-> common . backend _ handler backend _ handler , </%> <%> <-> common . </%> <%> <-> common . </%> <%> <-> this . m _ backend _ handler = backend _ handler ; </%>
<%> <-> < bool > </%> <%> <*> , func < string , task < index _ volume _ writer > > create _ index _ file = null ) -> ) </%> <%> <-> return </%> <%> <-> return </%> <%> <-> , false </%> <@> private async task < t > do _ with _ retry < t > ( file _ entry _ item item , func < task < t > > method ) </@> 
 <@> private async task < bool > do _ put ( file _ entry _ item item , bool updated _ hash = false ) </@> <%> <-> true </%>
 <@> vss _ backup _ components . disable _ writer _ classes ( excluded _ writers . to _ array ( ) ) ; </@> <%> <+> } if ( included _ writers = = null ) { </%>
<%> <*> google . documents . document -> tagged _ file _ entry try _ </%> <@> return res . doc ; </@> <%> <-> . doc </%> <%> <*> throw new system . io . file _ not _ found _ exception ( filename ) -> return null </%> <%> <+> } private tagged _ file _ entry get _ file ( string filename ) { tagged _ file _ entry res = try _ get _ file ( filename ) ; if ( res = = null ) throw new system . io . file _ not _ found _ exception ( filename ) ; </%>
 <@> if ( m . value . supported _ commands ! = null ) if ( m . key ) </@> <%> <+> if ( m . value is library . interface . i _ generic _ source _ module ) module _ options . add _ range ( ( ( library . interface . i _ generic _ source _ module ) m . value ) . hidden _ commands ) ; } </%> <%> <+> if ( m . value . supported _ commands ! = null ) </%>
 <@> using ( var fs = new blockprocessor ( snapshot . open _ read ( path ) , m _ blockbuffer ) ) </@> <%> <-> int blocklistoffset = 0 ; m _ filehasher . initialize ( ) ; var offset = 0 ; var remaining = fs . readblock ( ) ; do { var size = math . min ( m _ blocksize , remaining ) ; </%>
<%> <+> _ int </%> <@> m _ block _ hash _ lookup . add ( key , size , new key _ value _ pair < long , long > ( convert . to _ int ( r ) , size ) ) ; </@> <%> <-> ( convert . to _ int </%> <%> <-> ) </%>
<%> <+> _ int </%> <%> <-> ( convert . to _ int </%> <%> <-> ) </%> <@> m _ block _ hash _ lookup . add ( key , size , new key _ value _ pair < long , long > ( convert . to _ int ( r ) , size ) ) ; </@> <%> <-> object r = null ; </%>
<%> <+> new </%> <%> <+> ( 0 , date _ time _ kind </%> <%> <*> _ now -> ) , - 1 </%> <%> <-> convert . to _ int ( </%> <%> <-> ) </%> <@> entry . add _ fileset _ id ( blockset _ id , metadata _ id , convert . to _ int ( fileidobj ) ) ; </@> <%> <*> normalize _ date _ time _ -> lastmodified . </%> <%> <*> epoch -> universal </%> <%> <*> seconds -> time </%> <%> <-> scantime </%> <%> <+> . ticks </%> <%> <*> scantime -> lastmodified </%>
<%> <*> string -> i _ delete _ results </%> <@> handler . run ( ) ; return rs . to _ string ( ) ; </@> <%> <-> operation . </%>
<%> <*> handler . run ( ) ; return rs . to _ string ( ) ; -> return handler . run ( ) ; </%> <@> public operation . i _ list _ results list ( string filter = null ) </@> <%> <-> operation . </%>
<%> <-> operation . </%> <@> public operation . i _ list _ results list ( i _ enumerable < string > filter ) </@> 
<%> <*> NUM -> deleted _ file _ image _ key </%> <@> private void add _ tree _ item ( string value , int imagekey ) </@> 
<%> <+> schedule schedule = m _ wrapper . data _ connection . get _ object _ by _ id < schedule > ( m _ wrapper . schedule _ id ) ; if ( ! schedule . exists _ in _ db ) { run _ in _ background . checked = false ; run _ in _ background . visible = false ; } </%> <@> schedule s = program . data _ connection . get _ object _ by _ id < schedule > ( m _ wrapper . schedule _ id ) ; </@> 
 <@> m _ client = new amazon . . amazon _ client ( aws _ id , aws _ key , cfg ) ; </@> <%> <*> put _ bucket _ request request = new put _ bucket _ request ( ) ; request . bucket _ name = bucket _ name ; -> put _ bucket _ request request = new put _ bucket _ request </%> <%> <+> { </%>
<%> <*> application _ settings [ default _ eu _ bucket ] = gui _ options . contains _ key ( default _ eu _ bucket ) ? gui _ options [ default _ eu _ bucket ] : STR ; -> application _ settings [ default _ eu _ bucket ] = gui _ options [ default _ eu _ bucket ] ; </%> <%> <+> if ( gui _ options . contains _ key ( default _ rrs ) ) application _ settings [ default _ rrs ] = gui _ options [ default _ eu _ bucket ] ; </%> <@> application _ settings [ allow _ saved _ credentials ] = gui _ options . contains _ key ( allow _ saved _ credentials ) ? gui _ options [ allow _ saved _ credentials ] : STR ; </@> 
<%> <+> list < </%> <%> <*> [ ] -> > </%> <%> <+> m _ filter . filter _ list ( STR , </%> <%> <+> ) </%> <@> array . sort ( deletedfolders ) ; array . reverse ( deletedfolders ) ; </@> 
<%> <+> list < </%> <%> <*> [ ] -> > </%> <%> <+> m _ filter . filter _ list ( STR , </%> <%> <+> ) </%> <@> array . sort ( addedfolders ) ; </@> 
 <@> if ( t . tag = = null ) count + + ; </@> <%> <-> if ( tn . tag = = null ) </%>
<%> <-> if ( t . tag = = null ) </%> <@> if ( tn . tag = = null ) count + + ; </@> 
<%> <*> false -> true </%> <%> <*> s -> f . substring ( basefolder . length - 1 ) </%> <%> <-> list < key _ value _ pair < bool , string > > extras = new list < key _ value _ pair < bool , string > > ( ) ; </%> <%> <*> string key = library . core . filename _ filter . convert _ globbing _ to _ reg _ exp -> if </%> <%> <*> m -> has </%> <%> <*> wrapper . source -> common </%> <%> <*> path -> parent </%> <%> <-> ; </%> <%> <*> foreach -> filters . add </%> <%> <+> new </%> <%> <*> tf in -> ( false , </%> <%> <*> decode -> convert </%> <%> <*> filter ( m -> globbing _ to </%> <%> <*> wrapper . encoded _ filters -> reg _ exp ( STR </%> <%> <*> if ( ! tf . value . starts _ with ( key ) ) -> ) ; </%> <%> <-> extras . add ( tf ) ; </%> <@> filters . add _ range ( extras ) ; m _ wrapper . encoded _ filters = library . core . filename _ filter . encode _ as _ filter ( filters ) ; </@> 
<%> <+> list < </%> <%> <+> > </%> <@> if ( t . checked ) items . enqueue ( t ) ; </@> <%> <-> if ( tn . checked ) </%> <%> <+> if ( t . checked ) { </%>
<%> <-> if ( directory . exists ( restorefolder ) ) </%> <@> if ( directory . exists ( restorefolder ) ) directory . delete ( restorefolder , true ) ; </@> <%> <-> if ( directory . exists ( restorefolder ) ) </%>
<%> <-> if ( directory . exists ( restorefolder ) ) </%> <@> if ( directory . exists ( restorefolder ) ) directory . delete ( restorefolder , true ) ; </@> 
<%> <-> . i </%> <%> <*> backend -> wrapper </%> <@> backend . delete ( be . filename ) ; delete _ signature _ cache _ copy ( be ) ; </@> <%> <*> { backend . delete ( bex . filename ) ; delete _ signature _ cache _ copy ( bex ) ; } -> backend . delete ( bex ) ; </%> <%> <-> { backend . delete ( bex . filename ) ; delete _ signature _ cache _ copy ( bex ) ; </%>
 <@> { backend . delete ( be . signature _ file [ i ] . filename ) ; delete _ signature _ cache _ copy ( be . signature _ file [ i ] ) ; } </@> <%> <-> { backend . delete ( be . content _ volumes [ i ] . filename ) ; delete _ signature _ cache _ copy ( be . content _ volumes [ i ] ) ; } </%>
<%> <*> { backend . delete ( be . signature _ file [ i ] . filename ) ; delete _ signature _ cache _ copy ( be . signature _ file [ i ] ) ; } -> backend . delete ( be . signature _ file [ i ] ) ; </%> <@> { backend . delete ( be . content _ volumes [ i ] . filename ) ; delete _ signature _ cache _ copy ( be . content _ volumes [ i ] ) ; } </@> <%> <-> private list < backup _ entry > parse _ file _ list ( duplicati . library . backend . i _ backend backend ) { </%>
 <@> m _ stderr . write _ line ( entry . to _ string ( ) ) ; </@> <%> <-> . to _ string ( ) </%>
<%> <-> . to _ string ( ) </%> <@> m _ stdout . write _ line ( entry . to _ string ( ) ) ; </@> 
<%> <+> case log _ message _ type . profiling : if ( log . log _ level = = log _ message _ type . profiling & & verbose _ output ) add _ verbose _ message ( message , new object [ 0 ] ) ; break ; </%> <@> if ( log . log _ level = = log _ message _ type . profiling ) add _ message ( message ) ; else add _ verbose _ message ( message , new object [ 0 ] ) ; </@> 
<%> <*> hashlist -> i </%> <%> <*> collector -> enumerable < string > </%> <%> <*> list -> enumerable </%> <@> m _ database . add _ blockset ( filehash , size , m _ blockbuffer . length , hashlist . hashes , blocklisthashes , out blocksetid , m _ transaction ) ; </@> 
<%> <-> } </%> <%> <+> req . headers . add ( STR , api _ version ) ; </%> <@> try { system . net . http _ web _ request req = create _ request ( remotename ) ; req . method = system . net . web _ request _ methods . http . put ; req . content _ type = STR ; </@> 
 <@> private readonly forest _ hash . i _ metahash empty _ metadata ; </@> <%> <*> forest _ hash -> utility </%>
<%> <*> forest _ hash -> utility </%> <@> forest _ hash . i _ metahash metahash ; </@> 
 <@> private bool add _ folder _ to _ output ( string filename , date _ time scantime , forest _ hash . i _ metahash meta ) </@> <%> <-> forest _ hash . </%>
<%> <-> forest _ hash . </%> <@> private bool add _ symlink _ to _ output ( string filename , date _ time scantime , forest _ hash . i _ metahash meta ) </@> <%> <-> forest _ hash . </%>
<%> <-> forest _ hash . </%> <@> private void add _ file _ to _ output ( string filename , long size , date _ time scantime , forest _ hash . i _ metahash metadata , hashlist _ collector hashlist , string filehash , i _ list < string > blocklisthashes ) </@> 
<%> <-> duplicati _ </%> <@> public duplicati _ operation _ mode operation _ mode { get { return m _ operation _ mode ; } } </@> 
<%> <-> program . </%> <%> <-> duplicati . </%> <%> <-> program . </%> <%> <+> if ( ! commandline _ options . try _ get _ value ( STR , out </%> <%> <*> ; -> ) ) </%> <%> <-> if ( ! commandline _ options . try _ get _ value ( STR , out pts ) ) </%> <%> <+> { </%> <@> program . data _ connection . purge _ log _ data ( library . utility . timeparser . parse _ time _ interval ( pts , date _ time . now , true ) ) ; </@> <%> <-> program . </%>
<%> <+> if ( entry . parsed _ manifest ! = null ) return entry . parsed _ manifest ; else if ( entry . alternate ! = null & & entry . alternate . parsed _ manifest ! = null ) return entry . alternate . parsed _ manifest ; </%> <@> backend . get ( entry , tf , null ) ; </@> <%> <+> , m _ options . skip _ file _ hash _ checks </%> <%> <+> entry . parsed _ manifest = mf ; if ( string . is _ null _ or _ empty ( mf . self _ filename ) ) mf . self _ filename = entry . filename ; </%>
<%> <-> return task . from _ result ( true ) ; </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <@> public void get ( string remotename , system . io . stream output ) </@> 
 <@> if ( is _ testing ) throw new interface . folder _ missing _ exception ( wex ) ; else return new list < i _ file _ entry > ( ) ; </@> <%> <-> if ( is _ testing ) </%> <%> <-> else return new list < i _ file _ entry > ( ) ; </%> <%> <-> } public static bool is _ valid _ hostname ( string bucketname ) { </%>
<%> <-> if ( is _ testing ) </%> <%> <-> else return new list < i _ file _ entry > ( ) ; </%> <@> if ( is _ testing ) throw new interface . folder _ missing _ exception ( tex ) ; else return new list < i _ file _ entry > ( ) ; </@> <%> <-> } public static bool is _ valid _ hostname ( string bucketname ) { return ! new system . text . regular _ expressions . regex ( STR ) . match ( bucketname ) . success ; } public string display _ name { get { return strings . backend . display _ name ; } </%>
<%> <+> string versionscript = preparse _ sql ( versions [ i ] , preparser _ vars ) ; </%> <%> <*> versions [ i ] -> versionscript </%> <@> cmd . command _ text = preparse _ sql ( c , preparser _ vars ) ; </@> <%> <+> preparser _ vars [ STR ] = i + 1 ; </%>
 <@> throw new user _ information _ exception ( string . format ( STR ) , STR ) ; </@> <%> <-> ( string . format </%> <%> <-> ) </%>
<%> <-> ( string . format </%> <%> <-> ) </%> <@> throw new user _ information _ exception ( string . format ( STR ) , STR ) ; </@> 
<%> <*> snapshot -> options . snap _ shot </%> <%> <*> policy -> strategy </%> <%> <*> snap _ shot -> optimization </%> <%> <*> mode -> strategy </%> <%> <*> snapshot -> options . raw </%> <%> <*> snapshot -> options . snap _ shot </%> <%> <*> policy -> strategy </%> <%> <*> snap _ shot -> optimization </%> <%> <*> mode -> strategy </%> <%> <*> snapshot -> options . snap _ shot </%> <%> <*> policy -> strategy </%> <%> <*> snap _ shot -> optimization </%> <%> <*> mode -> strategy </%> <@> m _ stat . log _ warning ( string . format ( strings . r _ sync _ dir . snapshot _ failed _ error , ex . to _ string ( ) ) , null ) ; </@> <%> <*> m _ snapshot = new duplicati . library . snapshots . no _ snapshot ( m _ sourcefolder ) ; -> { </%> <%> <+> m _ snapshot = new duplicati . library . snapshots . no _ snapshot ( m _ sourcefolder , options . raw _ options ) ; } dictionary < string , snapshots . usn _ helper > usn _ helpers = null ; list < string > unchanged = new list < string > ( ) ; </%>
 <@> return task . from _ result ( metadata ) ; </@> <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>
<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> <@> return task . from _ result ( new dictionary < string , string > ( ) ) ; </@> 
<%> <-> task < </%> <%> <-> > </%> <@> return task . from _ result ( false ) ; </@> <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>
<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> <@> return task . from _ result ( false ) ; </@> <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>
<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> <@> return task . from _ result ( true ) ; </@> 
 <@> return task . from _ result ( false ) ; </@> <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>
<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> <@> return task . from _ result ( false ) ; </@> 
 <@> return task . from _ result ( false ) ; </@> <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>
<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> <@> return task . from _ result ( false ) ; </@> 
 <@> return task . from _ result ( false ) ; </@> <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>
<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> <@> return task . from _ result ( false ) ; </@> <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>
<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> <@> return task . from _ result ( true ) ; </@> 
 <@> s + = http _ utility . url _ encode ( username ? ? STR ) ; </@> <%> <-> http _ utility . </%>
<%> <-> http _ utility . </%> <@> s + = http _ utility . url _ encode ( password ? ? STR ) ; </@> 
<%> <-> = null </%> <%> <*> { get { return -> = > </%> <%> <-> } } </%> <@> public const system . io . file _ attributes attribute _ error = ( system . io . file _ attributes ) ( 1 < < NUM ) ; </@> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <*> public static void copy _ stream ( system . io . stream source , system . io . stream target , bool try _ rewind _ source , byte [ ] buf = null ) -> public static void copy _ stream ( stream source , stream target , bool try _ rewind _ source , byte [ ] buf = null ) </%>
<%> <-> = null </%> <%> <*> { get { return -> = > </%> <%> <-> } } </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <@> public delegate bool enumeration _ filter _ delegate ( string rootpath , string path , system . io . file _ attributes attributes ) ; </@> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <*> public static void copy _ stream ( system . io . stream source , system . io . stream target , bool try _ rewind _ source , byte [ ] buf = null ) -> public static void copy _ stream ( stream source , stream target , bool try _ rewind _ source , byte [ ] buf = null ) </%> <%> <-> catch { } </%>
<%> <-> = null </%> <%> <*> { get { return -> = > </%> <%> <-> } } </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <@> public static void copy _ stream ( system . io . stream source , system . io . stream target ) </@> <%> <*> public static void copy _ stream ( system . io . stream source , system . io . stream target , bool try _ rewind _ source , byte [ ] buf = null ) -> public static void copy _ stream ( stream source , stream target , bool try _ rewind _ source , byte [ ] buf = null ) </%> <%> <*> catch { } -> catch </%>
<%> <-> i _ filter match ; </%> <%> <*> bool result ; if ( ! filter . matches ( path , out result , out match ) ) -> if ( ! filter . matches ( path , out var result , out ) ) </%> <@> public delegate system . io . file _ attributes extract _ file _ attributes ( string path ) ; </@> <%> <-> new file _ system _ interaction ( system . io . </%> <%> <-> ) </%> <%> <-> new file _ system _ interaction ( system . io . </%> <%> <-> ) </%> <%> <-> , null </%>
<%> <*> bool result ; if ( ! filter . matches ( path , out result , out match ) ) -> if ( ! filter . matches ( path , out var result , out ) ) </%> <%> <-> system . io . </%> <@> return enumerate _ file _ system _ entries ( rootpath , callback , new file _ system _ interaction ( system . io . directory . get _ directories ) , new file _ system _ interaction ( system . io . directory . get _ files ) ) ; </@> <%> <-> , null </%>
<%> <-> , null </%> <@> system . io . file _ attributes attr = attribute _ reader = = null ? system . io . file _ attributes . directory : attribute _ reader ( rootpath ) ; </@> 
<%> <-> system . io . </%> <@> system . io . file _ attributes attr = attribute _ reader = = null ? system . io . file _ attributes . normal : attribute _ reader ( s ) ; </@> 
 <@> return enumerate _ folders ( folder , filter ) . sum ( ( path ) = > new system . io . file _ info ( path ) . length ) ; </@> <%> <-> system . io . </%> <%> <*> if ( ! path . ends _ with ( directory _ separator _ string , string _ comparison . ordinal ) ) return path + = directory _ separator _ string ; else return path ; -> return ! path . ends _ with ( directory _ separator _ string , string _ comparison . ordinal ) </%> <%> <+> ? path + directory _ separator _ string </%>
<%> <+> ? path + directory _ separator _ string : path ; </%> <%> <*> if ( ! path . ends _ with ( separator , string _ comparison . ordinal ) ) return path + = separator ; else return path ; -> return append _ dir _ separator ( separator ) ; </%> <@> public static int force _ stream _ read ( system . io . stream stream , byte [ ] buf , int count ) </@> 
<%> <*> system . io . stream _ reader -> var </%> <%> <-> system . io . </%> <@> return utility . parse _ bool ( value , ( ) = > default ) ; </@> 
<%> <*> public static bool is _ mono { get { return type . get _ type ( STR ) ! = null ; } } -> public static bool is _ mono = > type . get _ type ( STR ) ! = null ; </%> <@> var regex = new system . text . regular _ expressions . regex ( STR ) ; </@> 
<%> <*> date _ time dt ; if ( ! try _ deserialize _ date _ time ( str , out dt ) ) -> if ( ! try _ deserialize _ date _ time ( str , out var dt ) ) </%> <@> return utility . get _ unique _ items ( collection , equality _ comparer < t > . default , out duplicate _ items ) ; </@> <%> <*> hash _ set < t > -> var </%> <%> <*> foreach ( t item in collection ) -> foreach ( var item in collection ) </%> <%> <+> { </%>
 <@> using ( var sw = new system . io . string _ writer ( sb ) ) </@> <%> <-> system . text . </%> <%> <-> system . text . </%>
 <@> this . auth . password _ credentials = new password _ based _ request ( ) </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> this . auth . api _ credentials = new api _ key _ based _ request ( ) </@> 
 <@> options [ STR ] = null ; </@> <%> <*> null -> STR </%> <%> <+> options [ STR ] = STR ; </%>
<%> <*> null -> STR </%> <@> options [ STR ] = null ; </@> <%> <+> options [ STR ] = STR ; </%>
<%> <*> path _ arg -> var </%> <%> <+> { path = path } </%> <%> <-> pa . path = path ; </%> <@> folder _ metadata fm = post _ and _ get _ json _ data < folder _ metadata > ( url , pa ) ; return fm ; </@> <%> <*> upload _ session _ start _ arg -> var </%>
 <@> newtonsoft _ json _ json _ property _ tag </@> <%> <*> u _ int -> ulong </%>
<%> <*> port = database _ connection . application _ settings . last _ webserver _ port = = - 1 ? server _ url . port : database _ connection . application _ settings . last _ webserver _ port , scheme = scheme } ) . uri ; } } string pwd ; if ( options . try _ get _ value ( STR , out pwd ) ) { password = pwd ; saltedpassword = false ; } string url ; if ( options . try _ get _ value ( hosturl _ option , out url ) ) server _ url = new uri ( url ) ; start _ tray ( args , options , toolkit , hosted , password , saltedpassword ) ; } catch ( exception ex ) { file . append _ all _ text ( STR , ex . to _ string ( ) ) ; throw ; } } private static void start _ tray ( string [ ] args , dictionary < string , string > options , string toolkit , hosted _ instance _ keeper hosted , string password , bool saltedpassword ) { try { using ( hosted ) { var re _ spawn = 0 ; do { try { system . net . service _ point _ manager . security _ protocol | = security _ protocol _ type . tls | security _ protocol _ type . tls ; using ( connection = new http _ server _ connection ( server _ url , password , saltedpassword , database _ connection ! = null ? password _ source . database : password _ source . hosted _ server , disable _ tray _ icon _ login , options ) ) -> using ( var tk = run _ tray _ icon ( toolkit ) ) </%> <%> <*> using ( var tk = run _ tray _ icon ( toolkit ) ) -> if ( hosted ! = null & & server . program . application _ instance ! = null ) </%> <%> <+> server . program . application _ instance . second _ instance _ detected + = new server . single _ instance . second _ instance _ delegate ( x = > { tk . show _ url _ in _ window ( server _ url . to _ string ( ) ) ; } ) ; if ( openui ) </%> <%> <-> if ( hosted ! = null & & server . program . application _ instance ! = null ) server . program . application _ instance . second _ instance _ detected + = new server . single _ instance . second _ instance _ delegate ( x = > { tk . show _ url _ in _ window ( server _ url . to _ string ( ) ) ; } ) ; </%> <%> <*> if ( openui ) -> try </%> <@> try { tk . show _ url _ in _ window ( connection . status _ window _ url ) ; duplicati . server . program . is _ first _ run = false ; duplicati . server . program . server _ port _ changed = false ; } catch { } </@> <%> <*> action shutdown _ event = ( ) = > -> catch </%> <%> <*> re _ spawn = NUM ; -> } } action shutdown _ event = ( ) = > { </%> <%> <-> tk . invoke _ exit ( ) ; </%>
 <@> directory . delete ( snapshot _ base . normalize _ path ( path ) ) ; </@> <%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%>
<%> <-> snapshot _ base . </%> <@> directory . create _ directory ( snapshot _ base . normalize _ path ( path ) ) ; </@> <%> <-> snapshot _ base . </%>
<%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%> <@> return directory . exists ( snapshot _ base . normalize _ path ( path ) ) ; </@> 
 <@> return unix _ support . file . get _ symlink _ target ( snapshot _ base . normalize _ path ( path ) ) ; </@> <%> <-> snapshot _ base . </%>
<%> <-> snapshot _ base . </%> <@> return path . get _ directory _ name ( snapshot _ base . normalize _ path ( path ) ) ; </@> 
 <@> directory . set _ last _ write _ time _ utc ( snapshot _ base . normalize _ path ( path ) , time ) ; </@> <%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%>
<%> <-> snapshot _ base . </%> <@> directory . set _ creation _ time _ utc ( snapshot _ base . normalize _ path ( path ) , time ) ; </@> <%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%>
<%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%> <@> return directory . get _ last _ write _ time _ utc ( snapshot _ base . normalize _ path ( path ) ) ; </@> <%> <-> snapshot _ base . </%>
<%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%> <@> return directory . get _ creation _ time _ utc ( snapshot _ base . normalize _ path ( path ) ) ; </@> 
 <@> directory . delete ( snapshot _ base . normalize _ path ( path ) , recursive ) ; </@> <%> <-> snapshot _ base . </%>
<%> <-> snapshot _ base . </%> <@> var f = snapshot _ base . normalize _ path ( file ) ; </@> 
<%> <*> dictionary < string , -> hash _ set < </%> <%> <*> dictionary < string , -> hash _ set < </%> <%> <*> if ( lookup . contains _ key ( v . file . name ) ) doubles [ v . file . name ] = null ; else lookup [ v . file . name ] = null ; -> if ( ! lookup . add ( v . file . name ) ) </%> <%> <+> doubles . add ( v . file . name ) ; </%> <@> var s = string . format ( STR , string . join ( STR , doubles . keys ) ) ; </@> 
<%> <-> program . </%> <%> <-> duplicati . </%> <%> <-> program . </%> <%> <+> if ( ! commandline _ options . try _ get _ value ( STR , out </%> <%> <*> ; -> ) ) </%> <%> <-> if ( ! commandline _ options . try _ get _ value ( STR , out pts ) ) </%> <%> <+> { </%> <@> program . data _ connection . purge _ log _ data ( library . utility . timeparser . parse _ time _ interval ( pts , date _ time . now , true ) ) ; </@> <%> <-> program . </%>
<%> <-> long prefixid , </%> <@> m _ selectfilelastmodified _ command . set _ parameter _ value ( 0 , prefixid ) ; m _ selectfilelastmodified _ command . set _ parameter _ value ( 1 , path ) ; m _ selectfilelastmodified _ command . set _ parameter _ value ( 2 , filesetid ) ; </@> <%> <-> long prefixid , </%> <%> <*> lastfilesetid -> filesetid </%>
 <@> using ( new logging . timer ( STR ) ) tr . commit ( ) ; </@> <%> <-> using ( new logging . timer ( STR ) ) </%>
 <@> if ( ! use _ unmanaged _ ssh . checked & & keyfile . text . trim ( ) . length = = 0 ) </@> <%> <-> . checked & & ! use _ unmanaged _ ssh </%> <%> <*> sshui -> ss _ hv _ ui </%>
<%> <-> public system . int keep _ full { get { return m _ keep _ full ; } set { object oldvalue = m _ keep _ full ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ keep _ full = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string keep _ time { get { return m _ keep _ time ; } set { object oldvalue = m _ keep _ time ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ keep _ time = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string full _ after { get { return m _ full _ after ; } set { object oldvalue = m _ full _ after ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ full _ after = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string download _ bandwidth { get { return m _ download _ bandwidth ; } set { object oldvalue = m _ download _ bandwidth ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ download _ bandwidth = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string upload _ bandwidth { get { return m _ upload _ bandwidth ; } set { object oldvalue = m _ upload _ bandwidth ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ upload _ bandwidth = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string volume _ size { get { return m _ volume _ size ; } set { object oldvalue = m _ volume _ size ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ volume _ size = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string max _ uploadsize { get { return m _ max _ uploadsize ; } set { object oldvalue = m _ max _ uploadsize ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ max _ uploadsize = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } </%> <@> public system . collections . generic . i _ list < task > tasks </@> <%> <*> get { return ( ( data _ fetcher _ with _ relations ) m _ dataparent ) . get _ related _ objects < task > ( STR , this ) ; } -> get { return ( ( data _ fetcher _ with _ relations ) m _ dataparent ) . get _ related _ object < task > ( STR , this ) ; } </%> <%> <+> set { ( ( data _ fetcher _ with _ relations ) m _ dataparent ) . set _ related _ object ( STR , this , value ) ; } </%>
<%> <-> finally { } </%> <@> try { sp . file . save _ binary _ direct ( ctx , fileurl , stream , true ) ; } finally { } </@> 
<%> <-> public stream open _ write ( string file ) { return create _ file ( file ) ; } public void write _ all _ bytes ( string file , byte [ ] data ) { using ( var s = create _ file ( file ) ) s . write ( data , 0 , data . length ) ; } public void write _ all _ lines ( string file , string [ ] data ) { using ( var sw = new stream _ writer ( create _ file ( file ) , system . text . encoding . ut ) ) foreach ( var s in data ) sw . write _ line ( s ) ; } </%> <@> string path = path _ to _ zip _ filesystem ( file ) ; </@> <%> <*> string path = path _ to _ os _ filesystem ( file ) ; -> string path = file . replace ( '/' , '\\' ) ; </%>
<%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%> <@> foreach ( string f in filenames _ from _ platform _ independant ( z . list _ files ( prefix ) ) ) </@> <%> <-> foreach ( string s in filenames _ from _ platform _ independant ( patch . value . list _ files ( symlinkprefix ) ) ) { string tmp = filenames _ from _ platform _ independant ( new string [ ] { encoding . ut . get _ string ( patch . value . read _ all _ bytes ( s ) ) } ) [ 0 ] ; </%>
<%> <*> library . interface . i -> compression </%> <%> <*> compression -> wrapper </%> <%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%> <@> foreach ( string f in filenames _ from _ platform _ independant ( arch . list _ files ( sigentry . value ) ) ) </@> <%> <-> filenames _ from _ platform _ independant ( </%> <%> <-> ) </%> <%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%>
<%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%> <%> <-> filenames _ from _ platform _ independant ( </%> <%> <-> ) </%> <@> foreach ( string f in filenames _ from _ platform _ independant ( arch . list _ files ( control _ prefix ) ) ) </@> <%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%> <%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%>
<%> <*> duplicati . library . interface . i -> compression </%> <%> <*> compression -> wrapper </%> <@> foreach ( string f in filenames _ from _ platform _ independant ( signature . list _ files ( prefix ) ) ) </@> 
<%> <+> time = library . utility . utility . deserialize _ date _ time ( library . utility . utility . serialize _ date _ time ( time ) ) . to _ universal _ time ( ) ; </%> <@> args . add ( time . to _ universal _ time ( ) ) ; </@> 
<%> <*> if ( status = = enumerated _ file -> m </%> <%> <*> status . file ) -> filter = filter ; </%> <%> <+> } public bool callback ( string rootpath , string path , system . io . file _ attributes attributes ) { if ( m _ filter ! = null & & ! m _ filter . should _ include ( rootpath , path ) ) return false ; if ( ( attributes & system . io . file _ attributes . directory ) = = 0 ) </%> <%> <+> return true ; </%> <@> path _ size _ calculator c = new path _ size _ calculator ( ) ; enumerate _ file _ system _ entries ( folder , filter , new enumeration _ callback _ delegate ( c . callback ) ) ; </@> <%> <-> } public static list < string > enumerate _ files ( string basepath , filename _ filter filter ) { path _ collector c = new path _ collector ( false , true ) ; enumerate _ file _ system _ entries ( basepath , filter , new enumeration _ callback _ delegate ( c . callback ) ) ; return c . files ; } public static list < string > enumerate _ file _ system _ entries ( string basepath ) { </%>
<%> <-> date _ time next _ progress _ event = m _ last _ progress _ event ; </%> <%> <+> } </%> <@> m _ last _ progress _ event = date _ time . now ; next _ progress _ event = m _ last _ progress _ event + progress _ timespan ; </@> 
<%> <-> if ( ! string . is _ null _ or _ white _ space ( tempdir ) ) </%> <%> <+> try </%> <%> <-> try </%> <%> <+> using ( var cmd = con . create _ command ( ) ) </%> <%> <-> using ( var cmd = con . create _ command ( ) ) { </%> <%> <*> tempdir -> library . utility . temp _ folder . system _ temp _ path </%> <%> <-> } </%> <@> catch { } </@> <%> <-> } </%>
<%> <-> else if ( filter . contains ( STR ) | | filter . contains ( STR ) ) { this . type = filter _ type . wildcard ; this . filter = filter ; this . regexp = new system . text . regular _ expressions . regex ( library . utility . filename _ filter . convert _ globbing _ to _ reg _ exp ( filter ) , regexp _ options ) ; } </%> <%> <+> ( filter . contains ( STR ) | | filter . contains ( STR ) ) ? filter _ type . wildcard : </%> <@> this . regexp = new system . text . regular _ expressions . regex ( library . utility . filename _ filter . convert _ globbing _ to _ reg _ exp ( filter ) , regexp _ options ) ; </@> 
<%> <*> prepare -> web _ api . google </%> <%> <+> drive . </%> <%> <*> prepare -> web _ api . google </%> <%> <+> drive . </%> <%> <*> prepare -> web _ api . google </%> <%> <+> drive . </%> <%> <-> ( ) </%> <@> parents = new google _ drive _ parent _ reference [ ] { new google _ drive _ parent _ reference ( ) { id = current _ folder _ id } } </@> 
<%> <*> prepare -> web </%> <%> <+> api . google _ drive . </%> <@> parents = new google _ drive _ parent _ reference [ ] { new google _ drive _ parent _ reference ( ) { id = parent } } </@> 
 <@> return environment . expand _ environment _ variables ( str . replace ( STR , home _ path ) ) ; </@> <%> <-> environment _ variable _ matcher _ windows . replace ( str . replace ( STR , regex . escape ( home _ path ) ) , ( m ) = > </%>
 <@> console . write _ line ( STR , h , environment . new _ line , ex . to _ string ( ) ) ; </@> <%> <-> . to _ string ( ) </%>
<%> <-> . to _ string ( ) </%> <@> console . write _ line ( STR , blh , environment . new _ line , ex . to _ string ( ) ) ; </@> 
 <@> system . diagnostics . trace . write _ line ( STR + ex . to _ string ( ) ) ; console . write _ line ( STR + ex . to _ string ( ) ) ; </@> <%> <-> . to _ string ( ) </%> <%> <-> . to _ string ( ) </%>
<%> <-> . to _ string ( ) </%> <%> <-> . to _ string ( ) </%> <@> system . diagnostics . trace . write _ line ( STR + ex . to _ string ( ) ) ; console . write _ line ( STR + ex . to _ string ( ) ) ; </@> 
 <@> console . write _ line ( STR , i , e . to _ string ( ) , remotefilename ) ; </@> <%> <-> . to _ string ( ) </%>
<%> <-> . to _ string ( ) </%> <@> console . write _ line ( string . format ( STR , e . to _ string ( ) ) ) ; </@> 
 <@> sw . write _ line ( c . to _ string ( ) ) ; </@> <%> <-> . to _ string ( ) </%>
<%> <-> . to _ string ( ) </%> <@> sw . write _ line ( STR , e . to _ string ( ) ) ; </@> 
 <@> log . known _ file _ count = remotelist . count ( ) ; </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> log . unknown _ file _ count = unknownlist . count ( ) ; </@> 
<%> <*> var path = new utility . url _ path ( web _ api . google _ cloud _ storage . path . bucket ) . append ( m _ bucket ) . append ( web _ api . google _ cloud _ storage . path . object ) ; -> var path = web _ api . google _ cloud _ storage . bucket _ object _ path ( m _ bucket ) ; </%> <@> var url = utility . uri . uri _ builder ( web _ api . google _ cloud _ storage . url . api , path . to _ string ( ) , query _ params ) ; </@> 
<%> <*> { m _ hashbuffer = null ; m _ hashbuffer _ length = 0 ; -> { </%> <@> m _ hash . transform _ block ( m _ hashbuffer , 0 , m _ hashbuffer . length , m _ hashstore , 0 ) ; </@> <%> <*> % -> / </%> <%> <*> m _ hashstore -> buffer </%> <%> <*> 0 -> offset </%>
<%> <*> hashstore -> hashbuffer </%> <%> <*> % -> / </%> <@> m _ hash . transform _ block ( buffer , offset , bytes _ to _ use , m _ hashstore , 0 ) ; </@> 
 <@> m _ block _ hash _ lookup . add ( str , new key _ value _ pair < long , long > ( id , size ) ) ; </@> <%> <*> var id = convert . to _ int ( rd . get _ value ( 1 ) ) ; m _ file _ hash _ lookup . add ( str , id ) ; -> var size = convert . to _ int ( rd . get _ value ( 1 ) ) ; </%>
 <@> m _ block _ hash _ lookup . add ( key , new key _ value _ pair < long , long > ( convert . to _ int ( r ) , size ) ) ; </@> <%> <+> , size </%>
<%> <+> , size </%> <@> m _ block _ hash _ lookup . add ( key , new key _ value _ pair < long , long > ( convert . to _ int ( r ) , size ) ) ; </@> 
<%> <-> } </%> <@> if ( m _ lookup ! = null ) try { m _ lookup . dispose ( ) ; } finally { m _ lookup = null ; } </@> 
<%> <-> filename _ strategy cache _ filename _ strategy = new filename _ strategy ( STR , STR , true ) ; </%> <@> backend = new backend _ wrapper ( bs , backend , m _ options . raw _ options ) ; </@> <%> <-> encryption . </%> <%> <-> _ options . raw </%>
<%> <-> filename _ strategy cache _ filename _ strategy = new filename _ strategy ( STR , STR , true ) ; </%> <%> <-> _ options . raw </%> <@> backend = encryption . encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , m _ options . raw _ options ) ; </@> 
 <@> backend = new backend _ wrapper ( rs , backend , m _ options . raw _ options ) ; </@> <%> <-> encryption . </%> <%> <-> _ options . raw </%>
<%> <-> _ options . raw </%> <@> backend = encryption . encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , best _ fit . encryption _ mode , m _ options . raw _ options ) ; </@> 
 <@> backend = new backend _ wrapper ( rs , backend , m _ options . raw _ options ) ; </@> <%> <-> encryption . </%> <%> <-> _ options . raw </%>
<%> <-> _ options . raw </%> <@> backend = encryption . encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , best _ fit . encryption _ mode , m _ options . raw _ options ) ; </@> 
<%> <*> private static i _ localization _ service default _ service = new mock _ localization _ service ( ) ; -> private static dictionary < culture _ info , i _ localization _ service > services = new dictionary < culture _ info , i _ localization _ service > ( ) ; </%> <%> <+> internal const string logical _ context _ key = STR ; public static readonly regex ci _ matcher = new regex ( STR ) ; public static i _ disposable temporary _ context ( culture _ info ci ) { if ( ci = = null ) return null ; return new localization _ context ( ci ) ; } private static i _ localization _ service invariant _ service = new mock _ localization _ service ( ) ; </%> <%> <*> public static i _ localization _ service default { get { return get ( system . globalization . culture _ info . invariant _ culture ) ; } } -> public static i _ localization _ service invariant { get { return get ( culture _ info . invariant _ culture ) ; } } </%> <%> <+> public static culture _ info parse _ culture ( string culture , bool returninvariant = false ) { var ci = returninvariant ? culture _ info . invariant _ culture : null ; if ( ci _ matcher . match ( culture ) . success ) try { ci = new culture _ info ( culture ) ; } catch { } return ci ; } </%> <%> <*> public static i _ localization _ service current { get { return get ( system . globalization . culture _ info . current _ culture ) ; } } -> public static i _ localization _ service current </%> <%> <+> { get { var lc = system . runtime . remoting . messaging . call _ context . logical _ get _ data ( logical _ context _ key ) as string ; if ( ! string . is _ null _ or _ white _ space ( lc ) ) return get ( new culture _ info ( lc ) ) ; return get ( culture _ info . current _ culture ) ; } } </%> <%> <-> system . globalization . </%> <@> public static i _ localization _ service get ( system . globalization . culture _ info ci ) </@> <%> <*> return default _ service ; -> if ( ci = = culture _ info . invariant _ culture ) </%> <%> <+> return invariant _ service ; i _ localization _ service service ; if ( ! services . try _ get _ value ( ci , out service ) ) service = services [ ci ] = new po _ localization _ service ( ci ) ; return service ; } public static i _ enumerable < string > all _ locales </%>
<%> <*> string . format ( -> $ </%> <%> <-> , this . type ) </%> <@> if ( m _ filters . where ( x = > x . matches ( path ) ) . any ( ) ) </@> <%> <+> public string get _ filter _ hash ( ) { </%>
<%> <-> m _ result . add _ warning ( string . format ( STR , p , ex . message ) , ex ) ; } if ( filterhandler . attribute _ filter ( null , p , fa ) ) { try { this . handle _ filesystem _ entry ( p , fa ) ; } catch ( exception ex ) { </%> <%> <-> } </%> <@> foreach ( var path in m _ snapshot . enumerate _ files _ and _ folders ( filterhandler . attribute _ filter ) ) </@> <%> <*> this . handle _ filesystem _ entry ( path , m _ snapshot . get _ attributes ( path ) ) ; -> var fa = file _ attributes . normal ; </%> <%> <+> try { fa = m _ snapshot . get _ attributes ( path ) ; } catch { } </%>
 <@> else return m _ filters . aggregate ( ( a , b ) = > library . utility . joined _ filter _ expression . join ( a , b ) ) ; </@> <%> <*> return library . utility . command _ line _ parser . extract _ options ( args , ( key , value ) = > { if ( key . equals ( STR , string _ comparison . ordinal _ ignore _ case ) ) -> return library . utility . command _ line _ parser . extract _ options ( args , ( key , value ) = > </%> <%> <+> { if ( ! string . is _ null _ or _ empty ( value ) ) </%>
 <@> var httpex = wex . response as system . net . http _ web _ response ; </@> <%> <-> string t = null ; </%>
<%> <*> concurrent -> i </%> <%> <*> dictionary -> enumerable </%> <%> <-> string , </%> <@> if ( package _ result . value ! = null & & package _ result . value . package ! = null ) { var pkginfo = package _ info _ service . get _ package _ information ( package _ result . value . package ) ; </@> 
 <@> this . log ( ) . error ( chocolatey _ loggers . important , STR . format _ with ( package _ result . name , command _ name . to _ string ( ) ) ) ; </@> <%> <-> package _ result . name , </%> <%> <+> , package _ result . name </%>
<%> <-> package _ result . name , </%> <%> <+> , package _ result . name </%> <@> this . log ( ) . info ( chocolatey _ loggers . important , STR . format _ with ( package _ result . name , command _ name . to _ string ( ) ) ) ; </@> 
<%> <*> . add ( -> + = STR + </%> <%> <-> ) </%> <@> this . log ( ) . debug ( ( ) = > STR . format _ with ( uninstall _ args . join ( STR ) ) ) ; </@> <%> <*> join -> trim _ safe </%> <%> <-> STR </%>
<%> <+> using system ; </%> <@> public system . operating _ system os _ version </@> 
<%> <-> using chocolatey _ infrastructure ; </%> <%> <+> using i _ log = log _ net . i _ log ; </%> <@> private static readonly log _ net . i _ log logger = log _ manager . get _ logger ( typeof ( bootstrap ) ) ; </@> 
 <@> nuget _ service . install _ noop ( configuration , ( pkg ) = > { powershell _ service . install _ noop ( pkg ) ; } ) ; </@> <%> <-> _ store </%> <%> <*> path -> info </%> <%> <*> file -> package </%> <%> <*> system . combine _ paths ( application -> info </%> <%> <*> parameters -> service </%> <%> <*> chocolatey -> get </%> <%> <-> _ info _ store _ location , STR . format </%> <%> <*> with -> information </%> <%> <-> . id ) </%> <%> <*> store _ path + = STR -> info </%> <%> <*> format -> is </%> <%> <*> with ( package -> side _ by </%> <%> <*> result . package . version . to _ string ( ) ) ; -> side = true ; </%> <%> <-> file _ system . create _ directory _ if _ not _ exists ( pkg _ store _ path ) ; </%>
 <@> public void copy _ file _ unsafe ( string source _ file _ name , string destination _ file _ name , bool overwrite _ the _ existing _ file ) </@> <%> <+> return success = = 0 ; </%> <%> <+> bool winapi copy _ file ( in lpctstr lp _ existing _ file _ name , in lpctstr lp _ new _ file _ name , in bool b _ fail _ if _ exists ) ; </%>
 <@> var remote _ source = new uri ( configuration . source ) ; if ( string . is _ null _ or _ white _ space ( configuration . push _ command . key ) & & ! remote _ source . is _ unc & & ! remote _ source . is _ file ) </@> <%> <+> var remote _ source = new uri ( configuration . source ) ; if ( string . is _ null _ or _ white _ space ( configuration . push _ command . key ) & & ! remote _ source . is _ unc & & ! remote _ source . is _ file ) { </%> <%> <+> } </%>
<%> <+> using system _ diagnostics ; </%> <@> using chocolatey _ infrastructure _ synchronization ; </@> 
<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <@> this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( xml _ file _ path ) ) ; </@> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>
<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <@> this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( temp _ update _ file ) ) ; </@> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>
<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <@> this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( temp _ update _ file ) ) ; </@> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>
<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <@> this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( xml _ file _ path , temp _ update _ file ) ) ; </@> 
 <@> this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( destination _ file _ path , backup _ file _ path ) ) ; </@> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>
<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <@> this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( backup _ file _ path ) ) ; </@> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>
<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <@> this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( destination _ file _ path , backup _ file _ path ) ) ; </@> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>
<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <@> this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( source _ file _ path , destination _ file _ path ) ) ; </@> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>
<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <@> this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( source _ file _ path ) ) ; </@> 
 <@> nuget _ service . uninstall _ noop ( config , ( pkg ) = > { powershell _ service . uninstall _ noop ( pkg ) ; } ) ; </@> <%> <+> foreach ( var package _ config _ file in config . package _ names . split ( new [ ] { application _ parameters . package _ names _ separator } , string _ split _ options . remove _ empty _ entries ) . or _ empty _ list _ if _ null ( ) . where ( p = > p . contains ( STR ) ) . to _ list ( ) ) { throw new application _ exception ( STR ) ; } </%>
<%> <+> { int timeout = 0 ; int . try _ parse ( option , out timeout ) ; if ( timeout > 0 ) </%> <@> int timeout = 0 ; int . try _ parse ( option , out timeout ) ; if ( timeout > 0 ) { configuration . push _ command . timeout _ in _ seconds = timeout ; } } ) </@> 
 <@> var original _ config = config . deep _ copy ( ) ; </@> <%> <*> ; -> . deep _ copy ( ) ; </%>
 <@> var original _ config = config . deep _ copy ( ) ; </@> <%> <*> ; -> . deep _ copy ( ) ; </%>
 <@> using system _ collections _ generic ; </@> <%> <*> using simple _ injector ; using chocolatey _ infrastructure _ app _ builders ; -> using chocolatey _ infrastructure _ app ; </%> <%> <-> using chocolatey _ infrastructure _ services ; </%>
 <@> using chocolatey _ infrastructure _ results ; using configuration ; using system _ collections _ concurrent ; public interface i _ nuget _ service : i _ source _ runner </@> <%> <+> concurrent _ dictionary < string , package _ result > get _ outdated ( chocolatey _ configuration config ) ; </%> <%> <-> concurrent _ dictionary < string , package _ result > get _ outdated ( chocolatey _ configuration config ) ; </%>
<%> <*> public virtual i _ read _ only _ list < db _ set _ property > find _ sets ( db _ context context ) = > cache . get _ or _ add ( context . get _ type ( ) , find _ sets ) ; -> public virtual i _ read _ only _ list < db _ set _ property > find _ sets ( db _ context context ) </%> <%> <+> = > cache . get _ or _ add ( context . get _ type ( ) , find _ sets ) ; </%> <@> & & ( p . declaring _ type ! = typeof ( db _ context ) ) </@> <%> <-> ( </%> <%> <-> ) </%> <%> <*> . select ( p = > { return -> . select ( p = > </%> <%> <*> ; -> ) </%> <%> <-> } ) </%>
<%> <*> else -> else if ( property _ base . get _ relationship _ index ( ) ! = - 1 </%> <%> <+> & & property _ base is i _ navigation navigation ) </%> <@> if ( property _ base . get _ relationship _ index ( ) ! = - 1 ) { var navigation = property _ base as i _ navigation ; if ( navigation ! = null ) { detect _ navigation _ change ( entry , navigation ) ; } } </@> 
<%> <*> new -> expression . </%> <%> <*> _ -> ( new </%> <%> <+> ) </%> <@> private expression try _ optimize < t _ in _ expression > ( </@> <%> <*> func < column _ expression , expression [ ] , t _ in _ expression > in _ expression _ factory ) where t _ in _ expression : in _ expression _ base -> func < column _ expression , list < expression > , expression > in _ expression _ factory ) </%> <%> <*> constant _ expression left _ constant _ expression , right _ constant _ expression ; -> var left _ expression = visit _ expression ( binary _ expression . left ) ; </%> <%> <+> var right _ expression = visit _ expression ( binary _ expression . right ) ; expression left _ non _ column _ expression , right _ non _ column _ expression ; </%>
 <@> var persistent _ database = new in _ memory _ database ( new [ ] { new logger _ factory ( ) } ) ; </@> <%> <-> new [ ] { </%> <%> <-> } </%>
<%> <-> new [ ] { </%> <%> <-> } </%> <@> var persistent _ database = new in _ memory _ database ( new [ ] { new logger _ factory ( ) } ) ; </@> <%> <-> new [ ] { </%> <%> <-> } </%>
<%> <-> new [ ] { </%> <%> <-> } </%> <@> var persistent _ database = new in _ memory _ database ( new [ ] { new logger _ factory ( ) } ) ; </@> 
 <@> using system _ collections _ generic ; </@> <%> <*> i _ enumerable < entity _ entry > traverse _ graph ( [ not _ null ] object entity ) ; -> void traverse _ graph < t _ node > ( [ not _ null ] t _ node node , [ not _ null ] func < t _ node , bool > handle _ node ) </%> <%> <+> where t _ node : entity _ graph _ node _ base < t _ node > ; </%>
<%> <-> . create ( ) </%> <@> expression . constant ( query _ sql _ generator _ factory . create ( ) ) , </@> 
 <@> theory _ skip _ query _ issue </@> <%> <+> . as _ no _ tracking ( ) </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <+> . as _ no _ tracking ( ) </%> <@> theory _ skip _ query _ issue </@> <%> <+> . as _ no _ tracking ( ) </%> <%> <-> _ skip _ query _ issue </%>
<%> <+> . as _ no _ tracking ( ) </%> <%> <-> _ skip _ query _ issue </%> <%> <+> . as _ no _ tracking ( ) </%> <@> conditional _ fact _ skip _ query _ issue </@> <%> <+> ( ) . as _ no _ tracking </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <+> ( ) . as _ no _ tracking </%> <@> conditional _ fact _ skip _ query _ issue </@> <%> <+> . as _ no _ tracking ( ) </%> <%> <-> _ see </%>
<%> <+> , i _ entity _ type _ removed _ convention </%> <%> <-> ! </%> <%> <+> _ directly </%> <%> <*> any ( ) -> count = = 0 </%> <@> var old _ base _ type _ builder = old _ base _ type . builder ; old _ base _ type _ builder ? . relational ( configuration _ source . convention ) . has _ discriminator ( property _ info : null ) ; </@> 
 <@> select distinct [ ] . [ customer _ id ] </@> <%> <+> select distinct [ t ] . [ customer _ id ] from ( </%> <%> <+> c </%> <%> <+> c </%> <%> <+> c </%> <%> <+> t </%> <%> <*> order by [ ] . -> ) as </%> <%> <-> customer _ id </%>
<%> <*> generated _ value -> object </%> <@> return new generated _ value ( convert . change _ type ( interlocked . increment ( ref current ) , property . property _ type . unwrap _ nullable _ type ( ) ) ) ; </@> <%> <+> public override bool generates _ temporary _ values = > false ; </%>
 <@> assert . true ( generated _ value . is _ temporary ) ; values . add ( new guid ( ( byte [ ] ) generated _ value . value ) ) ; </@> <%> <+> } fact public void generates _ temp _ values ( ) { assert . true ( new temporary _ binary _ value _ generator ( ) . generates _ temporary _ values ) ; </%>
 <@> return new generated _ value ( convert . change _ type ( new _ value . current , property . property _ type . unwrap _ nullable _ type ( ) ) ) ; </@> <%> <*> generated _ value -> object </%>
 <@> return new generated _ value ( convert . change _ type ( new _ value . current , property . property _ type . unwrap _ nullable _ type ( ) ) ) ; </@> <%> <+> public virtual bool generates _ temporary _ values = > false ; </%>
 <@> assert . true ( generated _ value . is _ temporary ) ; values . add ( guid . parse ( ( string ) generated _ value . value ) ) ; </@> <%> <+> } fact public void generates _ temp _ values ( ) { assert . true ( new temporary _ string _ value _ generator ( ) . generates _ temporary _ values ) ; </%>
<%> <*> generated _ value -> object </%> <@> return new generated _ value ( guid . new _ guid ( ) . to _ byte _ array ( ) , is _ temporary : true ) ; </@> <%> <+> public override bool generates _ temporary _ values = > true ; </%>
<%> <-> value . </%> <%> <*> generated _ value -> generator </%> <%> <*> is -> generates </%> <%> <+> _ values </%> <%> <*> generated _ value -> object </%> <@> return new generated _ value ( 1 , is _ temporary : true ) ; </@> <%> <+> public override bool generates _ temporary _ values = > true ; </%>
<%> <*> generated _ value -> object </%> <@> return new generated _ value ( guid . new _ guid ( ) ) ; </@> <%> <+> public override bool generates _ temporary _ values = > false ; </%>
<%> <*> generated _ value -> object </%> <@> return new generated _ value ( guid . new _ guid ( ) . to _ string ( ) , is _ temporary : true ) ; </@> <%> <+> public override bool generates _ temporary _ values = > true ; </%>
 <@> assert . false ( generated _ value . is _ temporary ) ; values . add ( ( guid ) generated _ value . value ) ; </@> <%> <+> } fact public void does _ not _ generate _ temp _ values ( ) { assert . false ( new sequential _ guid _ value _ generator ( ) . generates _ temporary _ values ) ; </%>
 <@> assert . false ( generated _ value . is _ temporary ) ; values . add ( ( guid ) generated _ value . value ) ; </@> <%> <+> } fact public void does _ not _ generate _ temp _ values ( ) { assert . false ( new guid _ value _ generator ( ) . generates _ temporary _ values ) ; </%>
<%> <*> new -> model . add _ </%> <@> model . add _ entity _ type ( principal _ type ) ; var dependent _ type = new entity _ type ( typeof ( dependent _ entity ) ) ; </@> <%> <*> model . add _ entity _ type ( dependent _ type ) ; var principal _ type _ with _ composite _ key = new entity _ type ( typeof ( principal _ entity _ with _ composite _ key ) ) ; -> var principal _ type _ with _ composite _ key = model . add _ entity _ type ( typeof ( principal _ entity _ with _ composite _ key ) ) ; </%> <%> <-> model . add _ entity _ type ( principal _ type _ with _ composite _ key ) ; </%>
<%> <*> new -> model . add _ </%> <%> <*> model . add _ entity _ type ( principal _ type ) ; var dependent _ type = new entity _ type ( typeof ( dependent _ entity ) ) ; -> var dependent _ type = model . add _ entity _ type ( typeof ( dependent _ entity ) ) ; </%> <%> <*> model . add _ entity _ type ( dependent _ type ) ; var principal _ type _ with _ composite _ key = new entity _ type ( typeof ( principal _ entity _ with _ composite _ key ) ) ; -> var principal _ type _ with _ composite _ key = model . add _ entity _ type ( typeof ( principal _ entity _ with _ composite _ key ) ) ; </%> <@> model . add _ entity _ type ( principal _ type _ with _ composite _ key ) ; var dependent _ type _ with _ composite _ key = new entity _ type ( typeof ( dependent _ entity _ with _ composite _ key ) ) ; </@> <%> <-> model . add _ entity _ type ( dependent _ type _ with _ composite _ key ) ; </%>
<%> <+> model model </%> <%> <*> new -> model . add _ </%> <@> public static i _ model model ( ) </@> <%> <-> model . add _ entity _ type ( </%> <%> <*> ) -> model </%>
<%> <*> new -> model . add _ </%> <%> <-> i _ </%> <@> model . add _ entity _ type ( entity _ type ( ) ) ; </@> 
<%> <-> model . add _ entity _ type ( entity _ type ) ; </%> <%> <*> new -> model . add _ </%> <@> model . add _ entity _ type ( house _ type ) ; var customer _ type = new entity _ type ( typeof ( customer ) ) ; </@> 
 <@> model . add _ entity _ type ( customer _ type ) ; var order _ type = new entity _ type ( typeof ( order ) ) ; </@> <%> <-> model . add _ entity _ type ( order _ type ) ; </%>
<%> <*> model . add _ entity _ type ( entity ) ; var entity = new entity _ type ( STR ) ; -> var entity = model . add _ entity _ type ( STR ) ; </%> <@> model . add _ entity _ type ( entity ) ; var entity = new entity _ type ( STR ) ; </@> <%> <*> model . add _ entity _ type ( entity ) ; var entity = new entity _ type ( STR ) ; -> var entity = model . add _ entity _ type ( STR ) ; </%>
<%> <*> model . add _ entity _ type ( entity ) ; var entity = new entity _ type ( STR ) ; -> var entity = model . add _ entity _ type ( STR ) ; </%> <@> model . add _ entity _ type ( entity ) ; var entity = new entity _ type ( STR ) ; </@> <%> <-> model . add _ entity _ type ( entity ) ; </%>
 <@> var entity _ type = new entity _ type ( typeof ( some _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( some _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ entity ) . full _ name ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; </@> 
 <@> var entity _ type = new entity _ type ( typeof ( some _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( some _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ entity ) ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> 
 <@> var entity _ type = new entity _ type ( typeof ( some _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( some _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ entity ) ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; </%>
<%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> 
<%> <*> new -> model . add _ </%> <@> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; </@> <%> <*> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ; </%> <%> <-> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </%>
<%> <*> new -> model . add _ </%> <%> <*> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ; </%> <@> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; </@> <%> <*> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ; </%> <%> <+> var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ; var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ; </%>
<%> <*> new -> model . add _ </%> <@> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; </%>
<%> <*> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </@> 
 <@> using ( sb . indent ( ) ) { sb . append _ line ( ) ; sb . append ( use _ identity _ facet _ config ) ; } </@> <%> <+> return true ; </%>
<%> <-> system . data . </%> <%> <-> system . data . </%> <@> public virtual i _ db _ context _ transaction begin _ transaction ( system . data . isolation _ level isolation _ level ) </@> 
<%> <*> if ( left ! = null & & right ! = null ) -> if ( left ! = null </%> <%> <+> & & right ! = null ) </%> <@> new case _ when _ clause [ ] </@> <%> <-> , </%>
<%> <+> using microsoft _ entity _ framework _ core _ change _ tracking _ internal ; </%> <@> : change _ tracking . internal . identity _ map _ factory _ factory _ base , i _ in _ memory _ table _ factory </@> 
 <@> console . write _ line ( string . format ( STR , option _ help . long _ name ) ) ; </@> <%> <-> if ( cmd ! = this & & cmd . arguments . count > 0 ) </%>
<%> <+> using microsoft _ entity _ framework _ core _ change _ tracking _ internal ; </%> <@> private readonly change _ tracking . internal . i _ principal _ key _ value _ factory < t _ key > key _ value _ factory ; </@> <%> <-> change _ tracking . internal . </%>
<%> <-> change _ tracking . internal . </%> <@> not _ null change _ tracking . internal . i _ principal _ key _ value _ factory < t _ key > key _ value _ factory , </@> 
<%> <+> using microsoft _ data _ relational _ model ; </%> <@> namespace microsoft _ data _ relational _ model _ tests </@> 
 <@> b . property < string > ( STR ) ; b . property < int > ( STR ) ; </@> <%> <-> < string > </%>
<%> <-> < string > </%> <%> <-> < int > </%> <@> b . property < string > ( STR ) ; </@> <%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%>
<%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%> <@> b . property < int > ( STR ) . has _ field ( STR ) ; b . property < string > ( STR ) . has _ field ( STR ) ; </@> <%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%>
<%> <-> < int > </%> <%> <-> < string > </%> <@> b . property < int > ( STR ) ; </@> <%> <-> < string > </%> <%> <-> < int > </%> <%> <-> < int > </%> <%> <-> < string > </%>
<%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%> <@> b . property < string > ( STR ) ; b . property < int > ( STR ) ; </@> <%> <-> < int > </%> <%> <-> < string > </%>
<%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%> <@> b . property < int > ( STR ) ; </@> <%> <-> < string > </%>
<%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%> <%> <-> < int > </%> <@> b . property < string > ( STR ) ; </@> 
 <@> not _ null string name , can _ be _ null object value , can _ be _ null string invariant _ name ) </@> <%> <+> check . not _ empty ( invariant _ name , nameof ( invariant _ name ) ) ; </%> <%> <-> command _ builder . add _ parameter ( name , value , t = > t . get _ mapping _ for _ value ( value ) , value ? . get _ type ( ) . is _ nullable _ type ( ) , invariant _ name ) ; </%>
 <@> public virtual new t _ property current _ value </@> <%> <*> param _ can _ be _ null set { base . current _ value = value ; } -> param _ can _ be _ null set { base . current _ value = value ; } </%> <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> param _ can _ be _ null </%>
<%> <-> current . parent = null ; </%> <%> <+> virtual </%> <@> var parameter = ( sqlite _ parameter ) value ; validate ( - 1 , parameter ) ; bound = false ; parameters . add ( parameter ) ; </@> <%> <*> override void -> sqlite _ parameter </%> <%> <*> _ range ( array values -> ( sqlite _ parameter value </%> <%> <*> foreach ( var value in values ) { add ( value ) ; } -> parameters . add ( value ) ; </%> <%> <+> return value ; </%>
<%> <-> int size ; return string _ to _ h _ global _ ut ( s , out size ) ; } public static int _ ptr string _ to _ h _ global _ ut ( string s , out int size ) { </%> <%> <-> size = 0 ; </%> <@> size = bytes . length + 1 ; var ptr = marshal . alloc _ h _ global ( size ) ; </@> <%> <*> error -> rc , sqlite </%> <%> <*> code -> handle db </%> <%> <*> if ( error _ code = = constants . sqlite _ ok ) -> if ( rc = = constants . sqlite _ ok </%> <%> <+> | | rc = = constants . sqlite _ row | | rc = = constants . sqlite _ done ) </%>
<%> <*> return expression . lambda ( expression . block ( typeof ( void ) , expressions ) , entity _ parameter , related _ entity _ parameter ) ; -> return expression . lambda ( expression . block ( typeof ( void ) , expressions ) , entity _ parameter , related _ entity _ parameter ) </%> <%> <+> . compile ( ) ; } private static delegate generate _ initialize ( type entity _ type , i _ navigation navigation ) { if ( ! navigation . is _ collection ( ) ) { return null ; } var entity _ parameter = expression . parameter ( entity _ type ) ; var get _ or _ create _ expression = expression . call ( expression . constant ( navigation . get _ collection _ accessor ( ) ) , collection _ accessor _ get _ or _ create _ method _ info , entity _ parameter , expression . constant ( true ) ) ; return expression . lambda ( expression . block ( typeof ( void ) , get _ or _ create _ expression ) , entity _ parameter ) . compile ( ) ; </%> <@> = > entity . make _ member _ access ( navigation . get _ member _ info ( for _ materialization : false , for _ set : true ) ) . assign ( related _ entity ) ; </@> 
 <@> var target _ entry = target _ entity _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( related _ entity , target _ entity _ type ) : state _ manager . get _ or _ create _ entry ( related _ entity ) ; </@> <%> <-> var target _ entry = target _ entity _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( navigation _ value , target _ entity _ type ) : state _ manager . get _ or _ create _ entry ( navigation _ value ) ; </%>
<%> <*> var target _ entry = target _ entity _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( related _ entity , target _ entity _ type ) : state _ manager . get _ or _ create _ entry ( related _ entity ) ; -> var target _ entry = state _ manager . get _ or _ create _ entry ( related _ entity , target _ entity _ type ) ; </%> <@> var target _ entry = target _ entity _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( navigation _ value , target _ entity _ type ) : state _ manager . get _ or _ create _ entry ( navigation _ value ) ; </@> 
 <@> var target _ entry = target _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( related _ entity , target _ type ) : state _ manager . get _ or _ create _ entry ( related _ entity ) ; </@> <%> <-> var target _ entry = target _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( navigation _ value , target _ type ) </%>
<%> <*> var target _ entry = target _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( related _ entity , target _ type ) : state _ manager . get _ or _ create _ entry ( related _ entity ) ; -> var target _ entry = state _ manager . get _ or _ create _ entry ( related _ entity , target _ type ) ; </%> <@> var target _ entry = target _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( navigation _ value , target _ type ) : state _ manager . get _ or _ create _ entry ( navigation _ value ) ; </@> 
<%> <*> key referenced _ key -> property property </%> <%> <*> params property [ ] properties -> key referenced _ key </%> <%> <*> check . not -> return get _ or _ add _ foreign </%> <%> <*> null -> key </%> <%> <+> new [ ] { property } , </%> <%> <-> , STR </%> <%> <+> } public virtual foreign _ key get _ or _ add _ foreign _ key ( not _ null i _ read _ only _ list < property > properties , [ not _ null ] key referenced _ key ) { return try _ get _ foreign _ key ( properties ) ? ? add _ foreign _ key ( properties , referenced _ key ) ; } can _ be _ null public virtual foreign _ key try _ get _ foreign _ key ( [ not _ null ] property property ) { return try _ get _ foreign _ key ( new [ ] { property } ) ; } can _ be _ null public virtual foreign _ key try _ get _ foreign _ key ( [ not _ null ] i _ read _ only _ list < property > properties ) { </%> <%> <*> var foreign _ key = foreign _ keys . value . first _ or _ default ( k = > k . referenced _ key = = referenced _ key & & k . properties . sequence _ equal ( properties ) ) ? ? add _ foreign _ key ( new foreign _ key ( referenced _ key , properties ) ) ; -> return foreign _ keys . has _ value </%> <%> <+> ? foreign _ keys . value . first _ or _ default ( fk = > matches ( fk , properties ) ) : null ; } public virtual foreign _ key get _ foreign _ key ( [ not _ null ] property property ) { return get _ foreign _ key ( new [ ] { property } ) ; } public virtual foreign _ key get _ foreign _ key ( [ not _ null ] i _ read _ only _ list < property > properties ) { var foreign _ key = try _ get _ foreign _ key ( properties ) ; if ( foreign _ key = = null ) { throw new model _ item _ not _ found _ exception ( strings . format _ foreign _ key _ not _ found ( property . format ( properties ) , name ) ) ; } </%> <@> public virtual void remove _ foreign _ key ( [ not _ null ] foreign _ key foreign _ key ) </@> <%> <*> check _ -> var index = foreign _ keys . value . find _ index ( fk = > matches ( fk , foreign _ key . properties ) ) ; if ( index > = 0 ) { var removed _ fk = foreign _ keys . value [ index ] ; check _ foreign _ key _ not _ in _ use ( removed _ fk ) ; </%> <%> <*> key _ not _ in -> keys . value . remove </%> <%> <*> use -> at </%> <%> <*> foreign _ key -> index </%>
<%> <-> get _ or _ </%> <@> order _ type . get _ or _ add _ foreign _ key ( customer _ pk , customer _ fk ) ; </@> <%> <+> STR + customer . id _ property . name + STR , </%> <%> <+> ( property ) </%> <%> <+> _ key </%>
<%> <+> STR + customer . id _ property . name + STR , </%> <%> <+> ( property ) </%> <%> <+> _ key </%> <%> <-> get _ or _ </%> <@> order _ type . get _ or _ add _ foreign _ key ( customer _ pk , customer _ fk ) ; </@> <%> <+> STR + customer . id _ property . name + STR , </%> <%> <-> get _ or _ </%> <%> <+> _ and _ get </%> <%> <-> _ explicitly </%>
<%> <*> entity _ type . remove _ key ( key ) ; entity _ type . remove _ key ( key ) ; -> assert . same ( key , entity _ type . remove _ key ( new key ( new [ ] { id _ property } ) ) ) ; </%> <@> order _ type . get _ or _ add _ foreign _ key ( customer _ key , customer _ fk ) ; </@> <%> <+> STR + customer . id _ property . name + STR , </%>
<%> <*> order _ type . remove _ navigation ( customer _ navigation ) ; -> assert . same ( orders _ navigation , customer _ type . remove _ navigation ( new navigation ( STR , customer _ foreign _ key , points _ to _ principal : false ) ) ) ; </%> <%> <+> assert . empty ( customer _ type . navigations ) ; </%> <@> var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( customer _ key , foreign _ key _ property ) ; </@> 
<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <@> var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( customer _ key , foreign _ key _ property ) ; var customer _ navigation = order _ type . add _ navigation ( new navigation ( customer _ foreign _ key , STR , points _ to _ principal : true ) ) ; </@> <%> <+> STR , </%> <%> <*> navigation -> foreign _ key , points _ to _ principal : true </%> <%> <*> STR -> typeof ( customer ) </%>
<%> <*> ( ) = > order _ type . add _ navigation ( new navigation ( customer _ foreign _ key , STR , points _ to _ principal : true ) ) ) . message ) ; -> ( ) = > order _ type . add _ navigation ( STR , customer _ foreign _ key , points _ to _ principal : true ) ) . message ) ; </%> <%> <+> } fact public void adding _ a _ navigation _ pointing _ to _ a _ shadow _ entity _ type _ throws ( ) { var customer _ type = new entity _ type ( STR ) ; var customer _ key = customer _ type . get _ or _ add _ key ( customer _ type . get _ or _ add _ property ( STR , typeof ( int ) , shadow _ property : true ) ) ; var order _ type = new entity _ type ( typeof ( order ) ) ; var foreign _ key _ property = order _ type . get _ or _ add _ property ( STR , typeof ( int ) , shadow _ property : true ) ; var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( foreign _ key _ property , customer _ key ) ; assert . equal ( strings . format _ navigation _ to _ shadow _ entity ( STR , typeof ( order ) . full _ name , STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > order _ type . add _ navigation ( STR , customer _ foreign _ key , points _ to _ principal : true ) ) . message ) ; </%> <@> var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( customer _ key , foreign _ key _ property ) ; </@> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>
<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <@> var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( customer _ key , foreign _ key _ property ) ; customer _ type . add _ navigation ( new navigation ( customer _ foreign _ key , STR , points _ to _ principal : false ) ) ; </@> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>
<%> <*> category -> product </%> <%> <-> _ primary </%> <%> <*> key -> property </%> <%> <+> STR </%> <%> <*> product -> category </%> <%> <+> _ primary </%> <%> <*> property -> key </%> <%> <-> STR </%> <%> <*> product -> category </%> <%> <-> _ primary </%> <%> <*> key -> property </%> <%> <+> STR </%> <%> <*> category -> product </%> <%> <+> _ primary </%> <%> <*> property -> key </%> <%> <-> STR </%> <@> category _ type . add _ navigation ( new navigation ( category _ fk , STR , points _ to _ principal : false ) ) ; </@> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>
<%> <*> category -> product </%> <%> <-> _ primary </%> <%> <*> key -> property </%> <%> <+> STR </%> <%> <*> product -> category </%> <%> <+> _ primary </%> <%> <*> property -> key </%> <%> <-> STR </%> <%> <*> product -> category </%> <%> <-> _ primary </%> <%> <*> key -> property </%> <%> <+> STR </%> <%> <*> category -> product </%> <%> <+> _ primary </%> <%> <*> property -> key </%> <%> <-> STR </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <@> product _ type . add _ navigation ( new navigation ( category _ fk , STR , points _ to _ principal : true ) ) ; </@> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>
<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <@> product _ type . add _ navigation ( new navigation ( featured _ product _ fk , STR , points _ to _ principal : false ) ) ; </@> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>
<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <@> category _ type . add _ navigation ( new navigation ( featured _ product _ fk , STR , points _ to _ principal : true ) ) ; </@> 
 <@> var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; </@> <%> <+> fk _ property , </%> <%> <-> , fk _ property </%>
<%> <+> fk _ property , </%> <%> <-> , fk _ property </%> <@> var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; </@> <%> <+> fk _ property , </%> <%> <-> , fk _ property </%>
<%> <+> fk _ property , </%> <%> <-> , fk _ property </%> <@> var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; </@> 
 <@> var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; dependent _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : true ) ) ; </@> <%> <*> same -> not _ equal </%>
<%> <*> same -> not _ equal </%> <@> var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; principal _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : false ) ) ; </@> <%> <*> same -> not _ equal </%>
<%> <*> same -> not _ equal </%> <@> var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; </@> <%> <*> same -> not _ equal </%>
<%> <*> principal _ type . get _ or _ set _ primary _ key ( -> principal _ type . get _ or _ set _ primary _ key ( new [ ] </%> <%> <+> { </%> <%> <-> ) ; new foreign _ key ( principal _ type . get _ primary _ key ( ) , new [ ] { dependent _ property , dependent _ property </%> <%> <+> new foreign _ key ( new [ ] { dependent _ property , dependent _ property } , principal _ type . get _ primary _ key ( ) ) ; </%> <%> <+> STR , </%> <@> ( ) = > new foreign _ key ( principal _ type . get _ primary _ key ( ) , new [ ] { dependent _ property , dependent _ property } ) ) . message ) ; </@> 
 <@> var foreign _ key = new foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { dependent _ prop } ) ; </@> <%> <+> new [ ] { dependent _ prop } , </%> <%> <-> , new [ ] { dependent _ prop } </%>
<%> <+> new [ ] { dependent _ prop } , </%> <%> <-> , new [ ] { dependent _ prop } </%> <@> var foreign _ key = new foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { dependent _ prop } ) ; </@> <%> <*> entity _ type . get _ or _ set _ primary _ key ( -> entity _ type . get _ or _ set _ primary _ key ( new [ ] </%> <%> <+> { </%> <%> <-> ) ; </%>
<%> <*> entity _ type . get _ or _ set _ primary _ key ( -> entity _ type . get _ or _ set _ primary _ key ( new [ ] </%> <%> <+> { </%> <%> <*> ) ; -> } ) ; </%> <@> var foreign _ key = new foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { dependent _ prop , dependent _ prop } ) ; </@> <%> <+> new [ ] { </%>
 <@> return property . entity _ type ! = null & & property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ; </@> <%> <*> return property . entity _ type ! = null & & property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ; -> return property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ; </%>
<%> <*> return property . entity _ type ! = null & & property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ; -> return property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ; </%> <@> return property . entity _ type ! = null & & property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ; </@> <%> <*> return property . entity _ type ! = null & & property . entity _ type . keys . select _ many ( e = > e . properties ) . contains ( property ) ; -> return property . entity _ type . keys . select _ many ( e = > e . properties ) . contains ( property ) ; </%>
<%> <*> return property . entity _ type ! = null & & property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ; -> return property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ; </%> <%> <*> return property . entity _ type ! = null & & property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ; -> return property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ; </%> <@> return property . entity _ type ! = null & & property . entity _ type . keys . select _ many ( e = > e . properties ) . contains ( property ) ; </@> <%> <*> if ( value ! = null | | property . entity _ type = = null ) -> if ( value ! = null ) </%>
 <@> assert . throws < argument _ null _ exception > ( ( ) = > new navigation ( null , STR , points _ to _ principal : true ) ) . param _ name ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <*> null -> STR </%> <%> <*> STR -> null </%> <@> assert . throws < argument _ exception > ( ( ) = > new navigation ( new mock < foreign _ key > ( ) . object , STR , points _ to _ principal : true ) ) . message ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> var navigation = new navigation ( foreign _ key , STR , points _ to _ principal : true ) ; </@> 
 <@> var navigation = new navigation ( foreign _ key , STR , points _ to _ principal : false ) ; </@> <%> <-> fact public void can _ set _ entity _ type ( ) </%>
 <@> var fk = entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ( ) , fk _ property ) ; </@> <%> <-> navigation ( new </%> <%> <*> fk -> STR </%> <%> <*> STR -> fk </%> <%> <-> ) </%> <%> <-> navigation ( new </%> <%> <*> fk -> STR </%> <%> <*> STR -> fk </%> <%> <-> ) </%>
<%> <+> fk _ property , </%> <%> <-> , fk _ property </%> <@> entity _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : false ) ) ; entity _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : true ) ) ; </@> 
 <@> entity _ type . get _ or _ add _ foreign _ key ( new key ( new [ ] { id _ property } ) , fk _ property ) ; </@> <%> <+> new [ ] { </%> <%> <+> } </%> <%> <+> new [ ] { fk } , </%> <%> <-> , new [ ] { fk } </%>
<%> <+> fk _ property , </%> <%> <-> , fk _ property </%> <%> <+> new [ ] { </%> <%> <+> } </%> <@> entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { fk } ) ; </@> <%> <-> entity _ type . get _ primary _ key ( ) , </%> <%> <+> , entity _ type . get _ primary _ key ( ) </%>
<%> <+> new [ ] { fk } , </%> <%> <-> , new [ ] { fk } </%> <@> entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { fk _ a , fk _ b } ) ; </@> 
 <@> product _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ principal : false ) ) ; order _ detail _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ principal : true ) ) ; </@> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>
<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <@> customer _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : false ) ) ; order _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : true ) ) ; </@> 
<%> <+> new [ ] { </%> <%> <+> } </%> <@> entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { fk } ) ; </@> 
 <@> var customer _ fk = customer _ type . get _ or _ add _ foreign _ key ( house _ type . get _ primary _ key ( ) , customer _ fk _ property ) ; </@> <%> <+> order _ fk , </%> <%> <-> , order _ fk </%>
<%> <+> customer _ fk _ property , </%> <%> <-> , customer _ fk _ property </%> <@> order _ type . get _ or _ add _ foreign _ key ( customer _ type . get _ primary _ key ( ) , order _ fk ) ; </@> 
 <@> order _ detail _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ principal : true ) ) ; product _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ principal : false ) ) ; </@> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>
<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <@> order _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : true ) ) ; customer _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : false ) ) ; </@> 
<%> <+> new [ ] { </%> <%> <+> } </%> <@> entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { fk } ) ; </@> 
<%> <+> public virtual model _ builder create _ convention _ builder ( ) { return new model _ builder ( create _ convention _ set ( ) ) ; } </%> <@> return new model _ builder ( model , create _ convention _ set ( ) ) ; </@> 
 <@> var dispatch _ args = execute _ command . create _ args ( </@> <%> <+> dispatcher _ version : this _ assembly _ version , </%>
<%> <*> key -> value _ generator </%> <@> var property _ builder = property . builder ; property _ builder . value _ generated ( value _ generated . never , configuration _ source . convention ) ; </@> <%> <*> = > set _ key _ value _ generation ( foreign _ key . properties , entity _ type _ builder . metadata ) ; -> { </%> <%> <+> foreach ( var property in foreign _ key . properties ) { property . builder ? . value _ generated ( get _ value _ generated ( property ) , configuration _ source . convention ) ; } </%>
<%> <+> dependencies , create _ array _ initializer ( k , dependencies . core _ options . is _ rich _ data _ error _ handing _ enabled ) ) ) ; </%> <@> expression . constant ( mi . index = = - 1 ? i : mi . index ) , </@> <%> <+> dependencies . core _ options . is _ rich _ data _ error _ handing _ enabled , </%> <%> <*> private static func < db _ data _ reader , object [ ] > create _ array _ initializer ( cache _ key cache _ key ) { return expression . lambda < func < db _ data _ reader , object [ ] > > ( -> private static func < db _ data _ reader , object [ ] > create _ array _ initializer ( cache _ key cache _ key , bool rich _ data _ error _ handling ) </%> <%> <+> = > expression . lambda < func < db _ data _ reader , object [ ] > > ( </%>
 <@> new column _ expression ( primary _ key _ property , target _ table _ expression ) , new column _ expression ( foreign _ key _ property , inner _ join _ expression ) ) ; </@> <%> <+> _ also </%>
<%> <*> northwind -> sql _ server </%> <%> <-> northwind _ </%> <%> <*> , i -> < sql </%> <%> <*> class -> server </%> <%> <-> fixture < </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> 
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> 
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> 
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> 
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <*> database -> store </%> <%> <*> using ( var validation _ context = create _ context ( test _ database ) ) -> resolver ( resolver _ context , update _ exception ) ; </%> <%> <+> } using ( var validation _ context = create _ context ( test _ store ) ) { if ( validator ! = null ) </%> <@> resolver ( resolver _ context , update _ exception ) ; if ( validator ! = null ) { await context . save _ changes _ async ( ) ; validator ( validation _ context ) ; } </@> 
<%> <+> using microsoft _ data _ entity _ functional _ tests _ test _ models _ northwind ; </%> <%> <-> using northwind ; </%> <%> <*> protected virtual -> public </%> <@> var model = new model ( ) ; var model _ builder = new basic _ model _ builder ( model ) ; </@> <%> <+> return model _ builder . model ; } public virtual void on _ model _ creating ( basic _ model _ builder model _ builder ) { </%>
 <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> fixture . sql ) ; </@> <%> <-> fixture . init _ logger ( ) ; </%>
<%> <*> private version current _ version = > new version ( native _ methods . sqlite _ libversion ( ) ) ; private const string file _ name = STR ; private sqlite _ connection create _ connection ( bool shared = false ) = > new sqlite _ connection ( $ STR shared STR private STR ) ; -> private sqlite _ connection create _ connection ( bool shared = false ) </%> <%> <+> { var builder = new sqlite _ connection _ string _ builder { data _ source = file _ name , cache = shared ? sqlite _ cache _ mode . shared : sqlite _ cache _ mode . private } ; return new sqlite _ connection ( builder . to _ string ( ) ) ; } </%> <@> if ( file . exists ( file _ name ) ) { file . delete ( file _ name ) ; } </@> 
<%> <-> public override bool is _ fixed _ size = > false ; public override bool is _ read _ only = > false ; public override bool is _ synchronized = > false ; </%> <%> <*> { return -> = > </%> <%> <-> } </%> <@> var current = parameters [ index ] ; if ( current = = value ) </@> <%> <*> { return -> = > </%> <%> <-> } </%> <%> <*> { -> = > </%> <%> <-> } </%>
<%> <*> var string _ value = value as string ; if ( string _ value ! = null ) -> if ( value is string string _ value ) </%> <@> t _ enum enum _ value ; if ( value is t _ enum ) </@> 
<%> <*> var service _ collection = new service _ collection ( ) . add _ scaffolding ( ) ; service _ collection . add _ logging ( ) ; configure _ design _ time _ services ( service _ collection ) ; service _ collection . add _ singleton ( typeof ( i _ file _ service ) , sp = > in _ memory _ files = new in _ memory _ file _ service ( ) ) ; var service _ provider = service _ collection . build _ service _ provider ( ) ; -> var service _ provider = configure _ design _ time _ services ( </%> <%> <+> new service _ collection ( ) . add _ scaffolding ( ) . add _ logging ( ) ) . add _ singleton ( typeof ( i _ file _ service ) , sp = > in _ memory _ files = new in _ memory _ file _ service ( ) ) . build _ service _ provider ( ) ; </%> <@> protected abstract void configure _ design _ time _ services ( i _ service _ collection services ) ; </@> 
 <@> public virtual void configure _ design _ time _ services ( [ not _ null ] i _ service _ collection services ) </@> <%> <*> public virtual void configure _ design _ time _ services ( [ can _ be _ null ] type type , [ not _ null ] i _ service _ collection services ) = > invoke ( type , new [ ] { STR } , services ) ; -> public virtual i _ service _ collection configure _ design _ time _ services ( [ can _ be _ null ] type type , [ not _ null ] i _ service _ collection services ) </%> <%> <+> { invoke ( type , new [ ] { STR } , services ) ; return services ; } </%>
<%> <*> { check . not _ empty ( provider , nameof ( provider ) ) ; var services = new service _ collection ( ) ; configure _ services ( services ) ; configure _ provider _ services ( provider , services , throw _ on _ error : true ) ; configure _ user _ services ( services ) ; return services . build _ service _ provider ( ) ; } protected virtual void configure _ services ( [ not _ null ] i _ service _ collection services ) -> = > configure _ user _ services ( </%> <%> <+> configure _ provider _ services ( check . not _ empty ( provider , nameof ( provider ) ) , configure _ services ( new service _ collection ( ) ) , throw _ on _ error : true ) ) . build _ service _ provider ( ) ; protected virtual i _ service _ collection configure _ services ( [ not _ null ] i _ service _ collection services ) </%> <@> private void configure _ provider _ services ( string provider , i _ service _ collection services , bool throw _ on _ error = false ) </@> <%> <*> void -> i _ service _ collection </%>
<%> <*> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g . tag ] . [ note ] < > n ' foo ' ) or [ g . tag ] . [ note ] is null ) order by [ g ] . [ nickname ] , [ g ] . [ squad _ id ] STR -> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g . tag ] . [ note ] < > n ' foo ' ) or [ g . tag ] . [ note ] is null ) STR </%> <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g . tag ] . [ note ] < > n ' foo ' ) or [ g . tag ] . [ note ] is null ) order by [ g ] . [ nickname ] , [ g ] . [ squad _ id ] STR </@> 
 <@> = > new relational _ database _ dependencies ( check . not _ null ( batch _ preparer , nameof ( batch _ preparer ) ) , batch _ executor , connection ) ; </@> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( batch _ executor ) ) </%> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( connection ) ) </%>
<%> <-> ( check . not _ null </%> <%> <-> , nameof ( batch _ preparer ) ) </%> <@> = > new relational _ database _ dependencies ( batch _ preparer , check . not _ null ( batch _ executor , nameof ( batch _ executor ) ) , connection ) ; </@> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( connection ) ) </%>
<%> <-> ( check . not _ null </%> <%> <-> , nameof ( batch _ preparer ) ) </%> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( batch _ executor ) ) </%> <@> = > new relational _ database _ dependencies ( batch _ preparer , batch _ executor , check . not _ null ( connection , nameof ( connection ) ) ) ; </@> 
 <@> = > new relational _ connection _ dependencies ( check . not _ null ( context _ options , nameof ( context _ options ) ) , logger , diagnostic _ source ) ; </@> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( logger ) ) </%> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( diagnostic _ source ) ) </%>
<%> <-> ( check . not _ null </%> <%> <-> , nameof ( context _ options ) ) </%> <@> = > new relational _ connection _ dependencies ( context _ options , check . not _ null ( logger , nameof ( logger ) ) , diagnostic _ source ) ; </@> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( diagnostic _ source ) ) </%>
<%> <-> ( check . not _ null </%> <%> <-> , nameof ( context _ options ) ) </%> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( logger ) ) </%> <@> = > new relational _ connection _ dependencies ( context _ options , logger , check . not _ null ( diagnostic _ source , nameof ( diagnostic _ source ) ) ) ; </@> 
<%> <+> { new _ right = right _ join ? . outer _ key _ selector ; navigation _ join . remove _ navigation _ join ( navigation _ joins , right _ navigation _ join ) ; if ( new _ right ! = null & & is _ composite _ key ( new _ right . type ) ) </%> <%> <-> new _ right = right _ join ? . outer _ key _ selector ; navigation _ join . remove _ navigation _ join ( navigation _ joins , right _ navigation _ join ) ; if ( new _ right ! = null & & is _ composite _ key ( new _ right . type ) ) { </%> <%> <-> } </%> <@> else { new _ right = right _ join ? . inner _ key _ selector ; } </@> 
<%> <-> included _ </%> <%> <-> _ tracking </%> <%> <*> info -> type </%> <%> <-> included _ </%> <%> <-> _ tracking </%> <%> <*> info -> type </%> <%> <-> included _ </%> <%> <-> _ tracking </%> <%> <*> info -> type </%> <%> <-> included _ </%> <%> <-> _ tracking </%> <%> <*> info -> type </%> <%> <*> included -> i </%> <%> <*> tracking _ info included _ -> type </%> <%> <-> _ tracking </%> <%> <*> info -> type </%> <@> included _ entity _ tracking _ info . entity _ type , </@> 
<%> <*> query _ context . query _ buffer . begin _ tracking _ query ( ) ; return results . select ( result = > -> query _ context . begin _ tracking _ query ( ) ; </%> <%> <+> foreach ( var result in results ) { if ( result ! = null ) </%> <%> <*> if -> for </%> <%> <*> result ! -> var i </%> <%> <*> null ) -> 0 ; i < entity _ tracking _ infos . count ; i + + ) </%> <%> <*> for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) -> var entity = entity _ accessors [ i ] ( result as t _ in ) ; </%> <%> <+> if ( entity ! = null ) </%> <@> var entity = entity _ accessors [ i ] ( result as t _ in ) ; if ( entity ! = null ) { query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ; } </@> <%> <*> return result ; } ) ; -> } </%> <%> <+> yield return result ; } </%>
<%> <*> return grouping . select ( result = > -> query _ context . begin _ tracking _ query ( ) ; </%> <%> <+> foreach ( var result in grouping ) { if ( result ! = null ) </%> <%> <*> if -> for </%> <%> <*> result ! -> var i </%> <%> <*> null ) -> 0 ; i < entity _ tracking _ infos . count ; i + + ) </%> <%> <*> for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) -> var entity = entity _ accessors [ i ] ( result as t _ in ) ; </%> <%> <+> if ( entity ! = null ) </%> <@> var entity = entity _ accessors [ i ] ( result as t _ in ) ; if ( entity ! = null ) { query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ; } </@> <%> <-> return result ; </%> <%> <*> } ) -> } </%> <%> <*> . get _ enumerator ( ) ; -> yield return result ; </%> <%> <+> } </%>
<%> <+> opened _ count + + ; if ( opened _ count = = 1 ) { </%> <%> <+> } } public override void close ( ) { base . close ( ) ; opened _ count - - ; </%> <@> sql _ command _ builder . build ( STR ) . create _ command ( this ) . execute _ non _ query ( ) ; </@> 
 <@> using microsoft _ framework _ dependency _ injection _ extensions ; </@> <%> <*> framework -> extensions </%>
 <@> using microsoft _ framework _ caching _ memory ; using microsoft _ framework _ dependency _ injection _ extensions ; using microsoft _ framework _ logging ; </@> <%> <*> framework -> extensions </%>
 <@> using microsoft _ framework _ dependency _ injection _ extensions ; </@> <%> <*> framework -> extensions </%>
 <@> using microsoft _ framework _ dependency _ injection _ extensions ; </@> <%> <*> framework -> extensions </%>
 <@> i _ read _ only _ dictionary < string , object > , bool > ; </@> <%> <-> bool , </%>
<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> <@> var expected _ count = manage _ connection ? 1 : 0 ; </@> <%> <-> theory inline _ data _ true inline _ data _ false public virtual async task can _ execute _ non _ query _ async ( bool manage _ connection ) </%>
<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> <@> var expected _ count = manage _ connection ? 1 : 0 ; </@> <%> <-> theory inline _ data _ true inline _ data _ false public void can _ execute _ scalar ( bool manage _ connection ) </%>
<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> <@> var expected _ count = manage _ connection ? 1 : 0 ; </@> <%> <-> theory inline _ data _ true inline _ data _ false public async task can _ execute _ scalar _ async ( bool manage _ connection ) </%>
<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> <@> var expected _ count = manage _ connection ? 1 : 0 ; </@> <%> <-> theory inline _ data _ true inline _ data _ false public void can _ execute _ reader ( bool manage _ connection ) </%>
<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> <@> var expected _ count = manage _ connection ? 1 : 0 ; </@> 
<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> <@> var expected _ count = manage _ connection ? 1 : 0 ; </@> 
<%> <*> bool open _ connection , bool close _ connection ) -> bool close _ connection = true ) </%> <@> object result ; if ( open _ connection ) { connection . open ( ) ; } </@> <%> <+> object result ; </%>
 <@> if ( open _ connection & & ! close _ connection ) { connection . close ( ) ; } </@> <%> <-> if ( close _ connection ) { connection . close ( ) ; } </%>
<%> <*> bool open _ connection , bool close _ connection , -> bool close _ connection = true , </%> <@> object result ; if ( open _ connection ) { await connection . open _ async ( cancellation _ token ) ; } </@> <%> <+> object result ; </%>
 <@> if ( open _ connection & & ! close _ connection ) { connection . close ( ) ; } </@> <%> <*> if ( close _ connection ) { connection . close ( ) ; } -> db _ command . parameters . clear ( ) ; </%>
 <@> var logger = dependencies . logger ; var value _ generation _ strategy _ convention = new sql _ server _ value _ generation _ strategy _ convention ( logger ) ; </@> <%> <*> convention _ set . model _ initialized _ conventions . add ( new relational _ max _ identifier _ length _ convention ( NUM , logger ) ) ; value _ generator _ convention value _ generator _ convention = new sql _ server _ value _ generator _ convention ( logger ) ; -> convention _ set . model _ initialized _ conventions . add ( </%> <%> <+> new relational _ max _ identifier _ length _ convention ( NUM , dependencies , relational _ dependencies ) ) ; value _ generator _ convention value _ generator _ convention = new sql _ server _ value _ generator _ convention ( dependencies , relational _ dependencies ) ; </%> <%> <*> logger -> dependencies </%>
<%> <*> var full _ file _ name = path . combine ( output _ directory _ name , file _ name ) ; if ( file . exists ( full _ file _ name ) ) -> if ( file _ service . is _ file _ read _ only ( output _ directory _ name , file _ name ) ) </%> <@> var attributes = file . get _ attributes ( full _ file _ name ) ; if ( attributes . has _ flag ( file _ attributes . read _ only ) ) { read _ only _ files . add ( file _ name ) ; } </@> <%> <-> } private void output _ file ( string output _ directory _ name , string output _ file _ name , string contents ) </%>
<%> <*> if ( ! file . exists ( script _ path ) ) -> if ( file . exists ( STR + script _ path ) ) </%> <%> <+> { script _ path = STR + script _ path ; } else </%> <@> script _ path = path . combine ( app _ base , path . get _ file _ name ( script _ path ) ) ; </@> 
<%> <*> if ( ! file . exists ( script _ path ) ) -> if ( file . exists ( STR + script _ path ) ) </%> <%> <+> { script _ path = STR + script _ path ; } else </%> <@> script _ path = path . combine ( app _ base , path . get _ file _ name ( script _ path ) ) ; </@> 
<%> <+> = > shaper . get _ accessor _ expression ( query _ source ) ; public override void update _ query _ source ( [ not _ null ] i _ query _ source query _ source ) = > shaper . update _ query _ source ( query _ source ) ; public override bool is _ shaper _ for _ query _ source ( [ not _ null ] i _ query _ source query _ source ) = > shaper . is _ shaper _ for _ query _ source ( query _ source ) ; public override void save _ accessor _ expression ( [ not _ null ] query _ source _ mapping query _ source _ mapping ) = > shaper . save _ accessor _ expression ( query _ source _ mapping ) ; public override i _ query _ source query _ source = > shaper . query _ source ; </%> <@> = > selector ( shaper . shape ( query _ context , value _ buffer ) ) ; </@> <%> <-> query _ source , </%>
<%> <*> var ordering _ expression = ordering . expression ; if ( ordering . expression . remove _ convert ( ) is null _ conditional _ expression null _ conditional _ expression ) { ordering _ expression = null _ conditional _ expression . access _ operation ; } -> var ordering _ expression = ordering . expression . remove _ convert ( ) . remove _ null _ conditional ( ) . remove _ convert ( ) ; </%> <@> if ( ordering _ expression . remove _ convert ( ) is member _ expression member _ expression </@> <%> <-> . remove _ convert ( ) </%>
<%> <*> var ordering _ expression = ordering . expression ; if ( ordering . expression . remove _ convert ( ) is null _ conditional _ expression null _ conditional _ expression ) { ordering _ expression = null _ conditional _ expression . access _ operation ; } -> var ordering _ expression = ordering . expression . remove _ convert ( ) . remove _ null _ conditional ( ) . remove _ convert ( ) ; </%> <%> <-> . remove _ convert ( ) </%> <@> if ( ordering _ expression . remove _ convert ( ) is method _ call _ expression method _ call _ expression </@> 
<%> <*> var property = new property ( customer . id _ property ) ; var property = new property ( customer . name _ property ) ; assert . same ( property , entity _ type . add _ property ( property ) ) ; assert . same ( property , entity _ type . add _ property ( property ) ) ; -> var property = entity _ type . add _ property ( customer . id _ property ) ; </%> <%> <+> var property = entity _ type . add _ property ( customer . name _ property ) ; </%> <@> var entity _ type = new entity _ type ( typeof ( customer ) ) ; var property = new property ( customer . id _ property ) ; entity _ type . add _ property ( property ) ; </@> <%> <*> entity _ type . add _ property ( property ) ; assert . same ( entity _ type , property . entity _ type ) ; -> entity _ type . remove _ property ( property ) ; </%> <%> <-> entity _ type . remove _ property ( property ) ; assert . empty ( entity _ type . properties ) ; </%>
<%> <*> bool -> void </%> <%> <-> return </%> <@> public virtual task < bool > detect _ changes _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </@> 
 <@> return found _ changes ; } public virtual task < bool > detect _ changes _ async ( </@> <%> <*> return task . from _ result ( detect _ changes ( entry ) ) ; -> detect _ changes ( entry ) ; </%> <%> <+> return task . from _ result ( false ) ; } public virtual bool requires _ detect _ changes ( [ not _ null ] state _ entry entry ) { check . not _ null ( entry , STR ) ; </%>
 <@> assert . false ( change _ detector . detect _ changes ( state _ manager ) ) ; </@> <%> <-> assert . true ( </%> <%> <-> ) </%>
<%> <-> assert . false ( </%> <%> <-> ) </%> <@> assert . true ( change _ detector . detect _ changes ( state _ manager ) ) ; </@> <%> <*> bool -> void </%>
 <@> context . check _ disposed ( ) ; </@> <%> <-> context . </%>
<%> <-> context . </%> <@> context . check _ disposed ( ) ; </@> 
 <@> context . check _ disposed ( ) ; </@> <%> <-> context . </%>
<%> <-> context . </%> <@> context . check _ disposed ( ) ; </@> <%> <-> context . </%>
<%> <-> context . </%> <@> context . check _ disposed ( ) ; </@> 
<%> <-> assert . equal ( STR , columns . single ( c = > c . name = = STR ) . default _ value _ sql ) ; </%> <@> columns . where ( c = > c . name . starts _ with ( STR ) ) , </@> <%> <*> STR ) ; -> @ STR </%> <%> <+> drop table default _ values ; drop type datetime _ alias ; drop type datetimeoffset _ alias ; drop type decimal _ alias ; drop type numeric _ alias ; drop type time _ alias ; STR </%>
<%> <*> public oracle _ decimal _ type _ mapping ( [ not _ null ] string store _ type , db _ type ? db _ type = null ) : this ( -> public oracle _ decimal _ type _ mapping ( </%> <%> <+> not _ null string store _ type , db _ type ? db _ type = null , int? precision = null , int? scale = null , store _ type _ postfix store _ type _ postfix = store _ type _ postfix . none ) : base ( </%> <%> <*> new core _ type _ mapping _ parameters ( typeof ( decimal ) ) , -> new core _ type _ mapping _ parameters ( typeof ( decimal ) ) , </%> <%> <-> . precision _ and _ scale </%> <@> precision : NUM , scale : NUM ) ) </@> <%> <-> public override relational _ type _ mapping clone ( string store _ type , int? size ) = > new oracle _ decimal _ type _ mapping ( parameters . with _ store _ type _ and _ size ( store _ type , size ) ) ; public override core _ type _ mapping clone ( value _ converter converter ) = > new oracle _ decimal _ type _ mapping ( parameters . with _ composed _ converter ( converter ) ) ; </%>
<%> <+> evaluatable _ expression _ filter = evaluatable _ expression _ filter ; </%> <@> query = query _ model _ generator . extract _ parameters ( logger , query , query _ context ) ; </@> 
 <@> query = query _ model _ generator . extract _ parameters ( logger , query , query _ context _ factory . create ( ) , parameterize : false ) ; </@> <%> <-> query _ model _ generator . </%> <%> <-> logger , </%> <%> <+> , logger </%>
<%> <*> query = query _ model _ generator . extract _ parameters ( logger , query , query _ context _ factory . create ( ) , parameterize : false ) ; -> query = extract _ parameters ( query , query _ context _ factory . create ( ) , logger , parameterize : false ) ; </%> <@> query = query _ model _ generator . extract _ parameters ( logger , query , query _ context ) ; </@> 
 <@> assert . equal ( 1 , entity . get _ primary _ key ( ) . properties . count ( ) ) ; </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> assert . equal ( 1 , entity . get _ primary _ key ( ) . properties . count ( ) ) ; </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> assert . equal ( 1 , entity . get _ primary _ key ( ) . properties . count ( ) ) ; </@> 
 <@> using ( var connection = new sql _ server _ connection ( create _ configuration ( ) , new connection _ string _ resolver ( null ) ) ) </@> <%> <-> , new connection _ string _ resolver ( null </%> <%> <-> ) </%>
<%> <-> , new connection _ string _ resolver ( null </%> <%> <-> ) </%> <@> using ( var connection = new sql _ server _ connection ( create _ configuration ( ) , new connection _ string _ resolver ( null ) ) ) </@> 
 <@> assert . throws < invalid _ operation _ exception > ( ( ) = > new fake _ connection ( create _ configuration ( null ) , new connection _ string _ resolver ( null ) ) ) . message ) ; </@> <%> <*> assert . throws < invalid _ operation _ exception > ( ( ) = > new fake _ connection ( create _ configuration ( e = > { } , e = > { } ) , new connection _ string _ resolver ( null ) ) ) . message ) ; -> assert . throws < invalid _ operation _ exception > ( ( ) = > new fake _ connection ( create _ configuration ( e = > { } , e = > { } ) ) ) . message ) ; </%>
 <@> new relational _ database _ model _ factory _ test . fake _ database _ model _ factory ( ) , new relational _ database _ model _ factory _ test . fake _ scaffolding _ model _ factory ( new test _ operation _ reporter ( ) ) , </@> <%> <-> new in _ memory _ file _ service ( ) , </%>
<%> <-> } } public virtual entity _ type _ code _ generator _ helper entity _ type _ code _ generator _ helper ( entity _ type _ generator _ model model ) { return new entity _ type _ code _ generator _ helper ( model , extensions _ provider ) ; } </%> <@> var code _ gen _ model = new entity . metadata . model ( ) ; </@> 
 <@> var level = result . where ( e = > e . name = = STR ) . single ( ) ; </@> <%> <*> where -> single </%> <%> <-> ) . single ( </%>
<%> <*> where -> single </%> <%> <-> ) . single ( </%> <@> var level = level . one _ to _ many _ optional . where ( e = > e . name = = STR ) . single ( ) ; </@> 
 <@> var level = result . where ( e = > e . name = = STR ) . single ( ) ; </@> <%> <*> where -> single </%> <%> <-> ) . single ( </%>
<%> <*> where -> single </%> <%> <-> ) . single ( </%> <@> var level = level . one _ to _ many _ optional . where ( e = > e . name = = STR ) . single ( ) ; </@> 
<%> <-> assert . equal ( min . test _ nullable _ date _ time _ offset , result . test _ nullable _ date _ time _ offset ) ; assert . equal ( min . test _ nullable _ time _ span , result . test _ nullable _ time _ span ) ; </%> <@> conditional _ fact _ skip _ issue _ cannot _ eval _ max </@> 
<%> <-> assert . equal ( max . test _ nullable _ date _ time _ offset , result . test _ nullable _ date _ time _ offset ) ; assert . equal ( max . test _ nullable _ time _ span , result . test _ nullable _ time _ span ) ; </%> <@> conditional _ fact _ skip _ issue _ cannot _ eval _ average </@> 
 <@> if ( typeof ( string ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( int ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( int ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( double ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( decimal ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( date _ time ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( date _ time _ offset ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( single ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( boolean ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( byte ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( u _ int ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( u _ int ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( int ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( u _ int ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( char ) = = underlying _ type ) </@> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>
<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <@> if ( typeof ( s _ byte ) = = underlying _ type ) </@> 
<%> <+> property . generate _ </%> <%> <-> generation . </%> <%> <-> = = property . value _ generation </%> <@> | | typeof ( uint ) = = property . property _ type | | typeof ( ulong ) = = property . property _ type | | typeof ( ushort ) = = property . property _ type | | typeof ( sbyte ) = = property . property _ type ) ) </@> 
 <@> fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> fact _ skip _ issue </@> 
<%> <+> } } fact </%> <@> fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> fact _ skip _ issue </@> <%> <-> fact _ skip _ issue </%>
<%> <+> private </%> <@> return date _ time . parse ( date , new system . globalization . culture _ info ( STR ) ) ; </@> 
<%> <*> interception _ result ? data _ reader _ disposing ( -> interception _ result data _ reader _ disposing ( </%> <@> interception _ result ? result ) ; </@> 
 <@> public interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) </@> <%> <-> ? </%>
<%> <-> ? </%> <@> public interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) </@> <%> <-> ? </%>
<%> <-> ? </%> <@> public interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) </@> <%> <-> ? </%>
<%> <-> ? </%> <@> public async task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result , </@> 
<%> <-> ? </%> <@> interception _ result ? result ) </@> 
<%> <-> ? </%> <@> interception _ result < db _ transaction > ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public virtual task < interception _ result < db _ transaction > ? > transaction _ starting _ async ( db _ connection connection , transaction _ starting _ event _ data event _ data , interception _ result < db _ transaction > ? result , </@> 
<%> <-> ? </%> <@> interception _ result ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <@> interception _ result ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <@> interception _ result ? result ) </@> 
<%> <-> ? </%> <@> interception _ result < db _ transaction > ? result ) </@> <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>
 <@> public override interception _ result ? transaction _ committing ( db _ transaction transaction , transaction _ event _ data event _ data , interception _ result ? result ) </@> <%> <-> new </%> <%> <+> . suppress </%> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <@> interception _ result < db _ transaction > ? result ) </@> 
 <@> public override interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) </@> <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>
 <@> public override interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) </@> <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>
 <@> public override interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) </@> <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>
 <@> public override interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public override task < interception _ result < db _ data _ reader > ? > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result , </@> 
 <@> public override interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public override task < interception _ result < object > ? > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result , </@> 
 <@> public override interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public override task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result , </@> 
 <@> public override interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) </@> <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>
 <@> public override interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) </@> <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>
 <@> public override interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) </@> <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>
 <@> public override interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public override task < interception _ result < db _ data _ reader > ? > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result , </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public override interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public override task < interception _ result < object > ? > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result , </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public override interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public override task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result , </@> 
 <@> public virtual interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public virtual interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public virtual interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public virtual task < interception _ result < db _ data _ reader > ? > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result , </@> <%> <-> ? </%>
<%> <-> ? </%> <@> public virtual task < interception _ result < object > ? > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result , </@> <%> <-> ? </%>
<%> <-> ? </%> <@> public virtual task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result , </@> 
<%> <-> ? </%> <@> interception _ result ? result ) </@> 
<%> <-> ? </%> <@> interception _ result ? result ) ; </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <@> interception _ result ? result ) ; </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <@> interception _ result ? result ) ; </@> 
<%> <*> public virtual interception _ result ? data _ reader _ disposing ( -> public virtual interception _ result data _ reader _ disposing ( </%> <@> interception _ result ? result ) </@> 
<%> <-> ? </%> <@> interception _ result ? result ) </@> <%> <-> ? </%>
<%> <-> ? </%> <@> interception _ result ? result ) </@> <%> <-> ? </%>
<%> <-> ? </%> <@> interception _ result ? result ) </@> 
<%> <-> ? </%> <@> interception _ result < db _ transaction > ? result ) </@> 
 <@> public override interception _ result ? connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result ) </@> <%> <+> ! </%> <%> <*> = = null -> . is _ suppressed </%> <%> <-> new </%> <%> <+> . suppress </%> <%> <-> ? </%>
 <@> public virtual interception _ result ? connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public virtual task < interception _ result ? > connection _ opening _ async ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result , </@> 
 <@> public virtual interception _ result ? connection _ closing ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public virtual task < interception _ result ? > connection _ closing _ async ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result ) </@> 
<%> <-> ? </%> <@> interception _ result < db _ transaction > ? result ) ; </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <+> var reader _ open = false ; </%> <@> using ( db _ command ) { result = db _ command . execute _ non _ query ( ) ; } </@> <%> <-> using ( db _ command ) { </%> <%> <-> } </%>
<%> <-> using ( db _ command ) { </%> <%> <-> } </%> <@> using ( db _ command ) { result = db _ command . execute _ scalar ( ) ; } </@> <%> <-> try { </%>
<%> <+> var reader _ open = false ; </%> <@> using ( db _ command ) { result = await db _ command . execute _ non _ query _ async ( cancellation _ token ) ; } </@> <%> <-> using ( db _ command ) { </%> <%> <-> } </%>
<%> <-> using ( db _ command ) { </%> <%> <-> } </%> <@> using ( db _ command ) { result = await db _ command . execute _ scalar _ async ( cancellation _ token ) ; } </@> <%> <-> try { </%>
<%> <*> where [ g ] . [ full _ name ] = [ w ] . [ owner _ full _ name ] order by [ w ] . [ id ] ) = cast ( 1 as bit ) ) STR -> where ( [ g ] . [ full _ name ] = [ w ] . [ owner _ full _ name ] ) and [ w ] . [ owner _ full _ name ] is not null </%> <%> <+> order by [ w ] . [ id ] ) = cast ( 1 as bit ) ) STR </%> <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) ) and ( coalesce ( ( </@> <%> <*> * -> [ id ] , [ w ] . [ ammunition _ type ] , [ w ] . [ is _ automatic ] , [ w ] . [ name ] , [ w ] . [ owner _ full _ name ] , [ w ] . [ synergy _ with _ id ] </%> <%> <+> ( </%> <%> <+> ) and [ w ] . [ owner _ full _ name ] is not null </%> <%> <*> order by [ t ] . [ id ] ) , cast ( 0 as bit ) ) = cast ( 1 as bit ) ) ) STR -> order by [ t ] . [ id ] ) = cast ( 1 as bit ) ) ) STR </%>
<%> <+> ( </%> <%> <+> ) and [ w ] . [ owner _ full _ name ] is not null </%> <%> <*> order by [ t ] . [ id ] ) , cast ( 0 as bit ) ) = cast ( 1 as bit ) ) ) STR -> order by [ t ] . [ id ] ) = cast ( 1 as bit ) ) ) STR </%> <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) ) and ( ( </@> <%> <*> * -> [ id ] , [ w ] . [ ammunition _ type ] , [ w ] . [ is _ automatic ] , [ w ] . [ name ] , [ w ] . [ owner _ full _ name ] , [ w ] . [ synergy _ with _ id ] </%> <%> <+> ( </%> <%> <+> ) and [ w ] . [ owner _ full _ name ] is not null </%> <%> <*> order by [ t ] . [ id ] ) = cast ( 1 as bit ) ) ) STR -> order by [ t ] . [ id ] ) = cast ( 1 as bit ) ) ) STR </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <+> ) . order _ by ( w = > w . id </%>
<%> <+> ) . order _ by ( w = > w . id </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <+> ts = > ts . where ( t = > ! ( t . gear . has _ soul _ patch ? true : t . gear . has _ soul _ patch ) ) , ts = > ts . where ( t = > ! ( maybe _ scalar < bool > ( t . gear , ( ) = > t . gear . has _ soul _ patch ) = = true ? ( bool? ) true </%> <%> <*> ts = > ts . where ( t = -> : maybe _ scalar < bool </%> <%> <-> ! </%> <%> <*> . has _ soul _ patch ? true : -> , ( ) = > </%> <%> <+> ) = = true </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ order _ by _ order _ by _ should _ ignore _ inner _ ordering </@> <%> <*> cs -> cs . where ( c = > c . customer _ id . starts _ with ( STR ) ) </%> <%> <+> . then _ by ( c = > c . city ) </%>
<%> <-> _ skip _ issue </%> <%> <*> . select ( cv = > cv . orders . where ( cc = > true ) . to _ list ( ) ) ) ; -> . order _ by ( c = > c . customer _ id ) </%> <%> <+> . select ( cv = > cv . orders . where ( cc = > true ) . to _ list ( ) ) , assert _ order : true , element _ asserter : collection _ asserter < order > ( ) , entry _ count : NUM ) ; </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> e = > e . c . customer _ id ) ; </%>
<%> <*> new relational _ connection _ dependencies ( options , -> new relational _ connection _ dependencies ( </%> <%> <-> new diagnostics _ logger < logger _ category . database . transaction > ( </%> <%> <+> options , </%> <%> <*> intercepting -> diagnostics </%> <@> new logging _ options ( ) ) , new diagnostic _ listener ( STR ) ) , new diagnostics _ logger < logger _ category . database . connection > ( new intercepting _ logger < logger _ category . database . connection > ( </@> <%> <-> ) </%>
<%> <*> new -> ( </%> <%> <-> ( </%> <%> <*> ; -> test _ logger . diagnostic _ source ; </%> <@> args [ 0 ] = activator . create _ instance ( typeof ( diagnostics _ logger < > ) . make _ generic _ type ( category ) , test _ logger , test _ diagnostics ) ; </@> 
<%> <-> internal </%> <%> <+> internal </%> <@> internal protected virtual void generate _ sequence _ presence _ check ( schema _ qualified _ name sequence _ name , bool negative ) </@> 
<%> <-> using system ; </%> <@> using system _ text ; namespace microsoft _ data _ entity </@> 
 <@> using metadata = microsoft . data . entity . metadata ; </@> <%> <*> system -> foreign </%> <%> <*> collections -> key = microsoft . data . relational . model . foreign </%> <%> <*> generic -> key </%> <%> <-> metadata . </%>
<%> <-> metadata = </%> <%> <*> . -> _ </%> <%> <*> . -> _ </%> <%> <*> . -> _ </%> <%> <*> system -> foreign </%> <%> <*> collections -> key = microsoft . data . relational . model . foreign </%> <%> <*> generic -> key </%> <@> public virtual database build ( [ not _ null ] metadata . i _ model model ) </@> 
 <@> private static void build _ table ( database database , metadata . i _ entity _ type entity _ type ) </@> <%> <-> metadata . </%>
<%> <-> metadata . </%> <@> private static void build _ column ( table table , metadata . i _ property property ) </@> <%> <-> metadata . </%>
<%> <-> metadata . </%> <@> private static void build _ primary _ key ( database database , metadata . i _ key primary _ key ) </@> <%> <-> metadata . </%>
<%> <-> metadata . </%> <@> private static void build _ foreign _ key ( database database , metadata . i _ foreign _ key foreign _ key ) </@> 
 <@> using metadata = microsoft . data . entity . metadata ; </@> <%> <-> using microsoft _ data _ relational ; </%>
 <@> using metadata = microsoft . data . entity . metadata ; </@> <%> <-> using microsoft _ data _ relational ; </%>
 <@> private static metadata . i _ model create _ model ( ) </@> <%> <+> entity . </%> <%> <-> metadata . </%> <%> <-> metadata . </%> <%> <-> metadata . </%> <%> <*> api -> metadata </%>
 <@> = > new bad _ data _ relational _ data _ reader ( base . execute _ reader ( connection , parameter _ values ) , values ) ; </@> <%> <*> private readonly relational _ data _ reader relational _ data _ reader ; private readonly bad _ data _ data _ reader data _ reader ; public bad _ data _ relational _ data _ reader ( relational _ data _ reader relational _ data _ reader , object [ ] values ) -> public bad _ data _ relational _ data _ reader ( object [ ] values ) </%> <%> <+> : base ( new bad _ data _ data _ reader ( values ) ) </%> <%> <-> relational _ data _ reader = relational _ data _ reader ; data _ reader = new bad _ data _ data _ reader ( values ) ; </%>
 <@> statement _ executor . execute _ non _ query ( connection . db _ connection , connection . db _ transaction , create _ schema _ commands ( model ) ) ; </@> <%> <-> connection . db _ </%>
<%> <-> connection . db _ </%> <@> return ( int ) statement _ executor . execute _ scalar ( connection . db _ connection , connection . db _ transaction , create _ has _ tables _ command ( ) ) ! = 0 ; </@> <%> <-> connection . db _ </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
<%> <+> conditional _ theory </%> <@> using ( var transaction = context . database . begin _ transaction ( ) ) </@> 
 <@> public virtual void propagate _ value ( internal _ entity _ entry entry , i _ property property ) </@> <%> <*> if ( ! try _ propagate _ value ( entry , property ) -> var principal _ entry = try _ propagate _ value ( entry , property ) ; </%> <%> <+> if ( principal _ entry = = null </%>
<%> <+> return principal _ entry ; </%> <@> private static bool try _ propagate _ value ( internal _ entity _ entry entry , i _ property property ) </@> 
 <@> void propagate _ value ( [ not _ null ] internal _ entity _ entry entry , [ not _ null ] i _ property property ) ; </@> <%> <*> task -> task < internal _ entity _ entry > </%>
 <@> public virtual void propagate ( internal _ entity _ entry entry ) </@> <%> <+> internal _ entity _ entry chosen _ principal = null ; </%> <%> <*> key _ propagator . propagate _ value ( entry , property ) ; -> var principal _ entry = key _ propagator . propagate _ value ( entry , property ) ; </%> <%> <+> if ( chosen _ principal = = null ) { chosen _ principal = principal _ entry ; } </%>
 <@> = > is _ db _ null ( ordinal ) ? get _ null < time _ span > ( ) : time _ span . parse ( get _ string ( ordinal ) ) ; </@> <%> <*> public abstract long get _ int ( int ordinal ) ; public abstract string get _ string ( int ordinal ) ; -> public virtual long get _ int ( int ordinal ) </%> <%> <+> = > is _ db _ null ( ordinal ) ? throw new invalid _ cast _ exception ( ) : get _ int _ core ( ordinal ) ; </%>
<%> <+> fact </%> <@> assert . equal ( NUM , result . count ( ) ) ; </@> 
<%> <-> . full _ name </%> <@> typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly . full _ name , </@> <%> <-> . full _ name </%>
<%> <-> . full _ name </%> <@> typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly . full _ name , </@> <%> <-> . full _ name </%>
<%> <-> . full _ name </%> <@> typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly . full _ name , </@> <%> <-> . full _ name </%>
<%> <-> . full _ name </%> <@> typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly . full _ name , </@> <%> <-> . full _ name </%>
<%> <-> . full _ name </%> <@> typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly . full _ name , </@> 
<%> <-> new sql _ server _ migration _ operation _ sql _ generator ( new sql _ server _ type _ mapper ( ) ) . </%> <%> <-> var sql _ generator = new sql _ server _ migration _ operation _ sql _ generator ( new sql _ server _ type _ mapper ( ) ) ; </%> <@> assert . equal ( STR , sql _ generator . generate _ data _ type ( column ) ) ; </@> <%> <-> new sql _ server _ migration _ operation _ sql _ generator ( new sql _ server _ type _ mapper ( ) ) . </%>
<%> <*> int -> void </%> <@> return assert _ results ( </@> <%> <*> int -> void </%>
<%> <*> int -> void </%> <@> return assert _ results ( </@> <%> <*> int -> void </%>
<%> <*> int -> void </%> <@> return assert _ results ( </@> <%> <*> protected int assert _ query < t _ item > ( func < i _ queryable < t _ item > , i _ queryable < object > > query , bool assert _ order = false ) -> protected void assert _ query < t _ item > ( </%> <%> <+> func < i _ queryable < t _ item > , i _ queryable < object > > query , </%>
<%> <*> protected int assert _ query < t _ item > ( func < i _ queryable < t _ item > , i _ queryable < object > > query , bool assert _ order = false ) -> protected void assert _ query < t _ item > ( </%> <%> <+> func < i _ queryable < t _ item > , i _ queryable < object > > query , bool assert _ order = false , int state _ entry _ count = 0 ) </%> <@> return assert _ results ( </@> <%> <+> assert . equal ( state _ entry _ count , context . change _ tracker . entries ( ) . count ( ) ) ; </%> <%> <*> int -> void </%>
<%> <*> int -> void </%> <@> return assert _ results ( </@> <%> <*> int -> void </%>
<%> <*> int -> void </%> <@> return assert _ results ( </@> <%> <*> int -> void </%>
<%> <*> int -> void </%> <@> return assert _ results ( </@> <%> <*> int -> void </%>
<%> <*> int -> void </%> <@> return assert _ results ( </@> <%> <*> int -> void </%>
<%> <*> public virtual void ignore ( [ not _ null ] string name , configuration _ source configuration _ source = configuration _ source . explicit , bool run _ conventions = true ) -> public virtual void ignore ( [ not _ null ] string name , configuration _ source configuration _ source = configuration _ source . explicit ) </%> <%> <*> configuration _ source = configuration _ source . max ( existing _ ignored _ configuration _ source ) ; -> ignored _ members [ name ] = configuration _ source . max ( existing _ ignored _ configuration _ source ) ; </%> <%> <+> return ; </%> <@> if ( run _ conventions ) { on _ type _ member _ ignored ( name ) ; } </@> 
<%> <-> , run _ conventions </%> <%> <-> , bool run _ conventions </%> <@> if ( run _ conventions ) { return convention _ dispatcher . on _ entity _ type _ added ( entity _ type . builder ) ? . metadata ; } return entity _ type ; </@> 
<%> <*> configuration _ source configuration _ source , bool run _ conventions ) -> configuration _ source configuration _ source ) </%> <%> <*> run _ conventions = false ; -> ignored _ type _ names [ name ] = configuration _ source ; </%> <%> <+> return ; </%> <@> if ( run _ conventions ) { convention _ dispatcher . on _ entity _ type _ ignored ( builder , name , type ) ; } </@> 
 <@> configuration _ source configuration _ source = configuration _ source . explicit , bool run _ conventions = true ) = > navigation ( property _ identity . create ( name ) , configuration _ source , run _ conventions , points _ to _ principal : true ) ; </@> <%> <-> configuration _ source configuration _ source = configuration _ source . explicit , </%> <%> <*> bool run -> configuration _ source configuration </%> <%> <*> conventions -> source </%> <%> <*> true -> configuration _ source . explicit </%> <%> <-> , run _ conventions </%>
<%> <-> configuration _ source configuration _ source = configuration _ source . explicit , </%> <%> <*> bool run -> configuration _ source configuration </%> <%> <*> conventions -> source </%> <%> <*> true -> configuration _ source . explicit </%> <%> <-> , run _ conventions </%> <@> configuration _ source configuration _ source = configuration _ source . explicit , bool run _ conventions = true ) = > navigation ( property _ identity . create ( name ) , configuration _ source , run _ conventions , points _ to _ principal : false ) ; </@> <%> <-> configuration _ source configuration _ source = configuration _ source . explicit , </%> <%> <*> bool run -> configuration _ source configuration </%> <%> <*> conventions -> source </%> <%> <*> true -> configuration _ source . explicit </%> <%> <-> , run _ conventions </%>
 <@> if ( run _ conventions ) { model . convention _ dispatcher . on _ index _ removed ( builder , index ) ; } </@> <%> <*> configuration _ source ? type _ configuration _ source = configuration _ source . explicit , bool run _ conventions = true ) -> configuration _ source ? type _ configuration _ source = configuration _ source . explicit ) </%>
<%> <-> = > dependent _ entity _ type ( dependent _ entity _ type , configuration _ source , run _ conventions : true ) ; private internal _ relationship _ builder dependent _ entity _ type ( entity _ type dependent _ entity _ type , configuration _ source configuration _ source , bool run _ conventions ) </%> <@> if ( run _ conventions ) { builder = model _ builder . metadata . convention _ dispatcher . on _ principal _ end _ set ( builder ) ; } </@> <%> <-> , run _ conventions </%>
<%> <-> = > principal _ entity _ type ( principal _ entity _ type , configuration _ source , run _ conventions : true ) ; private internal _ relationship _ builder principal _ entity _ type ( entity _ type principal _ entity _ type , configuration _ source configuration _ source , bool run _ conventions ) </%> <@> if ( run _ conventions ) { builder = model _ builder . metadata . convention _ dispatcher . on _ principal _ end _ set ( builder ) ; } </@> <%> <-> , run _ conventions </%>
 <@> if ( run _ conventions ) { builder = model _ builder . metadata . convention _ dispatcher . on _ principal _ end _ set ( builder ) ; } </@> <%> <*> dependent _ properties : reset _ dependent ? new property [ 0 ] : null , run _ conventions : run _ conventions ) ; -> dependent _ properties : reset _ dependent ? new property [ 0 ] : null ) ; </%>
 <@> property . builder ? . attach ( this , property . get _ configuration _ source ( ) ) ; </@> <%> <-> , detached _ key _ tuple . item </%>
<%> <*> tuple < -> ( </%> <%> <*> , configuration _ source > -> ) </%> <%> <+> . metadata . get _ configuration _ source ( ) </%> <@> list < tuple < internal _ index _ builder , configuration _ source > > detached _ indexes = null ; </@> <%> <-> < tuple </%> <%> <-> , configuration _ source > </%> <%> <*> item -> metadata . get _ configuration _ source ( ) </%>
<%> <+> . metadata . get _ configuration _ source ( ) </%> <%> <-> < tuple </%> <%> <-> , configuration _ source > </%> <@> detached _ indexes = new list < tuple < internal _ index _ builder , configuration _ source > > ( ) ; </@> <%> <*> item -> metadata . get _ configuration _ source ( ) </%> <%> <-> list < tuple < string , configuration _ source > > ignored _ members = null ; foreach ( var ignored _ member in entity _ type . get _ ignored _ members ( ) . to _ list ( ) ) </%>
 <@> private static tuple < internal _ index _ builder , configuration _ source > detach _ index ( index index _ to _ detach ) </@> <%> <-> tuple . create ( </%> <%> <*> , removed _ configuration _ source . value ) ; -> ; </%>
<%> <-> tuple < </%> <%> <-> , configuration _ source > </%> <@> return tuple . create ( index _ builder , removed _ configuration _ source . value ) ; </@> 
 <@> internal class tracking _ grouping < t _ key , t _ out , t _ in > : i _ async _ grouping < t _ key , t _ out > , i _ grouping < t _ key , t _ out > </@> <%> <-> _ async </%> <%> <-> _ async </%>
<%> <-> _ async </%> <%> <*> return grouping . select -> foreach </%> <%> <+> var </%> <%> <*> = > -> in grouping ) </%> <%> <+> { for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) </%> <%> <*> for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) -> var entity = entity _ accessors [ i ] ( result as t _ in ) ; </%> <%> <+> if ( entity ! = null ) </%> <@> var entity = entity _ accessors [ i ] ( result as t _ in ) ; if ( entity ! = null ) { query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ; } </@> <%> <*> return result ; } ) ; -> } </%> <%> <+> yield return result ; } </%> <%> <-> _ enumerable ( ) . to </%>
<%> <-> c = > </%> <%> <-> ( c </%> <%> <-> ) </%> <@> builder . has _ key ( property _ names . to _ array ( ) ) . has _ name ( index . name ) ; </@> 
<%> <-> e </%> <%> <*> ( -> [ table ] as [ t ] on [ ] . [ id ] = [ t ] . [ id ] </%> <%> <-> select [ a ] . * from [ table ] as [ a ] where [ a ] . [ name ] is not null ) as [ t ] on [ e ] . [ id ] = [ t ] . [ id ] </%> <@> conditional _ fact _ skip _ issue </@> 
<%> <+> ( </%> <%> <*> not in ( -> < > </%> <%> <*> , -> ) and ( [ c ] . [ customer _ id ] < > </%> <%> <-> t </%> <@> ) as [ ] on [ t ] . [ customer _ id ] = [ ] . [ customer _ id ] where [ ] . [ order _ id ] > NUM group by [ ] . [ customer _ id ] STR </@> 
<%> <+> } </%> <%> <-> public virtual task group _ by _ property _ select _ average ( bool is _ async ) { return assert _ query _ scalar < order > ( is _ async , os = > os . group _ by ( o = > o . customer _ id ) . select ( g = > g . average ( o = > o . order _ id ) ) ) ; } conditional _ theory _ skip _ issue member _ data _ nameof _ is _ async _ data </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <*> conditional _ theory _ skip _ issue _ cannot _ eval _ group _ by . customer _ id , [ o ] . order _ id ) ' could not be translated and will be evaluated locally . ' STR -> conditional _ theory </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ group _ by . customer _ id , [ o ] . order _ id ) ' could not be translated and will be evaluated locally . ' STR </@> <%> <-> _ skip _ issue </%>
<%> <*> conditional _ theory _ skip _ issue _ cannot _ eval _ group _ by . customer _ id , [ o ] . order _ id ) ' could not be translated and will be evaluated locally . ' STR -> conditional _ theory </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> = > visit ( apply _ explicit _ cast _ to _ bool _ in _ projection _ optimization ( apply _ optimizations ( projection , search _ condition : false ) ) ) ;     protected virtual expression apply _ explicit _ cast _ to _ bool _ in _ projection _ optimization ( expression expression ) = > expression ; </@> <%> <-> _ boolean </%> <%> <*> constant -> int </%> <%> <*> boolean -> int </%> <%> <-> _ boolean </%> <%> <*> constant -> int </%> <%> <*> boolean -> int </%> <%> <*> ( binary _ expression . node -> left </%> <%> <*> type = -> int ! </%> <%> <*> expression _ type . equal -> null </%> <%> <*> left -> right </%> <%> <*> boolean _ constant -> int ! </%> <%> <*> = true -> null </%> <%> <*> right -> ( ( binary </%> <%> <*> boolean -> expression . node </%> <%> <*> constant -> type </%> <%> <*> true ) -> expression _ type . equal </%>
 <@> when [ w ] . [ is _ automatic ] = 0 then cast ( 1 as bit ) else cast ( 0 as bit ) </@> <%> <+> cast ( </%> <%> <+> as bit ) </%>
 <@> ) , 0 ) = 1 then cast ( 1 as bit ) else cast ( 0 as bit ) end = 1 then cast ( 1 as bit ) else cast ( 0 as bit ) end = 1 then cast ( 1 as bit ) else cast ( 0 as bit ) </@> <%> <+> cast ( </%> <%> <+> as bit </%> <%> <+> ) </%>
<%> <+> is _ </%> <%> <+> is _ </%> <@> private string debugger _ display = > this . get _ primary _ key _ value ( ) + STR + entity _ state ; </@> 
<%> <+> , customer _ key , customer _ type </%> <@> assert . same ( fk , order _ type . remove _ foreign _ key ( fk . properties ) ) ; assert . null ( order _ type . remove _ foreign _ key ( fk . properties ) ) ; </@> <%> <+> , customer _ key , customer _ type </%>
 <@> assert . throws < invalid _ operation _ exception > ( ( ) = > order _ type . remove _ foreign _ key ( fk . properties ) ) . message ) ; </@> <%> <-> . properties </%>
<%> <-> var model = foreign _ key . declaring _ entity _ type . model ; </%> <@> var is _ principal _ key _ referenced = principal _ pk ! = null & & model . find _ referencing _ foreign _ keys ( principal _ pk ) . count ( ) > principal _ pk _ reference _ threshold ; </@> <%> <*> model -> dependent _ pk </%> <%> <-> dependent _ pk </%>
<%> <-> var model = foreign _ key . declaring _ entity _ type . model ; </%> <%> <*> model -> principal _ pk </%> <%> <-> principal _ pk </%> <@> var is _ dependent _ primary _ key _ referenced = dependent _ pk ! = null & & model . find _ referencing _ foreign _ keys ( dependent _ pk ) . any ( ) ; </@> 
<%> <*> private class completed _ async _ enumerable < t > : i _ async _ enumerable < t > where t : class -> private sealed class completed _ async _ enumerable : i _ async _ enumerable < object [ ] > </%> <%> <*> t -> object [ ] </%> <%> <*> t -> object [ ] </%> <%> <*> t -> object [ ] </%> <@> return new completed _ async _ enumerator < t > ( enumerable . get _ enumerator ( ) ) ; </@> <%> <*> private class completed _ async _ enumerator < t > : i _ async _ enumerator < t > where t : class -> private sealed class completed _ async _ enumerator : i _ async _ enumerator < object [ ] > </%>
 <@> public virtual book _ detail order _ detail { get ; set ; } </@> <%> <*> order -> book </%>
<%> <*> order -> book </%> <@> public virtual useless _ book _ details useless _ order _ details { get ; set ; } </@> 
 <@> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( join _ clause ) . visit _ expression ( join _ clause . outer _ key _ selector ) ) ; </@> <%> <*> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( join _ clause ) . visit _ expression ( join _ clause . inner _ sequence ) ) ; -> = replace _ clause _ references ( join _ clause . inner _ sequence , join _ clause ) ; </%>
<%> <*> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( join _ clause ) . visit _ expression ( join _ clause . outer _ key _ selector ) ) ; -> = replace _ clause _ references ( join _ clause . outer _ key _ selector , join _ clause ) ; </%> <@> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( join _ clause ) . visit _ expression ( join _ clause . inner _ sequence ) ) ; </@> 
 <@> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( group _ join _ clause ) . visit _ expression ( group _ join _ clause . join _ clause . outer _ key _ selector ) ) ; </@> <%> <*> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( group _ join _ clause . join _ clause ) . visit _ expression ( group _ join _ clause . join _ clause . inner _ sequence ) ) ; -> = replace _ clause _ references ( group _ join _ clause . join _ clause . inner _ sequence , group _ join _ clause . join _ clause ) ; </%>
<%> <*> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( group _ join _ clause ) . visit _ expression ( group _ join _ clause . join _ clause . outer _ key _ selector ) ) ; -> = replace _ clause _ references ( group _ join _ clause . join _ clause . outer _ key _ selector , group _ join _ clause ) ; </%> <@> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( group _ join _ clause . join _ clause ) . visit _ expression ( group _ join _ clause . join _ clause . inner _ sequence ) ) ; </@> 
<%> <*> private value _ buffer values ; private readonly bool partial _ snapshot ; public original _ values ( value _ buffer values ) { values = values ; partial _ snapshot = false ; } -> private readonly i _ snapshot values ; </%> <%> <*> var entity _ type = entry . entity _ type ; var values = new object [ entity _ type . original _ value _ count ( ) ] ; foreach ( var property in entity _ type . get _ properties ( ) ) { var index = property . get _ original _ value _ index ( ) ; if ( index > = 0 ) { values [ index ] = entry [ property ] ; } } values = new value _ buffer ( values ) ; partial _ snapshot = true ; -> values = entry . entity _ type . get _ original _ values _ factory ( ) ( entry ) ; </%> <@> if ( values . is _ empty ) </@> <%> <-> if ( partial _ snapshot ) { </%> <%> <-> } return values [ property . get _ index ( ) ] ; </%>
<%> <-> if ( partial _ snapshot ) { </%> <%> <-> } return values [ property . get _ index ( ) ] ; </%> <@> debug . assert ( ! values . is _ empty ) ; var index = partial _ snapshot ? property . get _ original _ value _ index ( ) : property . get _ index ( ) ; </@> <%> <-> values . </%>
<%> <*> debug . assert ( ! values . is _ empty ) ; var index = partial _ snapshot ? property . get _ original _ value _ index ( ) : property . get _ index ( ) ; -> debug . assert ( ! is _ empty ) ; </%> <%> <+> var index = property . get _ original _ value _ index ( ) ; </%> <@> if ( values . is _ empty ) </@> <%> <*> if ( partial -> foreach ( var property in entry . entity _ type . get </%> <%> <*> snapshot -> properties ( </%> <%> <+> ) </%> <%> <*> foreach ( var property in entry . entity _ type . get _ properties ( ) ) -> var index = property . get _ original _ value _ index ( ) ; </%> <%> <+> if ( index > = 0 ) </%> <%> <-> var index = property . get _ original _ value _ index ( ) ; </%>
<%> <+> if ( index > = 0 ) </%> <%> <-> var index = property . get _ original _ value _ index ( ) ; if ( index > = 0 ) { </%> <%> <-> } } } else { foreach ( var property in entry . entity _ type . get _ properties ( ) ) { entry [ property ] = values [ property . get _ index ( ) ] ; </%> <@> if ( values . is _ empty ) </@> <%> <-> if ( partial _ snapshot ) { </%>
<%> <-> , value _ buffer ? values </%> <@> if ( values ! = null ) { entry . ensure _ original _ values ( values . value ) ; } else { entry . ensure _ original _ values ( ) ; } </@> 
<%> <*> public relational _ query _ compilation _ context ( [ not _ null ] i _ model model ) : base ( check . not _ null ( model , STR ) ) -> private readonly i _ enumerable _ method _ provider enumerable _ method _ provider ; </%> <%> <+> private readonly i _ sql _ generating _ expression _ tree _ visitor _ factory sql _ generating _ expression _ tree _ visitor ; public relational _ query _ compilation _ context ( not _ null i _ model model , not _ null i _ linq _ operator _ provider linq _ operator _ provider , not _ null i _ result _ operator _ handler result _ operator _ handler , not _ null i _ enumerable _ method _ provider enumerable _ method _ provider ) : base ( check . not _ null ( model , STR ) , check . not _ null ( linq _ operator _ provider , STR ) , check . not _ null ( result _ operator _ handler , STR ) ) </%> <%> <+> check . not _ null ( enumerable _ method _ provider , STR ) ; enumerable _ method _ provider = enumerable _ method _ provider ; sql _ generating _ expression _ tree _ visitor = new sql _ generating _ expression _ tree _ visitor _ factory ( ) ; </%> <@> return new relational _ query _ model _ visitor ( this , new enumerable _ method _ provider ( ) ) ; </@> <%> <*> override -> virtual </%> <%> <*> result -> enumerable </%> <%> <*> operator -> method </%> <%> <*> handler result -> provider enumerable </%> <%> <*> operator -> method </%> <%> <*> handler -> provider </%> <%> <*> get { return new relational _ result _ operator _ handler ( base . result _ operator _ handler ) ; } -> get { return enumerable _ method _ provider ; } </%> <%> <+> } public virtual i _ sql _ generating _ expression _ tree _ visitor _ factory sql _ generating _ expression _ tree _ visitor { get { return sql _ generating _ expression _ tree _ visitor ; } </%>
<%> <-> using microsoft _ framework _ logging ; </%> <@> public class db _ set < t _ entity > : db _ set , i _ ordered _ queryable < t _ entity > , i _ async _ enumerable _ accessor < t _ entity > </@> <%> <*> private readonly entity _ queryable < t _ entity > entity _ queryable ; -> private readonly db _ context context ; </%> <%> <+> private readonly lazy _ ref < entity _ queryable < t _ entity > > entity _ queryable ; </%> <%> <-> : base ( check . not _ null ( context , STR ) ) </%>
 <@> conditional _ theory _ skip _ issue _ cannot _ eval _ orderby _ convert _ p _ nullable _ asc </@> <%> <+> assert . equal ( core _ strings . translation _ failed ( STR ) , remove _ new _ lines ( ( await assert . throws _ async < invalid _ operation _ exception > ( </%> <%> <*> await -> ( ) = > </%>
 <@> conditional _ theory _ skip _ issue _ cannot _ eval _ where _ ids _ contains _ new _ tuple _ item . order _ id , item = [ o ] . product _ id ) ) } ' STR </@> <%> <+> assert . equal ( </%> <%> <*> await assert -> core </%> <%> <*> query < order -> strings . translation </%> <%> <*> detail > -> failed </%> <%> <*> is _ async -> STR ) </%> <%> <*> od = > od . where ( o = > ids . contains ( new tuple < int , int > ( o . order -> remove </%> <%> <*> id , o . product -> new </%> <%> <*> id ) ) ) , entry _ count : 1 ) ; -> lines ( </%> <%> <-> ids = new [ ] { tuple . create </%> <%> <*> 1 , 2 ) } ; await -> await assert . throws _ async < invalid _ operation _ exception > ( ( ) = > </%>
 <@> conditional _ fact _ skip _ issue _ cannot _ eval _ contains _ p </@> <%> <*> var query -> assert . equal ( </%> <%> <+> STR , </%> <%> <*> = context -> assert </%> <%> <*> order -> throws < invalid </%> <%> <*> details . where -> operation _ exception > </%> <%> <-> o = > o . product _ id = = NUM ) . contains </%> <%> <+> ) = > </%> <%> <*> first -> where </%> <%> <-> o . order _ id = = NUM & & </%> <%> <-> ) ; </%> <%> <*> assert -> . contains ( context . order _ details . first ( o = > o . order _ id = = NUM & & o . product _ id = = NUM ) ) ) </%> <%> <*> true ( query -> message </%>
<%> <-> public virtual void last _ without _ order _ by _ issues _ client _ eval _ warning ( ) { using ( var context = create _ context ( ) ) { assert . equal ( core _ strings . warning _ as _ error _ template ( relational _ event _ id . query _ client _ evaluation _ warning , relational _ resources . log _ client _ eval _ warning ( new test _ logger < test _ relational _ logging _ definitions > ( ) ) . generate _ message ( STR ) , STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . last ( ) ) . message ) ; } } conditional _ fact public virtual void last _ with _ order _ by _ issues _ client _ eval _ warning _ in _ subquery ( ) { using ( var context = create _ context ( ) ) { assert . equal ( core _ strings . warning _ as _ error _ template ( relational _ event _ id . query _ client _ evaluation _ warning , relational _ resources . log _ client _ eval _ warning ( new test _ logger < test _ relational _ logging _ definitions > ( ) ) . generate _ message ( STR ) , STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . where ( c = > c . customer _ id = = STR & & c . orders . order _ by ( o = > o . order _ id ) . last ( ) . order _ id > NUM ) . to _ list ( ) ) . message ) ; } } conditional _ fact public virtual void last _ or _ default _ without _ order _ by _ issues _ client _ eval _ warning ( ) { using ( var context = create _ context ( ) ) { assert . equal ( core _ strings . warning _ as _ error _ template ( relational _ event _ id . query _ client _ evaluation _ warning , relational _ resources . log _ client _ eval _ warning ( new test _ logger < test _ relational _ logging _ definitions > ( ) ) . generate _ message ( STR ) , STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . last _ or _ default ( ) ) . message ) ; } } conditional _ fact _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>
 <@> conditional _ fact _ skip _ issue _ cannot _ eval _ where . is _ london ' STR </@> <%> <*> var customers -> assert . equal ( core _ strings . translation _ failed ( STR ) , </%> <%> <+> ( await assert . throws _ async < invalid _ operation _ exception > ( ( ) </%> <%> <*> await -> > </%>
<%> <-> _ skip _ issue _ cannot _ eval _ first </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ first </@> 
 <@> conditional _ theory _ skip _ issue _ cannot _ eval _ first </@> <%> <-> _ skip _ issue _ cannot _ eval _ first </%>
<%> <-> _ skip _ issue _ cannot _ eval _ first </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ first </@> 
 <@> conditional _ fact _ skip _ issue _ cannot _ eval _ where _ from _ order _ in _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ northwind _ order ) where ? = ( property ( [ c ] , \ STR ) ] </@> <%> <*> var customers -> assert . equal ( core _ strings . translation _ failed ( STR ) , remove _ new _ lines ( </%> <%> <+> assert . throws < invalid _ operation _ exception > ( ( ) </%> <%> <+> > </%>
<%> <+> ( </%> <%> <+> ) </%> <@> conditional _ fact _ skip _ issue </@> <%> <*> core _ strings . warning _ as _ error _ template ( relational _ event _ id . query _ client _ evaluation _ warning , relational _ resources . log _ client _ eval _ warning ( new test _ logger < test _ relational _ logging _ definitions > ( ) ) . generate _ message ( STR ) , STR ) , -> core _ strings . translation _ failed ( STR ) , </%>
 <@> conditional _ fact _ skip _ issue _ cannot _ eval _ where _ client _ method ) ' STR </@> <%> <*> assert . equal ( NUM , context . products . to _ list ( ) . count ) ; -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > context . products . to _ list ( ) ) . message ) ; </%>
 <@> conditional _ fact _ skip _ issue _ cannot _ eval _ where _ client _ method ) ' STR </@> <%> <*> var results = context . products . include ( p = > p . order _ details ) . to _ list ( ) ; assert . equal ( NUM , results . count ) ; assert . true ( results . all ( p = > ! p . order _ details . any ( ) | | p . order _ details . all ( od = > od . quantity > NUM ) ) ) ; -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , </%>
 <@> conditional _ theory _ skip _ issue _ cannot _ eval _ where . is _ london ' STR </@> <%> <*> var customers -> assert . equal ( core _ strings . translation _ failed ( STR ) , </%> <%> <+> assert . throws < invalid _ operation _ exception > ( ( ) </%> <%> <+> > </%>
 <@> conditional _ theory _ skip _ issue _ cannot _ eval _ first </@> <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>
<%> <-> _ skip _ issue _ cannot _ eval _ first </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default </@> 
<%> <+> ) ) . message </%> <%> <-> _ skip _ issue _ cannot _ eval _ concat _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model _ gear ) } ) ' STR </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ concat _ from _ gear _ in _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model _ gear ) select [ ] . full _ name } ) ' STR </@> <%> <-> _ skip _ issue _ cannot _ eval _ concat _ from _ gear _ in _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model _ gear ) select new < > f _ anonymous _ type ` 2 ( gear = [ ] , name = [ ] . full _ name ) } ) ' STR </%>
<%> <-> _ skip _ issue _ cannot _ eval _ concat _ from _ gear _ in _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model _ gear ) select [ ] . full _ name } ) ' STR </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ concat _ from _ gear _ in _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model _ gear ) select new < > f _ anonymous _ type ` 2 ( gear = [ ] , name = [ ] . full _ name ) } ) ' STR </@> 
 <@> conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default </@> <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>
<%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default </@> <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>
<%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default </@> <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>
<%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default </@> <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>
<%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default </@> <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>
<%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> var query = context . parents . include ( p = > p . children ) . order _ by ( p = > ( ( i _ entity ) p ) . id ) . to _ list ( ) ; assert _ sql ( @ STR from [ parents ] as [ p ] </%>
 <@> conditional _ fact _ skip _ issue _ cannot _ eval _ where . order _ id > value ( system . random ) . next ( ) ) ' STR </@> <%> <+> assert . equal ( core _ strings . translation _ failed ( STR ) , remove _ new _ lines ( assert . throws < invalid _ operation _ exception > ( </%> <%> <*> var query -> ( ) </%> <%> <+> > </%>
 <@> conditional _ fact _ skip _ issue _ cannot _ eval _ where . customer _ id = = args [ 0 ] ) ' STR </@> <%> <*> assert . equal -> assert . equal ( STR , assert . throws < invalid _ operation _ exception > ( </%> <%> <*> STR , -> ) = > </%> <%> <+> ) . message </%>
 <@> conditional _ fact _ skip _ issue _ cannot _ eval _ where . customer _ id = = args [ 0 ] ) ' STR </@> <%> <*> assert . equal -> assert . equal ( STR , ( await assert . throws _ async < invalid _ operation _ exception > ( </%> <%> <*> STR , ( await -> ) = > </%> <%> <-> . first ( </%> <%> <*> customer _ id -> message </%>
<%> <*> not _ null expression materialization _ context _ expression , can _ be _ null int [ ] index _ map ) -> not _ null expression materialization _ context _ expression ) </%> <%> <-> index _ map = index _ map ; </%> <@> public int get _ value _ buffer _ index ( [ not _ null ] i _ property _ base property ) = > index _ map ? [ property . get _ index ( ) ] ? ? property . get _ index ( ) ; </@> 
<%> <+> cast ( </%> <%> <+> ) as int </%> <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ rank ] | 1 ) > 0 ) STR </@> <%> <*> then cast ( 1 as bit ) -> then cast ( 1 as bit ) </%> <%> <*> end as [ bitwise _ true ] -> end </%> <%> <+> then cast ( 1 as bit ) </%>
<%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ rank ] & 1 ) = 1 ) STR </@> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <%> <-> assert _ sql ( @ STR from [ gears ] as [ g ] </%>
<%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( 1 & [ g ] . [ rank ] ) = [ g ] . [ rank ] ) STR </@> <%> <-> assert _ sql ( @ STR from [ gears ] as [ g ] where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ rank ] & coalesce ( ( select top ( 1 ) [ x ] . [ rank ] from [ gears ] as [ x ] </%>
<%> <*> * -> [ nickname ] , [ g ] . [ squad _ id ] , [ g ] . [ assigned _ city _ name ] , [ g ] . [ city _ or _ birth _ name ] , [ g ] . [ discriminator ] , [ g ] . [ full _ name ] , [ g ] . [ has _ soul _ patch ] , [ g ] . [ leader _ nickname ] , [ g ] . [ leader _ squad _ id ] , [ g ] . [ rank ] </%> <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) </@> <%> <+> ( </%> <%> <*> STR -> ) and [ s ] . [ name ] is not null STR </%>
 <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) ) </@> <%> <+> } public override void order _ by _ then _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) { base . order _ by _ then _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) ; } </%>
 <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ full _ name ] < > n ' dom ' ) and ( </@> <%> <-> where ( [ g ] . [ full _ name ] = [ w ] . [ owner _ full _ name ] ) and ( [ w ] . [ is _ automatic ] = cast ( 1 as bit ) ) </%> <%> <*> order by -> where ( ( [ g ] . [ full _ name ] = [ w ] . [ owner _ full _ name ] ) and [ w ] . [ owner _ full _ name ] is not null ) and ( </%> <%> <*> id -> is _ automatic </%> <%> <+> = cast ( 1 as bit ) ) order by [ w ] . [ id ] </%> <%> <*> bool is _ async ) -> bool is _ async ) </%>
<%> <-> i _ model model </%> <@> create _ schema _ commands ( check . not _ null ( model , nameof ( model ) ) ) ) ; public override async task create _ tables _ async ( i _ model model , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </@> <%> <-> check . not _ null ( model , nameof ( model ) ) </%>
<%> <-> i _ model model </%> <%> <-> check . not _ null ( model , nameof ( model ) ) </%> <%> <-> i _ model model , </%> <@> create _ schema _ commands ( check . not _ null ( model , nameof ( model ) ) ) , </@> <%> <-> i _ model model </%>
 <@> if ( ! property _ builders . remove ( property , configuration _ source , can _ override _ same _ source : false ) ) </@> <%> <*> _ -> . </%> <%> <-> foreach ( var index in metadata . indexes . where ( i = > i . properties . contains ( property ) ) . to _ list ( ) ) { var removed = remove _ index ( index , configuration _ source ) ; </%>
 <@> b . key ( new [ ] { customer . id _ property . name } ) ; </@> <%> <+> model _ builder . ignore < customer _ details > ( ) ; </%>
 <@> if ( left _ expressions ! = null & & ( right _ constant _ expression ! = null & & right _ constant _ expression . value = = null ) ) </@> <%> <+> ( </%> <%> <+> ) </%> <%> <+> ) </%> <%> <+> ( </%>
<%> <+> ( </%> <%> <+> ) </%> <%> <+> ) </%> <%> <+> ( </%> <@> if ( right _ expressions ! = null & & ( left _ constant _ expression ! = null & & left _ constant _ expression . value = = null ) ) </@> <%> <+> ( </%> <%> <+> ) </%> <%> <+> ( </%> <%> <+> ) </%> <%> <+> ( </%> <%> <+> ) </%>
 <@> if ( query _ source _ reference _ expression = = null | | ( in _ projection | | ! query _ model _ visitor . query _ compilation _ context . query _ source _ requires _ materialization ( query _ source _ reference _ expression . referenced _ query _ source ) ) ) </@> <%> <+> ( </%> <%> <+> ) </%>
<%> <+> using microsoft _ entity _ framework _ core _ change _ tracking _ internal ; </%> <@> private readonly dictionary < type , func < dynamic , object > > entity _ sorters ; private readonly dictionary < type , action < dynamic , dynamic > > entity _ asserters ; </@> <%> <*> expected -> set </%> <%> <*> data -> source </%> <%> <-> , func < dynamic </%> <%> <-> > </%> <%> <*> action < dynamic , dynamic > -> object </%>
<%> <*> extractor . set < t -> source </%> <%> <*> item > -> creator </%> <@> var expected = expected _ query ( expected _ data . set < t _ item > ( ) ) . to _ array ( ) ; </@> <%> <+> public virtual task assert _ query _ scalar < t _ item > ( func < i _ queryable < t _ item > , i _ queryable < int > > query , </%>
<%> <-> set _ extractor . set < t _ item > ( context ) ) ; </%> <%> <+> ordering _ settings _ verifier ( assert _ order , query . expression . type ) ; </%> <@> var expected = expected _ query ( expected _ data . set < t _ item > ( ) , expected _ data . set < t _ item > ( ) ) . to _ array ( ) ; </@> <%> <-> public virtual task assert _ query _ scalar < t _ item , t _ item , t _ item > ( func < i _ queryable < t _ item > , i _ queryable < t _ item > , i _ queryable < t _ item > , i _ queryable < int > > query , </%>
 <@> private readonly dictionary < type , func < dynamic , object > > entity _ sorters ; private readonly dictionary < type , action < dynamic , dynamic > > entity _ asserters ; </@> <%> <-> , func < dynamic </%> <%> <-> > </%> <%> <*> action < dynamic , dynamic > -> object </%> <%> <-> , func < dynamic </%> <%> <-> > </%> <%> <*> action < dynamic , dynamic > -> object </%>
<%> <-> , func < dynamic </%> <%> <-> > </%> <%> <*> action < dynamic , dynamic > -> object </%> <%> <-> , func < dynamic </%> <%> <-> > </%> <%> <*> action < dynamic , dynamic > -> object </%> <@> entity _ sorters = entity _ sorters ? ? new dictionary < type , func < dynamic , object > > ( ) ; entity _ asserters = entity _ asserters ? ? new dictionary < type , action < dynamic , dynamic > > ( ) ; </@> 
<%> <+> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> assert . equal ( expected _ message ( default _ options ) , actual _ message ( create _ options _ builder ( ) ) ) ; </@> <%> <+> s = > </%> <%> <+> s </%>
 <@> benchmark _ iterations </@> <%> <*> var customers = context . customers . to _ list ( ) ; assert . equal ( NUM , customers . count ) ; foreach ( var customer in customers ) -> var orders = new order [ NUM ] ; </%> <%> <+> for ( var i = 0 ; i < orders . length ; i + + ) </%>
<%> <+> { foreach ( var customer in customers ) </%> <%> <-> assert . same ( customer , customer . orders . single ( ) . customer ) ; </%> <%> <+> assert . all ( customers , c = > assert . equal ( 1 , c . orders . count ) ) ; </%> <@> benchmark _ iterations </@> 
<%> <-> private customer [ ] get _ all _ customers _ from _ database ( ) { using ( var context = fixture . create _ context ( ) ) { return context . customers . to _ array ( ) ; } } </%> <@> : base ( STR , 0 , NUM , 0 , 0 ) </@> 
<%> <-> private customer [ ] get _ all _ customers _ from _ database ( ) { using ( var context = fixture . create _ context ( ) ) { return context . customers . to _ array ( ) ; } } </%> <@> : base ( STR , 0 , NUM , 0 , 0 ) </@> 
 <@> benchmark _ iterations </@> <%> <*> var customers = context . customers . to _ list ( ) ; assert . equal ( NUM , customers . count ) ; foreach ( var customer in customers ) -> var orders = new order [ NUM ] ; </%> <%> <+> for ( var i = 0 ; i < orders . length ; i + + ) </%>
<%> <+> { foreach ( var customer in customers ) </%> <%> <-> assert . same ( customer , customer . orders . single ( ) . customer ) ; </%> <%> <+> assert . all ( customers , c = > assert . equal ( 1 , c . orders . count ) ) ; </%> <@> benchmark _ iterations </@> 
<%> <-> # nullable enable </%> <@> public virtual t _ entity ? find ( [ can _ be _ null ] params object [ ] ? key _ values ) = > throw new not _ implemented _ exception ( ) ; </@> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> # nullable enable </%> <%> <-> ? </%> <%> <-> ? </%> <@> public virtual task < t _ entity ? > find _ async ( [ can _ be _ null ] params object [ ] ? key _ values ) = > throw new not _ implemented _ exception ( ) ; </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> # nullable enable </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <@> public virtual task < t _ entity ? > find _ async ( [ can _ be _ null ] object [ ] ? key _ values , cancellation _ token cancellation _ token ) </@> 
 <@> public virtual value _ converter ? converter = > parameters . converter ; </@> <%> <-> ? </%>
 <@> public static t _ related ? load < t _ related > ( can _ be _ null this i _ lazy _ loader ? loader , </@> <%> <-> ? </%>
 <@> public virtual t _ entity ? find ( object [ ] ? key _ values ) </@> <%> <*> object? -> object </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <%> <*> object? -> object </%> <%> <-> ? </%> <@> public virtual task < t _ entity ? > find _ async ( object [ ] ? key _ values , cancellation _ token cancellation _ token = default ) </@> <%> <-> ? </%> <%> <-> # nullable disable </%>
<%> <-> ? </%> <@> public virtual converter _ mapping _ hints with ( [ can _ be _ null ] converter _ mapping _ hints ? hints ) </@> 
<%> <-> ? </%> <@> ? ( action < i _ service _ provider , db _ context _ options _ builder > ? ) null </@> 
<%> <-> ? </%> <%> <*> object? -> object </%> <%> <*> object? -> object </%> <@> ? ( object? ) null </@> <%> <*> object? -> object </%> <%> <*> object? -> object </%>
<%> <-> # nullable enable </%> <@> new t _ entity ? find ( [ can _ be _ null ] object [ ] ? key _ values ) ; </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> # nullable enable </%> <%> <*> object? -> object </%> <%> <-> ? </%> <@> task < object? > find _ async ( [ can _ be _ null ] object [ ] ? key _ values , cancellation _ token cancellation _ token = default ) ; </@> <%> <-> ? </%> <%> <-> ? </%>
 <@> public virtual object? find ( [ not _ null ] type entity _ type , [ can _ be _ null ] params object [ ] ? key _ values ) </@> <%> <*> object? -> object </%> <%> <-> ? </%> <%> <*> object? -> object </%> <%> <-> ? </%>
<%> <*> object? -> object </%> <%> <-> ? </%> <@> public virtual task < object? > find _ async ( [ not _ null ] type entity _ type , [ can _ be _ null ] params object [ ] ? key _ values ) </@> <%> <*> object? -> object </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%>
<%> <*> object? -> object </%> <%> <-> ? </%> <%> <*> object? -> object </%> <%> <-> ? </%> <@> public virtual task < object? > find _ async ( [ not _ null ] type entity _ type , [ can _ be _ null ] object [ ] ? key _ values , cancellation _ token cancellation _ token ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <*> object? -> object </%> <%> <-> ? </%> <%> <*> object? -> object </%> <%> <-> ? </%> <@> public virtual t _ entity ? find < t _ entity > ( [ can _ be _ null ] params object [ ] ? key _ values ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public virtual task < t _ entity ? > find _ async < t _ entity > ( [ can _ be _ null ] params object [ ] ? key _ values ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public virtual task < t _ entity ? > find _ async < t _ entity > ( [ can _ be _ null ] object [ ] ? key _ values , cancellation _ token cancellation _ token ) </@> 
 <@> public override t _ entity ? find ( params object [ ] ? key _ values ) </@> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <@> public override task < t _ entity ? > find _ async ( params object [ ] ? key _ values ) </@> <%> <-> ? </%> <%> <-> ? </%>
<%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <@> public override task < t _ entity ? > find _ async ( object [ ] ? key _ values , cancellation _ token cancellation _ token ) </@> 
<%> <-> ? </%> <@> func < type , type ? , i _ enumerable < value _ converter _ info > > ? after _ preferred ) </@> 
 <@> var field _ info = get _ field _ info ( field _ name , declaring _ type . clr _ type , name , should _ throw : true ) ; </@> <%> <+> _ base </%> <%> <-> var field _ info = type . get _ field _ info ( field _ name ) ; </%>
<%> <+> navigation navigation ) </%> <%> <*> if -> foreach </%> <%> <*> attributes ! = null -> var attribute in attributes </%> <%> <*> foreach ( var attribute in attributes ) -> relationship _ builder = apply ( relationship _ builder , navigation , attribute ) ; </%> <%> <+> if ( relationship _ builder = = null ) </%> <@> relationship _ builder = apply ( relationship _ builder , navigation , attribute ) ; if ( relationship _ builder = = null ) { break ; } </@> <%> <*> public abstract internal _ relationship _ builder apply ( [ not _ null ] internal _ relationship _ builder relationship _ builder , [ not _ null ] navigation navigation , [ not _ null ] t _ attribute attribute ) ; -> public abstract internal _ relationship _ builder apply ( [ not _ null ] internal _ relationship _ builder relationship _ builder , </%> <%> <*> protected static i _ enumerable < t _ custom _ attribute > get _ attributes < t _ custom _ attribute > ( [ not _ null ] entity _ type entity _ type , [ not _ null ] string property _ name ) -> not _ null navigation navigation , [ not _ null ] t _ attribute attribute ) ; </%> <%> <+> protected static i _ enumerable < t _ custom _ attribute > get _ attributes < t _ custom _ attribute > ( not _ null entity _ type entity _ type , [ not _ null ] string property _ name ) </%>
 <@> & & ! can _ merge _ with ( existing _ navigation , inverse _ property _ info . name , target _ entity _ type _ builder ) ) </@> <%> <-> . name </%>
<%> <-> . name </%> <@> | | ! can _ merge _ with ( existing _ inverse , navigation _ property . name , entity _ type _ builder ) ) </@> 
 <@> property . format ( dependent _ properties ) , </@> <%> <*> property -> principal _ properties </%> <%> <-> principal _ properties </%>
 <@> property . format ( dependent _ properties ) , </@> <%> <*> property -> principal _ properties </%> <%> <-> principal _ properties </%>
 <@> property . format ( key . properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> property . format ( key . properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> throw new invalid _ operation _ exception ( core _ strings . keyless _ type _ with _ key ( property . format ( properties ) , this . display _ name ( ) ) ) ; </@> <%> <*> property -> properties </%> <%> <-> properties </%>
<%> <*> property -> properties </%> <%> <-> properties </%> <@> throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ; </@> <%> <*> property -> properties </%> <%> <-> properties </%>
<%> <*> property -> properties </%> <%> <-> properties </%> <@> throw new invalid _ operation _ exception ( core _ strings . key _ properties _ wrong _ entity ( property . format ( properties ) , this . display _ name ( ) ) ) ; </@> 
 <@> throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ; </@> <%> <*> property -> properties </%> <%> <-> properties </%>
<%> <*> property -> properties </%> <%> <-> properties </%> <@> throw new invalid _ operation _ exception ( core _ strings . foreign _ key _ properties _ wrong _ entity ( property . format ( properties ) , this . display _ name ( ) ) ) ; </@> 
 <@> property . format ( properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ; </@> <%> <*> property -> properties </%> <%> <-> properties </%>
<%> <*> property -> properties </%> <%> <-> properties </%> <@> throw new invalid _ operation _ exception ( core _ strings . index _ properties _ wrong _ entity ( property . format ( properties ) , this . display _ name ( ) ) ) ; </@> <%> <*> property -> properties </%> <%> <-> properties </%>
<%> <*> property -> properties </%> <%> <-> properties </%> <@> throw new invalid _ operation _ exception ( core _ strings . duplicate _ index ( property . format ( properties ) , this . display _ name ( ) , duplicate _ index . declaring _ entity _ type . display _ name ( ) ) ) ; </@> 
 <@> core _ strings . property _ in _ use _ key ( property . name , this . display _ name ( ) , property . format ( containing _ key . properties ) ) ) ; </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> property . format ( index . properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> property . format ( index . properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> property . format ( foreign _ key . properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> property . format ( foreign _ key . properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> property . format ( foreign _ key . properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> property . format ( foreign _ key . properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> property . format ( foreign _ key . properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> = > ( property _ access _ mode ? ) check . not _ null ( type _ base , nameof ( type _ base ) ) [ core _ annotation _ names . property _ access _ mode _ annotation ] </@> <%> <-> _ annotation </%>
 <@> property . format ( p . first _ property _ collection ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> property . format ( key . properties ) , </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
 <@> property . format ( foreign _ key . properties ) ) ) ; </@> <%> <-> property . format ( </%> <%> <+> . format ( </%>
<%> <-> property . format ( </%> <%> <+> . format ( </%> <@> property . format ( referencing _ foreign _ key . properties ) , </@> 
<%> <*> root _ namespace ) ; -> root _ namespace , </%> <%> <+> language ) ; </%> <@> using ( var executor = new app _ domain _ operation _ executor ( assembly . get _ executing _ assembly ( ) . location , path . combine ( target _ dir , STR ) , target _ dir , null , null ) ) </@> 
<%> <*> sql _ statement -> string </%> <@> return new sql _ statement ( STR ) ; </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ task _ list </@> <%> <-> _ skip _ task _ list </%>
<%> <-> _ skip _ task _ list </%> <@> conditional _ theory _ skip _ task _ list </@> <%> <*> task _ list -> issue </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <*> cs = > cs . include ( c = > c . orders ) . where ( c = > c . customer _ id ! = STR & & c . customer _ id ! = STR ) . order _ by ( c = > c . city ) . skip ( NUM ) -> cs = > cs . include ( c = > c . orders ) </%> <%> <+> . where ( c = > c . customer _ id ! = STR & & c . customer _ id ! = STR ) . order _ by ( c = > c . city ) . then _ by ( c = > c . customer _ id ) </%>
 <@> conditional _ fact _ skip _ task _ list </@> <%> <*> assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . min ( o = > o . order _ id ) ) . to _ list ( ) ) ; -> context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . min ( o = > o . order _ id ) ) . to _ list ( ) ; </%>
 <@> conditional _ fact _ skip _ task _ list </@> <%> <*> assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . max ( o = > o . order _ id ) ) . to _ list ( ) ) ; -> context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . max ( o = > o . order _ id ) ) . to _ list ( ) ; </%>
 <@> conditional _ fact _ skip _ task _ list </@> <%> <*> assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . average ( o = > o . order _ id ) ) . to _ list ( ) ) ; -> context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . average ( o = > o . order _ id ) ) . to _ list ( ) ; </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
<%> <-> private static readonly method _ info shape _ method _ info = typeof ( in _ memory _ shaped _ query _ compiling _ expression _ visitor ) . get _ type _ info ( ) . get _ declared _ method ( nameof ( shape ) ) ; private static i _ enumerable < t _ result > shape < t _ result > ( i _ enumerable < value _ buffer > inner _ enumerable , query _ context query _ context , func < query _ context , i _ enumerator < value _ buffer > , t _ result > shaper , type context _ type , i _ diagnostics _ logger < db _ logger _ category . query > logger ) { return new querying _ enumerable < t _ result > ( query _ context , inner _ enumerable , shaper , context _ type , logger ) ; } private static readonly method _ info shape _ async _ method _ info = typeof ( in _ memory _ shaped _ query _ compiling _ expression _ visitor ) . get _ type _ info ( ) . get _ declared _ method ( nameof ( shape _ async ) ) ; private static i _ async _ enumerable < t _ result > shape _ async < t _ result > ( i _ enumerable < value _ buffer > inner _ enumerable , query _ context query _ context , func < query _ context , i _ enumerator < value _ buffer > , task < t _ result > > shaper , type context _ type , i _ diagnostics _ logger < db _ logger _ category . query > logger ) { return new async _ querying _ enumerable < t _ result > ( query _ context , inner _ enumerable , shaper , context _ type , logger ) ; } </%> <@> private readonly func < query _ context , i _ enumerator < value _ buffer > , t > shaper ; </@> <%> <-> i _ enumerator < </%> <%> <-> > </%>
<%> <-> i _ enumerator < </%> <%> <-> > </%> <@> func < query _ context , i _ enumerator < value _ buffer > , t > shaper , </@> 
 <@> private readonly func < query _ context , i _ enumerator < value _ buffer > , task < t > > shaper ; </@> <%> <-> i _ enumerator < </%> <%> <-> > </%> <%> <-> task < </%> <%> <-> > </%>
<%> <-> i _ enumerator < </%> <%> <-> > </%> <%> <-> task < </%> <%> <-> > </%> <@> func < query _ context , i _ enumerator < value _ buffer > , task < t > > shaper , </@> 
<%> <+> expression . constant ( </%> <%> <+> ) </%> <%> <*> . has _ value -> ! = null </%> <@> predicate = expression . greater _ than ( column _ expression , expression . constant ( offset ) ) ; </@> <%> <+> var offset _ value = ( offset as constant _ expression ) ? . value ; </%> <%> <*> ? ( expression ) expression . constant ( offset + ( int ) constant _ value ) : expression . add ( expression . constant ( offset ) , sub _ query . limit ) ; -> & & offset _ value ! = null </%>
<%> <*> string -> var </%> <@> final _ identifier = proposed _ identifier + suffix . to _ string ( ) ; </@> 
 <@> return new default _ expression _ or _ value ( ) </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> return new default _ expression _ or _ value ( ) </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> return new default _ expression _ or _ value ( ) </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> return new default _ expression _ or _ value ( ) </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> return new default _ expression _ or _ value ( ) </@> 
 <@> return new compiled _ assembly _ result ( ) </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> return new compiled _ assembly _ result ( ) </@> 
<%> <+> var member _ expression = ( member _ expression ) expression ; var object = evaluate ( member _ expression . expression , out parameter _ name ) ; var field _ info = member _ expression . member as field _ info ; if ( field _ info ! = null ) </%> <%> <*> var member -> parameter </%> <%> <*> expression -> name </%> <%> <*> ( member -> parameter </%> <%> <*> expression ) expression ; var object = evaluate ( member _ expression . expression , out -> name ! = null ? </%> <%> <*> ) ; var -> + STR + field _ info . name : </%> <%> <-> = member _ expression </%> <%> <*> member as field _ info -> name </%> <%> <-> if ( field _ info ! = null ) </%> <%> <+> try </%> <@> parameter _ name = parameter _ name ! = null ? parameter _ name + STR + field _ info . name : field _ info . name ; try { return field _ info . get _ value ( object ) ; } catch {  } </@> <%> <*> var property _ info = member _ expression . member as property _ info ; if ( property _ info ! = null ) -> catch </%> <%> <-> parameter _ name = parameter _ name ! = null ? parameter _ name + STR + property _ info . name : property _ info . name ; try { </%>
 <@> public virtual new string column </@> <%> <*> param _ can _ be _ null set { property [ sqlite _ name _ annotation ] = value ; } -> param _ can _ be _ null set { property [ sqlite _ name _ annotation ] = value ; } </%> <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> param _ can _ be _ null </%>
<%> <-> virtual </%> <%> <+> virtual </%> <%> <*> param _ can _ be _ null set { property [ sqlite _ name _ annotation ] = value ; } -> param _ can _ be _ null set { property [ sqlite _ name _ annotation ] = value ; } </%> <@> public virtual new string column _ type </@> <%> <*> param _ can _ be _ null set { property [ sqlite _ column _ type _ annotation ] = value ; } -> param _ can _ be _ null set { property [ sqlite _ column _ type _ annotation ] = value ; } </%> <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> param _ can _ be _ null </%>
<%> <*> razor _ templating _ host -> var </%> <%> <*> razor _ template _ engine -> var </%> <@> return new template _ result ( ) </@> 
 <@> return new template _ result ( ) </@> <%> <*> string -> var </%>
<%> <*> string -> var </%> <@> return new template _ result ( ) </@> 
 <@> private readonly list < i _ member _ translator > sqlite _ translators = new list < i _ member _ translator > ( ) </@> <%> <-> , </%>
<%> <+> using jet _ brains _ annotations ; </%> <%> <-> using jet _ brains _ annotations ; </%> <@> private readonly list < i _ method _ call _ translator > sqlite _ translators = new list < i _ method _ call _ translator > ( ) </@> <%> <-> , </%>
 <@> private static event _ id make _ update _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , update _ prefix + id ) ; </@> <%> <+> new </%> <%> <-> _ factory . create </%>
<%> <+> new </%> <%> <-> _ factory . create </%> <@> private static event _ id make _ query _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , query _ prefix + id ) ; </@> 
 <@> private static event _ id make _ validation _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , validation _ prefix + id ) ; </@> <%> <+> new </%> <%> <-> _ factory . create </%>
<%> <+> new </%> <%> <-> _ factory . create </%> <@> private static event _ id make _ scaffolding _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , scaffolding _ prefix + id ) ; </@> 
 <@> private static event _ id make _ connection _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , connection _ prefix + id ) ; </@> <%> <+> new </%> <%> <-> _ factory . create </%>
<%> <+> new </%> <%> <-> _ factory . create </%> <@> private static event _ id make _ command _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , sql _ prefix + id ) ; </@> <%> <+> new </%> <%> <-> _ factory . create </%>
<%> <+> new </%> <%> <-> _ factory . create </%> <@> private static event _ id make _ transaction _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , transaction _ prefix + id ) ; </@> <%> <+> new </%> <%> <-> _ factory . create </%>
<%> <+> new </%> <%> <-> _ factory . create </%> <@> private static event _ id make _ migrations _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , migrations _ prefix + id ) ; </@> <%> <+> new </%> <%> <-> _ factory . create </%>
<%> <+> new </%> <%> <-> _ factory . create </%> <@> private static event _ id make _ query _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , query _ prefix + id ) ; </@> <%> <+> new </%> <%> <-> _ factory . create </%> <%> <-> private static class event _ id _ factory { public static event _ id create ( int id , string name ) </%>
<%> <+> new </%> <%> <-> _ factory . create </%> <@> private static event _ id make _ validation _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , validation _ prefix + id ) ; </@> <%> <-> private static class event _ id _ factory { public static event _ id create ( int id , string name ) { if ( app _ context . try _ get _ switch ( STR , out var is _ enabled ) & & is _ enabled ) { if ( id > = core _ event _ id . provider _ design _ base _ id ) </%>
 <@> private static event _ id make _ validation _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , validation _ prefix + id ) ; </@> <%> <+> new </%> <%> <-> _ factory . create </%>
<%> <+> new </%> <%> <-> _ factory . create </%> <@> private static event _ id make _ scaffolding _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , scaffolding _ prefix + id ) ; </@> 
 <@> private static event _ id make _ transaction _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , transaction _ prefix + id ) ; </@> <%> <+> new </%> <%> <-> _ factory . create </%> <%> <-> private static class event _ id _ factory { public static event _ id create ( int id , string name ) { if ( app _ context . try _ get _ switch ( STR , out var is _ enabled ) & & is _ enabled ) </%>
<%> <+> new </%> <%> <-> _ factory . create </%> <@> private static event _ id make _ update _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , update _ prefix + id ) ; </@> <%> <-> private static class event _ id _ factory { public static event _ id create ( int id , string name ) { if ( app _ context . try _ get _ switch ( STR , out var is _ enabled ) & & is _ enabled ) { if ( id > = core _ event _ id . provider _ design _ base _ id ) { </%>
 <@> fk . name , fk . table . name , fk . referenced _ table . name , </@> <%> <+> fk . referenced _ table . name , </%> <%> <*> idx . table . name , idx . name , -> idx . table . name , </%> <%> <+> idx . name , </%>
<%> <*> c -> o </%> <%> <*> o -> c </%> <@> left join STR customers STR as STR c STR on STR c STR . STR customer _ id STR = STR o STR . STR customer _ id STR </@> <%> <*> c -> o </%> <%> <*> o -> c </%>
 <@> left join STR customers STR as STR c STR on STR c STR . STR customer _ id STR = STR o STR . STR customer _ id STR </@> <%> <*> c -> o </%> <%> <*> o -> c </%>
 <@> left join STR customers STR as STR c STR on STR c STR . STR customer _ id STR = STR o STR . STR customer _ id STR </@> <%> <*> c -> o </%> <%> <*> o -> c </%>
<%> <*> c -> o </%> <%> <*> o -> c </%> <@> left join [ customers ] as [ c ] on [ c ] . [ customer _ id ] = [ o ] . [ customer _ id ] </@> <%> <*> c -> o </%> <%> <*> o -> c </%>
 <@> left join [ customers ] as [ c ] on [ c ] . [ customer _ id ] = [ o ] . [ customer _ id ] </@> <%> <*> c -> o </%> <%> <*> o -> c </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
<%> <+> o </%> <%> <+> o </%> <%> <+> o </%> <%> <+> o </%> <@> ) as [ o ] on [ ] . [ customer _ id ] = [ o ] . [ customer _ id ] </@> 
 <@> var target _ select _ expression = new select _ expression ( ) ; var target _ table _ alias = create _ unique _ alias ( select _ expression , target _ table _ name . first ( ) . to _ string ( ) . to _ lower ( ) ) ; </@> <%> <+> var target _ select _ expression = new select _ expression ( ) ; </%>
<%> <*> protected virtual void set _ base _ type ( entity _ type entity _ type , entity _ type base _ entity _ type ) = > entity _ type . has _ base _ type ( base _ entity _ type ) ; protected key create _ key ( entity _ type entity _ type , int starting _ property _ index = - 1 , int property _ count = 1 ) -> protected virtual void set _ base _ type ( i _ mutable _ entity _ type entity _ type , i _ mutable _ entity _ type base _ entity _ type ) </%> <%> <+> = > entity _ type . base _ type = base _ entity _ type ; protected i _ mutable _ key create _ key ( i _ mutable _ entity _ type entity _ type , int starting _ property _ index = - 1 , int property _ count = 1 ) </%> <%> <+> i _ mutable _ </%> <@> var property = entity _ type . get _ or _ add _ property ( STR + ( starting _ property _ index + i ) , typeof ( int? ) ) ; key _ properties [ i ] = property ; </@> <%> <+> i _ mutable _ </%> <%> <+> i _ mutable _ </%> <%> <+> i _ mutable _ </%> <%> <+> i _ mutable _ </%>
<%> <+> i _ mutable _ </%> <%> <+> i _ mutable _ </%> <@> var discriminator _ property = base _ entity _ type . get _ or _ add _ property ( STR , typeof ( string ) ) ; base _ entity _ type . relational ( ) . discriminator _ property = discriminator _ property ; </@> 
 <@> fact _ skip _ roslyn _ assembly _ missmatch </@> <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>
<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> <@> fact _ skip _ roslyn _ assembly _ missmatch </@> 
 <@> fact _ skip _ roslyn _ assembly _ missmatch </@> <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>
<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> <@> fact _ skip _ roslyn _ assembly _ missmatch </@> <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>
<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> <@> fact _ skip _ roslyn _ assembly _ missmatch </@> 
 <@> fact _ skip _ roslyn _ assembly _ missmatch </@> <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>
<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> <@> fact _ skip _ roslyn _ assembly _ missmatch </@> 
 <@> fact _ skip _ roslyn _ assembly _ missmatch </@> <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>
<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> <@> fact _ skip _ roslyn _ assembly _ missmatch </@> 
 <@> fact _ skip _ roslyn _ assembly _ missmatch </@> <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>
<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> <@> fact _ skip _ roslyn _ assembly _ missmatch </@> 
 <@> & & is _ compatible _ sequence _ hi _ lo ( property . clr _ type ) ) </@> <%> <-> . clr _ type </%>
<%> <-> . clr _ type </%> <@> & & is _ compatible _ identity _ column ( property . clr _ type ) ) </@> 
 <@> & & is _ compatible _ sequence _ hi _ lo ( property . clr _ type ) ) </@> <%> <-> . clr _ type </%>
<%> <-> . clr _ type </%> <@> & & is _ compatible _ identity _ column ( property . clr _ type ) ) </@> 
 <@> b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; </@> <%> <-> fake _ service , </%> <%> <-> < fake _ service > </%>
<%> <-> fake _ service , </%> <%> <-> < fake _ service > </%> <@> b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; </@> 
 <@> b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( new fake _ service ( ) ) ; </@> <%> <-> fake _ service , </%> <%> <-> < fake _ service > </%>
<%> <-> fake _ service , </%> <%> <-> < fake _ service > </%> <@> b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( new fake _ service ( ) ) ; </@> 
 <@> b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; </@> <%> <-> fake _ service , </%> <%> <-> < fake _ service > </%>
<%> <-> fake _ service , </%> <%> <-> < fake _ service > </%> <@> b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; </@> 
 <@> b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; </@> <%> <-> fake _ service , </%> <%> <-> < fake _ service > </%>
<%> <-> fake _ service , </%> <%> <-> < fake _ service > </%> <@> b . service _ collection . add _ scoped < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; </@> 
 <@> b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; </@> <%> <-> fake _ service , </%> <%> <-> < fake _ service > </%>
<%> <-> fake _ service , </%> <%> <-> < fake _ service > </%> <@> b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; </@> 
 <@> builder . service _ collection . add _ instance < i _ model _ source > ( model _ source ) ; </@> <%> <-> < db _ set _ initializer > </%>
<%> <-> < i _ model _ source > </%> <@> builder . service _ collection . add _ instance < db _ set _ initializer > ( initializer ) ; </@> <%> <-> < identity _ generator _ factory > </%>
<%> <-> < db _ set _ initializer > </%> <@> builder . service _ collection . add _ instance < identity _ generator _ factory > ( factory ) ; </@> <%> <-> < active _ identity _ generators > </%>
<%> <-> < identity _ generator _ factory > </%> <@> builder . service _ collection . add _ instance < active _ identity _ generators > ( generators ) ; </@> <%> <-> < db _ set _ finder > </%>
<%> <-> < active _ identity _ generators > </%> <@> builder . service _ collection . add _ instance < db _ set _ finder > ( finder ) ; </@> <%> <-> < entity _ key _ factory _ source > </%>
<%> <-> < db _ set _ finder > </%> <@> builder . service _ collection . add _ instance < entity _ key _ factory _ source > ( source ) ; </@> <%> <-> < clr _ collection _ accessor _ source > </%>
<%> <-> < entity _ key _ factory _ source > </%> <@> builder . service _ collection . add _ instance < clr _ collection _ accessor _ source > ( source ) ; </@> <%> <-> < clr _ property _ getter _ source > </%>
<%> <-> < clr _ collection _ accessor _ source > </%> <@> builder . service _ collection . add _ instance < clr _ property _ getter _ source > ( source ) ; </@> <%> <-> < clr _ property _ setter _ source > </%>
<%> <-> < clr _ property _ getter _ source > </%> <@> builder . service _ collection . add _ instance < clr _ property _ setter _ source > ( source ) ; </@> <%> <-> < entity _ materializer _ source > </%>
<%> <-> < clr _ property _ setter _ source > </%> <@> builder . service _ collection . add _ instance < entity _ materializer _ source > ( source ) ; </@> <%> <-> < i _ logger _ factory > </%>
<%> <-> < entity _ materializer _ source > </%> <@> builder . service _ collection . add _ instance < i _ logger _ factory > ( factory ) ; </@> 
 <@> fact _ skip _ fix _ metadata _ reference _ provider _ add _ reference _ from _ name _ for _ dnxcore </@> <%> <+> if not exists </%>
 <@> var logger _ factory = app _ service _ provider . get _ service < i _ logger _ factory > ( ) ; var memory _ cache = app _ service _ provider . get _ service < i _ memory _ cache > ( ) ; </@> <%> <*> same -> not _ null </%> <%> <*> , -> = </%> <%> <*> same -> not _ null </%> <%> <*> , -> = </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
<%> <-> system . data . </%> <@> system . data . isolation _ level isolation _ level , cancellation _ token cancellation _ token = default ) = > throw new not _ implemented _ exception ( ) ; </@> 
<%> <*> new line _ string [ ] { line _ string , line _ string } ) { srid = NUM } ; -> new [ ] { line _ string , line _ string } ) { srid = NUM } ; </%> <@> new polygon [ ] { polygon , polygon } ) { srid = NUM } ; </@> 
<%> <*> new line _ string [ ] { line _ string , line _ string } ) { srid = NUM } ; -> new [ ] { line _ string , line _ string } ) { srid = NUM } ; </%> <@> new polygon [ ] { polygon , polygon } ) { srid = NUM } ; </@> 
 <@> public task < bool > close _ async ( ) = > task . from _ result < bool > ( true ) ; </@> <%> <-> system . data . </%> <%> <-> system . data . </%>
<%> <-> < bool > </%> <@> public i _ db _ context _ transaction begin _ transaction ( system . data . isolation _ level isolation _ level ) = > throw new not _ implemented _ exception ( ) ; </@> <%> <-> system . data . </%>
<%> <-> < bool > </%> <%> <-> system . data . </%> <@> system . data . isolation _ level isolation _ level , cancellation _ token cancellation _ token = default ) = > throw new not _ implemented _ exception ( ) ; </@> 
<%> <+> using microsoft _ entity _ framework _ core _ test _ models _ conference _ planner _ conference _ dto ; </%> <@> public static conference _ dto . session _ response map _ session _ response ( this session session ) = > new conference _ dto . session _ response </@> <%> <-> . select ( ss = > new conference _ dto . speaker { id = ss . speaker _ id , name = ss . speaker . name </%>
 <@> model _ builder . entity < internal _ clr _ entity _ entry _ test . full _ notification _ entity > ( </@> <%> <-> internal _ clr _ entity _ entry _ test . </%>
<%> <-> internal _ clr _ entity _ entry _ test . </%> <@> model _ builder . entity < internal _ clr _ entity _ entry _ test . changed _ only _ entity > ( </@> <%> <-> internal _ clr _ entity _ entry _ test . </%>
<%> <-> internal _ clr _ entity _ entry _ test . </%> <@> model _ builder . entity < internal _ clr _ entity _ entry _ test . owner _ class > ( </@> 
 <@> public async task < conference _ dto . attendee _ response > get ( string username ) </@> <%> <-> conference _ dto . </%>
<%> <-> conference _ dto . </%> <@> public async task < list < conference _ dto . session _ response > > get _ sessions ( string username ) </@> <%> <-> conference _ dto . </%> <%> <-> conference _ dto . </%>
<%> <-> conference _ dto . </%> <@> public async task < conference _ dto . attendee _ response > post ( conference _ dto . attendee input ) </@> <%> <*> attendee -> test _ models . conference _ planner . attendee </%>
 <@> new conference _ dto . search _ term { query = search _ term } ) ; </@> <%> <-> conference _ dto . </%> <%> <-> conference _ dto . </%>
 <@> public async task < list < conference _ dto . session _ response > > get ( ) </@> <%> <-> conference _ dto . </%>
<%> <-> conference _ dto . </%> <@> public async task < conference _ dto . session _ response > get ( int id ) </@> <%> <-> conference _ dto . </%> <%> <-> conference _ dto . </%>
 <@> public async task < list < conference _ dto . speaker _ response > > get _ speakers ( ) </@> <%> <-> conference _ dto . </%>
<%> <-> conference _ dto . </%> <@> public async task < conference _ dto . speaker _ response > get _ speaker ( int id ) </@> 
<%> <+> using system ; using system _ linq ; using system _ threading _ tasks ; using microsoft _ asp _ net _ diagnostics _ views ; </%> <%> <-> using system ; using system _ linq ; </%> <@> using system _ globalization   ; using system _ threading _ tasks ; public class database _ error _ page : microsoft . asp _ net . diagnostics . views . base _ view </@> <%> <*> public microsoft . asp _ net . diagnostics . entity . views . -> public </%> <%> <-> public database _ error _ page ( ) { } </%>
<%> <+> using microsoft _ asp _ net _ diagnostics _ views ; </%> <%> <-> using system ; using system _ linq ; using system _ globalization </%> <%> <*> ; using system _ threading _ tasks ; public class database _ error _ page : microsoft . asp _ net . diagnostics . views . base _ view -> public class database _ error _ page : base _ view </%> <@> public microsoft . asp _ net . diagnostics . entity . views . database _ error _ page _ model model { get ; set ; }    public database _ error _ page ( ) { } </@> 
<%> <+> } </%> <%> <-> return ; </%> <@> var query _ model _ visitor = this . create _ querying _ expression _ tree _ visitor ( query _ source _ mock . object ) ; assert . is _ type < redis _ query _ model _ visitor . redis _ querying _ expression _ tree _ visitor > ( query _ model _ visitor ) ; </@> 
<%> <*> ats _ db _ context _ extensions -> options </%> <%> <-> options , </%> <@> ats _ db _ context _ extensions . use _ azure _ table _ storage ( options , connection _ string , false ) ; </@> <%> <*> ats _ db _ context _ extensions -> options </%> <%> <-> options , </%>
<%> <*> ats _ db _ context _ extensions -> options </%> <%> <-> options , </%> <@> ats _ db _ context _ extensions . use _ azure _ table _ storage ( options , STR , true ) ; </@> 
 <@> assert . throws < argument _ exception > ( ( ) = > ats _ db _ context _ extensions . use _ azure _ table _ storage ( options , name , key ) ) . message </@> <%> <*> ats _ db _ context _ extensions -> options </%> <%> <-> options , </%>
<%> <*> ats _ db _ context _ extensions -> options </%> <%> <-> options , </%> <@> assert . throws < argument _ exception > ( ( ) = > ats _ db _ context _ extensions . use _ azure _ table _ storage ( options , STR ) ) . message </@> 
<%> <*> it . is _ any < i _ relational _ transaction > ( ) , relational _ type _ mapper , it . is _ any < db _ context > ( ) , -> it . is _ any < i _ relational _ connection > ( ) , </%> <@> public batch _ executor _ for _ test ( i _ relational _ type _ mapper type _ mapper ) : base ( type _ mapper , test _ helpers . instance . create _ context ( ) , new logger _ factory ( ) ) </@> <%> <-> private class concrete _ type _ mapper : relational _ type _ mapper { protected override string get _ column _ type ( i _ property property ) = > property . test _ provider ( ) . column _ type ; protected override i _ read _ only _ dictionary < type , relational _ type _ mapping > simple _ mappings { get ; } = new dictionary < type , relational _ type _ mapping > ( ) ; protected override i _ read _ only _ dictionary < string , relational _ type _ mapping > simple _ name _ mappings { get ; } </%>
<%> <*> not _ null i _ relational _ connection connection , not _ null i _ relational _ type _ mapper type _ mapper , int? command _ timeout ) -> not _ null i _ relational _ connection connection ) </%> <@> var command = command _ builder . build _ relational _ command ( ) . create _ command ( connection ) ; if ( command _ timeout ! = null ) { command . command _ timeout = ( int ) command _ timeout ; } return command ; </@> 
<%> <*> , i _ db _ context _ options options ) -> ) </%> <%> <-> options , annotation _ provider </%> <@> if ( ! modification _ command _ batch _ factory . add _ command ( batch , modification _ command ) ) </@> <%> <-> options , annotation _ provider </%> <%> <-> modification _ command _ </%> <%> <-> _ factory </%> <%> <-> batch , </%>
<%> <-> options , annotation _ provider </%> <%> <-> modification _ command _ </%> <%> <-> _ factory </%> <%> <-> batch , </%> <@> batch = modification _ command _ batch _ factory . create ( options , annotation _ provider ) ; modification _ command _ batch _ factory . add _ command ( batch , modification _ command ) ; </@> <%> <+> e = > </%>
<%> <*> = > new sequence ( ( i _ mutable _ model ) model , -> = > sequence . get _ or _ add _ sequence ( ( i _ mutable _ model ) model , </%> <@> check . not _ empty ( name , nameof ( name ) ) , check . null _ but _ not _ empty ( schema , nameof ( schema ) ) ) ; </@> 
<%> <+> ( </%> <%> <+> ) </%> <@> where [ e ] . [ nullable _ string _ a ] not in ( ' foo ' ) and [ e ] . [ nullable _ string _ a ] is not null STR </@> <%> <+> ( </%> <%> <+> ) </%>
<%> <+> ( </%> <%> <+> ) </%> <@> where [ e ] . [ nullable _ string _ a ] in ( ' foo ' ) or [ e ] . [ nullable _ string _ a ] is null STR </@> <%> <+> ( </%> <%> <+> ) </%>
<%> <+> ( </%> <%> <+> ) </%> <@> where [ e ] . [ nullable _ string _ a ] in ( ' foo ' ) or [ e ] . [ nullable _ string _ a ] is null STR </@> <%> <-> where [ e ] . [ nullable _ string _ a ] not in ( ' foo ' , prm ) and [ e ] . [ nullable _ string _ a ] is not null STR </%>
 <@> foreach ( var entity _ type in entity _ types . where ( et = > et . base _ type = = null ) ) </@> <%> <*> var current _ primary _ key = entity _ type . find _ primary _ key ( ) ; if ( ( current _ primary _ key ! = null ) & & ( current _ primary _ key . properties . count > 1 ) ) -> if ( entity _ type . base _ type = = null ) </%> <%> <*> var new _ key = entity _ type . builder . primary _ key ( new list < string > { current _ primary _ key . properties . first ( ) . name } , configuration _ source . data _ annotation ) ; if ( new _ key ! = null ) -> var current _ primary _ key = entity _ type . find _ primary _ key ( ) ; </%>
<%> <-> private static store _ type _ postfix get _ store _ type _ postfix ( bool unicode , int? size ) = > unicode ? size . has _ value & & size < = unicode _ max ? store _ type _ postfix . size : store _ type _ postfix . none : size . has _ value & & size < = ansi _ max ? store _ type _ postfix . size : store _ type _ postfix . none ; </%> <@> = > new sql _ server _ string _ type _ mapping ( parameters . with _ store _ type _ and _ size ( store _ type , size , get _ store _ type _ postfix ( is _ unicode , size ) ) ) ; </@> <%> <*> public override core _ type _ mapping clone ( value _ converter converter ) = > new sql _ server _ string _ type _ mapping ( parameters . with _ composed _ converter ( converter ) ) ; -> protected override relational _ type _ mapping clone ( relational _ type _ mapping _ parameters parameters ) </%> <%> <+> = > new sql _ server _ string _ type _ mapping ( parameters ) ; </%>
<%> <-> private readonly string sql ; </%> <@> public virtual string sql { get { return sql ; } } public virtual bool suppress _ transaction { get ; set ; } </@> 
 <@> connection _ mock . protected ( ) . verify ( STR , times . once ( ) , new object [ ] { true } ) ; </@> <%> <-> new object [ ] { </%> <%> <-> } </%>
 <@> connection _ mock . protected ( ) . verify ( STR , times . never ( ) , new object [ ] { true } ) ; </@> <%> <-> new object [ ] { </%> <%> <-> } </%>
<%> <-> new object [ ] { </%> <%> <-> } </%> <@> connection _ mock . protected ( ) . verify ( STR , times . never ( ) , new object [ ] { true } ) ; </@> 
<%> <+> predicate = translate _ lambda _ expression ( source , predicate ) ; if ( predicate = = null ) { return null ; } </%> <@> translate _ lambda _ expression ( source , predicate ) ) ; </@> <%> <*> in _ memory _ query _ expression . server _ query _ expression = predicate = = null ? expression . call ( -> if ( predicate = = null ) </%> <%> <+> { </%>
<%> <*> in _ memory _ query _ expression . server _ query _ expression = predicate = = null ? expression . call ( -> if ( predicate = = null ) </%> <%> <+> { in _ memory _ query _ expression . server _ query _ expression = expression . call ( </%> <%> <*> in _ memory _ query _ expression . server _ query _ expression ) : expression . call ( -> in _ memory _ query _ expression . server _ query _ expression ) ; </%> <%> <+> } else { predicate = translate _ lambda _ expression ( source , predicate ) ; if ( predicate = = null ) { return null ; } in _ memory _ query _ expression . server _ query _ expression = expression . call ( </%> <@> translate _ lambda _ expression ( source , predicate ) ) ; </@> 
<%> <+> predicate = translate _ lambda _ expression ( source , predicate ) ; if ( predicate = = null ) { return null ; } </%> <@> translate _ lambda _ expression ( source , predicate ) ) ; </@> 
<%> <+> predicate = translate _ lambda _ expression ( source , predicate ) ; if ( predicate = = null ) { return null ; } </%> <@> translate _ lambda _ expression ( source , predicate ) ) ; </@> 
<%> <*> var predicate = expression . lambda ( equals , parameter ) ; -> var predicate = translate _ lambda _ expression ( source , expression . lambda ( equals , parameter ) ) ; </%> <%> <+> if ( predicate = = null ) { return null ; } </%> <@> translate _ lambda _ expression ( source , predicate ) ) ; </@> 
<%> <+> count = translate _ expression ( count ) ; if ( count = = null ) { return null ; } </%> <@> translate _ expression ( count ) ) ; </@> <%> <+> count = translate _ expression ( count ) ; </%>
<%> <+> count = translate _ expression ( count ) ; if ( count = = null ) { return null ; } </%> <@> translate _ expression ( count ) ) ; </@> <%> <+> if ( key _ selector = = null ) { </%>
<%> <+> predicate = translate _ lambda _ expression ( source , predicate ) ; if ( predicate = = null ) { return null ; } </%> <@> translate _ lambda _ expression ( source , predicate ) ) ; </@> 
 <@> public class change _ tracker : i _ infrastructure < i _ state _ manager > , i _ resettable _ service </@> <%> <+> readonly </%>
<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ inheritance _ relationships ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> public class inheritance _ relationships _ query _ sqlite _ fixture : inheritance _ relationships _ query _ relational _ fixture < sqlite _ test _ store > </@> <%> <-> private readonly i _ service _ provider service _ provider ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public inheritance _ relationships _ query _ sqlite _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory ) . build _ service _ provider ( validate _ scopes : true ) ; </%>
<%> <+> using microsoft _ entity _ framework _ core _ diagnostics ; </%> <%> <+> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public abstract class inheritance _ relational _ fixture < t _ test _ store > : inheritance _ fixture _ base < t _ test _ store > where t _ test _ store : test _ store </@> <%> <*> public override void on _ model _ creating ( model _ builder model _ builder ) -> public test _ sql _ logger _ factory test _ sql _ logger _ factory = > ( test _ sql _ logger _ factory ) service _ provider . get _ required _ service < i _ logger _ factory > ( ) ; </%> <%> <+> protected override void on _ model _ creating ( model _ builder model _ builder , db _ context context ) </%> <%> <+> , context </%>
<%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <@> public class funky _ data _ query _ sql _ server _ fixture : funky _ data _ query _ fixture _ base < sql _ server _ test _ store > </@> <%> <*> public const string database _ name = STR ; private readonly db _ context _ options options ; private readonly string connection _ string = sql _ server _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public funky _ data _ query _ sql _ server _ fixture ( ) -> public test _ sql _ logger _ factory test _ sql _ logger _ factory = > ( test _ sql _ logger _ factory ) service _ provider . get _ required _ service < i _ logger _ factory > ( ) ; </%> <%> <+> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; public override funky _ data _ context create _ context ( ) </%>
<%> <-> _ models _ complex _ navigations </%> <%> <*> model -> utilities </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public class complex _ navigations _ owned _ query _ sql _ server _ fixture : complex _ navigations _ owned _ query _ relational _ fixture _ base < sql _ server _ test _ store > </@> <%> <-> public static readonly string database _ name = STR ; private readonly db _ context _ options options ; private readonly string connection _ string = sql _ server _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public complex _ navigations _ owned _ query _ sql _ server _ fixture ( ) { var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>
<%> <*> using microsoft _ entity _ framework _ core _ test _ models _ complex _ navigations _ model ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> public class complex _ navigations _ owned _ query _ sqlite _ fixture : complex _ navigations _ owned _ query _ relational _ fixture _ base < sqlite _ test _ store > </@> <%> <-> public static readonly string database _ name = STR ; private readonly db _ context _ options options ; private readonly string connection _ string = sqlite _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public complex _ navigations _ owned _ query _ sqlite _ fixture ( ) { var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>
<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ inheritance ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> public class inheritance _ sqlite _ fixture : inheritance _ relational _ fixture < sqlite _ test _ store > </@> <%> <-> protected virtual string database _ name = > STR ; private readonly i _ service _ provider service _ provider ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public inheritance _ sqlite _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory ) </%>
<%> <*> using microsoft _ entity _ framework _ core _ diagnostics ; using microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> public class gears _ of _ war _ query _ sqlite _ fixture : gears _ of _ war _ query _ relational _ fixture < sqlite _ test _ store > </@> <%> <-> public static readonly string database _ name = STR ; private readonly db _ context _ options options ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public gears _ of _ war _ query _ sqlite _ fixture ( ) { var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory ) </%>
<%> <-> _ models </%> <%> <*> inheritance -> utilities </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public class inheritance _ sql _ server _ fixture : inheritance _ relational _ fixture < sql _ server _ test _ store > </@> <%> <-> protected virtual string database _ name = > STR ; private readonly db _ context _ options options ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public inheritance _ sql _ server _ fixture ( ) { var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory ) </%>
<%> <-> using system _ collections _ generic ; </%> <@> public abstract class complex _ navigations _ owned _ query _ fixture _ base < t _ test _ store > : complex _ navigations _ query _ fixture _ base < t _ test _ store > where t _ test _ store : test _ store </@> <%> <*> public complex _ navigations _ owned _ query _ fixture _ base ( ) -> protected override string store _ name { get ; } = STR ; </%> <%> <+> protected complex _ navigations _ owned _ query _ fixture _ base ( ) </%> <%> <+> , db _ context context </%>
<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ inheritance _ relationships ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public class inheritance _ relationships _ query _ sql _ server _ fixture : inheritance _ relationships _ query _ relational _ fixture < sql _ server _ test _ store > </@> <%> <-> public static readonly string database _ name = STR ; private readonly i _ service _ provider service _ provider ; private readonly string connection _ string = sql _ server _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public inheritance _ relationships _ query _ sql _ server _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>
<%> <+> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public abstract class inheritance _ relationships _ query _ relational _ fixture < t _ test _ store > : inheritance _ relationships _ query _ fixture _ base < t _ test _ store > where t _ test _ store : test _ store </@> <%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory = > ( test _ sql _ logger _ factory ) service _ provider . get _ required _ service < i _ logger _ factory > ( ) ; </%>
<%> <-> using microsoft _ entity _ framework _ core _ diagnostics ; </%> <%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public class gears _ of _ war _ query _ sql _ server _ fixture : gears _ of _ war _ query _ relational _ fixture < sql _ server _ test _ store > </@> <%> <*> public const string database _ name = STR ; private readonly db _ context _ options options ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public gears _ of _ war _ query _ sql _ server _ fixture ( ) -> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </%> <%> <+> protected override void on _ model _ creating ( model _ builder model _ builder , db _ context context ) </%> <%> <-> var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) </%>
<%> <*> system ; -> microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <*> test _ models _ funky _ data _ model ; -> utilities ; </%> <@> public class funky _ data _ query _ sqlite _ fixture : funky _ data _ query _ fixture _ base < sqlite _ test _ store > </@> <%> <-> public static readonly string database _ name = STR ; private readonly i _ service _ provider service _ provider ; private readonly string connection _ string = sqlite _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public funky _ data _ query _ sqlite _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>
<%> <+> using microsoft _ entity _ framework _ core _ diagnostics ; </%> <%> <+> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public abstract class complex _ navigations _ owned _ query _ relational _ fixture _ base < t _ test _ store > : complex _ navigations _ owned _ query _ fixture _ base < t _ test _ store > where t _ test _ store : test _ store </@> <%> <*> protected override void on _ model _ creating ( model _ builder model _ builder ) -> public test _ sql _ logger _ factory test _ sql _ logger _ factory = > ( test _ sql _ logger _ factory ) service _ provider . get _ required _ service < i _ logger _ factory > ( ) ; </%> <%> <+> protected override void on _ model _ creating ( model _ builder model _ builder , db _ context context ) </%> <%> <+> , context </%>
 <@> public interface i _ identity _ generator < t > </@> <%> <*> t -> object </%>
<%> <*> runtime -> i </%> <@> return new runtime _ model ( model , new entity _ key _ factory _ source ( ) ) ; </@> <%> <*> runtime -> i </%>
<%> <*> runtime -> i </%> <@> return new runtime _ model ( model , new entity _ key _ factory _ source ( ) ) ; </@> 
<%> <-> using microsoft _ data _ entity _ internal ; using microsoft _ data _ entity _ metadata ; </%> <%> <-> using microsoft _ framework _ logging ; </%> <@> public class database : i _ accessor < i _ data _ store _ creator > , i _ accessor < i _ logger > , i _ accessor < i _ model > , i _ accessor < i _ service _ provider > </@> <%> <-> private readonly lazy _ ref < i _ logger > logger ; </%> <%> <*> not _ null i _ data _ store _ creator data _ store _ creator , not _ null i _ logger _ factory logger _ factory ) -> not _ null i _ data _ store _ creator data _ store _ creator ) </%>
<%> <-> using system ; using system _ collections _ generic ; using system _ linq ; using jet _ brains _ annotations ; using microsoft _ data _ entity _ metadata ; </%> <%> <-> using microsoft _ data _ entity _ utilities ; </%> <@> public class sql _ server _ value _ generation _ strategy _ convention : i _ key _ convention , i _ foreign _ key _ removed _ convention , i _ foreign _ key _ convention , i _ model _ convention </@> <%> <-> public virtual internal _ key _ builder apply ( internal _ key _ builder key _ builder ) { check . not _ null ( key _ builder , nameof ( key _ builder ) ) ; var key = key _ builder . metadata ; configure _ value _ generation _ strategy ( key _ builder . model _ builder . entity ( key . entity _ type . name , configuration _ source . convention ) , key . properties , true ) ; return key _ builder ; </%>
<%> <-> using microsoft _ data _ entity _ metadata ; </%> <@> namespace microsoft _ data _ entity _ sql _ server _ tests _ metadata _ conventions </@> 
<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> <@> mapping _ hints . with ( default _ hints ) ) </@> 
<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> <@> mapping _ hints . with ( default _ hints ) ) </@> 
<%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> <@> mapping _ hints . with ( default _ hints ) ) </@> <%> <*> store -> provider </%> <%> <*> store -> provider </%>
<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> <@> mapping _ hints . with ( default _ hints ) ) </@> 
<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> <@> mapping _ hints . with ( default _ hints ) ) </@> 
<%> <+> can _ be _ null </%> <%> <*> default -> null </%> <@> mapping _ hints . with ( default _ hints ) ) </@> <%> <-> , default _ hints </%>
<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> <@> mapping _ hints . with ( default _ hints ) ) </@> 
<%> <+> can _ be _ null </%> <%> <*> default -> null </%> <@> mapping _ hints . with ( default _ hints ) ) </@> 
<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> <@> mapping _ hints . with ( default _ hints ) ) </@> 
<%> <*> select -> select [ c ] . [ customer _ id ] , </%> <%> <-> ] , [ c ] . [ customer _ id </%> <%> <*> select -> select [ c ] . [ customer _ id ] , </%> <%> <-> ] , [ c ] . [ customer _ id </%> <@> select [ o ] . [ customer _ id ] , [ o ] . [ order _ date ] , [ o ] . [ order _ id ] </@> <%> <*> select -> select [ c ] . [ customer _ id ] , </%> <%> <-> ] , [ c ] . [ customer _ id </%>
<%> <+> private readonly byte precision ; </%> <@> private readonly byte precision ; public relational _ decimal _ type _ mapping ( byte scale , byte precision ) : base ( STR + scale + STR + precision + STR , db _ type . decimal ) </@> <%> <+> precision = precision ; </%> <%> <-> precision = precision ; </%>
<%> <*> ) -> & & is _ concurrency _ token ) </%> <@> if ( is _ key ) { return key _ byte _ array _ mapping ; } if ( is _ concurrency _ token ) { return row _ version _ mapping ; } return non _ key _ byte _ array _ mapping ; </@> <%> <-> if ( property _ type = = typeof ( decimal ) ) { return decimal _ mapping ; } </%>
<%> <*> annotation value ; return annotations . has _ value & & annotations . value . try _ get _ value ( new annotation ( annotation _ name , STR ) , out value ) ? value . value : null ; -> return annotations [ annotation _ name ] ; </%> <%> <*> var annotation = new annotation ( annotation _ name , value ) ; annotations . value = annotations . value . remove ( annotation ) . add ( annotation ) ; -> annotations [ annotation _ name ] = value ; </%> <@> public virtual i _ read _ only _ list < annotation > annotations </@> <%> <*> get { return annotations . has _ value ? ( i _ read _ only _ list < annotation > ) annotations . value : immutable _ list < annotation > . empty ; } -> get { return annotations ; } </%> <%> <-> _ read _ only </%> <%> <*> list -> enumerable </%>
 <@> state _ manager . save _ changes _ async ( mock . of < data _ store > ( ) ) . wait ( ) ; </@> <%> <-> mock < </%> <%> <-> > </%> <%> <-> _ mock </%>
<%> <-> STR , </%> <%> <*> command _ option _ type . single _ value -> STR </%> <%> <*> if -> if ( string . is _ null _ or _ empty </%> <%> <*> = = null -> ) </%> <@> logger . log _ error ( STR , name . name ) ; migration . show _ help ( add . name ) ; </@> <%> <*> return add _ migration ( name . value , context . value ( ) , startup _ project . value ( ) ) ; -> add _ migration ( name . value , context . value ( ) , startup _ project . value ( ) ) ; </%> <%> <+> return 0 ; </%> <%> <-> } ) ; migration . command ( STR , apply = > </%>
<%> <*> int -> void </%> <@> return execute ( </@> 
<%> <*> root -> first </%> <%> <*> root -> first </%> <@> return expression . lambda < func < materialization _ context , object > > ( materializer , materialization _ context _ parameter ) ; </@> <%> <*> root -> first </%> <%> <*> root -> first </%> <%> <*> typeof ( object ) -> entity _ type . clr _ type </%>
 <@> logger . log _ warning ( relational _ design _ event _ id . missing _ schema _ warning , ( ) = > relational _ design _ strings . missing _ schema ( schema _ selection . text ) ) ; </@> <%> <*> logger . log _ warning ( relational _ design _ event _ id . missing _ table _ warning , ( ) = > relational _ design _ strings . missing _ table ( table _ selection . text ) ) ; -> logger . missing _ table _ warning ( table _ selection . text ) ; </%>
<%> <*> logger . log _ warning ( relational _ design _ event _ id . missing _ schema _ warning , ( ) = > relational _ design _ strings . missing _ schema ( schema _ selection . text ) ) ; -> logger . missing _ schema _ warning ( schema _ selection . text ) ; </%> <@> logger . log _ warning ( relational _ design _ event _ id . missing _ table _ warning , ( ) = > relational _ design _ strings . missing _ table ( table _ selection . text ) ) ; </@> 
 <@> logger . log _ warning ( relational _ design _ event _ id . missing _ primary _ key _ warning , ( ) = > relational _ design _ strings . missing _ primary _ key ( table . display _ name ) ) ; </@> <%> <-> logger . log _ warning ( relational _ design _ event _ id . primary _ key _ columns _ not _ mapped _ warning , ( ) = > relational _ design _ strings . primary _ key _ error _ property _ not _ found ( </%>
<%> <*> intercepting -> diagnostics </%> <@> check . not _ null ( model , nameof ( model ) ) , </@> <%> <*> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ intercepting _ logger < logger _ category . query > logger ) -> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ diagnostics _ logger < logger _ category . query > logger ) </%> <%> <-> check . not _ null ( </%> <%> <-> nameof ( logger ) ) , </%>
<%> <*> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ entity _ query _ model _ visitor _ factory entity _ query _ model _ visitor _ factory ) -> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ entity _ query _ model _ visitor _ factory entity _ query _ model _ visitor _ factory ) </%> <%> <-> check . not _ null ( </%> <%> <-> nameof ( entity _ query _ model _ visitor _ factory ) ) , </%> <@> not _ null i _ requires _ materialization _ expression _ visitor _ factory requires _ materialization _ expression _ visitor _ factory ) = > new query _ compilation _ context _ dependencies ( model , logger , entity _ query _ model _ visitor _ factory , check . not _ null ( requires _ materialization _ expression _ visitor _ factory , nameof ( requires _ materialization _ expression _ visitor _ factory ) ) , current _ context ) ; </@> <%> <*> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ current _ db _ context current _ context ) -> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ current _ db _ context current _ context ) </%> <%> <-> check . not _ null ( current _ context , nameof ( </%> <%> <-> ) ) </%>
<%> <+> i _ enumerable < </%> <%> <*> [ ] -> > </%> <@> schema _ filters . to _ list ( ) , table _ filters . to _ list ( ) , use _ data _ annotations , overwrite _ files ) . result ; </@> 
 <@> sql _ select . to _ string ( ) , </@> <%> <*> string -> sql _ select </%>
 <@> sql _ select . to _ string ( ) , </@> <%> <*> string -> sql _ select </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> pending _ collection _ joins . add ( ( get _ identifying _ projection ( ) , inner _ select _ expression . get _ identifying _ projection ( ) , inner _ select _ expression ) ) ; </@> <%> <*> int collection _ id , expression shaper _ expression , i _ navigation navigation ) { -> int collection _ index , int collection _ id , expression shaper _ expression , i _ navigation navigation ) </%> <%> <-> var snapshot = pending _ collection _ joins [ collection _ id ] ; </%> <%> <+> { </%> <%> <*> outer -> inner _ select </%> <%> <*> key -> expression </%> <%> <*> convert -> pending </%> <%> <*> key -> collection </%> <%> <*> expressions ( snapshot . outer -> joins [ collection </%> <%> <*> key ) -> index ] </%> <%> <*> inner _ select -> outer </%> <%> <*> expression -> identifier </%> <%> <*> snapshot . inner -> get _ unique </%> <%> <*> select _ expression -> identifier ( ) </%>
<%> <-> private readonly list < parameter _ expression > variables = new list < parameter _ expression > ( ) ; private readonly list < expression > expressions = new list < expression > ( ) ; </%> <@> expressions . add ( visit ( expression ) ) ; return expression . block ( variables , expressions ) ; </@> 
<%> <+> public virtual entity _ materializer _ source entity _ materializer _ source { get { return configuration . services . entity _ materializer _ source ; } } </%> <@> configuration . services . entity _ key _ factory _ source , configuration . services . entity _ materializer _ source , </@> 
 <@> = > database _ facade . create _ execution _ strategy ( ) . execute ( database = > database . get _ relational _ service < i _ relational _ connection > ( ) . open ( ) , database _ facade ) ; </@> <%> <+> database _ facade , </%> <%> <-> , database _ facade </%> <%> <+> database _ facade , </%>
<%> <*> = > database _ facade . create _ execution _ strategy ( ) . execute ( database = > database . get _ relational _ service < i _ relational _ connection > ( ) . open ( ) , database _ facade ) ; -> = > database _ facade . create _ execution _ strategy ( ) . execute ( database _ facade , database = > database . get _ relational _ service < i _ relational _ connection > ( ) . open ( ) ) ; </%> <@> = > database _ facade . create _ execution _ strategy ( ) . execute _ async ( ( database , ct ) = > database . get _ relational _ service < i _ relational _ connection > ( ) . open _ async ( cancellation _ token ) , database _ facade , cancellation _ token ) ; </@> <%> <+> database _ facade , </%>
<%> <-> , operation </%> <@> return strategy . execute _ async ( ( operation _ scoped , ct ) = > operation _ scoped ( ) , operation , default ( cancellation _ token ) ) ; </@> <%> <+> operation , </%> <%> <-> , operation </%>
<%> <+> can _ be _ null t _ state state , </%> <@> can _ be _ null func < t _ state , cancellation _ token , task < bool > > verify _ succeeded , can _ be _ null t _ state state , not _ null db _ context context , </@> <%> <*> = > check . not _ null ( strategy , nameof ( strategy ) ) . execute _ async ( async ( s , c ) = > { using ( var transaction = await s . context . database . begin _ transaction _ async ( c ) ) -> = > execute _ in _ transaction _ async ( </%> <%> <+> strategy , state , operation , verify _ succeeded , ( c , ct ) = > c . database . begin _ transaction _ async ( ct ) , cancellation _ token ) ; public static t _ result execute _ in _ transaction < t _ state , t _ result > ( </%>
 <@> = > dependencies . execution _ strategy _ factory . create ( ) . execute ( connection = > ( int ) create _ has _ tables _ command ( ) . execute _ scalar ( connection ) ! = 0 , connection ) ; </@> <%> <*> = > dependencies . execution _ strategy _ factory . create ( ) . execute _ async ( async ( connection , ct ) = > ( int ) await create _ has _ tables _ command ( ) . execute _ scalar _ async ( connection , cancellation _ token : ct ) ! = 0 , connection , cancellation _ token ) ; -> = > dependencies . execution _ strategy _ factory . create ( ) . execute _ async ( connection , </%> <%> <+> async ( connection , ct ) = > ( int ) await create _ has _ tables _ command ( ) . execute _ scalar _ async ( connection , cancellation _ token : ct ) ! = 0 , cancellation _ token ) ; </%>
<%> <*> tests -> test </%> <@> new execution _ strategy _ context ( new execution _ strategy _ context _ dependencies ( new current _ db _ context ( context ) , null , null ) ) , </@> <%> <*> new execution _ strategy _ context ( new execution _ strategy _ context _ dependencies ( new current _ db _ context ( context ) , null , null ) ) , -> context , </%>
<%> <*> new execution _ strategy _ context ( new execution _ strategy _ context _ dependencies ( new current _ db _ context ( context ) , null , null ) ) , -> context , </%> <@> new execution _ strategy _ context ( new execution _ strategy _ context _ dependencies ( new current _ db _ context ( context ) , null , null ) ) , </@> 
 <@> public virtual void add _ foreign _ key ( [ not _ null ] foreign _ key foreign _ key ) </@> <%> <+> dependent _ </%>
 <@> assert . throws < argument _ null _ exception > ( ( ) = > new entity _ entry ( null , new random ( ) ) ) . param _ name ) ; </@> <%> <-> assert . throws < argument _ null _ exception > ( ( ) = > new entity _ entry ( new mock < change _ tracker > ( ) . object , null ) ) . param _ name ) ; assert . equal ( STR , assert . throws < argument _ null _ exception > ( ( ) = > new entity _ entry < random > ( null , new random ( ) ) ) . param _ name ) ; assert . equal ( STR , </%>
<%> <-> using microsoft _ data _ entity _ metadata ; </%> <@> namespace microsoft _ data _ entity _ tests _ metadata </@> <%> <*> public void throws _ when _ referenced _ key _ not _ on _ referenced _ entity ( ) -> public void can _ create _ foreign _ key ( ) </%> <%> <+> { var entity _ type = new model ( ) . add _ entity _ type ( STR ) ; var dependent _ prop = entity _ type . get _ or _ add _ property ( STR , typeof ( int ) , shadow _ property : true ) ; var principal _ prop = entity _ type . get _ or _ add _ property ( STR , typeof ( int ) , shadow _ property : true ) ; </%>
<%> <-> using microsoft _ data _ entity _ metadata ; </%> <@> namespace microsoft _ data _ entity _ tests _ metadata </@> 
 <@> var property = value . key ; internal _ entry [ property ] = value . value ; if ( property . is _ read _ only _ after _ save ) { internal _ entry . set _ property _ modified ( property , is _ modified : false ) ; } </@> <%> <-> var property = value . key ; original _ values [ property ] = value . value ; if ( property . is _ read _ only _ after _ save ) </%>
 <@> if ( database _ name ! = null ) { extension = extension . with _ store _ name ( database _ name ) ; } </@> <%> <*> public static db _ context _ options _ builder < t _ context > use _ transient _ in _ memory _ database < t _ context > ( -> obsolete _ use _ use _ in _ memory _ database _ string _ instead _ the _ database _ will _ be _ shared _ anywhere _ the _ same _ name _ is _ used </%> <%> <+> public static db _ context _ options _ builder < t _ context > use _ in _ memory _ database < t _ context > ( </%>
<%> <-> using system _ reflection ; </%> <%> <-> using system _ component _ model _ data _ annotations _ schema ; </%> <@> public class sql _ server _ value _ generation _ strategy _ convention : database _ generated _ attribute _ convention , i _ model _ convention </@> <%> <-> public override internal _ property _ builder apply ( internal _ property _ builder property _ builder , database _ generated _ attribute attribute , member _ info clr _ member ) { property _ builder . sql _ server ( configuration _ source . data _ annotation ) . value _ generation _ strategy ( attribute . database _ generated _ option = = database _ generated _ option . identity ? sql _ server _ value _ generation _ strategy . identity _ column : ( sql _ server _ value _ generation _ strategy ? ) null ) ; return base . apply ( property _ builder , attribute , clr _ member ) ; } </%>
 <@> conditional _ fact _ skip _ task _ list </@> <%> <-> _ skip _ task _ list </%>
<%> <-> _ skip _ task _ list </%> <@> conditional _ fact _ skip _ task _ list </@> 
 <@> conditional _ theory _ skip _ task _ list </@> <%> <+> is _ async = false ; </%>
 <@> conditional _ theory _ skip _ task _ list </@> <%> <+> is _ async = false ; </%>
<%> <-> configuration _ source : </%> <%> <*> n = > n . foreign _ key . builder . can _ set _ navigation ( ( string ) null , n . is _ dependent _ to _ principal ( ) , configuration _ source ) ) ; -> n = > n . foreign _ key . builder . can _ set _ navigation ( ( string ) null , n . is _ dependent _ to _ principal ( ) , configuration _ source ) ) ; </%> <@> | | ! configuration _ source . value . overrides ( ignored _ configuration _ source ) ? true : false ; </@> 
 <@> foreach ( var detached _ relationship _ tuple in relationships . where ( r = > r . item ! = null ) ) </@> <%> <-> var new _ relationship = detached _ relationship _ tuple . item . attach ( entity _ type _ builder ) ; if ( new _ relationship ! = null ) { detached _ relationship _ tuple . item . attach ( new _ relationship . metadata . resolve _ other _ entity _ type ( entity _ type _ builder . metadata ) . builder ) ; } } foreach ( var detached _ relationship _ tuple in relationships . where ( r = > r . item = = null ) ) { </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <*> issue -> investigate </%>
<%> <+> t </%> <@> ) as [ t ] order by [ ] . [ order _ id ] STR </@> 
<%> <-> c </%> <%> <-> c </%> <@> from [ carts ] as [ ] left join [ configuration ] as [ c ] on [ ] . [ configuration _ id ] = [ c ] . [ id ] STR </@> 
<%> <-> var new _ table = ( table _ expression _ base ) visit ( column _ expression . table ) ; </%> <@> return column _ expression . update ( new _ table ) ; </@> 
<%> <+> t </%> <@> ) as [ t ] on [ ] . [ customer _ id ] = [ t ] . [ customer _ id ] group by [ t ] . [ customer _ id ] STR </@> 
 <@> foreach ( var mutable _ property in entity _ type . get _ properties ( ) ) { var property = ( i _ property ) mutable _ property ; </@> <%> <-> mutable _ </%>
<%> <-> private configuration _ source ? is _ unique _ configuration _ source ; </%> <@> public virtual bool is _ unique ( bool? is _ unique , configuration _ source configuration _ source ) </@> <%> <+> . overrides ( metadata </%> <%> <*> can -> get </%> <%> <-> set ( </%> <%> <*> , metadata . is _ unique . has _ value ) -> ( ) ) </%> <%> <-> . value </%> <%> <-> if ( ( is _ unique _ configuration _ source = = null ) & & ( metadata . is _ unique ! = null ) ) { is _ unique _ configuration _ source = configuration _ source . explicit ; } else </%>
<%> <*> string . format ( STR , value . days , value . hours , value . minutes , value . seconds , value . milliseconds ) ; -> $ STR ; </%> <@> unknown _ literal ( value . value ) ; </@> 
 <@> new expression [ ] </@> <%> <-> else </%>
<%> <-> else </%> <@> new expression [ ] </@> 
 <@> benchmark _ iterations </@> <%> <-> _ iterations </%>
<%> <-> _ iterations </%> <@> benchmark _ iterations </@> 
<%> <-> entry _ </%> <@> return expression . lambda < func < internal _ entity _ entry , i _ snapshot > > ( constructor _ expression , entry _ parameter ) . compile ( ) ; </@> <%> <-> entry _ </%> <%> <-> var entity _ variable = entity _ type = = null ? null : expression . variable ( entity _ type , STR ) ; </%>
 <@> protected entity . metadata . model create _ model ( ) </@> <%> <-> entity . metadata . </%>
<%> <-> entity . metadata . </%> <@> var model = new entity . metadata . model ( ) ; </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <*> await using ( var test _ database = cosmos _ test _ store . create _ initialized ( database _ name ) ) { -> await using var test _ database = cosmos _ test _ store . create _ initialized ( database _ name ) ; </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <*> await using ( var test _ database = cosmos _ test _ store . create _ initialized ( database _ name ) ) { -> await using var test _ database = cosmos _ test _ store . create _ initialized ( database _ name ) ; </%>
<%> <*> int -> void </%> <@> public abstract task < int > execute _ async ( </@> 
 <@> rows _ affected + = commandbatch . execute ( </@> <%> <+> rows _ affected + = commandbatch . modification _ commands . count ; </%>
<%> <*> process -> bind </%> <@> ( sql _ select , property ) </@> <%> <*> entity -> sql </%> <%> <*> query -> select </%> <%> <*> entity -> sql </%> <%> <*> query -> select </%>
<%> <*> process -> bind </%> <@> ( sql _ select , property ) </@> 
<%> <*> process -> bind </%> <@> ( sql _ select , property ) </@> 
<%> <-> using jet _ brains _ annotations ; </%> <@> public readonly struct interception _ result < t _ result > </@> <%> <-> public interception _ result ( [ can _ be _ null ] t _ result result ) { result = result ; } public t _ result result { get ; } </%>
<%> <*> charindex -> left </%> <%> <-> n 'A' , </%> <%> <+> , len ( n 'A' ) </%> <%> <*> 1 -> n 'A' </%> <@> where [ e ] . [ customer _ id ] like n 'A' + n '%' and ( charindex ( n 'A' , [ e ] . [ customer _ id ] ) = 1 ) </@> 
 <@> when [ c ] . [ customer _ id ] like n 'S' + n '%' and ( charindex ( n 'S' , [ c ] . [ customer _ id ] ) = 1 ) </@> <%> <*> charindex -> left </%> <%> <-> n 'S' , </%> <%> <+> , len ( n 'S' ) </%> <%> <*> 1 -> n 'S' </%>
<%> <+> using microsoft _ data _ entity _ utilities ; </%> <@> public class ats _ batched _ data _ store _ tests : ats _ data _ store , i _ class _ fixture < mock < ats _ connection > > </@> <%> <-> : base ( build _ config ( ) , connection . object , new table _ entity _ adapter _ factory ( ) ) </%>
<%> <+> using microsoft _ data _ entity _ metadata ; </%> <%> <+> using microsoft _ data _ entity _ utilities ; </%> <@> public class ats _ data _ store _ tests : ats _ data _ store , i _ class _ fixture < mock < ats _ connection > > </@> <%> <-> : base ( build _ config ( ) , connection . object , new table _ entity _ adapter _ factory ( ) ) </%>
<%> <+> ! </%> <%> <+> continue ; } </%> <%> <+> { if ( target _ property . after _ save _ behavior = = property _ save _ behavior . save ) </%> <@> if ( target _ property . after _ save _ behavior = = property _ save _ behavior . save ) { target _ entry . set _ original _ value ( target _ property , target _ property . clr _ type . get _ default _ value ( ) ) ; } </@> <%> <-> target _ entry . set _ entity _ state ( entity _ state . unchanged ) ; </%> <%> <+> target _ entry . set _ entity _ state ( entity _ state . unchanged ) ; } if ( entry _ mapping . recreate _ row ) { continue ; </%>
 <@> return ( bits [ property _ index / bits _ per _ int ] & ( 1 < < property _ index % bits _ per _ int ) ) ! = 0 ; </@> <%> <+> ( </%> <%> <+> ) </%>
<%> <+> ( </%> <%> <+> ) </%> <@> if ( ( existing _ navigation ! = null & & ! can _ merge _ with ( existing _ navigation , inverse _ property _ info . name , target _ entity _ type _ builder ) ) ) </@> <%> <+> ( </%> <%> <+> ) </%>
<%> <+> ( </%> <%> <+> ) </%> <@> if ( constant _ expression = = null | | ( constant _ expression . value is i _ enumerable & & ( constant _ expression . type ! = typeof ( string ) & & constant _ expression . type ! = typeof ( byte [ ] ) ) ) ) </@> 
<%> <+> using system ; </%> <%> <-> using system _ component _ model ; using microsoft _ entity _ framework _ core _ internal ; </%> <%> <+> using microsoft _ entity _ framework _ core _ tests _ test _ utilities ; using microsoft _ extensions _ logging ; </%> <@> namespace microsoft _ entity _ framework _ core _ tests _ infrastructure </@> 
 <@> var relationship = derived _ dependent _ entity _ builder . relationship ( </@> <%> <*> convention -> explicit </%>
 <@> new expression _ string _ builder ( ) . build ( check . not _ null ( query , nameof ( query ) ) ) , </@> <%> <*> private readonly string query ; -> private static readonly expression _ equality _ comparer expression _ equality _ comparer </%> <%> <+> = new expression _ equality _ comparer ( ) ; private readonly expression query ; </%>
 <@> throw new invalid _ operation _ exception ( core _ strings . navigation _ collection _ wrong _ clr _ type ( navigation _ property . name , source _ clr _ type . full _ name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ; </@> <%> <*> navigation _ property . name , source _ clr _ type . full _ name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ; -> navigation _ property . name , </%>
<%> <*> throw new invalid _ operation _ exception ( core _ strings . navigation _ collection _ wrong _ clr _ type ( navigation _ property . name , source _ clr _ type . full _ name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ; -> throw new invalid _ operation _ exception ( </%> <%> <+> core _ strings . navigation _ collection _ wrong _ clr _ type ( navigation _ property . name , source _ clr _ type . name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ; </%> <@> navigation _ property . name , source _ clr _ type . full _ name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ; </@> 
<%> <+> using ( var context = create _ context ( ) ) { assert . equal ( fixture . customers . count - 1 , context . set < transaction _ customer > ( ) . count ( ) ) ; } } fact </%> <@> using ( var transaction = await context . database . get _ relational _ connection ( ) . begin _ transaction _ async ( ) ) </@> <%> <+> public async task relational _ transaction _ can _ be _ rolled _ back _ from _ context ( ) </%>
<%> <+> context . database . rollback _ transaction ( ) ; assert _ store _ initial _ state ( ) ; } } } fact </%> <@> using ( var transaction = context . database . get _ relational _ connection ( ) . begin _ transaction ( ) ) </@> <%> <-> . get _ relational _ connection ( ) </%>
 <@> using ( var transaction = await context . database . get _ relational _ connection ( ) . begin _ transaction _ async ( ) ) </@> <%> <-> . get _ relational _ connection ( ) </%>
 <@> using ( context . database . get _ relational _ connection ( ) . begin _ transaction ( ) ) </@> <%> <-> . get _ relational _ connection ( ) </%>
<%> <-> . get _ relational _ connection ( ) </%> <@> context . database . get _ relational _ connection ( ) . use _ transaction ( transaction ) ) ; </@> 
<%> <-> order _ detail , </%> <%> <-> asserter : ( o _ items , ef _ items ) = > { var o _ ids = o _ items . select ( i = > new { i . order _ id , i . product _ id } ) ; var ef _ ids = ef _ items . select ( i = > new { i . order _ id , i . product _ id } ) ; foreach ( var ef _ id in ef _ ids ) { assert . true ( o _ ids . contains ( ef _ id ) ) ; } foreach ( var o _ id in o _ ids ) { assert . true ( ef _ ids . contains ( o _ id ) ) ; } } , </%> <@> assert _ query < order _ detail , order , order _ detail > ( </@> <%> <-> asserter : ( o _ items , ef _ items ) = > { var o _ ids = o _ items . select ( i = > new { i . order _ id , i . product _ id } ) ; var ef _ ids = ef _ items . select ( i = > new { i . order _ id , i . product _ id } ) ; foreach ( var ef _ id in ef _ ids ) { </%>
<%> <-> , product </%> <@> assert _ query < customer , order , customer > ( </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <*> using ( var ctx = create -> assert _ query </%> <%> <*> context -> scalar < customer , order > </%> <%> <*> ) ) { -> ( cs , os ) = > </%> <%> <-> var query = </%> <%> <*> ctx . customers -> cs </%> <%> <*> ctx . orders -> os </%> <%> <+> ) </%> <%> <-> var result = query . to _ list ( ) ; </%>
 <@> expression left , expression right , expression left _ is _ null , expression right _ is _ null ) = > new not _ nullable _ expression ( expression . or _ else ( expression . and _ also ( expression . not _ equal ( left , right ) , </@> <%> <+> expression . not _ equal ( left , right ) , expression . and _ also ( </%> <%> <+> ) </%>
<%> <*> ) -> ) </%> <@> expression left , expression right , expression left _ is _ null , expression right _ is _ null ) = > new not _ nullable _ expression ( expression . and _ also ( expression . or _ else ( expression . not _ equal ( left , right ) , </@> <%> <+> expression . not _ equal ( left , right ) , expression . or _ else ( </%> <%> <+> ) </%>
<%> <-> expression . or _ else ( expression . not _ equal ( left , right ) , </%> <%> <+> expression . not _ equal ( left , right ) , expression . or _ else ( </%> <@> expression left , expression right , expression left _ is _ null , expression right _ is _ null ) = > new not _ nullable _ expression ( expression . and _ also ( expression . or _ else ( expression . equal ( left , right ) , </@> <%> <+> expression . equal ( left , right ) , expression . or _ else ( </%> <%> <+> ) </%>
<%> <*> parameter _ name -> func < string > generate </%> <%> <-> generator </%> <%> <-> _ generator </%> <@> private readonly lazy _ ref < i _ read _ only _ list < column _ modification > > column _ modifications = new lazy _ ref < i _ read _ only _ list < column _ modification > > ( ( ) = > new column _ modification [ 0 ] ) ; </@> <%> <*> parameter _ name -> func < string > generate </%> <%> <-> generator </%> <%> <-> _ generator </%> <%> <*> parameter -> generate </%> <%> <*> name -> parameter </%> <%> <*> generator -> name </%> <%> <*> parameter -> generate </%> <%> <*> name -> parameter </%> <%> <*> generator -> name </%>
 <@> return create _ sql _ generator ( database ) . generate ( new [ ] { migration _ operation } ) . single ( ) ; </@> <%> <*> database = database ? ? new database _ model ( ) -> database = database ? ? new database _ model ( ) , </%> <%> <+> database _ model _ modifier = new database _ model _ modifier ( ) </%>
<%> <+> sql _ generator . database _ model _ modifier = new database _ model _ modifier ( ) ; </%> <@> return create _ sql _ generator ( database ) . generate ( new [ ] { migration _ operation } ) . single ( ) ; </@> 
<%> <*> relational -> command </%> <%> <*> command -> builder </%> <%> <*> builder -> fake </%> <@> command _ builder . relational _ parameter _ list , </@> <%> <*> relational -> add </%> <%> <*> command . parameters . count -> parameter _ calls </%>
<%> <*> relational -> command </%> <%> <*> command -> builder </%> <%> <*> builder -> fake </%> <@> command _ builder . relational _ parameter _ list , </@> <%> <*> relational -> add </%> <%> <*> command . parameters . count -> parameter _ calls </%>
<%> <*> relational -> command </%> <%> <*> command -> builder </%> <%> <*> builder -> fake </%> <@> command _ builder . relational _ parameter _ list , </@> <%> <*> relational -> add </%> <%> <*> command . parameters . count -> parameter _ calls </%>
<%> <*> relational -> command </%> <%> <*> command -> builder </%> <%> <*> builder -> fake </%> <@> command _ builder . relational _ parameter _ list , </@> <%> <*> relational -> add </%> <%> <*> command . parameters . count -> parameter _ calls </%>
<%> <-> using system ; </%> <@> using system _ diagnostics ; using microsoft _ entity _ framework _ core _ infrastructure ; using microsoft _ entity _ framework _ core _ internal ; </@> <%> <-> using microsoft _ extensions _ logging ; </%> <%> <+> _ factory </%> <%> <*> db -> relational </%> <%> <*> context -> transaction </%> <%> <*> transaction , i _ infrastructure < db _ transaction > -> factory </%> <%> <*> private readonly i _ db _ context _ transaction real _ transaction ; -> public relational _ transaction create ( </%> <%> <+> i _ relational _ connection connection , db _ transaction transaction , </%>
 <@> else { opened _ count + + ; } </@> <%> <*> + -> = 2 </%>
 <@> public async virtual task group _ by _ with _ aggregate _ function _ by _ navigation _ property ( ) </@> <%> <*> await assert _ query _ scalar < order > ( -> await assert _ query _ scalar < order > ( </%>
 <@> using ( var context = new db _ context _ test . early _ learning _ center ( in _ memory _ test _ helpers . instance . create _ service _ provider ( ) ) ) { var entity = new db _ context _ test . category { id = 1 , name = STR } ; </@> <%> <-> db _ context _ test . </%>
 <@> using ( var context = new db _ context _ test . early _ learning _ center ( service _ provider ) ) </@> <%> <-> db _ context _ test . </%>
<%> <-> db _ context _ test . </%> <@> using ( var context = new db _ context _ test . early _ learning _ center ( service _ provider ) ) </@> 
 <@> assert . true ( sqlite _ database _ facade _ extensions . is _ sqlite ( context . database ) ) ; </@> <%> <*> sqlite _ -> context . </%> <%> <-> _ facade _ extensions </%> <%> <-> context . database </%>
<%> <*> sqlite _ -> context . </%> <%> <-> _ facade _ extensions </%> <%> <-> context . database </%> <@> assert . false ( sqlite _ database _ facade _ extensions . is _ sqlite ( context . database ) ) ; </@> 
 <@> ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) </@> <%> <+> if ( async ) { </%>
 <@> ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) </@> <%> <+> if ( async ) { </%>
 <@> ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) </@> <%> <+> if ( async ) { </%>
 <@> ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) </@> <%> <+> if ( async ) { </%>
 <@> ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) </@> <%> <+> if ( async ) { </%>
 <@> ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) </@> <%> <+> if ( async ) { </%>
 <@> ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) </@> <%> <+> if ( async ) { </%>
 <@> ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) </@> <%> <+> if ( async ) { </%>
 <@> ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) </@> <%> <+> if ( async ) { </%>
<%> <+> sql _ server _ </%> <@> var sql _ server _ modification _ command _ batch _ factory = scoped _ provider . get _ service < modification _ command _ batch _ factory > ( ) as sql _ server _ modification _ command _ batch _ factory ; </@> 
<%> <*> out should _ reset _ to _ dependent -> out </%> <%> <*> out should _ reset _ principal _ properties -> out </%> <%> <*> out should _ reset _ dependent _ properties -> out </%> <@> dependent _ entity _ type : should _ invert ? dependent _ entity _ type : principal _ entity _ type ) ) </@> 
 <@> using ( var command </@> <%> <*> . build ( querying _ enumerable . relational _ query _ context . connection , querying _ enumerable . relational _ query _ context . parameter _ values ) ) { -> . build ( querying _ enumerable . relational _ query _ context . parameter _ values ) ; </%> <%> <-> cancellation _ token ) ; </%> <%> <*> command -> relational </%> <%> <*> builder . notify -> query </%> <%> <*> reader _ created ( data _ reader ) ; -> context . connection , </%> <%> <-> } </%> <%> <+> cancellation _ token , </%>
<%> <-> var executor = services . get _ required _ service < i _ sql _ statement _ executor > ( ) ; </%> <@> await executor . execute _ non _ query _ async ( connection , commands ) ; </@> 
 <@> using ( var command </@> <%> <*> . build ( querying _ enumerable . relational _ query _ context . connection , querying _ enumerable . relational _ query _ context . parameter _ values ) ) { -> . build ( querying _ enumerable . relational _ query _ context . parameter _ values ) ; </%> <%> <+> querying _ enumerable . relational _ query _ context . connection , false </%> <%> <+> data _ reader . db _ </%> <%> <-> } </%>
<%> <*> executor -> relational _ commands </%> <%> <-> , relational _ commands </%> <@> await executor . execute _ non _ query _ async ( connection , relational _ commands , cancellation _ token ) ; </@> 
<%> <*> long result _ percentile = 0 ; if ( run _ result . iteration _ counters . first ( ) is threaded _ iteration _ counter ) { result _ percentile = get _ percentile ( run _ result , i , c = > ( ( threaded _ iteration _ counter ) c ) . requests _ per _ second , true ) ; } else if ( run _ result . iteration _ counters . first ( ) is iteration _ counter ) { result _ percentile = get _ percentile ( run _ result , i , c = > ( ( iteration _ counter ) c ) . elapsed _ millis , true ) ; } var metric = string . format ( STR , percentile ) ; -> long result _ percentile = get _ percentile ( run _ result , i , property _ accessor , true ) ; </%> <%> <+> long result _ memory _ percentile = 0 ; result _ memory _ percentile = get _ percentile ( run _ result , i , c = > c . working _ set , true ) ; metric = string . format ( STR , percentile , test _ config . instance . runtime _ flavor ) ; </%> <@> scenario = string . format ( STR , run _ result . test _ name , test _ config . instance . runtime _ flavor ) . trim ( ) , </@> <%> <*> STR -> unit </%>
<%> <-> state _ manager _ </%> <@> protected virtual state _ manager _ dependencies state _ manager _ state _ manager _ dependencies { get ; } </@> 
<%> <*> string -> i _ property </%> <@> key _ properties _ map . add ( source _ property . name ) ; </@> <%> <+> var source _ table _ entry _ mapping _ map = shared _ table _ entry _ map < entry _ mapping > . create _ shared _ table _ entry _ map _ factory ( source . entity _ types , source _ state _ manager , </%>
<%> <+> if ( foreign _ key . principal _ key ! = foreign _ key . principal _ entity _ type . get _ primary _ key ( ) ) { string _ builder . append _ line ( ) . append ( STR ) . append ( code . literal ( foreign _ key . principal _ entity _ type . name ) ) . append ( STR ) . append ( string . join ( STR , foreign _ key . principal _ key . properties . select ( p = > code . literal ( p . name ) ) ) ) . append ( STR ) ; } } else { string _ builder . append _ line ( STR ) . append ( STR ) . append ( string . join ( STR , foreign _ key . properties . select ( p = > code . literal ( p . name ) ) ) ) . append ( STR ) ; generate _ foreign _ key _ annotations ( foreign _ key , string _ builder ) ; if ( foreign _ key . principal _ key ! = foreign _ key . principal _ entity _ type . get _ primary _ key ( ) ) { string _ builder . append _ line ( ) . append ( STR ) . append ( string . join ( STR , foreign _ key . principal _ key . properties . select ( p = > code . literal ( p . name ) ) ) ) . append ( STR ) ; } } } </%> <@> using ( string _ builder . indent ( ) ) { generate _ annotations ( foreign _ key . annotations . to _ array ( ) , string _ builder ) ; } </@> 
 <@> conditional _ fact _ skip </@> <%> <*> method -> projection </%> <%> <*> method -> projection </%> <%> <*> private static t client -> conditional </%> <%> <*> method < t > ( t t , object ) = > t ; -> fact </%>
 <@> cvs = > cvs . as _ no _ tracking ( ) ) ; </@> <%> <-> . as _ no _ tracking ( ) </%>
<%> <-> ( ) . as _ no _ tracking </%> <@> var results = context . customer _ queries . as _ no _ tracking ( ) . to _ array ( ) ; </@> <%> <-> . as _ no _ tracking ( ) </%>
<%> <-> . as _ no _ tracking ( ) </%> <@> ovs = > from ov in ovs . as _ no _ tracking ( ) </@> 
<%> <*> var smart _ card = add ( new t _ smart _ card { username = login . username , login = dependent _ navs ? login : null , card _ serial = rsa _ token . serial , issued = rsa _ token . issued } ) ; var smart _ card = add ( new t _ smart _ card { username = login . username , login = dependent _ navs ? login : null , card _ serial = rsa _ token . serial , issued = rsa _ token . issued } ) ; -> var smart _ card = add ( new t _ smart _ card { login = login , card _ serial = rsa _ token . serial , issued = rsa _ token . issued } ) ; </%> <%> <+> var smart _ card = add ( new t _ smart _ card { login = login , card _ serial = rsa _ token . serial , issued = rsa _ token . issued } ) ; </%> <@> username = login . username , login = dependent _ navs ? login : null </@> <%> <-> username = login . username , login = dependent _ navs ? login : null , </%>
<%> <*> username = login . username , login = dependent _ navs ? login : null -> login = login </%> <@> username = login . username , login = dependent _ navs ? login : null , </@> 
<%> <+> . append _ line ( STR ) . append _ line ( STR ) . append _ line ( STR ) </%> <@> . append _ line ( STR ) . append ( STR ) </@> <%> <+> . append _ line ( STR ) . append _ line ( STR ) . append _ line ( STR ) </%>
<%> <+> . append _ line ( STR ) . append _ line ( STR ) . append _ line ( STR ) </%> <@> . append _ line ( STR ) . append ( STR ) </@> <%> <*> public override string get _ end _ if _ script ( ) = > STR + environment . new _ line ; -> public override string get _ end _ if _ script ( ) </%> <%> <+> = > new string _ builder ( ) . append _ line ( STR ) . append _ line ( STR ) . to _ string ( ) ; </%>
 <@> fact _ skip _ tod </@> <%> <*> STR + eol + -> @ STR v _ count integer ; begin select count ( * ) into v _ count from all _ tab _ identity _ cols t </%> <%> <+> where t . table _ name = n ' people ' </%>
<%> <-> _ skip _ tod </%> <@> STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol , sql ) ; } fact _ skip _ tod </@> <%> <+> @ STR v _ count integer ; begin select count ( * ) into v _ count from all _ tab _ identity _ cols t where t . table _ name = n ' people ' </%>
<%> <*> STR + eol + -> end ; </%> <%> <+> go alter table </%> <%> <*> + eol , -> people STR modify STR lucky _ number STR int not null default NUM STR </%> <%> <-> _ skip _ tod </%> <@> STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol , sql ) ; } fact _ skip _ tod </@> 
 <@> fact _ skip _ tod </@> <%> <-> STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + </%>
 <@> query _ model . main _ from _ clause </@> <%> <-> foreach ( var body _ clause in query _ model . body _ clauses ) { body _ clause . transform _ expressions ( e = > extract _ query _ annotations ( e , query _ annotations ) ) ; } </%>
<%> <+> { if ( check _ possible _ injection ( analysis _ context , assignment _ expression _ syntax . right , identifier , location ) ) </%> <@> if ( check _ possible _ injection ( analysis _ context , assignment _ expression _ syntax . right , identifier , location ) ) { return true ; } break ; </@> <%> <+> break ; } </%> <%> <+> { if ( check _ possible _ injection ( analysis _ context , variable _ declarator _ syntax . initializer , identifier , </%>
<%> <+> } </%> <%> <+> { if ( check _ possible _ injection ( analysis _ context , variable _ declarator _ syntax . initializer , identifier , location ) ) </%> <@> if ( check _ possible _ injection ( analysis _ context , variable _ declarator _ syntax . initializer , identifier , location ) ) { return true ; } break ; </@> <%> <+> break ; } </%> <%> <*> private -> protected </%>
 <@> assert . equal ( unchecked ( ( byte? ) 1 ) , create _ and _ use _ factory ( entity _ type . find _ property ( STR ) ) ) ; </@> <%> <-> ( unchecked </%> <%> <-> ) </%> <%> <-> ( unchecked </%> <%> <-> ) </%> <%> <-> ( unchecked </%> <%> <-> ) </%>
<%> <+> var ef _ groupings = ef _ results . cast < i _ grouping < string , dynamic > > ( ) . to _ list ( ) ; foreach ( i _ grouping < string , dynamic > o _ grouping in o _ results ) { </%> <@> var countries = new string [ ] { STR , STR , STR , STR , STR , STR } ; </@> <%> <-> { var ef _ groupings = ef _ results . cast < i _ grouping < string , dynamic > > ( ) . to _ list ( ) ; foreach ( i _ grouping < string , dynamic > o _ grouping in o _ results ) </%> <%> <+> var ef _ groupings = ef _ results . cast < i _ grouping < string , dynamic > > ( ) . to _ list ( ) ; </%>
 <@> { if ( result ! = null ) { for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) </@> <%> <*> var entity _ or _ collection = entity _ accessors [ i ] ( result as t _ in ) ; if ( entity _ or _ collection ! = null ) -> for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) </%> <%> <*> tracking -> or </%> <%> <*> info -> collection </%> <%> <-> _ tracking </%> <%> <*> infos -> accessors </%> <%> <*> ; -> ( result as t _ in ) ; </%> <%> <*> tracking -> or </%> <%> <*> info . is _ enumerable _ target -> collection ! = null </%> <%> <*> foreach ( var entity in ( i _ enumerable ) entity _ or _ collection ) -> var entity _ tracking _ info = entity _ tracking _ infos [ i ] ; </%>
<%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a ) , </@> <%> <-> < order , bool > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%>
<%> <*> queryable < t -> set </%> <%> <*> item > -> source </%> <%> <*> predicate -> result </%> <%> <*> queryable < t -> set </%> <%> <*> item > -> source </%> <%> <*> predicate -> result </%> <%> <*> predicate -> result </%> <%> <*> predicate -> result </%> <%> <*> where t -> = > fixture . query </%> <%> <*> item : class -> asserter . assert _ any ( </%> <%> <-> = > fixture . query _ asserter . assert _ any ( </%> <@> = > fixture . query _ asserter . assert _ all ( query , query , predicate , predicate , is _ async ) ; </@> 
<%> <*> object -> t _ result </%> <%> <*> object -> t _ result </%> <@> = > fixture . query _ asserter . assert _ count ( query , query , is _ async ) ; </@> <%> <-> = > fixture . query _ asserter . assert _ count ( </%>
<%> <-> fixture . query _ asserter . </%> <%> <*> query -> is _ async </%> <%> <*> is _ async -> query </%> <@> = > fixture . query _ asserter . assert _ count ( query , query , predicate , predicate , is _ async ) ; </@> 
 <@> = > fixture . query _ asserter . assert _ long _ count ( query , query , is _ async ) ; </@> <%> <*> action < object , object > asserter = null , -> action < t _ result , t _ result > asserter = null , </%>
 <@> element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a ) ) ; </@> <%> <-> < owned _ person > </%> <%> <*> ops -> ss </%> <%> <*> ops -> ss . set < owned _ person > ( ) </%>
 <@> element _ asserter : ( e , a ) = > assert _ equal < owned _ person > ( e . p , a . p ) ) ; </@> <%> <-> < owned _ person > </%> <%> <*> ops -> ss </%> <%> <*> ops -> ss . set < owned _ person > ( ) </%>
<%> <*> ops -> ss </%> <%> <*> ops -> ss . set < owned _ person > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < moon > ( e , a ) ) ; </@> 
<%> <-> public task deletes _ database _ with _ filename ( ) { return delete _ database _ test ( async : false , open : false , file : true ) ; } conditional _ fact public task async _ deletes _ database ( ) { return delete _ database _ test ( async : true , open : false , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach public task async _ deletes _ database _ with _ filename ( ) { return delete _ database _ test ( async : true , open : false , file : true ) ; } conditional _ fact public task deletes _ database _ with _ opened _ connections ( ) { return delete _ database _ test ( async : false , open : true , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach public task deletes _ database _ with _ filename _ with _ opened _ connections ( ) { return delete _ database _ test ( async : false , open : true , file : true ) ; } conditional _ fact public task async _ deletes _ database _ with _ opened _ connections ( ) { return delete _ database _ test ( async : true , open : true , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach public task async _ deletes _ database _ with _ filename _ with _ opened _ connections ( ) { return delete _ database _ test ( async : true , open : true , file : true ) ; } private static async task delete _ database _ test ( bool async , bool open , bool file ) { using ( var test _ database = sql _ server _ test _ store . create _ initialized ( STR + ( file ? STR : STR ) , file ) ) { if ( ! open ) { test _ database . close _ connection ( ) ; } using ( var context = new sql _ server _ database _ creator _ test . blogging _ context ( test _ database ) ) { var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( context ) ; assert . true ( async ? await creator . exists _ async ( ) : creator . exists ( ) ) ; if ( async ) { assert . true ( await context . database . ensure _ deleted _ async ( ) ) ; } else { assert . true ( context . database . ensure _ deleted ( ) ) ; } assert . equal ( connection _ state . closed , context . database . get _ db _ connection ( ) . state ) ; assert . false ( async ? await creator . exists _ async ( ) : creator . exists ( ) ) ; assert . equal ( connection _ state . closed , context . database . get _ db _ connection ( ) . state ) ; } } } conditional _ fact public task noop _ when _ database _ does _ not _ exist ( ) { return noop _ when _ database _ does _ not _ exist _ test ( async : false , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach public task noop _ when _ database _ with _ filename _ does _ not _ exist ( ) { return noop _ when _ database _ does _ not _ exist _ test ( async : false , file : true ) ; } conditional _ fact public task async _ is _ noop _ when _ database _ does _ not _ exist ( ) { return noop _ when _ database _ does _ not _ exist _ test ( async : true , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach </%> <%> <-> async _ is _ </%> <%> <+> bool async </%> <%> <-> : true </%> <@> using ( var context = new sql _ server _ database _ creator _ test . blogging _ context ( test _ database ) ) { var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( context ) ; </@> 
<%> <+> , ambient _ transaction </%> <%> <+> , ambient _ transaction </%> <%> <+> , bool ambient _ transaction </%> <%> <+> , bool ambient _ transaction </%> <@> using ( var context = new sql _ server _ database _ creator _ test . blogging _ context ( test _ database ) ) </@> <%> <-> sql _ server _ database _ creator _ test . </%>
<%> <-> public task noop _ when _ database _ with _ filename _ exists _ and _ has _ schema ( ) { return noop _ when _ database _ exists _ and _ has _ schema _ test ( async : false , file : true ) ; } conditional _ fact public task async _ is _ noop _ when _ database _ exists _ and _ has _ schema ( ) { return noop _ when _ database _ exists _ and _ has _ schema _ test ( async : true , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach </%> <%> <-> async _ is _ </%> <%> <+> bool async </%> <%> <-> : true </%> <@> using ( var context = new sql _ server _ database _ creator _ test . blogging _ context ( test _ database ) ) </@> 
<%> <-> public class sql _ server _ database _ creator _ has _ tables _ test { conditional _ fact public task throws _ when _ database _ does _ not _ exist ( ) { return throws _ when _ database _ does _ not _ exist _ test ( async : false ) ; } conditional _ fact </%> <%> <*> task async -> class sql </%> <%> <*> throws -> server </%> <%> <*> when -> database </%> <%> <*> database -> creator </%> <%> <*> does -> has </%> <%> <*> not -> tables </%> <%> <*> exist ( ) -> test : sql _ server _ database _ creator _ test </%> <%> <*> return throws _ when _ database _ does _ not _ exist -> conditional </%> <%> <*> test ( async : true ) ; -> theory </%> <%> <-> } </%> <%> <+> inline _ data _ true </%> <%> <*> private static async task throws _ when _ database _ does _ not -> inline </%> <%> <*> exist -> data </%> <%> <*> test ( bool async ) -> false </%> <%> <+> public async task throws _ when _ database _ does _ not _ exist ( bool async ) </%> <@> var database _ creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; </@> 
<%> <*> async task async -> class sql </%> <%> <*> deletes -> server </%> <%> <*> ( ) -> _ creator _ delete _ test : sql _ server _ database _ creator _ test </%> <%> <*> await deletes _ database -> conditional </%> <%> <*> test ( async : true ) ; -> theory </%> <%> <-> } </%> <%> <+> inline _ data _ true _ true </%> <%> <*> private static async task deletes -> inline </%> <%> <*> database -> data </%> <%> <*> test ( bool async ) -> false _ false </%> <%> <+> public static async task deletes _ database ( bool async , bool ambient _ transaction ) </%> <@> var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; </@> <%> <+> using ( create _ transaction _ scope ( ambient _ transaction ) ) { </%>
<%> <+> } </%> <%> <*> conditional _ fact public task throws _ when _ database _ does _ not _ exist ( ) { return throws _ when _ database _ does _ not _ exist _ test ( async : false ) ; } conditional _ fact public task async _ throws _ when _ database _ does _ not _ exist ( ) { return throws _ when _ database _ does _ not _ exist _ test ( async : true ) ; } private static async task throws _ when _ database _ does _ not _ exist _ test ( bool async ) -> conditional _ theory </%> <%> <+> inline _ data _ true inline _ data _ false public async task throws _ when _ database _ does _ not _ exist ( bool async ) </%> <@> var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; </@> 
 <@> var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( connection _ string _ builder . to _ string ( ) ) ; </@> <%> <-> public class sql _ server _ database _ creator _ create _ tables _ test { conditional _ fact public task creates _ schema _ in _ existing _ database ( ) { return creates _ schema _ in _ existing _ database _ test ( async : false ) ; </%>
<%> <*> conditional _ fact public task throws _ if _ database _ does _ not _ exist ( ) { return throws _ if _ database _ does _ not _ exist _ test ( async : false ) ; } conditional _ fact public task async _ throws _ if _ database _ does _ not _ exist ( ) { return throws _ if _ database _ does _ not _ exist _ test ( async : true ) ; } private static async task throws _ if _ database _ does _ not _ exist _ test ( bool async ) -> conditional _ theory </%> <%> <+> inline _ data _ true inline _ data _ false public async task throws _ if _ database _ does _ not _ exist ( bool async ) </%> <@> var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; </@> 
<%> <-> public class sql _ server _ database _ creator _ create _ test { conditional _ fact public task creates _ physical _ database _ but _ not _ tables ( ) { return creates _ physical _ database _ but _ not _ tables _ test ( async : false ) ; } conditional _ fact </%> <%> <*> task async _ creates -> class sql </%> <%> <*> physical -> server </%> <%> <*> but -> creator </%> <%> <*> not -> create </%> <%> <*> tables ( ) -> test : sql _ server _ database _ creator _ test </%> <%> <*> return creates _ physical _ database _ but _ not _ tables -> conditional </%> <%> <*> test ( async : true ) ; -> theory </%> <%> <-> } </%> <%> <+> inline _ data _ true _ false </%> <%> <*> private static async task creates _ physical _ database _ but -> inline </%> <%> <*> not -> data </%> <%> <*> tables -> false </%> <%> <*> test ( bool async ) -> true </%> <%> <+> public async task creates _ physical _ database _ but _ not _ tables ( bool async , bool ambient _ transaction ) </%> <@> var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; </@> <%> <+> using ( create _ transaction _ scope ( ambient _ transaction ) ) { </%>
<%> <*> conditional _ fact public task throws _ if _ database _ already _ exists ( ) { return throws _ if _ database _ already _ exists _ test ( async : false ) ; } conditional _ fact public task async _ throws _ if _ database _ already _ exists ( ) { return throws _ if _ database _ already _ exists _ test ( async : true ) ; } private static async task throws _ if _ database _ already _ exists _ test ( bool async ) -> conditional _ theory </%> <%> <+> inline _ data _ true inline _ data _ false public async task throws _ if _ database _ already _ exists ( bool async ) </%> <@> var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; </@> 
<%> <+> using xunit ; </%> <@> public class in _ memory _ cross _ store _ fixture : cross _ store _ fixture < in _ memory _ test _ store > </@> <%> <*> i -> shared </%> <%> <*> service -> cross </%> <%> <*> provider service -> store _ fixture shared _ cross _ store </%> <%> <*> provider -> fixture </%> <%> <*> service _ provider = -> shared _ cross _ store _ fixture = new shared _ cross _ store _ fixture ( </%>
<%> <+> using xunit ; </%> <@> public class sql _ server _ cross _ store _ fixture : cross _ store _ fixture < sql _ server _ test _ store > </@> <%> <*> i -> shared </%> <%> <*> service -> cross </%> <%> <*> provider service -> store _ fixture shared _ cross _ store </%> <%> <*> provider -> fixture </%> <%> <*> service _ provider = -> shared _ cross _ store _ fixture = new shared _ cross _ store _ fixture ( </%>
<%> <+> using system ; </%> <@> public abstract class cross _ store _ fixture < t _ test _ store > where t _ test _ store : test _ store </@> <%> <-> t _ </%> <%> <+> type test _ store _ type </%> <%> <-> t _ </%>
 <@> public abstract class end _ to _ end _ test < t _ test _ store , t _ fixture > : i _ class _ fixture < t _ fixture > , i _ disposable </@> <%> <-> < t _ test _ store > </%>
<%> <*> return -> state _ entry [ property ] = </%> <@> public virtual async task < object > next _ async ( state _ entry state _ entry , i _ property property , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </@> 
 <@> . properties ( ps = > ps . property ( c = > c . name ) . column _ name ( STR ) ) ; </@> <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%>
 <@> . properties ( ps = > ps . property < string > ( STR ) ) ; </@> <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%>
<%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> <@> . properties ( ps = > ps . property < string > ( STR ) ) ; </@> 
<%> <*> builder . entity < branch > ( ) . key ( s = > s . id ) -> builder </%> <%> <*> properties -> entity < branch > </%> <%> <+> pb . key ( s = > s . id ) ; </%> <%> <*> ; -> ; </%> <@> . properties ( pb = > { pb . property ( s = > s . sh ) ; } ) ; </@> 
 <@> . properties ( ps = > ps . property ( c = > c . name ) . annotation ( STR , STR ) ) ; </@> <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%>
<%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> <@> . properties ( ps = > ps . property < string > ( STR ) . annotation ( STR , STR ) ) ; </@> <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%>
<%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> <@> . properties ( ps = > ps . property < string > ( STR ) . annotation ( STR , STR ) ) ; </@> <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%>
<%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> <@> . properties ( ps = > ps . property ( c = > c . name ) . use _ store _ sequence ( ) ) ; </@> 
<%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> <@> model _ builder . entity < customer > ( ) . properties ( ps = > ps . property < int > ( STR ) . column _ type ( STR ) ) ; </@> 
<%> <*> . key ( e = > e . id ) . properties ( ps = > { -> . key ( e = > e . id ) ; </%> <%> <-> } ) ; </%> <@> . properties ( ps = > ps . property ( e = > e . name ) ) ; </@> <%> <*> . entity < gearbox > ( ) . key ( g = > g . id ) . properties ( ps = > -> . entity < gearbox > ( ps = > </%> <%> <+> ps . key ( g = > g . id ) ; </%>
<%> <*> . entity < gearbox > ( ) . key ( g = > g . id ) . properties ( ps = > -> . entity < gearbox > ( ps = > </%> <%> <+> ps . key ( g = > g . id ) ; </%> <@> . properties ( ps = > { ps . property ( s = > s . name ) ; } ) ; </@> <%> <*> . entity < team > ( ) . key ( t = > t . id ) . properties ( ps = > -> . entity < team > ( ps = > </%> <%> <+> ps . key ( t = > t . id ) ; </%>
<%> <+> rc = native _ methods . sqlite _ step _ blocking ( connection . db _ handle , stmt , command _ timeout * NUM ) ; </%> <@> stmts . enqueue ( tuple . create ( stmt , rc ! = constants . sqlite _ done ) ) ; </@> 
<%> <+> foreign _ key . declaring _ </%> <%> <*> list -> hash _ set </%> <@> if ( dependent _ key _ value _ factory . try _ create _ from _ current _ values ( entry , out key ) ) </@> <%> <*> list -> hash _ set </%>
<%> <-> assert . null ( test _ listener . foreign _ key _ change ) ; </%> <%> <-> principal _ </%> <%> <-> assert _ detect _ changes _ no _ op ( change _ detector , state _ manager , test _ listener ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( build _ model ( ) ) ; </@> <%> <-> assert . equal ( entity _ state . modified , entry . entity _ state ) ; </%>
<%> <*> where ( [ p ] . [ discontinued ] = 0 and ( [ p ] . [ product _ id ] > NUM ) ) or ( [ p ] . [ discontinued ] = 1 and ( [ p ] . [ product _ id ] < = NUM ) ) STR -> where case when ( </%> <%> <+> . [ discontinued ] = 1 ) then cast ( 1 as bit ) else cast ( 0 as bit ) end < > case when ( . [ product _ id ] > NUM ) then cast ( 1 as bit ) else cast ( 0 as bit ) end STR </%> <@> where ( [ p ] . [ discontinued ] = 0 and [ p ] . [ discontinued ] = 0 ) or ( [ p ] . [ discontinued ] = 1 and [ p ] . [ discontinued ] = 1 ) STR </@> <%> <*> where ( ( [ p ] . [ product _ id ] < = NUM ) and ( [ p ] . [ product _ id ] < = NUM ) ) or ( ( [ p ] . [ product _ id ] > NUM ) and ( [ p ] . [ product _ id ] > NUM ) ) STR -> where case when ( </%>
 <@> public virtual entity _ state state = > state _ entry . entity _ state ; public virtual void set _ state ( entity _ state entity _ state ) </@> <%> <-> check . is _ defined ( entity _ state , STR ) ; state _ entry . set _ entity _ state ( entity _ state ) ; } </%> <%> <*> public virtual task set _ -> get { return </%> <%> <*> async ( -> entry . entity _ state ; } </%> <%> <-> entity _ state entity _ state , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </%> <%> <+> set </%> <%> <*> entity _ state -> value </%> <%> <-> return </%> <%> <-> _ async </%> <%> <*> entity _ state , false , cancellation _ token -> value </%> <%> <+> } </%>
<%> <*> theory inline _ data _ false inline _ data _ true public async task detects _ scalar _ property _ change ( bool async ) -> fact </%> <%> <+> public void detects _ scalar _ property _ change ( ) </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } </@> <%> <*> theory inline _ data _ false inline _ data _ true public async task skips _ detection _ of _ scalar _ property _ change _ for _ notification _ entities ( bool async ) -> fact </%> <%> <+> public void skips _ detection _ of _ scalar _ property _ change _ for _ notification _ entities ( ) </%>
<%> <*> theory inline _ data _ false inline _ data _ true public async task skips _ detection _ of _ scalar _ property _ change _ for _ notification _ entities ( bool async ) -> fact </%> <%> <+> public void skips _ detection _ of _ scalar _ property _ change _ for _ notification _ entities ( ) </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } </@> <%> <*> theory inline _ data _ false inline _ data _ true public async task detects _ principal _ key _ change ( bool async ) -> fact </%> <%> <+> public void detects _ principal _ key _ change ( ) </%>
 <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } </@> <%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%>
<%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } </@> 
 <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } </@> <%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%>
<%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } </@> 
 <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } </@> <%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%>
<%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } </@> 
 <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } </@> <%> <-> if ( async ) { </%>
<%> <-> } </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } </@> <%> <*> theory inline _ data _ false inline _ data _ true public async task brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ navigation ( bool async ) -> fact </%> <%> <+> public void brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ navigation ( ) </%>
<%> <+> public void brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ navigation ( ) </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } </@> <%> <-> theory inline _ data _ false </%>
<%> <+> public void brings _ in _ new _ entity _ set _ on _ dependent _ of _ one _ to _ one _ navigation ( ) </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } </@> <%> <-> theory inline _ data _ false </%>
 <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } </@> <%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } </%>
<%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } </@> <%> <*> theory inline _ data _ false inline _ data _ true public async task brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ self _ ref ( bool async ) -> fact </%> <%> <+> public void brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ self _ ref ( ) </%>
<%> <+> public void brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ self _ ref ( ) </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } </@> 
<%> <+> public void brings _ in _ new _ entity _ set _ on _ dependent _ of _ one _ to _ one _ self _ ref ( ) </%> <@> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } </@> 
<%> <-> < order _ query > </%> <%> <*> ovs -> ss </%> <%> <*> ovs -> ss . set < order _ query > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a ) , </@> <%> <*> < customer , order _ query > ( -> ( </%> <%> <*> ( cs , ovs ) -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%>
<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> <@> assert _ equal < customer > ( e . a , a . a ) ; assert _ equal < customer > ( e . b , a . b ) ; </@> <%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%>
<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> <@> assert _ equal < customer > ( e . a , a . a ) ; assert _ equal < customer > ( e . b , a . b ) ; </@> <%> <-> < customer > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%>
<%> <-> < customer > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> <@> assert _ collection < order > ( e . orders , a . orders ) ; </@> <%> <-> < customer > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%>
<%> <-> < customer > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> <@> assert _ collection < order > ( e . orders , a . orders ) ; </@> <%> <-> < order > </%>
<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> <@> assert _ collection < order > ( e . orders , a . orders ) ; </@> <%> <-> < order _ detail > </%> <%> <-> ods = > </%>
<%> <*> cs -> ss . set < customer > ( ) </%> <%> <*> os -> ss . set < order > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < int > ( e , a , ordered : true ) ) ; </@> 
<%> <-> < customer , order > </%> <%> <*> ( cs , os ) -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> <%> <*> select os -> select ss . set < order > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a ) ) ; </@> <%> <-> < customer , order > </%> <%> <*> ( cs , os ) -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> <%> <*> select os -> select ss . set < order > ( ) </%>
<%> <*> = os -> = ss . set < order > ( ) </%> <@> assert _ collection < int > ( e . order _ ids , a . order _ ids ) ; assert _ equal < customer > ( e . customer , a . customer ) ; </@> <%> <-> < employee > </%> <%> <-> es = > </%>
<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a , ordered : true ) ) ; </@> <%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%>
<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a , ordered : true ) ) ; </@> <%> <-> < order > </%>
<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a , ordered : true ) ) ) ) </@> <%> <-> < customer > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%>
<%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> <@> assert _ equal < cog _ tag > ( e . tag , a . tag ) ; assert _ equal < cog _ tag > ( e . tag , a . tag ) ; </@> <%> <-> < cog _ tag > </%> <%> <*> ts -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%>
 <@> assert _ equal < gear > ( e . a , a . a ) ; </@> <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%>
<%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; </@> <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <%> <-> < gear > </%>
<%> <-> < gear > </%> <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a ) ) ; </@> <%> <-> < gear , weapon > </%> <%> <*> ( gs , ws ) -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <%> <*> ws -> ss . set < weapon > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; </@> 
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a , ordered : true ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < string > ( e , a ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < string > ( e , a ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < bool > ( e , a ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < squad _ mission > ( e , a ) ) ; </@> <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%>
 <@> assert _ collection < weapon > ( e . first , a . first ) ; assert _ collection < weapon > ( e . second , a . second ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
 <@> assert _ collection < weapon > ( e . first , a . first ) ; assert _ collection < weapon > ( e . second , a . second ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
 <@> assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
 <@> assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
 <@> assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
 <@> assert _ collection < weapon > ( e . collection , a . collection ) ; assert _ collection < gear > ( e . collection , a . collection ) ; </@> <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%>
<%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; </@> <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%> <%> <-> < gear > </%>
<%> <-> < gear > </%> <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; </@> <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%> <%> <-> < gear > </%>
<%> <-> < gear > </%> <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; </@> <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%>
<%> <+> . to _ list ( ) </%> <@> assert _ collection < string > ( e . weapon _ names , a . weapon _ names ) ; </@> <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%>
<%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%> <%> <+> ) . to _ list ( </%> <@> element _ asserter : ( e , a ) = > assert _ collection < string > ( e , a ) ) ; </@> <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <+> ) . to _ list ( </%> <@> assert _ collection < string > ( e . report _ names , a . report _ names ) ; </@> <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%>
<%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> assert _ collection < string > ( e . weapons , a . weapons ) ; </@> <%> <-> < squad > </%>
<%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> assert _ collection < string > ( e . weapons , a . weapons ) ; </@> 
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a ) ) ; </@> 
 <@> element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a ) ) ; </@> <%> <-> < city > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < city > ( ) </%>
 <@> element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; </@> <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>
<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <@> assert _ collection < string > ( e . weapons , a . weapons ) ; </@> <%> <-> < weapon > </%> <%> <*> ws -> ss </%> <%> <*> ws -> ss . set < weapon > ( ) </%> <%> <*> ws -> ss </%> <%> <*> ws -> ss . set < weapon > ( ) </%>
<%> <-> < funky _ customer > </%> <%> <*> fcs -> ss </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <@> assert _ equal < funky _ customer > ( e . , a . ) ; assert _ equal < funky _ customer > ( e . , a . ) ; </@> <%> <-> < funky _ customer > </%> <%> <*> fcs -> ss </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%>
<%> <-> < funky _ customer > </%> <%> <*> fcs -> ss </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <@> assert _ equal < funky _ customer > ( e . , a . ) ; assert _ equal < funky _ customer > ( e . , a . ) ; </@> 
<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < int > ( e , a ) ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ equal < level > ( e , a ) , </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> <@> assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; </@> <%> <-> < level , level > </%> <%> <-> ( s , s ) </%> <%> <+> ss </%>
<%> <*> s -> ss . set < level > ( ) </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> <@> assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; </@> <%> <-> < level , level > </%> <%> <+> ss = > from in ss . set < level > ( ) . select _ many ( = > . one _ to _ one _ required _ f . one _ to _ one _ optional _ f . one _ to _ many _ required . default _ if _ empty </%> <%> <*> s , s -> ) </%>
<%> <*> join in s on maybe _ scalar < int > ( , ( ) = > . id ) equals . id -> join in ss . set < level > ( ) on maybe _ scalar < int > ( , ( ) = > . id ) equals . id into grouping </%> <%> <+> from in grouping . default _ if _ empty ( ) </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> <@> assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; </@> <%> <*> public virtual task select _ many _ with _ nested _ navigations _ explicit _ default _ if _ empty _ and _ additional _ joins _ outside _ of _ select _ many ( -> public virtual task multiple _ select _ many _ with _ nested _ navigations _ and _ explicit _ default _ if _ empty _ joined _ together ( </%> <%> <-> < level , level > </%> <%> <+> ss = > from in ss . set < level > ( ) . select _ many ( = > . one _ to _ one _ required _ f . one _ to _ one _ optional _ f . one _ to _ many _ required . default _ if _ empty </%> <%> <*> s , s -> ) </%>
<%> <*> on -> on </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> <@> assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; </@> <%> <*> public virtual task select _ many _ with _ nested _ navigations _ and _ explicit _ default _ if _ empty _ followed _ by _ select _ required _ navigation _ using _ same _ navs ( -> public virtual task select _ many _ with _ nested _ navigations _ and _ explicit _ default _ if _ empty _ followed _ by _ select _ required _ navigation _ using _ same _ navs ( </%> <%> <-> < level > </%>
 <@> assert _ equal < level > ( e . entity , a . entity ) ; assert _ collection < level > ( e . collection , a . collection ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <-> < level , level > </%> <%> <*> ( s , s ) -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> <@> assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; </@> <%> <-> < level , level > </%> <%> <*> ( s , s ) -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <-> < level , level > </%> <%> <*> ( s , s ) -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> <@> assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < level > ( e , a ) ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < level > ( e , a ) ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> element _ asserter : ( e , a ) = > assert _ collection < level > ( e , a ) ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
 <@> assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> assert _ collection < level > ( e . collection , a . collection ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; </@> 
<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; </@> <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>
<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <@> assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; </@> 
 <@> navigation ? . name , </@> <%> <+> { var related _ entity _ type = builder . model _ builder . entity ( typeof ( t _ related _ entity ) , configuration _ source . explicit ) . metadata ; var navigation = navigation _ expression ? . get _ property _ access ( ) ; return new collection _ navigation _ builder < t _ entity , t _ related _ entity > ( builder . metadata , </%>
<%> <+> else if ( select _ expression . is _ project _ star ) { sql . append ( select _ expression . subquery _ alias ) . append ( STR ) ; } </%> <@> sql . append ( select _ expression . is _ project _ star ? STR : STR ) ; </@> <%> <-> ; </%>
<%> <*> var full _ file _ name = path . combine ( output _ directory _ name , file _ name ) ; if ( file . exists ( full _ file _ name ) ) -> if ( file _ service . is _ file _ read _ only ( output _ directory _ name , file _ name ) ) </%> <@> var attributes = file . get _ attributes ( full _ file _ name ) ; if ( attributes . has _ flag ( file _ attributes . read _ only ) ) { read _ only _ files . add ( file _ name ) ; } </@> <%> <-> } private void output _ file ( string output _ directory _ name , string output _ file _ name , string contents ) </%>
<%> <*> if ( ! file . exists ( script _ path ) ) -> if ( file . exists ( STR + script _ path ) ) </%> <%> <+> { script _ path = STR + script _ path ; } else </%> <@> script _ path = path . combine ( app _ base , path . get _ file _ name ( script _ path ) ) ; </@> 
<%> <*> if ( ! file . exists ( script _ path ) ) -> if ( file . exists ( STR + script _ path ) ) </%> <%> <+> { script _ path = STR + script _ path ; } else </%> <@> script _ path = path . combine ( app _ base , path . get _ file _ name ( script _ path ) ) ; </@> 
<%> <+> < logging </%> <%> <*> factory logger -> model </%> <%> <*> factory -> validator > logger </%> <%> <*> new lazy _ ref < i _ logger > ( logger _ factory . create _ logger < model _ validator > ) ; -> logger ; </%> <@> protected virtual lazy _ ref < i _ logger > logger { get ; } protected override void show _ warning ( string message ) = > logger . value . log _ warning ( message ) ; </@> 
 <@> var string _ type _ mapping = dependencies . type _ mapping _ source . get _ mapping ( typeof ( string ) ) ; builder . append ( STR ) . append ( string _ type _ mapping . generate _ sql _ literal ( name ) ) ; </@> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>
<%> <*> var string _ type _ mapping = dependencies . type _ mapping _ source . get _ mapping ( typeof ( string ) ) ; builder . append ( STR ) . append ( string _ type _ mapping . generate _ sql _ literal ( name ) ) ; -> builder . append ( STR ) . append ( name ) ; </%> <@> builder . append ( STR ) . append ( string _ type _ mapping . generate _ sql _ literal ( value ) ) ; </@> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>
<%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <@> . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; </@> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>
<%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <@> . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; </@> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>
<%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <@> . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; </@> 
 <@> var string _ type _ mapping = dependencies . type _ mapping _ source . get _ mapping ( typeof ( string ) ) ; builder . append ( STR ) . append ( string _ type _ mapping . generate _ sql _ literal ( name ) ) ; </@> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>
<%> <*> var string _ type _ mapping = dependencies . type _ mapping _ source . get _ mapping ( typeof ( string ) ) ; builder . append ( STR ) . append ( string _ type _ mapping . generate _ sql _ literal ( name ) ) ; -> builder . append ( STR ) . append ( name ) ; </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <@> . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; </@> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>
<%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <@> . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; </@> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>
<%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <@> . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; </@> 
 <@> var resolvable _ relationships = new list < tuple < internal _ relationship _ builder , bool , resolution > > ( ) ; </@> <%> <*> var good _ match = true ; -> var same _ configuration _ source = true ; </%> <%> <+> var inverse _ navigation _ removed = false ; </%> <%> <+> var navigation _ to _ dependent _ name = navigation _ to _ dependent ? . name ; </%>
 <@> : t = > candidate _ naming _ service . generate _ candidate _ identifier ( t . name ) , </@> <%> <-> . name </%>
<%> <-> . name </%> <@> : t = > candidate _ naming _ service . generate _ candidate _ identifier ( t . name ) , </@> 
<%> <-> binary _ </%> <%> <+> member _ </%> <@> return expression . assign ( left , right ) ; </@> 
 <@> if ( ! ( ( column . table . primary _ key ? . columns . contains ( column ) ) ? ? false ) ) </@> <%> <+> } if ( ( bool? ) column [ scaffolding _ annotation _ names . concurrency _ token ] = = true ) { property . is _ concurrency _ token ( ) ; </%> <%> <-> column . get _ annotations ( ) . where ( a = > a . name ! = scaffolding _ annotation _ names . underlying _ store _ type ) ) ; </%>
 <@> var select _ expression = handler _ context . select _ expression ; prepare _ select _ expression _ for _ aggregate ( select _ expression ) ; </@> <%> <+> handler _ context . </%>
 <@> private internal _ entity _ entry get _ main _ entry ( i _ update _ entry entry ) </@> <%> <*> return ( internal _ entity _ entry ) -> return </%>
<%> <*> state -> update </%> <%> <*> manager -> adapter </%> <%> <*> get -> find </%> <%> <-> ( internal _ entity _ entry ) </%> <@> return ( internal _ entity _ entry ) entry ; }       public virtual i _ read _ only _ list < internal _ entity _ entry > get _ all _ entries ( [ not _ null ] i _ update _ entry entry ) { var entries = new list < internal _ entity _ entry > ( ) ; </@> <%> <*> internal -> i </%> <%> <*> entity -> update </%> <%> <*> internal -> i </%> <%> <*> entity -> update </%>
<%> <+> query _ sync _ objects . try _ remove ( cache _ key , out ) ; </%> <%> <*> lock -> if ( ! memory _ cache . try _ get _ value </%> <%> <*> compiled -> cache </%> <%> <*> query _ lock -> key , out compiled </%> <%> <*> object -> query </%> <%> <+> ) </%> <@> if ( ! memory _ cache . try _ get _ value ( cache _ key , out compiled _ query ) ) { compiled _ query = compiler ( ) ; memory _ cache . set ( cache _ key , compiled _ query ) ; } </@> 
<%> <-> property _ builder </%> <%> <*> if -> foreach </%> <%> <*> attributes ! = null -> var attribute in attributes </%> <%> <*> foreach ( var attribute in attributes ) -> process _ property _ added ( property _ builder , attribute , member _ info , context ) ; </%> <%> <+> if ( context . should _ stop _ processing ( ) ) </%> <@> property _ builder = apply ( property _ builder , attribute , member _ info ) ; if ( property _ builder = = null ) { break ; } </@> <%> <-> return property _ builder ; </%> <%> <-> public virtual bool apply ( internal _ property _ builder property _ builder , field _ info old _ field _ info ) { apply ( property _ builder ) ; return true ; } public abstract internal _ property _ builder apply ( </%>
 <@> public static void set _ sql _ server _ include _ properties ( [ not _ null ] this i _ mutable _ index index , i _ read _ only _ list < string > properties ) </@> <%> <+> [ not _ null ] </%>
<%> <+> [ not _ null ] </%> <@> not _ null this i _ convention _ index index , i _ read _ only _ list < string > properties , bool from _ data _ annotation = false ) </@> 
<%> <-> relationship _ builder </%> <@> var attributes = get _ attributes < required _ attribute > ( inverse . declaring _ entity _ type , inverse . name ) ; </@> <%> <-> relationship _ builder </%> <%> <-> relationship _ builder </%>
<%> <+> list < ( member _ info , i _ convention _ entity _ type ) > referencing _ navigations _ with _ attribute ) </%> <%> <+> i _ convention _ </%> <%> <+> i _ convention _ </%> <@> var inverse _ target _ entity _ type = model . find _ actual _ entity _ type ( referencing _ tuple . item ) ; </@> <%> <*> configuration -> from </%> <%> <-> source . </%> <%> <+> : true </%> <%> <+> i _ convention _ </%>
<%> <+> i _ convention _ </%> <@> & & entity _ type . model . find _ actual _ entity _ type ( referencing _ tuple . item ) = = entity _ type ) </@> <%> <+> i _ convention _ </%>
 <@> & & entity _ type . model . find _ actual _ entity _ type ( referencing _ tuple . item ) = = entity _ type ) </@> <%> <-> entity _ type . model . </%>
<%> <-> entity _ type . model . </%> <@> var other _ entity _ type = entity _ type . model . find _ actual _ entity _ type ( referencing _ navigations _ with _ attribute [ 0 ] . item ) ; </@> <%> <*> configuration -> from </%> <%> <-> source . </%> <%> <+> : true </%>
<%> <+> dependent _ entity _ type : null , configuration _ source : </%> <@> same _ configuration _ source = same _ configuration _ source ? ? false ; </@> 
 <@> = > foreign _ keys ? . cast < foreign _ key > ( ) ? ? enumerable . empty < foreign _ key > ( ) ; </@> <%> <-> ? . cast < key > ( ) </%> <%> <-> ? . cast < index > ( ) </%> <%> <*> protected override annotation on _ annotation _ set ( string name , annotation annotation , annotation old _ annotation ) -> protected override i _ convention _ annotation on _ annotation _ set ( </%> <%> <+> string name , i _ convention _ annotation annotation , i _ convention _ annotation old _ annotation ) </%>
<%> <-> ? . cast < foreign _ key > ( ) </%> <@> = > keys ? . cast < key > ( ) ? ? enumerable . empty < key > ( ) ; </@> <%> <-> ? . cast < index > ( ) </%> <%> <*> protected override annotation on _ annotation _ set ( string name , annotation annotation , annotation old _ annotation ) -> protected override i _ convention _ annotation on _ annotation _ set ( </%> <%> <+> string name , i _ convention _ annotation annotation , i _ convention _ annotation old _ annotation ) </%>
<%> <-> ? . cast < foreign _ key > ( ) </%> <%> <-> ? . cast < key > ( ) </%> <@> = > indexes ? . cast < index > ( ) ? ? enumerable . empty < index > ( ) ; </@> <%> <*> protected override annotation on _ annotation _ set ( string name , annotation annotation , annotation old _ annotation ) -> protected override i _ convention _ annotation on _ annotation _ set ( </%> <%> <+> string name , i _ convention _ annotation annotation , i _ convention _ annotation old _ annotation ) </%>
<%> <*> configuration -> internal </%> <%> <*> source ? remove -> entity _ type _ builder has _ no </%> <%> <*> start -> delay </%> <%> <*> batch -> conventions </%> <@> var removed _ key = metadata . remove _ key ( key . properties ) ; debug . assert ( removed _ key = = key ) ; </@> 
<%> <-> configuration _ source configuration _ source , </%> <%> <*> bool can _ override -> configuration </%> <%> <*> same -> source configuration </%> <%> <-> = true </%> <%> <-> debug . assert ( foreign _ key . declaring _ entity _ type = = metadata ) ; </%> <%> <*> if ( ! configuration _ source . overrides ( current _ configuration _ source ) | | ! ( can _ override _ same _ source | | ( configuration _ source ! = current _ configuration _ source ) ) ) -> if ( ! configuration _ source . overrides ( current _ configuration _ source ) ) </%> <@> var removed _ foreign _ key = metadata . remove _ foreign _ key ( foreign _ key ) ; if ( removed _ foreign _ key = = null ) { return null ; } debug . assert ( removed _ foreign _ key = = foreign _ key ) ; </@> <%> <*> current _ configuration _ source -> this </%>
<%> <*> public virtual internal _ relationship _ builder apply ( internal _ relationship _ builder relationship _ builder , navigation navigation ) -> public virtual void process _ navigation _ added ( i _ convention _ relationship _ builder relationship _ builder , i _ convention _ navigation navigation , i _ convention _ context < i _ convention _ navigation > context ) </%> <@> var attributes = get _ attributes < t _ attribute > ( navigation . declaring _ entity _ type , navigation . name ) ; </@> <%> <*> relationship -> process </%> <%> <*> builder = apply -> navigation _ added </%> <%> <+> , context </%> <%> <+> ( ( </%> <%> <*> relationship -> i </%> <%> <*> builder = = null -> readable _ convention _ context </%> <%> <+> context ) . should _ stop _ processing ( ) ) </%> <%> <-> return relationship _ builder ; </%>
<%> <*> weak -> defined </%> <%> <*> weak -> defined </%> <%> <*> weak -> defined </%> <%> <*> weak -> defined </%> <%> <-> ; set </%> <@> entity _ type _ builder = entity _ type _ builder ? ? relationship . metadata . declaring _ entity _ type . builder ; </@> <%> <*> weak -> defined </%>
<%> <+> var key _ values = get _ load _ values ( navigation , entry ) ; </%> <%> <*> . any ( v = > v = -> ! </%> <%> <-> ) </%> <%> <*> return task . from _ result ( 0 ) ; } -> await query ( navigation , key _ values ) . to _ list _ async ( cancellation _ token ) ; </%> <%> <+> } </%> <%> <*> return set . where ( build _ lambda ( key _ properties , new value _ buffer ( key _ values ) ) ) -> entry </%> <%> <*> to -> set </%> <%> <*> list -> is </%> <%> <*> async -> loaded </%> <%> <*> cancellation _ token -> navigation </%> <%> <*> read -> navigation navigation , internal </%> <%> <*> only -> entity </%> <%> <*> list < i _ property > key _ properties , object [ ] key _ values ) -> entry entry ) </%> <%> <+> var key _ values = get _ load _ values ( navigation , entry ) ; </%> <@> if ( key _ values . any ( v = > v = = null ) ) </@> <%> <*> set . where -> query </%> <%> <*> build _ lambda ( key _ properties -> navigation </%> <%> <-> new value _ buffer ( </%> <%> <-> ) ) </%> <%> <+> private i _ queryable < t _ entity > query ( i _ navigation navigation , object [ ] key _ values ) = > set . where ( build _ lambda ( get _ load _ properties ( navigation ) , new value _ buffer ( key _ values ) ) ) ; </%> <%> <*> read -> navigation navigation , internal </%> <%> <*> only -> entity </%> <%> <*> list < i _ property > key _ properties , object [ ] key _ values ) -> entry entry ) </%> <%> <*> key _ properties -> navigation </%> <%> <*> key _ values -> entry </%> <%> <+> private object [ ] get _ load _ values ( i _ navigation navigation , internal _ entity _ entry entry ) </%>
 <@> add _ provider _ services ( services . add _ entity _ framework ( ) ) ; </@> <%> <+> _ entity _ framework </%>
 <@> public virtual new relational _ query _ compilation _ context query _ compilation _ context </@> <%> <*> select _ expression try _ get _ select -> void add </%> <%> <*> expression -> query </%> <%> <*> ) -> , [ not _ null ] select _ expression select _ expression ) </%> <%> <+> check . not _ null ( query _ source , STR ) ; check . not _ null ( select _ expression , STR ) ; queries _ by _ source . add ( query _ source , select _ expression ) ; } public virtual select _ expression try _ get _ query ( [ not _ null ] i _ query _ source query _ source ) </%>
<%> <*> not -> can _ be </%> <@> = > property ( property _ type , property _ name , configuration _ source , type _ configuration _ source : configuration _ source ) ; </@> <%> <*> not -> can _ be </%> <%> <+> type _ </%> <%> <-> type _ </%> <%> <*> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : type _ configuration _ source ) ; -> property _ type , property _ name , member _ info : null , </%> <%> <+> type _ configuration _ source : type _ configuration _ source , </%>
<%> <*> not -> can _ be </%> <%> <+> type _ </%> <%> <*> , type -> : configuration </%> <%> <+> source , </%> <%> <*> not -> can _ be </%> <@> configuration _ source ? configuration _ source , configuration _ source ? type _ configuration _ source ) </@> <%> <*> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : type _ configuration _ source ) ; -> property _ type , property _ name , member _ info : null , </%> <%> <+> type _ configuration _ source : type _ configuration _ source , configuration _ source : configuration _ source ) ; </%> <%> <+> type _ </%> <%> <*> configuration _ source -> null </%> <%> <-> type _ </%> <%> <*> null -> configuration _ source </%>
<%> <*> not -> can _ be </%> <%> <+> type _ </%> <%> <*> , type -> : configuration </%> <%> <+> source , </%> <%> <*> not -> can _ be </%> <%> <+> type _ </%> <%> <-> type _ </%> <@> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : type _ configuration _ source ) ; </@> <%> <+> type _ </%> <%> <*> configuration _ source -> null </%> <%> <-> type _ </%> <%> <*> null -> configuration _ source </%>
<%> <*> not -> can _ be </%> <%> <+> type _ </%> <%> <-> type _ </%> <%> <*> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : type _ configuration _ source ) ; -> property _ type , property _ name , member _ info : null , </%> <%> <+> type _ configuration _ source : type _ configuration _ source , configuration _ source : configuration _ source ) ; </%> <@> property _ type : null , property _ name : property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : null ) ; </@> <%> <+> type _ </%> <%> <-> type _ </%>
<%> <+> type _ </%> <%> <*> configuration _ source -> null </%> <%> <-> type _ </%> <%> <*> null -> configuration _ source </%> <@> configuration _ source ? configuration _ source , configuration _ source ? type _ configuration _ source ) </@> 
<%> <+> type _ configuration _ source = configuration _ source . explicit ; } </%> <@> existing _ property , property _ name , property _ type , member _ info , configuration _ source , type _ configuration _ source ) ; </@> 
<%> <*> ) ; -> , from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention ) ; </%> <@> void i _ convention _ entity _ type _ builder . remove _ unused _ shadow _ properties ( </@> 
<%> <+> _ internal </%> <@> = > value _ buffer . with _ offset ( value _ buffer _ offset ) ; </@> 
<%> <-> using system _ data ; </%> <@> private static readonly dictionary < string , db _ type > type _ mapping = new dictionary < string , db _ type > </@> <%> <*> db _ type . byte -> STR </%> <%> <*> db _ type . decimal -> STR </%> <%> <*> db _ type . double -> STR </%> <%> <*> db _ type . int -> STR </%> <%> <*> db _ type . int -> STR </%> <%> <*> db _ type . int -> STR </%> <%> <*> db _ type . string -> STR </%>
<%> <*> schema -> function _ name </%> <%> <*> schema -> function _ name </%> <%> <*> function _ name -> schema </%> <%> <*> function _ name -> schema </%> <@> check . not _ empty ( value , nameof ( function _ name ) ) ; </@> <%> <*> public virtual string schema { get ; [ param : can _ be _ null ] set ; } -> public virtual string schema </%> <%> <+> { get { return schema ; } param _ can _ be _ null set { schema = value ; } } </%>
<%> <*> var entity _ type = get _ entity _ type ( entity ) ; var entry = try _ get _ entry ( entity _ type , entity ) ; return entry ! = null ? new entity _ entry ( entry ) : new entity _ entry ( this , entity ) ; -> var entry = try _ get _ entry ( entity ) ; </%> <%> <+> return entry ! = null ? new entity _ entry ( entry ) : new entity _ entry ( this , entity ) ; </%> <%> <*> i -> change </%> <%> <*> entity -> tracker </%> <%> <*> type get -> entry try </%> <%> <*> entity -> get </%> <%> <*> type -> entry </%> <%> <-> var entity _ type = model . entity _ type ( entity ) ; if ( entity _ type = = null ) { throw new invalid _ operation _ exception ( strings . type _ not _ in _ model ( entity . get _ type ( ) . name ) ) ; } return entity _ type ; } private change _ tracker _ entry try _ get _ entry ( i _ entity _ type entity _ type , object entity ) { var key = entity _ type . create _ entity _ key ( entity ) ; </%> <@> return identity _ map . try _ get _ value ( key , out entry ) & & reference _ equals ( entry . entity , entity ) ? entry : null ; </@> 
<%> <+> if ( converter ! = null ) { value = converter . convert _ to _ store ( value ) ; } </%> <%> <*> get -> unwrap </%> <%> <-> _ underlying </%> <@> parameter . value = ( converter ! = null ? converter . convert _ to _ store ( value ) : value ) ? ? db _ null . value ; </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> var customer = use _ string ? context . set < customer > ( ) . include ( STR ) </%>
<%> <+> } </%> <@> var entry = change _ tracker . entry ( entity ) ; </@> 
<%> <+> . node _ type </%> <%> <*> ( -> = expression _ type . </%> <%> <*> expression ) arguments ; -> init : </%> <%> <-> var expression = new _ array _ expression . expressions [ i ] . remove _ convert ( ) ; </%> <%> <+> new _ array _ </%> <%> <+> . expressions [ i ] </%> <%> <*> node -> remove </%> <%> <*> type -> convert ( </%> <%> <+> ) </%> <%> <*> case expression _ type . constant : var value = ( ( constant _ expression ) expression ) . value ; substitutions [ i ] = generate _ sql _ literal ( value ) ; -> case constant _ expression constant : </%> <%> <+> var value = constant . value ; substitutions [ i ] = generate _ sql _ literal ( value ) ; </%> <@> case expression _ type . parameter : var parameter = ( parameter _ expression ) expression ; </@> 
 <@> var derived _ properties = metadata . find _ derived _ properties ( property _ name ) ; detached _ properties = detach _ properties ( derived _ properties ) ; </@> <%> <*> clr -> member </%> <%> <*> property -> info </%> <%> <*> declaring -> member </%> <%> <*> entity _ type . clr _ type . get _ runtime _ properties ( ) . first _ or _ default ( p = > p . name = = property _ name ) -> info </%>
 <@> = > configuration _ source . convention . overrides ( relationship _ builder . metadata . get _ foreign _ key _ properties _ configuration _ source ( ) ) ? discover _ properties ( relationship _ builder ) : relationship _ builder ; </@> <%> <*> = > configuration _ source . convention . overrides ( relationship _ builder . metadata . get _ foreign _ key _ properties _ configuration _ source ( ) ) ? discover _ properties ( relationship _ builder ) : relationship _ builder ; -> = > discover _ properties ( relationship _ builder ) ; </%>
<%> <*> = > configuration _ source . convention . overrides ( relationship _ builder . metadata . get _ foreign _ key _ properties _ configuration _ source ( ) ) ? discover _ properties ( relationship _ builder ) : relationship _ builder ; -> = > discover _ properties ( relationship _ builder ) ; </%> <@> = > configuration _ source . convention . overrides ( relationship _ builder . metadata . get _ foreign _ key _ properties _ configuration _ source ( ) ) ? discover _ properties ( relationship _ builder ) : relationship _ builder ; </@> 
 <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>
<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> 
 <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>
<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> 
 <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>
<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>
<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> 
 <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>
<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> 
 <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>
<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> 
 <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>
<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> <@> fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </@> 
 <@> var lambda _ body = remap _ lambda _ body ( shaped _ query _ expression . shaper _ expression , lambda _ expression ) ; </@> <%> <+> shaped _ query _ </%> <%> <*> shaper -> shaped _ query </%> <%> <*> body -> expression </%> <%> <*> return -> var lambda _ body = </%> <%> <*> lambda _ expression . parameters . single ( ) , shaper _ body , lambda _ expression . body ) ; -> lambda _ expression . parameters . single ( ) , shaped _ query _ expression . shaper _ expression , lambda _ expression . body ) ; </%> <%> <+> var select _ expression = ( select _ expression ) shaped _ query _ expression . query _ expression ; lambda _ body = weak _ entity _ expanding _ expression _ visitor . expand ( select _ expression , lambda _ body ) ; return lambda _ body ; } </%>
<%> <*> = select _ expression . get _ mapped _ projection ( projection _ binding _ expression . projection _ member ) ; -> = entity _ projection _ expression ; </%> <@> return include _ expression . navigation . foreign _ key . is _ ownership ? visit ( include _ expression . entity _ expression ) : client _ eval ? base . visit _ extension ( include _ expression ) : null ; </@> 
<%> <-> ( </%> <%> <*> l . leaf _ b _ address . country -> o </%> <%> <*> = -> in ( </%> <%> <*> leaf -> owned </%> <%> <*> b -> person ' , n </%> <%> <*> ) and [ l . -> branch ' , n ' </%> <%> <*> _ address . country ] . [ -> ' , n ' </%> <%> <*> b _ address _ country _ planet _ id ] is not null -> a ' ) STR </%> <%> <-> ) as [ ] on [ t ] . [ id ] = [ ] . [ id ] left join ( select [ l . leaf _ a _ address ] . * from [ owned _ person ] as [ l . leaf _ a _ address ] where [ l . leaf _ a _ address ] . [ discriminator ] = n ' leaf _ a ' ) as [ ] on [ o ] . [ id ] = [ ] . [ id ] left join ( select [ l . leaf _ a _ address . country ] . * from [ owned _ person ] as [ l . leaf _ a _ address . country ] where ( [ l . leaf _ a _ address . country ] . [ discriminator ] = n ' leaf _ a ' ) and [ l . leaf _ a _ address . country ] . [ leaf _ a _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ b . branch _ address ] . * from [ owned _ person ] as [ b . branch _ address ] where [ b . branch _ address ] . [ discriminator ] in ( n ' leaf _ a ' , n ' branch ' ) ) as [ ] on [ o ] . [ id ] = [ ] . [ id ] left join ( select [ b . branch _ address . country ] . * from [ owned _ person ] as [ b . branch _ address . country ] where [ b . branch _ address . country ] . [ discriminator ] in ( n ' leaf _ a ' , n ' branch ' ) and [ b . branch _ address . country ] . [ branch _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ o . person _ address ] . * from [ owned _ person ] as [ o . person _ address ] where [ o . person _ address ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) ) as [ ] on [ o ] . [ id ] = [ ] . [ id ] left join ( select [ o . person _ address . country ] . * from [ owned _ person ] as [ o . person _ address . country ] where [ o . person _ address . country ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) and [ o . person _ address . country ] . [ person _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] where [ o ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) order by [ o ] . [ id ] STR @ STR from [ order ] as [ o . orders ] inner join ( select distinct [ ] . [ id ] from [ owned _ person ] as [ ] left join ( select [ l . leaf _ b _ address ] . * from [ owned _ person ] as [ l . leaf _ b _ address ] where [ l . leaf _ b _ address ] . [ discriminator ] = n ' leaf _ b ' ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ l . leaf _ b _ address . country ] . * from [ owned _ person ] as [ l . leaf _ b _ address . country ] where ( [ l . leaf _ b _ address . country ] . [ discriminator ] = n ' leaf _ b ' ) and [ l . leaf _ b _ address . country ] . [ leaf _ b _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ l . leaf _ a _ address ] . * from [ owned _ person ] as [ l . leaf _ a _ address ] where [ l . leaf _ a _ address ] . [ discriminator ] = n ' leaf _ a ' ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ l . leaf _ a _ address . country ] . * from [ owned _ person ] as [ l . leaf _ a _ address . country ] where ( [ l . leaf _ a _ address . country ] . [ discriminator ] = n ' leaf _ a ' ) and [ l . leaf _ a _ address . country ] . [ leaf _ a _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ b . branch _ address ] . * from [ owned _ person ] as [ b . branch _ address ] where [ b . branch _ address ] . [ discriminator ] in ( n ' leaf _ a ' , n ' branch ' ) ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ b . branch _ address . country ] . * from [ owned _ person ] as [ b . branch _ address . country ] where [ b . branch _ address . country ] . [ discriminator ] in ( n ' leaf _ a ' , n ' branch ' ) and [ b . branch _ address . country ] . [ branch _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ o . person _ address ] . * from [ owned _ person ] as [ o . person _ address ] where [ o . person _ address ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ o . person _ address . country ] . * from [ owned _ person ] as [ o . person _ address . country ] where [ o . person _ address . country ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) and [ o . person _ address . country ] . [ person _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] where [ ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) ) as [ ] on [ o . orders ] . [ client _ id ] = [ ] . [ id ] order by [ ] . [ id ] STR </%> <@> where [ o ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) STR </@> <%> <*> ( select -> [ owned _ person ] as [ ] on [ o ] . [ id ] = [ ] . [ id ] left join [ owned _ person ] as [ ] on </%> <%> <*> l -> ] </%> <%> <*> leaf _ a _ address -> [ id ] = [ </%> <%> <*> * from -> [ id ] left join </%> <%> <*> l -> ] on [ o ] </%> <%> <*> leaf _ a _ address -> [ id ] = [ </%> <%> <+> . [ id ] </%>
<%> <*> foreach ( var navigation in navigations . skip ( 1 ) ) { select _ clause _ expression = expression . property ( select _ clause _ expression , navigation . name ) ; } -> select _ clause _ expression </%> <%> <+> = navigations . skip ( 1 ) . aggregate ( select _ clause _ expression , ( current , navigation ) = > expression . property ( current , navigation . name ) ) ; </%> <@> if ( navigations . count ( ) > 1 ) </@> <%> <-> { return new navigation _ rewriting _ expression _ visitor ( query _ model _ visitor , entity _ query _ provider ) ; </%>
 <@> var enumerable = value as system . collections . i _ enumerable ; if ( enumerable ! = null & & ! ( value is string ) ) </@> <%> <-> . to _ string ( ) </%>
<%> <*> var enumerable = value as system . collections . i _ enumerable ; if ( enumerable ! = null & & ! ( value is string ) ) -> var enumerable = value as i _ enumerable ; </%> <%> <+> if ( enumerable ! = null & & ! ( value is string ) ) </%> <@> append _ action ( string _ builder , item . to _ string ( ) + STR ) ; </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <*> . select ( c = > c . orders . order _ by ( o = > o . order _ id ) . first _ or _ default ( ) ) ) ; -> . select ( c = > c . orders . order _ by ( o = > o . order _ id ) . first _ or _ default ( ) ) , </%> <%> <+> entry _ count : 2 ) ; </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <+> cs = > cs . order _ by ( c = > c . customer _ id ) . take ( 2 ) . select ( c = > c . orders . order _ by ( o = > o . order _ id ) . first _ or _ default ( ) ) , </%> <%> <*> cs = > cs . order _ by ( c = > c . customer _ id ) . take ( 2 ) . select ( c = > c . orders . order _ by ( o = > o . order _ id ) . first _ or -> entry </%> <%> <*> default ( ) ) -> count : 2 </%> <%> <-> _ skip _ issue </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <*> o = > o . order _ details . order _ by ( od = > od . product . product _ name ) . take ( 1 ) . first _ or _ default ( ) ) ) ; -> o = > o . order _ details . order _ by ( od = > od . product . product _ name ) . take ( 1 ) . first _ or _ default ( ) ) , </%> <%> <+> entry _ count : 2 ) ; </%>
 <@> var ctx = relational _ test _ helpers . instance . create _ context ( target _ model _ builder . model ) ; var model _ differ = create _ model _ differ ( ctx ) ; </@> <%> <*> ctx = relational _ test _ helpers . instance . create _ context ( source _ model _ builder . model ) ; model _ differ = create _ model _ differ ( ctx ) ; -> model _ differ = create _ model _ differ ( source _ model _ builder . model ) ; </%>
<%> <*> var ctx = relational _ test _ helpers . instance . create _ context ( target _ model _ builder . model ) ; var model _ differ = create _ model _ differ ( ctx ) ; -> var model _ differ = create _ model _ differ ( target _ model _ builder . model ) ; </%> <@> ctx = relational _ test _ helpers . instance . create _ context ( source _ model _ builder . model ) ; model _ differ = create _ model _ differ ( ctx ) ; </@> 
<%> <*> select -> select </%> <%> <+> value _ </%> <%> <*> parameter -> expression </%> <%> <*> target _ member . type , mapping . item . index ) ) ) ; -> target _ member . type , </%> <%> <+> index _ map ? [ mapping . item . index ] ? ? mapping . item . index ) ) ) ; </%> <@> return expression . lambda < func < i _ value _ reader , object > > ( expression . block ( new [ ] { instance _ variable } , block _ expressions ) , reader _ parameter ) . compile ( ) ; </@> 
<%> <-> } </%> <%> <*> query _ method _ info -> query _ method _ info </%> <%> <*> . make _ generic _ method ( element _ type ) ; -> . make _ generic _ method ( element _ type ) ; </%> <%> <-> var materializer = query _ model _ visitor . query _ compilation _ context . entity _ materializer _ source . get _ materializer ( entity _ type ) ; </%> <@> new expression [ ] </@> <%> <-> expression . constant ( </%> <%> <-> ) </%>
<%> <-> using microsoft _ data _ entity _ relational _ metadata ; </%> <@> using microsoft _ data _ entity _ value _ generation ; namespace microsoft _ data _ entity _ relational _ value _ generation </@> 
 <@> order by [ g ] . [ leader _ nickname ] , [ g ] . [ full _ name ] </@> <%> <*> inner join -> where exists </%> <%> <*> distinct [ g ] . [ leader _ nickname ] , [ g ] . [ full _ name ] -> 1 </%> <%> <*> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) ) as [ ] on [ w ] . [ owner _ full _ name ] = [ ] . [ full _ name ] order by [ ] . [ leader _ nickname ] , [ ] . [ full _ name ] STR -> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ w ] . [ owner _ full _ name ] = [ g ] . [ full _ name ] ) ) </%>
 <@> var property = metadata . find _ properties _ in _ hierarchy ( new [ ] { member _ name } ) . single _ or _ default ( ) ; </@> <%> <-> new [ ] { </%> <%> <-> } </%>
<%> <-> new [ ] { </%> <%> <-> } </%> <@> var navigation = metadata . find _ navigations _ in _ hierarchy ( new [ ] { member _ name } ) . single _ or _ default ( ) ; </@> 
 <@> return foreign _ key ( principal _ type . metadata , get _ or _ create _ properties ( property _ names , configuration _ source ) , configuration _ source ) ; </@> <%> <-> . metadata </%>
<%> <+> STR , </%> <@> ( ) = > new foreign _ key ( new [ ] { dependent _ property , dependent _ property } , principal _ type . get _ primary _ key ( ) , principal _ type , dependent _ type ) ) . message ) ; </@> 
<%> <*> | | aspects _ configured . has _ flag ( foreign _ key _ aspect . principal _ end ) ; -> | | navigation _ to _ principal _ name ! = null </%> <%> <+> | | navigation _ to _ dependent _ name ! = null ; </%> <@> get _ existing _ properties ( dependent _ properties , dependent _ entity _ type _ builder . metadata ) , get _ existing _ properties ( principal _ properties , principal _ entity _ type _ builder . metadata ) , </@> <%> <+> old _ navigation _ to _ principal _ name , old _ navigation _ to _ dependent _ name , </%>
<%> <+> detached _ keys . add ( tuple . create ( key _ builder , removed _ configuration _ source . value ) ) ; } return new key _ builders _ snapshot ( detached _ keys , primary _ key ) ; } </%> <%> <+> clr _ property : null , configuration _ source : configuration _ source ) ; </%> <%> <+> clr _ property : null , configuration _ source : configuration _ source ) ; </%> <@> = > property ( clr _ property . name , clr _ property . property _ type , </@> <%> <*> string property _ name , type property _ type , bool? shadow _ property , configuration _ source ? configuration _ source ) -> not _ null string property _ name , </%> <%> <+> can _ be _ null type property _ type , can _ be _ null property _ info clr _ property , can _ be _ null configuration _ source ? configuration _ source ) </%>
<%> <+> < < 0 </%> <@> is _ shadow _ property = NUM < < NUM , store _ generated _ always = NUM < < NUM </@> 
 <@> batch . add _ command ( new modification _ command ( STR , new parameter _ name _ generator ( ) ) , null ) ) . param _ name ) ; </@> <%> <+> , null </%>
 <@> typeof ( alter _ column _ operation ) , typeof ( alter _ sequence _ operation ) , typeof ( create _ index _ operation ) , typeof ( restart _ sequence _ operation ) </@> <%> <+> typeof ( rename _ column _ operation ) , </%> <%> <+> } ; private static readonly type [ ] column _ operation _ types = { typeof ( add _ column _ operation ) , </%>
<%> <-> if ( ( source . is _ unique ! = target . is _ unique ) | | has _ differences ( migrations _ annotations . for ( source ) , migrations _ annotations . for ( target ) ) ) { var operations = remove ( source ) . concat ( add ( target , diff _ context ) ) ; foreach ( var operation in operations ) { yield return operation ; } } </%> <@> diff _ context . find _ source ( target . declaring _ entity _ type . root _ type ( ) ) ) ; </@> <%> <-> . select ( diff _ context . find _ source ) </%>
<%> <*> typeof ( random ) . name -> STR </%> <%> <-> _ mutable </%> <%> <-> builder . ignore < random > ( ) ; </%> <@> var model = builder . model ; var entity _ type = model . find _ entity _ type ( typeof ( an _ entity ) ) ; entity _ type . add _ property ( STR , typeof ( random ) ) ; </@> <%> <+> builder . finalize _ </%> <%> <+> ( ) </%>
<%> <-> string underlying _ store _ type ; </%> <@> store _ type = data _ type _ name ; underlying _ store _ type = value . store _ type ; </@> <%> <-> underlying _ store _ type = null ; </%>
<%> <-> ( </%> <%> <-> ) </%> <@> where ( getutcdate ( ) < > my _ datetime ) STR </@> 
<%> <-> ( </%> <%> <-> ) </%> <@> where ( newid ( ) < > ' 00000000 - 0000 - 0000 - 0000 - 000000000000 ' ) STR </@> <%> <-> ( </%> <%> <-> ) </%>
 <@> op = ( binary _ expression . left . type = = typeof ( string ) & & binary _ expression . right . type = = typeof ( string ) ) </@> <%> <+> need _ parens = binary _ expression . right is binary _ expression ; if ( need _ parens ) </%>
 <@> assert . equal ( ex . param _ name , STR ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> assert . equal ( ex . param _ name , STR ) ; </@> 
<%> <+> NUM , </%> <%> <-> , NUM </%> <%> <+> STR , </%> <%> <-> , STR </%> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <@> assert . equal ( db _ func _ builder . metadata . return _ type , typeof ( int ) ) ; </@> <%> <+> typeof ( string ) , </%> <%> <-> , typeof ( string ) </%>
<%> <+> STR , </%> <%> <-> , STR </%> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <@> assert . equal ( db _ func _ builder . metadata . return _ type , typeof ( string ) ) ; </@> 
<%> <+> virtual </%> <%> <-> ; set </%> <@> protected entity _ type related _ entity _ type { get ; set ; }    public virtual foreign _ key metadata = > builder . metadata ; </@> <%> <*> protected virtual -> internal _ relationship _ builder i _ accessor < </%> <%> <+> > . service = > </%> <%> <-> { get </%> <%> <-> } </%> <%> <+> builder . </%> <%> <+> builder . </%> <%> <+> builder . </%>
<%> <*> can _ be _ null object value ) -> can _ be _ null object value , </%> <%> <+> can _ be _ null string invariant _ name ) </%> <@> return command _ builder . add _ parameter ( </@> <%> <*> value ? . get _ type ( ) . is _ nullable _ type ( ) ) ; -> value ? . get _ type ( ) . is _ nullable _ type ( ) , </%> <%> <+> invariant _ name ) ; return command _ builder ; </%> <%> <*> add -> append </%>
 <@> return command _ builder . add _ parameter ( </@> <%> <*> is _ nullable ) ; -> is _ nullable , </%> <%> <+> invariant _ name ) ; command _ builder . command _ text _ builder . append ( name ) ; return command _ builder ; </%>
 <@> return command _ builder . add _ parameter ( </@> <%> <*> property . is _ nullable ) ; -> property . is _ nullable , </%> <%> <+> invariant _ name : null ) ; return command _ builder ; } private static void add _ parameter ( not _ null this i _ relational _ command _ builder command _ builder , </%>
<%> <*> shaper _ body = new cosmos _ projection _ binding _ removing _ expression _ visitor ( select _ expression ) . visit ( shaper _ body ) ; -> var j _ object _ parameter = expression . parameter ( typeof ( j _ object ) , STR ) ; </%> <%> <+> shaper _ body = new cosmos _ projection _ binding _ removing _ expression _ visitor ( select _ expression , j _ object _ parameter ) . visit ( shaper _ body ) ; </%> <@> cosmos _ projection _ binding _ removing _ expression _ visitor . j _ object _ parameter ) ; </@> 
 <@> protected override void on _ model _ creating ( entity . metadata . model _ builder model _ builder ) </@> <%> <+> public void include _ on _ optional _ navigation _ one _ to _ many ( ) { </%>
 <@> get _ sql _ data _ type ( sequence . type ) , </@> <%> <-> } private static string get _ sql _ data _ type ( type sequence _ type ) { contract . assert ( sequence _ type = = typeof ( long ) | | sequence _ type = = typeof ( int ) | | sequence _ type = = typeof ( short ) | | sequence _ type = = typeof ( byte ) ) ; return sequence _ type = = typeof ( long ) </%>
<%> <*> var sequence = new sequence ( STR , STR , 0 , 1 ) ; var create _ sequence _ operation = new create _ sequence _ operation ( sequence ) ; assert . same ( sequence , create _ sequence _ operation . sequence ) ; -> var create _ sequence _ operation = new create _ sequence _ operation ( </%> <%> <+> STR , NUM , NUM , NUM , NUM , typeof ( int ) ) ; assert . equal ( STR , create _ sequence _ operation . sequence _ name ) ; assert . equal ( NUM , create _ sequence _ operation . start _ value ) ; assert . equal ( NUM , create _ sequence _ operation . increment _ by ) ; assert . equal ( NUM , create _ sequence _ operation . min _ value ) ; assert . equal ( NUM , create _ sequence _ operation . max _ value ) ; assert . equal ( typeof ( int ) , create _ sequence _ operation . type ) ; assert . false ( create _ sequence _ operation . is _ destructive _ change ) ; } fact public void create _ and _ initialize _ operation _ with _ defaults ( ) { var create _ sequence _ operation = new create _ sequence _ operation ( STR ) ; assert . equal ( STR , create _ sequence _ operation . sequence _ name ) ; assert . equal ( sequence . default _ start _ value , create _ sequence _ operation . start _ value ) ; assert . equal ( sequence . default _ increment , create _ sequence _ operation . increment _ by ) ; assert . false ( create _ sequence _ operation . min _ value . has _ value ) ; assert . false ( create _ sequence _ operation . max _ value . has _ value ) ; assert . equal ( typeof ( long ) , create _ sequence _ operation . type ) ; </%> <@> var create _ sequence _ operation = new create _ sequence _ operation ( new sequence ( STR , STR , 0 , 1 ) ) ; </@> 
<%> <+> using microsoft _ data _ entity _ migrations _ utilities ; </%> <%> <+> using microsoft _ data _ entity _ storage ; </%> <@> private readonly lazy _ ref < migrator > migrator ; </@> <%> <*> not _ null db _ context _ configuration configuration , -> not _ null lazy _ ref < i _ model > model , </%> <%> <+> not _ null data _ store _ creator data _ store _ creator , not _ null data _ store _ connection connection , not _ null migrator migrator , </%> <%> <*> configuration -> model , data _ store _ creator , connection </%> <%> <+> check . not _ null ( migrator , STR ) ; </%>
<%> <+> check . not _ null ( migrator , STR ) ; </%> <%> <-> new lazy _ ref < </%> <%> <*> > ( ( ) = > ( ( migrations _ data _ store _ services ) configuration . data _ store _ services ) . migrator ) ; -> ; </%> <@> get { return migrator . value ; } </@> 
<%> <*> configuration = configuration ; -> model = model ; </%> <%> <+> data _ store _ creator = data _ store _ creator ; connection = connection ; </%> <%> <-> configuration . </%> <@> return configuration . data _ store _ creator . ensure _ created ( configuration . model ) ; </@> <%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%>
<%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%> <@> return configuration . data _ store _ creator . ensure _ created _ async ( configuration . model , cancellation _ token ) ; </@> <%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%>
<%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%> <@> return configuration . data _ store _ creator . ensure _ deleted _ async ( configuration . model , cancellation _ token ) ; </@> <%> <-> configuration . </%>
<%> <-> state . </%> <@> state . logger . query _ iteration _ failed ( state . context _ type , exception ) ; </@> <%> <-> state . </%> <%> <*> ) -> , relational _ query _ context . context ) </%>
<%> <-> state . </%> <@> state . relational _ query _ context . connection . semaphore . release ( ) ; } state . relational _ query _ context . dispose ( ) ; </@> 
<%> <*> if ( has _ outers ) -> next _ outer = outer _ shaper . shape ( query _ context , source _ enumerator . current ) ; </%> <%> <+> if ( ! equals ( outer , next _ outer ) ) </%> <@> next _ outer = outer _ shaper . shape ( query _ context , source _ enumerator . current ) ; if ( ! equals ( outer , next _ outer ) ) { break ; } next _ outer = default ( t _ outer ) ; </@> <%> <+> next _ outer = default ( t _ outer ) ; </%>
<%> <*> if ( foreign _ key _ properties = = null ) -> if ( ( ! configuration _ source . convention . overrides ( foreign _ key . get _ principal _ end _ configuration _ source ( ) ) | | ! configuration _ source . convention . overrides ( foreign _ key . get _ principal _ key _ configuration _ source ( ) ) ) & & ( foreign _ key _ properties = = null ) ) </%> <%> <*> relationship -> foreign </%> <%> <*> builder . metadata -> key </%> <%> <*> relationship -> foreign </%> <%> <*> builder . metadata -> key </%> <%> <*> relationship -> foreign </%> <%> <*> builder . metadata -> key </%> <@> | | ( relationship _ builder . metadata . declaring _ entity _ type . find _ foreign _ key ( foreign _ key _ properties , foreign _ key . principal _ key , foreign _ key . principal _ entity _ type ) ! = null ) ) </@> <%> <-> } </%>
 <@> command . command _ text = command _ text + @ STR </@> <%> <+> var view _ command _ text = @ STR union select schema _ name ( [ v ] . [ schema _ id ] ) as [ schema ] , . [ name ] STR if ( supports _ memory _ optimized _ table ) { view _ command _ text + = @ STR cast ( 0 as bit ) as [ is _ memory _ optimized ] STR </%>
<%> <-> using microsoft _ data _ entity _ infrastructure ; using microsoft _ data _ entity _ internal ; using moq ; </%> <@> assert . equal ( typeof ( in _ memory _ data _ store ) . name , new in _ memory _ data _ store _ source ( mock . of < db _ context _ services > ( ) , new db _ context _ options ( ) ) . name ) ; </@> <%> <*> i _ db _ context _ options options = new db _ context _ options ( ) ; options . add _ or _ update _ extension < in _ memory _ options _ extension > ( e = > { } ) ; var configuration _ mock = new mock < db _ context _ services > ( ) ; configuration _ mock . setup ( m = > m . context _ options ) . returns ( options ) ; assert . true ( new in _ memory _ data _ store _ source ( configuration _ mock . object , options ) . is _ configured ) ; -> var options _ builder = new db _ context _ options _ builder ( ) ; </%>
<%> <-> using microsoft _ data _ entity _ infrastructure ; using microsoft _ data _ entity _ internal ; using moq ; </%> <@> assert . equal ( typeof ( sql _ server _ data _ store ) . name , new sql _ server _ data _ store _ source ( mock . of < db _ context _ services > ( ) , new db _ context _ options ( ) ) . name ) ; </@> <%> <*> i _ db _ context _ options options = new db _ context _ options ( ) ; options . add _ or _ update _ extension < sql _ server _ options _ extension > ( e = > { } ) ; var configuration _ mock = new mock < db _ context _ services > ( ) ; configuration _ mock . setup ( m = > m . context _ options ) . returns ( options ) ; assert . true ( new sql _ server _ data _ store _ source ( configuration _ mock . object , options ) . is _ configured ) ; -> var options _ builder = new db _ context _ options _ builder ( ) ; </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <*> using ( var ctx = create -> assert </%> <%> <*> context -> query < level , level > </%> <%> <*> ) ) { -> ( s , s ) = > </%> <%> <-> var query = </%> <%> <*> ctx . level _ one -> s </%> <%> <*> ctx . level _ two -> s </%> <%> <+> orderby . id </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <+> assert _ contains _ sql ( @ STR from ( select [ ] . * from [ level ] as [ ] where [ ] . [ id ] is not null ) as [ ] STR </%>
<%> <*> detector -> notifier </%> <%> <*> change -> state _ entry </%> <%> <*> detector -> notifier </%> <%> <*> detector -> notifier </%> <%> <*> detector -> notifier </%> <%> <*> detector -> notifier </%> <@> return new state _ entry _ subscriber ( new change _ detector ( mock . of < db _ context _ configuration > ( ) , mock . of < state _ entry _ notifier > ( ) ) ) ; </@> 
<%> <+> new _ relationship _ builder . metadata . update _ principal _ to _ dependent _ configuration _ source ( configuration _ source . data _ annotation ) ; } </%> <%> <-> if ( new _ relationship _ builder ! = null ) { var temp = upgrade _ dependent _ to _ principal _ navigation _ source ; upgrade _ dependent _ to _ principal _ navigation _ source = upgrade _ principal _ to _ dependent _ navigation _ source ; upgrade _ principal _ to _ dependent _ navigation _ source = temp ; } } if ( new _ relationship _ builder ! = null & & upgrade _ dependent _ to _ principal _ navigation _ source ) { new _ relationship _ builder = new _ relationship _ builder . dependent _ to _ principal ( new _ relationship _ builder . metadata . dependent _ to _ principal . name , configuration _ source . data _ annotation ) ; } if ( new _ relationship _ builder ! = null & & upgrade _ principal _ to _ dependent _ navigation _ source ) { new _ relationship _ builder = new _ relationship _ builder . principal _ to _ dependent ( new _ relationship _ builder . metadata . principal _ to _ dependent . name , configuration _ source . data _ annotation ) ; </%> <@> private bool split _ navigations _ to _ separate _ relationships ( internal _ relationship _ builder relationship _ builder ) </@> 
 <@> public virtual i _ read _ only _ list < property > get _ actual _ properties ( [ can _ be _ null ] i _ enumerable < property > properties , configuration _ source ? configuration _ source ) </@> <%> <*> list < property > ( ) -> property [ properties . count ] </%> <%> <*> foreach -> for </%> <%> <*> property in properties ) -> i = 0 ; i < actual _ properties . length ; i + + ) </%> <%> <+> var property = properties [ i ] ; </%>
 <@> fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> fact _ skip _ issue </@> 
 <@> fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> fact _ skip _ issue </@> 
 <@> fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> fact _ skip _ issue </@> 
 <@> fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> fact _ skip _ issue </@> 
 <@> fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> fact _ skip _ issue </@> 
 <@> fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> fact _ skip _ issue </@> 
 <@> fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> fact _ skip _ issue </@> 
 <@> var foreign _ key _ annotations = foreign _ key . relational ( ) ; var foreign _ key _ name = foreign _ key _ annotations . name ; </@> <%> <-> var principal _ annotations = foreign _ key . principal _ entity _ type . relational ( ) ; var principal _ table = format ( principal _ annotations . schema , principal _ annotations . table _ name ) ; var duplicate _ annotations = duplicate _ foreign _ key . principal _ entity _ type . relational ( ) ; var duplicate _ principal _ table = format ( duplicate _ annotations . schema , duplicate _ annotations . table _ name ) ; if ( ! string . equals ( principal _ table , duplicate _ principal _ table , string _ comparison . ordinal _ ignore _ case ) ) </%>
<%> <+> using microsoft _ entity _ framework _ core _ change _ tracking ; </%> <@> using microsoft _ entity _ framework _ core _ diagnostics _ in _ memory _ internal ; </@> 
 <@> var other _ navigation = navigations . value . values . first _ or _ default ( n = > n . foreign _ key = = navigation . foreign _ key & & navigation . points _ to _ principal = = n . points _ to _ principal ) ; </@> <%> <-> . value </%>
<%> <+> element _ sorter : e = > e . order _ id , </%> <@> conditional _ fact _ skip </@> 
 <@> node , ( ps , qs ) = > { if ( qs ! = null ) </@> <%> <+> if ( qs ! = null ) { </%>
 <@> using system _ reflection ; </@> <%> <*> abstract class -> interface i _ property _ </%> <%> <-> public abstract </%> <%> <*> not _ null parameter _ info parameter ) ; -> not _ null type parameter _ type , </%> <%> <+> not _ null string parameter _ name ) ; </%>
 <@> ex = assert . throws < argument _ null _ exception > ( ( ) = > new sq _ lite _ command ( STR , null ) ) ; assert . equal ( STR , ex . param _ name ) ; </@> <%> <*> { ex = assert . throws < argument _ null _ exception > ( ( ) = > new sq _ lite _ command ( STR , connection , null ) ) ; assert . equal ( STR , ex . param _ name ) ; } -> assert . throws < argument _ null _ exception > ( </%> <%> <+> STR , ( ) = > new sq _ lite _ command ( STR , connection , null ) ) ; </%>
 <@> using ( var batch = model . convention _ dispatcher . start _ batch ( ) ) </@> <%> <+> ! = null </%> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> . value </%> <%> <-> . value </%> <@> if ( metadata . get _ properties _ configuration _ source ( ) = = configuration _ source . value ) </@> <%> <-> . value </%>
<%> <-> . value </%> <@> if ( metadata . get _ principal _ key _ configuration _ source ( ) = = configuration _ source . value ) </@> 
 <@> metadata . update _ configuration _ source ( configuration _ source . value ) ; </@> <%> <-> . value </%> <%> <-> . value </%>
<%> <-> . value </%> <@> is _ unique ( should _ be _ unique . value , configuration _ source . value ) ; </@> <%> <-> . value </%>
<%> <-> . value </%> <%> <-> . value </%> <@> metadata . has _ principal _ to _ dependent ( ( string ) null , configuration _ source . value ) ; </@> <%> <*> unignore -> remove _ ignored </%>
<%> <*> unignore -> remove _ ignored </%> <@> metadata . has _ dependent _ to _ principal ( navigation _ property , configuration _ source . value ) ; </@> <%> <-> . value </%>
<%> <-> . value </%> <@> metadata . has _ dependent _ to _ principal ( navigation _ to _ principal _ name , configuration _ source . value ) ; </@> <%> <*> unignore -> remove _ ignored </%>
<%> <*> unignore -> remove _ ignored </%> <@> metadata . has _ principal _ to _ dependent ( navigation _ property , configuration _ source . value ) ; </@> <%> <-> . value </%>
<%> <-> . value </%> <@> metadata . has _ principal _ to _ dependent ( navigation _ to _ dependent _ name , configuration _ source . value ) ; </@> 
<%> <*> related -> has </%> <%> <-> ? </%> <%> <*> related -> has </%> <%> <*> related -> has </%> <@> configuration _ source ? configuration _ source ) </@> 
<%> <-> use _ default _ type : </%> <%> <-> ? </%> <@> configuration _ source ? configuration _ source ) </@> <%> <*> return ! configuration _ source . has _ value | | ! configuration _ source . value . overrides ( metadata . get _ properties _ configuration _ source ( ) ) -> return ! configuration _ source . overrides ( metadata . get _ properties _ configuration _ source ( ) ) </%>
<%> <*> return ! configuration _ source . has _ value | | ! configuration _ source . value . overrides ( metadata . get _ properties _ configuration _ source ( ) ) -> return ! configuration _ source . overrides ( metadata . get _ properties _ configuration _ source ( ) ) </%> <@> if ( ! configuration _ source . has _ value ) { return this ; } metadata . update _ properties _ configuration _ source ( configuration _ source . value ) ; </@> <%> <-> . value </%>
<%> <*> if ( ! configuration _ source . has _ value ) { return this ; } metadata . update _ properties _ configuration _ source ( configuration _ source . value ) ; -> metadata . update _ properties _ configuration _ source ( configuration _ source ) ; </%> <@> metadata . update _ principal _ end _ configuration _ source ( configuration _ source . value ) ; </@> 
 <@> principal _ end _ configuration _ source : properties = = null ? null : configuration _ source , </@> <%> <+> public virtual bool can _ set _ foreign _ key ( [ can _ be _ null ] i _ read _ only _ list < property > properties , configuration _ source ? configuration _ source ) = > can _ set _ foreign _ key ( properties , dependent _ entity _ type : null , configuration _ source , out ) ; </%>
<%> <*> property -> member </%> <%> <-> ? </%> <@> configuration _ source ? configuration _ source ) </@> <%> <-> ? </%> <%> <-> return ! configuration _ source . has _ value | | ! configuration _ source . value . overrides ( metadata . get _ principal _ key _ configuration _ source ( ) ) </%>
<%> <*> return ! configuration _ source . has _ value | | ! configuration _ source . value . overrides ( metadata . get _ principal _ key _ configuration _ source ( ) ) -> return ! configuration _ source . overrides ( metadata . get _ principal _ key _ configuration _ source ( ) ) </%> <@> if ( configuration _ source = = null ) { return this ; } metadata . update _ principal _ key _ configuration _ source ( configuration _ source . value ) ; </@> <%> <-> . value </%>
<%> <*> if ( configuration _ source = = null ) { return this ; } metadata . update _ principal _ key _ configuration _ source ( configuration _ source . value ) ; -> metadata . update _ principal _ key _ configuration _ source ( configuration _ source ) ; </%> <@> metadata . update _ principal _ end _ configuration _ source ( configuration _ source . value ) ; </@> 
<%> <*> var fk _ property = dependent _ type . property ( dependent _ entity . principal _ entity _ pe _ e _ ka _ y _ property , configuration _ source . convention ) . metadata ; var relationship _ builder = principal _ type . relationship ( dependent _ type , configuration _ source . convention ) -> var fk _ property = dependent _ type . builder . property ( </%> <%> <+> dependent _ entity . principal _ entity _ pe _ e _ ka _ y _ property , configuration _ source . convention ) . metadata ; var relationship _ builder = principal _ type . builder . has _ relationship ( dependent _ type , configuration _ source . convention ) </%> <@> assert . same ( dependent _ type . metadata , new _ relationship _ builder . metadata . declaring _ entity _ type ) ; </@> <%> <-> . metadata </%>
<%> <+> . builder </%> <%> <+> builder . has _ </%> <@> assert . same ( dependent _ type . metadata , new _ relationship _ builder . metadata . declaring _ entity _ type ) ; </@> <%> <-> . metadata </%> <%> <-> . metadata </%>
 <@> property = model . convention _ dispatcher . on _ property _ added ( property . builder ) ? . metadata ; return property ; </@> <%> <-> public virtual property find _ declared _ property ( [ not _ null ] string property _ name ) </%>
<%> <+> { </%> <%> <+> new relational _ type _ mapper _ dependencies ( ) </%> <%> <+> annotations _ provider , new sql _ server _ migrations _ annotation _ provider ( new migrations _ annotation _ provider _ dependencies ( ) ) ) , new sql _ server _ migrations _ sql _ generator ( new migrations _ sql _ generator _ dependencies ( command _ builder _ factory , new sql _ server _ sql _ generation _ helper ( new relational _ sql _ generation _ helper _ dependencies ( ) ) , type _ mapper , annotations _ provider ) , new sql _ server _ migrations _ annotation _ provider ( new migrations _ annotation _ provider _ dependencies ( ) ) ) , </%> <@> new sql _ server _ migrations _ annotation _ provider ( ) ) , new sql _ server _ migrations _ sql _ generator ( command _ builder _ factory , new sql _ server _ sql _ generation _ helper ( ) , type _ mapper , annotations _ provider , new sql _ server _ migrations _ annotation _ provider ( ) ) , annotations _ provider , sql _ generator ) ; </@> 
 <@> conditional _ fact _ skip _ test _ does _ not _ pass </@> <%> <+> . id < NUM & & </%> <%> <+> . id < NUM & & ! </%>
<%> <+> using system _ diagnostics ; </%> <@> internal static string call _ requires _ open _ connection { get { return get _ string ( STR ) ; } }    internal static string format _ call _ requires _ open _ connection ( object method _ name ) </@> <%> <*> internal static string call _ requires _ set _ command _ text { get { return get _ string ( STR ) ; } } internal static string format _ call _ requires _ set _ command _ text ( object method _ name ) -> internal static string call _ requires _ set _ command _ text ( object method _ name ) </%>
<%> <-> internal static string call _ requires _ open _ connection { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ call _ requires _ open _ connection ( object method _ name ) -> internal static string call _ requires _ open _ connection ( object method _ name ) </%> <@> internal static string call _ requires _ set _ command _ text { get { return get _ string ( STR ) ; } }    internal static string format _ call _ requires _ set _ command _ text ( object method _ name ) </@> <%> <-> internal static string format _ connection _ string _ requires _ closed _ connection ( ) { return get _ string ( STR ) ; </%>
<%> <-> internal static string call _ requires _ set _ command _ text { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ call _ requires _ set _ command _ text ( object method _ name ) -> internal static string call _ requires _ set _ command _ text ( object method _ name ) </%> <%> <-> internal static string format _ connection _ string _ requires _ closed _ connection ( ) { return get _ string ( STR ) ; } </%> <@> internal static string data _ reader _ closed { get { return get _ string ( STR ) ; } }    internal static string format _ data _ reader _ closed ( object operation ) </@> <%> <*> internal static string invalid _ cache _ mode { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ cache _ mode ( object mode ) -> internal static string invalid _ cache _ mode ( object mode ) </%>
<%> <-> internal static string format _ connection _ string _ requires _ closed _ connection ( ) { return get _ string ( STR ) ; } internal static string data _ reader _ closed { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ data _ reader _ closed ( object operation ) -> internal static string data _ reader _ closed ( object operation ) </%> <@> internal static string invalid _ cache _ mode { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ cache _ mode ( object mode ) </@> <%> <*> internal static string invalid _ command _ behavior { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ command _ behavior ( object behavior ) -> internal static string invalid _ command _ behavior ( object behavior ) </%>
<%> <-> internal static string data _ reader _ closed { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ data _ reader _ closed ( object operation ) -> internal static string data _ reader _ closed ( object operation ) </%> <%> <-> internal static string invalid _ cache _ mode { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ cache _ mode ( object mode ) -> internal static string invalid _ cache _ mode ( object mode ) </%> <@> internal static string invalid _ command _ behavior { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ command _ behavior ( object behavior ) </@> <%> <*> internal static string invalid _ command _ type { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ command _ type ( object command _ type ) -> internal static string invalid _ command _ type ( object command _ type ) </%>
<%> <-> internal static string invalid _ cache _ mode { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ cache _ mode ( object mode ) -> internal static string invalid _ cache _ mode ( object mode ) </%> <%> <-> internal static string invalid _ command _ behavior { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ command _ behavior ( object behavior ) -> internal static string invalid _ command _ behavior ( object behavior ) </%> <@> internal static string invalid _ command _ type { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ command _ type ( object command _ type ) </@> <%> <*> internal static string invalid _ isolation _ level { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ isolation _ level ( object isolation _ level ) -> internal static string invalid _ isolation _ level ( object isolation _ level ) </%>
<%> <-> internal static string invalid _ command _ behavior { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ command _ behavior ( object behavior ) -> internal static string invalid _ command _ behavior ( object behavior ) </%> <%> <-> internal static string invalid _ command _ type { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ command _ type ( object command _ type ) -> internal static string invalid _ command _ type ( object command _ type ) </%> <@> internal static string invalid _ isolation _ level { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ isolation _ level ( object isolation _ level ) </@> <%> <*> internal static string invalid _ isolation _ level _ for _ unshared _ cache { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) -> internal static string invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) </%>
<%> <-> internal static string invalid _ command _ type { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ command _ type ( object command _ type ) -> internal static string invalid _ command _ type ( object command _ type ) </%> <%> <-> internal static string invalid _ isolation _ level { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ isolation _ level ( object isolation _ level ) -> internal static string invalid _ isolation _ level ( object isolation _ level ) </%> <@> internal static string invalid _ isolation _ level _ for _ unshared _ cache { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) </@> <%> <*> internal static string invalid _ parameter _ direction { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ parameter _ direction ( object direction ) -> internal static string invalid _ parameter _ direction ( object direction ) </%>
<%> <-> internal static string invalid _ isolation _ level { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ isolation _ level ( object isolation _ level ) -> internal static string invalid _ isolation _ level ( object isolation _ level ) </%> <%> <-> internal static string invalid _ isolation _ level _ for _ unshared _ cache { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) -> internal static string invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) </%> <@> internal static string invalid _ parameter _ direction { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ parameter _ direction ( object direction ) </@> <%> <*> internal static string keyword _ not _ supported { get { return get _ string ( STR ) ; } } internal static string format _ keyword _ not _ supported ( object keyword ) -> internal static string keyword _ not _ supported ( object keyword ) </%>
<%> <-> internal static string invalid _ isolation _ level _ for _ unshared _ cache { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) -> internal static string invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) </%> <%> <-> internal static string invalid _ parameter _ direction { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ parameter _ direction ( object direction ) -> internal static string invalid _ parameter _ direction ( object direction ) </%> <@> internal static string keyword _ not _ supported { get { return get _ string ( STR ) ; } }    internal static string format _ keyword _ not _ supported ( object keyword ) </@> <%> <*> internal static string missing _ parameters { get { return get _ string ( STR ) ; } } internal static string format _ missing _ parameters ( object parameters ) -> internal static string missing _ parameters ( object parameters ) </%>
<%> <-> internal static string invalid _ parameter _ direction { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ parameter _ direction ( object direction ) -> internal static string invalid _ parameter _ direction ( object direction ) </%> <%> <-> internal static string keyword _ not _ supported { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ keyword _ not _ supported ( object keyword ) -> internal static string keyword _ not _ supported ( object keyword ) </%> <@> internal static string missing _ parameters { get { return get _ string ( STR ) ; } }    internal static string format _ missing _ parameters ( object parameters ) </@> <%> <-> internal static string format _ no _ data ( ) { return get _ string ( STR ) ; </%>
<%> <-> internal static string format _ open _ requires _ set _ connection _ string ( ) { return get _ string ( STR ) ; } </%> <%> <-> internal static string format _ parallel _ transactions _ not _ supported ( ) { return get _ string ( STR ) ; } </%> <@> internal static string parameter _ not _ found { get { return get _ string ( STR ) ; } }    internal static string format _ parameter _ not _ found ( object parameter _ name ) </@> <%> <*> internal static string requires _ set { get { return get _ string ( STR ) ; } } internal static string format _ requires _ set ( object property _ name ) -> internal static string requires _ set ( object property _ name ) </%>
<%> <-> internal static string format _ parallel _ transactions _ not _ supported ( ) { return get _ string ( STR ) ; } internal static string parameter _ not _ found { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ parameter _ not _ found ( object parameter _ name ) -> internal static string parameter _ not _ found ( object parameter _ name ) </%> <@> internal static string requires _ set { get { return get _ string ( STR ) ; } }    internal static string format _ requires _ set ( object property _ name ) </@> <%> <-> internal static string format _ transaction _ completed ( ) { return get _ string ( STR ) ; </%>
<%> <-> internal static string format _ transaction _ connection _ mismatch ( ) { return get _ string ( STR ) ; } </%> <%> <-> internal static string format _ transaction _ required ( ) { return get _ string ( STR ) ; } </%> <@> internal static string unknown _ data _ type { get { return get _ string ( STR ) ; } }    internal static string format _ unknown _ data _ type ( object type _ name ) </@> <%> <*> internal static string sqlite _ native _ error { get { return get _ string ( STR ) ; } } internal static string format _ sqlite _ native _ error ( object error _ code , object message ) -> internal static string sqlite _ native _ error ( object error _ code , object message ) </%>
<%> <-> internal static string format _ transaction _ required ( ) { return get _ string ( STR ) ; } internal static string unknown _ data _ type { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ unknown _ data _ type ( object type _ name ) -> internal static string unknown _ data _ type ( object type _ name ) </%> <@> internal static string sqlite _ native _ error { get { return get _ string ( STR ) ; } }    internal static string format _ sqlite _ native _ error ( object error _ code , object message ) </@> <%> <-> internal static string format _ default _ native _ error ( ) { return get _ string ( STR ) ; </%>
<%> <-> internal static string sqlite _ native _ error { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ sqlite _ native _ error ( object error _ code , object message ) -> internal static string sqlite _ native _ error ( object error _ code , object message ) </%> <%> <-> internal static string format _ default _ native _ error ( ) { return get _ string ( STR ) ; } </%> <@> internal static string ambiguous _ parameter _ name { get { return get _ string ( STR ) ; } }    internal static string format _ ambiguous _ parameter _ name ( object parameter _ name ) </@> <%> <-> internal static string format _ already _ loaded ( ) { return get _ string ( STR ) ; </%>
<%> <-> internal static string ambiguous _ parameter _ name { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ ambiguous _ parameter _ name ( object parameter _ name ) -> internal static string ambiguous _ parameter _ name ( object parameter _ name ) </%> <%> <-> internal static string format _ already _ loaded ( ) { return get _ string ( STR ) ; } </%> <@> internal static string invalid _ enum _ value { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ enum _ value ( object enum _ type , object value ) </@> <%> <+> ( object source _ type , object target _ type ) </%> <%> <*> get { return -> return string . format ( culture _ info . current _ culture , </%> <%> <+> , STR , STR ) , source _ type , target _ type </%> <%> <-> } </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <+> assert _ sql ( @ STR from ( select distinct [ ] . * from [ level ] as [ ] left join ( select [ t ] . * </%>
<%> <+> math . min ( </%> <%> <*> ; -> ? ? int . max _ value , max _ row _ count ) ; </%> <@> if ( max _ batch _ size . has _ value & & max _ batch _ size . value < = modification _ commands . count ) </@> 
<%> <*> using ( -> foreach ( var entity _ type _ with _ defining _ navigation in </%> <%> <*> convention -> get </%> <%> <*> dispatcher -> entity _ types ( type . name ) </%> <%> <*> start -> to </%> <%> <*> batch -> list </%> <%> <*> foreach -> if </%> <%> <-> var </%> <%> <-> in metadata </%> <%> <*> entity -> configuration </%> <%> <*> types -> source </%> <%> <-> type . name </%> <%> <*> . to -> ! = configuration </%> <%> <*> list ( ) -> source . explicit </%> <@> if ( entity _ type _ with _ defining _ navigation . get _ configuration _ source ( ) ! = configuration _ source . explicit ) { remove _ entity _ type ( entity _ type _ with _ defining _ navigation , configuration _ source ) ; } </@> <%> <-> return entity ( type , configuration _ source , throw _ on _ query ) ; </%> <%> <+> return entity ( type , configuration _ source , throw _ on _ query ) ; </%>
<%> <*> using ( -> foreach ( var entity _ type _ with _ defining _ navigation in </%> <%> <*> convention -> get </%> <%> <*> dispatcher -> entity _ types ( clr _ type ) </%> <%> <*> start -> to </%> <%> <*> batch -> list </%> <%> <*> foreach -> if </%> <%> <-> var </%> <%> <-> in metadata </%> <%> <*> entity -> configuration </%> <%> <*> types -> source </%> <%> <-> clr _ type </%> <%> <*> . to -> ! = configuration </%> <%> <*> list ( ) -> source . explicit </%> <@> if ( entity _ type _ with _ defining _ navigation . get _ configuration _ source ( ) ! = configuration _ source . explicit ) { remove _ entity _ type ( entity _ type _ with _ defining _ navigation , configuration _ source ) ; } </@> <%> <-> return entity ( type , configuration _ source , throw _ on _ query ) ; </%> <%> <+> return entity ( type , configuration _ source , throw _ on _ query ) ; </%> <%> <-> else </%>
<%> <+> using microsoft _ entity _ framework _ core _ internal ; </%> <@> namespace microsoft _ entity _ framework _ core _ tools _ core _ tests _ migrations _ design </@> 
<%> <-> using microsoft _ entity _ framework _ core _ design ; </%> <@> namespace microsoft _ entity _ framework _ core _ tools _ tests _ design </@> <%> <*> log -> report </%>
<%> <*> command -> operation </%> <%> <*> logger -> reporter </%> <%> <*> command -> i </%> <%> <*> logger -> operation _ reporter </%> <%> <*> public in _ memory _ command _ logger ( string name , i _ test _ output _ helper output ) : base ( name ) -> public in _ memory _ operation _ reporter ( i _ test _ output _ helper output ) </%> <@> public override bool is _ enabled ( log _ level log _ level ) = > true ; protected override void write _ error ( string message ) </@> <%> <*> protected override -> public </%>
<%> <-> using microsoft _ entity _ framework _ core _ design ; </%> <@> namespace microsoft _ entity _ framework _ core _ tools _ tests _ design </@> 
<%> <-> using microsoft _ entity _ framework _ core _ query _ expression _ visitors _ internal ; </%> <@> namespace microsoft _ entity _ framework _ core _ tools _ core _ tests _ migrations _ design </@> 
<%> <+> using microsoft _ entity _ framework _ core _ design _ test _ utilities ; </%> <%> <-> using microsoft _ extensions _ logging ; </%> <@> namespace microsoft _ entity _ framework _ core _ tools _ core _ tests _ design _ internal </@> 
<%> <*> transaction -> resolver _ context </%> <%> <*> begin -> create </%> <%> <-> transaction ( </%> <%> <*> , -> ( </%> <%> <-> , store _ change </%> <%> <*> resolver -> validation </%> <%> <*> using ( var validation _ context = create _ context ( test _ database ) ) -> resolver ( resolver _ context , update _ exception ) ; if ( validator ! = null ) </%> <@> resolver ( resolver _ context , update _ exception ) ; if ( validator ! = null ) { await context . save _ changes _ async ( ) ; validator ( validation _ context ) ; } transaction . rollback ( ) ; </@> 
 <@> var last _ model = model _ snapshot ? . model ; var up _ operations = model _ differ . get _ differences ( last _ model , model ) ; </@> <%> <*> last -> model </%> <%> <*> model -> snapshot </%>
<%> <+> _ line </%> <%> <*> curve -> string </%> <%> <*> i -> multi </%> <%> <*> multi -> line </%> <%> <*> curve -> string </%> <%> <*> i -> multi </%> <%> <*> multi -> line </%> <%> <*> curve -> string </%> <%> <+> _ line </%> <%> <*> curve -> string </%> <@> if ( equals ( member . on _ interface ( typeof ( i _ multi _ curve ) ) , is _ closed ) ) </@> 
<%> <-> i _ </%> <@> if ( equals ( method . on _ interface ( typeof ( i _ geometry _ collection ) ) , item ) ) </@> 
<%> <-> i _ </%> <%> <-> i _ </%> <@> if ( equals ( method . on _ interface ( typeof ( i _ line _ string ) ) , get _ point _ n ) ) </@> 
<%> <-> using geo _ ap _ geometries ; </%> <@> public i _ geometry geometry { get ; set ; } public i _ point point { get ; set ; } public point concrete _ point { get ; set ; } </@> 
<%> <*> geo -> net _ topology </%> <%> <*> ap -> suite </%> <@> public i _ polygon polygon { get ; set ; } </@> 
 <@> get _ geometry _ type ( ) . get _ runtime _ method ( STR , new [ ] { typeof ( t _ geometry ) } ) , </@> <%> <-> var geometry _ type = get _ geometry _ type ( ) ; </%>
<%> <*> geo -> net _ topology </%> <%> <*> ap -> suite </%> <@> public i _ multi _ line _ string multi _ line _ string { get ; set ; } </@> 
<%> <-> i _ </%> <%> <*> i -> nts </%> <@> public override i _ geometry _ factory geometry _ factory </@> 
<%> <*> geo -> net _ topology </%> <%> <*> ap -> suite </%> <@> public i _ line _ string line _ string { get ; set ; } </@> 
<%> <-> i _ </%> <%> <-> i _ </%> <@> if ( equals ( method . on _ interface ( typeof ( i _ polygon ) ) , get _ interior _ ring _ n ) ) </@> 
<%> <+> _ line </%> <%> <*> curve -> string </%> <%> <*> i -> multi </%> <%> <*> multi -> line </%> <%> <*> curve -> string </%> <%> <*> i -> multi </%> <%> <*> multi -> line </%> <%> <*> curve -> string </%> <%> <+> _ line </%> <%> <*> curve -> string </%> <@> if ( equals ( member . on _ interface ( typeof ( i _ multi _ curve ) ) , is _ closed ) ) </@> 
 <@> where 1 = 0 </@> <%> <*> 1 -> 0 </%> <%> <*> 0 -> 1 </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
<%> <-> ( ( check _ constraint ) constraint ) . update _ configuration _ source ( configuration _ source . explicit ) ; </%> <%> <-> . model </%> <%> <-> , table _ name , schema </%> <@> entity _ type . model . add _ check _ constraint ( sql , name , table _ name , schema ) ; </@> 
 <@> using system _ collections ; </@> <%> <-> using system _ collections _ immutable ; using system _ diagnostics ; </%> <%> <+> using system _ threading ; using system _ threading _ tasks ; </%> <%> <*> using microsoft _ data _ entity _ in _ memory _ metadata ; -> using microsoft _ data _ entity _ infrastructure ; </%>
<%> <-> using microsoft _ data _ entity _ utilities ; </%> <%> <+> using microsoft _ data _ relational ; </%> <@> public class add _ primary _ key _ operation : migration _ operation < primary _ key , drop _ primary _ key _ operation > </@> <%> <+> schema _ qualified _ name </%> <%> <*> table -> _ name </%> <%> <*> public add _ primary _ key _ operation ( [ not _ null ] -> private readonly </%> <%> <*> , [ not _ null ] table table ) : base ( check . -> ; public add _ primary _ key _ operation ( schema _ qualified _ name table _ name , [ </%> <%> <*> ( -> ] </%> <%> <*> , STR ) -> primary _ key </%> <%> <*> check . not _ null ( table , STR ) ; table = table ; -> check . not _ null ( primary _ key , STR ) ; </%> <%> <+> table _ name = table _ name ; primary _ key = primary _ key ; </%>
<%> <-> _ model </%> <@> public class drop _ sequence _ operation : migration _ operation < sequence , create _ sequence _ operation > </@> <%> <*> public drop -> private readonly schema _ qualified </%> <%> <+> name </%> <%> <*> operation ( [ not _ null ] sequence sequence ) : base -> name ; public drop _ sequence _ operation </%> <%> <*> check . not -> schema _ qualified </%> <%> <*> null ( -> name </%> <%> <*> , STR -> _ name </%> <%> <-> ) </%> <%> <+> sequence _ name = sequence _ name ; </%> <%> <*> override create -> virtual schema </%> <%> <+> qualified _ name </%> <%> <*> operation inverse -> name </%> <%> <*> get { return new create _ sequence _ operation ( target ) ; } -> get { return sequence _ name ; } </%>
<%> <-> _ model </%> <@> public class drop _ primary _ key _ operation : migration _ operation < primary _ key , add _ primary _ key _ operation > </@> <%> <+> schema _ qualified _ name </%> <%> <*> table -> _ name </%> <%> <*> public drop _ -> private readonly string </%> <%> <*> operation ( [ not _ null ] primary _ key primary _ key , [ not _ null ] table table ) : base ( check . -> name ; public drop _ primary _ key _ operation ( schema _ qualified _ name table _ name , [ </%> <%> <*> ( -> ] string </%> <%> <*> , STR -> _ name </%> <%> <-> ) </%> <%> <*> check . not _ null ( table , STR ) ; table = table ; -> check . not _ empty ( primary _ key _ name , STR ) ; </%> <%> <+> table _ name = table _ name ; primary _ key _ name = primary _ key _ name ; </%>
 <@> public class create _ table _ operation : migration _ operation < table , drop _ table _ operation > </@> <%> <+> private readonly table table ; </%> <%> <-> : base ( check . not _ null ( table , STR ) ) </%> <%> <+> check . not _ null ( table , STR ) ; table = table ; </%> <%> <*> override drop _ -> virtual table </%> <%> <-> _ operation inverse </%>
<%> <-> using microsoft _ data _ entity _ utilities ; </%> <@> public class create _ sequence _ operation : migration _ operation < sequence , drop _ sequence _ operation > </@> <%> <+> private readonly sequence sequence ; </%> <%> <-> : base ( check . not _ null ( sequence , STR ) ) </%> <%> <+> check . not _ null ( sequence , STR ) ; sequence = sequence ; </%> <%> <-> public override void generate _ operation _ sql ( migration _ operation _ sql _ generator migration _ operation _ sql _ generator , </%>
<%> <-> _ model </%> <@> public class drop _ table _ operation : migration _ operation < table , create _ table _ operation > </@> <%> <*> public drop -> private readonly schema _ qualified </%> <%> <+> name </%> <%> <*> operation ( [ not _ null ] table table ) : base -> name ; public drop _ table _ operation </%> <%> <*> check . not -> schema _ qualified </%> <%> <*> null ( -> name </%> <%> <*> , STR -> _ name </%> <%> <-> ) </%> <%> <+> table _ name = table _ name ; </%> <%> <*> override create -> virtual schema </%> <%> <+> qualified _ name </%> <%> <*> operation inverse -> name </%> <%> <*> get { return new create _ table _ operation ( target ) ; } -> get { return table _ name ; } </%>
<%> <+> get { return ( redis _ connection ) base . connection ; } } </%> <%> <-> ( ( redis _ connection ) configuration . </%> <%> <-> ) </%> <@> . get _ server ( ( ( redis _ connection ) configuration . connection ) . connection _ string ) ; </@> 
 <@> var connection = ( redis _ connection ) configuration . connection ; get _ underlying _ server ( ) . flush _ database ( connection . database ) ; </@> <%> <-> var connection = ( redis _ connection ) configuration . connection ; </%>
<%> <-> var connection = ( redis _ connection ) configuration . connection ; </%> <@> var connection = ( redis _ connection ) configuration . connection ; await get _ underlying _ server ( ) . flush _ database _ async ( connection . database ) . with _ current _ culture ( ) ; </@> 
 <@> relational _ data _ store _ creator . create _ tables ( configuration . model ) ; </@> <%> <-> configuration . </%>
<%> <-> configuration . </%> <@> return relational _ data _ store _ creator . create _ tables _ async ( configuration . model , cancellation _ token ) ; </@> 
 <@> = ' ' ( size = NUM ) = ' ' ( size = NUM ) = ' ' ( size = NUM ) ( db _ type = string ) = ' ' ( size = NUM ) ( db _ type = string ) </@> <%> <+> ( db _ type = string ) </%> <%> <+> ( db _ type = string ) </%> <%> <*> db _ type -> size </%> <%> <*> string -> NUM </%> <%> <*> db _ type -> size </%> <%> <*> int -> NUM </%> <%> <*> int -> string </%> <%> <+> = ' ' ( db _ type = int ) </%>
<%> <+> STR ) ; var verbose = scaffold . option ( STR , STR ) ; </%> <@> logger . value . log _ error ( STR , connection . name ) ; </@> <%> <-> logger . value . </%> <%> <*> await -> return await create _ executor ( environment . value ( ) , verbose . has _ value ( ) ) . </%>
<%> <-> logger . value . </%> <@> logger . value . log _ error ( STR , provider . name ) ; </@> <%> <*> await -> return await create _ executor ( environment . value ( ) , verbose . has _ value ( ) ) . </%>
<%> <+> STR ) ; var verbose = add . option ( STR , STR ) ; </%> <@> logger . value . log _ error ( STR , name . name ) ; </@> <%> <*> add _ migration ( name . value , context . value ( ) ) ; return 0 ; -> return create _ executor ( environment . value ( ) , verbose . has _ value ( ) ) . add _ migration ( </%> <%> <+> name . value , context . value ( ) ) ; </%>
<%> <+> STR ) ; var verbose = script . option ( STR , STR ) ; </%> <@> logger . value . log _ error ( STR , from . name ) ; </@> <%> <+> return create _ executor ( environment . value ( ) , verbose . has _ value ( ) ) . </%> <%> <-> return 0 ; </%>
<%> <-> using system _ component _ model _ data _ annotations _ schema ; using system _ data _ common ; using system _ linq ; using system _ reflection ; </%> <%> <-> using microsoft _ entity _ framework _ core _ storage _ converters ; </%> <@> public abstract class relational _ type _ mapper : core _ type _ mapper , i _ relational _ type _ mapper </@> <%> <-> private static readonly i _ read _ only _ dictionary < string , func < type , relational _ type _ mapping > > empty _ named _ mappings = new dictionary < string , func < type , relational _ type _ mapping > > ( ) ; private static readonly method _ info get _ field _ value _ method = typeof ( db _ data _ reader ) . get _ type _ info ( ) . get _ declared _ method ( nameof ( db _ data _ reader . get _ field _ value ) ) ; private static readonly i _ dictionary < type , method _ info > get _ x _ methods = new dictionary < type , method _ info > { { typeof ( bool ) , typeof ( db _ data _ reader ) . get _ type _ info ( ) . get _ declared _ method ( nameof ( db _ data _ reader . get _ boolean ) ) } , { typeof ( byte ) , typeof ( db _ data _ reader ) . get _ type _ info ( ) . get _ declared _ method ( nameof ( db _ data _ reader . get _ byte ) ) } , </%>
<%> <+> = > new fallback _ relational _ core _ type _ mapper ( test _ service _ factory . instance . create < core _ type _ mapper _ dependencies > ( ) , test _ service _ factory . instance . create < relational _ type _ mapper _ dependencies > ( ) , test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) ) ; public static relational _ type _ mapping get _ mapping ( type type ) = > create _ type _ mapper ( ) . find _ mapping ( type ) ; </%> <@> var literal = test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; </@> <%> <-> test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . </%>
<%> <+> = > create _ type _ mapper ( ) . find _ mapping ( type ) ; </%> <%> <-> test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . </%> <@> var literal = test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time _ offset ) ) . generate _ sql _ literal ( value ) ; </@> <%> <-> test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . </%>
<%> <-> test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . </%> <@> var literal = test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . get _ mapping ( typeof ( guid ) ) . generate _ sql _ literal ( value ) ; </@> 
 <@> private readonly dictionary < string , i _ list < relational _ type _ mapping > > store _ type _ mappings ; </@> <%> <-> core _ type _ mapper _ dependencies core _ dependencies , </%> <%> <-> core _ dependencies , </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%>
<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> core _ type _ mapper _ dependencies core _ dependencies , </%> <%> <-> core _ dependencies , </%> <@> = new dictionary < string , i _ list < relational _ type _ mapping > > ( string _ comparer . ordinal _ ignore _ case ) </@> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%>
 <@> private readonly dictionary < string , i _ list < relational _ type _ mapping > > store _ type _ mappings ; </@> <%> <*> public sqlite _ type _ mapper ( not _ null core _ type _ mapper _ dependencies core _ dependencies , not _ null relational _ type _ mapper _ dependencies dependencies ) : base ( core _ dependencies , dependencies ) -> public sqlite _ type _ mapper ( [ not _ null ] relational _ type _ mapper _ dependencies dependencies ) </%> <%> <+> : base ( dependencies ) </%> <%> <-> i _ list < </%> <%> <-> > </%>
<%> <-> i _ list < </%> <%> <-> > </%> <%> <*> public sqlite _ type _ mapper ( not _ null core _ type _ mapper _ dependencies core _ dependencies , not _ null relational _ type _ mapper _ dependencies dependencies ) : base ( core _ dependencies , dependencies ) -> public sqlite _ type _ mapper ( [ not _ null ] relational _ type _ mapper _ dependencies dependencies ) </%> <%> <+> : base ( dependencies ) </%> <@> = new dictionary < string , i _ list < relational _ type _ mapping > > ( string _ comparer . ordinal _ ignore _ case ) ; </@> 
<%> <*> short -> long </%> <@> private readonly i _ read _ only _ dictionary < string , i _ list < relational _ type _ mapping > > simple _ name _ mappings = new dictionary < string , i _ list < relational _ type _ mapping > > </@> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> _ multiple </%>
 <@> private readonly dictionary < string , i _ list < relational _ type _ mapping > > store _ type _ mappings ; </@> <%> <-> core _ type _ mapper _ dependencies core _ dependencies , </%> <%> <-> core _ dependencies , </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> { </%>
<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> core _ type _ mapper _ dependencies core _ dependencies , </%> <%> <-> core _ dependencies , </%> <@> = new dictionary < string , i _ list < relational _ type _ mapping > > ( string _ comparer . ordinal _ ignore _ case ) </@> <%> <-> { STR , new list < relational _ type _ mapping > { variable _ length _ unicode _ string } } , { STR , new list < relational _ type _ mapping > { </%>
<%> <-> core _ dependencies , </%> <@> private readonly i _ read _ only _ dictionary < string , i _ list < relational _ type _ mapping > > simple _ name _ mappings = new dictionary < string , i _ list < relational _ type _ mapping > > </@> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> _ multiple </%>
<%> <+> public static relational _ type _ mapping get _ mapping ( type type ) = > ( relational _ type _ mapping ) new fallback _ relational _ core _ type _ mapper ( test _ service _ factory . instance . create < core _ type _ mapper _ dependencies > ( ) , test _ service _ factory . instance . create < relational _ type _ mapper _ dependencies > ( ) , test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) ) . find _ mapping ( type ) ; </%> <@> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( byte [ ] ) ) . generate _ sql _ literal ( value ) ; </@> <%> <*> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; -> var literal = get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; </%>
<%> <+> . find _ mapping ( type ) ; </%> <%> <*> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( byte [ ] ) ) . generate _ sql _ literal ( value ) ; -> var literal = get _ mapping ( typeof ( byte [ ] ) ) . generate _ sql _ literal ( value ) ; </%> <@> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; </@> <%> <*> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time _ offset ) ) . generate _ sql _ literal ( value ) ; -> var literal = get _ mapping ( typeof ( date _ time _ offset ) ) . generate _ sql _ literal ( value ) ; </%>
<%> <*> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; -> var literal = get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; </%> <@> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time _ offset ) ) . generate _ sql _ literal ( value ) ; </@> <%> <*> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( STR ) . generate _ sql _ literal ( STR ) ; -> var mapping = new fallback _ relational _ core _ type _ mapper ( </%> <%> <+> test _ service _ factory . instance . create < core _ type _ mapper _ dependencies > ( ) , test _ service _ factory . instance . create < relational _ type _ mapper _ dependencies > ( ) , </%>
<%> <-> private readonly relational _ type _ mapping sql _ variant = new sql _ server _ sql _ variant _ type _ mapping ( STR ) ; </%> <%> <*> private readonly i _ read _ only _ dictionary < string , func < type , relational _ type _ mapping > > named _ clr _ mappings = new dictionary < string , func < type , relational _ type _ mapping > > ( string _ comparer . ordinal ) { { STR , t = > new sql _ server _ udt _ type _ mapping ( STR , t ) } , { STR , t = > new sql _ server _ udt _ type _ mapping ( STR , t ) } , { STR , t = > new sql _ server _ udt _ type _ mapping ( STR , t ) } } ; private readonly dictionary < string , i _ list < relational _ type _ mapping > > store _ type _ mappings ; -> private readonly dictionary < string , relational _ type _ mapping > store _ type _ mappings ; </%> <%> <*> public sql _ server _ type _ mapper ( not _ null core _ type _ mapper _ dependencies core _ dependencies , not _ null relational _ type _ mapper _ dependencies dependencies ) : base ( core _ dependencies , dependencies ) -> public sql _ server _ type _ mapper ( [ not _ null ] relational _ type _ mapper _ dependencies dependencies ) </%> <%> <+> : base ( dependencies ) </%> <@> = new dictionary < string , i _ list < relational _ type _ mapping > > ( string _ comparer . ordinal _ ignore _ case ) </@> <%> <-> { STR , new list < relational _ type _ mapping > { long } } , { STR , new list < relational _ type _ mapping > { variable _ length _ binary } } , { STR , new list < relational _ type _ mapping > { fixed _ length _ binary } } , { STR , new list < relational _ type _ mapping > { bool } } , { STR , new list < relational _ type _ mapping > { variable _ length _ ansi _ string } } , { STR , new list < relational _ type _ mapping > { fixed _ length _ ansi _ string } } , { STR , new list < relational _ type _ mapping > { variable _ length _ ansi _ string } } , { STR , new list < relational _ type _ mapping > { fixed _ length _ ansi _ string } } , { STR , new list < relational _ type _ mapping > { date } } , </%>
 <@> new point _ entity ( ) </@> <%> <-> , </%> <%> <-> ( ) </%>
<%> <-> ( ) </%> <%> <-> , </%> <@> new polygon _ entity ( ) </@> 
 <@> new a _ few _ bytes ( ) </@> <%> <-> , </%> <%> <-> ( ) </%> <%> <-> , </%>
<%> <-> ( ) </%> <%> <-> , </%> <@> new a _ few _ bytes ( ) </@> <%> <-> , </%>
<%> <*> benchmark sql _ server _ required public void run ( i _ metric _ collector collector ) -> public void run ( ) </%> <%> <*> using -> for </%> <%> <*> collector . start _ collection ( ) -> var i = 0 ; i < NUM ; i + + </%> <@> for ( var i = 0 ; i < NUM ; i + + ) { query . load ( ) ; } </@> 
 <@> public virtual bool on _ foreign _ key _ uniqueness _ changed ( [ not _ null ] internal _ relationship _ builder relationship _ builder ) </@> <%> <+> relationship _ builder = uniqueness _ convention . apply ( relationship _ builder ) ; </%> <%> <*> if ( ! uniqueness _ convention . apply -> if </%> <%> <*> ) -> = = null </%> <%> <*> return false -> break </%> <%> <*> true -> relationship _ builder </%>
<%> <*> var convention _ set = new core _ convention _ set _ builder ( context . get _ service < core _ convention _ set _ builder _ dependencies > ( ) ) . create _ convention _ set ( loggers ) ; convention _ set = convention _ set _ builder = = null ? convention _ set : convention _ set _ builder . add _ conventions ( convention _ set ) ; -> var convention _ set = convention _ set _ builder . create _ convention _ set ( ) ; </%> <@> = > new composite _ convention _ set _ builder ( context . get _ service < i _ enumerable < i _ convention _ set _ builder > > ( ) . to _ list ( ) ) ; </@> 
 <@> var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; </@> <%> <+> ) . has _ column _ name ( nameof ( a . ) </%> <%> <+> model _ builder . entity < b > ( ) . property ( a = > a . ) . has _ column _ name ( nameof ( a . ) ) ; </%>
 <@> var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; </@> <%> <-> new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . </%>
<%> <-> new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . </%> <@> var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; </@> <%> <-> new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . </%>
<%> <-> new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . </%> <@> var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; </@> <%> <+> ) . has _ column _ name ( STR </%>
 <@> var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; </@> <%> <+> ) . has _ column _ name ( STR </%>
<%> <+> ) . has _ column _ name ( STR </%> <@> var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; </@> <%> <+> ) . has _ column _ name ( nameof ( a . ) </%> <%> <+> model _ builder . entity < b > ( ) . property ( a = > a . ) . has _ column _ name ( nameof ( a . ) ) ; </%>
<%> <*> completed _ async _ enumerator -> enumerator < t > </%> <%> <*> object [ ] -> t </%> <%> <*> object [ ] -> t </%> <%> <-> completed _ async _ </%> <%> <*> object [ ] -> t </%> <@> return task . from _ result ( enumerator . move _ next ( ) ) ; </@> <%> <*> public object [ ] current -> public bool move _ next ( ) </%> <%> <+> { return enumerator . move _ next ( ) ; } public void reset ( ) { enumerator . reset ( ) ; } </%>
<%> <-> if ( value = = null ) { var removed = metadata . remove _ annotation ( name ) ; debug . assert ( removed = = existing _ annotation ) ; } else { </%> <%> <-> } </%> <@> if ( value ! = null ) { metadata . add _ annotation ( name , value , configuration _ source ) ; } </@> 
<%> <-> var collection _ accessor = inverse . is _ collection ( ) ? inverse . get _ collection _ accessor ( ) : null ; </%> <@> set _ reference _ or _ add _ to _ collection ( new _ target _ entry , inverse , collection _ accessor , entry . entity ) ; </@> <%> <*> if ( old _ target _ entry ! = null ) { if ( collection _ accessor ! = null ) { remove _ from _ collection ( old _ target _ entry , inverse , collection _ accessor , entry . entity ) ; } else if ( reference _ equals ( -> if ( old _ target _ entry ! = null & & </%> <%> <*> [ inverse ] , entry . -> . entity _ state ! = </%> <%> <*> ) -> _ state . deleted </%> <%> <*> set -> reset _ reference _ or _ remove </%> <%> <*> navigation -> collection </%> <%> <*> null -> entry </%>
<%> <*> collection -> new </%> <%> <*> accessor , new -> target </%> <%> <*> value -> entry </%> <@> set _ navigation ( new _ target _ entry , inverse , entry . entity ) ; </@> 
<%> <-> var collection _ accessor = principal _ to _ dependent . is _ collection ( ) & & ! principal _ to _ dependent . is _ shadow _ property ? principal _ to _ dependent . get _ collection _ accessor ( ) : null ; </%> <%> <*> if ( collection _ accessor ! = null ) { remove _ from _ collection ( old _ principal _ entry , principal _ to _ dependent , collection _ accessor , entry . entity ) ; } else if ( reference _ equals ( old _ principal _ entry [ principal _ to _ dependent ] , entry . entity ) ) { set _ navigation ( old _ principal _ entry , principal _ to _ dependent , null ) ; } -> reset _ reference _ or _ remove _ collection ( old _ principal _ entry , principal _ to _ dependent , entry ) ; </%> <@> set _ reference _ or _ add _ to _ collection ( new _ principal _ entry , principal _ to _ dependent , collection _ accessor , entry . entity ) ; </@> 
<%> <-> var collection _ accessor = principal _ to _ dependent . is _ collection ( ) ? principal _ to _ dependent . get _ collection _ accessor ( ) : null ; </%> <@> set _ reference _ or _ add _ to _ collection ( entry , principal _ to _ dependent , collection _ accessor , dependent _ entry . entity ) ; </@> <%> <-> . entity </%>
<%> <-> , collection _ accessor </%> <%> <-> . entity </%> <@> set _ navigation ( dependent _ entry , dependent _ to _ principal , entry . entity ) ; </@> 
 <@> set _ navigation ( entry , principal _ to _ dependent , dependent _ entry . entity ) ; set _ navigation ( dependent _ entry , dependent _ to _ principal , entry . entity ) ; </@> <%> <-> var collection _ accessor = principal _ to _ dependent ? . is _ shadow _ property ? ? true ? null : principal _ to _ dependent . get _ collection _ accessor ( ) ; </%> <%> <-> var dependent _ entity = dependent _ entry . entity ; if ( collection _ accessor ! = null ) </%>
<%> <-> ( </%> <%> <*> = = -> . equals ( </%> <@> & & ( ( ( method _ call _ expression . arguments [ 0 ] as constant _ expression ) ? . value as array ) ? . length = = 0 ) ) </@> 
<%> <+> public virtual void concat _ with _ scalar _ projection ( ) { using ( var context = create _ context ( ) ) { var query = context . gears . concat ( context . gears ) . select ( g = > g . nickname ) ; var result = query . to _ list ( ) ; assert . equal ( NUM , result . count ) ; } } conditional _ fact public virtual void concat _ with _ groupings ( ) { using ( var context = create _ context ( ) ) { var query = context . gears . group _ by ( g = > g . leader _ nickname ) . concat ( context . gears . group _ by ( g = > g . leader _ nickname ) ) ; var result = query . to _ list ( ) ; assert . equal ( NUM , result . count ) ; } } conditional _ fact public virtual void select _ navigation _ with _ concat _ and _ count ( ) { using ( var context = create _ context ( ) ) { var query = context . gears . where ( g = > ! g . has _ soul _ patch ) . select ( g = > g . weapons . concat ( g . weapons ) . count ( ) ) . to _ list ( ) ; var result = query . to _ list ( ) ; assert . equal ( NUM , result . count ) ; } } conditional _ fact </%> <@> conditional _ fact _ skip _ issues </@> <%> <-> _ skip _ issues </%>
<%> <-> _ skip _ issues </%> <@> conditional _ fact _ skip _ issues </@> 
<%> <-> using system _ linq ; </%> <%> <-> using jet _ brains _ annotations ; </%> <@> using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators </@> <%> <-> [ not _ null ] </%> <%> <*> if -> switch </%> <%> <*> = = nameof ( date _ time . now ) ) -> ) </%>
<%> <-> using jet _ brains _ annotations ; </%> <@> using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators </@> <%> <-> private static readonly method _ info method _ info = typeof ( string ) . get _ type _ info ( ) . get _ declared _ methods ( nameof ( string . substring ) ) . where ( m = > m . get _ parameters ( ) . count ( ) = = 2 ) . single ( ) ; public virtual expression translate ( [ not _ null ] method _ call _ expression method _ call _ expression ) { if ( method _ call _ expression . method = = method _ info ) { </%>
<%> <-> using jet _ brains _ annotations ; </%> <@> using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators </@> <%> <+> readonly </%> <%> <-> [ not _ null ] </%> <%> <-> { </%> <%> <+> = > method _ infos . contains ( method _ call _ expression . method ) </%> <%> <*> if ( method _ infos . contains ( method -> ? new sql </%> <%> <*> call -> function </%> <%> <*> . method ) ) -> ( </%> <%> <-> { </%> <%> <+> STR , </%>
<%> <-> using jet _ brains _ annotations ; </%> <@> using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators </@> <%> <-> public virtual expression translate ( [ not _ null ] method _ call _ expression method _ call _ expression ) { if ( method _ infos . contains ( method _ call _ expression . method ) ) { var arguments = new [ ] { method _ call _ expression . arguments [ 0 ] , expression . constant ( 0 ) , expression . constant ( 1 ) } ; return new sql _ function _ expression ( STR , method _ call _ expression . type , arguments ) ; </%>
<%> <-> _ sql _ server </%> <%> <*> metadata -> storage </%> <@> using microsoft _ data _ entity _ value _ generation ; namespace microsoft _ data _ entity _ sql _ server _ value _ generation </@> 
<%> <-> using jet _ brains _ annotations ; </%> <@> using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators </@> <%> <*> public virtual expression translate ( [ not _ null ] member _ expression member _ expression ) { if ( -> public virtual expression translate ( member _ expression member _ expression ) = > </%> <%> <*> ) -> ? new sql _ function _ expression ( STR , member _ expression . type , new [ ] </%> <%> <+> member _ expression . expression } ) </%> <%> <*> return new sql _ function _ expression ( STR , member _ expression . type , new [ ] { member _ expression . expression } ) -> : null </%>
<%> <-> using jet _ brains _ annotations ; </%> <@> using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators </@> <%> <-> private static readonly method _ info method _ info = typeof ( string ) . get _ type _ info ( ) . get _ declared _ methods ( nameof ( string . replace ) ) . where ( m = > m . get _ parameters ( ) [ 0 ] . parameter _ type = = typeof ( string ) ) . single ( ) ; public virtual expression translate ( [ not _ null ] method _ call _ expression method _ call _ expression ) { if ( method _ call _ expression . method = = method _ info ) { </%>
<%> <+> _ type </%> <%> <+> _ type </%> <%> <+> . name </%> <@> public entity _ builder < t _ entity > annotation ( [ not _ null ] string annotation , [ not _ null ] object value ) </@> <%> <*> null -> empty </%> <%> <+> _ type </%> <%> <+> _ type </%>
 <@> public property _ builder annotation ( [ not _ null ] string annotation , [ not _ null ] object value ) </@> <%> <*> null -> empty </%>
<%> <+> _ read _ only </%> <%> <*> enumerable -> list </%> <@> dependent _ properties = immutable _ list . create _ range ( dependent _ properties ) ; </@> <%> <+> _ read _ only </%> <%> <*> enumerable -> list </%> <%> <+> _ read _ only </%> <%> <*> enumerable -> list </%>
<%> <+> _ read _ only </%> <%> <*> enumerable -> list </%> <%> <*> enumerable . empty -> immutable _ list </%> <%> <*> ( ) -> . empty </%> <@> key _ properties = value . to _ list ( ) ; </@> <%> <-> if ( foreign _ keys = = null ) </%>
 <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g . tag ] . [ id ] is not null and [ g . tag ] . [ id ] in ( ' STR sql ) ; assert . ends _ with ( STR , sql ) ; </@> <%> <-> . starts </%> <%> <*> with -> sql </%>
 <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g . city _ of _ birth ] . [ location ] is not null and [ g . tag ] . [ id ] in ( ' STR sql ) ; assert . ends _ with ( STR , sql ) ; </@> <%> <-> . starts </%> <%> <*> with -> sql </%> <%> <*> from [ cog _ tag ] as [ t ] select [ g ] . [ nickname ] , [ g ] . [ squad _ id ] , [ g ] . [ assigned _ city _ name ] , [ g ] . [ city _ or _ birth _ name ] , [ g ] . [ discriminator ] , [ g ] . [ full _ name ] , [ g ] . [ has _ soul _ patch ] , [ g ] . [ leader _ nickname ] , [ g ] . [ leader _ squad _ id ] , [ g ] . [ rank ] -> from [ cog _ tag ] as [ t ] STR </%> <%> <+> assert . contains ( </%>
<%> <-> . starts </%> <%> <*> with -> sql </%> <%> <*> from [ cog _ tag ] as [ t ] select [ g ] . [ nickname ] , [ g ] . [ squad _ id ] , [ g ] . [ assigned _ city _ name ] , [ g ] . [ city _ or _ birth _ name ] , [ g ] . [ discriminator ] , [ g ] . [ full _ name ] , [ g ] . [ has _ soul _ patch ] , [ g ] . [ leader _ nickname ] , [ g ] . [ leader _ squad _ id ] , [ g ] . [ rank ] -> from [ cog _ tag ] as [ t ] STR </%> <%> <+> assert . contains ( @ STR </%> <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g . tag ] . [ id ] is not null and [ g . tag ] . [ id ] in ( ' STR sql ) ; assert . ends _ with ( STR , sql ) ; </@> 
 <@> & & ( t . get _ custom _ attribute < db _ context _ attribute > ( ) ? . context _ type = = context _ type ) </@> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> ( </%> <%> <-> ) </%> <@> & & ( t . get _ custom _ attribute < db _ context _ attribute > ( ) ? . context _ type = = context _ type ) </@> 
<%> <*> size , has _ non _ default _ unicode , has _ non _ default _ size : size ! = size ) ; -> size ) ; </%> <%> <-> ( </%> <%> <+> max _ specific _ </%> <%> <-> . value ) </%> <%> <+> max _ specific _ </%> <%> <-> . value </%> <@> = > ( is _ unicode ? $ STR : $ STR ) ; </@> 
<%> <+> private readonly int max _ specific _ size ; </%> <@> int? size = null , bool has _ non _ default _ size = false ) : base ( store _ type , db _ type , calculate _ size ( size ) , has _ non _ default _ size ) </@> <%> <+> max _ specific _ size = calculate _ size ( size ) ; </%> <%> <-> size , </%>
<%> <*> void -> bool </%> <@> base . open ( ) ; opened _ count + + ; if ( opened _ count = = 1 ) </@> <%> <+> return true ; </%> <%> <+> return false ; </%> <%> <+> < bool > </%> <%> <-> await base . open _ async ( cancellation _ token ) ; opened _ count + + ; </%>
<%> <*> base . open ( ) ; opened _ count + + ; if ( opened _ count = = 1 ) -> if ( base . open ( ) ) </%> <%> <+> return true ; </%> <%> <+> return false ; </%> <%> <+> < bool > </%> <@> await base . open _ async ( cancellation _ token ) ; opened _ count + + ; if ( opened _ count = = 1 ) </@> <%> <+> return true ; </%> <%> <*> } public override void close ( ) { base . close ( ) ; opened _ count - - ; -> return false ; </%>
<%> <*> = > context . add ( check . not _ null ( entity , nameof ( entity ) ) ) ; -> = > context . add ( entity ) ; </%> <%> <+> public override task < entity _ entry < t _ entity > > add _ async ( t _ entity entity , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) = > context . add _ async ( entity , cancellation _ token ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <@> = > context . remove ( check . not _ null ( entity , nameof ( entity ) ) ) ; </@> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( params t _ entity [ ] entities ) = > context . add _ range _ async ( entities ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%>
<%> <*> = > context . add ( check . not _ null ( entity , nameof ( entity ) ) ) ; -> = > context . add ( entity ) ; </%> <%> <+> public override task < entity _ entry < t _ entity > > add _ async ( t _ entity entity , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) = > context . add _ async ( entity , cancellation _ token ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <@> = > context . update ( check . not _ null ( entity , nameof ( entity ) ) ) ; </@> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( params t _ entity [ ] entities ) = > context . add _ range _ async ( entities ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%>
<%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( params t _ entity [ ] entities ) = > context . add _ range _ async ( entities ) ; </%> <@> = > context . attach _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; </@> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( i _ enumerable < t _ entity > entities , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </%>
<%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( params t _ entity [ ] entities ) = > context . add _ range _ async ( entities ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <@> = > context . remove _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; </@> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( i _ enumerable < t _ entity > entities , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) = > context . add _ range _ async ( entities , cancellation _ token ) ; </%>
<%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( params t _ entity [ ] entities ) = > context . add _ range _ async ( entities ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <@> = > context . update _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; </@> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( i _ enumerable < t _ entity > entities , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) = > context . add _ range _ async ( entities , cancellation _ token ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%>
<%> <*> assert . null ( string _ property . is _ nullable ) ; assert . true ( ( ( i _ property ) string _ property ) . is _ nullable ) ; assert . null ( string _ property . is _ nullable ) ; assert . true ( ( ( i _ property ) nullable _ int _ property ) . is _ nullable ) ; assert . null ( int _ property . is _ nullable ) ; assert . false ( ( ( i _ property ) int _ property ) . is _ nullable ) ; -> assert . true ( string _ property . is _ nullable ) ; </%> <%> <+> assert . true ( nullable _ int _ property . is _ nullable ) ; assert . false ( int _ property . is _ nullable ) ; </%> <@> assert . null ( string _ property . is _ nullable ) ; assert . false ( ( ( i _ property ) string _ property ) . is _ nullable ) ; </@> <%> <-> . value </%> <%> <*> null -> false </%>
<%> <*> assert . null ( string _ property . is _ nullable ) ; assert . false ( ( ( i _ property ) string _ property ) . is _ nullable ) ; -> assert . false ( string _ property . is _ nullable ) ; </%> <@> assert . false ( string _ property . is _ nullable . value ) ; assert . null ( int _ property . is _ nullable ) ; </@> <%> <*> assert . true ( string _ property . is _ nullable . value ) ; assert . false ( int _ property . is _ nullable . value ) ; string _ property . is _ nullable = null ; int _ property . is _ nullable = null ; assert . null ( string _ property . is _ nullable ) ; assert . null ( int _ property . is _ nullable ) ; -> assert . true ( string _ property . is _ nullable ) ; </%> <%> <+> assert . false ( int _ property . is _ nullable ) ; </%>
<%> <+> assert . false ( int _ property . is _ nullable ) ; </%> <%> <-> . value </%> <@> assert . null ( string _ property . is _ nullable ) ; assert . false ( ( ( i _ property ) string _ property ) . is _ nullable ) ; </@> 
 <@> assert . null ( property . value _ generated ) ; assert . equal ( value _ generated . never , ( ( i _ property ) property ) . value _ generated ) ; </@> <%> <-> . value </%>
<%> <-> . value </%> <@> assert . equal ( value _ generated . never , property . value _ generated . value ) ; property . value _ generated = null ; assert . null ( property . value _ generated ) ; </@> <%> <*> assert . null ( property . is _ concurrency _ token ) ; assert . false ( ( ( i _ property ) property ) . is _ concurrency _ token ) ; -> assert . false ( property . is _ concurrency _ token ) ; </%>
<%> <-> . value </%> <%> <*> assert . equal ( value _ generated . never , property . value _ generated . value ) ; property . value _ generated = null ; assert . null ( property . value _ generated ) ; -> assert . equal ( value _ generated . never , property . value _ generated ) ; </%> <@> assert . null ( property . is _ concurrency _ token ) ; assert . false ( ( ( i _ property ) property ) . is _ concurrency _ token ) ; </@> <%> <-> . value </%>
<%> <-> . value </%> <@> assert . false ( property . is _ concurrency _ token . value ) ; property . is _ concurrency _ token = null ; assert . null ( property . is _ concurrency _ token ) ; </@> <%> <*> assert . null ( property . is _ store _ generated _ always ) ; assert . false ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ; -> assert . false ( property . is _ store _ generated _ always ) ; </%>
<%> <-> . value </%> <%> <*> assert . false ( property . is _ concurrency _ token . value ) ; property . is _ concurrency _ token = null ; assert . null ( property . is _ concurrency _ token ) ; -> assert . false ( property . is _ concurrency _ token ) ; </%> <@> assert . null ( property . is _ store _ generated _ always ) ; assert . false ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ; </@> <%> <*> assert . true ( property . is _ store _ generated _ always . value ) ; assert . true ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ; -> assert . true ( property . is _ store _ generated _ always ) ; </%> <%> <-> assert . false ( property . is _ store _ generated _ always . value ) ; assert . false ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ; property . is _ store _ generated _ always = null ; assert . null ( property . is _ store _ generated _ always ) ; assert . false ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ; </%>
<%> <-> . value </%> <@> assert . false ( property . is _ read _ only _ before _ save . value ) ; property . is _ read _ only _ before _ save = null ; assert . null ( property . is _ read _ only _ before _ save ) ; </@> <%> <-> . value </%>
<%> <-> . value </%> <@> assert . false ( property . is _ read _ only _ after _ save . value ) ; property . is _ read _ only _ after _ save = null ; assert . null ( property . is _ read _ only _ after _ save ) ; </@> <%> <+> assert . false ( property . is _ read _ only _ before _ save ) ; assert . false ( property . is _ read _ only _ after _ save ) ; </%>
<%> <*> use -> requires </%> <@> assert . false ( key _ properties [ 0 ] . requires _ value _ generator . value ) ; </@> 
<%> <+> check . not _ null ( content , nameof ( content ) ) ; check . not _ null ( template _ model , nameof ( template _ model ) ) ; </%> <@> var messages = generator _ results . parser _ errors . select ( e = > strings . error _ message _ with _ line _ number ( e . location . line _ index , e . message ) ) ; </@> <%> <-> provider . add _ references _ for _ templates ( metadata _ references _ provider ) ; </%>
 <@> = > property ( property _ name , property _ type : null , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : configuration _ source ) ; </@> <%> <-> if ( is _ ignored ( property _ name , configuration _ source ) ) </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> = > database _ creator is i _ database _ creator _ with _ can _ connect with _ can _ connect ? with _ can _ connect . can _ connect ( ) : throw new not _ implemented _ exception ( core _ strings . can _ connect _ not _ implemented ) ; </@> <%> <*> = > database _ creator is i _ database _ creator _ with _ can _ connect with _ can _ connect ? with _ can _ connect . can _ connect _ async ( cancellation _ token ) : throw new not _ implemented _ exception ( core _ strings . can _ connect _ not _ implemented ) ; -> = > database _ creator . can _ connect _ async ( cancellation _ token ) ; </%>
<%> <*> = > database _ creator is i _ database _ creator _ with _ can _ connect with _ can _ connect ? with _ can _ connect . can _ connect ( ) : throw new not _ implemented _ exception ( core _ strings . can _ connect _ not _ implemented ) ; -> = > database _ creator . can _ connect ( ) ; </%> <@> = > database _ creator is i _ database _ creator _ with _ can _ connect with _ can _ connect ? with _ can _ connect . can _ connect _ async ( cancellation _ token ) : throw new not _ implemented _ exception ( core _ strings . can _ connect _ not _ implemented ) ; </@> 
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; </@> 
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; </@> 
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; </@> 
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; </@> <%> <-> var test _ listener = context _ services </%>
 <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; </@> <%> <-> var test _ listener = context _ services </%>
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; </@> 
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; </@> 
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; </@> 
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model _ with _ changed ( ) ) ; </@> 
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model _ with _ changed ( ) ) ; </@> <%> <-> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) </%>
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model _ with _ changed ( ) ) ; </@> 
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model _ with _ changed ( ) ) ; </@> 
 <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; </@> <%> <-> var test _ listener = context _ services </%>
 <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; </@> <%> <-> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) </%>
 <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; </@> <%> <-> var test _ listener = context _ services </%>
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; </@> <%> <-> var test _ listener = context _ services </%>
 <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; </@> <%> <-> var test _ listener = context _ services </%>
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; </@> 
 <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; </@> <%> <-> var test _ listener = context _ services </%>
<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> <@> var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; </@> 
<%> <*> autoincrement -> identity _ metadata </%> <%> <+> _ is _ ignored </%> <@> var ex = assert . throws < sqlite _ exception > ( ( ) = > context . database . ensure _ created ( ) ) ; assert . contains ( STR , ex . message ) ; </@> 
<%> <*> i _ read _ only _ list < i _ property > key _ properties ; return find _ tracked ( key _ values , out key _ properties ) ? ? set . first _ or _ default ( build _ lambda ( key _ properties , new value _ buffer ( key _ values ) ) ) ; -> return find _ tracked ( key _ values , out i _ read _ only _ list < i _ property > key _ properties ) </%> <%> <+> ? ? query _ root . first _ or _ default ( build _ lambda ( key _ properties , new value _ buffer ( key _ values ) ) ) ; </%> <@> i _ read _ only _ list < i _ property > key _ properties ; var tracked = find _ tracked ( key _ values , out key _ properties ) ; </@> <%> <*> set -> query _ root </%> <%> <*> i _ read _ only _ list < i _ property > key _ properties ; var tracked = find _ tracked ( key _ values , out key _ properties ) ; -> var tracked = find _ tracked ( key _ values , out i _ read _ only _ list < i _ property > key _ properties ) ; </%>
<%> <*> i _ read _ only _ list < i _ property > key _ properties ; var tracked = find _ tracked ( key _ values , out key _ properties ) ; -> var tracked = find _ tracked ( key _ values , out i _ read _ only _ list < i _ property > key _ properties ) ; </%> <%> <*> set -> query _ root </%> <@> i _ read _ only _ list < i _ property > key _ properties ; var tracked = find _ tracked ( key _ values , out key _ properties ) ; </@> <%> <*> set -> query _ root </%>
<%> <*> if ( method _ call _ expression . method . is _ generic _ method ) -> if ( method _ call _ expression . method . is _ generic _ method </%> <%> <+> & & reference _ equals ( method _ call _ expression . method . get _ generic _ method _ definition ( ) , entity _ query _ model _ visitor . property _ method _ info ) ) </%> <@> var method _ info = method _ call _ expression . method . get _ generic _ method _ definition ( ) ; if ( reference _ equals ( method _ info , entity _ query _ model _ visitor . property _ method _ info ) ) { return method _ call _ expression ; } </@> 
<%> <*> property . requires _ relationship _ snapshot ( ) ? relationship _ index + + : - 1 ) ; -> property . is _ key _ or _ foreign _ key ( ) ? relationship _ index + + : - 1 , </%> <%> <+> may _ be _ store _ generated ( property ) ? store _ generation _ index + + : - 1 ) ; </%> <@> var indexes = new property _ indexes ( index + + , - 1 , - 1 , relationship _ index + + ) ; </@> 
<%> <+> using microsoft _ data _ entity _ storage ; </%> <@> public abstract partial class internal _ entity _ entry : i _ property _ accessor , i _ update _ entry </@> <%> <*> private sidecar [ ] sidecars ; -> private original _ values original _ values ; </%> <%> <+> private relationships _ snapshot relationships _ snapshot ; private store _ generated _ values store _ generated _ values ; </%> <%> <-> not _ null i _ entity _ type entity _ type , not _ null i _ entity _ entry _ metadata _ services metadata _ services ) </%>
<%> <+> var configuration _ source = annotations . configuration _ source ; </%> <%> <+> | | property _ type ! = null ) </%> <%> <*> | | -> & & ! configuration _ source . overrides ( get _ discriminator _ </%> <%> <*> type ! = null -> configuration _ source ( </%> <%> <+> ) </%> <@> if ( ! set _ discriminator _ property ( null ) ) { return null ; } </@> <%> <-> var configuration _ source = annotations . configuration _ source ; </%>
 <@> member _ info _ test ( property , null , field , property , property ) ; </@> <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%>
<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%> <@> member _ info _ test ( property , null , field , property , property ) ; </@> <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%>
<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%> <@> member _ info _ test ( property , null , field , field , property ) ; </@> <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%>
<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%> <@> member _ info _ test ( property , null , field , field , property ) ; </@> <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%>
<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%> <@> member _ info _ test ( property , null , field , field , property ) ; </@> <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%>
<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%> <@> member _ info _ test ( property , null , field , property , field ) ; </@> <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , field ) ; </%>
<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , property , property , no _ field _ or _ getter < write _ only _ prop _ no _ field > ( ) ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , property , property , no _ field _ or _ getter < write _ only _ prop _ no _ field > ( ) ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , no _ field _ or _ getter < write _ only _ prop _ no _ field > ( ) ) ; </%> <@> member _ info _ test ( property , null , field , property , property ) ; </@> <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%>
<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%> <@> member _ info _ test ( property , null , field , property , property ) ; </@> <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%>
<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%> <@> member _ info _ test ( navigation , null , field , reference , reference ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%> <@> member _ info _ test ( navigation , null , field , reference , reference ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%> <@> member _ info _ test ( navigation , null , field , field , reference ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%> <@> member _ info _ test ( navigation , null , field , field , reference ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%> <@> member _ info _ test ( navigation , null , field , field , reference ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%> <@> member _ info _ test ( navigation , null , field , reference , field ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , field ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , reference , reference , no _ field _ or _ getter _ ref < write _ only _ prop _ no _ field > ( ) ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , reference , reference , no _ field _ or _ getter _ ref < write _ only _ prop _ no _ field > ( ) ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , no _ field _ or _ getter _ ref < write _ only _ prop _ no _ field > ( ) ) ; </%> <@> member _ info _ test ( navigation , null , field , reference , reference ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%> <@> member _ info _ test ( navigation , null , field , reference , reference ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%> <@> member _ info _ test ( navigation , null , field , collection , collection ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , collection , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , collection , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%> <@> member _ info _ test ( navigation , null , field , collection , collection ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , collection , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , collection , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%> <@> member _ info _ test ( navigation , null , field , field , collection ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%> <@> member _ info _ test ( navigation , null , field , field , collection ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%> <@> member _ info _ test ( navigation , null , field , field , collection ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%> <@> member _ info _ test ( navigation , null , field , collection , field ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , collection , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , field ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , collection , collection , no _ field _ or _ getter _ coll < write _ only _ prop _ no _ field > ( ) ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , no _ field _ or _ getter _ coll < write _ only _ prop _ no _ field > ( ) ) ; </%> <@> member _ info _ test ( navigation , null , field , collection , collection ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%>
<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%> <@> member _ info _ test ( navigation , null , field , collection , collection ) ; </@> <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%>
<%> <*> if ( ! use _ query _ composition ) -> if ( ! use _ query _ composition </%> <%> <+> & & relational _ query _ compilation _ context . is _ include _ query ) </%> <@> if ( relational _ query _ compilation _ context . is _ include _ query ) { throw new invalid _ operation _ exception ( relational _ strings . stored _ procedure _ include _ not _ supported ) ; } </@> 
<%> <-> protected override void track _ entities _ in _ results < t _ result > ( [ not _ null ] query _ model query _ model ) { </%> <%> <*> } -> public bool all _ members _ bound _ to _ j _ object { get ; set ; } = true ; </%> <@> debug . assert ( expression is query _ shaper _ expression , STR ) ; var query _ shaper _ expression = ( query _ shaper _ expression ) expression ; if ( query _ shaper _ expression . query _ expression is document _ query _ expression document _ query _ expression ) </@> <%> <*> var select _ expression = document _ query _ expression . select _ expression ; var sql _ translating _ expression _ visitor = new sql _ translating _ expression _ visitor ( select _ expression , query _ compilation _ context ) ; var sql _ predicate = sql _ translating _ expression _ visitor . visit ( where _ clause . predicate ) ; if ( sql _ predicate ! = null ) -> if ( query _ shaper _ expression . query _ expression is document _ query _ expression document _ query _ expression ) </%> <%> <+> var select _ expression = document _ query _ expression . select _ expression ; var sql _ translating _ expression _ visitor = new sql _ translating _ expression _ visitor ( </%>
<%> <-> using microsoft _ data _ entity _ infrastructure ; </%> <@> private readonly db _ context _ service < i _ model > model ; </@> <%> <-> db _ context _ service < </%> <%> <-> > </%>
<%> <-> db _ context _ service < </%> <%> <-> > </%> <@> not _ null db _ context _ service < i _ model > model ) </@> 
<%> <*> public migration _ assembly ( not _ null db _ context _ service < db _ context > context , not _ null db _ context _ service < i _ db _ context _ options > options ) -> public migration _ assembly ( [ not _ null ] db _ context context , [ not _ null ] i _ db _ context _ options options ) </%> <@> var context _ type = context . service . get _ type ( ) ; var assembly _ name = relational _ options _ extension . extract ( options . service ) ? . migrations _ assembly ; </@> 
<%> <-> using microsoft _ data _ entity _ internal ; </%> <@> private readonly db _ context _ service < db _ context > context ; </@> <%> <-> _ service < db _ context > </%>
<%> <-> _ service < db _ context > </%> <@> not _ null db _ context _ service < db _ context > context , </@> 
<%> <*> not _ null state _ manager state _ manager , not _ null db _ context _ service < i _ model > model , -> not _ null i _ model model , </%> <%> <-> not _ null clr _ collection _ accessor _ source collection _ accessor _ source , not _ null clr _ property _ setter _ source property _ setter _ source , </%> <@> not _ null db _ context _ service < i _ db _ context _ options > options , </@> <%> <-> check . not _ null ( state _ manager , nameof ( state _ manager ) ) , </%> <%> <-> check . not _ null ( collection _ accessor _ source , nameof ( collection _ accessor _ source ) ) , check . not _ null ( property _ setter _ source , nameof ( property _ setter _ source ) ) , </%>
<%> <-> check . not _ null ( collection _ accessor _ source , nameof ( collection _ accessor _ source ) ) , check . not _ null ( property _ setter _ source , nameof ( property _ setter _ source ) ) , </%> <@> options = options . service ; </@> <%> <-> protected virtual relational _ value _ reader _ factory value _ reader _ factory = > new relational _ typed _ value _ reader _ factory ( ) ; </%>
<%> <-> using microsoft _ data _ entity _ infrastructure ; </%> <@> not _ null db _ context _ service < db _ context > context , </@> 
 <@> private readonly db _ context _ service < i _ history _ repository > history _ repository ; private readonly lazy _ ref < relational _ data _ store _ creator > data _ store _ creator ; private readonly db _ context _ service < migration _ sql _ generator > sql _ generator ; </@> <%> <-> lazy _ ref < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%>
<%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> lazy _ ref < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <@> private readonly lazy _ ref < relational _ connection > connection ; private readonly db _ context _ service < model _ differ > model _ differ ; private readonly db _ context _ service < i _ model > model ; </@> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%>
<%> <-> lazy _ ref < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <@> not _ null db _ context _ service < i _ history _ repository > history _ repository , not _ null db _ context _ service < data _ store _ creator > data _ store _ creator , not _ null db _ context _ service < migration _ sql _ generator > sql _ generator , </@> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%>
 <@> data _ store _ creator = new lazy _ ref < relational _ data _ store _ creator > ( ( ) = > ( relational _ data _ store _ creator ) data _ store _ creator . service ) ; </@> <%> <-> connection = new lazy _ ref < relational _ </%> <%> <-> > ( ( ) </%> <%> <-> > </%> <%> <-> . service ) </%>
<%> <*> data _ store _ creator = new lazy _ ref < relational _ data _ store _ creator > ( ( ) = > ( relational _ data _ store _ creator ) data _ store _ creator . service ) ; -> data _ store _ creator = ( relational _ data _ store _ creator ) data _ store _ creator ; </%> <@> connection = new lazy _ ref < relational _ connection > ( ( ) = > ( relational _ connection ) connection . service ) ; </@> <%> <-> . service </%>
<%> <-> . service </%> <@> model _ differ . service . has _ differences ( migration _ assembly . model _ snapshot ? . model , model . service ) ; </@> <%> <-> . service </%>
<%> <-> . value </%> <%> <-> . value </%> <%> <-> . value </%> <@> executor . execute _ non _ query ( connection . value , transaction . db _ transaction , sql _ batches ) ; </@> 
<%> <-> using microsoft _ data _ entity _ infrastructure ; </%> <@> private readonly db _ context _ service < i _ model > model ; </@> <%> <-> db _ context _ service < </%> <%> <-> > </%>
 <@> not _ null db _ context _ service < db _ context > context , not _ null db _ context _ service < i _ model > model , </@> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%>
<%> <-> _ service < db _ context > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <@> not _ null db _ context _ service < model _ differ > model _ differ , </@> <%> <-> db _ context _ service < </%> <%> <-> > </%>
 <@> context _ type = context . service . get _ type ( ) ; model = model . service ; </@> <%> <-> . service </%> <%> <-> . service </%> <%> <-> ( ) = > </%> <%> <-> ( ) </%>
<%> <-> . service </%> <%> <-> . service </%> <%> <-> . service </%> <@> history _ repository = history _ repository . service ; logger = new lazy _ ref < i _ logger > ( ( ) = > logger _ factory . create < migration _ scaffolder > ( ) ) ; </@> 
<%> <-> db _ context _ service < </%> <%> <-> > </%> <@> not _ null db _ context _ service < i _ model > model , not _ null db _ context _ service < data _ store > data _ store ) </@> 
 <@> not _ null db _ context _ service < db _ context > context ) </@> <%> <-> . service </%>
<%> <-> using microsoft _ data _ entity _ infrastructure ; </%> <@> private readonly db _ context _ service < db _ context > context ; </@> <%> <-> _ service < db _ context > </%>
<%> <-> _ service < db _ context > </%> <@> not _ null db _ context _ service < db _ context > context , </@> <%> <-> protected virtual i _ logger logger </%>
 <@> context . service , </@> <%> <*> if ( started _ transaction ! = null ) { started _ transaction . commit ( ) ; } -> started _ transaction ? . commit ( ) ; </%>
 <@> context . service , </@> <%> <*> if ( started _ transaction ! = null ) { started _ transaction . commit ( ) ; } -> started _ transaction ? . commit ( ) ; </%>
 <@> not _ null db _ context _ service < db _ context > context , </@> <%> <*> context -> migrator </%> <%> <-> public virtual void apply _ migrations ( ) </%>
<%> <-> _ service < db _ context > </%> <@> check . not _ null ( migrator , nameof ( context ) ) ; </@> <%> <*> public virtual void apply _ migrations ( ) { migrator . apply _ migrations ( ) ; } -> public virtual void apply _ migrations ( ) = > migrator . apply _ migrations ( ) ; </%>
 <@> return new db _ context _ service < i _ db _ context _ options > ( context _ options ) ; </@> <%> <-> db _ context _ service < </%> <%> <-> > </%>
<%> <*> not _ null state _ manager state _ manager , not _ null db _ context _ service < i _ model > model , -> not _ null i _ model model , </%> <%> <-> not _ null clr _ collection _ accessor _ source collection _ accessor _ source , not _ null clr _ property _ setter _ source property _ setter _ source , </%> <@> not _ null db _ context _ service < i _ db _ context _ options > options , </@> <%> <-> check . not _ null ( state _ manager , nameof ( state _ manager ) ) , </%> <%> <-> check . not _ null ( collection _ accessor _ source , nameof ( collection _ accessor _ source ) ) , check . not _ null ( property _ setter _ source , nameof ( property _ setter _ source ) ) , </%>
<%> <-> db _ context _ service < </%> <%> <-> > </%> <@> var store _ config = relational _ options _ extension . extract ( options . service ) ; </@> 
<%> <*> state _ manager state _ manager , db _ context _ service < i _ model > model , -> i _ model model , </%> <%> <-> clr _ collection _ accessor _ source collection _ accessor _ source , clr _ property _ setter _ source property _ setter _ source , </%> <@> db _ context _ service < i _ db _ context _ options > options , </@> <%> <*> : base ( state _ manager , model , entity _ key _ factory _ source , entity _ materializer _ source , collection _ accessor _ source , property _ setter _ source , connection , batch _ preparer , batch _ executor , options , logger _ factory ) -> : base ( model , entity _ key _ factory _ source , entity _ materializer _ source , connection , batch _ preparer , batch _ executor , options , logger _ factory ) </%>
<%> <*> not _ null state _ manager state _ manager , not _ null db _ context _ service < i _ model > model , -> not _ null i _ model model , </%> <%> <-> not _ null clr _ collection _ accessor _ source collection _ accessor _ source , not _ null clr _ property _ setter _ source property _ setter _ source , </%> <@> not _ null db _ context _ service < i _ db _ context _ options > options , </@> <%> <-> check . not _ null ( state _ manager , nameof ( state _ manager ) ) , </%> <%> <-> check . not _ null ( collection _ accessor _ source , nameof ( collection _ accessor _ source ) ) , check . not _ null ( property _ setter _ source , nameof ( property _ setter _ source ) ) , </%>
<%> <-> . service </%> <%> <-> . service </%> <%> <*> data -> query </%> <%> <*> store . service -> context _ factory </%> <%> <-> . service </%> <@> . execute _ async < t _ result > ( expression , data _ store . service , query _ context , cancellation _ token ) ; </@> 
 <@> private readonly db _ context _ service < db _ context > context ; </@> <%> <-> _ service < db _ context > </%>
<%> <-> _ service < db _ context > </%> <@> not _ null db _ context _ service < db _ context > context , </@> <%> <-> . service </%>
<%> <-> _ service < db _ context > </%> <@> var entry = new entity _ entry ( context . service , state _ manager . get _ or _ create _ entry ( entity ) ) ; </@> 
 <@> private readonly db _ context _ service < db _ context > context ; </@> <%> <-> _ service < db _ context > </%>
<%> <-> _ service < db _ context > </%> <@> not _ null db _ context _ service < db _ context > context ) </@> 
 <@> return state _ manager . entries . select ( e = > new entity _ entry ( context . service , e ) ) ; </@> <%> <-> . service </%>
<%> <-> . service </%> <@> . select ( e = > new entity _ entry < t _ entity > ( context . service , e ) ) ; </@> <%> <-> . service </%>
<%> <-> . service </%> <@> public virtual db _ context context = > context . service ; </@> 
 <@> public static db _ context _ service < i _ db _ context _ options > create _ options ( ) </@> <%> <*> return new db _ context _ service < i _ db _ context _ options > ( ( ) = > -> return </%> <%> <-> ) </%>
<%> <-> db _ context _ service < </%> <%> <-> > </%> <@> return new db _ context _ service < i _ db _ context _ options > ( ( ) = > options ) ; </@> 
 <@> using microsoft _ data _ entity _ internal ; using microsoft _ data _ entity _ utilities ; namespace microsoft _ data _ entity _ storage </@> <%> <*> sources -> providers </%> <%> <*> sources -> providers </%>
<%> <-> using microsoft _ data _ entity _ utilities ; </%> <@> private readonly static async _ local < sql _ logger > logger = new async _ local < sql _ logger > ( ) ;  private const string context _ name = STR ; </@> <%> <*> public i _ logger create _ logger ( string name ) { return logger ; } -> public i _ logger create _ logger ( string name ) = > logger ; </%> <%> <+> private static sql _ logger logger = > lazy _ initializer . ensure _ initialized ( ref logger ) ; </%> <%> <+> throw new not _ implemented _ exception ( ) ; </%>
<%> <*> get _ candidate _ foreign _ key _ properties ( principal _ type , dependent _ type , navigation _ to -> immutable </%> <%> <*> principal , is _ unqiue ) -> list < property > . empty </%> <%> <*> new -> immutable _ list < </%> <%> <*> [ 0 ] -> > . empty </%> <@> not _ null i _ read _ only _ list < i _ read _ only _ list < property > > foreign _ key _ properties , </@> <%> <*> if ( ! foreign _ key _ properties . any ( ) ) -> i _ read _ only _ list < i _ read _ only _ list < property > > foreign _ key _ candidates ; </%> <%> <+> if ( foreign _ key _ properties . any ( ) ) </%> <%> <*> properties -> candidates </%> <%> <*> get -> new list < i </%> <%> <*> candidate -> read </%> <%> <+> only _ list < property > > { </%> <%> <*> ( principal _ type , dependent _ type , navigation _ to _ principal , is _ unqiue ) ; -> } ; </%>
<%> <*> int -> int? </%> <@> new [ ] { new [ ] { fk _ property , fk _ property } } , </@> <%> <*> assert . same ( primary _ key , fk . referenced _ properties . single ( ) ) ; -> assert . equal ( 2 , fk . referenced _ properties . count ) ; </%> <%> <+> assert . equal ( STR , fk . referenced _ properties [ 0 ] . name ) ; assert . same ( typeof ( int ) , fk . referenced _ properties [ 0 ] . property _ type ) ; assert . true ( fk . referenced _ properties [ 0 ] . is _ shadow _ property ) ; assert . equal ( STR , fk . referenced _ properties [ 1 ] . name ) ; </%>
<%> <+> _ internal </%> <@> var model = new entity . metadata . internal . model ( ) ; </@> 
 <@> var model = new entity . metadata . internal . model ( ) ; </@> <%> <-> create _ model _ validator ( ) . </%>
<%> <-> create _ model _ validator ( ) . </%> <@> var model = new entity . metadata . internal . model ( ) ; </@> <%> <*> entity _ c . has _ base _ type ( entity _ a ) ; var discriminator _ property = entity _ a . add _ property ( STR , typeof ( int ) ) ; entity _ a . relational ( ) . discriminator _ property = discriminator _ property ; entity _ a . relational ( ) . discriminator _ value = 0 ; entity _ c . relational ( ) . discriminator _ value = 1 ; create _ model _ validator ( ) . validate ( model ) ; -> set _ base _ type ( entity _ c , entity _ a ) ; </%>
 <@> var model = new entity . metadata . internal . model ( ) ; </@> <%> <-> create _ model _ validator ( ) . </%> <%> <-> entity . metadata . internal . </%>
<%> <-> entity . metadata . internal . </%> <%> <-> create _ model _ validator ( ) . </%> <@> var model = new entity . metadata . internal . model ( ) ; </@> <%> <-> create _ model _ validator ( ) . </%> <%> <-> entity . metadata . internal . </%>
<%> <-> entity . metadata . internal . </%> <%> <-> create _ model _ validator ( ) . </%> <@> var model = new entity . metadata . internal . model ( ) ; </@> <%> <-> entity . metadata . internal . </%>
<%> <-> entity . metadata . internal . </%> <@> var model = new entity . metadata . internal . model ( ) ; </@> 
 <@> var model = new entity . metadata . internal . model ( ) ; </@> <%> <+> } protected override void set _ base _ type ( entity _ type entity _ type , entity _ type base _ entity _ type ) </%>
<%> <-> , orphan . name </%> <@> var current _ configuration _ source = entity _ type _ builders . get _ configuration _ source ( entity _ type ) ; </@> <%> <+> metadata . </%> <%> <+> metadata . </%>
<%> <-> ( </%> <@> & & ! query _ model . result _ operators . any ( ) ) | | ( ! query _ model . body _ clauses . any ( ) & & ! sub _ query _ model . result _ operators . any ( ro = > ro is group _ result _ operator ) ) ) </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
<%> <+> validate _ transaction ( ) ; </%> <@> open _ reader = new sq _ lite _ data _ reader ( this ) ; return open _ reader ; </@> 
 <@> private static readonly constructor _ info composite _ key _ ctor = typeof ( composite _ key ) . get _ type _ info ( ) . declared _ constructors . single ( ) ; public static bool is _ composite _ key ( [ not _ null ] type type ) </@> <%> <-> } private struct composite _ key { public static bool operator = = ( composite _ key x , composite _ key y ) = > x . equals ( y ) ; public static bool operator ! = ( composite _ key x , composite _ key y ) = > ! x . equals ( y ) ; private readonly object [ ] values ; used _ implicitly </%>
 <@> fact _ skip _ issue </@> <%> <+> { var context = new test _ context ( ) ; func < i _ queryable < test _ entity > , int > func = queryable . count ; i _ queryable q = context . test _ entities ; var expr = expression . call ( null , func . get _ method _ info ( ) , q . expression ) ; assert . equal ( 0 , q . provider . execute < int > ( expr ) ) ; assert . equal ( 0 , ( int ) q . provider . execute ( expr ) ) ; } fact </%>
 <@> new [ ] { STR + environment + STR , STR } , </@> <%> <-> new [ ] { </%> <%> <-> } </%>
<%> <-> new [ ] { STR + environment + </%> <%> <-> STR } , </%> <@> invoke ( type , new [ ] { STR } , services ) ; </@> <%> <-> [ ] </%> <%> <*> names -> name </%> <%> <-> method _ info method = null ; for ( var i = 0 ; i < method _ names . length ; i + + ) </%>
<%> <-> lambda _ </%> <%> <-> return _ </%> <@> return expression . lambda ( expression . block ( variables , expressions ) , lambda _ expression . parameters ) ; </@> 
<%> <-> lambda _ </%> <@> inner _ shaper = expression . lambda ( new entity _ shaper _ nullable _ marking _ expression _ visitor ( ) . visit ( inner _ shaper . body ) , inner _ shaper . parameters ) ; </@> 
<%> <*> result -> outer . shaper </%> <%> <*> body -> expression </%> <@> shaper _ expression . body , </@> <%> <-> outer . shaper _ expression = expression . lambda ( result _ body , shaper _ expression . parameters ) ; </%> <%> <-> lambda _ </%> <%> <-> lambda _ </%> <%> <-> lambda _ </%>
<%> <*> get -> store </%> <%> <*> base -> type </%> <%> <-> ( store </%> <%> <*> type ) -> base </%> <@> var old _ behavior = ! parameters . precision _ and _ scale _ overriden ; </@> 
<%> <-> _ switch </%> <%> <+> pickle _ builder . has _ one ( e = > e . big _ mak ) . with _ many ( e = > e . pickles ) ; </%> <%> <*> var big _ mak _ builder = model _ builder . entity < big _ mak > ( ) ; -> model _ builder . entity < big _ mak > ( ) . ignore ( b = > b . bun ) ; </%> <@> var model _ clone = model _ builder . model . clone ( ) ; var pickle _ clone = model _ clone . get _ entity _ type ( pickle . name ) ; </@> <%> <+> var initial _ keys = pickle _ clone . get _ keys ( ) ; </%> <%> <*> var initial _ foreign _ key = pickle _ clone . get _ foreign _ keys ( ) ; var initial _ referencing _ foreign _ key = pickle _ clone . find _ referencing _ foreign _ keys ( ) ; var initial _ keys = pickle _ clone . get _ keys ( ) ; pickle _ builder . base _ type < ingredient > ( ) ; assert . same ( pickle . base _ type . clr _ type , typeof ( ingredient ) ) ; -> var initial _ foreign _ keys = pickle _ clone . get _ foreign _ keys ( ) ; </%> <%> <+> var initial _ referencing _ foreign _ keys = pickle _ clone . find _ referencing _ foreign _ keys ( ) ; </%>
 <@> public class relationship _ discovery _ convention : i _ entity _ type _ convention , i _ entity _ type _ member _ ignored _ convention , i _ navigation _ removed _ convention , i _ base _ type _ convention </@> <%> <+> if ( ! entity _ type _ builder . metadata . has _ clr _ type ) { return entity _ type _ builder ; } var relationship _ candidates = find _ relationship _ candidates ( entity _ type _ builder ) ; relationship _ candidates = remove _ incompatible _ with _ existing _ relationships ( relationship _ candidates , entity _ type _ builder ) ; </%>
 <@> sql _ builder . append ( value . to _ string ( ) ) ; </@> <%> <*> . get _ type ( -> is bool bool _ value </%> <%> <-> = = typeof ( bool ) ) </%> <%> <-> ( ( </%> <%> <*> ) -> _ </%> <%> <-> ) </%> <%> <*> $ -> STR ) . append ( value ) . append ( </%>
<%> <-> STR </%> <@> sql _ builder . append ( root _ reference _ expression . to _ string ( ) ) ; </@> <%> <-> . to _ string ( ) </%> <%> <-> . to _ string ( ) </%>
<%> <-> . to _ string ( ) </%> <@> sql _ builder . append ( key _ access _ expression . to _ string ( ) ) ; </@> <%> <-> . to _ string ( ) </%>
<%> <-> . to _ string ( ) </%> <%> <-> . to _ string ( ) </%> <@> sql _ builder . append ( entity _ projection _ expression . to _ string ( ) ) ; </@> 
<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . should _ retry _ on ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception ) ; </%> <@> execution _ strategy _ mock . object , ( ) = > </@> 
<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . get _ next _ delay ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > time _ span . from _ ticks ( 0 ) ) ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception , get _ next _ delay : e = > time _ span . from _ ticks ( 0 ) ) ; </%> <@> execution _ strategy _ mock . object , ( ) = > </@> 
<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . get _ next _ delay ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > time _ span . from _ ticks ( 0 ) ) ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception , get _ next _ delay : e = > time _ span . from _ ticks ( 0 ) ) ; </%> <@> execution _ strategy _ mock . object , ( ) = > </@> 
<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) , 2 ) { call _ base = true } ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , retry _ count : 2 , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception ) ; </%> <@> execution _ strategy _ mock . object , ( ) = > </@> 
<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . should _ retry _ on ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception ) ; </%> <@> execution _ strategy _ mock . object , ct = > </@> 
<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . get _ next _ delay ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > time _ span . from _ ticks ( 0 ) ) ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception , get _ next _ delay : e = > time _ span . from _ ticks ( 0 ) ) ; </%> <@> execution _ strategy _ mock . object , ct = > </@> 
<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . get _ next _ delay ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > time _ span . from _ ticks ( 0 ) ) ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception , get _ next _ delay : e = > time _ span . from _ ticks ( 0 ) ) ; </%> <@> execution _ strategy _ mock . object , ct = > </@> 
<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) , 2 ) { call _ base = true } ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , retry _ count : 2 , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception ) ; </%> <@> execution _ strategy _ mock . object , ct = > </@> 
<%> <*> = new column _ expression ( relational _ annotation _ provider . for ( discriminator _ property ) . column _ name , -> = select _ expression . bind _ property _ to _ select _ expression ( </%> <@> select _ expression . get _ table _ for _ query _ source ( query _ source ) ) ; </@> 
<%> <*> alias -> expression bind </%> <%> <*> expression create -> property _ to </%> <%> <*> alias -> select </%> <%> <*> = > new alias _ expression ( new column _ expression ( relational _ annotation _ provider . for ( property ) . column _ name , -> = > select _ expression . bind _ property _ to _ select _ expression ( </%> <@> select _ expression . get _ table _ for _ query _ source ( query _ source ) ) ) ; </@> <%> <*> create -> bind _ property _ to </%> <%> <*> alias -> select </%>
<%> <+> { check . not _ null ( column _ reference _ expression , nameof ( column _ reference _ expression ) ) ; relational _ command _ builder . append ( sql _ generator . delimit _ identifier ( column _ reference _ expression . table . alias ) ) . append ( STR ) . append ( sql _ generator . delimit _ identifier ( column _ reference _ expression . name ) ) ; return column _ reference _ expression ; } </%> <@> if ( ! alias _ expression . is _ projected ) { visit ( alias _ expression . expression ) ; if ( alias _ expression . alias ! = null ) { relational _ command _ builder . append ( STR ) ; } </@> 
<%> <*> node -> binary _ expression </%> <%> <*> node -> binary _ expression </%> <@> func < column _ expression , list < expression > , expression > in _ expression _ factory ) </@> <%> <-> expression left _ non _ column _ expression , right _ non _ column _ expression ; </%>
 <@> select top ( p ) [ c ] . [ customer _ id ] , [ c ] . [ company _ name ] , coalesce ( [ c ] . [ region ] , n ' zz ' ) as [ coalesce ] </@> <%> <*> coalesce -> c </%> <%> <*> coalesce -> c </%>
<%> <*> projection -> condition </%> <%> <*> conditional -> as </%> <%> <*> expression -> projection </%> <@> expression . condition ( new exists _ expression ( inner _ select _ expression ) , expression . constant ( true ) , expression . constant ( false ) , typeof ( bool ) ) ) ; </@> 
<%> <+> item _ property . lift _ expression _ from _ subquery ( item _ select _ expression ) ) ; </%> <%> <*> projection -> condition </%> <%> <*> conditional -> as </%> <%> <*> expression -> projection </%> <@> expression . condition ( new exists _ expression ( outer _ select _ expression ) , expression . constant ( true ) , expression . constant ( false ) , typeof ( bool ) ) ) ; </@> <%> <*> projection -> condition </%> <%> <*> conditional -> as </%> <%> <*> expression -> projection </%> <%> <-> expression . condition ( </%> <%> <*> , -> ) ; </%> <%> <-> expression . constant ( true ) , </%>
 <@> = > equals ( expression , other . expression ) & & string . equals ( alias , other . alias ) ; </@> <%> <*> return ( expression . get _ hash _ code ( ) * NUM ) ^ ( alias ? . get _ hash _ code ( ) ? ? 0 ) ; -> return ( expression . get _ hash _ code ( ) * NUM ) ^ alias . get _ hash _ code ( ) ; </%> <%> <+> public override string to _ string ( ) = > alias ! = null ? STR + expression + STR + alias : expression . to _ string ( ) ; </%>
 <@> context . add _ range ( new [ ] { entity } ) ; context . add _ range ( new object [ ] { entity } ) ; </@> <%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%>
<%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%> <@> context . attach _ range ( new [ ] { entity } ) ; context . attach _ range ( new object [ ] { entity } ) ; </@> <%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%>
<%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%> <@> context . update _ range ( new [ ] { entity } ) ; context . update _ range ( new object [ ] { entity } ) ; </@> <%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%>
<%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%> <@> context . remove _ range ( new [ ] { entity } ) ; context . remove _ range ( new object [ ] { entity } ) ; </@> 
<%> <-> i _ </%> <@> return new table _ result _ wrapper ( table . execute ( operation , null , request _ context . operation _ context ) ) ; </@> <%> <-> i _ </%> <%> <*> return task . run < i _ table _ result > ( ( ) = > new table _ result _ wrapper ( table . execute _ async ( operation , null , request _ context . operation _ context , cancellation _ token ) . result ) -> return task . run ( </%> <%> <+> ( ) = > table . execute _ async ( operation , null , request _ context . operation _ context , cancellation _ token ) </%>
<%> <-> i _ </%> <%> <*> return new table _ result _ wrapper ( -> return </%> <%> <-> ) </%> <%> <-> i _ </%> <@> return task . run < i _ table _ result > ( ( ) = > new table _ result _ wrapper ( table . execute _ async ( operation , null , request _ context . operation _ context , cancellation _ token ) . result ) </@> 
 <@> var results = setup _ results < i _ table _ result > ( new [ ] { test _ table _ result . ok ( ) , test _ table _ result . ok ( ) } ) ; </@> <%> <-> i _ </%>
 <@> var results = setup _ results < i _ table _ result > ( new [ ] { test _ table _ result . ok ( ) , test _ table _ result . ok ( ) } ) ; </@> <%> <-> i _ </%>
<%> <*> object -> i _ operation _ report _ handler </%> <@> var unwrapped _ report _ handler = forwarding _ proxy . unwrap < i _ operation _ report _ handler > ( report _ handler ) ; reporter = new operation _ reporter ( unwrapped _ report _ handler ) ; </@> 
<%> <*> object -> i _ operation _ result _ handler </%> <@> result _ handler = forwarding _ proxy . unwrap < i _ operation _ result _ handler > ( result _ handler ) ; </@> 
<%> <+> using microsoft _ entity _ framework _ core _ scaffolding _ internal ; </%> <@> namespace microsoft _ entity _ framework _ core _ scaffolding _ internal _ configuration </@> 
<%> <+> using microsoft _ entity _ framework _ core _ scaffolding _ internal ; </%> <@> namespace microsoft _ entity _ framework _ core _ scaffolding _ internal _ configuration </@> 
<%> <+> using microsoft _ entity _ framework _ core _ scaffolding _ internal ; </%> <@> namespace microsoft _ entity _ framework _ core _ scaffolding _ internal _ configuration </@> 
 <@> using ( var context = fixture . create _ context ( ) ) </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> using ( var context = fixture . create _ context ( ) ) </@> 
 <@> using ( var context = fixture . create _ context ( ) ) </@> <%> <+> protected adventure _ works _ context create _ context ( ) = > fixture . create _ context ( ) ; </%>
 <@> using ( var context = fixture . create _ context ( ) ) </@> <%> <*> public class command _ configuration _ test _ fixture : shared _ store _ fixture _ base < db _ context > -> protected db _ context create _ context ( ) = > fixture . create _ context ( ) ; </%> <%> <+> public class command _ configuration _ test _ fixture : shared _ store _ fixture _ base < poolable _ db _ context > </%>
 <@> public override void apply ( internal _ property _ builder property _ builder , key _ attribute attribute ) </@> <%> <+> property _ builder </%>
 <@> public override void apply ( internal _ property _ builder property _ builder , concurrency _ check _ attribute attribute ) </@> <%> <+> return property _ builder ; </%>
<%> <*> apply ( entity _ type _ builder , attribute ) ; -> entity _ type _ builder = apply ( entity _ type _ builder , attribute ) ; </%> <%> <+> if ( entity _ type _ builder = = null ) { break ; } </%> <@> public abstract void apply ( [ not _ null ] internal _ entity _ type _ builder entity _ type _ builder , [ not _ null ] t _ attribute attribute ) ; </@> 
 <@> public override void apply ( internal _ property _ builder property _ builder , required _ attribute attribute ) </@> <%> <+> return property _ builder ; </%>
 <@> public override void apply ( internal _ property _ builder property _ builder , database _ generated _ attribute attribute ) </@> <%> <+> return property _ builder ; </%>
<%> <*> apply ( property _ builder , attribute ) ; -> property _ builder = apply ( property _ builder , attribute ) ; </%> <%> <+> if ( property _ builder = = null ) { break ; } </%> <@> public abstract void apply ( [ not _ null ] internal _ property _ builder property _ builder , [ not _ null ] t _ attribute attribute ) ; </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <+> conditional _ fact public virtual void project _ reference _ that _ itself _ has _ query _ filter _ with _ another _ reference ( ) { var results = context . order _ details . select ( od = > od . order ) . to _ list ( ) ; </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <*> var exception = record . exception ( ( ) = > context . set < list _ filter > ( ) . to _ list ( ) ) ; assert . true ( exception is invalid _ operation _ exception | | exception is argument _ null _ exception ) ; -> assert . throws < null _ reference _ exception > ( ( ) = > context . set < list _ filter > ( ) . to _ list ( ) ) ; </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > </@> 
 <@> public static model _ builder . entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder , </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> public static model _ builder . entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder , </@> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > </@> 
 <@> public static model _ builder . entity _ builder _ base < t _ metadata _ builder > table _ name < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder , </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > </@> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>
<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <@> public static model _ builder . entity _ builder < t _ entity > timestamp < t _ entity > ( [ not _ null ] this model _ builder . entity _ builder < t _ entity > builder , [ not _ null ] string name , bool shadow _ property = false ) </@> 
<%> <*> guid -> random </%> <%> <*> _ -> . </%> <%> <-> . server </%> <@> strings . format _ no _ value _ generator ( STR , STR , STR , STR ) , </@> <%> <-> _ on _ add </%> <%> <-> _ on _ add </%>
<%> <+> validate _ mapping ( resolved _ mapping , property ) ; return resolved _ mapping ; </%> <@> ? ? find _ mapping _ with _ conversion ( new concrete _ type _ mapping _ info ( property ) ) ; </@> <%> <+> , null </%> <%> <+> , null </%>
 <@> ? ? find _ mapping _ with _ conversion ( new concrete _ relational _ type _ mapping _ info ( property ) ) ; </@> <%> <+> , null </%> <%> <+> , null </%> <%> <+> , null </%>
<%> <*> collection -> enumerable </%> <@> navigation . name , navigation . declaring _ entity _ type . name , property . property _ type . full _ name , navigation . get _ target _ type ( ) . name ) ) ; </@> <%> <+> display _ </%> <%> <+> ( ) </%> <%> <-> full _ </%> <%> <+> display _ </%> <%> <+> ( ) </%>
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> 
 <@> conditional _ theory _ skip _ issue _ cannot _ eval _ where _ max _ od . order _ id , [ od ] . product _ id ) = = [ od ] . order _ id ) ' STR </@> <%> <-> _ skip _ issue _ cannot _ eval _ where _ min _ od . order _ id , [ od ] . product _ id ) = = [ od ] . product _ id ) ' STR </%>
<%> <-> _ skip _ issue _ cannot _ eval _ where _ max _ od . order _ id , [ od ] . product _ id ) = = [ od ] . order _ id ) ' STR </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ where _ min _ od . order _ id , [ od ] . product _ id ) = = [ od ] . product _ id ) ' STR </@> 
 <@> conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ start ( o ) = = \ STR ) ] </@> <%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ start ( value ( system . char [ ] ) ) = = \ STR ) ] </%>
<%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ start ( o ) = = \ STR ) ] </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ start ( value ( system . char [ ] ) ) = = \ STR ) ] </@> 
 <@> conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ end ( r ) = = \ STR ) ] </@> <%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ end ( value ( system . char [ ] ) ) = = \ STR ) ] </%>
<%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ end ( r ) = = \ STR ) ] </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ end ( value ( system . char [ ] ) ) = = \ STR ) ] </@> 
 <@> conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim ( o ) = = \ STR ) ] </@> <%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim ( value ( system . char [ ] ) ) = = \ STR ) ] </%>
<%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim ( o ) = = \ STR ) ] </%> <@> conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim ( value ( system . char [ ] ) ) = = \ STR ) ] </@> 
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> 
 <@> public class model _ builder : i _ model _ change _ listener , i _ model _ builder < model _ builder > </@> <%> <+> : this ( model , new conventions _ dispatcher ( ) ) </%>
 <@> private void entity _ type _ added ( internal _ entity _ builder builder ) </@> <%> <*> model _ change _ listener -> conventions </%> <%> <*> model _ change _ listener -> builder = conventions </%> <%> <+> return builder ; </%>
 <@> public virtual void apply ( internal _ entity _ builder entity _ builder ) </@> <%> <-> var name = entity _ type . name ; </%>
<%> <-> task < </%> <%> <-> > </%> <%> <-> _ async </%> <%> <*> database -> store </%> <@> return task . from _ result ( new context ( service _ provider , options ) ) ; </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> public abstract class internal _ metadata _ builder < t _ metadata > where t _ metadata : annotatable </@> <%> <-> private readonly t _ metadata metadata ; </%> <%> <*> t _ metadata -> annotatable </%>
 <@> var field _ info = try _ match _ field _ name ( property _ base . declaring _ type . model , type , property _ base . clr _ type , property _ base . name ) ; </@> <%> <*> model model -> property _ base property _ base </%> <%> <*> , type property _ type , string property _ name ) -> ) </%>
<%> <*> int records ; var customers = context . customers . to _ list ( ) ; using ( collector . start ( ) ) -> foreach ( var customer in context . customers ) </%> <@> foreach ( var customer in customers ) { customer . name + = STR ; } records = context . save _ changes ( ) ; </@> <%> <+> collector . start ( ) ; var records = context . save _ changes ( ) ; collector . stop ( ) ; </%>
<%> <*> int records ; var customers = context . customers . to _ list ( ) ; using ( collector . start ( ) ) -> foreach ( var customer in context . customers ) </%> <@> foreach ( var customer in customers ) { context . customers . remove ( customer ) ; } records = context . save _ changes ( ) ; </@> <%> <+> collector . start ( ) ; var records = context . save _ changes ( ) ; collector . stop ( ) ; </%>
<%> <*> int records ; var customers = context . customers . to _ list ( ) ; using ( collector . start ( ) ) -> foreach ( var customer in context . customers ) </%> <@> foreach ( var customer in customers ) { customer . name + = STR ; } records = context . save _ changes ( ) ; </@> <%> <+> collector . start ( ) ; var records = context . save _ changes ( ) ; collector . stop ( ) ; </%>
<%> <*> int records ; var customers = context . customers . to _ list ( ) ; using ( collector . start ( ) ) -> foreach ( var customer in context . customers ) </%> <@> foreach ( var customer in customers ) { context . customers . remove ( customer ) ; } records = context . save _ changes ( ) ; </@> <%> <+> collector . start ( ) ; var records = context . save _ changes ( ) ; collector . stop ( ) ; </%>
 <@> var underlying _ model _ type = model _ clr _ type . unwrap _ nullable _ type ( ) ; var underlying _ provider _ type = provider _ clr _ type ? . unwrap _ nullable _ type ( ) ; if ( underlying _ model _ type . is _ enum ) </@> <%> <*> underlying -> model </%> <%> <*> model -> clr </%> <%> <*> underlying -> provider </%> <%> <*> provider -> clr </%>
<%> <-> model _ builder . entity < one _ to _ one _ dependent _ entity > ( b = > { b . ignore ( e = > e . one _ to _ one _ principal _ entity _ id ) ; b . ignore ( e = > e . nav _ one _ to _ one _ principal _ entity _ id ) ; } ) ; </%> <@> typeof ( one _ to _ one _ dependent _ entity ) . name + STR + one _ to _ one _ dependent _ entity . navigation _ property . name , typeof ( one _ to _ one _ principal _ entity ) . name + STR + one _ to _ one _ principal _ entity . navigation _ property . name ) , </@> 
 <@> . ignore ( o = > o . details ) . on _ delete ( delete _ behavior . set _ null ) ; </@> <%> <*> entity _ builder . has _ principal _ key ( c = > c . alternate _ key ) ; -> entity _ builder . with _ owner ( o = > o . customer ) </%> <%> <+> . has _ principal _ key ( c = > c . alternate _ key ) ; </%>
<%> <+> } </%> <%> <+> if ( ! can _ remove ( key , configuration _ source , can _ override _ same _ source ) ) { return null ; } </%> <@> if ( configuration _ source . overrides ( tuple . item ) & & ( tuple . item ! = configuration _ source | | can _ override _ same _ source ) ) { values . remove ( key ) ; return tuple . item ; } return null ; </@> <%> <*> return configuration _ source . overrides ( default _ configuration _ source ) & & ( default _ configuration _ source ! = configuration _ source | | can _ override _ same _ source ) ? default _ configuration _ source : ( configuration _ source ? ) null ; -> return default _ configuration _ source ; </%>
<%> <+> return null ; } </%> <%> <-> if ( configuration _ source . overrides ( tuple . item ) & & ( tuple . item ! = configuration _ source | | can _ override _ same _ source ) ) { </%> <%> <-> } return null ; </%> <@> return configuration _ source . overrides ( default _ configuration _ source ) & & ( default _ configuration _ source ! = configuration _ source | | can _ override _ same _ source ) ? default _ configuration _ source : ( configuration _ source ? ) null ; </@> 
<%> <+> using microsoft _ data _ entity _ functional _ tests _ test _ utilities ; </%> <@> protected void assert _ equal ( i _ read _ only _ list < string > expected _ names , i _ enumerable < string > actual _ names ) </@> <%> <*> new sorted _ set < string > ( actual _ names , -> new sorted _ set < string > ( actual _ names , string _ comparer . ordinal ) , </%> <%> <-> ) </%> <%> <*> read _ only -> enumerable < i </%> <%> <-> list < </%> <%> <+> i _ </%> <%> <*> string -> i _ property </%> <%> <-> . select ( p = > p . name ) </%> <%> <*> string -> property </%> <%> <*> ordinal -> instance </%>
 <@> model _ builder . entity ( typeof ( customer ) , configuration _ source . explicit ) . key ( new [ ] { customer . id _ property , customer . unique _ property } ) ; </@> <%> <*> explicit -> convention </%> <%> <+> model _ builder </%>
 <@> value = tuple . item ; return true ; </@> <%> <*> value = default ( t _ value ) ; return false ; -> return default ( t _ value ) ; </%>
<%> <*> value = tuple . item ; return true ; -> return tuple . item ; </%> <@> value = default ( t _ value ) ; return false ; </@> 
 <@> private cosmos _ result _ set _ iterator < t > create _ query < t > ( </@> <%> <*> < t > -> _ as _ stream </%> <%> <*> max _ concurrency : NUM -> STR </%>
<%> <-> public void dispose ( ) = > underlying _ enumerator ? . dispose ( ) ; </%> <%> <*> underlying -> json </%> <%> <*> enumerator -> reader </%> <@> query = cosmos _ client . create _ query < j _ object > ( container _ id , cosmos _ sql _ query ) ; </@> <%> <*> underlying _ enumerator = query . fetch _ next _ set _ async ( ) . get _ awaiter ( ) . get _ result ( ) . get _ enumerator ( ) ; -> response _ stream = query . fetch _ next _ set _ async ( ) . get _ awaiter ( ) . get _ result ( ) . content ; </%> <%> <+> reader = new stream _ reader ( response _ stream ) ; json _ reader = new json _ text _ reader ( reader ) ; </%>
<%> <-> public void dispose ( ) = > underlying _ enumerator ? . dispose ( ) ; </%> <%> <*> underlying -> json </%> <%> <*> enumerator -> reader </%> <@> query = cosmos _ client . create _ query < j _ object > ( container _ id , cosmos _ sql _ query ) ; </@> <%> <*> underlying _ enumerator = ( await query . fetch _ next _ set _ async ( cancellation _ token ) ) . get _ enumerator ( ) ; -> response _ stream = ( await query . fetch _ next _ set _ async ( cancellation _ token ) ) . content ; </%> <%> <+> reader = new stream _ reader ( response _ stream ) ; json _ reader = new json _ text _ reader ( reader ) ; </%>
<%> <-> i _ service _ provider provider </%> <%> <-> provider </%> <%> <*> entity -> i _ service </%> <%> <*> configuration -> provider </%> <%> <*> entity -> service </%> <%> <*> configuration -> provider </%> <%> <-> i _ model model </%> <@> return create _ entity _ configuration ( new service _ collection ( ) . add _ entity _ framework ( s = > s . add _ in _ memory _ store ( ) ) . build _ service _ provider ( ) , model ) ; </@> <%> <*> entity -> context </%> <%> <*> entity -> context </%> <%> <*> ) -> i _ service _ provider service _ provider , i _ model model ) </%> <%> <*> return create _ entity _ configuration ( new service _ collection ( ) . add _ entity _ framework ( s = > s . add _ in _ memory _ store ( ) ) . build _ service _ provider ( ) ) ; -> return new entity _ context ( service _ provider , create _ entity _ configuration ( model ) ) . configuration ; </%> <%> <*> provider , i -> service </%> <%> <*> model model -> provider </%>
 <@> var sets = new context _ entity _ sets ( new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; </@> <%> <+> . configuration </%> <%> <*> context -> configuration </%> <%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%>
<%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%> <%> <+> . configuration </%> <%> <*> context -> configuration </%> <@> var sets = new context _ entity _ sets ( new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; </@> <%> <+> . configuration </%> <%> <*> context -> configuration </%> <%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%>
<%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%> <%> <+> . configuration </%> <%> <*> context -> configuration </%> <@> var sets = new context _ entity _ sets ( new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; </@> <%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%>
<%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%> <@> var sets = new context _ entity _ sets ( new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; </@> 
 <@> visit _ default _ value ( column , property _ builder ) ; </@> <%> <+> relational _ </%> <%> <+> _ mapping </%>
<%> <+> var bool _ mapping = ( relational _ type _ mapping ) context . get _ service < i _ type _ mapping _ source > ( ) . find _ mapping ( typeof ( bool ) ) ; </%> <@> where STR discontinued STR < > 1 </@> 
 <@> if ( ( entry . entity _ state ! = entity _ state . added ) & & ( entry . entity _ state ! = entity _ state . modified ) & & ( entry . entity _ state ! = entity _ state . deleted ) ) </@> <%> <-> ( </%> <%> <-> ) </%> <%> <-> ( </%> <%> <-> ) </%>
 <@> var test _ type _ alias = db _ model . sql _ server ( ) . type _ aliases . where ( kvp = > kvp . key . contains ( STR ) ) . single _ or _ default ( ) ; </@> <%> <*> where -> single _ or _ default </%> <%> <*> . single _ or _ default ( ) ; -> ; </%>
<%> <*> where -> single _ or _ default </%> <%> <*> . single _ or _ default ( ) ; -> ; </%> <@> var test _ type _ alias = db _ model . sql _ server ( ) . type _ aliases . where ( kvp = > kvp . key . contains ( STR ) ) . single _ or _ default ( ) ; </@> 
 <@> var matching _ candidate = navigation _ tree _ node _ candidates . where ( m = > m . path . count = = 0 ) . single _ or _ default ( ) ; </@> <%> <*> where -> single _ or _ default </%> <%> <*> . single _ or _ default ( ) ; -> ; </%>
<%> <*> where -> single _ or _ default </%> <%> <*> . single _ or _ default ( ) ; -> ; </%> <@> var matching _ candidate = navigation _ tree _ node _ candidates . where ( m = > m . path . count = = 0 ) . single _ or _ default ( ) ; </@> 
 <@> else { return member _ expression . update ( new _ expression ) ; } </@> <%> <*> colection -> collection </%>
<%> <-> using microsoft _ data _ entity _ metadata _ internal ; </%> <@> public class relational _ index _ annotations : relational _ annotations _ base , i _ relational _ index _ annotations </@> <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ index _ annotations ( not _ null internal _ index _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>
<%> <+> using system _ reflection ; </%> <%> <-> using microsoft _ data _ entity _ metadata _ internal ; </%> <@> public class relational _ entity _ type _ annotations : relational _ annotations _ base , i _ relational _ entity _ type _ annotations </@> <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ entity _ type _ annotations ( not _ null internal _ entity _ type _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>
<%> <-> using microsoft _ data _ entity _ metadata _ internal ; </%> <@> public class relational _ model _ annotations : relational _ annotations _ base , i _ relational _ model _ annotations </@> <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ model _ annotations ( not _ null internal _ model _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>
<%> <-> using microsoft _ data _ entity _ metadata _ internal ; </%> <@> public class relational _ foreign _ key _ annotations : relational _ annotations _ base , i _ relational _ foreign _ key _ annotations </@> <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ foreign _ key _ annotations ( not _ null internal _ relationship _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>
<%> <-> using microsoft _ data _ entity _ metadata _ internal ; </%> <@> public class relational _ property _ annotations : relational _ annotations _ base , i _ relational _ property _ annotations </@> <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ property _ annotations ( not _ null internal _ property _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>
<%> <+> annotations . </%> <%> <-> annotation ( sql _ server _ annotation _ names . </%> <%> <-> , check . null _ but _ not _ empty </%> <%> <-> , nameof ( value ) ) </%> <%> <+> protected virtual bool set _ hi _ lo _ sequence _ schema ( string value ) = > annotations . set _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ schema , check . null _ but _ not _ empty ( value , nameof ( value ) ) ) ; </%> <%> <*> get { return ( int? ) get _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ pool _ size ) ; } param _ can _ be _ null set -> get { return ( int? ) annotations . get _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ pool _ size ) ; } </%> <%> <+> param _ can _ be _ null set { set _ hi _ lo _ sequence _ pool _ size ( value ) ; } } protected virtual bool set _ hi _ lo _ sequence _ pool _ size ( int? value ) { if ( value < = 0 ) </%> <@> if ( value < = 0 ) { throw new argument _ out _ of _ range _ exception ( nameof ( value ) , entity . internal . strings . hi _ lo _ bad _ pool _ size ) ; } set _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ pool _ size , value ) ; </@> <%> <+> return annotations . set _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ pool _ size , value ) ; </%>
 <@> public class relational _ key _ annotations : relational _ annotations _ base , i _ relational _ key _ annotations </@> <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ key _ annotations ( not _ null internal _ key _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>
 <@> var selector = expression . make _ member _ access ( </@> <%> <+> if ( is _ first _ single _ last _ or _ default ( final _ result _ operator ) & & ! selector . type . is _ nullable _ type ( ) ) { var old _ type = selector . type ; selector = expression . convert ( selector , selector . type . make _ nullable ( ) ) ; var subquery _ model = new query _ model ( main _ from _ clause , new select _ clause ( selector ) ) ; </%>
<%> <+> if ( metadata . value _ generated ! = null ) { value _ generated _ configuration _ source = configuration _ source . explicit ; } } </%> <@> if ( is _ required _ configuration _ source = = null & & metadata . is _ nullable ! = null ) { is _ required _ configuration _ source = configuration _ source . explicit ; } else { is _ required _ configuration _ source = configuration _ source . max ( is _ required _ configuration _ source ) ; } </@> 
<%> <+> i _ </%> <%> <-> { </%> <%> <*> check . not _ null ( context , nameof ( context ) ) ; -> = > models . get _ or _ add ( context . get _ type ( ) , k = > create _ model ( context , model _ builder _ factory ) ) ; </%> <%> <-> check . not _ null ( model _ builder _ factory , nameof ( model _ builder _ factory ) ) ; return models . get _ or _ add ( context . get _ type ( ) , k = > create _ model ( context , model _ builder _ factory ) ) ; } </%> <@> model _ source _ helpers . on _ model _ creating ( context , model _ builder ) ; </@> 
 <@> conditional _ theory _ skip _ see _ issue </@> <%> <-> @ </%> <%> <+> STR </%> <%> <-> _ skip _ see _ issue </%>
<%> <-> _ skip _ see _ issue </%> <%> <-> @ </%> <%> <+> STR </%> <@> conditional _ theory _ skip _ see _ issue </@> <%> <-> @ </%> <%> <+> STR </%> <%> <+> ( </%> <%> <+> and ( c [ </%> <%> <+> city STR ] = STR london STR ) ) STR </%> <%> <-> _ skip _ see _ issue </%>
<%> <-> _ skip _ see _ issue </%> <%> <-> @ </%> <%> <+> STR </%> <%> <+> ( </%> <%> <+> and ( c [ </%> <%> <+> city STR ] = STR london STR ) ) STR </%> <@> conditional _ fact _ skip _ see _ issue </@> <%> <-> @ </%> <%> <+> STR </%> <%> <+> conditional _ fact _ skip _ issue </%>
 <@> using system _ collections _ generic ; </@> <%> <-> using microsoft _ entity _ framework _ core _ test _ utilities ; using microsoft _ entity _ framework _ core _ test _ utilities _ xunit ; </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <+> async </%> <%> <*> return assert _ include _ query < order _ query > ( is _ async , ovs = > from ov in ovs . include ( ov = > ov . customer ) where ov . customer _ id = = STR select ov , new list < i _ expected _ include > -> using ( var ctx = create _ context ( ) ) </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <*> @ STR from [ customers ] as [ c ] STR -> STR ) ; </%> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <%> <*> @ STR from [ customers ] as [ c ] STR -> STR ) ; </%> <@> conditional _ theory _ skip _ issue </@> <%> <*> from [ customers ] as [ c ] -> from ( </%> <%> <+> select [ c ] . [ customer _ id ] + n ' ' as [ customer _ id ] , [ c ] . [ address ] , [ c ] . [ city ] , [ c ] . [ company _ name ] , [ c ] . [ contact _ name ] , [ c ] . [ contact _ title ] , [ c ] . [ country ] , [ c ] . [ fax ] , [ c ] . [ phone ] , [ c ] . [ postal _ code ] , [ c ] . [ region ] from [ customers ] as [ c ] ) as [ c ] </%>
<%> <-> select [ o ] . [ customer _ id ] from ( </%> <%> <*> ) -> left join [ customers ] </%> <%> <*> t -> c </%> <%> <*> left join [ customers ] as [ ov . customer ] on [ t ] . [ customer _ id ] = [ ov . customer ] . [ customer _ id ] -> on [ o ] . [ customer _ id ] = [ c ] . [ customer _ id ] </%> <%> <*> [ ov . customer -> ( ( [ c </%> <%> <*> STR -> and ( [ c ] . [ customer _ id ] is not null and [ ] . [ customer _ id ] is not null ) ) or ( [ c ] . [ customer _ id ] is null and [ ] . [ customer _ id ] is null ) ) STR </%> <@> conditional _ fact _ skip _ issue </@> <%> <*> = > base . auto _ initialized _ view _ set ( ) ; -> { </%> <%> <+> base . auto _ initialized _ view _ set ( ) ; assert _ sql ( STR ) ; } </%>
 <@> conditional _ fact _ skip _ see _ issue </@> <%> <-> _ skip _ see _ issue </%>
<%> <-> _ skip _ see _ issue </%> <@> conditional _ fact _ skip _ see _ issue </@> 
 <@> assert . true ( sqlite _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR ) ) ; </@> <%> <-> sqlite _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%>
<%> <-> sqlite _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%> <@> assert . true ( sqlite _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR ) ) ; </@> <%> <-> sqlite _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%>
<%> <-> sqlite _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%> <@> assert . false ( sqlite _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR ) ) ; </@> 
 <@> assert . true ( sql _ server _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR , STR ) ) ; </@> <%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%>
<%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%> <@> assert . true ( sql _ server _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR , STR ) ) ; </@> <%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%>
<%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%> <@> assert . false ( sql _ server _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR , STR ) ) ; </@> <%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%>
<%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%> <@> assert . true ( sql _ server _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR , STR ) ) ; </@> 
<%> <-> , </%> <@> assert . true ( sql _ server _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR , STR ) ) ; </@> 
<%> <*> t = > candidate _ naming _ service . generate _ candidate _ identifier ( t . name ) , c _ sharp _ utilities ) ; -> use _ database _ names </%> <%> <+> ? ( func < database _ table , string > ) ( t = > t . name ) : t = > candidate _ naming _ service . generate _ candidate _ identifier ( t . name ) , c _ sharp _ utilities , use _ database _ names ? ( func < string , string > ) null : pluralizer . singularize ) ; db _ set _ namer = new c _ sharp _ unique _ namer < database _ table > ( use _ database _ names ? ( func < database _ table , string > ) ( t = > t . name ) : t = > candidate _ naming _ service . generate _ candidate _ identifier ( t . name ) , c _ sharp _ utilities , use _ database _ names ? ( func < string , string > ) null : pluralizer . pluralize ) ; </%> <@> = > pluralizer . singularize ( table _ namer . get _ name ( check . not _ null ( table , nameof ( table ) ) ) ) ; </@> <%> <*> pluralizer . pluralize ( table -> db _ set </%> <%> <-> ) </%> <%> <*> table -> get </%> <%> <*> namer . get -> entity _ type </%>
 <@> private readonly static string [ ] valid _ keywords = new [ ] </@> <%> <-> readonly </%> <%> <+> readonly </%>
<%> <-> readonly </%> <%> <+> readonly </%> <@> private readonly static i _ dictionary < string , keywords > keywords = new dictionary < string , keywords > ( NUM , string _ comparer . ordinal _ ignore _ case ) </@> 
 <@> if ( use _ ensure _ method ) { assert . true ( await context . database . ensure _ deleted _ async ( ) ) ; } else { await context . database . delete _ async ( ) ; } </@> <%> <-> if ( use _ ensure _ method ) { </%> <%> <-> } else { context . database . delete ( ) ; </%>
<%> <-> if ( use _ ensure _ method ) { </%> <%> <-> } else { await context . database . delete _ async ( ) ; } </%> <@> if ( use _ ensure _ method ) { assert . true ( context . database . ensure _ deleted ( ) ) ; } else { context . database . delete ( ) ; } </@> <%> <-> assert . true ( context . database . exists ( ) ) ; assert . true ( await context . database . exists _ async ( ) ) ; </%> <%> <+> if ( async ) { </%>
<%> <+> { var index = property . get _ original _ value _ index ( ) ; if ( index > = 0 ) </%> <@> var index = property . get _ original _ value _ index ( ) ; if ( index > = 0 ) { values [ index ] = entry [ property ] ; } </@> <%> <+> } </%>
<%> <-> order by [ ] . [ customer _ id ] </%> <@> if ( ! use _ string ) { assert _ sql ( @ STR </@> <%> <-> } </%> <%> <-> if ( ! use _ string ) </%>
<%> <-> } </%> <@> if ( ! use _ string ) { assert _ sql ( @ STR </@> <%> <-> } </%>
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> 
 <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </@> <%> <-> < test _ store > </%>
<%> <-> < test _ store > </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> <%> <-> < test _ store > </%>
<%> <-> < test _ store > </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> <%> <-> < test _ store > </%>
<%> <-> < test _ store > </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </@> <%> <-> < test _ store > </%>
<%> <-> < test _ store > </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> _ test </%> <@> public class sql _ server _ test _ store _ factory : i _ test _ store _ factory < sql _ server _ test _ store > </@> <%> <-> sql _ server _ </%> <%> <*> create -> get _ or </%> <%> <*> shared -> create </%>
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </@> 
 <@> public test _ store create _ test _ store ( i _ test _ store _ factory < test _ store > test _ store _ factory ) </@> <%> <*> create -> get _ or </%> <%> <*> shared -> create </%>
<%> <+> protected override bool use _ pooling = > false ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ northwind _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
 <@> public interface i _ test _ store _ factory < out t _ test _ store > where t _ test _ store : test _ store </@> <%> <-> t _ </%> <%> <*> create -> get _ or </%> <%> <*> shared -> create </%>
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ northwind _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > private _ cache _ sqlite _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ adventure _ works _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> _ test </%> <@> public class sqlite _ test _ store _ factory : i _ test _ store _ factory < sqlite _ test _ store > </@> <%> <-> sqlite _ </%> <%> <*> create -> get _ or </%> <%> <*> shared -> create </%>
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </@> 
<%> <+> { get ; } </%> <%> <-> > </%> <@> protected abstract i _ test _ store _ factory < test _ store > test _ store _ factory { get ; } </@> <%> <+> protected virtual bool use _ pooling = > true ; private i _ db _ context _ pool context _ pool ; private i _ db _ context _ pool context _ pool = > context _ pool ? ? ( context _ pool = ( i _ db _ context _ pool ) service _ provider . get _ required _ service ( typeof ( db _ context _ pool < > ) . make _ generic _ type ( context _ type ) ) ) ; </%> <%> <+> test _ store = test _ store _ factory . get _ or _ create ( store _ name ) ; var services = add _ services ( test _ store _ factory . add _ provider _ services ( new service _ collection ( ) ) ) ; </%>
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> _ test </%> <@> public class in _ memory _ test _ store _ factory : i _ test _ store _ factory < in _ memory _ test _ store > </@> <%> <-> in _ memory _ </%> <%> <*> create -> get _ or </%> <%> <*> shared -> create </%>
<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </@> 
<%> <+> var command _ batches = parameters . item ; var connection = parameters . item ; </%> <%> <-> connection . open ( ) ; </%> <%> <*> if ( connection . current _ transaction = = null ) -> if ( connection . current _ transaction = = null </%> <%> <+> & & current _ context . context . database . auto _ transactions _ enabled ) </%> <@> if ( current _ context . context . database . auto _ transactions _ enabled ) { started _ transaction = connection . begin _ transaction ( ) ; } else { connection . open ( ) ; } </@> 
<%> <+> var command _ batches = parameters . item ; var connection = parameters . item ; </%> <%> <-> await connection . open _ async ( cancellation _ token ) ; </%> <%> <*> if ( connection . current _ transaction = = null ) -> if ( connection . current _ transaction = = null </%> <%> <+> & & current _ context . context . database . auto _ transactions _ enabled ) </%> <@> if ( current _ context . context . database . auto _ transactions _ enabled ) { started _ transaction = await connection . begin _ transaction _ async ( cancellation _ token ) ; } else { await connection . open _ async ( cancellation _ token ) ; } </@> 
<%> <+> ( ! </%> <%> <+> ) </%> <%> <+> return null ; } </%> <%> <+> { entity _ type = entity _ type . root _ type ( ) . get _ derived _ types _ inclusive ( ) . first _ or _ default ( et = > et . clr _ type = = converted _ type ) ; if ( entity _ type = = null ) </%> <@> entity _ type = entity _ type . root _ type ( ) . get _ derived _ types _ inclusive ( ) . first _ or _ default ( et = > et . clr _ type = = converted _ type ) ; if ( entity _ type = = null ) { return null ; } </@> <%> <+> } </%> <%> <+> if ( navigation = = null ) { return null ; } var target _ entity _ type = navigation . get _ target _ type ( ) ; </%>
 <@> public override async task < bool > open _ async ( bool errors _ expected = false , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </@> <%> <*> errors -> cancellation </%> <%> <*> expected -> token </%> <%> <*> cancellation -> errors </%> <%> <*> token -> expected </%>
<%> <-> bool errors _ expected = false , </%> <%> <*> = default ( cancellation -> , bool errors </%> <%> <*> token ) -> expected = false </%> <@> if ( await base . open _ async ( errors _ expected , cancellation _ token ) ) </@> 
 <@> public class byte _ array _ type _ mapping : relational _ type _ mapping < byte [ ] > </@> <%> <+> , typeof ( byte [ ] ) </%> <%> <-> , unicode : false </%> <%> <*> create _ copy -> clone </%>
 <@> public class string _ type _ mapping : relational _ type _ mapping < string > </@> <%> <-> public string _ type _ mapping ( not _ null string store _ type , can _ be _ null db _ type ? db _ type = null , bool unicode = false ) : this ( store _ type , db _ type , unicode , size : null ) { } </%>
 <@> public virtual task < bool > open _ async ( bool errors _ expected = false , cancellation _ token cancellation _ token = new cancellation _ token ( ) ) </@> <%> <*> errors -> cancellation </%> <%> <*> expected -> token </%> <%> <*> cancellation -> errors </%> <%> <*> token -> expected </%>
<%> <-> bool errors _ expected = false , </%> <%> <*> = new cancellation -> , bool errors </%> <%> <*> token ( ) -> expected = false </%> <@> return real _ connection . open _ async ( errors _ expected , cancellation _ token ) ; </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
<%> <-> using system _ collections _ generic ; using system _ linq ; </%> <@> using microsoft _ data _ entity _ change _ tracking ; using microsoft _ data _ entity _ metadata ; using microsoft _ data _ entity _ relational _ update ; using microsoft _ data _ entity _ sql _ server _ functional _ tests _ test _ models _ concurrency _ model ; </@> <%> <-> using microsoft _ framework _ dependency _ injection _ advanced ; </%> <%> <-> using xunit ; </%> <%> <*> internal static class test _ extensions -> public class optimistic _ concurrency _ test : optimistic _ concurrency _ relational _ test _ base < sql _ server _ test _ database > </%> <%> <-> public static void set _ values ( this i _ property _ bag _ entry property _ bag _ entry , dictionary < i _ property , object > values ) </%>
<%> <*> system -> microsoft _ data </%> <%> <*> linq -> entity </%> <@> namespace microsoft _ data _ entity _ sql _ server _ functional _ tests _ test _ models _ concurrency _ model </@> 
<%> <-> using system ; </%> <@> namespace microsoft _ data _ entity _ sql _ server _ functional _ tests _ test _ models _ concurrency _ model </@> <%> <*> i _ service _ provider service _ provider , db _ context _ options options ) -> context context ) </%> <%> <-> var context = new context ( service _ provider , options ) ; </%>
<%> <*> goto retry ; } -> if ( ! cache . </%> <%> <+> _ get _ value ( cache _ key , out model ) ) </%> <%> <-> model = new lazy < i _ model > ( ( ) = > create _ model ( context , convention _ set _ builder ) , </%> <%> <*> lazy _ thread -> model = create </%> <%> <*> safety _ mode . execution -> model ( context , convention </%> <%> <*> and -> set </%> <%> <*> publication -> builder </%> <%> <+> model = </%> <%> <-> finally { model _ sync _ objects . try _ remove ( cache _ key , out ) ; </%> <@> return model . value ; </@> 
 <@> public virtual new sqlite _ command create _ command ( ) = > new sqlite _ command { connection = this , transaction = transaction } ; </@> <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> virtual </%> <%> <+> virtual </%>
<%> <-> virtual </%> <%> <+> virtual </%> <@> public virtual new sqlite _ transaction begin _ transaction ( ) = > begin _ transaction ( isolation _ level . unspecified ) ; </@> <%> <-> virtual </%> <%> <+> virtual </%>
<%> <-> virtual </%> <%> <+> virtual </%> <@> public virtual new sqlite _ parameter _ collection parameters = > parameters . value ; </@> <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> virtual </%> <%> <+> virtual </%>
<%> <-> virtual </%> <%> <+> virtual </%> <@> public virtual new sqlite _ parameter create _ parameter ( ) = > new sqlite _ parameter ( ) ; </@> <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> virtual </%> <%> <+> virtual </%>
<%> <-> virtual </%> <%> <+> virtual </%> <%> <-> virtual </%> <%> <+> virtual </%> <@> public virtual new sqlite _ data _ reader execute _ reader ( ) = > execute _ reader ( command _ behavior . default ) ; public virtual new sqlite _ data _ reader execute _ reader ( command _ behavior behavior ) </@> <%> <*> if ( connection = = null | | connection . state ! = connection _ state . open ) -> if ( connection = = null </%> <%> <+> | | connection . state ! = connection _ state . open ) </%>
<%> <+> when ( execution _ strategy . call _ on _ wrapped _ exception ( ex , sql _ server _ transient _ exception _ detector . should _ retry _ on ) ) </%> <@> if ( execution _ strategy . call _ on _ wrapped _ exception ( ex , sql _ server _ transient _ exception _ detector . should _ retry _ on ) ) { throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ; } throw ; </@> 
<%> <+> when ( execution _ strategy . call _ on _ wrapped _ exception ( ex , sql _ server _ transient _ exception _ detector . should _ retry _ on ) ) </%> <@> if ( execution _ strategy . call _ on _ wrapped _ exception ( ex , sql _ server _ transient _ exception _ detector . should _ retry _ on ) ) { throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ; } throw ; </@> 
 <@> public bool has _ tables _ base ( ) = > base . has _ tables ( ) ; </@> <%> <-> base . </%>
<%> <-> base . </%> <@> = > base . has _ tables _ async ( cancellation _ token ) ; </@> 
<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <@> from = { children _ table . columns [ 1 ] } , </@> <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>
<%> <+> _ model </%> <%> <+> _ model </%> <@> from = { children _ table . columns [ 0 ] } , </@> <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>
<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <@> from = { children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } , </@> <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>
<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <@> from = { table . columns [ 1 ] } , </@> <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>
<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <@> from = { children _ table . columns [ 1 ] } , </@> <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%> <%> <-> ( ) </%> <%> <+> _ model </%>
<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <@> from = { table . columns [ 1 ] } , </@> <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>
<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <@> from = { children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } , </@> <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>
<%> <*> add _ sql _ server -> visit </%> <%> <-> column column , </%> <%> <+> , column _ model column </%> <@> column . display _ name ( ) , column . data _ type ) ) ; </@> 
 <@> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { build _ action . invoke ( owns _ one _ builder ( new type _ identity ( owned _ type _ name ) , navigation _ name ) ) ; return this ; } </@> <%> <-> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) </%>
 <@> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { build _ action . invoke ( owns _ many _ builder ( new type _ identity ( owned _ type _ name ) , navigation _ name ) ) ; return this ; } </@> <%> <-> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) </%>
<%> <*> index -> filter </%> <%> <+> [ entity _ with _ two _ properties _ entity _ with _ string _ key _ </%> <%> <+> ] is not null </%> <%> <+> ; </%> <%> <*> is -> has </%> <%> <*> unique -> index </%> <%> <+> STR id STR </%> <@> . has _ foreign _ key ( STR microsoft . entity _ framework _ core . migrations . model _ snapshot _ sql _ server _ test + entity _ with _ two _ properties STR , STR entity _ with _ string _ key _ id STR ) . on _ delete ( delete _ behavior . cascade ) ; </@> <%> <-> , entity _ with _ string _ key _ id = STR 1 STR </%>
 <@> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { build _ action . invoke ( owns _ one _ builder < t _ related _ entity > ( new property _ identity ( navigation _ name ) ) ) ; return this ; } </@> <%> <-> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { </%>
 <@> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { build _ action . invoke ( owns _ many _ builder < t _ related _ entity > ( new property _ identity ( navigation _ name ) ) ) ; return this ; } </@> <%> <-> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { </%>
<%> <*> if ( is _ ambiguous _ inverse ( navigation _ member _ info , entity _ type . clr _ type , entity _ type . model , referencing _ navigations _ with _ attribute ) ) -> var ambiguous _ inverse = find _ ambiguous _ inverse ( </%> <%> <+> navigation _ member _ info , entity _ type , entity _ type . model , referencing _ navigations _ with _ attribute ) ; if ( ambiguous _ inverse ! = null ) </%> <@> var existing _ inverse _ type = existing _ inverse ? . declaring _ entity _ type . clr _ type ; </@> <%> <+> if ( fk . is _ ownership | | fk . declaring _ entity _ type . builder . remove _ foreign _ key ( fk , configuration _ source . data _ annotation ) = = null ) { fk . builder . navigations ( existing _ inverse . is _ dependent _ to _ principal ( ) ? property _ identity . none : ( property _ identity ? ) null , </%>
 <@> & & is _ ambiguous _ inverse ( navigation , entity _ type . clr _ type , entity _ type . model , inverse _ navigation . value ) ) </@> <%> <+> entity _ </%>
 <@> entity _ type = entity _ type . root _ type ( ) ; </@> <%> <-> . root _ type ( ) </%>
<%> <-> . root _ type ( ) </%> <@> entity _ type = entity _ type . root _ type ( ) ; </@> 
<%> <*> tea -> drink </%> <%> <*> lilt -> coke </%> <%> <*> coke -> lilt </%> <%> <*> drink -> tea </%> <@> where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) </@> <%> <*> kiwi -> eagle </%> <%> <*> eagle -> kiwi </%>
<%> <*> where -> where [ p ] . [ genus ] in ( 1 , 0 ) and ( </%> <%> <+> ) </%> <@> where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) </@> <%> <*> av -> a </%> <%> <*> av -> a </%> <%> <*> kiwi -> eagle </%> <%> <*> eagle -> kiwi </%> <%> <*> av -> a </%>
<%> <*> a -> p </%> <%> <*> a -> p </%> <%> <*> 0 -> 1 </%> <%> <*> 1 -> 0 </%> <%> <*> a -> p </%> <@> where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) and ( [ a ] . [ name ] = n ' great spotted kiwi ' ) </@> <%> <*> kiwi -> eagle </%> <%> <*> eagle -> kiwi </%>
<%> <*> kiwi -> eagle </%> <%> <*> eagle -> kiwi </%> <%> <+> ( </%> <%> <+> and [ a ] . [ name ] is not null ) </%> <@> where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) </@> 
 <@> where [ c . animals ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) </@> <%> <*> x -> a </%> <%> <*> where -> where ( [ a ] . [ discriminator ] in ( n ' eagle ' , n ' kiwi ' ) and </%> <%> <*> x -> a </%> <%> <+> ) </%> <%> <+> ( </%> <%> <*> x -> a </%> <%> <*> STR -> and [ a ] . [ found _ on ] is not null ) STR </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> operator . vehicle _ </%>
 <@> var customer = customers . where ( c = > c . customer _ id = = order . customer _ id ) . first ( ) ; </@> <%> <*> where -> first </%> <%> <-> ) . first ( </%> <%> <*> where -> first </%> <%> <-> ) . first ( </%>
<%> <*> where -> first </%> <%> <-> ) . first ( </%> <@> var order = orders . where ( o = > o . order _ id = = order _ detail . order _ id ) . first ( ) ; </@> <%> <*> where -> first </%> <%> <-> ) . first ( </%> <%> <*> where -> first _ or _ default </%> <%> <*> . first _ or _ default ( ) ; -> ; </%>
<%> <*> where -> first </%> <%> <-> ) . first ( </%> <%> <*> where -> first </%> <%> <-> ) . first ( </%> <@> var product = products . where ( p = > p . product _ id = = order _ detail . product _ id ) . first ( ) ; </@> <%> <*> where -> first _ or _ default </%> <%> <*> . first _ or _ default ( ) ; -> ; </%>
<%> <*> where -> first </%> <%> <-> ) . first ( </%> <%> <*> where -> first </%> <%> <-> ) . first ( </%> <@> var manager = employees . where ( e = > employee . reports _ to = = e . employee _ id ) . first _ or _ default ( ) ; </@> 
 <@> assert . true ( await connection . open _ async ( cancellation _ token ) ) ; </@> <%> <+> cancellation _ token : </%> <%> <+> cancellation _ token : </%>
<%> <+> cancellation _ token : </%> <@> assert . false ( await connection . open _ async ( cancellation _ token ) ) ; assert . false ( await connection . open _ async ( cancellation _ token ) ) ; </@> <%> <+> cancellation _ token : </%>
<%> <+> cancellation _ token : </%> <%> <+> cancellation _ token : </%> <@> assert . true ( await connection . open _ async ( cancellation _ token ) ) ; </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> var redis _ value _ generator _ factory = new redis _ value _ generator _ factory ( mock . of < redis _ database > ( ) ) ; </@> <%> <-> mock . of < redis _ database > ( ) </%>
<%> <-> mock . of < redis _ database > ( ) </%> <@> var redis _ value _ generator _ factory = new redis _ value _ generator _ factory ( mock . of < redis _ database > ( ) ) ; </@> 
<%> <*> basic -> convention </%> <%> <*> new basic -> create </%> <@> assert . is _ type < basic _ model _ builder . entity _ type _ builder . key _ builder > ( returned _ builder ) ; </@> <%> <*> key -> property </%>
<%> <*> key -> property </%> <%> <-> var returned _ builder = builder . entity < gunter > ( ) . key ( e = > e . id ) . shared _ name _ extension ( STR ) . shared _ name _ extension ( STR ) ; assert . is _ type < key _ builder > ( returned _ builder ) ; var model = builder . model ; var key = model . get _ entity _ type ( typeof ( gunter ) ) . get _ primary _ key ( ) ; assert . equal ( STR , key [ STR ] ) ; assert . equal ( STR , key [ STR ] ) ; assert . equal ( STR , model [ STR ] ) ; } fact public void can _ write _ basic _ property _ builder _ extension _ with _ common _ name ( ) { var builder = new basic _ model _ builder ( ) ; </%> <@> assert . is _ type < basic _ model _ builder . entity _ type _ builder . property _ builder > ( returned _ builder ) ; </@> <%> <*> property -> index </%>
<%> <*> property -> index </%> <%> <-> var returned _ builder = builder . entity < gunter > ( ) . property ( e = > e . id ) . shared _ name _ extension ( STR ) . shared _ name _ extension ( STR ) ; assert . is _ type < property _ builder > ( returned _ builder ) ; var model = builder . model ; var property = model . get _ entity _ type ( typeof ( gunter ) ) . get _ property ( STR ) ; assert . equal ( STR , property [ STR ] ) ; assert . equal ( STR , property [ STR ] ) ; assert . equal ( STR , model [ STR ] ) ; } fact public void can _ write _ basic _ foreign _ key _ builder _ extension _ with _ common _ name ( ) { var builder = new basic _ model _ builder ( ) ; builder . entity < gunter > ( ) . key ( e = > e . id ) ; var returned _ builder = builder . entity < gate > ( ) . foreign _ key < gunter > ( e = > e . gunter _ id ) . shared _ name _ extension ( STR ) . shared _ name _ extension ( STR ) ; assert . is _ type < basic _ model _ builder . entity _ type _ builder . foreign _ key _ builder > ( returned _ builder ) ; var model = builder . model ; var foreign _ key = model . get _ entity _ type ( typeof ( gate ) ) . foreign _ keys . single ( ) ; assert . equal ( STR , foreign _ key [ STR ] ) ; assert . equal ( STR , foreign _ key [ STR ] ) ; assert . equal ( STR , model [ STR ] ) ; } fact public void can _ write _ basic _ index _ builder _ extension _ with _ common _ name ( ) { var builder = new basic _ model _ builder ( ) ; </%> <@> assert . is _ type < basic _ model _ builder . entity _ type _ builder . index _ builder > ( returned _ builder ) ; </@> <%> <-> public void can _ write _ convention _ index _ builder _ extension _ with _ common _ name ( ) { var builder = create _ model _ builder ( ) ; </%>
 <@> service _ collection . add _ options ( ) ; service _ collection . add _ logging ( ) ; return new entity _ framework _ services _ builder ( service _ collection ) ; </@> <%> <+> service _ collection . add _ caching ( ) ; </%> <%> <-> . add _ singleton < i _ memory _ cache , memory _ cache > ( ) . add _ singleton < i _ compiled _ query _ cache , compiled _ query _ cache > ( ) </%> <%> <+> . add _ scoped < i _ compiled _ query _ cache , compiled _ query _ cache > ( ) </%>
 <@> throw new invalid _ operation _ exception ( STR + reference . to _ string ( ) ) ; </@> <%> <+> , overwrite : true </%>
<%> <+> using microsoft _ entity _ framework _ core _ internal ; </%> <%> <-> using microsoft _ extensions _ platform _ abstractions ; </%> <@> private readonly static string project _ command </@> <%> <*> configure -> create </%> <%> <*> [ not _ null ] string [ ] args ) -> ) </%> <%> <*> ef _ command _ line _ application app ; var help = false ; if ( args . length = = 0 | | args . first _ or _ default ( a = > a . equals ( STR ) | | a . equals ( STR ) | | a . equals ( STR ) ) ! = null ) -> var app = new command _ line _ application ( throw _ on _ unexpected _ arg : false ) </%> <%> <-> app = execute _ command . configure ( ) ; </%>
<%> <-> var connection _ was _ open = connection . db _ connection . state = = connection _ state . open ; if ( ! connection _ was _ open ) { logger . opening _ connection ( connection . connection _ string ) ; </%> <%> <-> } </%> <@> if ( ! connection _ was _ open ) { logger . closing _ connection ( connection . connection _ string ) ; connection . close ( ) ; } </@> 
<%> <+> new sql _ batch ( sql ) . </%> <%> <-> , sql </%> <@> var connection _ was _ open = connection . db _ connection . state = = connection _ state . open ; if ( ! connection _ was _ open ) { logger . opening _ connection ( connection . connection _ string ) ; connection . open ( ) ; } </@> <%> <-> if ( ! connection _ was _ open ) { logger . closing _ connection ( connection . connection _ string ) ; </%>
<%> <-> var connection _ was _ open = connection . db _ connection . state = = connection _ state . open ; if ( ! connection _ was _ open ) { logger . opening _ connection ( connection . connection _ string ) ; </%> <%> <-> } </%> <@> if ( ! connection _ was _ open ) { logger . closing _ connection ( connection . connection _ string ) ; connection . close ( ) ; } </@> <%> <-> } protected virtual db _ command create _ command ( i _ relational _ connection connection , db _ transaction transaction , string sql ) { var command = connection . db _ connection . create _ command ( ) ; command . command _ text = sql ; command . transaction = transaction ; </%>
<%> <*> test -> table </%> <%> <*> model -> query </%> <%> <*> fixture fixture ; -> generator generator = new table _ query _ generator ( ) ; </%> <%> <-> test _ model _ fixture fixture </%> <%> <-> ( fixture ) , new table _ filter _ factory </%> <%> <-> fixture = fixture ; } private static i _ model setup _ model ( test _ model _ fixture fixture ) { var model = fixture . create _ test _ model ( STR ) ; model . add _ entity _ type ( poco _ test _ type . entity _ type ( ) ) ; return model ; } private static expression make _ predicate < t _ source > ( expression < func < t _ source , bool > > where _ predicate ) { return expression . quote ( where _ predicate ) ; </%> <@> var query _ source = fixture . create _ with _ entity _ queryable < poco _ test _ type > ( ) ; </@> <%> <*> ats _ table -> select </%> <%> <*> query -> expression </%> <%> <*> table -> select </%> <%> <*> query -> expression </%> <%> <*> is _ type < ats -> equal ( typeof ( poco </%> <%> <*> table -> test </%> <%> <*> query > ( -> type ) , </%> <%> <+> . type </%> <%> <+> } theory member _ data _ simple _ where _ expressions member _ data _ data _ type _ where _ expressions </%>
<%> <+> ( </%> <%> <+> _ type , implementation _ type ) </%> <%> <-> service . </%> <@> service _ collection . add _ singleton ( service . service _ type , implementation ) ; </@> <%> <-> service . </%> <%> <-> service . </%> <%> <-> service . </%>
<%> <+> ( </%> <%> <+> _ type , implementation _ type ) </%> <%> <-> service . </%> <%> <-> service . </%> <@> service _ collection . add _ singleton ( service . service _ type , service . implementation _ type ) ; var constructors = service . implementation _ type . get _ constructors ( ) ; </@> 
<%> <-> reader _ offset = reader _ offset ; </%> <@> new offset _ value _ reader _ decorator ( value _ reader _ factory . create _ value _ reader ( query _ context . get _ data _ reader ( reader _ index ) ) , reader _ offset ) , </@> 
<%> <-> reader _ offset = reader _ offset ; </%> <@> new offset _ value _ reader _ decorator ( value _ reader _ factory . create _ value _ reader ( query _ context . get _ data _ reader ( reader _ index ) ) , reader _ offset ) , </@> 
<%> <-> , bool delimited </%> <@> if ( delimited ) { console . write _ line ( STR ) ; } </@> <%> <-> if ( delimited ) { </%> <%> <-> } </%>
<%> <-> , bool delimited </%> <%> <-> if ( delimited ) { </%> <%> <-> } </%> <@> if ( delimited ) { console . write _ line ( STR ) ; } </@> 
<%> <-> ] , [ ] . [ city </%> <%> <-> , [ ] . [ city ] </%> <@> order by [ ] . [ city ] , [ ] . [ customer _ id ] </@> <%> <-> [ ] . [ city ] , </%>
<%> <-> ] , [ ] . [ city </%> <%> <-> , [ ] . [ city ] </%> <%> <-> [ ] . [ city ] , </%> <@> order by [ ] . [ city ] , [ ] . [ customer _ id ] , [ ] . [ order _ id ] STR </@> 
 <@> results = results ? ? new list < object [ ] > </@> <%> <-> column _ names = </%> <%> <+> = </%>
<%> <-> results = </%> <%> <+> = </%> <@> column _ names = column _ names ? ? new [ ] { STR } ; </@> 
 <@> assert . null ( foreign _ key . delete _ behavior ) ; assert . equal ( delete _ behavior . restrict , ( ( i _ foreign _ key ) foreign _ key ) . delete _ behavior ) ; </@> <%> <-> assert . equal ( delete _ behavior . cascade , ( ( i _ foreign _ key ) foreign _ key ) . delete _ behavior ) ; </%> <%> <-> assert . equal ( delete _ behavior . restrict , ( ( i _ foreign _ key ) foreign _ key ) . delete _ behavior ) ; foreign _ key . delete _ behavior = null ; assert . null ( foreign _ key . delete _ behavior ) ; assert . equal ( delete _ behavior . restrict , ( ( i _ foreign _ key ) foreign _ key ) . delete _ behavior ) ; </%>
 <@> new bool? is _ unique { get ; set ; } </@> <%> <*> bool? -> bool </%> <%> <-> ? </%>
<%> <*> bool? -> bool </%> <@> new bool? is _ required { get ; set ; } </@> <%> <-> ? </%>
<%> <*> bool? -> bool </%> <%> <*> bool? -> bool </%> <@> new delete _ behavior ? delete _ behavior { get ; set ; } </@> 
 <@> assert . null ( relationship _ builder . metadata . is _ required ) ; assert . true ( ( ( i _ foreign _ key ) relationship _ builder . metadata ) . is _ required ) ; </@> <%> <-> ( ( i _ foreign _ key ) </%> <%> <-> ) </%> <%> <-> ( ( i _ foreign _ key ) </%> <%> <-> ) </%>
 <@> var existing _ child = parent . children . where ( c = > c . navigation = = navigation ) . single _ or _ default ( ) ; </@> <%> <*> existing _ child . include _ state = navigation . is _ collection ( ) ? navigation _ state . collection _ pending : navigation _ state . reference _ pending ; -> existing _ child . include _ state = navigation _ state . pending ; </%>
 <@> & & ( left _ binding . navigation _ tree _ node . navigation ? . is _ collection ( ) = = true | | right _ binding . navigation _ tree _ node . navigation ? . is _ collection ( ) = = true ) ) </@> <%> <-> . navigation </%> <%> <-> ( </%> <%> <-> ) </%> <%> <-> . navigation </%> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> definition . log ( diagnostics , method _ call _ expression . object , </%> <%> <*> argument -> definition . log ( diagnostics , method _ call _ expression </%> <%> <-> binary _ </%> <@> method _ call _ expression . object , argument ) ) ; </@> <%> <-> object , </%> <%> <-> binary _ </%> <%> <-> p . left , </%> <%> <*> right -> expression </%>
<%> <+> static </%> <@> | | ( ( relationship _ candidate . navigation _ properties . count > 1 ) & & ( relationship _ candidate . inverse _ properties . count > 0 ) ) | | ( relationship _ candidate . inverse _ properties . count > 1 ) ) </@> <%> <-> ( </%> <%> <-> ) </%>
<%> <+> < in _ memory _ test _ store > </%> <%> <*> private readonly object sync = new object ( ) ; private bool seeded ; public override inheritance _ context create _ context ( bool enable _ filters = false ) { enable _ filters = enable _ filters ; if ( ! seeded ) { lock ( sync ) { if ( ! seeded ) -> private const string database _ name = STR ; </%> <%> <+> public override in _ memory _ test _ store create _ test _ store ( ) = > in _ memory _ test _ store . create _ scratch ( ( ) = > </%> <%> <-> _ core </%> <@> if ( context . database . ensure _ created ( ) ) { seed _ data ( context ) ; } </@> <%> <-> clear _ log ( ) ; </%> <%> <+> } , </%> <%> <*> seeded -> ( ) </%> <%> <*> true ; -> > </%> <%> <-> } </%> <%> <*> } -> { </%> <%> <*> } -> using ( var context = create _ context ( ) ) </%> <%> <+> { </%> <%> <*> return create -> context . get _ service < i _ in _ memory _ store _ cache > ( ) . get </%> <%> <*> context -> store ( database </%> <%> <*> core -> name ) . clear </%> <%> <+> } ) ; </%>
<%> <*> public new virtual time _ span ? get _ next _ delay ( exception last _ exception ) -> protected override time _ span ? get _ next _ delay ( exception last _ exception ) </%> <%> <+> { var base _ delay = base . get _ next _ delay ( last _ exception ) ; return base _ delay ! = null & & get _ next _ delay ! = null ? get _ next _ delay . invoke ( last _ exception ) : base _ delay ; } public time _ span ? get _ next _ delay _ base ( exception last _ exception ) </%> <@> return get _ next _ delay ? . invoke ( last _ exception ) ? ? base . get _ next _ delay ( last _ exception ) ; </@> <%> <-> get = > execution _ strategy . suspended ; </%>
 <@> if ( save _ changes ) { save _ changes ( ) ; } </@> <%> <*> , bool save _ changes = true ) -> ) </%>
 <@> if ( save _ changes ) { save _ changes ( ) ; } </@> <%> <-> bool save _ changes = true </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> select new { c , o } ) ; </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> select new { c , o } ) ; </%>
<%> <-> } </%> <@> if ( foreign _ key . declaring _ entity _ type . find _ primary _ key ( ) ! = null & & handled _ foreign _ keys ? . contains ( foreign _ key ) ! = true ) </@> 
 <@> i _ async _ enumerable < t _ result > execute _ async < t _ result > ( [ not _ null ] expression query ) ; </@> <%> <-> i _ async _ enumerable < </%> <%> <-> > </%> <%> <-> _ enumerable </%> <%> <*> task -> singleton </%>
 <@> public virtual i _ async _ enumerable < t _ result > execute _ async < t _ result > ( expression query ) </@> <%> <+> var compiled _ query = compiled _ query _ cache . get _ or _ add _ async _ query ( compiled _ query _ cache _ key _ generator . generate _ cache _ key ( query , async : true ) , ( ) = > compile _ async _ query _ core < t _ result > ( query , query _ model _ generator , database ) ) ; </%> <%> <*> compile -> compiled </%> <%> <-> async _ query < t _ result > ( </%> <%> <-> ) </%>
 <@> func < query _ context , i _ async _ enumerable < t _ result > > get _ or _ add _ async _ query < t _ result > ( </@> <%> <-> i _ async _ enumerable < </%> <%> <-> > </%>
<%> <-> i _ async _ enumerable < </%> <%> <-> > </%> <@> not _ null func < func < query _ context , i _ async _ enumerable < t _ result > > > compiler ) ; </@> 
 <@> validate ( model _ builder . model ) ; </@> <%> <-> . model </%>
<%> <-> . model </%> <@> validate ( model _ builder . model ) ; </@> 
 <@> validate ( model _ builder . model ) ; </@> <%> <-> key </%>
 <@> validate ( model _ builder . model ) ; </@> <%> <+> fact public virtual void not _ mapped _ on _ overriden _ mapped _ base _ class _ property _ throws ( ) { var model _ builder = create _ model _ builder ( ) ; model _ builder . entity < unit > ( ) ; model _ builder . entity < base _ entity > ( ) ; </%>
<%> <*> ; -> . ignore ( e = > e . virtual _ base _ class _ property ) ; </%> <@> validate ( model _ builder . model ) ; </@> <%> <-> public virtual void not _ mapped _ on _ overriden _ mapped _ base _ class _ property _ throws ( ) { var model _ builder = create _ model _ builder ( ) ; model _ builder . ignore < different _ unit > ( ) ; model _ builder . entity < unit > ( ) ; </%>
<%> <-> public virtual void not _ mapped _ on _ overriden _ mapped _ base _ class _ property _ throws ( ) { var model _ builder = create _ model _ builder ( ) ; model _ builder . ignore < different _ unit > ( ) ; model _ builder . entity < unit > ( ) ; model _ builder . entity < base _ entity > ( ) ; validate ( model _ builder . model ) ; assert . null ( model _ builder . model . find _ entity _ type ( typeof ( abstract _ base _ entity ) ) . find _ property ( STR ) ) ; assert . not _ null ( model _ builder . model . find _ entity _ type ( typeof ( base _ entity ) ) . find _ property ( STR ) ) ; assert . not _ null ( model _ builder . model . find _ entity _ type ( typeof ( unit ) ) . find _ property ( STR ) ) ; } protected abstract class abstract _ base _ entity { public long id { get ; set ; } public abstract string abstract _ base _ class _ property { get ; set ; } } protected class base _ entity : abstract _ base _ entity { public string base _ class _ property { get ; set ; } public virtual string virtual _ base _ class _ property { get ; set ; } public override string abstract _ base _ class _ property { get ; set ; } } protected class unit : base _ entity { not _ mapped public override string virtual _ base _ class _ property { get ; set ; } public virtual abstract _ base _ entity related { get ; set ; } } protected class different _ unit : base _ entity { public new string virtual _ base _ class _ property { get ; set ; } } fact public virtual void not _ mapped _ on _ unmapped _ derived _ property _ ignores _ it ( ) { var model _ builder = create _ model _ builder ( ) ; model _ builder . ignore < abstract _ base _ entity > ( ) ; model _ builder . ignore < base _ entity > ( ) ; model _ builder . entity < unit > ( ) ; validate ( model _ builder . model ) ; assert . null ( model _ builder . model . find _ entity _ type ( typeof ( abstract _ base _ entity ) ) ) ; assert . null ( model _ builder . model . find _ entity _ type ( typeof ( base _ entity ) ) ) ; assert . null ( model _ builder . model . find _ entity _ type ( typeof ( unit ) ) . find _ property ( STR ) ) ; } fact </%> <@> validate ( model _ builder . model ) ; </@> 
 <@> validate ( model _ builder . model ) ; </@> <%> <-> . model </%>
<%> <-> . model </%> <@> validate ( model _ builder . model ) ; </@> 
 <@> validate ( model _ builder . model ) ; </@> <%> <-> . model </%>
<%> <-> . model </%> <@> validate ( model _ builder . model ) ; </@> <%> <+> model _ </%> <%> <+> model _ </%> <%> <*> builder . model -> model _ builder </%> <%> <+> model _ </%>
 <@> validate ( model _ builder . model ) ; </@> <%> <-> . model </%>
<%> <-> . model </%> <@> validate ( model _ builder . model ) ; </@> 
 <@> using system _ diagnostics ; </@> <%> <+> using microsoft _ data _ entity _ internal ; </%>
 <@> var dependent _ entity _ type _ builder = dependent _ type _ with _ composite _ key ; var relationship _ builder = dependent _ entity _ type _ builder . relationship ( </@> <%> <-> dependent _ entity _ type _ builder , </%> <%> <*> null , null , configuration _ source . convention , is _ unique : false ) ; -> configuration _ source . convention ) ; </%>
 <@> principal _ type _ with _ composite _ key , dependent _ type _ with _ composite _ key , STR , null , null , null , configuration _ source . convention , false ) ; </@> <%> <-> assert . false ( fk . is _ unique ) ; assert . false ( fk . is _ required ) ; </%>
<%> <*> var relationship _ builder = dependent _ type . relationship ( principal _ type , dependent _ type , null , null , new [ ] { fk _ property } , principal _ type . metadata . get _ primary _ key ( ) . properties , configuration _ source . convention , false ) ; -> var relationship _ builder = dependent _ type . has _ foreign _ key ( </%> <%> <+> principal _ type , new [ ] { fk _ property } , configuration _ source . convention ) ; </%> <@> principal _ type , dependent _ type , STR , null , null , null , configuration _ source . convention , false ) ; </@> <%> <-> assert . false ( new _ fk . is _ unique ) ; assert . false ( new _ fk . is _ required ) ; </%>
<%> <+> get _ or _ </%> <%> <*> string -> int </%> <@> strings . format _ bad _ backing _ field _ type ( STR , typeof ( int? ) . name , typeof ( the _ dark _ side ) . full _ name , STR , typeof ( string ) . name ) , </@> <%> <+> get _ or _ </%>
<%> <-> using core _ strings = microsoft . data . entity . internal . strings ; </%> <%> <-> private const string connection _ string _ key = STR ; private const string command _ timeout _ key = STR ; private const string max _ batch _ size _ key = STR ; </%> <@> var options _ extension = new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) ; </@> <%> <-> create _ options ( new dictionary < string , string > ( ) ) </%>
<%> <-> create _ options ( new dictionary < string , string > ( ) ) </%> <@> assert . throws < argument _ null _ exception > ( ( ) = > { new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) . connection = null ; } ) ; </@> <%> <-> create _ options ( new dictionary < string , string > ( ) ) </%>
<%> <-> create _ options ( new dictionary < string , string > ( ) ) </%> <@> var options _ extension = new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) ; </@> <%> <-> assert . throws < argument _ null _ exception > ( ( ) = > { new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) . connection _ string = null ; } ) ; } fact </%>
<%> <*> assert . throws < argument _ null _ exception > ( ( ) = > { new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) . connection _ string = null ; } ) ; } fact public void configure _ sets _ connection _ string _ to _ value _ specified _ in _ raw _ options ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) { { connection _ string _ key , connection _ string } } ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) ; assert . equal ( connection _ string , options _ extension . connection _ string ) ; } fact public void configure _ does _ not _ set _ connection _ string _ if _ value _ already _ set ( ) { const string original _ connection _ string = STR ; var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) { { connection _ string _ key , connection _ string } } ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) { connection _ string = original _ connection _ string } ; assert . equal ( original _ connection _ string , options _ extension . connection _ string ) ; } fact public void configure _ does _ not _ set _ connection _ string _ if _ not _ specified _ in _ raw _ options ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) ; assert . null ( options _ extension . connection _ string ) ; -> assert . throws < argument _ null _ exception > ( ( ) = > { new test _ relational _ options _ extension ( ) . connection _ string = null ; } ) ; </%> <@> var options _ extension = new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) ; </@> 
<%> <*> ( ) = > { new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) . command _ timeout = - 1 ; } ) . message ) ; } fact public void configure _ sets _ command _ timeout _ to _ value _ specified _ in _ raw _ options ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) { { command _ timeout _ key , STR } } ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) ; assert . equal ( 1 , options _ extension . command _ timeout ) ; } fact public void configure _ does _ not _ set _ command _ timeout _ if _ value _ already _ set ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) { { command _ timeout _ key , STR } } ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) { command _ timeout = NUM } ; assert . equal ( NUM , options _ extension . command _ timeout ) ; } fact public void configure _ does _ not _ set _ command _ timeout _ if _ not _ specified _ in _ raw _ options ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) ; assert . null ( options _ extension . command _ timeout ) ; } fact public void configure _ throws _ if _ command _ timeout _ specified _ in _ raw _ options _ is _ invalid ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) { { command _ timeout _ key , STR } } ; assert . equal ( core _ strings . integer _ configuration _ value _ format _ error ( command _ timeout _ key , STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) ) . message ) ; -> ( ) = > { new test _ relational _ options _ extension ( ) . command _ timeout = - 1 ; } ) . message ) ; </%> <@> var options _ extension = new test _ relational _ options _ extension ( ( create _ options ( new dictionary < string , string > ( ) ) ) ) ; </@> 
<%> <+> include _ navigations ( query _ model , include _ specifications ) ; } protected virtual void include _ navigations ( not _ null query _ model query _ model , not _ null i _ read _ only _ collection < include _ specification > include _ specifications ) { check . not _ null ( query _ model , nameof ( query _ model ) ) ; check . not _ null ( include _ specifications , nameof ( include _ specifications ) ) ; </%> <@> foreach ( var include _ specification in include _ specifications . order _ by ( a = > a . navigation _ path . first ( ) . points _ to _ principal ( ) ) ) </@> 
 <@> include _ specification . query _ source , </@> <%> <-> include _ specification . navigation _ path , </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <+> select g . full _ name , assert _ order : true ) ; } </%>
<%> <+> } ) . to _ list _ async ( ) ; assert . equal ( 1 , results . count ) ; } } conditional _ fact </%> <@> using ( var context = fixture . create _ context ( ) ) </@> 
<%> <*> new internal -> create _ conventionless </%> <%> <*> new model -> ) . get _ infrastructure </%> <%> <-> ) </%> <@> var validator = test _ helpers . create _ model _ validator ( ) ; </@> 
 <@> db _ function _ schema _ dbo </@> <%> <-> _ schema _ dbo </%>
<%> <-> _ schema _ dbo </%> <@> db _ function _ schema _ dbo </@> 
 <@> var db _ context _ generator _ model = new db _ context _ generator _ model ( ) </@> <%> <-> filters = ( configuration . filters ? ? string . empty ) , </%>
<%> <-> , configuration . filters </%> <%> <*> throw new invalid _ program _ exception ( STR + provider . get _ type ( ) + STR + configuration . connection _ string + STR + configuration . filters ) ; } if ( metadata _ model . entity _ types . count ( ) = = 0 ) { throw new invalid _ program _ exception ( STR + provider . get _ type ( ) + STR + configuration . connection _ string + STR + configuration . filters ) ; -> throw new invalid _ operation _ exception ( STR + provider . get _ type ( ) </%> <%> <+> + STR + configuration . connection _ string ) ; </%> <@> if ( ! directory . exists ( output _ directory _ name ) ) { directory . create _ directory ( output _ directory _ name ) ; } </@> 
<%> <-> ( ( entity _ type ) entity _ type ) </%> <%> <*> . try _ get -> entity </%> <%> <*> annotation ( -> type [ </%> <%> <*> ) -> ] </%> <%> <-> sb , </%> <%> <*> . value -> , sb </%> <@> + STR + error _ message _ annotation . value ) ; </@> <%> <*> . cast < foreign _ key > ( ) ) -> ) </%>
 <@> c _ sharp _ code _ generator _ helper . instance . single _ line _ comment ( sb , STR ) ; </@> <%> <+> i _ property property , </%> <%> <-> , i _ property property </%> <%> <*> sb -> access _ modifier . public </%> <%> <-> access _ modifier . public , </%> <%> <+> , sb </%>
<%> <*> sb -> STR </%> <%> <*> STR -> sb </%> <@> public override void generate _ entity _ property ( indented _ string _ builder sb , i _ property property ) </@> <%> <*> sb -> access _ modifier . public </%> <%> <-> access _ modifier . public , </%> <%> <+> , sb </%> <%> <*> sb -> STR </%> <%> <*> STR -> sb </%>
<%> <*> sb -> STR </%> <%> <*> STR -> sb </%> <%> <+> i _ property property , </%> <%> <-> , i _ property property </%> <@> c _ sharp _ code _ generator _ helper . instance . add _ property ( sb , access _ modifier . public , virtual _ modifier . none , property . property _ type , property . name ) ; </@> <%> <*> sb -> STR </%> <%> <*> STR -> sb </%> <%> <*> . cast < foreign _ key > ( ) ) -> ) </%>
<%> <+> i _ property property , </%> <%> <-> , i _ property property </%> <%> <*> sb -> access _ modifier . public </%> <%> <-> access _ modifier . public , </%> <%> <+> , sb </%> <@> c _ sharp _ code _ generator _ helper . instance . single _ line _ comment ( sb , STR ) ; </@> <%> <*> . cast < foreign _ key > ( ) ) -> ) </%> <%> <-> foreign _ key </%> <%> <*> . get -> foreign </%> <%> <*> annotation ( -> key [ </%> <%> <*> ) . value -> ] </%>
<%> <*> . cast < foreign _ key > ( ) ) -> ) </%> <%> <-> foreign _ key </%> <%> <*> . get -> foreign </%> <%> <*> annotation ( -> key [ </%> <%> <*> ) . value -> ] </%> <@> c _ sharp _ code _ generator _ helper . instance . single _ line _ comment ( sb , STR + other _ entity _ type . name + STR ) ; </@> <%> <-> ( ( i _ foreign _ key ) </%> <%> <-> ) </%> <%> <-> sb , </%>
 <@> public virtual void single _ line _ comment ( indented _ string _ builder sb , string comment ) </@> <%> <+> string namespace , </%> <%> <-> , string namespace </%>
<%> <+> string comment , </%> <%> <-> , string comment </%> <@> public virtual void add _ using _ statement ( indented _ string _ builder sb , string namespace ) </@> <%> <+> string class _ namespace , </%> <%> <-> , string class _ namespace </%>
<%> <+> string namespace , </%> <%> <-> , string namespace </%> <@> public virtual void begin _ namespace ( indented _ string _ builder sb , string class _ namespace ) </@> 
<%> <*> public virtual string class _ namespace { get { return namespace _ name ; } } -> public virtual string class _ namespace { get ; } </%> <@> c _ sharp _ code _ generator _ helper . instance . begin _ namespace ( sb , class _ namespace ) ; c _ sharp _ code _ generator _ helper . instance . begin _ class ( sb , access _ modifier . public , class _ name , is _ partial : true ) ; </@> <%> <-> sb , </%> <%> <+> , sb </%> <%> <*> sb -> STR </%> <%> <*> STR -> sb </%> <%> <-> sb , </%> <%> <+> , sb </%>
<%> <-> sb , </%> <%> <+> , sb </%> <%> <-> var original _ namespaces = new list < string > ( used _ namespaces ) ; </%> <%> <*> where -> except </%> <%> <*> ns = > ! original -> used </%> <%> <-> . contains ( ns ) </%> <@> c _ sharp _ code _ generator _ helper . instance . add _ using _ statement ( sb , namespace ) ; </@> 
 <@> generate _ entity _ property ( sb , property ) ; </@> <%> <+> i _ property property , </%> <%> <-> , i _ property property </%> <%> <-> var primary _ key _ properties = entity _ type . get _ primary _ key ( ) . properties . to _ list ( ) ; foreach ( var property in primary _ key _ properties ) { yield return property ; </%>
<%> <*> sb -> property </%> <%> <*> property -> sb </%> <@> public abstract void generate _ entity _ property ( indented _ string _ builder sb , i _ property property ) ; </@> <%> <-> var primary _ key _ properties = entity _ type . get _ primary _ key ( ) . properties . to _ list ( ) ; foreach ( var property in primary _ key _ properties ) { yield return property ; } var foreign _ key _ properties = entity _ type . foreign _ keys . select _ many ( fk = > fk . properties ) . distinct ( ) . to _ list ( ) ; foreach ( var property in </%>
<%> <-> sb , </%> <%> <+> , sb </%> <%> <-> sb , </%> <%> <+> , sb </%> <%> <-> sb , </%> <%> <+> , sb </%> <@> c _ sharp _ code _ generator _ helper . instance . add _ using _ statement ( sb , namespace ) ; </@> 
 <@> c _ sharp _ code _ generator _ helper . instance . begin _ method ( sb , access _ modifier . protected , virtual _ modifier . override , STR , STR , on _ configuring _ method _ parameters ) ; </@> <%> <*> sb -> access _ modifier . protected </%> <%> <-> access _ modifier . protected , </%> <%> <+> , sb </%>
<%> <*> sb -> access _ modifier . protected </%> <%> <-> access _ modifier . protected , </%> <%> <+> , sb </%> <@> c _ sharp _ code _ generator _ helper . instance . begin _ method ( sb , access _ modifier . protected , virtual _ modifier . override , STR , STR , on _ model _ creating _ method _ parameters ) ; </@> 
<%> <-> sb , </%> <%> <+> , sb </%> <@> generate _ navigations _ configuration ( navigations _ string _ builder , entity _ type ) ; </@> 
<%> <-> indented _ string _ builder sb , </%> <%> <*> ) -> , indented _ string _ builder sb ) </%> <@> generate _ entity _ key _ configuration ( sb , key ) ; } generate _ entity _ facets _ configuration ( sb , entity _ type ) ; </@> <%> <*> sb -> property </%> <%> <*> property -> sb </%> <%> <+> i _ key key , </%> <%> <-> , i _ key key </%>
<%> <-> sb , </%> <%> <+> , sb </%> <%> <*> sb -> property </%> <%> <*> property -> sb </%> <@> public virtual void generate _ entity _ key _ configuration ( indented _ string _ builder sb , i _ key key ) { sb . append ( STR ) ; </@> 
<%> <*> ! can -> is </%> <%> <*> add -> ignored </%> <@> convention _ dispatcher . on _ entity _ type _ added , </@> <%> <*> ! can -> is </%> <%> <*> add -> ignored </%>
<%> <*> ! can -> is </%> <%> <*> add -> ignored </%> <@> convention _ dispatcher . on _ entity _ type _ added , </@> <%> <*> private bool can -> private internal _ entity _ type _ builder on _ entity _ type </%> <%> <*> add -> added </%> <%> <*> string name , configuration -> internal _ entity _ type </%> <%> <*> source configuration -> builder entity _ type </%> <%> <*> source -> builder </%> <%> <+> if ( ignored _ entity _ type _ names . has _ value ) { ignored _ entity _ type _ names . value . remove ( entity _ type _ builder . metadata . name ) ; } return convention _ dispatcher . on _ entity _ type _ added ( entity _ type _ builder ) ; } </%>
<%> <+> private bool is _ ignored ( string name , configuration _ source configuration _ source ) { if ( configuration _ source = = configuration _ source . explicit ) { return false ; } </%> <@> if ( ! configuration _ source . overrides ( ignored _ configuration _ source ) ) </@> <%> <*> return false ; } if ( ignored _ configuration _ source = = configuration _ source . explicit ) { throw new invalid _ operation _ exception ( strings . entity _ ignored _ explicitly ( name ) ) ; -> return true ; </%>
 <@> case constants . sqlite _ integer : </@> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>
<%> <-> constants . </%> <@> case constants . sqlite _ float : </@> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>
<%> <-> constants . </%> <%> <-> constants . </%> <@> case constants . sqlite _ text : </@> <%> <-> constants . </%> <%> <-> constants . </%>
<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <@> case constants . sqlite _ blob : </@> <%> <-> constants . </%>
<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <@> case constants . sqlite _ null : </@> 
 <@> case constants . sqlite _ integer : </@> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>
<%> <-> constants . </%> <@> case constants . sqlite _ float : </@> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>
<%> <-> constants . </%> <%> <-> constants . </%> <@> case constants . sqlite _ text : </@> <%> <-> constants . </%> <%> <-> constants . </%>
<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <@> case constants . sqlite _ blob : </@> <%> <-> constants . </%>
<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <@> case constants . sqlite _ null : </@> <%> <-> constants . </%>
<%> <-> constants . </%> <@> if ( type = = constants . sqlite _ null </@> 
 <@> case constants . sqlite _ integer : </@> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>
<%> <-> constants . </%> <@> case constants . sqlite _ float : </@> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>
<%> <-> constants . </%> <%> <-> constants . </%> <@> case constants . sqlite _ text : </@> <%> <-> constants . </%> <%> <-> constants . </%>
<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <@> case constants . sqlite _ blob : </@> <%> <-> constants . </%>
<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <@> case constants . sqlite _ null : </@> 
 <@> var strategy = property . sql _ server ( ) . identity _ strategy ; return property . clr _ type . is _ integer ( ) & & strategy = = sql _ server _ identity _ strategy . sequence _ hi _ lo </@> <%> <*> return property . clr _ type = = typeof ( guid ) ? sequential _ guid _ factory . create ( property ) -> return property . clr _ type . unwrap _ nullable _ type ( ) = = typeof ( guid ) </%>
<%> <*> migrations -> history _ rows </%> <%> <*> migrations -> rows </%> <%> <*> migrations -> history _ rows </%> <%> <*> migrations -> history _ rows </%> <%> <*> migrations -> history _ rows </%> <%> <*> i _ migration -> history </%> <%> <*> metadata -> row </%> <@> return new i _ migration _ metadata [ ] </@> <%> <+> history _ row { </%> <%> <*> metadata ( -> id = </%> <%> <*> ) -> } </%> <%> <+> history _ row { </%> <%> <*> metadata ( -> id = </%> <%> <*> ) -> } </%>
 <@> linq _ operator _ provider . intercept _ exceptions < t > ( null , null , null ) ; </@> <%> <+> null , </%>
<%> <+> null , </%> <@> async _ linq _ operator _ provider . intercept _ exceptions < t > ( null , null , null ) ; </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <+> = > assert _ query < customer > ( is _ async , cs = > cs . where ( c = > new [ ] { STR , STR , STR } . any ( li = > li . equals ( c . customer _ id ) ) ) , entry _ count : 2 ) ; conditional _ theory member _ data _ nameof _ is _ async _ data public virtual task where _ subquery _ any _ equals _ static ( bool is _ async ) </%>
<%> <-> tuple . create ( typeof ( int ) , new relational _ type _ mapping ( STR , db _ type . int ) ) , tuple . create ( typeof ( date _ time ) , new relational _ type _ mapping ( STR , db _ type . date _ time ) ) , tuple . create ( typeof ( bool ) , new relational _ type _ mapping ( STR , db _ type . boolean ) ) , tuple . create ( typeof ( double ) , new relational _ type _ mapping ( STR , db _ type . double ) ) , tuple . create ( typeof ( long ) , new relational _ type _ mapping ( STR , db _ type . int ) ) , tuple . create ( typeof ( date _ time _ offset ) , new relational _ type _ mapping ( STR , db _ type . date _ time _ offset ) ) , tuple . create ( typeof ( short ) , new relational _ type _ mapping ( STR , db _ type . int ) ) , tuple . create ( typeof ( float ) , new relational _ type _ mapping ( STR , db _ type . single ) ) } ; private readonly relational _ sized _ type _ mapping string _ mapping = new relational _ sized _ type _ mapping ( STR , db _ type . ansi _ string , NUM ) ; private readonly relational _ decimal _ type _ mapping decimal _ mapping = new relational _ decimal _ type _ mapping ( NUM , 2 ) ; public virtual relational _ type _ mapping get _ type _ mapping ( i _ property property ) = > get _ type _ mapping ( property . relational ( ) . column _ type , property . relational ( ) . column , property . clr _ type . unwrap _ nullable _ type ( ) , property . is _ key ( ) | | property . is _ foreign _ key ( ) , property . is _ concurrency _ token ) ; public virtual relational _ type _ mapping get _ type _ mapping ( i _ sequence sequence ) = > get _ type _ mapping ( sequence . name , sequence . type , is _ key : false , is _ concurrency _ token : false ) ; </%> <%> <*> public virtual relational _ type _ mapping get _ type _ mapping ( string specified _ type , string storage _ name , type property _ type , bool is _ key , bool is _ concurrency _ token ) -> mapping = get _ or _ add _ name _ mapping ( type _ name . to _ lower _ invariant ( ) ) ; </%> <%> <+> } return mapping ? ? ( simple _ mappings . try _ get _ value ( property . clr _ type . unwrap _ enum _ type ( ) . unwrap _ nullable _ type ( ) , out mapping ) ? mapping : map _ custom ( property ) ) ; } public virtual relational _ type _ mapping map _ sequence _ type ( i _ sequence sequence ) </%> <%> <-> check . not _ null ( storage _ name , nameof ( storage _ name ) ) ; check . not _ null ( property _ type , nameof ( property _ type ) ) ; </%> <%> <*> property _ type = property _ type . unwrap _ nullable _ type ( ) ; var mapping = simple _ mappings . first _ or _ default ( m = > m . item = = property _ type ) ; if ( mapping ! = null ) -> check . not _ null ( sequence , nameof ( sequence ) ) ; </%> <%> <+> relational _ type _ mapping mapping ; if ( simple _ mappings . try _ get _ value ( sequence . type . unwrap _ enum _ type ( ) , out mapping ) ) </%> <@> return mapping . item ; </@> <%> <*> if ( property _ type . get _ type _ info ( ) . is _ enum ) -> throw new not _ supported _ exception ( strings . unsupported _ type ( sequence . type . name ) ) ; </%> <%> <+> } protected virtual relational _ type _ mapping try _ map _ from _ name ( not _ null string type _ name , not _ null string type _ name _ prefix , int? first _ qualifier , int? second _ qualifier ) { </%>
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> 
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> 
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <+> context , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception , get _ next _ delay : e = > time _ span . from _ ticks ( 0 ) ) ; var execution _ count = 0 ; await assert . throws _ async < argument _ null _ exception > ( ( ) = > execute _ async ( execution _ strategy _ mock , ct = > </%> <@> throw new db _ update _ exception ( STR , new argument _ out _ of _ range _ exception ( ) ) ; </@> <%> <-> return task . from _ result ( execution _ count ) ; } ) ; assert . equal ( NUM , execution _ count ) ; } fact public task execute _ async _ action _ retries _ until _ not _ retrieable _ exception _ is _ thrown ( ) { return execute _ async _ retries _ until _ not _ retrieable _ exception _ is _ thrown ( ( e , f ) = > e . execute _ async ( ct = > ( task ) f ( ct ) , cancellation _ token . none ) ) ; </%>
<%> <+> using ( var transaction = context . database . begin _ transaction ( ) ) </%> <%> <-> using ( var transaction = context . database . begin _ transaction ( ) ) { </%> <%> <+> { use _ transaction ( inner _ context . database , transaction ) ; store _ change ( inner _ context ) ; await inner _ context . save _ changes _ async ( ) ; var update _ exception = await assert . throws _ any _ async < db _ update _ exception > ( ( ) = > context . save _ changes _ async ( ) ) ; resolver ( context , update _ exception ) ; using ( var validation _ context = create _ context ( ) ) </%> <%> <*> use _ transaction ( inner _ context . database , transaction ) ; store _ change ( inner _ context ) ; await inner _ context . save _ changes _ async ( ) ; var update _ exception = await assert . throws _ any _ async < db _ update _ exception > ( ( ) = > context . save _ changes _ async ( ) ) ; resolver ( context , update _ exception ) ; using ( var validation _ context = create _ context ( ) ) -> use _ transaction ( validation _ context . database , transaction ) ; </%> <%> <+> if ( validator ! = null ) </%> <@> use _ transaction ( validation _ context . database , transaction ) ; if ( validator ! = null ) { await context . save _ changes _ async ( ) ; validator ( validation _ context ) ; } </@> <%> <+> } </%>
<%> <+> { posts = new list < post > </%> <@> posts = new list < post > </@> <%> <+> comments = </%> <%> <*> post -> list < comment > </%> <%> <-> comments = new list < comment > { </%> <%> <-> } , new post ( ) </%>
<%> <+> { configuration = new configuration </%> <@> configuration = new configuration { processed = true } } , new cart { configuration = new configuration ( ) </@> <%> <+> } , new cart { configuration = new configuration ( ) } </%>
<%> <+> { using ( var context = create _ context ( ) ) </%> <@> using ( var context = create _ context ( ) ) { var query = context . gears . include ( STR ) . to _ list ( ) ; } } ) . message ) ; </@> 
 <@> & & ! entity _ type . is _ query _ type ( ) , </@> <%> <-> ( ) </%>
<%> <+> } </%> <@> if ( entity _ type . is _ query _ type ( ) ) </@> <%> <*> var annotation = entity _ type . find _ annotation ( core _ annotation _ names . defining _ query ) ; if ( annotation ! = null ) -> var query = entity _ type . defining _ query ; </%> <%> <+> if ( query ! = null & & entity _ query _ model _ visitor . should _ apply _ defining _ query ( entity _ type , query _ source ) ) </%> <%> <-> var query = ( lambda _ expression ) annotation . value ; </%>
<%> <*> public abstract class built _ in _ data _ types _ test _ base -> public abstract class built _ in _ data _ types _ test _ base < t _ test _ store , t _ fixture > : i _ class _ fixture < t _ fixture > , i _ disposable </%> <%> <+> where t _ test _ store : test _ store where t _ fixture : built _ in _ data _ types _ fixture _ base < t _ test _ store > , new ( ) </%> <%> <-> protected built _ in _ data _ types _ fixture _ base fixture ; </%> <@> using ( var context = fixture . create _ context ( ) ) </@> 
 <@> using ( var context = fixture . create _ context ( ) ) </@> <%> <*> test _ insert _ and _ read _ back _ all _ nullable _ data _ types _ with _ values _ set _ to _ null ( context ) ; -> context . set < built _ in _ nullable _ data _ types > ( ) . add ( </%> <%> <+> new built _ in _ nullable _ data _ types { id = NUM , id = NUM , test _ string = null , test _ nullable _ int = null , test _ nullable _ int = null , </%>
<%> <+> _ unsigned </%> <%> <+> assert . null ( dt . test _ nullable _ unsigned _ int ) ; assert . null ( dt . test _ nullable _ unsigned _ int ) ; assert . null ( dt . test _ nullable _ character ) ; assert . null ( dt . test _ nullable _ signed _ byte ) ; } </%> <@> using ( var context = fixture . create _ context ( ) ) </@> <%> <*> public void test _ insert _ and _ read _ back _ all -> protected built </%> <%> <*> nullable -> in </%> <%> <-> _ with _ values _ set _ to </%> <%> <*> non -> test </%> <%> <*> null -> base </%> <%> <*> db -> t </%> <%> <*> context context -> fixture fixture </%>
<%> <-> var hints = mapping _ info . value _ converter _ info ? . mapping _ hints ; </%> <@> ? ? mapping . size ? ? hints ? . size ; </@> 
<%> <-> _ entity </%> <%> <-> this . get _ </%> <%> <-> ( ) </%> <@> declaring _ entity _ type . property _ metadata _ changed ( ) ; </@> <%> <+> protected abstract void property _ metadata _ changed ( ) ; </%>
<%> <-> system . </%> <@> var login = new login ( ) { customer = customer , customer _ id = customer . customer _ id , username = customer . name + customer . customer _ id , } ; </@> <%> <-> ( ) </%> <%> <-> ) . to _ string ( </%>
<%> <-> ) . to _ string ( </%> <%> <-> system . </%> <@> var photo = new product _ photo ( ) { photo _ id = ( photos _ per _ product * product . product _ id ) + k , photo = new byte [ ] { 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 } , } ; </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> var line = new order _ line ( ) { order _ id = order . order _ id , product _ id = ( product _ per _ customer _ count * customer . customer _ id ) + m , concurrency _ token = i . to _ string ( ) , } ; </@> <%> <-> ( ) </%>
 <@> var order = new order ( ) { order _ id = ( ( 2 * orders _ per _ customer ) * customer . customer _ id ) + l + orders _ per _ customer , customer _ id = customer . customer _ id , concurrency _ token = i . to _ string ( ) , } ; </@> <%> <-> ( ) </%>
 <@> public override system . threading . tasks . task group _ by _ distinct ( ) </@> <%> <*> return system . threading . tasks . -> return </%>
 <@> var product _ model = new product _ model ( ) { catalog _ description = STR + product _ iterator , instructions = STR , modified _ date = date _ time . now , name = STR , row _ guid = run _ guid } ; </@> <%> <-> ( ) </%> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> var product _ category = new product _ category ( ) { name = STR , row _ guid = run _ guid , modified _ date = date _ time . now } ; </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> var product _ sub _ category = new product _ sub _ category ( ) { name = STR , row _ guid = run _ guid , modified _ date = date _ time . now , category = product _ category } ; </@> 
<%> <*> int -> var </%> <@> get { return this . value ; } set { this . value = value ; } </@> <%> <-> get { return this . first _ level _ property ; } set { this . second _ level _ property = value ; </%>
<%> <*> get { return this . value ; } set { this . value = value ; } -> get { return value ; } </%> <%> <+> set { this . value = value ; } </%> <@> get { return this . first _ level _ property ; } set { this . second _ level _ property = value ; } </@> <%> <*> funcletization _ with _ properties -> var </%> <%> <*> int -> var </%>
 <@> var query = context . customers . where ( c = > c . customer _ id = = STR ) . first _ or _ default ( ) ; </@> <%> <*> where -> single </%> <%> <-> ) . single ( </%>
<%> <*> where -> single </%> <%> <-> ) . single ( </%> <@> var query = context . customers . where ( c = > c . customer _ id = = STR ) . single _ or _ default ( ) ; </@> 
<%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <@> public class in _ memory _ fixture : fixture _ base < in _ memory _ test _ store > </@> <%> <+> i _ </%> <%> <-> in _ memory _ </%>
 <@> public abstract class property _ entry _ test _ base < t _ test _ store , t _ fixture > : i _ class _ fixture < t _ fixture > where t _ test _ store : test _ store where t _ fixture : fixture _ base < t _ test _ store > , new ( ) </@> <%> <+> protected property _ entry _ test _ base ( t _ fixture fixture ) = > fixture = fixture ; protected t _ fixture fixture { get ; } </%>
<%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <@> public class sql _ server _ fixture : relational _ fixture < sql _ server _ test _ store > </@> <%> <+> i _ </%> <%> <-> sql _ server _ </%> <%> <+> , db _ context context </%> <%> <+> , context </%>
<%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <@> public class sqlite _ fixture : relational _ fixture < sqlite _ test _ store > </@> <%> <+> i _ </%> <%> <-> sqlite _ </%>
 <@> public abstract class relational _ fixture < t _ test _ store > : fixture _ base < t _ test _ store > where t _ test _ store : test _ store </@> <%> <+> , db _ context context </%> <%> <+> , context </%>
<%> <-> querying _ enumerable . </%> <@> = querying _ enumerable . shaper _ command _ context . get _ relational _ command ( querying _ enumerable . relational _ query _ context . parameter _ values ) ; await querying _ enumerable . relational _ query _ context </@> <%> <-> querying _ enumerable . </%> <%> <-> querying _ enumerable . </%> <%> <-> querying _ enumerable . </%> <%> <-> querying _ enumerable . </%>
 <@> lock ( querying _ enumerable . relational _ query _ context ) </@> <%> <-> querying _ enumerable . </%> <%> <-> querying _ enumerable . </%>
 <@> using ( var context = create _ context ( ) ) { context . database . use _ relational _ nulls ( use _ relational _ nulls ) ; </@> <%> <*> int -> var </%>
<%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%> <@> public virtual new one _ to _ many _ builder < t _ related _ entity > foreign _ key ( [ not _ null ] params string [ ] foreign _ key _ property _ names ) </@> <%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%> <%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%>
<%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%> <@> public virtual new many _ to _ one _ builder < t _ related _ entity > foreign _ key ( [ not _ null ] params string [ ] foreign _ key _ property _ names ) </@> <%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%> <%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%>
<%> <+> ( ) = > metadata . try _ get _ entity _ type ( type ) , ( ) = > entity _ type _ added ( new entity _ type ( type ) ) , entity _ type = > new internal _ entity _ builder ( entity _ type , model _ builder ) , configuration _ source ) ; } private bool can _ add ( string name , configuration _ source configuration _ source ) { configuration _ source ignored _ configuration _ source ; if ( ignored _ entity _ type _ names . has _ value & & ignored _ entity _ type _ names . value . try _ get _ value ( name , out ignored _ configuration _ source ) ) </%> <%> <*> entity -> ! configuration </%> <%> <*> builders -> source </%> <%> <*> try _ get _ value -> overrides </%> <%> <*> entity -> ignored </%> <%> <*> type , out entity -> configuration </%> <%> <*> builder -> source </%> <%> <*> entity _ builder -> false </%> <%> <+> ignored _ entity _ type _ names . value . remove ( name ) ; </%> <%> <*> entity _ builder = new internal _ entity _ builder ( entity _ type , model _ builder ) ; entity _ builders . add ( entity _ type , entity _ builder ) ; return entity _ builder ; -> return true ; </%> <@> private void entity _ type _ added ( entity _ type entity _ type ) </@> <%> <+> metadata . add _ entity _ type ( entity _ type ) ; </%> <%> <+> return entity _ type ; } public virtual bool ignore _ entity ( [ not _ null ] string name , configuration _ source configuration _ source ) { </%>
<%> <*> { var compiled = convert _ expression . compile ( ) ; return typeof ( t _ in ) . is _ nullable _ type ( ) ? ( func < object , object > ) ( v = > compiled ( sanitize _ nullable < t _ in > ( v ) ) ) : ( v = > v = = null ? ( object ) null : compiled ( sanitize _ non _ nullable < t _ in > ( v ) ) ) ; } private static t sanitize _ nullable < t > ( object value ) -> = > v = > v = = null </%> <%> <+> ? ( object ) null : convert _ expression . compile ( ) ( sanitize < t _ in > ( v ) ) ; private static t sanitize < t > ( object value ) </%> <@> return value = = null ? ( t ) value : ( t ) ( unwrapped _ type ! = value . get _ type ( ) </@> <%> <-> private static t sanitize _ non _ nullable < t > ( object value ) = > ( t ) ( typeof ( t ) ! = value . get _ type ( ) ? convert . change _ type ( value , typeof ( t ) ) : value ) ; </%>
 <@> var removed _ foreign _ key = metadata . remove _ foreign _ key ( foreign _ key . properties , foreign _ key . principal _ key , foreign _ key . principal _ entity _ type ) ; </@> <%> <*> . where ( p = > p . declaring _ entity _ type . find _ declared _ property ( p . name ) ! = null ) ) ; -> ) ; </%>
<%> <+> _ foreign _ key </%> <@> return builder . replace _ foreign _ key ( </@> <%> <*> principal _ end _ configuration _ source : properties = = null ? null : configuration _ source ) ; -> principal _ end _ configuration _ source : properties = = null ? null : configuration _ source , </%> <%> <+> remove _ current : ! property . are _ compatible ( properties , metadata . declaring _ entity _ type ) ) ; </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <+> inline _ data _ false _ true inline _ data _ true _ true public virtual async task include _ is _ not _ ignored _ when _ projection _ contains _ client _ method _ and _ complex _ expression ( bool use _ string , bool async ) { using ( var context = create _ context ( ) ) { var query = from e in ( use _ string ? context . employees . include ( nameof ( employee . manager ) ) </%>
<%> <+> entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor </%> <%> <+> entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor </%> <%> <+> entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor </%> <%> <+> entity _ query _ model _ visitor . </%> <@> var query _ model _ visitor = query _ compilation _ context . create _ query _ model _ visitor ( ) ; </@> <%> <+> protected entity _ query _ model _ visitor create _ query _ model _ visitor ( ) { return query _ compilation _ context . create _ query _ model _ visitor ( entity _ query _ model _ visitor ) ; } </%>
<%> <+> entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor </%> <%> <+> entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor </%> <@> var query _ model _ visitor = query _ compilation _ context . create _ query _ model _ visitor ( ) ; </@> 
<%> <-> private readonly lazy _ ref < i _ model > model ; </%> <%> <*> protected model _ snapshot ( ) -> private i _ model model ; </%> <%> <+> private i _ mutable _ model create _ model ( ) </%> <@> model = new lazy _ ref < i _ model > ( ( ) = > { var model _ builder = new model _ builder ( new convention _ set ( ) ) ; build _ model ( model _ builder ) ; return model _ builder . model ; } ) ; </@> <%> <*> . value ; -> ? ? = create _ model ( ) ; </%>
<%> <-> using microsoft _ entity _ framework _ core _ internal ; </%> <@> private readonly lazy _ ref < i _ model > target _ model ; private readonly lazy _ ref < list < migration _ operation > > up _ operations ; private readonly lazy _ ref < list < migration _ operation > > down _ operations ; </@> <%> <-> protected migration ( ) </%> <%> <+> public virtual i _ model target _ model </%> <%> <*> target _ model = new lazy _ ref < i _ model > ( ( ) = > -> get </%> <%> <+> { i _ model create ( ) </%>
 <@> private readonly lazy _ ref < i _ model > model ; private readonly lazy _ ref < string > migration _ id _ column _ name ; private readonly lazy _ ref < string > product _ version _ column _ name ; </@> <%> <-> model = new lazy _ ref < i _ model > ( ( ) = > { </%>
 <@> connection = new lazy _ ref < db _ connection > ( ( ) = > relational _ options . connection ) ; </@> <%> <-> connection = new lazy _ ref < db _ connection > ( create _ db _ connection ) ; </%>
<%> <-> debug . assert ( foreign _ key . is _ required = = is _ required ) ; debug . assert ( ( ( i _ foreign _ key ) foreign _ key ) . is _ required = = is _ required ) ; </%> <%> <*> . navigation ( navigation _ to _ principal _ name , builder . metadata , points _ to _ principal : true , configuration _ source : configuration _ source ) ? ? relationship _ builders . value . try _ get _ value ( builder . metadata , configuration _ source ) ; -> . navigation ( navigation _ to _ principal _ name , builder . metadata , points _ to _ principal : true , configuration _ source : configuration _ source ) ; </%> <@> . navigation ( navigation _ to _ dependent _ name , builder . metadata , points _ to _ principal : builder . metadata . declaring _ entity _ type ! = metadata , configuration _ source : configuration _ source ) ? ? relationship _ builders . value . try _ get _ value ( builder . metadata , configuration _ source ) ; </@> <%> <-> debug . assert ( builder ! = null ) ; if ( on _ relationship _ adding ! = null ) { builder = on _ relationship _ adding ( builder ) ; } else </%>
 <@> is _ required ? ? false ? typeof ( int ) : typeof ( int? ) , </@> <%> <+> : true </%>
<%> <+> _ user _ profile </%> <%> <+> server _ path = get _ ci _ machine _ server _ path ( ) ; if ( ! file . exists ( server _ path ) ) { </%> <%> <+> } </%> <@> else { return run _ server ( server _ path ) ; } </@> 
 <@> private readonly lazy _ ref < i _ model > model ; private readonly lazy _ ref < state _ manager > state _ manager ; private readonly lazy _ ref < context _ entity _ sets > sets ; </@> <%> <+> configuration = entity _ configuration _ cache . instance . get _ or _ add _ configuration ( this ) ; initialize ( ) ; </%> <%> <+> initialize ( ) ; </%>
<%> <-> using microsoft _ data _ entity _ query ; </%> <%> <-> using microsoft _ data _ entity ; using system _ collections _ generic ; using system _ threading ; </%> <@> var model = create _ northwind _ model ( ) ; using ( var test _ database = await test _ database . northwind ( ) ) </@> <%> <*> var config = new entity _ configuration { data _ store = new sql _ server _ data _ store ( test _ database . connection . connection _ string ) , model = create _ northwind _ model ( ) } ; using ( var db = new northwind _ context ( config ) ) -> using ( var db = new northwind _ context ( ) ) </%>
 <@> var model = create _ northwind _ model ( ) ; using ( var test _ database = await test _ database . northwind ( ) ) </@> <%> <*> var config = new entity _ configuration { data _ store = new sql _ server _ data _ store ( test _ database . connection . connection _ string ) , model = create _ northwind _ model ( ) } ; using ( var db = new northwind _ context ( config ) ) -> using ( var db = new northwind _ context ( ) ) </%>
 <@> using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sqlite _ query _ expression _ translators </@> <%> <+> sqlite _ </%> <%> <+> sqlite _ </%>
 <@> using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ methods </@> <%> <+> sqlite _ </%>
 <@> using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sqlite _ query _ expression _ translators </@> <%> <+> sqlite _ </%> <%> <+> sqlite _ </%>
 <@> using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sqlite _ query _ expression _ translators </@> <%> <+> sqlite _ </%> <%> <+> sqlite _ </%>
 <@> using microsoft _ data _ entity _ query _ expression _ translators ; using microsoft _ data _ entity _ sql _ server _ query _ methods ; namespace microsoft _ data _ entity _ sqlite _ query _ expression _ translators </@> <%> <+> sqlite _ </%>
 <@> else { return new i _ xunit _ test _ case [ ] { new skipped _ test _ case ( diagnostic _ message _ sink , discovery _ options . method _ display _ or _ default ( ) , test _ method ) } ; } </@> <%> <-> xunit . sdk . </%>
 <@> start _ with = target . start _ value , </@> <%> <*> cycle -> is _ cyclic </%>
<%> <*> with -> value </%> <@> cycle = target . is _ cyclic </@> 
<%> <+> using microsoft _ data _ entity _ migrations _ operations _ builders ; </%> <%> <-> _ builders </%> <@> public virtual i _ list < migration _ operation > operations { get ; } = new list < migration _ operation > ( ) ; </@> <%> <+> is _ </%>
 <@> public one _ to _ one _ builder < t _ related _ entity > one _ to _ one < t _ related _ entity > ( </@> <%> <-> < t _ related _ entity > </%>
<%> <+> public many _ to _ one _ builder < t _ related _ entity > referenced _ key ( not _ null expression < func < t _ related _ entity , object > > key _ expression ) { check . not _ null ( key _ expression , STR ) ; return new many _ to _ one _ builder < t _ related _ entity > ( builder . referenced _ key ( key _ expression . get _ property _ access _ list ( ) ) ) ; </%> <%> <-> public class one _ to _ one _ builder < t _ related _ entity > : metadata _ builder < foreign _ key , one _ to _ one _ builder < t _ related _ entity > > </%> <%> <+> } public class one _ to _ one _ builder : metadata _ builder < foreign _ key , one _ to _ one _ builder > </%> <@> public one _ to _ one _ builder < t _ dependent _ entity > foreign _ key < t _ dependent _ entity > ( </@> <%> <+> var inverting = model _ builder . entity < t _ dependent _ entity > ( ) . metadata ! = builder . dependent _ type ; if ( inverting ) { builder . invert ( ) ; } </%> <%> <-> return new one _ to _ one _ builder < t _ dependent _ entity > ( </%>
<%> <+> ( </%> <%> <*> _ -> , </%> <%> <+> ) </%> <@> t = > ! string . is _ null _ or _ empty ( schema _ table . schema ) & & t . schema = = schema _ table . schema | | t . name = = schema _ table . table ) ) </@> 
<%> <*> item -> ( level , id , message ) </%> <@> item . message ) ; </@> 
<%> <*> item -> ( level , id , message ) </%> <@> item . message ) ; </@> 
<%> <*> tuple -> ( state , force ) </%> <@> ? tuple . state </@> <%> <-> tuple . </%>
<%> <*> tuple -> ( state , force ) </%> <%> <-> tuple . </%> <@> force _ state _ when _ unknown _ key : tuple . force ) ; </@> <%> <*> tuple -> ( state , force ) </%>
<%> <*> tuple -> ( state , force ) </%> <@> ? tuple . state </@> <%> <-> tuple . </%>
<%> <*> tuple -> ( state , force ) </%> <%> <-> tuple . </%> <@> force _ state _ when _ unknown _ key : tuple . force , </@> 
<%> <+> ( </%> <%> <*> _ -> , </%> <%> <+> ) </%> <@> t = > ! string . is _ null _ or _ empty ( schema _ table . schema ) & & t . schema = = schema _ table . schema | | t . name = = schema _ table . table ) ) </@> 
<%> <+> } ) . to _ list _ async ( ) ; assert . equal ( 1 , results . count ) ; } } conditional _ fact </%> <@> using ( var context = fixture . create _ context ( ) ) </@> 
<%> <-> entity . metadata . </%> <@> var model = ( entity . metadata . model ) model ; </@> <%> <-> entity . metadata . </%>
<%> <-> get _ </%> <%> <*> _ state _ data -> . get </%> <%> <-> navigation </%> <@> | | state _ data . is _ property _ flagged ( get _ navigation _ state _ data _ index ( navigation ) , property _ flag . is _ loaded ) ; private int get _ navigation _ state _ data _ index ( i _ navigation navigation ) = > navigation . get _ index ( ) - entity _ type . property _ count ( ) ; </@> 
<%> <*> relational ( configuration -> has _ no </%> <%> <*> source . convention ) . has -> declared </%> <%> <-> property _ info : null </%> <%> <*> private static void set _ default _ discriminator _ values ( i _ read _ only _ list < entity _ type > entity _ types , discriminator _ builder discriminator ) -> private static void set _ default _ discriminator _ values ( </%> <%> <+> i _ read _ only _ list < entity _ type > entity _ types , i _ convention _ discriminator _ builder discriminator ) </%> <@> discriminator . has _ value ( entity _ type . name , entity _ type . short _ name ( ) ) ; </@> 
<%> <-> public static bool overrides ( this configuration _ source new _ configuration _ source , configuration _ source ? old _ configuration _ source ) { if ( old _ configuration _ source = = null ) { return true ; } if ( new _ configuration _ source = = configuration _ source . explicit ) { return true ; } if ( old _ configuration _ source = = configuration _ source . explicit ) { return false ; } if ( new _ configuration _ source = = configuration _ source . data _ annotation ) { return true ; } return old _ configuration _ source ! = configuration _ source . data _ annotation ; } public static bool overrides ( this configuration _ source ? new _ configuration _ source , configuration _ source ? old _ configuration _ source ) = > new _ configuration _ source ? . overrides ( old _ configuration _ source ) ? ? old _ configuration _ source = = null ; public static bool overrides _ strictly ( this configuration _ source new _ configuration _ source , configuration _ source ? old _ configuration _ source ) = > new _ configuration _ source . overrides ( old _ configuration _ source ) & & new _ configuration _ source ! = old _ configuration _ source ; public static bool overrides _ strictly ( this configuration _ source ? new _ configuration _ source , configuration _ source ? old _ configuration _ source ) = > new _ configuration _ source . has _ value & & new _ configuration _ source . value . overrides _ strictly ( old _ configuration _ source ) ; </%> <%> <*> = > ! right . has _ value | | ( left . has _ value & & left . value . overrides ( right . value ) ) -> = > left . overrides ( right ) </%> <@> : right . value ; </@> <%> <*> = > max ( ( configuration _ source ? ) left , right ) . value ; -> = > left . overrides ( right ) </%> <%> <+> ? left : right . value ; </%>
<%> <-> ) . relational ( </%> <%> <-> . sql _ server ( ) </%> <%> <-> ) . sql _ server ( </%> <@> assert . not _ null ( model . relational ( ) . find _ sequence ( STR ) ) ; var sequence = model . sql _ server ( ) . find _ sequence ( STR ) ; </@> 
<%> <+> : i _ convention _ discriminator _ builder </%> <%> <*> public discriminator _ builder ( not _ null relational _ annotations _ builder annotations _ builder , not _ null func < internal _ entity _ type _ builder , relational _ entity _ type _ builder _ annotations > get _ relational _ entity _ type _ builder _ annotations ) -> public discriminator _ builder ( [ not _ null ] i _ mutable _ entity _ type entity _ type ) </%> <%> <*> annotations _ builder = annotations _ builder ; get _ relational _ entity _ type _ builder _ annotations = get _ relational _ entity _ type _ builder _ annotations ; -> entity _ type _ builder = ( ( entity _ type ) entity _ type ) . builder ; </%> <%> <-> private func < internal _ entity _ type _ builder , relational _ entity _ type _ builder _ annotations > get _ relational _ entity _ type _ builder _ annotations { get ; } </%> <@> protected virtual relational _ annotations _ builder annotations _ builder { get ; }       entity _ framework _ internal protected virtual internal _ entity _ type _ builder entity _ type _ builder = > ( internal _ entity _ type _ builder ) annotations _ builder . get _ infrastructure ( ) ; </@> <%> <+> , configuration _ source . explicit </%> <%> <-> annotations _ builder . </%> <%> <+> . explicit </%> <%> <+> , configuration _ source . explicit </%>
 <@> entity _ type _ builder . relational ( configuration _ source . convention ) . to _ table ( null ) ; </@> <%> <-> . relational ( configuration _ source . convention ) </%>
<%> <-> configuration _ source ? configuration _ source ) = > property ( property _ name , property _ type , configuration _ source , type _ configuration _ source : configuration _ source ) ; public virtual internal _ property _ builder property ( </%> <%> <-> not _ null type property _ type , </%> <%> <*> property _ name , property _ type , member _ info : null , configuration _ source , type _ configuration _ source ) ; -> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , </%> <%> <+> type _ configuration _ source : type _ configuration _ source ) ; </%> <@> = > property ( property _ name , property _ type : null , member _ info : null , configuration _ source , type _ configuration _ source : null ) ; </@> <%> <-> _ simple </%> <%> <*> name -> type </%> <%> <+> _ simple </%> <%> <*> type -> name </%> <%> <+> can _ be _ null type property _ type , </%> <%> <-> can _ be _ null type property _ type , </%>
<%> <-> not _ null type property _ type , </%> <%> <*> property _ name , property _ type , member _ info : null , configuration _ source , type _ configuration _ source ) ; -> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , </%> <%> <+> type _ configuration _ source : type _ configuration _ source ) ; </%> <%> <*> = > property ( property _ name , property _ type : null , member _ info : null , configuration _ source , type _ configuration _ source : null ) ; -> = > property ( </%> <%> <+> property _ type : null , property _ name : property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : null ) ; </%> <@> = > property ( member _ info . get _ simple _ member _ name ( ) , member _ info . get _ member _ type ( ) , member _ info , configuration _ source , configuration _ source ) ; </@> <%> <+> can _ be _ null type property _ type , </%> <%> <-> can _ be _ null type property _ type , </%>
<%> <+> bool i _ convention _ entity _ type _ builder . can _ set _ base _ type ( i _ convention _ entity _ type base _ entity _ type , bool from _ data _ annotation ) = > can _ set _ base _ type ( ( entity _ type ) base _ entity _ type , from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention ) ; </%> <@> string property _ name , type property _ type , bool set _ type _ configuration _ source , bool from _ data _ annotation ) </@> <%> <-> property _ name , </%> <%> <*> from _ data _ annotation ? configuration _ source . data _ annotation : configuration -> property </%> <%> <*> source . convention -> name </%> <%> <+> from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention , </%>
<%> <+> bool i _ convention _ entity _ type _ builder . can _ set _ base _ type ( i _ convention _ entity _ type base _ entity _ type , bool from _ data _ annotation ) = > can _ set _ base _ type ( ( entity _ type ) base _ entity _ type , from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention ) ; </%> <%> <*> string -> type </%> <%> <*> name -> type </%> <%> <*> type -> string </%> <%> <*> type -> name </%> <@> property _ name , property _ type , from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention , set _ type _ configuration _ source </@> 
 <@> var id _ property = entity _ type _ builder . property ( id _ property _ name , typeof ( string ) , configuration _ source . convention ) ; </@> <%> <+> typeof ( j _ object ) , </%> <%> <-> , typeof ( j _ object ) </%>
<%> <+> typeof ( string ) , </%> <%> <-> , typeof ( string ) </%> <@> var j _ object _ property = entity _ type _ builder . property ( j _ object _ property _ name , typeof ( j _ object ) , configuration _ source . convention ) ; </@> 
<%> <+> get _ </%> <%> <*> ( ) . -> _ </%> <%> <+> ( ) </%> <@> . where ( i = > index . declaring _ entity _ type . find _ property ( i ) = = null ) . first _ or _ default ( ) ; </@> 
<%> <-> , id _ property . test _ provider ( ) </%> <%> <-> , name _ property . test _ provider ( ) </%> <%> <-> , quacks _ property . test _ provider ( ) </%> <%> <-> , computed _ property . test _ provider ( ) </%> <@> entry , concurrency _ property , concurrency _ property . test _ provider ( ) , generator . generate _ next , false , true , false , false , </@> 
<%> <-> , id _ property . test _ provider ( ) </%> <%> <-> , name _ property . test _ provider ( ) </%> <%> <-> , quacks _ property . test _ provider ( ) </%> <%> <-> , computed _ property . test _ provider ( ) </%> <@> entry , concurrency _ property , concurrency _ property . test _ provider ( ) , generator . generate _ next , false , true , false , </@> 
 <@> var property _ builder = entity _ type _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ; </@> 
 <@> var property _ builder = entity _ type _ builder . property ( STR , typeof ( int ) , configuration _ source . explicit ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( STR , typeof ( int ) , configuration _ source . explicit ) ; </@> 
 <@> var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; </@> 
 <@> entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; </@> 
 <@> entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; </@> 
 <@> var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; </@> 
 <@> var shadow _ key _ property = principal _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ; </@> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> dependent _ entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention ) ; </@> 
 <@> new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . metadata . name , property . name } , </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> ( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> var shadow _ property = dependent _ entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . convention ) ; </@> 
 <@> entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention ) ; </@> <%> <+> typeof ( string ) , </%> <%> <-> , typeof ( string ) </%>
<%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <@> derived _ entity _ builder . property ( special _ order . specialty _ property . name , typeof ( string ) , configuration _ source . convention ) ; </@> 
 <@> ( entity _ builder , property ) = > entity _ builder . property ( ( ( i _ property ) property ) . name , property . clr _ type , configuration _ source . explicit ) ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <*> ( entity _ builder , property ) = > entity _ builder . property ( ( ( i _ property ) property ) . name , property . clr _ type , configuration _ source . explicit ) ) ; -> ( entity _ builder , property ) = > entity _ builder . property ( property . clr _ type , ( ( i _ property ) property ) . name , configuration _ source . explicit ) ) ; </%> <@> var shadow _ property = entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . convention ) ; </@> 
 <@> ( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> var shadow _ property = entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . convention ) ; </@> 
 <@> order . id _ property . name , typeof ( int ) , configuration _ source . data _ annotation , type _ configuration _ source : configuration _ source . data _ annotation ) ) ; </@> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <%> <+> typeof ( string ) , </%> <%> <-> typeof ( string ) , configuration _ source . convention , </%>
<%> <+> typeof ( int ) , </%> <%> <*> typeof ( int ) , configuration _ source . data _ annotation , -> configuration _ source . data _ annotation , </%> <@> entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention , type _ configuration _ source : null ) ) ; </@> <%> <+> typeof ( string ) , </%> <%> <*> typeof ( string ) , configuration _ source . convention , -> configuration _ source . convention , </%>
<%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <@> order . id _ property . name , typeof ( string ) , configuration _ source . convention , type _ configuration _ source : configuration _ source . convention ) ) ; </@> 
 <@> var derived _ property = derived _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . data _ annotation ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> var derived _ property = derived _ entity _ builder . property ( STR , typeof ( byte ) , configuration _ source . convention ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <%> <-> STR , </%> <%> <+> , STR </%> <@> var property _ builder = entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ; </@> 
<%> <+> typeof ( int ) , </%> <%> <-> ) , typeof ( int </%> <@> var property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( int ) , configuration _ source . data _ annotation ) ; </@> <%> <+> typeof ( string ) , </%> <%> <-> ) , typeof ( string </%> <%> <+> typeof ( string ) , </%> <%> <-> ) , typeof ( string </%>
<%> <+> typeof ( int ) , </%> <%> <-> ) , typeof ( int </%> <%> <*> var property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( int ) , configuration _ source . data _ annotation ) ; -> var property _ builder = derived _ entity _ builder . property ( typeof ( int ) , nameof ( special _ order . specialty ) , configuration _ source . data _ annotation ) ; </%> <@> assert . null ( derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( string ) , configuration _ source . data _ annotation ) ) ; </@> <%> <+> typeof ( string ) , </%> <%> <-> ) , typeof ( string </%>
<%> <*> var property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( int ) , configuration _ source . data _ annotation ) ; -> var property _ builder = derived _ entity _ builder . property ( typeof ( int ) , nameof ( special _ order . specialty ) , configuration _ source . data _ annotation ) ; </%> <%> <+> typeof ( string ) , </%> <%> <-> ) , typeof ( string </%> <@> property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( string ) , configuration _ source . explicit ) ; </@> 
<%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <@> assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . data _ annotation ) ) ; </@> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%>
<%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <@> assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . explicit ) ) ; </@> 
 <@> if ( property . relational ( ) . is _ fixed _ length ) </@> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%>
 <@> var db _ function = model . relational ( ) . find _ db _ function ( method ) ; </@> <%> <-> method . return _ type , null ) ; </%>
 <@> new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . metadata } , </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . metadata } , </@> 
<%> <*> sql -> get </%> <%> <*> server -> filter </%> <%> <-> . filter </%> <%> <-> . sql _ server ( configuration _ source . convention ) </%> <%> <*> sql -> get </%> <%> <*> server -> filter </%> <%> <-> . filter </%> <@> index _ builder . sql _ server ( configuration _ source . convention ) . has _ filter ( null ) ; </@> <%> <*> sql -> get </%> <%> <-> server ( ) . </%> <%> <+> ( </%> <%> <+> ) </%>
 <@> dependent _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> principal _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> dependent _ entity _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; principal _ entity _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; </@> 
<%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <@> var property _ builder = entity _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; </@> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%>
<%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <@> var property _ builder = entity _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; </@> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%>
 <@> var property _ builder = entity _ builder . property ( STR , typeof ( int ) , configuration _ source . data _ annotation ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> var property _ builder = entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ; </@> 
 <@> assert . true ( property . relational ( ) . is _ fixed _ length ) ; </@> <%> <-> . relational ( ) </%> <%> <+> ( ) </%>
<%> <-> . relational ( ) </%> <%> <+> ( ) </%> <@> assert . false ( property . relational ( ) . is _ fixed _ length ) ; </@> 
<%> <-> . relational ( ) </%> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <@> var sequence = model _ builder . model . relational ( ) . find _ sequence ( STR ) ; </@> 
<%> <-> . relational ( ) </%> <@> var db _ func = model _ builder . model . relational ( ) . find _ db _ function ( test _ method ) as db _ function ; </@> 
<%> <*> bool -> void </%> <%> <*> return false ; -> configuration . data _ store _ creator . delete ( ) ; </%> <%> <+> } public virtual bool exists ( ) { return configuration . data _ store _ creator . exists ( ) ; </%> <%> <*> return task . from _ result ( false ) ; -> return configuration . data _ store _ creator . create _ async ( configuration . model , cancellation _ token ) ; </%> <@> public virtual task < bool > delete _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </@> <%> <*> return task . from _ result ( false ) ; -> return configuration . data _ store _ creator . delete _ async ( cancellation _ token ) ; </%> <%> <+> } public virtual task < bool > exists _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) ) { return configuration . data _ store _ creator . exists _ async ( cancellation _ token ) ; </%>
 <@> var store = mock . of < data _ store > ( ) ; var source = create _ source ( STR , configured : true , available : false , store : store ) ; </@> <%> <*> store -> source </%>
<%> <-> public override void order _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) { base . order _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) ; } public override void order _ by _ then _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) { base . order _ by _ then _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) ; } </%> <@> where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and not ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) ) </@> <%> <+> assert _ sql ( @ STR from [ gears ] as [ g ] where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and ( [ g ] . [ has _ soul _ patch ] < > cast ( 1 as bit ) ) order by [ g ] . [ full _ name ] STR </%>
<%> <*> = > new sql _ server _ query _ compilation _ context ( -> { </%> <%> <+> check . not _ null ( linq _ operator _ provider , nameof ( linq _ operator _ provider ) ) ; check . not _ null ( result _ operator _ handler , nameof ( result _ operator _ handler ) ) ; check . not _ null ( enumerable _ method _ provider , nameof ( enumerable _ method _ provider ) ) ; check . not _ null ( method _ call _ translator , nameof ( method _ call _ translator ) ) ; return new sql _ server _ query _ compilation _ context ( </%> <@> check . not _ null ( linq _ operator _ provider , nameof ( linq _ operator _ provider ) ) , check . not _ null ( result _ operator _ handler , nameof ( result _ operator _ handler ) ) , </@> <%> <*> check . not _ null ( enumerable _ method _ provider , nameof ( enumerable _ method _ provider ) ) , check . not _ null ( method _ call _ translator , nameof ( method _ call _ translator ) ) , -> clr _ property _ getter _ source , </%> <%> <+> enumerable _ method _ provider , method _ call _ translator , </%> <%> <+> } </%>
<%> <*> query -> t </%> <%> <*> source -> out > , i </%> <%> <*> scope -> grouping </%> <%> <+> t _ key , </%> <%> <-> > </%> <@> private readonly i _ async _ grouping < t _ key , query _ source _ scope < t _ out > > grouping ; </@> <%> <-> query _ source _ scope < </%> <%> <-> > </%>
<%> <*> query -> t </%> <%> <*> source -> out > , i </%> <%> <*> scope -> grouping </%> <%> <+> t _ key , </%> <%> <-> > </%> <%> <-> query _ source _ scope < </%> <%> <-> > </%> <@> i _ async _ grouping < t _ key , query _ source _ scope < t _ out > > grouping , </@> 
<%> <*> t . select ( vs = > new entity _ load _ info ( new value _ buffer ( vs ) , vr = > materializer ( t . entity _ type , vr ) ) ) -> t . select ( vs = > new entity _ load _ info ( </%> <%> <+> new value _ buffer ( vs ) , vb = > materializer ( t . entity _ type , vb ) ) ) </%> <%> <+> } </%> <@> private static i _ enumerable < query _ source _ scope < t _ entity > > entity _ query < t _ entity > ( i _ query _ source query _ source , query _ context query _ context , query _ source _ scope parent _ query _ source _ scope , </@> <%> <*> = > ( ( in _ memory _ query _ context ) query _ context ) . database -> { </%> <%> <+> return ( ( in _ memory _ query _ context ) query _ context ) . database </%>
<%> <*> , -> ; </%> <%> <-> parent _ query _ source _ scope , value _ buffer ) ; </%> <%> <+> } </%> <@> private static i _ enumerable < query _ source _ scope < value _ buffer > > projection _ query ( i _ query _ source query _ source , query _ context query _ context , query _ source _ scope parent _ query _ source _ scope , </@> <%> <*> = > ( ( in _ memory _ query _ context ) query _ context ) . database -> { </%> <%> <+> return ( ( in _ memory _ query _ context ) query _ context ) . database </%> <%> <-> . select _ many ( t = > t . select ( vs = > new query _ source _ scope < value _ buffer > ( query _ source , new value _ buffer ( vs ) , </%>
<%> <*> qss -> result </%> <@> private static i _ enumerable < i _ grouping < t _ key , query _ source _ scope < t _ out > > > track _ grouped _ entities < t _ key , t _ out , t _ in > ( i _ enumerable < i _ grouping < t _ key , query _ source _ scope < t _ out > > > groupings , </@> 
 <@> private class tracking _ grouping < t _ key , t _ out , t _ in > : i _ grouping < t _ key , query _ source _ scope < t _ out > > </@> <%> <-> query _ source _ scope < </%> <%> <-> > </%> <%> <-> query _ source _ scope < </%> <%> <-> > </%>
<%> <-> query _ source _ scope < </%> <%> <-> > </%> <@> private readonly i _ grouping < t _ key , query _ source _ scope < t _ out > > grouping ; </@> <%> <-> query _ source _ scope < </%> <%> <-> > </%>
<%> <-> query _ source _ scope < </%> <%> <-> > </%> <%> <-> query _ source _ scope < </%> <%> <-> > </%> <@> i _ grouping < t _ key , query _ source _ scope < t _ out > > grouping , </@> 
 <@> query _ source _ scope . create ( query _ model . main _ from _ clause , optional _ default _ value , entity _ query _ model _ visitor . query _ source _ scope _ parameter ) ) ; </@> <%> <*> { return expression . call ( -> = > expression . call ( </%> <%> <-> } </%>
<%> <*> var group _ join _ clauses = query _ model . body _ clauses . of _ type < group _ join _ clause > ( ) . to _ list ( ) ; if ( group _ join _ clauses . any ( ) ) -> var group _ join _ materialization _ expression _ visitor = new requires _ materialization _ for _ group _ join _ expression _ visitor ( ) ; </%> <%> <+> var group _ join _ materialization _ query _ model _ vistor = new requires _ materialization _ for _ group _ join _ query _ model _ visitor ( group _ join _ materialization _ expression _ visitor , query _ sources _ requiring _ materialization , requires _ materialization _ expression _ visitor ) ; group _ join _ materialization _ expression _ visitor . query _ model _ visitor = group _ join _ materialization _ query _ model _ vistor ; group _ join _ materialization _ query _ model _ vistor . visit _ query _ model ( query _ model ) ; } private class requires _ materialization _ for _ group _ join _ query _ model _ visitor : expression _ transforming _ query _ model _ visitor < requires _ materialization _ for _ group _ join _ expression _ visitor > { private readonly i _ set < i _ query _ source > query _ sources _ requiring _ materialization ; private readonly requires _ materialization _ expression _ visitor requires _ materialization _ expression _ visitor ; public requires _ materialization _ for _ group _ join _ query _ model _ visitor ( requires _ materialization _ for _ group _ join _ expression _ visitor transforming _ visitor , i _ set < i _ query _ source > query _ sources _ requiring _ materialization , requires _ materialization _ expression _ visitor requires _ materialization _ expression _ visitor ) : base ( transforming _ visitor ) { transforming _ visitor . query _ model _ visitor = this ; query _ sources _ requiring _ materialization = query _ sources _ requiring _ materialization ; requires _ materialization _ expression _ visitor = requires _ materialization _ expression _ visitor ; } public override void visit _ group _ join _ clause ( group _ join _ clause group _ join _ clause , query _ model query _ model , int index ) </%> <%> <*> foreach ( var group _ join _ clause in group _ join _ clauses ) -> query _ sources _ requiring _ materialization . add ( group _ join _ clause . join _ clause ) ; </%> <%> <+> var sub _ query _ inner _ sequence = group _ join _ clause . join _ clause . inner _ sequence as sub _ query _ expression ; if ( sub _ query _ inner _ sequence ! = null ) </%> <%> <*> query _ sources _ requiring _ materialization . add ( group _ join _ clause . join _ clause ) ; var sub _ query _ inner _ sequence = group _ join _ clause . join _ clause . inner _ sequence as sub _ query _ expression ; if ( sub _ query _ inner _ sequence ! = null ) -> var sub _ query _ sources _ requiring _ materialization = </%> <%> <+> requires _ materialization _ expression _ visitor . find _ query _ sources _ requiring _ materialization ( sub _ query _ inner _ sequence . query _ model ) ; foreach ( var sub _ query _ source in sub _ query _ sources _ requiring _ materialization ) </%> <@> var sub _ query _ sources _ requiring _ materialization = requires _ materialization _ expression _ visitor _ factory . create ( query _ model _ visitor ) . find _ query _ sources _ requiring _ materialization ( sub _ query _ inner _ sequence . query _ model ) ; foreach ( var sub _ query _ source in sub _ query _ sources _ requiring _ materialization ) { query _ sources _ requiring _ materialization . add ( sub _ query _ source ) ; } </@> <%> <+> } } private class requires _ materialization _ for _ group _ join _ expression _ visitor : expression _ visitor _ base { public query _ model _ visitor _ base query _ model _ visitor { get ; set ; } protected override expression visit _ sub _ query ( sub _ query _ expression expression ) { query _ model _ visitor . visit _ query _ model ( expression . query _ model ) ; </%>
 <@> convention _ set _ builders = convention _ set _ builders ;  convention _ set _ builder = new composite _ convention _ set _ builder ( ( i _ read _ only _ list < i _ convention _ set _ builder > ) convention _ set _ builders ) ; </@> <%> <-> obsolete _ use _ convention _ set _ builders </%>
<%> <*> private static readonly -> protected virtual </%> <%> <+> > </%> <%> <+> protected abstract adventure _ works _ context _ base create _ context ( ) ; </%> <@> context = adventure _ works _ fixture . create _ context ( ) ; </@> 
<%> <*> private static readonly -> protected virtual </%> <%> <+> > </%> <%> <+> protected abstract adventure _ works _ context _ base create _ context ( ) ; </%> <@> context = adventure _ works _ fixture . create _ context ( ) ; </@> 
 <@> using system ; using microsoft _ entity _ framework _ core _ benchmarks _ models _ adventure _ works ; namespace microsoft _ entity _ framework _ core _ benchmarks _ ef _ core _ models _ adventure _ works </@> <%> <+> abstract </%> <%> <+> _ base </%> <%> <-> private readonly string connection _ string ; private readonly i _ service _ provider service _ provider ; public adventure _ works _ context ( string connection _ string ) { connection _ string = connection _ string ; } public adventure _ works _ context ( string connection _ string , i _ service _ provider service _ provider ) </%>
 <@> using system ; using microsoft _ entity _ framework _ core _ benchmarks _ models _ adventure _ works ; namespace microsoft _ entity _ framework _ core _ benchmarks _ ef _ core _ models _ adventure _ works </@> <%> <+> abstract </%> <%> <+> _ base </%> <%> <-> private readonly string connection _ string ; private readonly i _ service _ provider service _ provider ; public adventure _ works _ context ( string connection _ string ) { connection _ string = connection _ string ; } public adventure _ works _ context ( string connection _ string , i _ service _ provider service _ provider ) </%>
<%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ t . gear . weapons ] </@> <%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%>
<%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ t . gear . weapons ] </@> <%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <@> from [ weapon ] as [ g . weapons ] </@> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> cog _ tag -> tags </%> <@> from [ weapon ] as [ g . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> cog _ tag -> tags </%>
<%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ g . weapons ] </@> <%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> cog _ tag -> tags </%> <@> from [ weapon ] as [ o . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> cog _ tag -> tags </%>
<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ g . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ g . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ g . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ g . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ g . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>
<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> <@> from [ weapon ] as [ . weapons ] </@> <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>
 <@> protected readonly lazy _ metadata _ ref < t _ annotations > lazy _ annotations = new lazy _ metadata _ ref < t _ annotations > ( ) ; </@> <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%> <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%>
 <@> protected readonly lazy _ metadata _ ref < t _ annotations > lazy _ annotations = new lazy _ metadata _ ref < t _ annotations > ( ) ; protected readonly lazy _ metadata _ ref < t _ entities > lazy _ entities = new lazy _ metadata _ ref < t _ entities > ( ) ; </@> <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%> <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%>
 <@> protected readonly lazy _ metadata _ ref < t _ properties > lazy _ properties = new lazy _ metadata _ ref < t _ properties > ( ) ; protected readonly lazy _ metadata _ ref < t _ annotations > lazy _ annotations = new lazy _ metadata _ ref < t _ annotations > ( ) ; </@> <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%> <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%>
<%> <+> private readonly db _ context _ options options ; </%> <%> <*> public override northwind _ context create _ context ( query _ tracking _ behavior query _ tracking _ behavior = query _ tracking _ behavior . track _ all , bool enable _ filters = false ) -> public northwind _ query _ in _ memory _ fixture ( ) </%> <%> <*> if ( ! is _ seeded ) -> options = build _ options ( ) ; </%> <%> <+> using ( var context = create _ context ( ) ) </%> <@> using ( var context = base . create _ context ( query _ tracking _ behavior , enable _ filters ) ) { northwind _ data . seed ( context ) ; } is _ seeded = true ; </@> <%> <-> return base . create _ context ( query _ tracking _ behavior , enable _ filters ) ; </%> <%> <-> private bool is _ seeded { get ; set ; } </%>
 <@> : i _ key _ convention , i _ primary _ key _ convention , i _ foreign _ key _ convention , i _ foreign _ key _ removed _ convention , i _ model _ convention </@> <%> <-> public virtual internal _ key _ builder apply ( internal _ key _ builder key _ builder ) { set _ value _ generation ( key _ builder . metadata . properties ) ; return key _ builder ; } </%>
 <@> var property _ type = property . clr _ type . unwrap _ nullable _ type ( ) ; if ( property _ type . is _ integer ( ) | | property _ type = = typeof ( guid ) ) { return property ; } </@> <%> <-> private void set _ identity ( i _ read _ only _ list < property > properties , entity _ type entity _ type ) { var candidate _ identity _ property = find _ value _ generated _ on _ add _ property ( properties , entity _ type ) ; if ( candidate _ identity _ property ! = null ) { var property _ builder = candidate _ identity _ property . builder ; </%>
 <@> private readonly lazy _ ref < entity _ queryable < t _ entity > > entity _ queryable ; </@> <%> <+> } private </%> <%> <+> < t _ entity > entity _ queryable </%> <%> <*> new lazy -> > non </%> <%> <*> ref < entity -> capturing _ lazy </%> <%> <*> queryable < t -> initializer . ensure </%> <%> <*> entity > > -> initialized </%> <%> <*> ( ) = > new -> ref </%> <%> <*> < t _ entity > ( context . query _ provider ) ) ; -> , </%> <%> <+> this , </%>
<%> <*> var tables = database _ model . tables ; visit _ tables ( model _ builder , tables ) ; -> check . not _ null ( model _ builder , nameof ( model _ builder ) ) ; </%> <%> <+> check . not _ null ( database _ model , nameof ( database _ model ) ) ; visit _ tables ( model _ builder , database _ model . tables ) ; visit _ foreign _ keys ( model _ builder , database _ model . tables . select _ many ( table = > table . foreign _ keys ) . to _ list ( ) ) ; </%> <@> foreach ( var table in database _ model . tables ) { visit _ foreign _ keys ( model _ builder , table ) ; } visit _ navigation _ properties ( model _ builder . model ) ; </@> <%> <+> check . not _ null ( model _ builder , nameof ( model _ builder ) ) ; check . not _ null ( tables , nameof ( tables ) ) ; </%> <%> <-> model _ builder . entity ( get _ entity _ type _ name ( table ) , builder = > { </%>
<%> <+> if ( key _ builder = = null ) { var error _ message = relational _ design _ strings . unable _ to _ generate _ entity _ type ( table . display _ name ) ; logger . log _ warning ( error _ message ) ; var model = model _ builder . model ; model . remove _ entity _ type ( entity _ type _ name ) ; model . scaffolding ( ) . entity _ type _ errors . add ( entity _ type _ name , error _ message ) ; return null ; } </%> <%> <+> check . not _ null ( builder , nameof ( builder ) ) ; check . not _ null ( columns , nameof ( columns ) ) ; </%> <@> try { visit _ column ( builder , column ) ; } catch ( not _ supported _ exception ) { visit _ unmappable _ column ( column ) ; } </@> <%> <+> check . not _ null ( builder , nameof ( builder ) ) ; check . not _ null ( column , nameof ( column ) ) ; </%>
<%> <*> other _ entity -> ! foreign </%> <%> <*> type -> key </%> <%> <*> scaffolding ( -> is _ unique </%> <%> <-> . entity _ type _ error = = null ) </%> <@> if ( ! foreign _ key . is _ unique ) { entity _ configuration . navigation _ property _ initializer _ configurations . add ( configuration _ factory . create _ navigation _ property _ initializer _ configuration ( navigation _ property _ name , other _ entity _ type . name ) ) ; } </@> 
<%> <-> write ( </%> <%> <+> STR ) ; write ( </%> <%> <*> ) ; -> ) ; </%> <@> write _ literal ( STR ) ; write (  ex . get _ type ( ) . name   ) ; </@> <%> <*> write ( -> write ( </%> <%> <*> ) ; -> ) ; </%> <%> <+> ! </%> <%> <*> options -> database _ exists & & ! model </%> <%> <*> show -> pending </%> <%> <*> migration _ status -> migrations . any ( </%> <%> <+> ) </%>
<%> <-> var index = try _ get _ index ( properties ) ; </%> <%> <*> index ! = null -> indexes . value . contains _ key ( properties </%> <%> <+> ) </%> <%> <-> index . </%> <%> <+> var </%> <@> throw new argument _ exception ( strings . index _ properties _ wrong _ entity ( property . format ( properties ) , name ) ) ; } indexes . value . add ( index ) ; </@> 
 <@> sequence _ name = > new sql _ server _ sequence _ value _ generator _ state ( sequence , get _ pool _ size ( property ) ) ) ; </@> <%> <-> public virtual int get _ pool _ size ( [ not _ null ] i _ property property ) { check . not _ null ( property , nameof ( property ) ) ; return property . sql _ server ( ) . hi _ lo _ sequence _ pool _ size ? ? property . declaring _ entity _ type . model . sql _ server ( ) . hi _ lo _ sequence _ pool _ size ? ? 1 ; } </%>
<%> <+> : event _ id _ test _ base </%> <@> in _ memory _ test _ helpers . instance . test _ event _ logging ( </@> 
 <@> candidate _ property = member _ info . name ; </@> <%> <+> . name </%>
 <@> new relational _ convention _ set _ builder _ dependencies ( sql _ server _ type _ mapper , null , null ) , new sql _ server _ sql _ generation _ helper ( new relational _ sql _ generation _ helper _ dependencies ( ) ) ) </@> <%> <*> new core _ convention _ set _ builder _ dependencies ( sql _ server _ type _ mapper , new constructor _ binding _ factory ( ) ) ) -> new core _ convention _ set _ builder _ dependencies ( sql _ server _ type _ mapper , null , null ) ) </%>
<%> <*> { typeof ( i _ read _ only _ collection < i _ property _ base > ) , ( ) = > new [ ] { property } } , -> { typeof ( i _ read _ only _ list < i _ property _ base > ) , ( ) = > new [ ] { property } } , </%> <%> <+> { typeof ( i _ enumerable < tuple < member _ info , type > > ) , ( ) = > new [ ] { new tuple < member _ info , type > ( property _ info , typeof ( object ) ) } } , { typeof ( member _ info ) , ( ) = > property _ info } , </%> <%> <*> { typeof ( i _ read _ only _ list < system . exception > ) , ( ) = > new [ ] { new exception ( ) } } , { typeof ( i _ property ) , ( ) = > property } -> { typeof ( i _ read _ only _ list < exception > ) , ( ) = > new [ ] { new exception ( ) } } , </%> <%> <+> { typeof ( i _ property ) , ( ) = > property } , { typeof ( i _ navigation ) , ( ) = > navigation } , { typeof ( i _ foreign _ key ) , ( ) = > foreign _ key } </%> <@> in _ memory _ test _ helpers . instance . test _ event _ logging ( typeof ( core _ event _ id ) , typeof ( core _ logger _ extensions ) , fake _ factories ) ; </@> 
 <@> new relational _ convention _ set _ builder _ dependencies ( relational _ type _ mapper , null , null ) ) </@> <%> <*> new core _ convention _ set _ builder _ dependencies ( relational _ type _ mapper , new constructor _ binding _ factory ( ) ) ) -> new core _ convention _ set _ builder _ dependencies ( relational _ type _ mapper , null , null ) ) </%>
<%> <-> graph _ factory = graph _ factory ; </%> <%> <-> var modification _ command _ graph = graph _ factory . create < modification _ command > ( ) ; </%> <@> populate _ modification _ command _ graph ( modification _ command _ graph , commands ) ; var sorted _ command _ sets = modification _ command _ graph . topological _ sort ( ) ; </@> 
<%> <*> report -> log </%> <@> connection , c = > relational _ strings . using _ connection ( c . database , c . data _ source ) ) ; </@> 
<%> <*> report -> log </%> <@> connection , c = > relational _ strings . using _ connection ( c . database , c . data _ source ) ) ; </@> 
<%> <*> report -> log </%> <@> migration , m = > relational _ strings . generating _ down ( m . get _ id ( ) ) ) ; </@> 
<%> <*> report -> log </%> <@> migration , m = > relational _ strings . generating _ up ( m . get _ id ( ) ) ) ; </@> 
<%> <+> i _ enumerable < string > applied _ migration _ entries , string target _ migration , out i _ read _ only _ list < migration > migrations _ to _ apply , out i _ read _ only _ list < migration > migrations _ to _ revert ) { </%> <@> e = > string . equals ( e . migration _ id , migration . key , string _ comparison . ordinal _ ignore _ case ) ) ) </@> <%> <-> i _ read _ only _ list < migration > migrations _ to _ apply ; i _ read _ only _ list < migration > migrations _ to _ revert ; </%>
 <@> builder . append ( command . command _ text ) ; } builder . append _ line ( sql . batch _ separator ) ; builder . append _ line ( ) ; </@> <%> <-> var operations = new list < migration _ operation > ( migration . up _ operations ) ; operations . add ( </%>
<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ null _ semantics _ model ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> public class null _ semantics _ query _ sqlite _ fixture : null _ semantics _ query _ relational _ fixture < sqlite _ test _ store > </@> <%> <-> public static readonly string database _ name = STR ; private readonly i _ service _ provider service _ provider ; private readonly string connection _ string = sqlite _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public null _ semantics _ query _ sqlite _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>
<%> <-> _ models _ null _ semantics </%> <%> <*> model -> utilities </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public class null _ semantics _ query _ sql _ server _ fixture : null _ semantics _ query _ relational _ fixture < sql _ server _ test _ store > </@> <%> <-> public static readonly string database _ name = STR ; private readonly db _ context _ options options ; private readonly string connection _ string = sql _ server _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public null _ semantics _ query _ sql _ server _ fixture ( ) { var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>
<%> <-> using system ; </%> <%> <-> _ models _ updates </%> <%> <*> model -> utilities </%> <%> <+> _ entity </%> <%> <*> extensions -> framework </%> <%> <*> dependency -> core </%> <%> <*> injection -> utilities </%> <@> public class updates _ in _ memory _ fixture : updates _ fixture _ base < in _ memory _ test _ store > </@> <%> <-> private readonly i _ service _ provider service _ provider ; private readonly db _ context _ options _ builder options _ builder ; public updates _ in _ memory _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ in _ memory _ database ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . build _ service _ provider ( validate _ scopes : true ) ; options _ builder = new db _ context _ options _ builder ( ) </%>
<%> <-> using system ; </%> <%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; </%> <@> public class updates _ sql _ server _ fixture : updates _ fixture _ base < sql _ server _ test _ store > </@> <%> <*> private readonly -> protected override </%> <%> <*> service -> test </%> <%> <*> provider service -> store </%> <%> <*> provider ; public updates _ sql -> factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; protected override void on </%> <%> <*> server -> model </%> <%> <*> fixture -> creating </%> <%> <*> ) -> model _ builder model _ builder , db _ context context ) </%> <%> <-> service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . build _ service _ provider ( validate _ scopes : true ) ; } protected virtual string database _ name = > STR ; </%>
<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ updates _ model ; using microsoft _ extensions _ dependency _ injection ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> public class updates _ sqlite _ fixture : updates _ fixture _ base < sqlite _ test _ store > </@> <%> <-> public static readonly string database _ name = STR ; private readonly i _ service _ provider service _ provider ; private readonly string connection _ string = sqlite _ test _ store . create _ connection _ string ( database _ name ) ; public updates _ sqlite _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . build _ service _ provider ( validate _ scopes : true ) ; </%>
 <@> using ( var context = new early _ learning _ center ( test _ helpers . create _ service _ provider ( ) ) ) </@> <%> <+> public void can _ use _ add _ to _ change _ entity _ state ( ) { change _ state _ with _ method ( ( c , e ) = > c . categories . add ( e ) , entity _ state . unknown , entity _ state . added ) ; change _ state _ with _ method ( ( c , e ) = > c . categories . add ( e ) , entity _ state . unchanged , entity _ state . added ) ; </%>
<%> <*> select outer . name ) ; -> select outer . name , </%> <%> <+> ( s , s ) = > from x in ( from in s join in s on . id equals . level _ optional _ id into grouping from in grouping . default _ if _ empty ( ) orderby . id select client _ level ( ) ) . take ( 2 ) join outer in s on x . id equals outer . level _ optional _ id into grouping _ outer from outer in grouping _ outer . default _ if _ empty ( ) select maybe ( outer , ( ) = > outer . name ) ) ; </%> <@> conditional _ fact _ skip </@> 
 <@> public virtual dictionary < string , list < fluent _ api _ configuration > > get _ fluent _ api _ configurations ( bool use _ fluent _ api _ only ) </@> <%> <*> var fluent _ api _ configs _ dictionary = new dictionary < string , list < fluent _ api _ configuration > > ( ) ; var fluent _ api _ configs = use _ fluent _ api _ only -> return use _ fluent _ api _ only </%> <%> <-> : fluent _ api _ configurations . where ( fc = > ! fc . has _ attribute _ equivalent ) ; foreach ( var fluent _ api _ configuration in fluent _ api _ configs ) { var for = fluent _ api _ configuration . for ? ? string . empty ; list < fluent _ api _ configuration > list _ of _ fluent _ api _ method _ bodies ; </%>
 <@> new [ ] { inner _ item _ parameter } ) ) </@> <%> <-> new [ ] { </%> <%> <-> } </%>
 <@> return new typed _ annotation ( ( string ) annotations . get _ annotation ( relational _ annotation _ names . default _ value _ type ) , ( string ) annotations . get _ annotation ( relational _ annotation _ names . default _ value ) ) . value ; </@> <%> <*> var typed _ annotation = new typed _ annotation ( value ) ; return annotations . set _ annotation ( relational _ annotation _ names . default _ value _ type , typed _ annotation . type _ string ) & & annotations . set _ annotation ( relational _ annotation _ names . default _ value , typed _ annotation . value _ string ) ; -> if ( ( value ! = null ) </%> <%> <+> & & ( property . clr _ type . unwrap _ nullable _ type ( ) ! = value . get _ type ( ) ) ) </%>
<%> <-> ( </%> <%> <*> = = -> . equals ( </%> <@> & & ( ( ( method _ call _ expression . arguments [ 0 ] as constant _ expression ) ? . value as array ) ? . length = = 0 ) ) </@> 
<%> <+> = </%> <%> <*> if ( new _ entity _ expression is member _ init _ expression member _ init _ expression ) -> if ( new _ entity _ expression is member _ init _ expression member _ init _ expression </%> <%> <+> & & member _ init _ expression . bindings . single _ or _ default ( mb = > mb . member . name = = property _ name ) is member _ assignment member _ assignment ) </%> <@> if ( member _ init _ expression . bindings . single _ or _ default ( mb = > mb . member . name = = property _ name ) is member _ assignment member _ assignment ) { return member _ assignment . expression ; } </@> 
 <@> if ( projection _ mapping ! = null ) { foreach ( var kvp in projection _ mapping ) { projection _ mapping [ kvp . key ] = kvp . value ; } </@> <%> <*> is _ distinct = distinct -> is _ distinct = distinct , </%> <%> <+> set _ operation _ type = set _ operation _ type </%>
<%> <*> return -> return ( ( i _ db _ context _ services ) </%> <@> new db _ context _ options ( ) . use _ model ( model ) . use _ in _ memory _ store ( ) ) . configuration . scoped _ service _ provider ; </@> 
<%> <*> private -> public </%> <%> <-> func < </%> <%> <-> > </%> <@> logger . log ( log _ level . information , ( int ) event _ id , state ( ) , null , ( s , ) = > formatter ( s ) ) ; </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> var columns = db _ model . tables . single ( ) . columns . order _ by ( c = > c . ordinal ) ; </@> <%> <-> _ name </%>
<%> <*> new column _ model { name = STR , store _ type = STR , primary _ key _ ordinal = 1 } , new column _ model { name = STR , store _ type = STR } , new column _ model { name = STR , store _ type = STR } -> , </%> <%> <+> new database _ column { name = STR , store _ type = STR } , new database _ column { name = STR , store _ type = STR } } , primary _ key = new database _ primary _ key { columns = { } </%> <%> <*> index -> database </%> <%> <*> model -> index </%> <@> index _ columns = { new index _ column _ model { column = table . columns . element _ at ( 0 ) } } , </@> <%> <*> index -> database </%> <%> <*> model -> index </%> <%> <-> index _ </%> <%> <-> new index _ column _ model { column = </%> <%> <-> } </%>
<%> <*> index -> database </%> <%> <*> model -> index </%> <%> <-> index _ </%> <%> <-> new index _ column _ model { column = </%> <%> <-> } </%> <%> <*> index -> database </%> <%> <*> model -> index </%> <@> index _ columns = { new index _ column _ model { column = table . columns . element _ at ( 1 ) } } , </@> <%> <*> index -> database </%> <%> <*> model -> index </%> <%> <-> index _ </%> <%> <-> new index _ column _ model { column = </%> <%> <-> } </%> <%> <-> new index _ column _ model { column = </%> <%> <-> } </%>
<%> <*> new column _ model { name = STR , store _ type = STR , is _ nullable = true } } -> new database _ column { name = STR , store _ type = STR , is _ nullable = true } </%> <%> <+> } , primary _ key = id _ primary _ key </%> <%> <*> index -> database </%> <%> <*> model -> index </%> <@> index _ columns = { new index _ column _ model { column = table . columns . element _ at ( 1 ) } } , </@> <%> <+> database _ </%> <%> <-> _ model </%> <%> <-> columns = { new foreign _ key _ column _ model </%>
 <@> indexes . order _ by ( i = > i . name ) , </@> <%> <+> assert . equal ( new list < string > { STR , STR } , index . columns . select ( ic = > ic . name ) . to _ list ( ) ) ; </%> <%> <*> assert . equal ( new list < string > { STR , STR } , index . index _ columns . select ( ic = > ic . column . name ) . to _ list ( ) -> } </%> <%> <-> assert . equal ( new list < int > { 0 , 1 </%> <%> <*> , index . index _ columns . select ( ic = > ic . ordinal ) . to _ list ( ) ) ; } , pk -> fact public void it </%> <%> <*> index = > -> reads _ primary _ key ( ) </%>
 <@> var columns = db _ model . tables . single ( ) . columns . order _ by ( c = > c . ordinal ) ; </@> <%> <-> assert . equal ( 1 , id . primary _ key _ ordinal ) ; </%> <%> <-> assert . equal ( 0 , id . ordinal ) ; </%>
<%> <*> if ( foreign _ key _ expression = = null ) { return new one _ to _ one _ builder ( inverting ? builder . foreign _ key ( new property _ info [ 0 ] ) : builder ) ; } return new one _ to _ one _ builder ( builder . foreign _ key ( foreign _ key _ expression . get _ property _ access _ list ( ) ) ) ; -> return new one _ to _ one _ builder ( builder . foreign _ key ( foreign _ key _ expression . get _ property _ access _ list ( ) ) ) ; </%> <%> <*> can _ be -> not </%> <%> <-> = null </%> <%> <+> check . not _ null ( key _ expression , STR ) ; </%> <@> return new one _ to _ one _ builder ( builder . referenced _ key ( key _ expression ! = null ? key _ expression . get _ property _ access _ list ( ) : new property _ info [ 0 ] ) ) ; </@> 
 <@> assert . null ( model . remove _ entity _ type ( new entity _ type ( typeof ( customer ) , model ) ) ) ; </@> <%> <+> get _ </%> <%> <+> ( ) </%> <%> <+> _ type . clr </%> <%> <+> _ type . clr </%>
<%> <+> get _ </%> <%> <+> ( ) </%> <%> <+> _ type . clr </%> <%> <+> _ type . clr </%> <@> assert . null ( model . remove _ entity _ type ( new entity _ type ( typeof ( customer ) . full _ name , model ) ) ) ; </@> <%> <+> get _ </%> <%> <+> ( ) </%> <%> <+> . name </%> <%> <+> . name </%>
<%> <+> . name </%> <@> assert . null ( model . remove _ entity _ type ( new entity _ type ( typeof ( customer ) . full _ name , model ) ) ) ; </@> <%> <-> entity _ type ( new </%> <%> <-> ) , model </%>
<%> <-> entity _ type ( new </%> <%> <-> , model ) </%> <@> assert . null ( model . remove _ entity _ type ( new entity _ type ( typeof ( customer ) , model ) ) ) ; </@> 
<%> <-> , old _ value , new _ value </%> <%> <*> , object old _ value , object new _ value ) -> ) </%> <@> var navigations = model . get _ navigations ( foreign _ key ) . to _ list ( ) ; </@> 
 <@> assert . null ( entity _ type . remove _ key ( new key ( new [ ] { id _ property } ) ) ) ; </@> <%> <+> . properties </%> <%> <+> . properties </%> <%> <-> key ( new </%> <%> <-> ) </%>
<%> <-> key ( new </%> <%> <-> ) </%> <%> <+> . properties </%> <%> <+> . properties </%> <@> assert . same ( key , entity _ type . remove _ key ( new key ( new [ ] { id _ property } ) ) ) ; </@> 
 <@> principal _ entity _ type _ builder = principal _ entity _ type _ builder ? ? ( old _ relationship _ inverted </@> <%> <*> dependent _ entity _ type _ builder = dependent _ entity _ type _ builder ? ? ( old _ relationship _ inverted -> dependent _ entity _ type _ builder ? ? = ( old _ relationship _ inverted </%>
<%> <*> principal _ entity _ type _ builder = principal _ entity _ type _ builder ? ? ( old _ relationship _ inverted -> principal _ entity _ type _ builder ? ? = ( old _ relationship _ inverted </%> <@> dependent _ entity _ type _ builder = dependent _ entity _ type _ builder ? ? ( old _ relationship _ inverted </@> 
 <@> dependent _ properties = dependent _ properties ? ? ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </@> <%> <*> principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> principal _ properties ? ? = ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <-> is _ unique = is _ unique ? ? </%>
<%> <*> dependent _ properties = dependent _ properties ? ? ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> dependent _ properties ? ? = ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <@> principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </@> <%> <*> is _ unique = is _ unique ? ? ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ unique ? ? = ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <-> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%>
<%> <*> dependent _ properties = dependent _ properties ? ? ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> dependent _ properties ? ? = ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> principal _ properties ? ? = ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <@> is _ unique = is _ unique ? ? ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </@> <%> <*> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ required ? ? = ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ ownership ? ? = ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%>
<%> <*> principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> principal _ properties ? ? = ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ unique = is _ unique ? ? ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ unique ? ? = ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <@> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </@> <%> <*> is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ ownership ? ? = ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <-> delete _ behavior = delete _ behavior ? ? ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%>
<%> <*> principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> principal _ properties ? ? = ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ unique = is _ unique ? ? ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ unique ? ? = ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ required ? ? = ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <@> is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </@> <%> <*> delete _ behavior = delete _ behavior ? ? ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> delete _ behavior ? ? = ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <-> principal _ end _ configuration _ source = principal _ end _ configuration _ source ? ? ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . metadata </%>
<%> <*> is _ unique = is _ unique ? ? ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ unique ? ? = ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ required ? ? = ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ ownership ? ? = ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <@> delete _ behavior = delete _ behavior ? ? ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </@> <%> <*> principal _ end _ configuration _ source = principal _ end _ configuration _ source ? ? ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . metadata -> principal _ end _ configuration _ source ? ? = ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . metadata </%>
<%> <*> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ required ? ? = ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ ownership ? ? = ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> delete _ behavior = delete _ behavior ? ? ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> delete _ behavior ? ? = ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <@> principal _ end _ configuration _ source = principal _ end _ configuration _ source ? ? ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . metadata </@> 
 <@> suppliers = suppliers ? ? new observable _ collection < i _ supplier > ( ) ; </@> <%> <-> reviews = </%> <%> <+> = </%> <%> <-> photos = </%> <%> <+> = </%> <%> <-> barcodes = </%> <%> <+> = </%>
<%> <-> suppliers = </%> <%> <+> = </%> <@> reviews = reviews ? ? new observable _ collection < i _ product _ review > ( ) ; photos = photos ? ? new observable _ collection < i _ product _ photo > ( ) ; barcodes = barcodes ? ? new observable _ collection < i _ barcode > ( ) ; </@> 
 <@> suppliers = suppliers ? ? new observable _ collection < i _ supplier > ( ) ; </@> <%> <-> reviews = </%> <%> <+> = </%> <%> <-> photos = </%> <%> <+> = </%> <%> <-> barcodes = </%> <%> <+> = </%>
<%> <-> suppliers = </%> <%> <+> = </%> <@> reviews = reviews ? ? new observable _ collection < i _ product _ review > ( ) ; photos = photos ? ? new observable _ collection < i _ product _ photo > ( ) ; barcodes = barcodes ? ? new observable _ collection < i _ barcode > ( ) ; </@> 
 <@> fact _ skip </@> <%> <-> _ skip </%>
<%> <-> _ skip </%> <@> fact _ skip </@> <%> <+> _ issue </%>
 <@> class _ name = c _ sharp _ utilities . instance . generate _ c _ sharp _ identifier ( builder . initial _ catalog , null ) ; if ( class _ name ! = null ) </@> <%> <*> class -> c </%> <%> <*> name ; -> sharp _ utilities . instance . generate _ c _ sharp _ identifier ( builder . initial _ catalog , null ) ; </%>
<%> <+> : i _ migrations _ code _ generator </%> <%> <+> public migrations _ code _ generator ( [ not _ null ] migrations _ code _ generator _ dependencies dependencies ) { check . not _ null ( dependencies , nameof ( dependencies ) ) ; dependencies = dependencies ; } </%> <%> <+> protected virtual migrations _ code _ generator _ dependencies dependencies { get ; } </%> <@> not _ null string migration _ namespace , not _ null string migration _ name , not _ null i _ read _ only _ list < migration _ operation > up _ operations , not _ null i _ read _ only _ list < migration _ operation > down _ operations ) ; </@> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%>
 <@> . where ( mi = > mi . get _ parameters ( ) . length = = 2 ) . where ( mi = > mi . get _ parameters ( ) [ 1 ] . parameter _ type = = typeof ( cancellation _ token ) ) </@> <%> <+> _ async </%> <%> <+> } public virtual expression adjust _ sequence _ type ( expression expression ) { </%>
 <@> = > test _ environment . is _ sql _ azure ? new test _ sql _ server _ retrying _ execution _ strategy ( ) . execute ( </@> <%> <-> state = > execute _ command ( state . connection , state . execute , state . sql , state . use _ transaction , state . parameters ) ) : execute _ command ( connection , execute , sql , use _ transaction , parameters ) ; </%>
<%> <+> list _ logger _ factory . clear ( ) ; </%> <@> new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) , </@> 
<%> <+> list _ logger _ factory . clear ( ) ; </%> <@> new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) , </@> <%> <-> < ( log </%> <%> <*> level level , event -> logger _ factory list </%> <%> <*> id id , string message ) > log -> logger _ factory </%> <%> <*> < -> _ logger _ factory </%> <%> <*> log _ level , event -> l = > l = = db </%> <%> <*> id , string ) > ( -> logger _ category . model . name </%>
<%> <*> < -> _ logger _ factory </%> <%> <*> log _ level , event -> l = > l = = db </%> <%> <*> id , string ) > ( -> logger _ category . model . name </%> <@> new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) , </@> 
<%> <-> < ( log </%> <%> <*> level level , event -> logger _ factory list </%> <%> <*> id id , string message ) > log -> logger _ factory </%> <%> <*> < -> _ logger _ factory </%> <%> <*> log _ level , event -> l = > l = = db </%> <%> <*> id , string ) > ( -> logger _ category . model . name </%> <%> <+> list _ logger _ factory . clear ( ) ; </%> <@> new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) , </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> <%> <-> test _ sql _ logger _ factory . reset ( ) ; </%>
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <*> public void log < t _ state > ( log _ level log _ level , event _ id event _ id , t _ state state , exception exception , func < t _ state , exception , string > formatter ) -> void i _ logger . log < t _ state > ( </%> <%> <+> log _ level log _ level , event _ id event _ id , t _ state state , exception exception , func < t _ state , exception , string > formatter ) </%> <%> <*> if -> lock </%> <%> <*> format ! = null -> sync </%> <%> <*> var sql _ logger _ data = sql _ logger _ data ; lock ( sql _ logger _ data ) -> if ( format ! = null ) </%> <%> <-> sql _ logger _ data . </%> <@> sql _ logger _ data . cancellation _ token _ source . cancel ( ) ; sql _ logger _ data . cancellation _ token _ source = null ; </@> <%> <*> eol -> new _ line </%>
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
 <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> <%> <*> public -> protected </%>
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) </@> 
<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> <@> . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) . build _ service _ provider ( ) ; </@> 
<%> <*> inner join -> where exists </%> <%> <*> distinct [ c ] . [ customer _ id ] -> 1 </%> <%> <*> ) as [ ] on -> where </%> <%> <+> c </%> <%> <+> ) </%> <%> <+> o </%> <@> select distinct [ ] . [ customer _ id ] , [ o ] . [ order _ id ] </@> <%> <*> inner join -> where exists </%> <%> <*> distinct [ c ] . [ customer _ id ] -> 1 </%> <%> <*> ) as [ ] on -> where </%> <%> <+> c </%> <%> <+> ) </%>
 <@> conditional _ fact _ skip </@> <%> <*> true -> false </%>
 <@> conditional _ theory _ skip </@> <%> <*> = = -> . equals ( </%>
<%> <*> { var property = property _ base as i _ property ; return ( property = = null ) | | ! property . is _ shadow _ property -> = > ! property _ base . is _ shadow _ property </%> <%> <*> : shadow _ values [ property . get _ shadow _ index ( ) ] ; } -> : shadow _ values [ property _ base . get _ shadow _ index ( ) ] ; </%> <@> var property = property _ base as i _ property ; if ( ( property = = null ) | | ! property . is _ shadow _ property ) </@> <%> <+> _ base </%>
 <@> predicate = bind _ operand ( expression ) ; return expression ; </@> <%> <*> predicate = null ; return expression ; -> return null ; </%> <%> <-> predicate = null ; </%>
 <@> protected test _ model _ builder create _ model _ builder ( ) = > create _ model _ builder ( new model ( ) ) ; protected virtual test _ model _ builder create _ model _ builder ( model model ) = > create _ test _ model _ builder ( test _ helpers . instance . create _ convention _ builder ( model ) ) ; </@> <%> <-> new model ( ) </%>
<%> <*> protected test _ model _ builder create _ model _ builder ( ) = > create _ model _ builder ( new model ( ) ) ; protected virtual test _ model _ builder create _ model _ builder ( model model ) = > create _ test _ model _ builder ( test _ helpers . instance . create _ convention _ builder ( model ) ) ; -> protected virtual test _ model _ builder create _ model _ builder ( ) </%> <%> <+> = > create _ test _ model _ builder ( test _ helpers . instance . create _ convention _ builder ( ) ) ; </%> <@> var builder = create _ model _ builder ( new model ( ) ) ; </@> 
 <@> var id _ property = ( i _ property ) entity _ type _ extensions . find _ property ( ( i _ entity _ type ) entity , customer . id _ property ) ; </@> <%> <+> _ builder </%> <%> <*> new -> create _ </%> <%> <+> _ builder </%> <%> <-> _ builder </%> <%> <-> create _ </%> <%> <*> ( -> . </%> <%> <-> ) </%>
<%> <+> _ builder </%> <%> <*> new -> create _ </%> <%> <+> _ builder </%> <%> <-> _ builder </%> <%> <-> create _ </%> <%> <*> ( -> . </%> <%> <-> ) </%> <@> var model _ builder = create _ model _ builder ( new model ( ) ) ; </@> 
<%> <-> model model = null </%> <@> return new model _ builder ( convention _ set , model ? ? new model ( ) ) ; </@> 
<%> <+> using microsoft _ entity _ framework _ core _ metadata ; </%> <@> namespace microsoft _ entity _ framework _ core _ metadata _ tests </@> 
<%> <+> using microsoft _ entity _ framework _ core _ metadata ; using microsoft _ entity _ framework _ core _ metadata _ conventions ; </%> <@> namespace microsoft _ entity _ framework _ core _ metadata _ conventions _ tests </@> 
 <@> using microsoft _ entity _ framework _ core _ metadata _ conventions _ tests ; </@> <%> <+> _ tests </%> <%> <-> _ tests </%>
<%> <*> metadata -> tests </%> <%> <*> conventions -> metadata </%> <%> <*> tests -> conventions </%> <@> namespace microsoft _ entity _ framework _ core _ sql _ server _ metadata _ conventions _ tests </@> 
<%> <-> , bool unicode = true </%> <@> ? ( unicode ? nvarcharmax : varcharmax ) </@> <%> <-> , unicode </%> <%> <-> , bool unicode = true </%> <%> <-> ? ( unicode </%>
 <@> if ( entity _ type ? . query _ filter ! = null ) </@> <%> <+> expression new _ expression = constant _ expression ; if ( entity _ type . is _ query _ type ( ) ) { is _ view _ type _ query = true ; var annotation = entity _ type . find _ annotation ( core _ annotation _ names . defining _ query ) ; if ( annotation ! = null ) { var query = ( lambda _ expression ) annotation . value ; var parameterized _ query </%>
<%> <*> var entity _ type = new relational _ entity _ type _ annotations ( key . declaring _ entity _ type , annotations . provider _ prefix ) ; return get _ default _ key _ name ( entity _ type . table _ name , key . is _ primary _ key ( ) , key . properties . select ( p = > p . name ) ) ; -> return get _ default _ key _ name ( </%> <%> <+> get _ annotations ( key . declaring _ entity _ type ) . table _ name , key . is _ primary _ key ( ) , key . properties . select ( p = > p . name ) ) ; </%> <@> builder . append ( primary _ key ? STR : STR ) . append ( table _ name ) ; if ( ! primary _ key ) </@> <%> <+> . append ( default _ primary _ key _ name _ prefix ) </%> <%> <*> . append ( string . join ( STR , property _ names ) ) ; -> . append ( table _ name ) ; </%> <%> <+> } else { builder </%>
<%> <*> public discriminator _ builder ( [ not _ null ] relational _ entity _ type _ builder _ annotations annotations _ builder ) -> public discriminator _ builder ( [ not _ null ] relational _ annotations _ builder annotations _ builder , </%> <%> <+> not _ null func < internal _ entity _ type _ builder , relational _ entity _ type _ builder _ annotations > get _ relational _ entity _ type _ builder _ annotations ) </%> <%> <+> get _ relational _ entity _ type _ builder _ annotations = get _ relational _ entity _ type _ builder _ annotations ; </%> <%> <*> protected virtual relational _ entity _ type _ builder _ annotations annotations _ builder { get ; } -> private func < internal _ entity _ type _ builder , relational _ entity _ type _ builder _ annotations > get _ relational _ entity _ type _ builder _ annotations { get ; } </%> <%> <+> protected virtual relational _ annotations _ builder annotations _ builder { get ; } protected virtual internal _ entity _ type _ builder entity _ type _ builder = > ( internal _ entity _ type _ builder ) annotations _ builder . metadata _ builder ; </%> <@> = > has _ value ( annotations _ builder . entity _ type _ builder , value ) ; </@> <%> <-> annotations _ builder . </%> <%> <-> . annotations </%> <%> <-> annotations _ builder . </%> <%> <-> . annotations </%>
<%> <-> annotations _ builder . </%> <%> <-> . annotations </%> <%> <-> annotations _ builder . </%> <%> <-> . annotations </%> <@> var base _ entity _ type _ builder = annotations _ builder . entity _ type _ builder ; </@> <%> <-> . annotations </%> <%> <-> var annotations _ builder = base _ entity _ type _ builder = = entity _ type _ builder ? annotations _ builder : new relational _ entity _ type _ builder _ annotations ( </%>
 <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new create _ database _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ database _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new create _ sequence _ operation ( new sequence ( STR ) ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ sequence _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ; </@> 
 <@> sql _ server _ migration _ operation _ sql _ generator . generate ( </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ table _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new rename _ table _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new move _ table _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new add _ column _ operation ( STR , column ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ column _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( </@> 
 <@> sql _ server _ migration _ operation _ sql _ generator . generate ( </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ primary _ key _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( </@> 
 <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ foreign _ key _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ index _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; </@> <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>
<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> <@> sql _ server _ migration _ operation _ sql _ generator . generate ( </@> <%> <+> new sql _ server _ type _ mapper ( ) </%>
 <@> using system _ collections _ generic ; using system _ linq ; </@> <%> <*> using microsoft _ data _ entity _ relational _ model ; -> using microsoft _ data _ entity _ change _ tracking ; </%> <%> <+> using microsoft _ data _ entity _ infrastructure ; using microsoft _ data _ entity _ metadata ; </%> <%> <*> using moq ; -> using microsoft _ framework _ dependency _ injection ; </%> <%> <+> using microsoft _ framework _ dependency _ injection _ fallback ; </%>
 <@> migration _ operation _ sql _ generator . generate ( new create _ database _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ; </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( new drop _ database _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ; </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( new drop _ sequence _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ; </@> 
 <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( new drop _ table _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ; </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( new drop _ foreign _ key _ operation ( STR , STR ) , generate _ idempotent _ sql : false ) . sql ) ; </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( new drop _ index _ operation ( STR , STR ) , generate _ idempotent _ sql : false ) . sql ) ; </@> <%> <-> migration _ operation _ sql _ generator . </%>
<%> <-> migration _ operation _ sql _ generator . </%> <@> migration _ operation _ sql _ generator . generate ( </@> <%> <+> new relational _ type _ mapper ( ) </%>
<%> <-> ? </%> <%> <*> . find _ annotation ( -> [ </%> <%> <*> ) -> ] </%> <@> return ( sql _ server _ value _ generation _ strategy ? ) annotation . value ; </@> <%> <-> ? ( sql _ server _ value _ generation _ strategy </%> <%> <-> ) </%> <%> <*> null ; -> sql _ server _ value _ generation _ strategy . none ; </%>
 <@> return tuple . item ; </@> <%> <*> return -> return new tuple < t _ value , configuration _ source > ( </%> <%> <*> ; -> , default _ configuration _ source ) ; </%>
<%> <-> public virtual internal _ relationship _ builder one _ to _ one _ referenced _ key ( not _ null type specified _ principal _ type , not _ null i _ read _ only _ list < property _ info > property _ access _ list , configuration _ source configuration _ source ) { check . not _ null ( specified _ principal _ type , STR ) ; check . not _ null ( property _ access _ list , STR ) ; return reference _ invert _ if _ needed ( resolve _ type ( specified _ principal _ type ) , configuration _ source ) . referenced _ key ( property _ access _ list , configuration _ source ) ; } </%> <%> <*> principal -> metadata . referenced _ entity </%> <@> : invert ( ) . replace _ foreign _ key ( configuration _ source ) ; </@> <%> <-> var inverted = metadata . entity _ type ! = dependent _ type ; </%> <%> <-> ( are _ dependent _ properties _ by _ convention ? new property [ 0 ] : inverted ? metadata . referenced _ properties </%>
<%> <+> using system ; </%> <%> <-> using microsoft _ data _ entity _ storage ; </%> <@> public virtual data _ store _ exception exception { get ; set ; } </@> <%> <+> public type context _ type { get ; internal set ; } </%>
 <@> ( c , ex ) = > { assert . is _ type < db _ update _ exception > ( ex ) ; } , </@> <%> <*> void -> task </%> <%> <+> return </%>
 <@> query _ optimizer . optimize ( query _ compilation _ context . query _ annotations , query _ model ) ; </@> <%> <-> . query _ annotations </%>
<%> <-> . query _ annotations </%> <@> query _ optimizer . optimize ( query _ compilation _ context . query _ annotations , query _ model ) ; </@> 
<%> <*> method _ info correlate _ subquery _ method ; -> var correlate _ subquery _ method = query _ compilation _ context . is _ async _ query </%> <%> <+> ? correlate _ subquery _ async _ method _ info : correlate _ subquery _ method _ info ; </%> <@> correlate _ subquery _ method = correlate _ subquery _ method _ info . make _ generic _ method ( collection _ query _ model . select _ clause . selector . type , navigation . get _ collection _ accessor ( ) . collection _ type ) ; </@> 
<%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <@> connection _ uri = new uri ( test _ environment . default _ connection ) ; </@> <%> <-> _ sql </%> <%> <*> uri -> string </%>
 <@> model _ builder . finalize _ model ( ) ; var model = model _ builder . model ; </@> <%> <+> _ net _ topology </%> <%> <*> nts -> suite </%>
<%> <*> . entity < self _ ref > ( ) . one _ to _ one ( e = > e . self _ ref , e = > e . self _ ref ) ; -> . entity < self _ ref > ( ) . has _ one ( e = > e . self _ ref ) . with _ one ( e = > e . self _ ref ) ; </%> <%> <*> . entity < self _ ref > ( ) . one _ to _ one ( e = > e . self _ ref , e = > e . self _ ref ) ; -> . entity < self _ ref > ( ) . has _ one ( e = > e . self _ ref ) . with _ one ( e = > e . self _ ref ) ; </%> <@> assert . equal ( navigation _ to _ principal . name , new _ fk . get _ navigation _ to _ dependent ( ) . name ) ; assert . equal ( navigation _ to _ dependent . name , new _ fk . get _ navigation _ to _ principal ( ) . name ) ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ query _ expression _ visitors _ internal ; </%> <@> namespace microsoft _ entity _ framework _ core _ tools _ core _ tests _ migrations _ design </@> 
<%> <+> using microsoft _ entity _ framework _ core _ internal ; </%> <@> namespace microsoft _ entity _ framework _ core _ tools _ core _ tests _ migrations _ design </@> 
<%> <-> using microsoft _ entity _ framework _ core _ design ; </%> <@> namespace microsoft _ entity _ framework _ core _ tools _ tests _ design </@> 
<%> <-> using microsoft _ entity _ framework _ core _ design ; </%> <@> namespace microsoft _ entity _ framework _ core _ tools _ tests _ design </@> 
<%> <-> using microsoft _ entity _ framework _ core _ design ; </%> <@> namespace microsoft _ entity _ framework _ core _ tools _ tests _ design </@> 
<%> <*> fact _ skip _ skip _ reason -> conditional _ fact </%> <%> <+> platform _ skip _ condition _ test _ platform _ linux _ test _ platform _ mac </%> <@> fact _ skip _ skip _ reason </@> <%> <*> fixture . install _ tool ( project , output , fixture . test _ project _ root ) ; assert _ command . pass ( new migration _ add _ command ( project , STR , output ) . execute ( $ STR ) ) ; -> assert _ command . pass ( new add _ migration ( project , STR , output ) </%> <%> <+> . execute ( STR , STR , STR , STR ) ) ; </%>
<%> <-> _ skip _ skip _ reason </%> <%> <*> fixture . install _ tool ( project , output , fixture . test _ project _ root ) ; assert _ command . pass ( new migration _ add _ command ( project , STR , output ) . execute ( $ STR ) ) ; -> assert _ command . pass ( new add _ migration ( project , STR , output ) </%> <%> <+> . execute ( STR , STR , STR , STR ) ) ; </%> <@> theory _ skip _ skip _ reason </@> 
<%> <+> . properties </%> <%> <*> ? activator . create _ instance ( typeof ( simple _ null _ sentinel _ entity _ key _ factory < > ) . make _ generic _ type ( key _ type . unwrap _ nullable _ type ( ) ) ) : activator . create _ instance ( typeof ( simple _ entity _ key _ factory < > ) . make _ generic _ type ( key _ type . unwrap _ nullable _ type ( ) ) , sentinel ) ) ; -> ? activator . create _ instance ( </%> <%> <+> typeof ( simple _ null _ sentinel _ entity _ key _ factory < > ) . make _ generic _ type ( key _ type . unwrap _ nullable _ type ( ) ) , k ) : activator . create _ instance ( typeof ( simple _ entity _ key _ factory < > ) . make _ generic _ type ( key _ type . unwrap _ nullable _ type ( ) ) , k , sentinel ) ) ; </%> <@> return new composite _ entity _ key _ factory ( k . select ( p = > p . sentinel _ value ) . to _ list ( ) ) ; </@> 
<%> <+> public simple _ null _ sentinel _ entity _ key _ factory ( [ not _ null ] i _ key key ) : base ( key ) { } </%> <@> i _ entity _ type entity _ type , i _ read _ only _ list < i _ property > properties , value _ buffer value _ buffer ) = > create ( entity _ type , value _ buffer [ properties [ 0 ] . index ] ) ; </@> <%> <*> i _ entity _ type entity _ type , i _ read _ only _ list < i _ property > properties , i _ property _ accessor property _ accessor ) = > create ( entity _ type , property _ accessor [ properties [ 0 ] ] ) ; private entity _ key create ( i _ entity _ type entity _ type , object value ) { return value ! = null ? new simple _ entity _ key < t _ key > ( entity _ type , ( t _ key ) value ) -> i _ read _ only _ list < i _ property > properties , i _ property _ accessor property _ accessor ) </%> <%> <+> = > create ( property _ accessor [ properties [ 0 ] ] ) ; private entity _ key create ( object value ) </%>
<%> <+> entity _ type . get _ primary _ </%> <%> <*> _ properties -> ( ) </%> <@> = vr = > key _ factory . create ( entity _ type . root _ type ( ) , key _ properties , vr ) ; </@> 
 <@> new object [ ] { 0 , null , null } ) . create ( type , type . get _ primary _ key ( ) . properties , entry ) ) ; </@> <%> <+> sentinel _ </%> <%> <+> sentinel _ </%>
 <@> assert . null ( model _ builder . model . find _ entity _ type ( typeof ( tests . c ) ) ) ; </@> <%> <-> tests . </%>
 <@> using microsoft _ entity _ framework _ core _ relational _ tests _ test _ utilities _ fake _ provider ; using microsoft _ entity _ framework _ core _ storage ; using microsoft _ entity _ framework _ core _ tests _ test _ utilities ; </@> <%> <-> _ relational _ tests </%>
 <@> using microsoft _ entity _ framework _ core _ specification _ tests _ test _ models _ complex _ navigations _ model ; using microsoft _ entity _ framework _ core _ specification _ tests _ test _ utilities _ xunit ; using microsoft _ entity _ framework _ core _ specification _ test _ utilities ; </@> <%> <-> _ specification _ tests </%>
<%> <+> single _ line : </%> <%> <+> indent : </%> <@> builder . append ( entity _ type . annotations _ to _ debug _ string ( indent + STR ) ) ; </@> 
 <@> . for _ relational ( b = > { b . name ( STR ) ; } ) ; </@> <%> <-> . for _ relational ( ) </%>
 <@> . for _ relational ( b = > { b . name ( STR ) ; } ) ; </@> <%> <-> . for _ relational ( ) </%>
 <@> . for _ relational ( b = > { b . name ( STR ) ; } ) ; </@> <%> <-> . for _ relational ( ) </%>
<%> <-> _ using _ nested _ closure </%> <@> . for _ relational ( b = > { b . table ( STR ) ; } ) ; </@> <%> <+> public void can _ set _ table _ name _ with _ convention _ builder _ using _ nested _ closure _ non _ generic ( ) { var model _ builder = create _ convention _ model _ builder ( ) ; model _ builder . entity ( typeof ( customer ) ) </%>
<%> <-> _ using _ nested _ closure </%> <@> . for _ relational ( b = > { b . table ( STR , STR ) ; } ) ; </@> <%> <+> public void can _ set _ table _ and _ schema _ name _ with _ convention _ builder _ using _ nested _ closure _ non _ generic ( ) { var model _ builder = create _ convention _ model _ builder ( ) ; model _ builder </%>
<%> <+> . table ( STR , STR ) ; var entity _ type = model _ builder . model . get _ entity _ type ( typeof ( customer ) ) ; assert . equal ( STR , entity _ type . display _ name ( ) ) ; assert . equal ( STR , entity _ type . relational ( ) . table ) ; assert . equal ( STR , entity _ type . relational ( ) . schema ) ; } fact </%> <@> model _ builder . for _ relational ( ) . sequence ( ) ; </@> <%> <*> . for _ relational ( b = > { b . sequence ( ) ; } ) ; -> . sequence ( b = > { } ) </%>
 <@> model _ builder . for _ relational ( ) . sequence ( STR ) ; </@> <%> <*> . for _ relational ( b = > { b . sequence ( STR ) ; } ) ; -> . sequence ( STR , b = > { } ) </%>
 <@> conditional _ fact _ skip _ see _ issue </@> <%> <*> os -> gs </%> <%> <*> os -> gs </%> <%> <+> ! </%> <%> <*> ) ; -> , </%> <%> <+> assert _ order : true , element _ asserter : collection _ asserter < gear > ( ee = > ee . full _ name , ( ee , aa ) = > assert . equal ( ee . full _ name , aa . full _ name ) ) ) ; } conditional _ fact </%>
 <@> conditional _ fact _ skip _ see _ issue </@> <%> <*> os -> gs </%> <%> <*> os -> gs </%> <%> <+> ! </%> <%> <*> ) ; -> , </%> <%> <+> assert _ order : true , element _ asserter : collection _ asserter < gear > ( ee = > ee . full _ name , ( ee , aa ) = > assert . equal ( ee . full _ name , aa . full _ name ) ) ) ; } conditional _ fact </%>
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <+> is _ async = false ; </%> <%> <*> query -> task </%> <%> <*> issue -> list </%>
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <+> is _ async = false ; </%> <%> <-> _ skip _ query _ issue </%>
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <+> is _ async = false ; </%> <%> <-> _ skip _ query _ issue </%>
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <+> is _ async = false ; </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <+> is _ async = false ; </%> <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ query </%>
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> <%> <+> } conditional _ theory member _ data _ nameof _ is _ async _ data public virtual task enumerable _ min _ is _ mapped _ to _ queryable ( bool is _ async ) </%>
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> } ) . take ( NUM ) . select ( a = > a . c ) ) ; </%>
 <@> conditional _ theory _ skip _ task _ list </@> <%> <-> _ skip _ task _ list </%>
<%> <-> _ skip _ task _ list </%> <@> conditional _ theory _ skip _ task _ list </@> <%> <-> _ skip _ task _ list </%>
<%> <-> _ skip _ task _ list </%> <@> conditional _ theory _ skip _ task _ list </@> <%> <-> _ skip _ task _ list </%>
<%> <-> _ skip _ task _ list </%> <@> conditional _ theory _ skip _ task _ list </@> <%> <-> _ skip _ task _ list </%>
<%> <-> _ skip _ task _ list </%> <@> conditional _ theory _ skip _ task _ list </@> <%> <-> _ skip _ task _ list </%>
<%> <-> _ skip _ task _ list </%> <@> conditional _ theory _ skip _ task _ list </@> 
 <@> conditional _ theory _ skip _ tasklist </@> <%> <-> _ skip _ tasklist </%>
<%> <-> _ skip _ tasklist </%> <@> conditional _ theory _ skip _ tasklist </@> 
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <+> is _ async = false ; </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <+> is _ async = false ; </%> <@> conditional _ theory _ skip _ query _ issue </@> 
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> 
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> 
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> conditional _ theory _ skip _ query _ issue </@> 
 <@> conditional _ theory _ skip _ query _ issue </@> <%> <+> is _ async = false ; </%>
 <@> private readonly lazy _ ref < i _ logger > logger ; </@> <%> <-> _ factory </%> <%> <-> _ factory </%> <%> <-> _ factory </%> <%> <-> _ factory </%> <%> <*> new lazy _ ref < i _ logger > ( logger _ factory . create _ logger < relational _ connection > ) ; -> logger ; </%>
<%> <+> new logger < sql _ statement _ executor > ( </%> <%> <+> ) </%> <%> <*> { return interlocked . add ( ref current , block _ size ) ; } -> = > interlocked . add ( ref current , block _ size ) ; </%> <@> i _ relational _ connection connection , string sql , cancellation _ token cancellation _ token = new cancellation _ token ( ) ) { return task . from _ result < object > ( interlocked . add ( ref current , block _ size ) ) ; } </@> 
 <@> var sorted _ entities = relational _ test _ helpers . instance . create _ command _ batch _ preparer ( ) </@> <%> <+> i _ update _ entry </%>
 <@> var sorted _ entities = relational _ test _ helpers . instance . create _ command _ batch _ preparer ( ) </@> <%> <+> i _ update _ entry </%>
 <@> relational _ test _ helpers . instance . create _ command _ batch _ preparer ( state _ manager : state _ manager , sensitive _ logging : true ) . batch _ commands ( new [ ] { first _ entry , second _ entry } ) . to _ array ( ) ) . message ) ; </@> <%> <-> relational _ test _ helpers . instance . </%>
 <@> conditional _ theory _ skip _ need _ to _ push _ down _ set _ operation _ on _ take _ without _ orderby _ skip _ on _ sq _ server _ waiting _ on _ design </@> <%> <*> throw new not _ implemented _ exception ( STR ) ; -> assert _ sql ( </%> <%> <+> @ STR select [ ] . [ customer _ id ] , [ ] . [ address ] , [ ] . [ city ] , [ ] . [ company _ name ] , [ ] . [ contact _ name ] , [ ] . [ contact _ title ] , [ ] . [ country ] , [ ] . [ fax ] , [ ] . [ phone ] , [ ] . [ postal _ code ] , [ ] . [ region ] from ( select top ( p ) [ ] . [ customer _ id ] , [ ] . [ address ] , [ ] . [ city ] , [ ] . [ company _ name ] , [ ] . [ contact _ name ] , [ ] . [ contact _ title ] , [ ] . [ country ] , [ ] . [ fax ] , [ ] . [ phone ] , [ ] . [ postal _ code ] , [ ] . [ region ] from ( </%>
 <@> using system _ collections ; </@> <%> <-> using system _ collections _ immutable ; </%> <%> <+> using system _ reflection ; using system _ threading ; </%> <%> <+> using microsoft _ data _ entity _ change _ tracking _ internal ; </%>
<%> <+> static </%> <%> <*> _ -> . </%> <%> <*> _ -> . </%> <%> <*> _ -> . </%> <%> <+> . constants </%> <@> integer = constants . sqlite _ integer , real = constants . sqlite _ float , text = constants . sqlite _ text , blob = constants . sqlite _ blob </@> 
 <@> native _ methods . sqlite _ bind _ blob ( stmt , index , value , value . length , constants . sqlite _ transient ) ; </@> <%> <-> constants . </%>
<%> <-> constants . </%> <@> native _ methods . sqlite _ bind _ text ( stmt , index , value , constants . sqlite _ transient ) ; </@> 
 <@> = expression . lambda < func < i _ enumerable < object > > > ( new sub _ query _ expression ( collection _ query _ model ) ) ; </@> <%> <+> var async _ enumerable _ type = typeof ( i _ async _ enumerable < > ) . make _ generic _ type ( target _ type ) ; </%> <%> <*> i -> > ) . make </%> <%> <+> generic _ type ( </%> <%> <*> < object > > -> _ type </%>
<%> <+> using system _ data ; </%> <@> public abstract class relational _ test _ store < t _ connection > : test _ store , i _ relational _ test _ store < t _ connection > where t _ connection : db _ connection </@> <%> <+> public connection _ state connection _ state = > connection . state ; public void close _ connection ( ) = > connection . close ( ) ; </%> <%> <*> public virtual t _ connection connection { get ; protected set ; } public virtual db _ transaction transaction { get ; } -> public db _ transaction begin _ transaction ( ) = > connection . begin _ transaction ( ) ; </%> <%> <+> protected virtual db _ connection connection { get ; set ; } </%>
<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ transportation _ model ; using microsoft _ extensions _ dependency _ injection ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> <@> public class table _ splitting _ sqlite _ test : table _ splitting _ test _ base < sqlite _ test _ store > </@> <%> <-> public override sqlite _ test _ store create _ test _ store ( action < model _ builder > on _ model _ creating ) = > sqlite _ test _ store . get _ or _ create _ shared ( database _ name , false , ( ) = > { var options _ builder = new db _ context _ options _ builder ( ) . use _ sqlite ( sqlite _ test _ store . create _ connection _ string ( database _ name ) ) . enable _ sensitive _ data _ logging ( ) . use _ internal _ service _ provider ( build _ service _ provider ( on _ model _ creating ) ) ; using ( var context = new transportation _ context ( options _ builder . options ) ) { </%>
<%> <-> fixture . </%> <@> assert . equal ( fixture . customers , inner _ context . set < transaction _ customer > ( ) . order _ by ( c = > c . id ) . to _ list ( ) ) ; </@> <%> <-> ( context . database . get _ db _ connection </%> <%> <-> ) </%> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> using ( var inner _ context = create _ context ( context . database . get _ db _ connection ( ) ) ) </@> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> assert . equal ( fixture . customers , await inner _ context . set < transaction _ customer > ( ) . order _ by ( c = > c . id ) . to _ list _ async ( ) ) ; </@> <%> <-> ( context . database . get _ db _ connection </%> <%> <-> ) </%> <%> <-> fixture . </%>
<%> <-> fixture . </%> <@> using ( var inner _ context = create _ context ( context . database . get _ db _ connection ( ) ) ) </@> <%> <-> fixture . </%>
<%> <-> using microsoft _ entity _ framework _ core _ infrastructure ; </%> <%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <@> public abstract class end _ to _ end _ test < t _ test _ store , t _ fixture > : i _ disposable where t _ test _ store : test _ store where t _ fixture : cross _ store _ fixture , new ( ) </@> <%> <+> protected end _ to _ end _ test ( cross _ store _ fixture fixture ) { fixture = fixture ; test _ store = fixture . create _ test _ store ( test _ store _ factory ) ; } protected cross _ store _ fixture fixture { get ; } protected abstract i _ test _ store _ factory < test _ store > test _ store _ factory { get ; } protected test _ store test _ store { get ; } public void dispose ( ) = > test _ store . dispose ( ) ; </%>
<%> <+> protected cross _ store _ fixture fixture { get ; } protected abstract i _ test _ store _ factory < test _ store > test _ store _ factory { get ; } protected test _ store test _ store { get ; } public void dispose ( ) = > test _ store . dispose ( ) ; </%> <@> context . database . ensure _ created ( ) ; var first = context . simple _ entities . add ( new simple _ entity { string _ property = STR } ) . entity ; set _ partition _ id ( first , context ) ; </@> <%> <-> set _ partition _ id ( second , context ) ; </%>
<%> <-> < sqlite _ test _ store , sqlite _ cross _ store _ fixture > </%> <%> <-> sqlite _ </%> <%> <-> sqlite _ </%> <%> <+> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </%> <@> public class shared _ in _ memory _ end _ to _ end _ test : end _ to _ end _ test < in _ memory _ test _ store , shared _ cross _ store _ fixture > </@> <%> <+> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </%> <%> <-> < sql _ server _ test _ store , shared _ cross _ store _ fixture > </%>
<%> <-> < in _ memory _ test _ store , shared _ cross _ store _ fixture > </%> <%> <+> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </%> <@> public class shared _ sql _ server _ end _ to _ end _ test : end _ to _ end _ test < sql _ server _ test _ store , shared _ cross _ store _ fixture > </@> <%> <+> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </%>
<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ transportation _ model ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public class table _ splitting _ sql _ server _ test : table _ splitting _ test _ base < sql _ server _ test _ store > </@> <%> <-> private readonly string connection _ string = sql _ server _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public override sql _ server _ test _ store create _ test _ store ( action < model _ builder > on _ model _ creating ) = > sql _ server _ test _ store . get _ or _ create _ shared ( database _ name , ( ) = > { var options _ builder = new db _ context _ options _ builder ( ) . use _ sql _ server ( connection _ string , b = > b . apply _ configuration ( ) . command _ timeout ( NUM ) ) . enable _ sensitive _ data _ logging ( ) . use _ internal _ service _ provider ( build _ service _ provider ( on _ model _ creating ) ) ; </%>
<%> <-> using system _ io ; using system _ threading ; </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public class sqlite _ test _ store : relational _ test _ store < sqlite _ connection > </@> <%> <*> private static int scratch _ count ; private static string base _ directory = > app _ context . base _ directory ; public static sqlite _ test _ store get _ northwind _ store ( ) = > get _ or _ create _ shared ( STR , ( ) = > { } ) ; public static sqlite _ test _ store get _ or _ create _ shared ( string name , bool shared _ cache , action initialize _ database = null ) = > new sqlite _ test _ store ( name ) . initialize _ shared ( initialize _ database , shared _ cache ) ; public static sqlite _ test _ store get _ shared ( string name ) -> public static sqlite _ test _ store get _ or _ create ( string name ) </%>
<%> <+> using microsoft _ entity _ framework _ core _ diagnostics ; </%> <%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public abstract class table _ splitting _ test _ base < t _ test _ store > where t _ test _ store : test _ store </@> <%> <-> var store = </%> <%> <-> store , on _ model _ creating </%>
<%> <+> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <%> <*> public abstract class table _ splitting _ test _ base < t _ test _ store > where t _ test _ store : test _ store -> public abstract class table _ splitting _ test _ base </%> <@> using ( var store = create _ test _ store ( on _ model _ creating ) ) </@> <%> <-> store , on _ model _ creating </%>
<%> <-> store , on _ model _ creating </%> <@> using ( var store = create _ test _ store ( on _ model _ creating ) ) </@> <%> <-> store , on _ model _ creating </%>
<%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <@> public class sql _ server _ test _ store : relational _ test _ store < sql _ connection > </@> <%> <-> private const string northwind _ name = STR ; public static readonly string northwind _ connection _ string = create _ connection _ string ( northwind _ name ) ; </%> <%> <-> = > get _ or _ create _ shared ( northwind _ name , path . combine ( path . get _ directory _ name ( typeof ( sql _ server _ test _ store ) . get _ type _ info ( ) . assembly . location ) , STR ) ) ; </%>
<%> <+> if ( use _ relational _ null _ semantics ) { current _ expression = new not _ nullable _ expression ( current _ expression ) ; } </%> <@> var reduced _ expression = new reducing _ expression _ visitor ( ) . visit _ expression ( current _ expression ) ; return reduced _ expression ; </@> 
<%> <+> = > table _ rebuilds . contains ( table _ name ) ? null : new [ ] { operation } ; private i _ list < migration _ operation > create _ table _ rebuild ( string table _ name , i _ model model , migration _ operation operation ) </%> <%> <*> check . not _ null ( model , nameof ( model ) ) ; -> if ( table _ rebuilds . contains ( table _ name ) ) </%> <%> <+> { return null ; } </%> <%> <*> operation . table -> table _ name </%> <%> <*> create _ table _ operation -> differences </%> <%> <+> ; var create _ table _ operation = differences </%> <%> <*> operation . table -> table _ name </%> <%> <-> ( ! </%> <%> <*> is create _ table _ operation -> = = null </%> <%> <-> ) </%> <@> return new migration _ operation [ ] { operation } ; </@> <%> <*> return new [ ] -> table _ rebuilds . add ( table _ name ) ; </%> <%> <+> var rebuild _ operations = new list < migration _ operation > </%> <%> <*> operation . table -> table _ name </%>
<%> <+> abstract </%> <@> protected value _ generator _ factory _ selector ( ) { } public value _ generator _ factory _ selector ( </@> 
<%> <*> switch ( visited _ expression . node _ type ) -> if ( restricted _ binary _ expressions . try _ get _ value ( visited _ expression . node _ type , out var restricted _ types ) </%> <%> <+> & & visited _ expression is binary _ expression visited _ binary _ expression & & ( restricted _ types . contains ( get _ provider _ type ( visited _ binary _ expression . left ) ) | | restricted _ types . contains ( get _ provider _ type ( visited _ binary _ expression . right ) ) ) ) </%> <@> case expression _ type . add : case expression _ type . subtract : case expression _ type . multiply : case expression _ type . divide : case expression _ type . modulo : return is _ date _ time _ based _ operation ( visited _ expression ) ? null : visited _ expression ; </@> <%> <-> private static bool is _ date _ time _ based _ operation ( expression expression ) { if ( expression is binary _ expression binary _ expression ) { var type _ mapping = infer _ type _ mapping _ from _ column ( binary _ expression . left ) ? ? infer _ type _ mapping _ from _ column ( binary _ expression . right ) ; if ( type _ mapping ! = null </%>
 <@> public virtual lazy _ ref < i _ state _ manager > state _ manager = > dependencies . state _ manager ; </@> <%> <*> state _ manager . value . context -> dependencies </%>
 <@> return task . from _ result ( 1 ) ; </@> <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> <%> <-> _ async </%>
<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> <@> return task . from _ result ( 1 ) ; </@> <%> <-> _ async </%>
 <@> using ( var test _ database = await sql _ server _ northwind _ context . get _ shared _ store _ async ( ) ) </@> <%> <-> . state _ manager </%> <%> <+> ( ) </%>
<%> <+> . value </%> <@> internal _ property _ builder builder , type property _ type , bool? shadow _ property , configuration _ source configuration _ source ) </@> 
<%> <+> _ mutable </%> <%> <+> _ mutable </%> <%> <*> i _ mutable _ key i _ mutable _ foreign _ key . principal _ key { debugger _ step _ through get = > principal _ key ; } i _ entity _ type i _ foreign _ key . declaring _ entity _ type -> i _ mutable _ entity _ type i _ mutable _ foreign _ key . declaring _ entity _ type </%> <@> i _ mutable _ entity _ type i _ mutable _ foreign _ key . declaring _ entity _ type { debugger _ step _ through get = > declaring _ entity _ type ; } i _ entity _ type i _ foreign _ key . principal _ entity _ type </@> <%> <*> i _ mutable _ entity _ type i _ mutable _ foreign _ key . principal _ entity _ type { debugger _ step _ through get = > principal _ entity _ type ; } i _ navigation i _ foreign _ key . dependent _ to _ principal -> i _ mutable _ navigation i _ mutable _ foreign _ key . dependent _ to _ principal </%>
<%> <+> set _ </%> <%> <*> = -> ( </%> <%> <+> ) </%> <@> public virtual i _ model finalize _ model ( ) = > builder . metadata . finalize ( ) ; </@> 
<%> <-> using microsoft _ entity _ framework _ core _ query ; </%> <@> not _ null i _ query _ compilation _ context _ factory query _ compilation _ context _ factory , not _ null i _ update _ adapter _ factory update _ adapter _ factory , not _ null i _ query _ compilation _ context _ factory query _ compilation _ context _ factory ) </@> <%> <-> query _ compilation _ context _ factory = query _ compilation _ context _ factory ; </%> <%> <-> public i _ query _ compilation _ context _ factory query _ compilation _ context _ factory { get ; } </%>
<%> <-> using microsoft _ entity _ framework _ core _ infrastructure ; </%> <@> public class query _ context : i _ disposable , i _ parameter _ values </@> <%> <-> private readonly func < i _ query _ buffer > query _ buffer _ factory ; </%> <%> <-> private i _ query _ buffer query _ buffer ; </%> <%> <*> not _ null query _ context _ dependencies dependencies , not _ null func < i _ query _ buffer > query _ buffer _ factory ) -> not _ null query _ context _ dependencies dependencies ) </%> <%> <-> check . not _ null ( query _ buffer _ factory , nameof ( query _ buffer _ factory ) ) ; </%>
<%> <+> case null _ conditional _ expression null _ conditional _ expression : return unwrap _ entity _ reference ( null _ conditional _ expression . access _ operation ) ; </%> <@> var expansion = try _ expand _ navigation ( inner _ expression , member _ identity . create ( member _ expression . member ) ) ; return expansion ? ? member _ expression . update ( inner _ expression ) ; </@> <%> <-> var expansion = try _ expand _ navigation ( source , member _ identity . create ( navigation _ name ) ) ; if ( expansion ! = null ) { return expansion ; </%>
<%> <-> ( </%> <@> : . one _ to _ one _ optional _ f . one _ to _ one _ optional _ f . one _ to _ one _ optional _ f ) = = null ? null : . one _ to _ one _ optional _ f . one _ to _ one _ optional _ f . one _ to _ one _ optional _ f . name ) = = STR ) ) ; </@> 
<%> <*> i -> state </%> <%> <+> manager _ dependencies </%> <%> <+> _ </%> <%> <+> _ dependencies </%> <%> <-> i _ </%> <%> <+> _ dependencies command _ </%> <%> <+> _ dependencies </%> <%> <+> protected virtual i _ change _ detector change _ detector { get ; } </%> <%> <*> { var result = diff ( source , target , new diff _ context ( source , target ) ) . any ( ) ; state _ manager . reset _ state ( ) ; return result ; } -> = > diff ( source , target , new diff _ context ( source , target ) ) . any ( ) ; </%> <@> var operations = sort ( diff ( source , target , diff _ context ) , diff _ context ) ; state _ manager . reset _ state ( ) ; return operations ; </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <*> select o . order _ date . get _ value _ or _ default ( ) ) ; -> select o . order _ date . get _ value _ or _ default ( new date _ time ( NUM , 1 , 1 ) ) , </%>
 <@> var property _ builder = entity _ type _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ; </@> 
 <@> var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ; </@> 
 <@> var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ; </@> 
 <@> var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; </@> 
 <@> var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . convention ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; </@> 
 <@> var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; </@> 
 <@> var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; </@> 
 <@> new [ ] { entity _ builder . property ( typeof ( int ) , STR , configuration _ source . convention ) . metadata . name , property . name } , </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> ( entity _ builder , property ) = > entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> var shadow _ property = dependent _ entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . convention ) ; </@> 
 <@> ( entity _ builder , property ) = > entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> STR , </%> <%> <-> , STR </%> <@> var shadow _ property = entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . convention ) ; </@> 
 <@> assert . same ( property _ builder , entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) ) ; </@> <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%>
<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> <@> var property _ builder = entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . data _ annotation ) ; </@> <%> <-> typeof ( int ) , </%> <%> <+> , typeof ( int ) </%>
<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> <@> var property _ builder = entity _ builder . property ( typeof ( int ) , order . id _ property . name , configuration _ source . convention ) ; </@> <%> <-> typeof ( int ) , </%> <%> <+> , typeof ( int ) </%>
<%> <-> typeof ( int ) , </%> <%> <+> , typeof ( int ) </%> <@> derived _ entity _ builder . property ( typeof ( int ) , order . id _ property . name , configuration _ source . data _ annotation ) ) . message ) ; </@> 
 <@> assert . null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . data _ annotation ) ) ; </@> <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%>
<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> <@> entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) ) . message ) ; </@> <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%>
<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> <@> assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . convention ) ) ; </@> <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%>
<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> <@> assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . data _ annotation ) ) ; </@> <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%>
<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> <@> assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) ) ; </@> 
<%> <*> assert . same ( property , entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . convention ) . metadata ) ; -> property . is _ shadow _ property = false ; </%> <%> <+> assert . same ( property , entity _ builder . property ( order . id _ property . name , configuration _ source . convention ) . metadata ) ; </%> <@> entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) ) . message ) ; </@> 
<%> <+> console _ command _ logger . is _ verbose = </%> <%> <-> debug _ helper . </%> <@> dotnet _ tool _ dispatcher . ensure _ valid _ dispatch _ recipient ( ref args , execute _ command . get _ tool _ name ( ) ) ; return execute _ command . create ( args ) . execute ( args ) ; </@> <%> <*> reporter -> console _ command _ logger </%> <%> <-> . write _ line </%>
 <@> b . indexes ( ixs = > ixs . index ( STR ) ) ; </@> <%> <-> model _ builder </%>
 <@> . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; </@> <%> <-> points _ to _ principal : </%> <%> <-> points _ to _ principal : </%>
 <@> . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; </@> <%> <-> points _ to _ principal : </%>
 <@> . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; </@> <%> <-> points _ to _ principal : </%>
 <@> . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; </@> <%> <-> points _ to _ principal : </%> <%> <-> points _ to _ principal : </%>
 <@> . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; </@> <%> <-> points _ to _ principal : </%>
 <@> . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; </@> <%> <-> points _ to _ principal : </%>
 <@> . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . id ) ) ; </@> <%> <-> points _ to _ principal : </%> <%> <-> points _ to _ principal : </%>
 <@> . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . id ) ) ; </@> <%> <-> points _ to _ principal : </%>
 <@> . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . id ) ) ; </@> <%> <-> points _ to _ principal : </%>
<%> <*> model _ builder . entity ( STR , b = > -> model _ builder . entity ( STR , b = > </%> <%> <*> b . foreign _ keys ( fks = > fks -> b </%> <%> <-> ) </%> <%> <*> b . indexes ( ixs = > ixs -> b </%> <%> <-> ) </%> <@> model _ builder . entity ( STR , b = > b . foreign _ keys ( fks = > fks . foreign _ key ( STR , STR ) ) ) ; </@> <%> <*> new column ( STR , typeof ( int ) ) { is _ nullable = false } , is _ destructive _ change : true ) ; -> new column ( STR , typeof ( int ) ) { is _ nullable = false } , true ) ; </%> <%> <-> new column ( STR , typeof ( int ) ) { is _ nullable = false } , </%>
 <@> b . foreign _ keys ( fk = > fk . foreign _ key < fake _ entity > ( c = > c . related _ id ) ) ; </@> <%> <-> . foreign _ keys ( fk = > fk </%> <%> <-> ) </%>
<%> <*> b . foreign _ keys ( fk = > fk -> b </%> <%> <-> ) </%> <@> . foreign _ keys ( fk = > fk . foreign _ key < related _ fake _ entity > ( c = > c . related _ id ) ) ; </@> 
<%> <-> i _ model model </%> <%> <*> if ( ! exists -> using ( var master _ connection = connection . create _ master _ connection </%> <@> using ( var master _ connection = connection . create _ master _ connection ( ) ) { statement _ executor . execute _ non _ query ( master _ connection , create _ create _ operations ( ) ) ; clear _ pool ( ) ; } </@> <%> <+> } public override async task create _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) ) { using ( var master _ connection = connection . create _ master _ connection ( ) ) { await statement _ executor . execute _ non _ query _ async ( master _ connection , create _ create _ operations ( ) , cancellation _ token ) ; clear _ pool ( ) ; } } </%>
<%> <-> check . not _ null ( model , nameof ( model ) ) ; </%> <@> new expression _ string _ builder ( ) . build ( check . not _ null ( query , nameof ( query ) ) ) , </@> 
<%> <-> check . not _ null ( model , nameof ( model ) ) ; check . not _ null ( entity _ tracking _ info _ factory , nameof ( entity _ tracking _ info _ factory ) ) ; </%> <@> check . not _ null ( query _ compilation _ context , nameof ( query _ compilation _ context ) ) ) ; </@> 
<%> <+> using microsoft _ data _ entity _ functional _ tests _ test _ utilities _ xunit ; </%> <@> using microsoft _ data _ entity _ functional _ tests _ test _ utilities _ xunit ; </@> 
<%> <-> [ not _ null ] </%> <%> <-> [ not _ null ] </%> <%> <*> public virtual void foreign _ key _ property _ changed ( not _ null internal _ entity _ entry entry , [ not _ null ] i _ property property , [ can _ be _ null ] object old _ value , [ can _ be _ null ] object new _ value ) -> public virtual void foreign _ key _ property _ changed ( internal _ entity _ entry entry , i _ property property , object old _ value , object new _ value ) </%> <%> <*> public virtual void navigation _ reference _ changed ( not _ null internal _ entity _ entry entry , [ not _ null ] i _ navigation navigation , [ can _ be _ null ] object old _ value , [ can _ be _ null ] object new _ value ) -> public virtual void navigation _ reference _ changed ( internal _ entity _ entry entry , i _ navigation navigation , object old _ value , object new _ value ) </%> <@> public virtual void navigation _ collection _ changed ( not _ null internal _ entity _ entry entry , [ not _ null ] i _ navigation navigation , [ not _ null ] i _ set < object > added , [ not _ null ] i _ set < object > removed ) </@> <%> <*> public virtual void principal _ key _ property _ changed ( not _ null internal _ entity _ entry entry , [ not _ null ] i _ property property , [ can _ be _ null ] object old _ value , [ can _ be _ null ] object new _ value ) -> public virtual void principal _ key _ property _ changed ( internal _ entity _ entry entry , i _ property property , object old _ value , object new _ value ) </%> <%> <-> [ not _ null ] </%> <%> <-> [ not _ null ] </%> <%> <-> [ not _ null ] </%> <%> <-> [ not _ null ] </%>
 <@> not _ null i _ relational _ value _ buffer _ factory _ factory value _ buffer _ factory _ factory ) not _ null i _ update _ sql _ generator update _ sql _ generator , </@> <%> <+> check . not _ null ( sql _ generator , nameof ( sql _ generator ) ) ; </%>
<%> <*> dictionary -> cache </%> <@> | | declaring _ type = = typeof ( entity _ framework _ queryable _ extensions ) </@> <%> <*> . equals ( entity _ framework _ queryable _ extensions . string _ include _ method _ info ) ) ) -> . equals ( entity _ framework _ queryable _ extensions . string _ include _ method _ info ) ) </%> <%> <+> & & ! method _ info . get _ generic _ method _ definition ( ) . equals ( entity _ framework _ queryable _ extensions . with _ tag _ method _ info ) ) ) </%>
 <@> operation . increment _ by , operation . min _ value , operation . max _ value , operation . is _ cyclic , </@> <%> <-> operation . increment _ by , </%>
<%> <*> operation . increment _ by , operation . min _ value , operation . max _ value , operation . is _ cyclic , -> operation , </%> <@> operation . increment _ by , operation . min _ value , operation . max _ value , operation . is _ cyclic , </@> <%> <*> int increment , long? minimum _ value , long? maximum _ value , bool cycle , -> not _ null sequence _ operation operation , </%>
 <@> operation . clr _ type , operation . is _ unicode , operation . max _ length , operation . is _ fixed _ length , operation . is _ row _ version , </@> <%> <-> operation . old _ column . clr _ type , operation . old _ column . is _ unicode , operation . old _ column . max _ length , operation . old _ column . is _ fixed _ length , </%>
<%> <+> ? </%> <%> <+> ? </%> <@> can _ be _ null ref t _ related navigation _ field , </@> <%> <*> null -> STR </%>
<%> <+> # nullable enable </%> <@> can _ be _ null ref t _ value target , </@> <%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%>
<%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%> <%> <+> ! </%> <@> can _ be _ null ref t _ value target , </@> <%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%>
<%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%> <%> <+> ! </%> <@> can _ be _ null ref t _ value target , </@> <%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%>
<%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%> <%> <+> ! </%> <@> can _ be _ null ref t _ value target , </@> <%> <+> ! </%> <%> <+> ! </%>
<%> <+> values [ i ] = value ; </%> <@> private t _ entity find _ tracked ( object [ ] key _ values , out i _ read _ only _ list < i _ property > key _ properties ) </@> 
 <@> protected class relational _ type _ mapping _ info : core _ type _ mapper . type _ mapping _ info </@> <%> <+> if ( </%> <%> <*> store _ type _ name ? ? get _ column _ type ( property ) ; if ( store _ type _ name = -> = null & & property ! </%>
<%> <-> protected override entity _ type _ builder new ( internal _ entity _ type _ builder builder ) = > new entity _ type _ builder < t _ entity > ( builder ) ; </%> <%> <*> ( -> new </%> <%> <*> ) base -> ( builder </%> <%> <+> , configuration _ source . explicit ) </%> <%> <*> ( -> new </%> <%> <*> ) base -> ( builder </%> <%> <+> , configuration _ source . explicit ) </%> <@> = > ( entity _ type _ builder < t _ entity > ) base . has _ base _ type ( typeof ( t _ base _ type ) ) ; </@> 
<%> <*> foreach ( var entity _ accessor in entity _ accessors ) -> foreach ( var entity in entity _ accessors </%> <%> <+> . select ( entity _ accessor = > entity _ accessor ( ( t _ in ) result ) ) . where ( entity = > entity ! = null ) ) </%> <@> var entity = entity _ accessor ( ( t _ in ) result ) ; if ( entity ! = null ) { query _ context . query _ buffer . start _ tracking ( entity ) ; } </@> <%> <*> public virtual method _ info track _ entities { get { return track _ entities ; } } -> public virtual method _ info track _ entities = > track _ entities ; </%>
<%> <*> foreach -> return results . select </%> <%> <-> var </%> <%> <*> in results ) -> = > </%> <%> <*> foreach ( var entity _ accessor in entity _ accessors ) -> foreach ( var entity in entity _ accessors </%> <%> <+> . select ( entity _ accessor = > entity _ accessor ( ( t _ in ) result ) ) . where ( entity = > entity ! = null ) ) </%> <@> var entity = entity _ accessor ( ( t _ in ) result ) ; if ( entity ! = null ) { query _ context . query _ buffer . start _ tracking ( entity ) ; } </@> <%> <-> yield return result ; </%> <%> <-> else { yield return null ; } } } public virtual method _ info track _ entities </%>
 <@> sql _ server _ update _ sql _ generator . results _ grouping append _ bulk _ insert _ operation ( </@> <%> <*> not _ null i _ read _ only _ list < modification _ command > modification _ commands ) ; -> not _ null i _ read _ only _ list < modification _ command > modification _ commands , </%> <%> <+> int command _ position ) ; </%>
 <@> not _ null string name , configuration _ source configuration _ source , bool? owned = false , bool throw _ on _ query = false ) = > entity ( new type _ identity ( name ) , configuration _ source , owned , throw _ on _ query ) ; </@> <%> <*> , bool throw _ on _ query = false ) -> ) </%> <%> <-> , throw _ on _ query </%> <%> <*> , bool throw _ on _ query ) -> ) </%>
 <@> var entity _ type _ builder = entity _ type _ builder . metadata . is _ query _ type ? entity _ type _ builder . model _ builder . query ( entity _ type , annotations _ builder . configuration _ source ) : entity _ type _ builder . model _ builder . entity ( </@> <%> <-> var entity _ type _ builder = entity _ type _ builder . metadata . is _ query _ type ? entity _ type _ builder . model _ builder . query ( entity _ type _ name , annotations _ builder . configuration _ source ) : entity _ type _ builder . model _ builder . entity ( </%>
<%> <*> var entity _ type _ builder = entity _ type _ builder . metadata . is _ query _ type ? entity _ type _ builder . model _ builder . query ( entity _ type , annotations _ builder . configuration _ source ) : entity _ type _ builder . model _ builder . entity ( -> var entity _ type _ builder = entity _ type _ builder . model _ builder . entity ( </%> <@> var entity _ type _ builder = entity _ type _ builder . metadata . is _ query _ type ? entity _ type _ builder . model _ builder . query ( entity _ type _ name , annotations _ builder . configuration _ source ) : entity _ type _ builder . model _ builder . entity ( </@> 
<%> <*> internal -> infrastructure </%> <@> using microsoft _ entity _ framework _ core _ query _ expressions _ internal ; using microsoft _ entity _ framework _ core _ query _ internal ; using microsoft _ entity _ framework _ core _ query _ navigation _ expansion ; using microsoft _ entity _ framework _ core _ query _ pipeline ; </@> <%> <*> pipeline -> internal </%> <%> <+> private const string compiled _ query _ parameter _ prefix = STR ; </%>
<%> <+> using microsoft _ entity _ framework _ core _ infrastructure ; </%> <@> using microsoft _ entity _ framework _ core _ query _ expressions _ internal ; using microsoft _ entity _ framework _ core _ query _ internal ; using microsoft _ entity _ framework _ core _ query _ navigation _ expansion ; namespace microsoft _ entity _ framework _ core _ query _ pipeline </@> 
 <@> using microsoft _ entity _ framework _ core _ query _ expressions _ internal ; using microsoft _ entity _ framework _ core _ query _ internal ; namespace microsoft _ entity _ framework _ core _ query _ pipeline </@> <%> <-> public null _ check _ removing _ expression _ visitor ( ) { } </%>
 <@> select top ( p ) [ c ] . [ customer _ id ] , [ c ] . [ company _ name ] , coalesce ( [ c ] . [ region ] , n ' zz ' ) as [ c ] </@> <%> <*> c -> region </%> <%> <*> c -> region </%>
<%> <*> object -> string </%> <@> ( string container _ id , j _ token document , object partition _ key ) parameters ) </@> <%> <*> object -> string </%>
<%> <*> object -> string </%> <@> ( string container _ id , string item _ id , j _ object document , object partition _ key ) parameters ) </@> <%> <*> object -> string </%>
<%> <*> object -> string </%> <@> ( string container _ id , string item _ id , j _ object document , object partition _ key ) parameters , </@> 
<%> <*> object -> string </%> <@> ( string container _ id , string document _ id , object partition _ key ) parameters ) </@> <%> <*> object -> string </%>
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
<%> <+> string _ enum ? param = string _ enum . value ; assert . same ( entity , context . set < mapped _ nullable _ data _ types > ( ) . single ( e = > e . int = = NUM & & e . enum _ as _ nvarchar = = param ) ) ; string _ enum ? param = string _ enum . value ; assert . same ( entity , context . set < mapped _ nullable _ data _ types > ( ) . single ( e = > e . int = = NUM & & e . enum _ as _ varchar _ max = = param ) ) ; </%> <@> fact _ skip _ task _ list </@> 
<%> <+> , STR </%> <%> <+> , STR </%> <@> system . linq . expressions . expression . new _ array _ init ( </@> <%> <*> navigation _ extensions -> n </%> <%> <-> ( i _ navigation ) n </%>
<%> <-> system . linq . expressions . </%> <@> var target _ type = navigation _ extensions . get _ target _ type ( ( i _ navigation ) n ) ; </@> 
 <@> func < i _ async _ enumerable < t > > source , type context _ type , i _ logger logger ) </@> <%> <-> func < </%> <%> <-> > </%> <%> <+> _ async </%> <%> <*> factory -> enumerable </%> <%> <*> public exception _ interceptor ( func < -> public exception _ interceptor ( </%> <%> <-> > </%> <%> <+> _ async </%> <%> <*> factory -> enumerable </%>
<%> <+> public static bool is _ create _ method ( [ not _ null ] method _ call _ expression method _ call _ expression ) { check . not _ null ( method _ call _ expression , nameof ( method _ call _ expression ) ) ; return reference _ equals ( method _ call _ expression . method , create _ value _ buffer _ method _ info ) | | method _ call _ expression . method . method _ is _ closed _ form _ of ( create _ entity _ method _ info ) ; } </%> <@> private static query _ result _ scope < value _ buffer > create _ value _ buffer ( </@> <%> <-> query _ context query _ context , query _ result _ scope parent _ query _ result _ scope , </%> <%> <*> = > new query _ result _ scope < value _ buffer > ( query _ source , value _ buffer . with _ offset ( value _ buffer _ offset ) , parent _ query _ result _ scope ) ; -> = > value _ buffer . with _ offset ( value _ buffer _ offset ) ; </%>
<%> <+> } </%> <%> <-> query _ result _ scope < </%> <%> <-> > </%> <%> <-> query _ context query _ context , query _ result _ scope parent _ query _ result _ scope , </%> <@> = > new query _ result _ scope < value _ buffer > ( query _ source , value _ buffer . with _ offset ( value _ buffer _ offset ) , parent _ query _ result _ scope ) ; </@> <%> <-> query _ result _ scope < </%> <%> <-> > </%> <%> <-> query _ context query _ context , query _ result _ scope parent _ query _ result _ scope , </%>
<%> <-> query _ result _ scope < </%> <%> <-> > </%> <%> <-> query _ context query _ context , query _ result _ scope parent _ query _ result _ scope , </%> <%> <*> = > new query _ result _ scope < value _ buffer > ( query _ source , value _ buffer . with _ offset ( value _ buffer _ offset ) , parent _ query _ result _ scope ) ; -> = > value _ buffer . with _ offset ( value _ buffer _ offset ) ; </%> <@> private static query _ result _ scope < t _ entity > create _ entity < t _ entity > ( </@> <%> <-> query _ context query _ context , query _ result _ scope parent _ query _ result _ scope , </%> <%> <+> query _ context query _ context , </%>
<%> <*> not _ null entity _ query _ model _ visitor query _ model _ visitor , not _ null i _ query _ source query _ source ) -> entity _ query _ model _ visitor query _ model _ visitor , i _ query _ source query _ source ) </%> <@> check . not _ null ( query _ source , nameof ( query _ source ) ) ) ; </@> 
 <@> func < i _ enumerable < t > > source , type context _ type , i _ logger logger ) </@> <%> <-> func < </%> <%> <-> > </%> <%> <*> factory -> enumerable </%> <%> <*> public exception _ interceptor ( func < -> public exception _ interceptor ( </%> <%> <-> > </%> <%> <*> factory -> enumerable </%>
<%> <*> not _ null entity _ query _ model _ visitor query _ model _ visitor , not _ null i _ query _ source query _ source ) -> entity _ query _ model _ visitor query _ model _ visitor , i _ query _ source query _ source ) </%> <@> check . not _ null ( query _ source , nameof ( query _ source ) ) ) ; </@> 
 <@> command _ string _ builder . append ( STR ) . append _ line ( ) ; </@> <%> <+> _ line </%> <%> <-> ) . append _ line ( </%>
<%> <-> . append ( STR ) </%> <%> <+> STR </%> <@> command _ string _ builder . append ( sql _ generation _ helper . statement _ terminator ) . append _ line ( ) ; </@> 
<%> <+> _ line </%> <%> <-> . append _ line ( ) </%> <@> . append ( sql _ generation _ helper . statement _ terminator ) . append _ line ( ) ; </@> 
 <@> assert . throws < invalid _ operation _ exception > ( ( ) = > { a . has _ base _ type ( a ) ; } ) . message ) ; </@> <%> <-> { </%> <%> <-> ; } </%> <%> <-> { </%> <%> <-> ; } </%>
<%> <-> { </%> <%> <-> ; } </%> <@> assert . throws < invalid _ operation _ exception > ( ( ) = > { a . has _ base _ type ( b ) ; } ) . message ) ; </@> <%> <-> { </%> <%> <-> ; } </%>
<%> <-> { </%> <%> <-> ; } </%> <%> <-> { </%> <%> <-> ; } </%> <@> assert . throws < invalid _ operation _ exception > ( ( ) = > { a . has _ base _ type ( d ) ; } ) . message ) ; </@> <%> <-> { </%> <%> <-> ; } </%>
<%> <-> { </%> <%> <-> ; } </%> <@> assert . throws < invalid _ operation _ exception > ( ( ) = > { b . has _ base _ type ( a ) ; } ) . message ) ; </@> <%> <-> { </%> <%> <-> ; } </%>
<%> <-> { </%> <%> <-> ; } </%> <@> assert . throws < invalid _ operation _ exception > ( ( ) = > { b . has _ base _ type ( a ) ; } ) . message ) ; </@> <%> <-> { </%> <%> <-> ; } </%>
<%> <-> { </%> <%> <-> ; } </%> <@> assert . throws < invalid _ operation _ exception > ( ( ) = > { a . has _ base _ type ( b ) ; } ) . message ) ; </@> 
 <@> assert . throws < invalid _ operation _ exception > ( ( ) = > { b . has _ base _ type ( a ) ; } ) . message ) ; </@> <%> <-> { </%> <%> <-> ; } </%>
<%> <-> { </%> <%> <-> ; } </%> <@> assert . throws < invalid _ operation _ exception > ( ( ) = > { b . has _ base _ type ( a ) ; } ) . message ) ; </@> <%> <-> { </%> <%> <-> ; } </%>
<%> <-> { </%> <%> <-> ; } </%> <@> assert . throws < invalid _ operation _ exception > ( ( ) = > { b . has _ base _ type ( a ) ; } ) . message ) ; </@> <%> <-> { </%> <%> <-> ; } </%>
<%> <-> { </%> <%> <-> ; } </%> <@> assert . throws < invalid _ operation _ exception > ( ( ) = > { a . has _ base _ type ( b ) ; } ) . message ) ; </@> 
 <@> cb . owns _ one ( c = > c . sub _ child , scb = > { scb . has _ foreign _ key ( STR ) ; } ) ; </@> <%> <-> { </%> <%> <-> ; } </%>
<%> <-> { </%> <%> <-> ; } </%> <@> cb . owns _ one ( c = > c . sub _ child , scb = > { scb . has _ foreign _ key ( STR ) ; } ) ; </@> 
 <@> model _ builder . entity < non _ signed _ integer _ key _ entity > ( e = > { e . has _ data ( entity ) ; } ) ; </@> <%> <-> { </%> <%> <-> ; } </%>
<%> <-> { </%> <%> <-> ; } </%> <@> model _ builder . entity < a > ( e = > { e . has _ data ( new a ( ) ) ; } ) ; </@> 
 <@> conditional _ fact _ skip _ test _ does _ not _ pass </@> <%> <+> ( int? ) </%>
 <@> private i _ enumerable < i _ value _ reader > execute _ value _ reader < t _ entity > ( </@> <%> <-> var entity _ type = query _ context . model . get _ entity _ type ( typeof ( t _ entity ) ) ; </%>
<%> <+> private readonly constant _ verifying _ expression _ visitor constant _ verifying _ expression _ visitor ; </%> <@> query _ compilation _ context query _ compilation _ context , shaped _ query _ compiling _ expression _ visitor _ dependencies dependencies ) </@> <%> <+> constant _ verifying _ expression _ visitor = new constant _ verifying _ expression _ visitor ( dependencies . type _ mapping _ source ) ; </%>
 <@> using microsoft _ data _ sq _ lite _ interop ; namespace microsoft _ data _ sq _ lite _ utilities </@> <%> <*> native _ methods -> constants </%>
<%> <+> using microsoft _ data _ entity _ infrastructure ; </%> <@> public class built _ in _ data _ types _ in _ memory _ fixture : built _ in _ data _ types _ fixture _ base < in _ memory _ test _ store > </@> <%> <+> private readonly db _ context _ options options ; private readonly in _ memory _ test _ store test _ store ; </%> <%> <+> test _ store = new in _ memory _ test _ store ( ) ; </%>
<%> <+> using microsoft _ data _ entity _ infrastructure ; </%> <@> public class built _ in _ data _ types _ sqlite _ fixture : built _ in _ data _ types _ fixture _ base < sqlite _ test _ store > </@> <%> <+> private readonly db _ context _ options options ; private readonly sqlite _ test _ store test _ store ; </%> <%> <+> test _ store = sqlite _ test _ store . create _ scratch ( ) ; </%>
<%> <-> using microsoft _ data _ entity _ sql _ server _ metadata ; </%> <@> public class built _ in _ data _ types _ sql _ server _ fixture : built _ in _ data _ types _ fixture _ base < sql _ server _ test _ store > </@> <%> <+> private readonly db _ context _ options options ; private readonly sql _ server _ test _ store test _ store ; </%> <%> <+> test _ store = sql _ server _ test _ store . create _ scratch ( ) ; </%>
 <@> t _ result execute _ async < t _ result > ( [ not _ null ] expression query ) ;       task < t _ result > execute _ async < t _ result > ( [ not _ null ] expression query , cancellation _ token cancellation _ token ) ; </@> <%> <-> func < query _ context , task < t _ result > > create _ compiled _ async _ singleton _ query < t _ result > ( [ not _ null ] expression query ) ; </%>
 <@> private static task < t _ result > execute _ async < t _ source , t _ result > ( </@> <%> <+> expression expression , </%> <%> <-> operator _ method _ info = operator _ method _ info . make _ generic _ method ( typeof ( t _ source ) ) ; </%>
<%> <*> arguments : source . expression ) , -> arguments : expression = = null </%> <%> <+> ? new [ ] { source . expression } : new [ ] { source . expression , expression } ) , </%> <@> private static task < t _ result > execute _ async < t _ source , t _ result > ( </@> <%> <-> task < </%> <%> <-> > </%> <%> <-> expression expression , </%>
<%> <-> task < </%> <%> <-> > </%> <@> private static task < t _ result > execute _ async < t _ source , t _ result > ( </@> <%> <-> expression expression , </%> <%> <-> { </%> <%> <+> = > execute _ async < t _ source , t _ result > ( </%> <%> <*> if ( source . provider is i -> operator </%> <%> <*> async -> method </%> <%> <*> query _ provider provider -> info , source , ( expression </%> <%> <*> { -> null , cancellation _ token ) ; </%> <%> <-> operator _ method _ info = operator _ method _ info . get _ generic _ arguments ( ) . length = = 2 ? operator _ method _ info . make _ generic _ method ( typeof ( t _ source ) , typeof ( t _ result ) ) </%>
<%> <+> { typeof ( i _ query _ sql _ generator _ factory ) , new service _ characteristics ( service _ lifetime . scoped ) } , { typeof ( i _ relational _ sql _ translating _ expression _ visitor _ factory ) , new service _ characteristics ( service _ lifetime . singleton ) } , { typeof ( i _ method _ call _ translator _ provider ) , new service _ characteristics ( service _ lifetime . singleton ) } , { typeof ( i _ member _ translator _ provider ) , new service _ characteristics ( service _ lifetime . singleton ) } , { typeof ( i _ sql _ expression _ factory ) , new service _ characteristics ( service _ lifetime . singleton ) } , </%> <@> { typeof ( i _ member _ translator _ plugin ) , new service _ characteristics ( service _ lifetime . singleton , multiple _ registrations : true ) } </@> 
 <@> property . declaring _ type , property _ type , element _ type ) ; var member _ info = navigation . get _ member _ info ( for _ construction , for _ set ) ; </@> <%> <+> navigation . get _ </%> <%> <+> ( for _ construction , for _ set ) </%>
<%> <-> ( ) . is _ configured </%> <%> <+> . is _ configured </%> <@> assert . false ( new in _ memory _ data _ store _ source ( ) . is _ configured ( configuration _ mock . object ) ) ; </@> <%> <-> ( ) . is _ available </%> <%> <+> . is _ available </%>
<%> <-> ( ) . is _ configured </%> <%> <+> . is _ configured </%> <@> assert . true ( new in _ memory _ data _ store _ source ( ) . is _ available ( mock . of < db _ context _ configuration > ( ) ) ) ; </@> 
 <@> if ( ! sources [ 0 ] . is _ available ( configuration ) ) </@> <%> <+> . store _ services </%>
<%> <-> ( ) . is _ configured </%> <%> <+> . is _ configured </%> <@> assert . false ( new sql _ server _ data _ store _ source ( ) . is _ configured ( configuration _ mock . object ) ) ; </@> <%> <-> ( ) . is _ available </%> <%> <+> . is _ available </%>
<%> <-> ( ) . is _ configured </%> <%> <+> . is _ configured </%> <@> assert . true ( new sql _ server _ data _ store _ source ( ) . is _ available ( configuration _ mock . object ) ) ; </@> <%> <-> ( ) . is _ available </%> <%> <+> . is _ available </%>
<%> <-> ( ) . is _ available </%> <%> <+> . is _ available </%> <@> assert . false ( new sql _ server _ data _ store _ source ( ) . is _ available ( configuration _ mock . object ) ) ; </@> 
<%> <-> using microsoft _ data _ entity _ infrastructure _ internal ; using microsoft _ data _ entity _ in _ memory ; using microsoft _ data _ entity _ internal ; </%> <@> private readonly thread _ safe _ lazy _ ref < i _ in _ memory _ store > database ; </@> 
<%> <*> var store _ config = options . extensions . of _ type < in _ memory _ options _ extension > ( ) . first _ or _ default ( ) ; database = new thread _ safe _ lazy _ ref < i _ in _ memory _ store > ( ( ) = > store _ config ? . persist ? ? true ? persistent _ store : new in _ memory _ store ( logger _ factory ) ) ; -> database = persistent _ store ; </%> <@> public virtual i _ in _ memory _ store store = > database . value ; </@> <%> <-> . value </%> <%> <-> . value </%> <%> <-> . value </%>
<%> <+> public bool remove _ formatting { get ; set ; } </%> <@> transforming _ visitor . string _ builder . append _ line ( ) ; </@> 
 <@> transforming _ visitor . string _ builder . append _ line ( ) ; </@> <%> <-> transforming _ visitor . string _ builder . </%> <%> <-> transforming _ visitor . string _ builder . </%>
<%> <-> transforming _ visitor . string _ builder . </%> <@> transforming _ visitor . string _ builder . append _ line ( ) ; </@> <%> <-> transforming _ visitor . string _ builder . </%>
<%> <-> transforming _ visitor . string _ builder . </%> <%> <-> transforming _ visitor . string _ builder . </%> <@> transforming _ visitor . string _ builder . append _ line ( ) ; </@> <%> <-> transforming _ visitor . string _ builder . </%>
<%> <-> transforming _ visitor . string _ builder . </%> <@> transforming _ visitor . string _ builder . append _ line ( ) ; </@> <%> <-> transforming _ visitor . string _ builder . </%>
<%> <-> transforming _ visitor . string _ builder . </%> <@> transforming _ visitor . string _ builder . append _ line ( ) ; </@> <%> <-> transforming _ visitor . string _ builder . </%> <%> <-> $ </%>
<%> <-> transforming _ visitor . string _ builder . </%> <@> transforming _ visitor . string _ builder . append _ line ( ) ; transforming _ visitor . string _ builder . append ( $ STR ) ; </@> <%> <-> transforming _ visitor . string _ builder . </%>
<%> <-> transforming _ visitor . string _ builder . </%> <%> <-> $ </%> <@> transforming _ visitor . string _ builder . append _ line ( ) ; </@> 
 <@> string _ builder . append _ line ( ) ; </@> <%> <-> string _ builder . </%> <%> <-> string _ builder . </%>
<%> <-> string _ builder . </%> <@> string _ builder . append _ line ( STR + node . result ) ; </@> <%> <-> string _ builder . </%>
<%> <-> string _ builder . </%> <%> <-> string _ builder . </%> <@> string _ builder . append _ line ( STR ) ; </@> 
<%> <+> , remove _ formatting </%> <@> string _ builder . append _ line ( STR + node . target . type . short _ display _ name ( ) + STR + node . target + STR ) ; </@> 
<%> <-> string _ builder , </%> <@> string _ builder . append _ line ( core _ strings . invalid _ member _ init _ binding ) ; </@> <%> <-> string _ builder . </%>
<%> <-> string _ builder , </%> <%> <-> string _ builder . </%> <@> string _ builder . append _ line ( STR ) ; </@> 
<%> <+> ( action < string > ) </%> <%> <-> string _ builder , </%> <%> <-> string _ builder , </%> <%> <-> string _ builder , </%> <@> string _ builder . append _ line ( STR ) ; </@> 
<%> <-> _ id </%> <%> <*> constraint -> sorted _ column </%> <%> <*> type -> ids </%> <%> <*> constraint _ types [ constraint -> entry . value . values . to </%> <%> <*> id ] -> list ( ) </%> <%> <*> var -> var tuple = match _ properties ( sorted _ </%> <%> <*> = entry . value -> ) </%> <%> <-> var tuple = match _ properties ( column _ ids ) ; </%> <%> <+> constraint . </%> <@> entity _ type . set _ primary _ key ( matching _ properties . to _ list ( ) ) ; </@> <%> <-> . to _ list ( ) </%>
<%> <-> . to _ list ( ) </%> <@> entity _ type . add _ key ( matching _ properties . to _ list ( ) ) ; </@> <%> <+> constraint . </%>
<%> <+> { var second _ argument = visit ( method _ call _ expression . arguments [ 1 ] ) ; if ( second _ argument is navigation _ expansion _ expression inner _ source ) </%> <@> var second _ argument = visit ( method _ call _ expression . arguments [ 1 ] ) ; if ( second _ argument is navigation _ expansion _ expression inner _ source ) { return process _ set _ operation ( source , generic _ method , inner _ source ) ; } break ; </@> <%> <+> break ; } </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
<%> <-> @ STR </%> <%> <+> left join [ weapons ] as [ w ] on [ t ] . [ full _ name ] = [ w ] . [ owner _ full _ name ] </%> <%> <*> from -> order by [ t ] . [ nickname ] , </%> <%> <*> weapons -> t </%> <%> <*> as -> . </%> <%> <*> g . weapons -> squad _ id </%> <%> <*> inner join ( -> , [ w ] . [ id ] STR </%> <%> <-> select top ( 1 ) [ ] . [ nickname ] , [ ] . [ squad _ id ] , [ ] . [ full _ name ] from [ gears ] as [ ] where [ ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) order by [ ] . [ nickname ] , [ ] . [ squad _ id ] , [ ] . [ full _ name ] ) as [ t ] on [ g . weapons ] . [ owner _ full _ name ] = [ t ] . [ full _ name ] order by [ t ] . [ nickname ] , [ t ] . [ squad _ id ] , [ t ] . [ full _ name ] STR </%> <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) STR </@> <%> <+> from ( select top ( 1 ) [ g ] . [ nickname ] , [ g ] . [ squad _ id ] , [ g ] . [ full _ name ] </%> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%>
 <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) </@> <%> <+> [ g ] . </%> <%> <*> key -> nickname </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ fact _ skip _ issue </@> 
 <@> conditional _ theory _ skip _ issue </@> <%> <+> conditional _ theory </%>
<%> <+> conditional _ theory _ skip _ issue _ cannot _ eval _ default _ if _ empty _ p member _ data _ nameof _ is _ async _ data </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> raw . sqlite _ bind _ blob ( stmt , index , blob ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <@> = > raw . sqlite _ bind _ double ( stmt , index , value ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> = > raw . sqlite _ bind _ int ( stmt , index , value ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> = > raw . sqlite _ bind _ null ( stmt , index ) ; </@> <%> <-> raw . </%>
<%> <+> using static sq _ lite _ pcl . raw ; </%> <@> private readonly i _ collection < sqlite _ stmt > prepared _ statements = new list < sqlite _ stmt > ( ) ; </@> 
 <@> var expected _ params = raw . sqlite _ bind _ parameter _ count ( stmt ) ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <@> var name = raw . sqlite _ bind _ parameter _ name ( stmt , i ) ; </@> 
 <@> raw . sqlite _ reset ( stmt ) ; </@> <%> <-> if ( rc = = raw . sqlite _ row </%> <%> <*> | | raw . -> if ( </%> <%> <*> stmt -> column </%> <%> <*> readonly -> count </%> <%> <-> raw . </%>
<%> <-> if ( rc = = raw . sqlite _ row </%> <%> <*> | | raw . -> if ( </%> <%> <*> stmt -> column </%> <%> <*> readonly -> count </%> <%> <-> raw . </%> <%> <*> raw . sqlite _ reset ( stmt ) ; -> while ( rc ! = sqlite _ done ) </%> <%> <+> { rc = sqlite _ step ( stmt ) ; sqlite _ exception . throw _ exception _ for _ rc ( rc , connection . handle ) ; } sqlite _ reset ( stmt ) ; </%> <@> changes + = raw . sqlite _ changes ( connection . handle ) ; </@> <%> <-> ( </%> <%> <*> & -> . has _ flag ( </%> <%> <-> ! = 0 </%>
 <@> case raw . sqlite _ integer : </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <@> case raw . sqlite _ float : </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> case raw . sqlite _ text : </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> case raw . sqlite _ blob : </@> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> case raw . sqlite _ null : </@> 
 <@> case raw . sqlite _ integer : </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> case raw . sqlite _ text : </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> case raw . sqlite _ blob : </@> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> case raw . sqlite _ null : </@> 
<%> <*> var column _ name = raw . sqlite _ column _ origin _ name ( stmt , i ) ; if ( ( column _ name = = STR ) | | ( column _ name = = STR ) | | ( column _ name = = STR ) ) -> var column _ name = sqlite _ column _ origin _ name ( handle , i ) ; </%> <%> <+> if ( column _ name = = STR ) </%> <@> var rc = raw . sqlite _ table _ column _ metadata ( </@> 
<%> <*> stmt -> record </%> <%> <*> raw -> record </%> <%> <*> sqlite _ reset -> dispose </%> <%> <-> stmt </%> <%> <-> stmt = null ; </%> <@> raw . sqlite _ reset ( stmt _ queue . dequeue ( ) . stmt ) ; </@> <%> <-> { if ( closed ) </%>
<%> <+> ? throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ ordinal ) ) ) : record . get _ ordinal ( name ) ; </%> <%> <*> { if ( closed ) { throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ data _ type _ name ) ) ) ; } return record . get _ data _ type _ name ( ordinal ) ; } -> = > closed </%> <%> <+> ? throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ data _ type _ name ) ) ) : record . get _ data _ type _ name ( ordinal ) ; </%> <%> <*> { if ( closed ) { throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ field _ type ) ) ) ; } return record . get _ field _ type ( ordinal ) ; } -> = > closed </%> <%> <+> ? throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ field _ type ) ) ) : record . get _ field _ type ( ordinal ) ; </%> <@> : ! stepped | | done ? throw new invalid _ operation _ exception ( resources . no _ data ) : record . is _ db _ null ( ordinal ) ; </@> <%> <*> = > record . get _ boolean ( ordinal ) ; -> = > closed </%> <%> <+> ? throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ boolean ) ) ) : record . get _ boolean ( ordinal ) ; </%> <%> <*> = > record . get _ byte ( ordinal ) ; -> = > closed </%> <%> <+> ? throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ byte ) ) ) : record . get _ byte ( ordinal ) ; </%>
 <@> = > raw . sqlite _ result _ blob ( ctx , value ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <@> = > raw . sqlite _ result _ double ( ctx , value ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> = > raw . sqlite _ result _ int ( ctx , value ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> = > raw . sqlite _ result _ null ( ctx ) ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> = > raw . sqlite _ result _ text ( ctx , value ) ; </@> 
<%> <+> using static sq _ lite _ pcl . raw ; </%> <@> = > raw . sqlite _ close ( db ) ; </@> 
<%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> <@> = > raw . sqlite _ libversion ( ) ; </@> 
<%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> <@> flags | = raw . sqlite _ open _ readonly ; </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> <@> flags | = raw . sqlite _ open _ readwrite ; </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> flags | = raw . sqlite _ open _ readwrite | raw . sqlite _ open _ create | raw . sqlite _ open _ memory ; if ( ( flags & raw . sqlite _ open _ uri ) = = 0 ) { flags | = raw . sqlite _ open _ uri ; </@> <%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> <@> flags | = raw . sqlite _ open _ sharedcache ; </@> <%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> <@> flags | = raw . sqlite _ open _ privatecache ; </@> <%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> <@> & & ( flags & raw . sqlite _ open _ uri ) = = 0 </@> 
 <@> var rc = raw . sqlite _ open ( filename , out db , flags , vfs : null ) ; </@> <%> <-> _ string </%> <%> <*> builder -> options </%>
<%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> _ string </%> <%> <*> builder -> options </%> <@> rc = raw . sqlite _ create _ collation ( db , item . key , item . value . state , item . value . collation ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <@> rc = raw . sqlite _ create _ function ( db , item . key . name , item . key . arity , item . value . state , item . value . func ) ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <@> rc = raw . sqlite _ enable _ load _ extension ( db , 1 ) ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <@> rc = raw . sqlite _ enable _ load _ extension ( db , extensions _ enabled ? 1 : 0 ) ; </@> 
 <@> rc = raw . sqlite _ enable _ load _ extension ( db , 1 ) ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <@> rc = raw . sqlite _ enable _ load _ extension ( db , 0 ) ; </@> 
 <@> using ( var backup = raw . sqlite _ backup _ init ( destination . db , destination _ name , db , source _ name ) ) </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <@> rc = raw . sqlite _ errcode ( destination . db ) ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> rc = raw . sqlite _ backup _ step ( backup , - 1 ) ; </@> 
 <@> raw . sqlite _ result _ error ( ctx , ex . message ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <@> raw . sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> var flags = is _ deterministic ? raw . sqlite _ deterministic : 0 ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> var rc = raw . sqlite _ create _ function ( </@> 
 <@> raw . sqlite _ result _ error ( ctx , context . exception . message ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <@> raw . sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> var flags = is _ deterministic ? raw . sqlite _ deterministic : 0 ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> var rc = raw . sqlite _ create _ function ( </@> 
 <@> assert . equal ( raw . sqlite _ readonly , ex . sqlite _ error _ code ) ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <@> assert . equal ( raw . sqlite _ cantopen , ex . sqlite _ error _ code ) ; </@> 
 <@> assert . equal ( raw . sqlite _ busy , ex . sqlite _ error _ code ) ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <@> assert . equal ( raw . sqlite _ cantopen , ex . sqlite _ error _ code ) ; </@> 
 <@> resources . sqlite _ native _ error ( raw . sqlite _ error , resources . udf _ called _ with _ null ( STR , 0 ) ) , </@> <%> <-> raw . </%>
<%> <-> raw . </%> <@> assert . equal ( raw . sqlite _ error , ex . sqlite _ error _ code ) ; </@> 
<%> <+> static </%> <%> <+> . raw </%> <@> = > get _ sqlite _ type ( ordinal ) = = raw . sqlite _ null ; </@> <%> <+> checked ( </%> <%> <+> ) </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <+> checked ( </%> <%> <+> ) </%> <@> if ( sqlite _ type = = raw . sqlite _ text ) </@> <%> <+> checked ( </%> <%> <+> ) </%>
<%> <+> checked ( </%> <%> <+> ) </%> <@> case raw . sqlite _ float : case raw . sqlite _ integer : </@> 
 <@> case raw . sqlite _ float : case raw . sqlite _ integer : </@> <%> <+> checked ( </%> <%> <+> ) </%> <%> <+> checked ( </%> <%> <+> ) </%>
<%> <+> checked </%> <@> case raw . sqlite _ integer : </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <@> case raw . sqlite _ float : </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> case raw . sqlite _ text : </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> case raw . sqlite _ blob : </@> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> case raw . sqlite _ null : </@> 
 <@> var rc = raw . sqlite _ blob _ open ( </@> <%> <-> raw . </%>
<%> <-> raw . </%> <@> length = raw . sqlite _ blob _ bytes ( blob ) ; </@> 
 <@> raw . sqlite _ rollback _ hook ( connection . handle , null , null ) ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <@> raw . sqlite _ rollback _ hook ( connection . handle , null , null ) ; </@> 
 <@> if ( rc = = raw . sqlite _ ok | | rc = = raw . sqlite _ row | | rc = = raw . sqlite _ done ) </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> | | rc ! = raw . sqlite _ errcode ( db ) ) </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> message = raw . sqlite _ errstr ( rc ) + STR + resources . default _ native _ error ; </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> message = raw . sqlite _ errmsg ( db ) ; extended _ error _ code = raw . sqlite _ extended _ errcode ( db ) ; </@> 
<%> <+> static </%> <%> <+> . raw </%> <@> integer = raw . sqlite _ integer , </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <+> static </%> <%> <+> . raw </%> <%> <-> raw . </%> <@> real = raw . sqlite _ float , </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <+> static </%> <%> <+> . raw </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> text = raw . sqlite _ text , </@> <%> <-> raw . </%>
<%> <+> static </%> <%> <+> . raw </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> blob = raw . sqlite _ blob </@> 
 <@> = > raw . sqlite _ value _ double ( values [ ordinal ] ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <@> = > raw . sqlite _ value _ int ( values [ ordinal ] ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <@> = > raw . sqlite _ value _ text ( values [ ordinal ] ) ; </@> <%> <-> raw . </%> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> = > raw . sqlite _ value _ blob ( values [ ordinal ] ) ; </@> <%> <-> raw . </%>
<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <@> = > raw . sqlite _ value _ type ( values [ ordinal ] ) ; </@> 
 <@> annotation _ provider . format _ columns ( first _ properties ) ) ) ; </@> <%> <*> annotation -> first </%> <%> <*> provider -> properties </%> <%> <-> first _ properties </%>
<%> <*> annotation -> first </%> <%> <*> provider -> properties </%> <%> <-> first _ properties </%> <@> annotation _ provider . format _ columns ( first _ properties ) ) ) ; </@> 
 <@> annotation _ provider . format _ columns ( first _ properties ) ) ) ; </@> <%> <*> annotation -> first </%> <%> <*> provider -> properties </%> <%> <-> first _ properties </%>
<%> <*> annotation -> first </%> <%> <*> provider -> properties </%> <%> <-> first _ properties </%> <@> annotation _ provider . format _ columns ( first _ properties ) ) ) ; </@> 
<%> <*> null -> equal </%> <%> <+> STR , </%> <%> <+> . name </%> <@> assert . null ( model . relational ( ) . find _ sequence ( STR ) ) ; var sequence = model . sqlite ( ) . find _ sequence ( STR ) ; </@> 
<%> <*> relational _ full _ annotation _ names . instance . schema , provider _ full _ annotation _ names ? . schema , -> relational _ annotation _ names . schema , </%> <@> var root _ type = entity _ type . root _ type ( ) ; return get _ annotations ( root _ type ) . discriminator _ property ; </@> <%> <*> var property _ name = ( string ) annotations . get _ annotation ( relational _ full _ annotation _ names . instance . discriminator _ property , provider _ full _ annotation _ names ? . discriminator _ property ) ; -> var property _ name = ( string ) annotations . get _ annotation ( relational _ annotation _ names . discriminator _ property ) ; </%> <%> <*> { -> = > </%> <%> <-> } </%>
<%> <+> { test _ helpers . assert _ results ( o _ query ( northwind _ data . set < t _ item > ( ) ) . to _ array ( ) , ef _ query ( context . set < t _ item > ( ) ) . to _ array ( ) , assert _ order , asserter ) ; assert . equal ( entry _ count , context . change _ tracker . entries ( ) . count ( ) ) ; } } </%> <@> func < i _ queryable < t _ item > , i _ queryable < long > > query , bool assert _ order = false ) </@> 
 <@> private async task < int > assert _ query < t _ item > ( </@> <%> <-> return </%>
<%> <-> < int > </%> <@> return test _ helpers . assert _ results ( </@> <%> <-> < int > </%>
<%> <-> return </%> <@> private async task < int > assert _ query < t _ item > ( </@> <%> <-> return </%>
<%> <-> < int > </%> <@> return test _ helpers . assert _ results ( </@> <%> <-> < int > </%>
<%> <-> return </%> <@> private async task < int > assert _ query < t _ item > ( </@> <%> <-> return </%>
<%> <-> < int > </%> <@> return test _ helpers . assert _ results ( </@> <%> <-> < int > </%>
<%> <-> return </%> <@> private async task < int > assert _ query < t _ item , t _ item > ( </@> <%> <-> return </%>
<%> <-> < int > </%> <@> return test _ helpers . assert _ results ( </@> <%> <*> private async task < int > assert _ query < t _ item > ( -> private async task assert _ query < t _ item , t _ item > ( </%> <%> <+> func < i _ queryable < t _ item > , i _ queryable < t _ item > , task < bool > > query , bool assert _ order = false ) where t _ item : class </%>
<%> <*> private async task < int > assert _ query < t _ item > ( -> private async task assert _ query < t _ item , t _ item > ( </%> <%> <+> func < i _ queryable < t _ item > , i _ queryable < t _ item > , task < bool > > query , bool assert _ order = false ) where t _ item : class where t _ item : class { using ( var context = create _ context ( ) ) { test _ helpers . assert _ results ( new [ ] { await query ( northwind _ data . set < t _ item > ( ) , northwind _ data . set < t _ item > ( ) ) } , new [ ] { await query ( context . set < t _ item > ( ) , context . set < t _ item > ( ) ) } , assert _ order ) ; } } private async task assert _ query < t _ item , t _ item > ( func < i _ queryable < t _ item > , i _ queryable < t _ item > , task < int > > query , bool assert _ order = false ) where t _ item : class where t _ item : class { using ( var context = create _ context ( ) ) { test _ helpers . assert _ results ( new [ ] { await query ( northwind _ data . set < t _ item > ( ) , northwind _ data . set < t _ item > ( ) ) } , new [ ] { await query ( context . set < t _ item > ( ) , context . set < t _ item > ( ) ) } , assert _ order ) ; } } private async task assert _ query < t _ item , t _ item > ( func < i _ queryable < t _ item > , i _ queryable < t _ item > , task < long > > query , bool assert _ order = false ) where t _ item : class where t _ item : class { using ( var context = create _ context ( ) ) { test _ helpers . assert _ results ( new [ ] { await query ( northwind _ data . set < t _ item > ( ) , northwind _ data . set < t _ item > ( ) ) } , new [ ] { await query ( context . set < t _ item > ( ) , context . set < t _ item > ( ) ) } , assert _ order ) ; } } private async task assert _ query < t _ item , t _ item , t _ item > ( func < i _ queryable < t _ item > , i _ queryable < t _ item > , i _ queryable < t _ item > , task < bool > > query , bool assert _ order = false ) where t _ item : class where t _ item : class where t _ item : class { using ( var context = create _ context ( ) ) { test _ helpers . assert _ results ( new [ ] { await query ( northwind _ data . set < t _ item > ( ) , northwind _ data . set < t _ item > ( ) , northwind _ data . set < t _ item > ( ) ) } , new [ ] { await query ( context . set < t _ item > ( ) , context . set < t _ item > ( ) , context . set < t _ item > ( ) ) } , assert _ order ) ; } } private async task assert _ query < t _ item > ( </%> <@> return test _ helpers . assert _ results ( </@> <%> <*> private -> protected </%> <%> <-> < int > </%> <%> <+> int entry _ count = 0 , </%>
<%> <-> return </%> <%> <+> new [ ] { await </%> <%> <*> . to _ array ( ) -> } </%> <%> <+> new [ ] { </%> <%> <*> . to _ array _ async ( ) , -> } , </%> <%> <*> asserter ) ; -> ( os , efs ) = > asserter ( os . single ( ) , efs . single ( ) ) ) ; </%> <%> <+> assert . equal ( entry _ count , context . change _ tracker . entries ( ) . count ( ) ) ; </%> <@> private async task < int > assert _ query < t _ item , t _ item > ( </@> <%> <-> return </%>
<%> <-> < int > </%> <@> return test _ helpers . assert _ results ( </@> <%> <-> < int > </%>
<%> <-> return </%> <@> private async task < int > assert _ query < t _ item , t _ item , t _ item > ( </@> <%> <-> return </%>
<%> <-> < int > </%> <@> return test _ helpers . assert _ results ( </@> <%> <*> private async task < int > assert _ query < t _ item > ( func < i _ queryable < t _ item > , i _ queryable < int > > query , bool assert _ order = false ) -> private async task assert _ query < t _ item > ( </%> <%> <+> func < i _ queryable < t _ item > , i _ queryable < int > > query , bool assert _ order = false , </%>
 <@> constraint STR my _ pk STR primary key nonclustered ( STR foo STR , STR bar STR ) </@> <%> <-> new create _ table _ operation ( table ) , generate _ idempotent _ sql : false ) . sql ) ; } fact public void generate _ when _ create _ table _ operation _ with _ identity _ key ( ) { column foo , bar ; var table = new table ( STR , </%>
<%> <*> assert . equal ( STR , generate ( new rename _ column _ operation ( STR , STR , STR ) , generate _ idempotent _ sql : false ) . sql ) ; -> assert . throws < not _ implemented _ exception > ( ( ) = > generate ( </%> <%> <+> new rename _ column _ operation ( STR , STR , STR ) ) . sql ) ; </%> <@> STR , generate ( new add _ primary _ key _ operation ( STR , STR , new [ ] { STR , STR } , is _ clustered : false ) , generate _ idempotent _ sql : false ) . sql ) ; </@> <%> <-> , generate _ idempotent _ sql : false </%>
 <@> if ( type _ mapping _ source . find _ mapping ( target _ type ) ! = null | | target _ type . get _ type _ info ( ) . is _ interface </@> <%> <*> | | parameter _ binding _ factories . find _ factory ( property _ info . property _ type , property _ info . name ) ! = null ) -> | | parameter _ binding _ factories . find _ factory ( property _ info . property _ type , property _ info . name ) ! = null </%> <%> <+> | | type _ mapping _ source . find _ mapping ( target _ type ) ! = null ) </%>
 <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> <%> <-> _ skip _ issue </%>
<%> <-> _ skip _ issue </%> <@> conditional _ theory _ skip _ issue </@> 
 <@> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) </@> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%>
<%> <*> from -> to </%> <%> <-> . state _ manager </%> <%> <-> , message </%> <%> <+> , message </%> <@> assert _ sent _ messages _ consistent ( login ) ; assert _ sent _ messages _ consistent ( login , message ) ; </@> <%> <*> from -> to </%> <%> <-> . state _ manager </%>
<%> <-> assert _ sent _ messages _ consistent ( null , message ) ; </%> <%> <*> from -> to </%> <%> <-> . state _ manager </%> <%> <-> , message </%> <%> <+> , message </%> <@> assert _ sent _ messages _ consistent ( login ) ; assert _ sent _ messages _ consistent ( login , message ) ; </@> <%> <+> p = > </%> <%> <+> ( p ) </%>
<%> <*> sender -> recipient </%> <%> <-> . state _ manager </%> <%> <-> , message </%> <%> <+> , message </%> <@> assert _ sent _ messages _ consistent ( login ) ; assert _ sent _ messages _ consistent ( login , message ) ; </@> <%> <*> sender -> recipient </%> <%> <-> . state _ manager </%>
<%> <-> assert _ sent _ messages _ consistent ( null , message ) ; </%> <%> <*> sender -> recipient </%> <%> <-> . state _ manager </%> <%> <-> , message </%> <%> <+> , message </%> <@> assert _ sent _ messages _ consistent ( login ) ; assert _ sent _ messages _ consistent ( login , message ) ; </@> <%> <+> p = > </%> <%> <+> ( p ) </%> <%> <+> p = > </%> <%> <+> ( p ) </%>
 <@> using microsoft _ data _ entity _ migrations _ utilities ; using microsoft _ data _ entity _ relational ; </@> <%> <+> _ relational </%>
 <@> using microsoft _ data _ entity _ migrations _ infrastructure ; using microsoft _ data _ entity _ relational ; </@> <%> <-> using microsoft _ data _ entity _ utilities ; </%> <%> <*> migrations -> relational </%> <%> <+> _ migrations </%>
 <@> return operation _ processor . process ( operations , new metadata . model ( ) , model ) ; </@> <%> <-> metadata . </%>
<%> <-> metadata . </%> <@> return operation _ processor . process ( operations , model , new metadata . model ( ) ) ; </@> 
 <@> using microsoft _ data _ entity _ migrations _ infrastructure ; using microsoft _ data _ entity _ relational ; </@> <%> <+> _ relational </%>
 <@> using microsoft _ data _ entity _ migrations _ infrastructure ; using microsoft _ data _ entity _ relational ; </@> <%> <+> _ relational </%>
 <@> not _ null reverse _ engineering _ generator generator , not _ null i _ entity _ type entity _ type , can _ be _ null string namespace _ name ) </@> <%> <+> check . not _ null ( generator , nameof ( generator ) ) ; check . not _ null ( entity _ type , nameof ( entity _ type ) ) ; check . not _ null ( namespace _ name , nameof ( namespace _ name ) ) ; </%> <%> <+> check . not _ null ( sb , nameof ( sb ) ) ; </%>
 <@> not _ null reverse _ engineering _ generator generator , not _ null i _ entity _ type entity _ type , can _ be _ null string namespace _ name ) </@> <%> <+> check . not _ null ( generator , nameof ( generator ) ) ; check . not _ null ( entity _ type , nameof ( entity _ type ) ) ; check . not _ empty ( namespace _ name , nameof ( namespace _ name ) ) ; </%>
<%> <+> < int > </%> <%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%> <@> public task < object > execute _ scalar _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true ) </@> <%> <-> , cancellation _ token cancellation _ token = default ( cancellation _ token ) </%> <%> <*> ) -> , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </%>
<%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%> <@> public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true , i _ read _ only _ dictionary < string , object > parameters = null ) </@> 
<%> <*> void -> int </%> <%> <+> < int > </%> <%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%> <@> public task < object > execute _ scalar _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true ) </@> <%> <-> , cancellation _ token cancellation _ token = default ( cancellation _ token ) </%> <%> <*> ) -> , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </%>
<%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%> <@> public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true , i _ read _ only _ dictionary < string , object > parameters = null ) </@> 
 <@> = > ( int ) await create _ has _ tables _ command ( ) . execute _ scalar _ async ( connection , cancellation _ token ) ! = 0 ; </@> <%> <+> raw _ </%>
<%> <*> void -> int </%> <%> <+> return 0 ; </%> <%> <+> < int > </%> <%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%> <@> public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true , i _ read _ only _ dictionary < string , object > parameters = null ) </@> <%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%>
<%> <-> , cancellation _ token cancellation _ token = default ( cancellation _ token ) </%> <%> <*> ) -> , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </%> <@> public task < object > execute _ scalar _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true ) </@> 
<%> <-> ( cancellation _ token ) </%> <@> verify _ produced _ expression < int , bool > ( value = > value . any _ async ( e = > true , default ( cancellation _ token ) ) ) ; </@> 
<%> <-> ( cancellation _ token ) </%> <@> verify _ produced _ expression < int , int > ( value = > value . single _ async ( e = > true , default ( cancellation _ token ) ) ) ; </@> <%> <-> ( cancellation _ token ) </%> <%> <-> ( cancellation _ token ) </%> <%> <-> ( cancellation _ token ) </%>
<%> <+> { if ( query _ source ! = null ) </%> <@> if ( query _ source ! = null ) { demote _ query _ source ( query _ source ) ; } } ) ; </@> 
 <@> = typeof ( random ) . get _ runtime _ method ( nameof ( random . next ) , new type [ ] { typeof ( int ) } ) ; </@> <%> <-> type </%>
<%> <-> type </%> <@> = typeof ( random ) . get _ runtime _ method ( nameof ( random . next ) , new type [ ] { typeof ( int ) , typeof ( int ) } ) ; </@> 
<%> <*> if -> for </%> <%> <*> result ! -> var i </%> <%> <*> null ) -> 0 ; i < entity _ tracking _ infos . count ; i + + ) </%> <%> <*> for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) -> var entity _ or _ collection = entity _ accessors [ i ] ( result as t _ in ) ; </%> <%> <+> if ( entity _ or _ collection ! = null ) </%> <%> <*> or -> tracking </%> <%> <*> collection -> info </%> <%> <+> _ tracking </%> <%> <*> accessors -> infos </%> <%> <*> ( result as t _ in ) ; -> ; </%> <%> <*> or -> tracking </%> <%> <*> collection ! = null -> info . is _ enumerable _ target </%> <%> <*> var entity _ tracking _ info = entity _ tracking _ infos [ i ] ; if ( entity _ tracking _ info . is _ enumerable _ target ) -> foreach ( var entity in ( i _ enumerable ) entity _ or _ collection ) </%> <@> foreach ( var entity in ( i _ enumerable ) entity _ or _ collection ) { query _ context . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ; } </@> <%> <-> else </%> <%> <*> { -> } </%> <%> <*> query _ context . start _ tracking ( entity _ or _ collection , entity _ tracking _ infos [ i ] ) ; -> else </%> <%> <*> } -> { </%> <%> <+> query _ context . start _ tracking ( entity _ or _ collection , entity _ tracking _ infos [ i ] ) ; </%> <%> <+> } </%>
<%> <*> or -> tracking </%> <%> <*> collection -> info </%> <%> <+> _ tracking </%> <%> <*> accessors -> infos </%> <%> <*> ( result as t _ in ) ; -> ; </%> <%> <*> or -> tracking </%> <%> <*> collection ! = null -> info . is _ enumerable _ target </%> <%> <*> var entity _ tracking _ info = entity _ tracking _ infos [ i ] ; if ( entity _ tracking _ info . is _ enumerable _ target ) -> foreach ( var entity in ( i _ enumerable ) entity _ or _ collection ) </%> <%> <-> foreach ( var entity in ( i _ enumerable ) entity _ or _ collection ) { </%> <%> <-> } </%> <@> else { query _ context . start _ tracking ( entity _ or _ collection , entity _ tracking _ infos [ i ] ) ; } </@> <%> <+> } </%>
<%> <*> state _ manager . state _ changing ( this , entity _ state . unchanged ) ; -> var notifier = configuration . state _ entry _ notifier ; </%> <%> <+> notifier . state _ changing ( this , entity _ state . unchanged ) ; </%> <%> <*> state _ manager -> notifier </%> <@> return state _ manager . create _ key ( entity _ type , entity _ type . get _ key ( ) . properties , this ) ; </@> <%> <-> state _ manager . </%> <%> <*> return state _ manager . create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . referenced _ properties , this ) ; -> return create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . referenced _ properties , this ) ; </%> <%> <+> } </%>
<%> <*> state _ manager -> notifier </%> <%> <-> state _ manager . </%> <@> return state _ manager . create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . properties , this ) ; </@> <%> <*> return state _ manager . create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . referenced _ properties , this ) ; -> return create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . referenced _ properties , this ) ; </%> <%> <+> } private entity _ key create _ key ( i _ entity _ type entity _ type , i _ read _ only _ list < i _ property > properties , state _ entry entry ) { return configuration . entity _ key _ factory _ source . get _ key _ factory ( properties ) </%>
<%> <*> sets = new context _ entity _ sets ( this , configuration . entity _ set _ source ) ; configuration . entity _ set _ initializer . initialize _ sets ( this ) ; model = new lazy _ ref < i _ model > ( ( ) = > configuration . model _ source . get _ model ( this ) ) ; state _ manager = new lazy _ ref < state _ manager > ( ( ) = > configuration . state _ manager _ factory . create ( model . value ) ) ; -> var scoped _ provider = configuration </%> <%> <+> . service _ provider . get _ service < i _ service _ scope _ factory > ( ) . create _ scope ( ) . service _ provider ; configuration = scoped _ provider . get _ service < context _ configuration > ( ) . initialize ( scoped _ provider , this ) ; sets = configuration . context _ entity _ sets ; sets . initialize _ sets ( this ) ; </%> <%> <*> internal void call _ on _ configuring ( entity -> public virtual context </%> <%> <*> _ builder builder ) -> configuration </%> <%> <*> on _ configuring ( builder ) -> get { return configuration </%> <%> <+> } </%> <%> <+> internal </%> <@> internal void call _ on _ model _ creating ( model _ builder builder ) { on _ model _ creating ( builder ) ; } protected virtual void on _ model _ creating ( [ not _ null ] model _ builder builder ) </@> <%> <*> return configuration . data _ store . save _ changes _ async ( state _ manager . value . state _ entries , model , cancellation _ token ) ; -> return configuration . data _ store . save _ changes _ async ( </%>
<%> <+> { type _ mapping = sql _ constant . type _ mapping ; var values = ( i _ enumerable ) sql _ constant . value ; foreach ( var value in values ) </%> <%> <*> type _ mapping = sql _ constant . type _ mapping ; var values = ( i _ enumerable ) sql _ constant . value ; foreach ( var value in values ) -> if ( value = = null ) </%> <@> if ( value = = null ) { has _ null _ value = true ; continue ; } in _ values . add ( value ) ; </@> <%> <+> in _ values . add ( value ) ; </%> <%> <+> } </%> <%> <+> { type _ mapping = sql _ parameter . type _ mapping ; var values = ( i _ enumerable ) parameters _ values [ sql _ parameter . name ] ; foreach ( var value in values ) </%>
<%> <+> } </%> <%> <+> { type _ mapping = sql _ parameter . type _ mapping ; var values = ( i _ enumerable ) parameters _ values [ sql _ parameter . name ] ; foreach ( var value in values ) </%> <%> <*> type _ mapping = sql _ parameter . type _ mapping ; var values = ( i _ enumerable ) parameters _ values [ sql _ parameter . name ] ; foreach ( var value in values ) -> if ( value = = null ) </%> <@> if ( value = = null ) { has _ null _ value = true ; continue ; } in _ values . add ( value ) ; </@> <%> <+> in _ values . add ( value ) ; </%> <%> <+> } </%>
<%> <+> { if ( value = = null ) </%> <@> if ( value = = null ) { has _ null _ value = true ; continue ; } in _ values . add ( value ) ; </@> <%> <+> in _ values . add ( value ) ; } </%>
<%> <+> in _ values . add ( value ) ; } </%> <%> <+> { if ( value = = null ) </%> <@> if ( value = = null ) { has _ null _ value = true ; continue ; } in _ values . add ( value ) ; </@> <%> <+> in _ values . add ( value ) ; } </%>
<%> <+> , false </%> <%> <*> 2 -> 1 </%> <@> assert . equal ( STR , store _ command . relational _ command . parameters [ 1 ] . invariant _ name ) ; assert . equal ( 2 , store _ command . parameter _ values . count ) ; </@> <%> <-> assert . equal ( 1 , store _ command . parameter _ values [ STR ] ) ; </%>
 <@> conditional _ fact _ skip _ query _ issue </@> <%> <*> enumerable . first _ or _ default ( -> ( </%>
 <@> fact _ skip _ query _ issue </@> <%> <+> ( ) . as _ no _ tracking </%>
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> <@> theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> <@> theory _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> <@> theory _ skip _ query _ issue </@> 
 <@> theory _ skip _ tasklist _ include </@> <%> <-> _ skip _ tasklist _ include </%>
<%> <-> _ skip _ tasklist _ include </%> <@> theory _ skip _ tasklist _ include </@> 
 <@> theory _ skip _ tasklist _ include </@> <%> <-> _ skip _ tasklist _ include </%>
<%> <-> _ skip _ tasklist _ include </%> <@> theory _ skip _ tasklist _ include </@> 
 <@> theory _ skip _ tasklist _ include </@> <%> <-> _ skip _ tasklist _ include </%>
<%> <-> _ skip _ tasklist _ include </%> <@> theory _ skip _ tasklist _ include </@> 
 <@> theory _ skip _ tasklist _ include </@> <%> <-> _ skip _ tasklist _ include </%>
<%> <-> _ skip _ tasklist _ include </%> <@> theory _ skip _ tasklist _ include </@> 
 <@> theory _ skip _ tasklist _ include </@> <%> <-> _ skip _ tasklist _ include </%>
<%> <-> _ skip _ tasklist _ include </%> <@> theory _ skip _ tasklist _ include </@> 
 <@> theory _ skip _ tasklist _ include </@> <%> <-> _ skip _ tasklist _ include </%>
<%> <-> _ skip _ tasklist _ include </%> <@> theory _ skip _ tasklist _ include </@> 
 <@> theory _ skip _ tasklist _ include </@> <%> <-> _ skip _ tasklist _ include </%>
<%> <-> _ skip _ tasklist _ include </%> <@> theory _ skip _ tasklist _ include </@> 
 <@> theory _ skip _ tasklist _ include </@> <%> <-> _ skip _ tasklist _ include </%>
<%> <-> _ skip _ tasklist _ include </%> <@> theory _ skip _ tasklist _ include </@> 
 <@> theory _ skip _ tasklist _ include </@> <%> <-> _ skip _ tasklist _ include </%>
<%> <-> _ skip _ tasklist _ include </%> <@> theory _ skip _ tasklist _ include </@> 
 <@> theory _ skip _ tasklist _ include </@> <%> <-> _ skip _ tasklist _ include </%>
<%> <-> _ skip _ tasklist _ include </%> <@> theory _ skip _ tasklist _ include </@> 
 <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> <%> <-> _ skip _ query _ issue </%>
<%> <-> _ skip _ query _ issue </%> <@> fact _ skip _ query _ issue </@> 
 <@> public override i _ model _ builder _ factory model _ builder _ factory = > model _ builder _ factory ; </@> <%> <-> i _ </%>
<%> <-> i _ </%> <@> public override i _ model _ source model _ source = > model _ source ; </@> 
 <@> public override i _ model _ builder _ factory model _ builder _ factory = > model _ builder _ factory ; </@> <%> <-> i _ </%>
<%> <-> i _ </%> <@> public override i _ model _ source model _ source = > model _ source ; </@> 
 <@> benchmark _ skip _ see _ issue </@> <%> <+> . select ( </%>
 <@> STR , typeof ( navigation _ as _ property ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , </@> <%> <*> core _ strings . property _ not _ mapped ( STR , typeof ( int ) . display _ name ( ) , typeof ( primitive _ property _ entity ) . display _ name ( full _ name : false ) ) , -> core _ strings . property _ not _ mapped ( </%>
<%> <*> STR , typeof ( navigation _ as _ property ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , -> typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) , </%> <%> <+> STR , typeof ( navigation _ as _ property ) . display _ name ( full _ name : false ) ) , </%> <@> core _ strings . property _ not _ mapped ( STR , typeof ( int ) . display _ name ( ) , typeof ( primitive _ property _ entity ) . display _ name ( full _ name : false ) ) , </@> <%> <*> core _ strings . property _ not _ added ( STR , typeof ( cancellation _ token ) . name , typeof ( non _ primitive _ value _ type _ property _ entity ) . display _ name ( full _ name : false ) ) , -> core _ strings . property _ not _ added ( </%>
<%> <*> core _ strings . property _ not _ mapped ( STR , typeof ( int ) . display _ name ( ) , typeof ( primitive _ property _ entity ) . display _ name ( full _ name : false ) ) , -> core _ strings . property _ not _ mapped ( </%> <%> <+> typeof ( primitive _ property _ entity ) . display _ name ( full _ name : false ) , STR , typeof ( int ) . display _ name ( ) ) , </%> <@> core _ strings . property _ not _ added ( STR , typeof ( cancellation _ token ) . name , typeof ( non _ primitive _ value _ type _ property _ entity ) . display _ name ( full _ name : false ) ) , </@> 
<%> <+> entity _ type . display _ name ( ) , </%> <%> <-> ) , entity _ type . display _ name ( </%> <@> actual _ property . name , property _ type . display _ name ( full _ name : false ) , entity _ type . display _ name ( ) ) ) ; </@> <%> <+> entity _ type . display _ name ( ) , </%> <%> <-> ) , entity _ type . display _ name ( </%>
<%> <+> entity _ type . display _ name ( ) , </%> <%> <-> ) , entity _ type . display _ name ( </%> <@> actual _ property . name , property _ type . display _ name ( full _ name : false ) , entity _ type . display _ name ( ) ) ) ; </@> <%> <+> entity _ type . display _ name ( ) , </%> <%> <-> ) , entity _ type . display _ name ( </%>
<%> <+> entity _ type . display _ name ( ) , </%> <%> <-> ) , entity _ type . display _ name ( </%> <@> actual _ property . name , property _ type . display _ name ( full _ name : false ) , entity _ type . display _ name ( ) ) ) ; </@> 
 <@> assert . equal ( core _ strings . property _ not _ mapped ( STR , typeof ( long ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , </@> <%> <*> assert . equal ( core _ strings . property _ not _ mapped ( STR , typeof ( long ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , -> assert . equal ( core _ strings . property _ not _ mapped ( </%>
<%> <*> assert . equal ( core _ strings . property _ not _ mapped ( STR , typeof ( long ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , -> assert . equal ( core _ strings . property _ not _ mapped ( </%> <%> <+> typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) , STR , typeof ( long ) . display _ name ( full _ name : false ) ) , </%> <@> assert . equal ( core _ strings . property _ not _ mapped ( STR , typeof ( long ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , </@> 
 <@> list < tuple < property _ info , type > > referencing _ navigations _ with _ attribute ; if ( ! inverse _ navigations . try _ get _ value ( inverse _ navigation , out referencing _ navigations _ with _ attribute ) ) </@> <%> <-> ( equals </%> <%> <*> , -> . is _ same _ as ( </%>
<%> <+> var expected _ principal _ properties = principal _ type . properties . to _ list ( ) ; var expected _ dependent _ properties = dependent _ type . properties . to _ list ( ) ; </%> <@> . foreign _ key < order _ details > ( e = > e . order _ id ) . referenced _ key < order > ( e = > e . order _ id ) ; </@> <%> <*> equal -> same ( fk . get _ navigation _ to _ principal </%> <%> <*> STR -> ) </%> <%> <-> . name </%> <%> <*> equal -> same ( fk . get _ navigation _ to _ dependent </%> <%> <*> STR -> ) </%> <%> <-> . name </%> <%> <*> new [ ] { STR , STR , -> expected _ </%> <%> <-> key . </%> <%> <-> . single ( ) . name } </%> <%> <-> . select ( p = > p . name ) </%> <%> <*> new [ ] { -> expected _ </%> <%> <-> key . </%> <%> <-> . single ( ) . name , fk _ property . name } </%> <%> <-> . select ( p = > p . name ) </%>
<%> <-> _ principal _ and </%> <%> <*> dependent -> creates </%> <%> <*> can -> fk </%> <%> <*> be -> when </%> <%> <*> flipped -> principal </%> <%> <*> in -> and </%> <%> <*> both -> foreign </%> <%> <*> ways -> key </%> <%> <*> in -> specified </%> <%> <*> reverse -> on </%> <%> <*> order -> principal </%> <@> var dependent _ type = model . get _ entity _ type ( typeof ( order _ details ) ) ; var principal _ type = model . get _ entity _ type ( typeof ( order ) ) ; </@> <%> <+> var expected _ principal _ properties = principal _ type . properties . to _ list ( ) ; var expected _ dependent _ properties = dependent _ type . properties . to _ list ( ) ; </%> <%> <*> referenced -> foreign </%> <%> <*> foreign -> referenced </%>
 <@> return create _ get _ store _ value _ expression ( j _ object _ expression , store _ name , property . get _ type _ mapping ( ) , property . clr _ type ) ; } private static expression create _ get _ store _ value _ expression ( </@> <%> <-> core _ type _ mapping </%> <%> <+> clr </%> <%> <*> mapping -> type </%> <%> <+> core _ </%> <%> <-> clr </%> <%> <+> mapping </%> <%> <+> _ mapping = null </%> <%> <*> j _ token -> inner </%> <%> <-> expression . call ( </%> <%> <*> , get _ item _ method _ info , expression . constant ( store _ name ) ) ; -> ; </%> <%> <+> if ( projection _ bindings . try _ get _ value ( j _ object _ expression , out var inner _ variable ) ) { inner _ expression = inner _ variable ; } </%>
 <@> { return navigation _ binding _ expression . root _ parameter . build _ property _ access ( navigation _ binding _ expression . navigation _ tree _ node . to _ mapping ) ; } </@> <%> <*> var include _ result = apply _ includes ( navigation _ expansion _ expression ) ; var state = include _ result . state ; var result = visit ( include _ result . operand ) ; -> var ( result , state ) = apply _ includes ( navigation _ expansion _ expression ) ; </%> <%> <+> result = visit ( result ) ; </%>
<%> <-> private string get _ name ( ) = > ( expression as key _ access _ expression ) ? . name ? ? ( expression as object _ access _ expression ) ? . name ? ? ( expression as entity _ projection _ expression ) ? . alias ; </%> <@> public override int get _ hash _ code ( ) = > hash _ code . combine ( base . get _ hash _ code ( ) , alias , expression ) ; </@> 
<%> <*> public virtual void add _ db _ parameter ( not _ null db _ command command , can _ be _ null object value ) -> public virtual void add _ db _ parameter ( db _ command command , object value ) </%> <@> . add ( type _ mapper . get _ mapping _ for _ value ( value ) . create _ parameter ( command , name , value , null ) ) ; </@> 
 <@> var nullable _ string _ values = new string [ ] { STR , STR , null } ; </@> <%> <-> bool </%> <%> <-> string </%> <%> <-> int </%> <%> <*> int -> var </%> <%> <*> int -> var </%> <%> <*> int -> var </%>
<%> <*> if ( formatter ! = null ) -> var message = formatter ? . invoke ( state , exception ) ; </%> <%> <+> if ( ! string . is _ null _ or _ white _ space ( message ) ) </%> <%> <*> var message = formatter ( state , exception ) ; if ( ! string . is _ null _ or _ white _ space ( message ) ) -> lock ( log _ file _ path ) </%> <@> lock ( log _ file _ path ) { file . append _ all _ text ( log _ file _ path , message + environment . new _ line ) ; } </@> <%> <*> public bool is _ enabled ( log _ level log _ level ) { return true ; } -> public bool is _ enabled ( log _ level log _ level ) = > true ; </%>
 <@> var nullable _ string _ values = new string [ ] { STR , STR , null } ; </@> <%> <-> bool </%> <%> <-> string </%> <%> <-> int </%> <%> <*> int -> var </%> <%> <*> int -> var </%> <%> <*> int -> var </%>
<%> <-> } </%> <@> var collection _ navigation = navigations . where ( n = > n . is _ collection ( ) ) . single _ or _ default ( ) ; </@> 
<%> <*> public override i _ async _ enumerable < t _ result > query < t _ result > ( query _ model query _ model , state _ manager state _ manager ) -> public override i _ enumerable < t _ result > query < t _ result > ( query _ model query _ model , state _ manager state _ manager ) </%> <@> var query _ model _ visitor = new query _ model _ visitor ( ) ; var query _ executor = query _ model _ visitor . create _ query _ executor < t _ result > ( query _ model ) ; </@> <%> <*> return new completed _ async _ enumerable < t _ result > ( query _ executor ( query _ context ) ) ; -> return query _ executor ( query _ context ) ; </%> <%> <+> } public override i _ async _ enumerable < t _ result > async _ query < t _ result > ( query _ model query _ model , state _ manager state _ manager ) { check . not _ null ( query _ model , STR ) ; check . not _ null ( state _ manager , STR ) ; var query _ executor = new async _ query _ model _ visitor ( ) . create _ query _ executor < t _ result > ( query _ model ) ; var query _ context = new relational _ query _ context ( model , logger , state _ manager , connection , value _ reader _ factory ) ; </%>
 <@> public static object handle _ exception < t _ request > ( i _ app _ host app _ host , t _ request request , exception ex ) </@> <%> <+> if ( app _ host ! = null ) </%>
<%> <+> public list < tuple < object , int > > get _ priority _ instances ( ) </%> <%> <+> priority _ </%> <%> <-> modular _ startup _ config . </%> <%> <*> x . has _ interface ( typeof ( i _ pre _ configure _ services ) ) | | x . has _ interface ( typeof ( i _ post _ configure _ services ) ) | | x . has _ interface ( typeof ( i _ pre _ configure _ app ) ) | | x . has _ interface ( typeof ( i _ post _ configure _ app ) ) ) ) ; if ( modular _ startup _ config . startup _ type ! = null ) -> x . has _ interface ( typeof ( i _ configure _ services ) ) | | </%> <%> <+> x . has _ interface ( typeof ( i _ configure _ app ) ) ) ) ; if ( startup _ type ! = null ) </%> <@> startup _ instance = create _ startup _ instance ( modular _ startup _ config . startup _ type ) ; </@> <%> <+> priority _ </%> <%> <+> < tuple </%> <%> <+> , int > </%> <%> <+> priority _ </%> <%> <*> instance ) ; -> new tuple < object , int > ( instance , type . first _ attribute < priority _ attribute > ( ) ? . value ? ? 0 ) ) ; </%> <%> <+> priority _ instances . sort ( ( x , y ) = > x . item . compare _ to ( y . item ) ) ; </%> <%> <+> priority _ </%>
<%> <-> output = context . render _ code ( @ STR { { # ul { if : has _ access , each : items , where : ' age > = 2 ' , class : [ ' nav ' , ! disclaimer _ accepted ? ' blur ':' ' ] , id : ` ul - $ { id } ` } } } { { # li { class : { alt : is _ odd ( index ) , active : name = = highlight } } } { { name } } { { / li } } { { else } } < div > no items < / div > { { / ul } } STR items = new [ ] { new person ( STR , 1 ) , new person ( STR , 2 ) , new person ( STR , NUM ) } , id = STR , disclaimer _ accepted = false , has _ access = true , highlight = STR , digits = new [ ] { STR , STR , STR , STR , STR , STR , STR , STR , STR , STR } , } ) ; assert . that ( output . normalize _ new _ lines ( ) , is . equal _ to ( @ STR < ul class = STR nav blur STR id = STR ul - menu STR > < li > bar < / li > < li class = STR alt active STR > baz < / li > < / ul > STR output = context . render _ code ( @ STR { { # partial content } } - list item { { / partial } } ' < > title < / > ' | raw ' content ' | partial | markdown STR assert . that ( output . remove _ new _ lines ( ) , is . equal _ to ( STR . remove _ new _ lines ( ) ) ) ; </%> <%> <-> { { </%> <%> <-> } } </%> <@> { { / raw } } </@> <%> <-> { { </%> <%> <-> } } </%> <%> <*> { -> ` $ </%> <%> <-> } </%> <%> <*> { -> $ </%> <%> <*> } -> ` </%> <%> <-> { { </%> <%> <-> } } { { </%> <%> <*> } } -> STR </%> <%> <-> STR </%>
 <@> foreach ( var request _ filter in config . request _ filters ) </@> <%> <-> config . </%>
<%> <-> config . </%> <@> foreach ( var response _ filter in config . response _ filters ) </@> 
<%> <+> route _ return _ ireturnvoid _ ge public class return _ i _ return _ void _ dto _ request : i _ return < i _ return _ void > , i _ get { } </%> <@> public class return _ void _ dto _ request : i _ return < i _ return _ void > , i _ get </@> 
 <@> var path _ controller = string . intern ( path _ parts [ 0 ] . to _ lower ( ) ) ; </@> <%> <-> string . intern ( </%> <%> <-> ) </%>
<%> <-> string . intern ( </%> <%> <-> ) </%> <@> var path _ action = string . intern ( path _ parts [ 1 ] . to _ lower ( ) ) ; </@> 
<%> <+> ( </%> <%> <+> ) </%> <@> var enum _ value = convert . change _ type ( value , type . get _ type _ code ( type ) ) . to _ string ( ) ; </@> 
 <@> var path _ controller = string . intern ( path _ parts [ 0 ] . to _ lower ( ) ) ; </@> <%> <-> string . intern ( </%> <%> <-> ) </%>
<%> <-> array . convert _ all ( </%> <%> <*> , -> . map ( </%> <%> <*> ; -> . to _ array ( ) ; </%> <@> t _ delegate d = delegate . create _ delegate ( typeof ( t _ delegate ) , this _ parameter , target _ method , false </@> 
 <@> var response = page _ result . return _ value ? . result ; if ( response ! = null ) </@> <%> <+> var response = page _ result . return _ value ? . result ; </%> <%> <*> template -> sharp </%> <%> <-> _ pages </%>
<%> <*> object -> reqstar </%> <@> public object any ( routeless _ reqstar request ) </@> <%> <*> object -> list < reqstar > </%>
 <@> if ( ( mi . return _ type ! = typeof ( object ) & & mi . return _ type ! = typeof ( void ) ) | | mi . get _ parameters ( ) . length ! = 1 ) </@> <%> <-> var response _ type = return _ marker ! = null </%>
 <@> api _ member _ parameter _ type _ path _ description _ range _ description _ data _ type _ double _ is _ required _ true </@> <%> <-> references _ typeof _ check _ service _ model _ operations _ hello </%> <%> <+> references _ typeof _ check _ service _ model _ operations _ hello </%>
<%> <*> api _ allowable _ values _ color _ typeof _ color data _ member _ name _ aliased public string color { get ; set ; } -> api _ allowable _ values _ color _ name _ typeof _ my _ color </%> <%> <+> data _ member public string color _ name { get ; set ; } api _ member api _ allowable _ values _ color _ typeof _ my _ color data _ member public my _ color color { get ; set ; } </%> <@> data _ member _ name _ aliased </@> <%> <-> _ name _ aliased </%> <%> <-> _ name _ aliased </%>
<%> <+> data _ member public string color _ name { get ; set ; } api _ member api _ allowable _ values _ color _ typeof _ my _ color data _ member public my _ color color { get ; set ; } </%> <%> <-> _ name _ aliased </%> <@> data _ member _ name _ aliased </@> <%> <-> _ name _ aliased </%>
<%> <-> _ name _ aliased </%> <%> <-> _ name _ aliased </%> <@> data _ member _ name _ aliased </@> 
<%> <*> public override i _ virtual _ directory root _ directory { get { return child _ providers . first _ or _ default ( ) . root _ directory ; } } public override string virtual _ path _ separator { get { return STR ; } } public override string real _ path _ separator { get { return convert . to _ string ( path . directory _ separator _ char ) ; } } -> public override i _ virtual _ directory root _ directory = > child _ providers . first _ or _ default ( ) . root _ directory ; </%> <%> <+> public override string virtual _ path _ separator = > STR ; public override string real _ path _ separator = > convert . to _ string ( path . directory _ separator _ char ) ; </%> <%> <+> _ null </%> <%> <*> STR -> nameof ( child _ providers ) </%> <@> protected override sealed void initialize ( ) { } </@> 
<%> <*> STR -> nameof ( root _ dir _ info ) </%> <@> protected override sealed void initialize ( ) </@> <%> <*> throw new application _ exception ( STR . fmt ( root _ dir _ info . full _ name ) ) ; -> throw new application _ exception ( $ STR ) ; </%>
<%> <*> STR -> nameof ( backing _ assembly ) </%> <@> protected override sealed void initialize ( ) </@> 
 <@> new type [ ] { typeof ( string ) } , null ) ; </@> <%> <*> constructor _ info -> var </%>
<%> <+> $ </%> <%> <*> . fmt ( type _ accessor , type ( type . name , type . generic _ args ) ) ) ; -> ) ; </%> <@> var value = type . enum _ values ! = null ? type . enum _ values [ i ] : null ; </@> <%> <+> $ </%> <%> <-> . fmt ( name ) </%> <%> <+> $ </%> <%> <-> . fmt ( name , value ) </%>
 <@> this . provider = name ; this . auth _ realm = realm ; </@> <%> <-> var auth _ repo = auth _ service . try _ resolve < i _ user _ auth _ repository > ( ) ; if ( auth _ repo = = null ) { </%>
 <@> using system _ globalization ; </@> <%> <+> using system _ globalization ; using system _ net ; using service _ stack _ configuration ; </%> <%> <-> using service _ stack _ configuration ; using service _ stack _ fluent _ validation ; </%> <%> <-> using system ; using system _ net ; </%>
<%> <-> class digest _ auth _ validator : abstract _ validator < authenticate > { public digest _ auth _ validator ( ) { rule _ for ( x = > x . user _ name ) . not _ empty ( ) ; rule _ for ( x = > x . password ) . not _ empty ( ) ; } } </%> <@> this . provider = name ; </@> <%> <-> this . </%> <%> <-> var auth _ repo = auth _ service . try _ resolve < i _ user _ auth _ repository > ( ) ; </%>
<%> <-> class digest _ auth _ validator : abstract _ validator < authenticate > { public digest _ auth _ validator ( ) { rule _ for ( x = > x . user _ name ) . not _ empty ( ) ; rule _ for ( x = > x . password ) . not _ empty ( ) ; } } </%> <%> <-> this . </%> <@> this . auth _ realm = realm ; </@> <%> <-> var auth _ repo = auth _ service . try _ resolve < i _ user _ auth _ repository > ( ) ; if ( auth _ repo = = null ) { </%>
 <@> var tag _ builder = new tag _ builder ( STR ) ; </@> <%> <*> return tag _ builder . to _ mvc _ html _ string ( tag _ render _ mode . self _ closing ) ; -> return tag _ builder . to _ html _ string ( tag _ render _ mode . self _ closing ) ; </%> <%> <+> } public mvc _ html _ string raw ( object content ) { if ( content = = null ) return null ; var str _ content = content as string ; </%>
<%> <-> * * copyright ( c ) microsoft corporation . all rights reserved . * * this software is subject to the microsoft public license ( ms - pl ) . * a copy of the license can be found in the license . htm file included * in this distribution . * * you must not remove this notice , or any other , from this software . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * / </%> <@> using service _ stack _ html ; namespace service _ stack _ markdown </@> 
 <@> var name _ parts = new stack < string > ( ) ; </@> <%> <*> var -> method _ call _ expression </%>
<%> <*> var -> stack < string > </%> <@> var method _ expression = ( method _ call _ expression ) part ; </@> <%> <-> expression . parameters . to _ array ( ) ) ) ; </%>
<%> <*> ? db _ factory . open _ db _ connection ( ) : db _ factory . open _ db _ connection ( named _ connection ) ; -> ? ( req ! = null </%> <%> <+> ? host _ context . app _ host . get _ db _ connection ( req ) : host _ context . try _ resolve < i _ db _ connection _ factory > ( ) . open _ db _ connection ( ) ) : host _ context . try _ resolve < i _ db _ connection _ factory > ( ) . open _ db _ connection ( named _ connection ) ; </%> <@> return filter < from > ( request , typed _ query . create _ query ( get _ db < from > ( ) , model , dynamic _ params , this ) , model ) ; </@> <%> <+> request </%>
<%> <*> return host _ context . service _ controller . execute ( request ) ; -> var response = host _ context . service _ controller . execute ( request ) ; </%> <%> <+> var ex = response as exception ; if ( ex ! = null ) throw ex ; return response ; </%> <@> return host _ context . service _ controller . execute ( request ) ; </@> 
<%> <*> new rsa _ crypto _ service -> create </%> <%> <*> provider -> rsa </%> <%> <-> ( int ) </%> <@> var verified = rsa . verify _ data ( data _ to _ verify , hash _ algorithm , signature ) ; </@> 
<%> <*> new rsa _ crypto _ service -> create </%> <%> <*> provider -> rsa </%> <%> <-> ( int ) </%> <@> var verified = rsa . verify _ data ( data _ to _ verify , hash _ algorithm , signature ) ; </@> 
<%> <*> new rsa _ crypto _ service -> create </%> <%> <*> provider -> rsa </%> <%> <-> ( int ) </%> <@> var verified = rsa . verify _ data ( data _ to _ verify , hash _ algorithm , signature ) ; </@> 
<%> <*> new rsa _ crypto _ service -> create </%> <%> <*> provider -> rsa </%> <%> <-> ( int ) </%> <@> var verified = rsa . verify _ data ( data _ to _ verify , hash _ algorithm , signature ) ; </@> 
 <@> template _ args = new dictionary < string , object > { { markdown _ page . model _ name , person } } ; </@> <%> <+> private razor _ page add _ view _ page ( string page _ name , string page _ path , string page _ contents , string template _ path = null ) { var dynamic _ page = new razor _ page ( markdown _ format , </%>
<%> <*> catch ( http _ listener -> private bool is </%> <%> <*> exception ex ) -> listening </%> <%> <*> if ( environment . os _ version . platform ! = platform _ id . win _ nt | | ex . error _ code ! = NUM ) -> get { return this . is _ started & & this . listener ! = null & & this . listener . is _ listening ; } </%> <%> <-> throw ex ; add _ url _ reservation _ to _ acl ( url _ base ) ; reserved _ url = true ; listener . start ( ) ; } thread _ pool . queue _ user _ work _ item ( listen ) ; if ( reserved _ url ) remove _ url _ reservation _ from _ acl ( url _ base ) ; </%> <@> while ( listener . is _ listening ) </@> 
<%> <*> thread _ pool . queue _ user _ work _ item ( listen ) -> return </%> <%> <+> throw ex ; } thread _ pool . queue _ user _ work _ item ( listen _ callback ) ; if ( reserved _ url ) remove _ url _ reservation _ from _ acl ( url _ base ) ; } </%> <@> while ( this . is _ listening ) { if ( this . listener = = null ) return ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . listener . begin _ get _ context ( listener _ callback , this . listener ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . listener = = null ) return ; </@> 
<%> <+> using service _ stack _ common _ tests ; </%> <@> namespace service _ stack _ common _ tests _ text </@> 
<%> <-> using service _ stack _ text ; </%> <@> namespace service _ stack _ common _ tests _ text </@> 
<%> <-> using service _ stack _ text ; </%> <@> namespace service _ stack _ common _ tests _ text </@> 
 <@> public static void use _ service _ stack ( this i _ application _ builder app , app _ host _ base app _ host ) </@> <%> <+> return app ; } public static i _ application _ builder use ( this i _ application _ builder app , system . web . i _ http _ async _ handler http _ handler ) { return app . use ( http _ handler . middleware ) ; </%>
<%> <+> private static readonly bool using _ integrated _ pipeline = false ; </%> <%> <+> try { using _ integrated _ pipeline = http _ runtime . using _ integrated _ pipeline ; } catch ( exception ignore ) { } </%> <@> if ( ! http _ runtime . using _ integrated _ pipeline ) </@> 
 <@> get { return files . cast < i _ virtual _ file > ( ) ; } </@> <%> <-> . cast < i _ virtual _ directory > ( ) </%>
<%> <-> . cast < i _ virtual _ file > ( ) </%> <@> get { return dirs . cast < i _ virtual _ directory > ( ) ; } </@> 
 <@> public type body _ type { get ; set ; } </@> <%> <-> body _ </%>
<%> <-> using service _ stack _ orm _ lite ; </%> <@> namespace service _ stack _ service _ interface </@> 
 <@> using service _ stack _ fluent _ validation ; using service _ stack _ service _ interface _ auth ; </@> <%> <-> _ service _ interface </%>
<%> <-> _ fluent </%> <%> <*> validation -> auth </%> <%> <-> _ service </%> <%> <*> interface -> fluent </%> <%> <*> auth -> validation </%> <@> namespace service _ stack _ service _ interface </@> 
 <@> public class requires _ custom _ auth _ service : service _ interface . service </@> <%> <-> service _ stack . service _ interface . </%>
<%> <-> _ interface . service </%> <@> public class custom _ authenticate _ attribute : service _ stack . service _ interface . authenticate _ attribute </@> 
<%> <-> using service _ stack _ service _ host ; </%> <@> public class base _ service < t > : service _ interface . service </@> 
<%> <-> using service _ stack _ service _ host ; </%> <@> namespace service _ stack _ service _ interface </@> 
<%> <-> using service _ stack _ service _ host ; </%> <@> namespace service _ stack _ service _ interface </@> 
 <@> public class exception _ with _ response _ status _ service : service _ interface . service </@> <%> <-> _ interface . service </%>
<%> <-> _ interface . service </%> <@> public class exception _ no _ response _ status _ service : service _ interface . service </@> <%> <-> _ interface . service </%>
<%> <-> _ interface . service </%> <@> public class exception _ no _ response _ dto _ service : service _ interface . service </@> <%> <-> _ interface . service </%>
<%> <-> _ interface . service </%> <@> public class uncatched _ exception _ service : service _ interface . service </@> 
 <@> public class exception _ with _ response _ status _ service : service _ interface . service </@> <%> <-> _ interface . service </%>
<%> <-> _ interface . service </%> <@> public class exception _ no _ response _ status _ service : service _ interface . service </@> <%> <-> _ interface . service </%>
<%> <-> _ interface . service </%> <@> public class exception _ no _ response _ dto _ service : service _ interface . service </@> 
<%> <*> common -> auth </%> <%> <-> using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; </%> <@> namespace service _ stack _ service _ interface </@> 
<%> <+> using service _ stack _ auth ; </%> <@> using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; namespace service _ stack _ service _ interface </@> 
<%> <-> using service _ stack _ common ; </%> <%> <-> using service _ stack _ web ; </%> <@> namespace service _ stack _ service _ interface </@> 
<%> <-> using system _ linq ; using system _ net ; </%> <%> <*> system -> service _ stack </%> <%> <*> web -> auth </%> <%> <-> using service _ stack _ common ; using service _ stack _ configuration ; </%> <%> <-> using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; </%> <@> namespace service _ stack _ service _ interface </@> 
 <@> class uncached _ proto _ buf _ email _ service : service _ interface . service </@> <%> <-> _ interface . service </%>
<%> <-> _ interface . service </%> <@> class cached _ proto _ buf _ email _ service : service _ interface . service </@> 
<%> <+> using service _ stack _ auth ; </%> <%> <*> using service _ stack _ service _ interface _ auth ; using service _ stack _ service _ interface _ testing ; -> using service _ stack _ testing ; </%> <@> namespace service _ stack _ service _ interface </@> 
<%> <-> using service _ stack _ service _ host ; </%> <@> public class check _ box _ service : service _ interface . service </@> 
<%> <-> _ service _ interface </%> <@> namespace service _ stack _ service _ interface </@> 
<%> <+> using service _ stack _ auth ; </%> <@> using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; namespace service _ stack _ service _ interface </@> 
<%> <-> using service _ stack _ service _ host ; </%> <@> public class mini _ profiler _ service : service _ interface . service </@> 
<%> <*> common -> auth </%> <%> <-> using service _ stack _ service _ interface _ auth ; </%> <@> using service _ stack _ web _ host _ endpoints ; using service _ stack _ web _ host _ endpoints _ wrappers ; namespace service _ stack _ service _ interface </@> 
 <@> public class multiple _ test _ request _ service : service _ interface . service </@> <%> <-> _ interface . service </%>
<%> <-> _ interface . service </%> <@> public class swagger _ feature _ service : service _ interface . service </@> 
<%> <+> using service _ stack _ auth ; </%> <%> <-> using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; </%> <@> namespace service _ stack _ service _ interface </@> 
<%> <-> using service _ stack _ service _ host ; </%> <@> public class custom _ form _ data _ service : service _ interface . service </@> 
<%> <*> common -> auth </%> <%> <-> using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; </%> <@> namespace service _ stack _ service _ interface </@> 
<%> <-> using service _ stack _ service _ host ; </%> <@> namespace service _ stack _ service _ interface </@> 
<%> <*> if ( raw _ url . contains ( endpoint _ host . config . service _ stack _ handler _ factory _ path ) ) -> if ( raw _ url . contains ( endpoint _ host . config . service _ stack _ handler _ factory _ path + STR ) </%> <%> <+> | | raw _ url . ends _ with ( endpoint _ host . config . service _ stack _ handler _ factory _ path ) ) { if ( context . request . physical _ path ! = web _ host _ physical _ path | | ! file . exists ( path . combine ( context . request . physical _ path , default _ root _ file _ name ) ) ) </%> <%> <*> return new default _ http _ handler ( ) ; -> } </%> <%> <+> return default _ http _ handler ; </%> <@> ? ? new default _ http _ handler ( ) ; </@> <%> <+> var existing _ file = path _ parts [ 0 ] . to _ lower ( ) ; if ( web _ host _ root _ file _ names . contains ( existing _ file ) ) { </%>
<%> <-> , </%> <@> assert . that ( test _ utils . normalize _ new _ lines ( result ) , is . equal _ to ( STR ) ) ; </@> <%> <*> test _ utils -> result </%> <%> <-> result </%> <%> <*> test _ utils -> result </%> <%> <-> result </%>
<%> <*> test _ utils -> result </%> <%> <-> result </%> <@> assert . that ( test _ utils . normalize _ new _ lines ( result ) , is . equal _ to ( STR ) ) ; </@> <%> <*> test _ utils -> result </%> <%> <-> result </%> <%> <-> var context = new script _ context { </%>
<%> <*> test _ utils -> result </%> <%> <-> result </%> <%> <*> test _ utils -> result </%> <%> <-> result </%> <@> assert . that ( test _ utils . normalize _ new _ lines ( result ) , is . equal _ to ( STR ) ) ; </@> <%> <*> var context = new script _ context { } . init ( ) ; -> var context = new script _ context ( ) . init ( ) ; </%>
 <@> public static void add _ item _ to _ scope ( this template _ scope _ context scope , string item _ binding , object item , int index ) </@> <%> <+> return scope . add _ item _ to _ scope ( item _ binding , item ) ; } public static template _ scope _ context add _ item _ to _ scope ( this template _ scope _ context scope , string item _ binding , object item ) { </%>
<%> <+> using service _ stack _ admin ; </%> <@> namespace service _ stack _ admin </@> 
<%> <*> funq _ perf ( ) ; -> native _ funq _ perf ( ) ; </%> <%> <+> auto _ wired _ funq _ perf ( ) ; </%> <@> var type _ factory = get _ hiro _ type _ factory ( ) ; register _ services ( service _ controller , type _ factory ) ; </@> <%> <+> native _ </%> <%> <-> var type _ factory = get _ func _ type _ factory ( ) ; register _ services ( service _ controller , type _ factory ) ; </%>
 <@> var type _ factory = get _ hiro _ type _ factory ( ) ; register _ services ( service _ controller , type _ factory ) ; </@> <%> <+> _ native </%> <%> <*> var type _ factory = get _ func _ type _ factory ( ) ; register _ services ( service _ controller , type _ factory ) ; -> register _ services ( service _ controller , get _ native _ funq _ type _ factory ( ) ) ; </%> <%> <+> store _ and _ get _ customers ( service _ controller ) ; </%>
 <@> static private readonly string web _ host _ physical _ path = null ; static private readonly string default _ root _ file _ name = null ; </@> <%> <-> static </%> <%> <+> static </%> <%> <-> static </%> <%> <+> static </%> <%> <-> static </%> <%> <+> static </%> <%> <-> static </%> <%> <+> static </%> <%> <-> static </%> <%> <+> static </%>
<%> <*> get { if ( default _ operation _ namespace = = null ) { default _ operation _ namespace = get _ default _ namespace ( ) ; } return default _ operation _ namespace ; } set { default _ operation _ namespace = value ; } -> get { return default _ operation _ namespace ? ? ( default _ operation _ namespace = get _ default _ namespace ( ) ) ; } </%> <%> <+> set { default _ operation _ namespace = value ; } </%> <@> if ( ! string . is _ null _ or _ empty ( default _ operation _ namespace ) ) return null ; </@> <%> <-> string . </%>
<%> <+> set { default _ operation _ namespace = value ; } </%> <%> <-> string . </%> <@> if ( string . is _ null _ or _ empty ( attr . namespace ) ) continue ; </@> 
<%> <*> public static string get _ physical _ path ( this i _ request http _ req ) { return host _ context . resolve _ physical _ path ( http _ req . path _ info , http _ req ) ; } public static i _ virtual _ file get _ virtual _ file ( this i _ request http _ req ) { return host _ context . resolve _ virtual _ file ( http _ req . path _ info , http _ req ) ; } public static i _ virtual _ directory get _ virtual _ directory ( this i _ request http _ req ) { return host _ context . resolve _ virtual _ directory ( http _ req . path _ info , http _ req ) ; } public static i _ virtual _ node get _ virtual _ node ( this i _ request http _ req ) { return host _ context . resolve _ virtual _ node ( http _ req . path _ info , http _ req ) ; } -> public static string get _ physical _ path ( this i _ request http _ req ) = > host _ context . resolve _ physical _ path ( http _ req . path _ info , http _ req ) ; </%> <%> <+> public static i _ virtual _ file get _ virtual _ file ( this i _ request http _ req ) = > host _ context . resolve _ virtual _ file ( http _ req . path _ info , http _ req ) ; public static i _ virtual _ directory get _ virtual _ directory ( this i _ request http _ req ) = > host _ context . resolve _ virtual _ directory ( http _ req . path _ info , http _ req ) ; public static i _ virtual _ node get _ virtual _ node ( this i _ request http _ req ) = > host _ context . resolve _ virtual _ node ( http _ req . path _ info , http _ req ) ; </%> <@> return string . is _ null _ or _ empty ( path ) | | path [ path . length - 1 ] = = '/' </@> 
 <@> if ( string . is _ null _ or _ empty ( last _ path _ info ) ) return null ; </@> <%> <+> , string _ comparison . ordinal </%> <%> <+> , string _ comparison . ordinal </%> <%> <+> , string _ comparison . ordinal </%>
<%> <+> , string _ comparison . ordinal </%> <%> <+> , string _ comparison . ordinal </%> <%> <+> , string _ comparison . ordinal </%> <@> if ( string . is _ null _ or _ empty ( path _ info ) ) </@> 
 <@> if ( ! string . is _ null _ or _ empty ( request . path _ info ) ) return request . path _ info . trim _ end ( '/' ) ; </@> <%> <-> string . </%>
<%> <-> string . </%> <@> if ( ! string . is _ null _ or _ empty ( path _ info ) ) return path _ info ; </@> <%> <-> string . </%>
<%> <-> string . </%> <@> if ( ! string . is _ null _ or _ empty ( path _ info ) ) return path _ info ; </@> 
 <@> if ( ! string . is _ null _ or _ empty ( specified _ content _ type ) ) return specified _ content _ type ; </@> <%> <-> string . </%>
<%> <-> string . </%> <@> var has _ default _ content _ type = ! string . is _ null _ or _ empty ( default _ content _ type ) ; </@> 
 <@> if ( string . is _ null _ or _ empty ( from _ path _ info ) ) </@> <%> <-> string . </%>
<%> <-> string . </%> <@> if ( string . is _ null _ or _ empty ( absolute _ uri ) ) </@> 
<%> <*> if ( feature . on _ init ! = null ) feature . on _ init ( req ) ; -> feature . on _ init ? . invoke ( req ) ; </%> <@> var user _ auth _ id = session ! = null ? session . user _ auth _ id : null ; </@> 
<%> <-> ! = null </%> <%> <-> o </%> <%> <-> : null </%> <@> var feature = app _ host ! = null ? app _ host . get _ plugin < server _ events _ feature > ( ) : null ; </@> 
<%> <-> new [ ] { </%> <%> <-> } </%> <@> var register _ method _ info = method _ info . make _ generic _ method ( new [ ] { service _ type } ) ; </@> <%> <-> new [ ] { </%> <%> <-> } </%>
<%> <-> new [ ] { </%> <%> <-> } </%> <@> var register _ method _ info = method _ info . make _ generic _ method ( new [ ] { service _ type } ) ; </@> 
 <@> if ( ! string . is _ null _ or _ empty ( specified _ content _ type ) ) </@> <%> <-> string . </%>
<%> <-> string . </%> <@> else if ( string . is _ null _ or _ empty ( config . default _ content _ type ) ) </@> 
<%> <-> if ( app _ host = = null ) return null ; </%> <@> return has _ container ! = null ? has _ container . container : null ; </@> 
 <@> var response = request _ context ! = null ? request _ context . response : null ; </@> <%> <*> if ( response ! = null ) response . set _ content _ length ( file _ info . length + padding _ length ) ; -> response ? . set _ content _ length ( file _ info . length + padding _ length ) ; </%>
 <@> public static js _ token to _ token ( this object value , js _ binding binding ) </@> <%> <*> constant -> literal </%> <%> <+> _ js </%> <%> <+> _ js </%> <%> <+> _ js </%>
<%> <+> if ( config _ utils . get _ nullable _ app _ setting ( namespaces _ app _ settings _ key ) ! = null ) { config _ utils . get _ list _ from _ app _ setting ( namespaces _ app _ settings _ key ) . for _ each ( x = > razor _ namespaces . add ( x ) ) ; } return razor _ namespaces ; } } </%> <@> system . reflection . assembly entry _ assembly ; </@> <%> <-> system . reflection . </%>
<%> <*> return rule _ set _ to _ generate _ client _ side _ rules . contains ( rule . rule _ set ) ; -> bool execute _ default _ rule = ( rule _ set _ to _ generate _ client _ side _ rules . contains ( STR , string _ comparer . ordinal _ ignore _ case ) </%> <%> <+> & & ( rule . rule _ sets . length = = 0 | | rule . rule _ sets . contains ( STR , string _ comparer . ordinal _ ignore _ case ) ) ) ; return rule _ set _ to _ generate _ client _ side _ rules . intersect ( rule . rule _ sets , string _ comparer . ordinal _ ignore _ case ) . any ( ) | | execute _ default _ rule ; </%> <@> var supports _ client _ validation = validator as system . web . mvc . i _ client _ validatable ; </@> 
 <@> auto _ query _ viewer _ title _ explore _ stack _ overflow _ questions _ description _ find _ service _ stack _ questions _ on _ stack _ overflow _ icon _ url _ material _ icons _ cast _ default _ search _ field _ title _ default _ search _ type _ contains _ default _ search _ text _ service _ stack </@> <%> <+> , i _ meta </%>
<%> <*> i _ http _ error -> exception </%> <@> first _ async _ error = async _ responses [ i ] ; return first _ async _ error ; </@> 
 <@> public static i _ list < array _ result > get ( this i _ hello _ array _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ array body = default ( hello _ array ) ) </@> <%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ array body = default ( hello _ array </%> <%> <-> , body </%>
<%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ array body = default ( hello _ array </%> <%> <-> , body </%> <@> public static i _ list < array _ result > create ( this i _ hello _ array _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ array body = default ( hello _ array ) ) </@> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%>
<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%> <@> public static i _ list < array _ result > post ( this i _ hello _ array _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ array body = default ( hello _ array ) ) </@> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%>
<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%> <@> public static i _ list < array _ result > delete ( this i _ hello _ array _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ array body = default ( hello _ array ) ) </@> <%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ array body = default ( hello _ array </%> <%> <-> , body </%>
 <@> public static i _ list < list _ result > get ( this i _ hello _ list _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ list body = default ( hello _ list ) ) </@> <%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ list body = default ( hello _ list </%> <%> <-> , body </%>
<%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ list body = default ( hello _ list </%> <%> <-> , body </%> <@> public static i _ list < list _ result > create ( this i _ hello _ list _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ list body = default ( hello _ list ) ) </@> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%>
<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%> <@> public static i _ list < list _ result > post ( this i _ hello _ list _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ list body = default ( hello _ list ) ) </@> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%>
<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%> <@> public static i _ list < list _ result > delete ( this i _ hello _ list _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ list body = default ( hello _ list ) ) </@> <%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ list body = default ( hello _ list </%> <%> <-> , body </%>
 <@> var value = type . enum _ values ! = null ? type . enum _ values [ i ] : null ; </@> <%> <-> STR . fmt ( </%> <%> <-> ) </%> <%> <+> $ </%> <%> <-> . fmt ( name , value ) </%>
<%> <+> $ </%> <%> <*> . fmt ( type _ declaration , type ( type . name , type . generic _ args ) ) ) ; -> ) ; </%> <@> var value = type . enum _ values ! = null ? type . enum _ values [ i ] : null ; </@> <%> <+> $ </%> <%> <-> . fmt ( name ) </%> <%> <+> $ </%> <%> <-> . fmt ( name , value ) </%>
 <@> dispose ( ) ; } public void dispose ( ) { if ( app _ host = = null ) return ; app _ host . dispose ( ) ; app _ host = null ; } </@> <%> <*> console -> json </%> <%> <*> write _ line -> print </%> <%> <-> json </%>
 <@> return type _ serializer . serialize _ and _ format ( request _ obj ) ; </@> <%> <-> endpoint _ </%> <%> <*> . config -> _ context </%> <%> <*> endpoint -> host </%> <%> <*> host -> context </%>
<%> <*> var app _ host = get _ app _ host ( ) ; var container = app _ host ! = null ? app _ host . config . service _ manager . container : null ; -> var container = host _ context . container ; </%> <@> if ( container ! = null ) container . auto _ wire ( attr _ instance ) ; </@> <%> <*> if ( app _ host ! = null ) app _ host . release ( attr _ instance ) ; -> host _ context . release ( attr _ instance ) ; </%>
<%> <*> if ( app _ host ! = null ) app _ host . release ( attr _ instance ) ; -> host _ context . release ( attr _ instance ) ; </%> <@> if ( container ! = null ) container . auto _ wire ( attr _ instance ) ; </@> <%> <*> if ( app _ host ! = null ) app _ host . release ( attr _ instance ) ; -> host _ context . release ( attr _ instance ) ; </%>
 <@> var c = app _ host . container ; var dto _ a _ validator = ( dto _ a _ request _ validator ) c . try _ resolve < i _ validator < dto _ a > > ( ) ; </@> <%> <*> c -> app _ host </%> <%> <*> c -> app _ host </%>
<%> <*> dictionary -> list </%> <%> <-> string , </%> <@> return provider _ o _ auth _ access . values </@> 
 <@> var page = feature . html _ pages . get _ page ( path _ info ) ; </@> <%> <*> if ( catch _ all _ paths _ not _ found . count > NUM ) -> if ( ! path _ info . ends _ with ( STR ) & & app _ host . virtual _ file _ sources . directory _ exists ( path _ info . trim _ prefixes ( STR ) ) ) </%> <%> <+> return new redirect _ http _ handler { relative _ url = path _ info + STR , status _ code = http _ status _ code . moved _ permanently } ; if ( catch _ all _ paths _ not _ found . count > server _ html _ feature . prevent _ dos _ max _ size ) </%>
 <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve </@> 
 <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve _ all _ members _ true </@> 
 <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve </@> 
 <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve _ all _ members _ true </@> 
 <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve </@> 
 <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve </@> <%> <-> mono _ touch _ foundation _ </%>
<%> <-> mono _ touch _ foundation _ </%> <@> mono _ touch _ foundation _ preserve _ all _ members _ true </@> 
 <@> includ _ file = { { ' file . txt ' | include _ file } } </@> <%> <*> assert . that ( test _ utils . normalize _ new _ lines ( new page _ result ( context . get _ page ( STR ) ) . result ) , is . equal _ to ( test _ utils . normalize _ new _ lines ( @ STR include _ url = includ _ file = file contents STR -> assert . throws < not _ supported _ exception > ( ( ) = > { </%> <%> <+> var ignore = new page _ result ( context . get _ page ( STR ) ) . result ; } ) ; </%>
<%> <+> _ description </%> <%> <+> _ description </%> <%> <+> _ status _ code </%> <%> <-> default </%> <%> <+> data _ member </%> <@> api _ member _ description _ range _ description _ parameter _ type _ path _ data _ type _ double _ is _ required _ true </@> <%> <-> string _ length references _ typeof _ check _ service _ model _ operations _ hello meta _ foo _ bar public virtual string name { get ; set ; } </%>
<%> <+> _ description </%> <%> <+> _ description </%> <%> <+> _ status _ code </%> <@> api _ member _ parameter _ type _ path _ description _ range _ description _ data _ type _ double _ is _ required _ true </@> 
<%> <+> _ description </%> <%> <+> _ description </%> <%> <+> _ status _ code </%> <%> <+> data _ member required public virtual int id { get ; set ; } </%> <@> api _ member _ description _ range _ description _ parameter _ type _ path _ data _ type _ double _ is _ required _ true </@> 
 <@> public interface i _ message < t > </@> <%> <+> } public interface i _ message < t > : i _ message </%>
 <@> def ( STR , 1 , ( i , a ) = > { print ( i , str ( a [ 0 ] , false ) ) ; return a [ 0 ] ; </@> <%> <*> def ( STR , 1 , ( i , a ) = > -> def ( STR , - 1 , ( i , a ) = > { var c = ( cell ) a [ 0 ] ; foreach ( var x in c ) </%> <%> <*> writeln -> write </%> <%> <*> a [ 0 ] -> x </%> <%> <-> return a [ 0 ] ; </%> <%> <+> } </%>
 <@> stream _ serializer = type _ serializer . serialize _ to _ stream , </@> <%> <+> } private static void serialize _ to _ stream ( i _ request _ context request _ context , object dto , stream stream ) { type _ serializer . serialize _ to _ stream ( dto , stream ) ; </%>
<%> <*> mime -> response _ content </%> <%> <-> var http _ req = request _ context . get < i _ http _ request > ( ) ; </%> <@> factory _ fn , http _ req . response _ content _ type , request _ context . compression _ type , cache _ client , cache _ key , null ) ; </@> <%> <-> var http _ req = request _ context . get < i _ http _ request > ( ) ; </%> <%> <-> , http _ req . response _ content _ type </%> <%> <-> . compression _ type </%>
<%> <*> factory _ fn , http _ req . response _ content _ type , request _ context . compression _ type , cache _ client , cache _ key , null ) ; -> factory _ fn , request _ context , cache _ client , cache _ key , null ) ; </%> <%> <-> var http _ req = request _ context . get < i _ http _ request > ( ) ; </%> <@> factory _ fn , http _ req . response _ content _ type , request _ context . compression _ type , </@> 
 <@> stream _ serializer = xml _ serializer . serialize _ to _ stream , </@> <%> <+> } private static void serialize _ to _ stream ( i _ request _ context request _ context , object dto , stream stream ) { xml _ serializer . serialize _ to _ stream ( dto , stream ) ; </%>
<%> <+> using service _ stack _ service _ host ; </%> <@> csv _ serializer . serialize _ to _ stream , csv _ serializer . deserialize _ from _ stream ) ; </@> <%> <+> public static void serialize _ to _ stream ( i _ request _ context request _ context , object request , stream stream ) </%>
 <@> stream _ serializer = json _ serializer . serialize _ to _ stream , </@> <%> <+> } private static void serialize _ to _ stream ( i _ request _ context request _ context , object dto , stream stream ) { json _ serializer . serialize _ to _ stream ( dto , stream ) ; </%>
 <@> using system _ linq ; </@> <%> <+> public action < swagger _ model > model _ filter { get ; set ; } </%>
<%> <-> using ( var redis = new redis _ generic _ client < t > ( ) ) { </%> <%> <-> _ id </%> <%> <-> _ id </%> <@> } test [ ignore ( STR ) ] </@> <%> <*> using ( var redis = new redis _ generic _ client < t > ( ) ) { list _ members . for _ each ( x = > redis . add _ to _ list ( list _ id , x ) ) ; list _ members . for _ each ( x = > redis . add _ to _ list ( list _ id , x ) ) ; -> list _ members . for _ each ( x = > redis . add _ to _ list ( list , x ) ) ; </%>
 <@> args . append ( STR . fmt ( type _ value ( ctor _ arg . type , ctor _ arg . value ) ) ) ; </@> <%> <+> $ </%> <%> <*> . fmt ( attr _ arg . name , type _ value ( attr _ arg . type , attr _ arg . value ) ) ) ; -> ) ; </%>
 <@> using system _ collections ; </@> <%> <*> service -> system </%> <%> <*> stack -> text </%> <%> <*> cache -> regular </%> <%> <*> access -> expressions </%> <%> <+> public static regex valid _ user _ name _ reg _ ex = new regex ( STR , regex _ options . compiled ) ; </%>
 <@> public static object to _ optimized _ result < t > ( this i _ request request , t dto ) </@> <%> <+> dto = dto . get _ dto ( ) ; </%> <%> <-> ( object ) </%>
<%> <-> to _ array [ i ] = requests _ array [ i ] ; } return exec _ sync < t _ response [ ] > ( to _ array ) . to _ list ( ) ; } finally { </%> <%> <-> } </%> <%> <+> return task . result . to _ list ( ) ; } , token ) ; </%> <@> try { req . set _ item ( keywords . invoke _ verb , http _ methods . post ) ; req . request _ attributes & = ~ request _ attributes . reply ; req . request _ attributes | = request _ attributes . one _ way ; </@> <%> <+> public task publish _ async ( object request _ dto , cancellation _ token token = new cancellation _ token ( ) ) </%>
<%> <-> = null </%> <%> <-> validate _ </%> <%> <*> _ without -> . validate </%> <%> <-> password ( </%> <%> <+> ( password </%> <%> <*> { var salted _ hash = host _ context . resolve < i _ hash _ provider > ( ) ; salted _ hash . get _ hash _ and _ salt _ string ( password , out hash , out salt ) ; } -> host _ context . resolve < i _ hash _ provider > ( ) . get _ hash _ and _ salt _ string ( password , out hash , out salt ) ; </%> <@> { var digest _ helper = new digest _ auth _ functions ( ) ; digest _ hash = digest _ helper . create _ ha ( new _ user . user _ name , digest _ auth _ provider . realm , password ) ; } </@> 
 <@> if ( value . length > redis _ native _ client . one _ gb ) </@> <%> <+> return get _ bytes ( key ) ; } public byte [ ] get _ bytes ( string key ) </%>
<%> <+> var is _ mvc _ host = type . get _ type ( STR ) ! = null ; if ( is _ mvc _ host ) { set _ paths ( STR , null ) ; } } </%> <@> if ( null = = handler _ path ) { return ; } if ( null = = location _ path ) </@> 
 <@> var stream = use _ scope . output _ stream ; using ( stream ) </@> <%> <+> var stream = use _ scope . output _ stream ; </%>
<%> <*> list -> i _ enumerable </%> <%> <*> new list < string > { STR , STR , STR , STR , STR , STR , STR } -> all _ cache _ names </%> <%> <*> list < string > -> [ ] </%> <@> caches = new list < string > ( name _ list ) ; </@> 
<%> <*> public class reverse _ service : service _ base < reverse > -> public class reverse _ service </%> <%> <+> : service _ base < reverse > </%> <%> <*> var value _ bytes = request . value . to _ char _ array ( ) ; -> return new reverse _ response { result = execute ( request . value ) } ; </%> <%> <+> } public static string execute ( string value ) { var value _ bytes = value . to _ char _ array ( ) ; </%> <@> return new reverse _ response { result = new string ( value _ bytes ) } ; </@> 
<%> <*> if ( text _ serializer ! = null ) -> var stream _ serializer = text _ serializer as i _ string _ stream _ serializer ; </%> <%> <+> if ( stream _ serializer ! = null ) </%> <@> var stream _ serializer = text _ serializer as i _ string _ stream _ serializer ; if ( stream _ serializer ! = null ) { return stream _ serializer . deserialize _ from _ stream < t > ( stream ) ; } </@> 
<%> <*> if ( text _ serializer ! = null ) -> var stream _ serializer = text _ serializer as i _ string _ stream _ serializer ; </%> <%> <+> if ( stream _ serializer ! = null ) </%> <@> var stream _ serializer = text _ serializer as i _ string _ stream _ serializer ; if ( stream _ serializer ! = null ) { return stream _ serializer . deserialize _ from _ stream ( type , stream ) ; } </@> 
 <@> if ( string . is _ null _ or _ empty ( to . error _ code ) ) </@> <%> <-> string . </%> <%> <-> if ( string . is _ null _ or _ empty ( error _ code ) ) </%>
<%> <-> string . </%> <@> if ( string . is _ null _ or _ empty ( to . message ) ) </@> <%> <*> if ( string . is _ null _ or _ empty ( error _ code ) ) { if ( string . is _ null _ or _ empty ( to . error _ code ) ) { -> if ( is _ null _ or _ empty ( error _ code ) & & is _ null _ or _ empty ( to . error _ code ) ) </%>
<%> <*> public override bool run _ as _ async ( ) { return true ; } -> public override bool run _ as _ async ( ) { return true ; } </%> <@> var subscription _ id = req . query _ string [ STR ] ; req . try _ resolve < i _ server _ events > ( ) . pulse ( subscription _ id ) ; </@> <%> <+> _ event </%> <%> <*> subscriptions -> subscribers </%> <%> <*> subscriptions -> event _ subscribers </%>
<%> <+> interlocked . increment ( ref </%> <%> <+> ) </%> <@> ? ? STR + interlocked . increment ( ref anon _ user _ id ) ; </@> 
<%> <+> using service _ stack _ auth ; </%> <@> namespace service _ stack _ auth </@> 
 <@> public int? x _ forwarded _ port { get { throw new not _ implemented _ exception ( ) ; } } public string x _ forwarded _ protocol { get { throw new not _ implemented _ exception ( ) ; } } public string x _ real _ ip </@> <%> <+> public string x _ forwarded _ protocol { get { throw new not _ implemented _ exception ( ) ; } } public string x _ real _ ip { get { throw new not _ implemented _ exception ( ) ; } </%>
<%> <+> using service _ stack _ text ; </%> <@> var request _ obj = reflection _ utils . populate _ object ( activator . create _ instance ( dto _ type ) ) ; </@> 
 <@> var var _ value = evaluate _ any _ bindings ( evaluate ( var , arg , scope _ context ) , scope _ context ) ; </@> <%> <+> _ block </%>
<%> <+> _ block </%> <%> <*> filter -> block </%> <%> <+> _ block </%> <@> var var _ value = evaluate _ any _ bindings ( evaluate ( var , arg , scope _ context ) , scope _ context ) ; </@> <%> <+> _ block </%>
<%> <*> var word = system . text . encoding . ut . get _ string ( packet , offset + NUM , word _ len ) ; -> var word = new byte [ word _ len ] ; </%> <%> <+> for ( int j = 0 ; j < word _ len ; j + + ) { word [ j ] = packet [ offset + NUM + j ] ; } </%> <@> internal static byte [ ] encode _ packet ( bool from _ server , bool is _ response , uint id , string [ ] words ) </@> 
 <@> private static byte [ ] encode _ words ( string [ ] words ) </@> <%> <-> ( system . text . encoding . ut . get _ bytes </%> <%> <-> ) </%> <%> <*> system -> word </%> <%> <*> text . encoding . ut . get _ byte _ count ( word ) -> length </%>
<%> <+> scope _ args = scope _ args ? ? new dictionary < string , object > ( ) ; </%> <@> var html = render _ in _ template _ if _ any ( markdown _ page . template _ path , scope _ args , html _ page ) ; </@> 
<%> <+> if ( typeof ( t ) = = typeof ( object ) ) { return jsv _ writer . write _ late _ bound _ object ; } </%> <@> return ( w , x ) = > to _ string _ methods . write _ string ( w , ( string ) x ) ; </@> <%> <-> if ( typeof ( t ) = = typeof ( date _ time ) ) return ( w , x ) = > to _ string _ methods . write _ date _ time ( w , ( date _ time ) x ) ; if ( typeof ( t ) = = typeof ( date _ time ? ) ) return ( w , x ) = > to _ string _ methods . write _ date _ time ( w , ( date _ time ? ) x ) ; if ( typeof ( t ) = = typeof ( guid ) ) return ( w , x ) = > to _ string _ methods . write _ guid ( w , ( guid ) x ) ; if ( typeof ( t ) = = typeof ( guid ? ) ) </%>
<%> <-> this . total _ normal _ messages _ received + + ; </%> <%> <*> last _ message -> if ( do </%> <%> <*> processed -> next ! </%> <%> <*> date _ time . utc -> null & & ! do </%> <%> <*> now ; -> next ( ) ) </%> <%> <-> if ( do _ next ! = null & & ! do _ next ( ) ) </%> <@> var last _ ex = ex ; log . error ( STR + last _ ex . message , ex ) ; </@> 
 <@> public static void add < t > ( this i _ service _ routes service _ routes , string rest _ path , apply _ to verbs , params expression < func < t , object > > [ ] property _ expressions ) </@> <%> <+> return </%>
 <@> i _ async _ result result = this . listener . begin _ get _ context ( new async _ callback ( web _ request _ callback ) , this . listener ) ; </@> <%> <*> if ( listener ! = null ) -> if ( listener = = null ) return ; </%> <%> <+> try </%> <%> <+> } catch ( http _ listener _ exception ex ) </%>
<%> <*> var required _ role _ attrs = auth _ attrs . of _ type < required _ role _ attribute > ( ) . to _ list ( ) ; var requires _ any _ role _ attrs = auth _ attrs . of _ type < requires _ any _ role _ attribute > ( ) . to _ list ( ) ; var required _ perm _ attrs = auth _ attrs . of _ type < required _ permission _ attribute > ( ) . to _ list ( ) ; var requires _ any _ perm _ attrs = auth _ attrs . of _ type < requires _ any _ permission _ attribute > ( ) . to _ list ( ) ; var has _ roles = required _ role _ attrs . count + requires _ any _ role _ attrs . count > 0 ; -> var has _ roles = op . required _ roles . count + op . requires _ any _ role . count > 0 ; </%> <%> <*> attr -> role </%> <%> <*> required _ role -> op . required </%> <%> <*> attrs -> roles </%> <@> foreach ( var role in attr . required _ roles ) { sb _ roles . append ( STR + role ) ; } </@> <%> <*> attr -> role </%> <%> <+> op . </%> <%> <-> _ attrs </%> <%> <-> foreach ( var role in attr . required _ roles ) { </%> <%> <-> } </%>
<%> <*> public bool request _ filter _ executed { get ; set ; } public bool contextual _ request _ filter _ executed { get ; set ; } -> public bool inherited _ response _ filter _ executed { get ; set ; } </%> <%> <*> public class attribute _ filtered _ service : i _ service -> inherited _ request _ filter </%> <%> <+> inherited _ response _ filter public class attribute _ filtered _ service _ base : i _ service { } public class attribute _ attribute _ filtered _ service : attribute _ filtered _ service _ base </%> <@> return new attribute _ filtered _ response ( ) { </@> <%> <+> inherited _ request _ filter _ executed = request . inherited _ request _ filter _ executed , </%>
<%> <-> request . </%> <@> path _ info = request . raw _ url ; </@> 
<%> <+> private static readonly byte [ ] auth _ key = aes _ utils . create _ key ( ) ; </%> <@> auth _ key = aes _ utils . create _ key ( ) , </@> <%> <+> } test public void can _ manually _ create _ an _ authenticated _ user _ session _ in _ token ( ) { var jwt _ provider = create _ jwt _ auth _ provider ( ) ; var header = jwt _ auth _ provider . create _ jwt _ header ( jwt _ provider . hash _ algorithm ) ; var body = jwt _ auth _ provider . create _ jwt _ payload ( new auth _ user _ session { </%>
<%> <*> var mi = get _ type ( ) . get _ method ( STR , binding _ flags . instance | binding _ flags . non _ public ) -> var mi = get _ type ( ) . get _ non _ public _ instance _ method ( STR ) </%> <@> response _ handler = ( action < exception , string > ) delegate . create _ delegate ( typeof ( action < exception , string > ) , this , mi ) ; </@> <%> <*> if ( web _ ex ! = null & & web _ ex . status = = web _ exception _ status . protocol _ error ) -> if ( web _ ex ! = null </%> <%> <+> & & web _ ex . status = = web _ exception _ status . protocol _ error </%>
 <@> var redis _ manager = app _ host . try _ resolve < i _ redis _ clients _ manager > ( ) ; if ( redis _ manager ! = null ) </@> <%> <*> try -> var redis _ manager = app _ host . try _ resolve < i _ redis _ clients _ manager > ( ) ; </%> <%> <+> if ( redis _ manager ! = null ) </%> <%> <*> using ( var client = redis _ manager . get _ client ( ) ) -> try </%> <%> <+> using ( var client = redis _ manager . get _ client ( ) ) { </%>
<%> <*> layout _ key -> keywords . template </%> <@> return result ! = null ? result . item : null ; </@> 
<%> <+> using service _ stack _ common _ web ; </%> <@> attribute _ usage _ attribute _ targets _ class _ attribute _ targets _ method _ inherited _ false _ allow _ multiple _ true </@> <%> <+> public string content _ type { set { name = http _ headers . content _ type ; value = value ; </%>
<%> <*> manager -> controller </%> <@> public service _ manager service _ manager { get ; set ; } public service _ metadata metadata { get { return service _ manager . metadata ; } } public i _ service _ controller service _ controller { get { return service _ manager . service _ controller ; } } </@> <%> <*> public i _ service _ routes routes { get { return service _ controller . routes ; } } -> public i _ service _ routes routes { get ; set ; } </%> <%> <+> public list < rest _ path > rest _ paths = new list < rest _ path > ( ) ; </%> <%> <-> service _ manager . </%>
 <@> var routes = ( service _ routes ) app _ host . routes ; assert . that ( routes . rest _ paths . count , is . equal _ to ( 0 ) ) ; </@> <%> <*> routes -> app _ host </%>
<%> <-> public static service _ manager service _ manager { get ; set ; } </%> <@> return service _ manager ! = null ? service _ manager . metadata . get _ operation _ type ( operation _ name ) : host _ context . metadata . get _ operation _ type ( operation _ name ) ; </@> 
<%> <-> public static service _ manager service _ manager { get { return assert _ app _ host ( ) . service _ manager ; } } </%> <@> get { return assert _ app _ host ( ) . service _ manager . service _ controller ; } </@> 
<%> <*> literal = literal . parse _ var _ name ( out var block _ name ) ; -> literal = literal . as _ span ( ) . parse _ var _ name ( out var block _ name _ span ) . to _ string _ segment ( ) ; </%> <%> <+> var block _ name = block _ name _ span . value ( ) ; </%> <@> var block _ name _ string = block _ name . value ; if ( ! template _ config . dont _ evaluate _ blocks _ named . contains ( block _ name _ string ) ) </@> 
<%> <+> : redis _ client _ tests _ base </%> <%> <*> new -> get _ </%> <%> <-> test _ config . single _ host </%> <@> var value _ string = encoding . ut . get _ string ( value _ bytes ) ; </@> <%> <*> new -> get _ </%> <%> <-> test _ config . single _ host </%>
<%> <*> new -> get _ </%> <%> <-> test _ config . single _ host </%> <@> var value _ string = encoding . ut . get _ string ( value _ bytes ) ; </@> 
<%> <+> if ( layout _ view ! = null ) { </%> <%> <+> return ; } </%> <@> else { page . write _ to ( writer ) ; } </@> 
<%> <*> request -> http _ req </%> <%> <*> response -> http _ res </%> <%> <*> response -> http _ res </%> <@> page . init ( view _ engine : this , http _ req : request , http _ res : response ) ; </@> <%> <*> request -> http _ req </%> <%> <+> , dto </%>
<%> <+> private endpoint _ attributes get _ ip _ address _ endpoint _ attributes ( ip _ address ip _ address ) { </%> <%> <*> port _ restrictions | = -> return </%> <%> <-> else </%> <%> <*> port _ restrictions | = -> return </%> <@> else { port _ restrictions | = endpoint _ attributes . external ; } return port _ restrictions ; </@> <%> <*> foreach ( var ipv _ address _ and _ mask in network _ interface _ ipv _ addresses ) -> var ip _ address _ bytes = ip _ address . get _ address _ bytes ( ) ; </%> <%> <+> switch ( ip _ address . address _ family ) </%> <%> <*> if ( ip _ address . is _ in _ same _ subnet ( ipv _ address _ and _ mask . key , ipv _ address _ and _ mask . value ) ) -> case address _ family . inter _ network : </%> <%> <+> foreach ( var local _ ipv _ address _ and _ mask in network _ interface _ ipv _ addresses ) </%>
<%> <+> } public static byte [ ] get _ network _ address _ bytes ( byte [ ] ip _ adress _ bytes , byte [ ] subnet _ mask _ bytes ) { </%> <@> return new ip _ address ( broadcast _ address ) ; </@> <%> <+> _ ipv </%> <%> <*> , ip _ address subnet _ mask ) -> ) </%> <%> <+> if ( address . address _ family ! = address _ family . inter _ network | | address . address _ family ! = address _ family . inter _ network ) { throw new argument _ exception ( STR ) ; } var address _ bytes = address . get _ address _ bytes ( ) ; var address _ bytes = address . get _ address _ bytes ( ) ; return is _ in _ same _ ipv _ subnet ( address _ bytes , address _ bytes ) ; </%>
<%> <*> new soap _ service _ client ( service _ client _ base _ uri ) , new soap _ service _ client ( service _ client _ base _ uri ) -> new xml _ service _ client ( service _ client _ base _ uri ) , </%> <%> <+> new jsv _ service _ client ( service _ client _ base _ uri ) </%> <@> var response = client . send < attribute _ filtered _ response > ( new attribute _ filtered ( ) { request _ filter _ executed = false } ) ; </@> 
<%> <*> public string subscription _ id { get { return connection _ info ! = null ? connection _ info . id : null ; } } public string connection _ display _ name { get { return connection _ info ! = null ? connection _ info . display _ name : STR ; } } -> public string subscription _ id = > connection _ info ? . id ; </%> <%> <+> public string connection _ display _ name = > connection _ info ! = null ? connection _ info . display _ name : STR ; </%> <@> return meta ! = null ? meta . base _ uri : null ; </@> 
 <@> container . register < i _ cache _ client > ( new memory _ cache _ client ( ) ) ; </@> <%> <+> if ( configure _ fn ! = null ) { configure _ fn ( container ) ; } </%>
<%> <*> get { return response . output _ stream ; } -> get { return buffered _ stream ? ? response . output _ stream ; } </%> <%> <+> } public bool use _ buffered _ stream { get { return buffered _ stream ! = null ; } set { buffered _ stream = value ? buffered _ stream ? ? new memory _ stream ( ) : null ; } } private void flush _ buffer _ if _ any ( ) { if ( buffered _ stream = = null ) return ; var bytes = buffered _ stream . to _ array ( ) ; response . output _ stream . write ( bytes , 0 , bytes . length ) ; buffered _ stream . position = 0 ; </%> <@> var output _ stream = response . output _ stream ; output _ stream . write ( b _ output , 0 , b _ output . length ) ; </@> 
 <@> service _ client . send < registration _ response > ( registration ) ; </@> <%> <-> console . write _ line </%> <%> <+> ) . print ( </%> <%> <-> console . write _ line ( </%> <%> <+> print _ </%> <%> <-> ) </%>
 <@> service _ client . send < registration _ response > ( new _ user _ registration ) ; </@> <%> <*> < assign _ roles _ response > ( -> ( </%>
 <@> service _ client . send < content _ manager _ only _ response > ( new content _ manager _ only ( ) ) ; </@> <%> <*> < assign _ roles _ response > ( -> ( </%>
<%> <*> < assign _ roles _ response > ( -> ( </%> <@> var response = new _ user _ client . send < content _ manager _ only _ response > ( new content _ manager _ only ( ) ) ; </@> <%> <-> < content _ permission _ only _ response > </%>
<%> <-> < content _ manager _ only _ response > </%> <@> service _ client . send < content _ permission _ only _ response > ( new content _ permission _ only ( ) ) ; </@> <%> <*> < assign _ roles _ response > ( -> ( </%>
<%> <*> < assign _ roles _ response > ( -> ( </%> <@> var response = new _ user _ client . send < content _ permission _ only _ response > ( new content _ permission _ only ( ) ) ; </@> 
 <@> return to _ compressed _ bytes ( to _ serialized _ string ( result , serialize _ ctx ) , compression _ type ) ; </@> <%> <+> public static byte [ ] to _ compressed _ bytes ( object result , i _ request _ context context ) { result . throw _ if _ null ( STR ) ; context . throw _ if _ null ( STR ) ; return to _ compressed _ bytes ( to _ serialized _ string ( result , context ) , context . compression _ type ) ; } </%>
<%> <*> soap -> this . handler </%> <%> <*> type -> attributes </%> <@> public override object create _ request ( extensions . i _ http _ request request , string operation _ name ) </@> 
<%> <+> using service _ stack _ html ; </%> <%> <-> using service _ stack _ markdown _ html ; </%> <@> public service _ stack . markdown . mvc _ html _ string eval _ expr ( ) </@> 
 <@> var directory _ nodes = backing _ dir _ info . get _ directories ( ) </@> <%> <-> backing _ dir _ info . </%> <%> <+> } private file _ info [ ] get _ files ( ) { </%>
<%> <-> backing _ dir _ info . </%> <@> var file _ nodes = backing _ dir _ info . get _ files ( ) </@> <%> <+> } private file _ info [ ] get _ files ( ) { try { return backing _ dir _ info . get _ files ( ) ; </%>
<%> <-> using system _ text ; using system _ xml ; using system _ collections ; using system _ collections _ generic ; using system _ linq ; using system _ linq _ expressions ; </%> <@> using service _ stack _ html ; using service _ stack _ markdown ; using service _ stack _ utils ; </@> 
<%> <-> using service _ stack _ web ; </%> <@> namespace service _ stack _ utils </@> 
<%> <-> using service _ stack _ clients ; </%> <@> namespace service _ stack _ messaging </@> 
<%> <-> using service _ stack _ clients ; </%> <@> namespace service _ stack _ clients </@> 
<%> <+> using service _ stack _ web ; </%> <@> namespace service _ stack _ web </@> 
<%> <-> using service _ stack _ utils ; </%> <@> namespace service _ stack _ clients </@> 
 <@> namespace service _ stack _ clients </@> <%> <-> : base ( ) </%>
<%> <-> using service _ stack ; </%> <@> using service _ stack _ utils ; namespace service _ stack _ clients </@> 
<%> <-> try { </%> <%> <-> } catch ( exception ex ) { var msg = STR . fmt ( operation _ type , query _ string , ex ) ; throw new serialization _ exception ( msg ) ; } </%> <@> try { return key _ value _ data _ contract _ deserializer . instance . parse ( http _ req . form _ data , operation _ type ) ; } catch ( exception ex ) { throw new serialization _ exception ( STR + http _ req . form _ data , ex ) ; } </@> 
<%> <+> using service _ stack _ mini _ profiler _ data ; </%> <%> <*> mvc -> service _ stack </%> <@> public mini _ profiler profiler { get ; private set ; } </@> <%> <-> mini _ </%>
<%> <+> profiler . </%> <@> internal mini _ profiler profiler { get ; private set ; } </@> 
<%> <-> mini _ </%> <@> storage = new storage . http _ runtime _ cache _ storage ( time _ span . from _ days ( 1 ) ) ; </@> 
 <@> container . register < i _ cache _ client > ( service _ extensions . default _ cache ) ; </@> <%> <-> service _ extensions . </%>
<%> <-> service _ extensions . </%> <@> container . register ( service _ extensions . default _ cache ) ; </@> 
<%> <*> ; -> . sanitize _ o _ auth _ url ( ) ; </%> <@> { STR , photo _ url . sanitize _ o _ auth _ url ( ) } , </@> 
<%> <*> operation -> application </%> <%> <*> operation -> application </%> <@> service _ model _ finder = model _ info . instance , </@> <%> <*> call -> operation </%> <%> <*> call -> operation </%> <%> <*> operation -> application </%> <%> <*> call -> operation </%> <%> <*> operation -> application </%>
<%> <*> public bool include _ all _ types { get ; set ; } public xsd _ metadata ( service _ metadata metadata , bool flash = false , bool include _ all _ types = true ) -> public xsd _ metadata ( service _ metadata metadata , bool flash = false ) </%> <%> <-> include _ all _ types = include _ all _ types ; </%> <@> if ( include _ all _ types ) all _ types . add _ range ( metadata . response _ types ) ; </@> 
<%> <-> string property _ name = null ; string property _ text _ value = null ; </%> <@> foreach ( var pair in key _ value _ pairs . where ( x = > ! string . is _ null _ or _ empty ( x . value ) ) ) </@> <%> <-> try </%> <%> <+> if ( ! string . is _ null _ or _ empty ( pair . value ) ) </%> <%> <-> property _ name = pair . key ; property _ text _ value = pair . value ; if ( ! property _ setter _ map . try _ get _ value ( property _ name , out property _ serializer _ entry ) ) { if ( property _ name = = STR ) { int version ; </%>
<%> <*> res . write ( async _ dto . to _ json ( ) ) ; res . end _ request ( skip _ headers : true ) ; return type _ constants . empty _ task ; -> return res . write _ async ( async _ dto . to _ json ( ) ) </%> <%> <+> . continue _ with ( t = > res . end _ request ( skip _ headers : true ) ) ; </%> <@> res . write _ error ( new argument _ exception ( STR + pos ) ) ; return type _ constants . empty _ task ; </@> 
<%> <*> void -> task </%> <%> <+> _ async </%> <@> wsdl . execute ( http _ req , http _ res ) ; return ; </@> <%> <*> ; -> type _ constants . empty _ task ; </%> <%> <+> return type _ constants . empty _ task ; </%>
<%> <*> void -> task </%> <%> <+> _ async </%> <@> wsdl . execute ( http _ req , http _ res ) ; return ; </@> <%> <*> ; -> type _ constants . empty _ task ; </%> <%> <+> return type _ constants . empty _ task ; </%>
<%> <*> app _ host app -> static i </%> <%> <*> host -> log log </%> <%> <*> test _ fixture -> public integration </%> <%> <*> set -> test </%> <%> <*> up public virtual void test -> base ( ) : base ( STR , typeof ( movie </%> <%> <*> fixture -> rest </%> <%> <*> set _ up ( -> service ) . assembly </%> <%> <*> app _ host = new app _ host ( ) ; app _ host . init ( ) ; -> log _ manager . log _ factory = new debug _ log _ factory ( ) ; </%> <%> <+> log = log _ manager . get _ logger ( get _ type ( ) ) ; instance = null ; init ( ) ; </%> <@> app _ host . start ( base _ url ) ; </@> <%> <+> } public override void configure ( container container ) { container . register < i _ resource _ manager > ( new configuration _ resource _ manager ( ) ) ; container . register ( c = > new example _ config ( c . resolve < i _ resource _ manager > ( ) ) ) ; </%>
 <@> task < http _ web _ response > get _ async ( i _ return _ void request _ dto ) ; </@> <%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%>
<%> <*> task < http _ web _ response > -> task </%> <@> task < http _ web _ response > delete _ async ( i _ return _ void request _ dto ) ; </@> <%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%>
<%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%> <@> task < http _ web _ response > post _ async ( i _ return _ void request _ dto ) ; </@> <%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%>
<%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%> <@> task < http _ web _ response > put _ async ( i _ return _ void request _ dto ) ; </@> <%> <*> task < http _ web _ response > -> task </%>
<%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%> <@> task < http _ web _ response > custom _ method _ async ( string http _ verb , i _ return _ void request _ dto ) ; </@> 
 <@> public virtual task < http _ web _ response > custom _ method _ async ( string http _ verb , i _ return _ void request _ dto ) </@> <%> <*> http _ web _ response -> byte [ ] </%>
<%> <+> var log = endpoint _ host . config . log _ factory . get _ logger ( typeof ( xml _ handler _ base ) ) ; </%> <@> operation _ type , request . query _ string , ex . message ) ; </@> 
<%> <+> var log = endpoint _ host . config . log _ factory . get _ logger ( typeof ( xml _ handler _ base ) ) ; </%> <@> operation _ type , deserializer , form _ data , ex . message ) ; </@> 
<%> <+> using microsoft _ extensions _ configuration ; using service _ stack _ configuration ; </%> <@> using microsoft _ extensions _ configuration ; namespace service _ stack _ configuration </@> 
<%> <+> var init _ collections = feature . should _ initialize _ collections ( type , config . initialize _ collections ) ; </%> <@> init _ collections : ! type . is _ interface ( ) & & config . initialize _ collections , </@> 
<%> <+> var init _ collections = feature . should _ initialize _ collections ( type , config . initialize _ collections ) ; </%> <@> init _ collections : ! type . is _ interface ( ) & & config . initialize _ collections , </@> 
<%> <+> throw service _ ex ; </%> <@> private web _ request send _ request ( object request , string request _ uri ) </@> 
<%> <-> sync _ reply _ </%> <@> var client = send _ request ( request , request _ uri ) ; </@> 
<%> <+> private static readonly encoding encoding = encoding . ut ; </%> <@> using ( var xw = new xml _ text _ writer ( ms , encoding . ut ) ) </@> 
 <@> using ( var xw = new xml _ text _ writer ( deflate _ stream , encoding . ut ) ) </@> <%> <-> . ut </%>
<%> <-> . ut </%> <@> using ( var xw = new xml _ text _ writer ( stream , encoding . ut ) ) </@> 
<%> <*> { typeof ( profiler ) , STR } , { typeof ( timing ) , STR } , { typeof ( sql _ timing ) , STR } , { typeof ( sql _ timing _ parameter ) , STR } -> { typeof ( profiler ) , STR } </%> <@> var result = enable _ batch _ selects ? load _ in _ batch ( conn , id _ parameter ) : load _ individually ( conn , id _ parameter ) ; </@> 
<%> <-> var db _ cmd = db _ conn . create _ command ( ) ; </%> <@> return db _ factory . exec ( db _ cmd = > db _ cmd . select < movie > ( ) ) ; </@> 
 <@> public task assign _ to ( template _ scope _ context scope , object value , string arg _ name ) </@> <%> <*> type -> ignore </%> <%> <*> constants -> result </%> <%> <*> empty _ task -> value </%>
<%> <+> page . init ( ) ; } </%> <%> <*> void -> template _ pages _ context </%> <@> template _ filters . add ( filter . init ( ) ) ; </@> <%> <-> . init ( ) </%> <%> <+> return this ; </%>
<%> <-> . init ( ) </%> <@> code _ pages . add ( code _ page . init ( ) ) ; </@> <%> <+> return this ; </%>
 <@> if ( is _ alphanum ( the _ b ) ) { action ( 1 ) ; } else { action ( 2 ) ; } break ; </@> <%> <*> case '\n' -> default </%> <%> <-> switch ( the _ b ) { case '{' : case '[' : case '(' : case '+' : case '-' : </%>
<%> <+> concurrent _ </%> <%> <+> concurrent _ </%> <@> lock ( this . rwlock ) return this . memory . try _ get _ value ( key , out entry ) ; </@> <%> <-> lock ( this . rwlock ) </%>
<%> <-> lock ( this . rwlock ) </%> <@> lock ( this . rwlock ) this . memory [ key ] = entry ; </@> 
<%> <+> } </%> <@> string serialized _ dto = host _ context . content _ types . serialize _ to _ string ( request , response _ dto ) ; </@> 
<%> <-> params </%> <%> <*> [ ] filters -> filter </%> <%> <*> filters -> filter </%> <%> <*> [ ] filters -> filter </%> <@> foreach ( var filter in filters ) filter . invoke ( container ) . invoke ( request , response , dto ) ; </@> 
 <@> var init _ collections = feature . should _ initialize _ collections ( type , config . initialize _ collections ) ; if ( config . add _ implicit _ version = = null & & ! init _ collections ) </@> <%> <*> init -> config . initialize </%>
 <@> var init _ collections = feature . should _ initialize _ collections ( type , config . initialize _ collections ) ; if ( config . add _ implicit _ version = = null & & ! init _ collections ) </@> <%> <*> init -> config . initialize </%>
<%> <*> return operation ! = null ? operation . request _ type . make _ array _ type ( ) : null ; -> return operation ? . request _ type . make _ array _ type ( ) ; </%> <@> return operation ! = null ? operation . request _ type : null ; </@> <%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%>
<%> <*> return operation ! = null ? operation . request _ type . make _ array _ type ( ) : null ; -> return operation ? . request _ type . make _ array _ type ( ) ; </%> <%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%> <@> return operation ! = null ? operation . service _ type : null ; </@> <%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%>
<%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%> <@> return operation ! = null ? operation . service _ type : null ; </@> <%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%>
<%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%> <@> return operation ! = null ? operation . response _ type : null ; </@> 
 <@> private readonly system . net . http _ listener _ response response ; </@> <%> <-> public object original _ response { get { return response ; } </%>
 <@> readonly bool [ ] components _ with _ separators ; private readonly string rest _ path ; private readonly string allowed _ verbs ; private readonly bool allows _ all _ verbs ; </@> <%> <-> public string [ ] verbs { </%>
 <@> throw new not _ supported _ exception ( string . format ( STR ) ) ; </@> <%> <-> string . format ( </%> <%> <*> STR , attr . path , request _ type . get _ operation _ name ( ) ) -> $ STR </%>
 <@> public static funq . container container </@> <%> <*> null -> new container ( ) </%>
<%> <-> } </%> <%> <*> using ( request _ access ( ) ) -> var now = date _ time . utc _ now ; </%> <%> <+> while ( time _ out = = null | | ( date _ time . utc _ now - now ) < time _ out . value ) </%> <%> <*> now -> basic _ msg </%> <%> <*> date -> get </%> <%> <*> time . utc -> message ( queue </%> <%> <*> now ; while -> name , no _ ack : false ) ; if </%> <%> <*> time -> basic </%> <%> <*> out = -> msg ! </%> <%> <*> | | ( date _ time . utc _ now - now ) < time _ out . value ) -> ) </%> <@> var basic _ msg = get _ message ( queue _ name , no _ ack : false ) ; if ( basic _ msg ! = null ) { return basic _ msg . to _ message < t > ( ) ; } thread . sleep ( NUM ) ; </@> <%> <*> return null -> thread . sleep ( NUM ) </%> <%> <+> return null ; </%> <%> <-> using ( request _ access ( ) ) { </%>
<%> <-> var basic _ msg = get _ message ( queue _ name , no _ ack : false ) ; if ( basic _ msg ! = null ) { </%> <%> <-> } thread . sleep ( NUM ) ; </%> <%> <*> return null -> thread . sleep ( NUM ) </%> <%> <+> return null ; </%> <@> using ( request _ access ( ) ) { var basic _ msg = get _ message ( queue _ name , no _ ack : false ) ; return basic _ msg . to _ message < t > ( ) ; } </@> 
<%> <*> using ( request _ access ( ) ) -> var msg _ result = mq _ response as basic _ get _ result ; </%> <%> <+> if ( msg _ result ! = null ) </%> <@> var msg _ result = mq _ response as basic _ get _ result ; if ( msg _ result ! = null ) { return msg _ result . to _ message < t > ( ) ; } return ( i _ message < t > ) mq _ response ; </@> <%> <+> return ( i _ message < t > ) mq _ response ; </%>
 <@> using ( request _ access ( ) ) { serialize _ request _ to _ stream ( request _ context , request , stream ) ; } </@> <%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%>
<%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%> <@> using ( request _ access ( ) ) { return stream _ deserializer ( type , from _ stream ) ; } </@> <%> <-> using ( request _ access ( ) ) </%>
<%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%> <@> using ( request _ access ( ) ) { var message _ bytes = this . read _ write _ client . r _ pop ( queue _ name ) ; return message _ bytes . to _ message < t > ( ) ; } </@> 
 <@> using ( request _ access ( ) ) { return json _ object . parse ( json ) ; } </@> <%> <+> obsolete _ no _ longer _ required _ use _ json _ from _ json </%> <%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%> <%> <+> obsolete _ no _ longer _ required _ use _ obj _ to _ json </%>
<%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%> <%> <+> obsolete _ no _ longer _ required _ use _ json _ from _ json </%> <@> using ( request _ access ( ) ) { return json . from _ json < t > ( ) ; } </@> <%> <+> obsolete _ no _ longer _ required _ use _ obj _ to _ json </%> <%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%>
<%> <+> obsolete _ no _ longer _ required _ use _ json _ from _ json </%> <%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%> <%> <+> obsolete _ no _ longer _ required _ use _ obj _ to _ json </%> <@> using ( request _ access ( ) ) { return o . to _ json ( ) ; } </@> 
<%> <+> var utf _ bytes = inflate _ bytes ( gz _ buffer ) ; return encoding . ut . get _ string ( utf _ bytes , 0 , utf _ bytes . length ) ; } public byte [ ] inflate _ bytes ( byte [ ] gz _ buffer ) { </%> <@> var utf _ bytes = zip _ stream . read _ fully ( ) ; return encoding . ut . get _ string ( utf _ bytes , 0 , utf _ bytes . length ) ; </@> 
<%> <+> var utf _ bytes = g _ unzip _ bytes ( gz _ buffer ) ; return encoding . ut . get _ string ( utf _ bytes , 0 , utf _ bytes . length ) ; } public byte [ ] g _ unzip _ bytes ( byte [ ] gz _ buffer ) { </%> <@> var utf _ bytes = zip _ stream . read _ fully ( ) ; return encoding . ut . get _ string ( utf _ bytes , 0 , utf _ bytes . length ) ; </@> 
<%> <+> using service _ stack _ support _ web _ host ; </%> <@> using service _ stack _ web _ host _ endpoints _ support ; namespace service _ stack _ web _ host _ endpoints </@> 
<%> <+> using service _ stack _ web _ host ; </%> <@> namespace service _ stack _ cors </@> 
<%> <-> using service _ stack _ common ; </%> <%> <-> using service _ stack _ service _ host ; using service _ stack _ text ; </%> <@> namespace service _ stack _ web _ host _ endpoints _ support </@> 
<%> <-> using service _ stack _ common ; </%> <%> <+> _ support </%> <%> <*> service -> web </%> <%> <+> using service _ stack _ web _ host ; using service _ stack _ web _ host _ asp _ net ; using service _ stack _ web _ host _ endpoints ; </%> <@> using http _ request _ wrapper = service _ stack . web _ host . endpoints . wrappers . http _ request _ wrapper ; namespace service _ stack _ web _ host _ endpoints </@> <%> <*> public class service _ stack _ http _ handler _ factory : i _ http _ handler _ factory -> public class http _ handler _ factory : i _ http _ handler _ factory </%>
<%> <+> using service _ stack _ metadata ; </%> <%> <+> _ support </%> <%> <*> service -> web </%> <@> namespace service _ stack _ web _ host _ endpoints </@> <%> <*> endpoint -> app </%> <%> <*> endpoint -> app </%> <%> <*> endpoint -> app </%>
<%> <-> using system _ web ; </%> <@> using service _ stack _ service _ host ; namespace service _ stack _ web _ host _ endpoints _ support </@> 
<%> <+> using service _ stack _ metadata ; </%> <%> <+> _ support </%> <%> <*> service -> web </%> <@> using service _ stack _ web _ host _ endpoints _ formats ; using service _ stack _ web _ host _ endpoints _ support ; using service _ stack _ web _ host _ endpoints _ utils ; namespace service _ stack _ web _ host _ endpoints </@> 
 <@> { var digest _ helper = new digest _ auth _ functions ( ) ; digest _ hash = digest _ helper . create _ ha ( new _ user . user _ name , digest _ auth _ provider . realm , password ) ; } </@> <%> <+> new _ user . digest _ ha _ hash = digest _ hash ; </%>
<%> <+> filter _ session ( </%> <%> <+> , session _ id ) </%> <@> if ( session _ id = = cached _ session . id ) return cached _ session ; if ( log . is _ debug _ enabled ) { log . debug ( STR . fmt ( cached _ session . id , session _ id ) ) ; } </@> <%> <+> filter _ session ( </%> <%> <+> ) , session _ id </%>
<%> <-> private static cache _ entry normalize _ dates ( cache _ entry result ) { if ( result = = null ) return null ; if ( result . expiry _ date ! = null & & result . expiry _ date . value . kind = = date _ time _ kind . local ) result . expiry _ date = result . expiry _ date . value . to _ universal _ time ( ) ; if ( result . created _ date . kind = = date _ time _ kind . local ) result . created _ date = result . created _ date . to _ universal _ time ( ) ; if ( result . modified _ date . kind = = date _ time _ kind . local ) result . modified _ date = result . modified _ date . to _ universal _ time ( ) ; return result ; } </%> <@> var cache = normalize _ dates ( db . single _ by _ id < cache _ entry > ( key ) ) ; </@> 
<%> <*> return evaluate _ binding ( expr . to _ string _ segment ( ) , scope _ context ) ; } public object evaluate _ binding ( string _ segment expr , template _ scope _ context scope _ context ) { if ( expr . is _ null _ or _ white _ space ( ) ) -> if ( string . is _ null _ or _ white _ space ( expr ) ) </%> <@> return get _ value ( expr . value , scope _ context ) ; </@> <%> <*> ) -> . to _ string _ segment ( ) ) </%> <%> <+> . to _ string _ segment ( ) </%>
<%> <*> failure . error _ code = ( error _ code _ source ! = null ) ? error _ code _ source . get _ string ( context . instance ) : original _ error _ source . resource _ name ; -> failure . error _ code = ( error _ code _ source ! = null ) </%> <%> <+> ? error _ code _ source . get _ string ( context . instance ) : get _ type ( ) . name ; </%> <@> failure . custom _ state = custom _ state _ provider ( context . instance ) ; </@> <%> <-> if ( this . custom _ format _ args ! = null & & </%> <%> <*> this . custom -> object string _ source _ context = error _ source is i _ context _ aware </%> <%> <*> format -> string </%> <%> <*> args -> source ? context : context </%> <%> <*> count > 0 ) { var additional _ arguments -> instance ; string error </%> <%> <*> custom _ format -> context . message </%> <%> <*> args -> formatter </%> <%> <*> select ( func = > func -> build _ message </%> <%> <*> context . instance , context -> error _ source </%> <%> <*> property -> get </%> <%> <*> value ) ) . to -> string ( string _ source </%> <%> <*> array ( -> context ) </%> <%> <-> context . message _ formatter . append _ additional _ arguments ( additional _ arguments ) ; } </%>
 <@> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; </@> <%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ; </%>
<%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ; </%> <@> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; </@> <%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ; </%>
<%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ; </%> <%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ; </%> <@> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; </@> <%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( convert . to _ int ( typed _ value ) , enum _ type ) ; </%>
<%> <+> } else { break ; } } if ( current _ expr = = null | | current _ expr . node _ type ! = expression _ type . parameter ) { return null ; } </%> <@> private static member _ expression remove _ unary ( expression to _ unwrap ) { </@> <%> <-> as member _ expression </%> <%> <-> as member _ expression </%> <%> <*> public static string split _ pascal _ case ( this string input ) { if ( string . is _ null _ or _ empty ( input ) ) { -> public static string split _ pascal _ case ( this string input ) { </%> <%> <+> if ( string . is _ null _ or _ empty ( input ) ) </%>
 <@> namespace service _ stack _ fluent _ validation { using system ; using system _ linq ; using service _ stack _ model ; using service _ stack _ validation ; using system _ collections _ generic ; using service _ stack _ fluent _ validation _ results ; using service _ stack _ text ; </@> <%> <*> public class validation _ exception : argument _ exception , i _ response _ status _ convertible { -> serializable </%> <%> <+> public partial class validation _ exception { </%>
<%> <+> plugins . add ( new server _ html _ feature ( ) ) ; </%> <@> template : alt - layout . html </@> 
<%> <+> obsolete _ use _ normal _ registration _ feature _ and _ have _ your _ i _ auth _ repository _ implement _ i _ custom _ user _ auth _ instead </%> <%> <*> public class register _ service : register _ service < user _ auth > { } -> public class register _ service < t _ user _ auth > : register _ service </%> <%> <+> where t _ user _ auth : class , i _ user _ auth { } </%> <@> public class register _ service < t _ user _ auth > : service where t _ user _ auth : class , i _ user _ auth </@> 
<%> <-> _ page </%> <@> static read _ only _ memory < char > parse _ template _ body ( this read _ only _ memory < char > literal , script _ context context , read _ only _ memory < char > block _ name , out list < page _ fragment > body ) </@> 
 <@> body = parse _ template _ page ( context , literal . slice ( 0 , pos ) . trim _ first _ new _ line ( ) ) ; </@> <%> <-> parse _ template _ page ( context , </%> <%> <-> ) </%>
<%> <-> parse _ template _ page ( context , </%> <%> <-> ) </%> <@> body = parse _ template _ page ( context , literal . slice ( 0 , pos ) . trim _ first _ new _ line ( ) ) ; </@> <%> <*> static read _ only _ memory < char > parse _ template _ else _ block ( this read _ only _ memory < char > literal , script _ context context , string block _ name , out page _ else _ block statement ) -> static read _ only _ memory < char > parse _ template _ else _ block ( this read _ only _ memory < char > literal , string block _ name , </%> <%> <+> out read _ only _ memory < char > else _ argument , out read _ only _ memory < char > else _ body ) </%>
<%> <*> var page _ result = new page _ result ( parsed _ script ) { -> var page = new sharp _ page ( context , block . body _ fragments ) ; </%> <%> <+> var page _ result = new page _ result ( page ) { </%> <@> var len = math . min ( param _ values . length , args . count ) ; </@> <%> <*> var discard = script _ context _ utils . get _ page _ result _ output ( page _ result ) ; if ( page _ result . return _ value = = null ) throw new not _ supported _ exception ( script _ context _ utils . error _ no _ return ) ; return page _ result . return _ value . result ; -> if ( page _ result . evaluate _ result ( out var return _ value ) ) </%>
<%> <*> private static readonly dictionary < string , string > clr _ types _ to _ swagger _ scalar _ types = new dictionary < string , string > { { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } -> private static readonly dictionary < type , string > clr _ types _ to _ swagger _ scalar _ types = new dictionary < type , string > { </%> <%> <+> { typeof ( long ) , swagger _ type . long } , { typeof ( int ) , swagger _ type . int } , { typeof ( byte ) , swagger _ type . byte } , { typeof ( bool ) , swagger _ type . boolean } , { typeof ( string ) , swagger _ type . string } , { typeof ( date _ time ) , swagger _ type . date } </%> <@> return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( type . name . to _ lower _ invariant ( ) ) | | type . is _ enum ; </@> <%> <*> . name . to _ lower _ invariant ( ) ) -> ) </%> <%> <*> . name . to _ lower _ invariant ( ) ] -> ] </%>
<%> <*> private static readonly dictionary < string , string > clr _ types _ to _ swagger _ scalar _ types = new dictionary < string , string > { { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } -> private static readonly dictionary < type , string > clr _ types _ to _ swagger _ scalar _ types = new dictionary < type , string > { </%> <%> <+> { typeof ( long ) , swagger _ type . long } , { typeof ( int ) , swagger _ type . int } , { typeof ( byte ) , swagger _ type . byte } , { typeof ( bool ) , swagger _ type . boolean } , { typeof ( string ) , swagger _ type . string } , { typeof ( date _ time ) , swagger _ type . date } </%> <%> <-> . name . to _ lower _ invariant ( ) </%> <@> return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( lookup _ type . name . to _ lower _ invariant ( ) ) ? clr _ types _ to _ swagger _ scalar _ types [ lookup _ type . name . to _ lower _ invariant ( ) ] </@> 
<%> <-> using system ; </%> <%> <-> using system _ web ; </%> <@> using service _ stack _ web _ host _ end _ points _ formats ; using service _ stack _ web _ host _ endpoints _ support ; namespace service _ stack _ web _ host _ end _ points _ support _ markdown </@> 
<%> <-> using system _ reflection _ emit ; </%> <@> using service _ stack _ web _ host _ endpoints ; namespace service _ stack _ web _ host _ end _ points _ support _ markdown </@> 
<%> <-> using system _ linq ; using system _ text ; </%> <@> using service _ stack _ web _ host _ endpoints ; namespace service _ stack _ web _ host _ end _ points _ utils </@> 
<%> <+> if ( ! ( filter is string s ) ) throw new not _ supported _ exception ( $ STR ) ; </%> <%> <-> if ( filter is string s ) { </%> <%> <+> { scope . scoped _ params [ STR ] = item ; var result = expr . evaluate ( scope ) ; if ( result ) </%> <@> scope . scoped _ params [ STR ] = item ; var result = expr . evaluate ( scope ) ; if ( result ) { to . add ( item ) ; } </@> 
<%> <+> plugins . add ( new validation _ feature ( ) ) ; container . register _ validators ( typeof ( validate _ test _ mq _ validator ) . assembly ) ; </%> <@> new string [ ] { app _ settings . get _ string ( STR ) ? ? STR } ) ) ; </@> <%> <-> container . register < i _ message _ factory > ( c = > c . resolve < i _ message _ service > ( ) . message _ factory ) ; </%> <%> <+> mq _ server . register _ handler < validate _ test _ mq > ( service _ controller . execute _ message ) ; </%>
<%> <+> var http _ method = http _ req . http _ method ; var query _ string = http _ req . query _ string ; </%> <@> catch ( system . exception ex ) </@> <%> <*> var xml = new stream _ reader ( input _ stream ) . read _ to _ end ( ) ; -> var is _ form _ data = http _ req . has _ any _ of _ content _ types ( content _ type . form _ url _ encoded , content _ type . multi _ part _ form _ data ) ; </%> <%> <+> if ( is _ form _ data ) </%>
 <@> using system _ net _ mime ; </@> <%> <+> using system _ web ; </%>
 <@> var response = client . send < secured _ response > ( request ) ; </@> <%> <-> < secured _ response > </%>
<%> <-> < secured _ response > </%> <@> response = new _ client . send < secured _ response > ( request ) ; </@> 
 <@> var response = jwt _ client . send < secured _ response > ( request ) ; </@> <%> <-> < secured _ response > </%>
<%> <-> < secured _ response > </%> <@> response = new _ client . send < secured _ response > ( request ) ; </@> <%> <+> public void authenticating _ with _ jwt _ cookie _ does _ allow _ multiple _ authenticated _ requests ( ) { </%>
 <@> var response = client . send < secured _ response > ( request ) ; </@> <%> <-> < secured _ response > </%>
<%> <-> < secured _ response > </%> <@> response = new _ client . send < secured _ response > ( request ) ; </@> 
 <@> var response = client . send < secured _ response > ( request ) ; </@> <%> <-> < secured _ response > </%>
<%> <-> < secured _ response > </%> <@> response = new _ client . send < secured _ response > ( request ) ; </@> 
<%> <+> public string _ segment to _ string _ segment ( ) = > to _ string ( ) . to _ string _ segment ( ) ; </%> <%> <*> public static list < command > parse _ commands ( this string commands _ string , char separator = ',' , func < string , int , int? > at _ end _ index = null ) -> public static list < command > parse _ commands ( this string commands _ string ) </%> <%> <+> { return parse _ commands ( new string _ segment ( commands _ string ) , ',' ) ; } public static list < command > parse _ commands ( this string _ segment commands _ string , char separator = ',' , func < string _ segment , int , int? > at _ end _ index = null ) </%> <@> if ( string . is _ null _ or _ empty ( commands _ string ) ) </@> <%> <*> [ -> . get _ char ( </%> <%> <*> ] -> ) </%>
 <@> string content _ type , http _ status _ code status _ code ) { response . status _ code = ( int ) status _ code ; </@> <%> <*> http _ status _ code -> int </%>
 <@> . where ( ctor = > ! ctor . is _ static ) . first ( ) ; </@> <%> <-> var service _ type = typeof ( t _ service ) ; </%> <%> <*> service -> typeof ( t </%> <%> <*> type -> service ) </%>
<%> <*> processed -> failed </%> <@> mq _ client . notify ( queue _ names < t > . out , message . to _ bytes ( ) ) ; </@> 
<%> <-> public void publish ( i _ message message ) { var message _ bytes = message . to _ bytes ( ) ; publish ( new queue _ names ( message . body . get _ type ( ) ) . in , message _ bytes ) ; } </%> <@> var message _ bytes = message . to _ bytes ( ) ; publish ( message . to _ in _ queue _ name ( ) , message _ bytes ) ; </@> <%> <*> public void publish ( string queue _ name , byte [ ] message _ bytes ) -> public void publish ( string queue _ name , i _ message message ) </%> <%> <+> var message _ bytes = message . to _ bytes ( ) ; </%> <%> <*> public void notify ( string queue _ name , byte [ ] message _ bytes ) -> public void notify ( string queue _ name , i _ message message ) </%>
<%> <-> page _ variable _ fragment var , </%> <%> <*> ) -> , page _ variable _ fragment var = null ) </%> <%> <-> var . parse _ literal ( arg , out </%> <%> <*> , out js _ binding binding ) ; -> ; </%> <%> <+> js _ binding binding ; if ( var = = null ) arg . parse _ next _ token ( out out _ value , out binding ) ; else var . parse _ next _ token ( arg , out out _ value , out binding ) ; </%> <@> var value = evaluate ( var , expr , scope _ context ) ; </@> <%> <-> if ( binding ! = null ) { </%> <%> <-> get _ value ( </%> <%> <*> . binding _ string , scope _ context ) ; -> ! = null </%> <%> <-> } </%> <%> <+> ? get _ value ( binding . binding _ string , scope _ context ) </%> <%> <*> return -> : </%> <%> <-> page _ variable _ fragment var , </%> <%> <*> ) -> , page _ variable _ fragment var = null ) </%>
<%> <-> } </%> <%> <+> ? get _ value ( binding . binding _ string , scope _ context ) </%> <%> <*> return -> : </%> <%> <-> page _ variable _ fragment var , </%> <%> <*> ) -> , page _ variable _ fragment var = null ) </%> <@> var var _ value = evaluate ( var , arg , scope _ context ) ; </@> 
<%> <+> private readonly string listening _ on ; </%> <%> <+> var port = host _ context . find _ free _ tcp _ port ( starting _ from : NUM ) ; if ( port < NUM ) throw new exception ( STR + port ) ; listening _ on = STR . fmt ( port ) ; </%> <@> . start ( config . listening _ on ) ; </@> <%> <*> config . service _ stack _ base -> listening </%> <%> <*> uri -> on </%>
 <@> public string raw _ url = > uri _ helper . get _ display _ url ( request ) ; public string absolute _ uri = > uri _ helper . get _ display _ url ( request ) ; </@> <%> <*> = > request . path . value . replace ( STR , STR ) ; -> { get ; set ; } </%>
<%> <*> path _ variables = rest _ route . variables . to _ dictionary ( x = > x ) , data = rest _ route . query _ string _ variables . map ( x = > new postman _ data { key = x , value = STR , type = STR , } ) , -> path _ variables = ! verb . has _ request _ body ( ) </%> <%> <+> ? rest _ route . variables . concat ( route _ data . select ( x = > x . key ) ) . to _ dictionary ( x = > x ) : null , data = verb . has _ request _ body ( ) ? route _ data : null , </%> <@> headers = STR + mime _ types . json , </@> <%> <+> var request _ params = auto _ mapping _ utils . populate _ with ( empty _ request ) . to _ string _ dictionary ( ) . map ( a = > new postman _ data { </%>
<%> <+> path _ variables = ! verb . has _ request _ body ( ) ? request _ params . select ( x = > x . key ) . to _ dictionary ( x = > x ) : null , </%> <%> <*> data = auto _ mapping _ utils . populate _ with ( empty _ request ) . to _ string _ dictionary ( ) . map ( a = > new postman _ data { key = a . key , value = a . value , type = STR , } ) , -> data = verb . has _ request _ body ( ) </%> <%> <+> ? request _ params : null , </%> <@> headers = STR + mime _ types . json , </@> 
<%> <+> if ( model _ type = = null ) model _ type = new { } . get _ type ( ) ; </%> <@> if ( template _ cache . contains _ key ( name ) ) template _ cache [ name ] = instance ; else template _ cache . add ( name , instance ) ; } </@> 
<%> <+> using service _ stack _ text ; </%> <@> var request _ obj = reflection _ utils . populate _ object ( activator . create _ instance ( dto _ type ) ) ; </@> 
<%> <*> data -> text </%> <%> <*> data -> text </%> <@> var encrypted _ bytes = encrypt ( public _ key _ xml , bytes , rsa _ key _ length ) ; </@> 
<%> <+> app _ host = new basic _ app _ host ( ) . init ( ) ; </%> <@> var redis _ repo = new redis _ auth _ repository ( new basic _ redis _ client _ manager ( new string [ ] { app _ settings . get _ string ( STR ) ? ? STR } ) ) ; </@> 
<%> <-> public static bool is _ white _ space ( char c ) = > c = = ' ' | | ( c > = ' \ ' & & c < = ' \ d ' ) | | c = = ' \ ' | | c = = ' \ ' ; method _ impl _ method _ impl _ options _ aggressive _ inlining </%> <@> while ( i < literal . length & & is _ white _ space ( literal . get _ char ( i ) ) ) </@> 
<%> <+> return template ? ? default _ layout ; } </%> <%> <+> public abstract class resharper _ view _ page < t > : view _ page < object > { public t dto = > ( t ) model ; } </%> <@> public abstract class view _ page < t > : razor _ page < object > , i _ disposable </@> 
 <@> public i _ raw _ string validation _ summary ( script _ scope _ context scope , i _ enumerable < object > except _ fields ) = > </@> <%> <-> i _ enumerable < </%> <%> <-> > </%>
<%> <-> i _ enumerable < </%> <%> <-> > </%> <@> public i _ raw _ string validation _ summary ( script _ scope _ context scope , i _ enumerable < object > except _ fields , object html _ attrs ) </@> 
<%> <-> { </%> <%> <-> } return host _ context . async . continue _ with ( req , task _ response , task = > { if ( task . is _ faulted ) { var ex = task . exception . unwrap _ if _ single _ exception ( ) ; var result = handle _ exception ( req , request _ dto , ex ) ; if ( result = = null ) return ex ; return result ; } response = task . get _ result ( ) ; log _ request ( req , request _ dto , response ) ; if ( response _ filters ! = null ) { </%> <%> <*> foreach ( var response _ filter in response _ filters ) { var attr _ instance = response _ filter . copy ( ) ; container . auto _ wire ( attr _ instance ) ; if ( attr _ instance is i _ has _ response _ filter filter ) filter . response _ filter ( req , req . response , response ) ; app _ host . release ( attr _ instance ) ; if ( req . response . is _ closed ) return null ; } } return response ; } ) ; -> await task _ response ; </%> <%> <+> response = task _ response . get _ result ( ) ; </%> <@> else { log _ request ( req , request _ dto , response ) ; } </@> 
<%> <-> new [ ] </%> <@> this . http _ methods = ( verbs ? ? string . empty ) . split ( new [ ] { ',' , ' ' } , string _ split _ options . remove _ empty _ entries ) ; </@> 
<%> <*> using service _ stack _ logging ; using service _ stack _ logging _ support _ logging ; -> using service _ stack _ plugins _ proto _ buf ; </%> <@> using config = service _ stack . web _ host . integration _ tests . tests . config ; namespace service _ stack _ web _ host _ endpoints _ tests _ proto _ buf _ tests </@> 
 <@> var q = auto _ query . create _ query ( dto , request . get _ request _ params ( ) , request ) ; </@> <%> <-> . get _ request _ params ( ) </%>
<%> <*> enum _ itens -> objs </%> <%> <*> enum _ itens -> objs </%> <%> <*> var template = target . to _ string ( ) ; var dynamic _ page = scope . context . one _ time _ page ( template ) ; scope . page . args . each ( ( x , y ) = > dynamic _ page . args [ x ] = y ) ; var page _ result = await new page _ result ( dynamic _ page ) { args = scope . page _ result . args } . init ( ) ; var item _ scope = new template _ scope _ context ( page _ result , scope . output _ stream , scope . scoped _ params = = null ? new dictionary < string , object > ( ) : new dictionary < string , object > ( scope . scoped _ params ) ) ; foreach ( var item in enum _ itens ) -> var item _ scope = scope . create _ scoped _ context ( target . to _ string ( ) ) ; </%> <%> <+> foreach ( var item in objs ) </%> <@> await page _ result . write _ page _ async ( page _ result . page , item _ scope ) ; </@> <%> <+> } else if ( items ! = null ) { throw new argument _ exception ( $ STR ) ; </%>
<%> <+> using system _ collections _ generic ; using system _ linq ; using system _ text ; </%> <@> public static categories category ( int id , string category _ name , string description , byte [ ] picture ) </@> <%> <*> categories -> category </%> <%> <*> customers -> customer </%>
<%> <*> public static shippers shipper ( int id , string company _ name , string phone _ no ) -> public static employee employee ( </%> <%> <+> int employee _ id , string last _ name , string first _ name , string title , string title _ of _ courtesy , date _ time ? birth _ date , date _ time ? hire _ date , string address , string city , string region , string postal _ code , string country , string home _ phone , string extension , byte [ ] photo , string notes , int? reports _ to , string photo _ path ) </%> <%> <*> return new shippers { -> return new employee { </%> <%> <+> id = employee _ id , last _ name = last _ name , first _ name = first _ name , title = title , title _ of _ courtesy = title _ of _ courtesy , birth _ date = birth _ date , hire _ date = hire _ date , address = address , city = city , region = region , postal _ code = postal _ code , country = country , home _ phone = home _ phone , extension = extension , photo = photo , notes = notes , reports _ to = reports _ to , photo _ path = photo _ path , } ; } public static shipper shipper ( int id , string company _ name , string phone _ no ) { return new shipper { </%> <@> public static suppliers supplier ( </@> <%> <*> suppliers -> supplier </%>
<%> <+> ship _ name = ship _ name , </%> <@> public static products product ( </@> <%> <*> products -> product </%>
<%> <-> < t _ response > </%> <%> <*> i _ return < t _ response > -> object </%> <@> throw new system . not _ implemented _ exception ( ) ; </@> 
<%> <-> using service _ stack _ server ; using service _ stack _ support _ web _ host ; </%> <@> using service _ stack _ web ; namespace service _ stack _ web _ host _ handlers </@> 
<%> <-> using service _ stack _ server ; </%> <@> using service _ stack _ web ; namespace service _ stack _ web _ host _ asp _ net </@> 
<%> <-> using service _ stack _ server ; </%> <@> using service _ stack _ web ; using service _ stack _ web _ host _ asp _ net ; using service _ stack _ web _ host _ http _ listener ; namespace service _ stack _ web _ host _ handlers </@> 
<%> <-> using service _ stack _ server ; </%> <@> using service _ stack _ web ; namespace service _ stack _ web _ host _ http _ listener </@> 
<%> <-> using service _ stack _ server ; </%> <@> using service _ stack _ web ; namespace service _ stack _ web _ host _ handlers </@> 
<%> <-> using service _ stack _ server ; </%> <@> using service _ stack _ web ; using service _ stack _ web _ host _ asp _ net ; namespace service _ stack _ web _ host _ handlers </@> 
<%> <-> using service _ stack _ server ; </%> <@> using service _ stack _ web ; using service _ stack _ web _ host _ handlers ; namespace service _ stack _ web _ host </@> 
 <@> read _ data ( ) ; return ; </@> <%> <*> expect -> return read </%> <%> <*> success -> data </%>
 <@> public mvc _ razor _ format razor _ format { get ; set ; } </@> <%> <*> public i _ razor _ template execute _ template < t > ( t model , string name ) { return execute _ template ( model , name , null ) ; } public i _ razor _ template execute _ template < t > ( t model , string name , string template _ path ) -> public i _ razor _ template execute _ template < t > ( t model , string name , string template _ path = null , i _ http _ response http _ res = null ) </%>
<%> <*> new rsa _ crypto _ service -> create </%> <%> <*> provider -> rsa </%> <%> <-> ( int ) </%> <@> var verified = rsa . verify _ data ( data _ to _ verify , hash _ algorithm , signature ) ; </@> 
 <@> using service _ stack _ web _ host _ http _ listener ; namespace service _ stack _ support _ web _ host </@> <%> <+> system . net . </%>
<%> <*> client . timeout = ( int ) this . timeout . value . total _ milliseconds ; } client . method = STR ; client . content _ type = content _ type ; using ( var writer = new stream _ writer ( client . get _ request _ stream ( ) ) ) -> using ( var writer = new stream _ writer ( stream ) ) </%> <%> <*> catch -> public override t deserialize _ from _ stream < t > </%> <%> <*> authentication _ exception ex -> stream stream </%> <%> <*> throw web _ request _ utils . create _ custom _ exception ( request _ uri , ex ) ? ? ex ; } using ( var response _ stream = client . get _ response ( ) . get _ response _ stream ( ) ) using ( var reader = new stream _ reader ( response _ stream ) ) -> using ( var reader = new stream _ reader ( stream ) ) </%> <@> var response = type _ serializer . deserialize _ from _ reader < t > ( reader ) ; return response ; </@> <%> <-> public void send _ one _ way ( object request ) { var request _ uri = this . async _ one _ way _ base _ uri + STR + request . get _ type ( ) . name ; var client = web _ request . create ( request _ uri ) ; try { if ( this . timeout . has _ value ) { </%>
<%> <+> route _ echoes _ pos api _ description _ echoes _ sentence </%> <@> api _ member _ parameter _ type _ form _ name _ sentence _ description _ the _ sentence _ to _ echo _ data _ type _ string _ is _ required _ true _ allow _ multiple _ false </@> <%> <+> route _ rockstars </%>
 <@> mq _ server . register _ handler < hello _ intro > ( service _ controller . execute _ message ) ; </@> <%> <-> service _ controller . </%>
<%> <-> service _ controller . </%> <@> var response = service _ controller . execute _ message ( m , req ) ; </@> 
 <@> await write _ page _ fragment _ async ( fragment , page _ scope , output _ stream , token ) ; </@> <%> <*> private async task write _ page _ fragment _ async ( page _ fragment fragment , script _ scope _ context scope , -> public async task write _ page _ fragment _ async ( script _ scope _ context scope , </%>
<%> <+> using service _ stack _ commands ; </%> <@> using service _ stack _ design _ patterns _ command ; </@> 
<%> <+> using service _ stack _ server ; </%> <@> public override void serialize _ to _ stream ( service _ host . i _ request _ context request _ context , object request , system . io . stream stream ) </@> 
<%> <+> using service _ stack _ server ; </%> <@> public override object create _ request ( service _ host . i _ http _ request request , string operation _ name ) </@> 
<%> <+> using service _ stack _ clients ; </%> <%> <-> using service _ stack _ service ; </%> <@> service _ host _ api _ service _ description </@> <%> <-> service _ host _ </%>
<%> <-> service _ host _ </%> <@> service _ host _ api </@> 
 <@> service _ host _ api </@> <%> <-> service _ host _ </%>
<%> <-> service _ host _ </%> <@> service _ host _ api _ test </@> <%> <-> service _ host _ </%>
<%> <-> service _ host _ </%> <@> service _ host _ api </@> <%> <-> service _ host _ </%>
<%> <-> service _ host _ </%> <@> service _ host _ api </@> <%> <-> service _ host _ </%>
<%> <-> service _ host _ </%> <@> service _ host _ api </@> 
 <@> public void parse _ next _ token ( string _ segment literal , out object value , out js _ binding binding ) </@> <%> <+> return </%>
<%> <*> model -> context </%> <@> string display _ name = get _ display _ name ( context . instance _ to _ validate ) ; </@> <%> <+> if ( condition ! = null ) { if ( ! condition ( context ) ) { yield break ; </%>
 <@> if ( this . credentials ! = null ) client . credentials = this . credentials ; if ( null ! = this . auth _ info ) { </@> <%> <*> } else { -> else </%> <%> <-> } </%>
<%> <-> client . credentials = this . credentials ; </%> <%> <*> if ( null ! -> client . credentials </%> <%> <*> auth _ info ) -> credentials ; </%> <%> <-> { </%> <%> <+> if ( this . auth _ info ! = null ) </%> <@> } else { if ( this . always _ send _ basic _ auth _ header ) client . add _ basic _ auth ( this . user _ name , this . password ) ; } </@> 
<%> <-> private void request _ callback < t > ( i _ async _ result async _ result ) { var request _ state = ( request _ state < t > ) async _ result . async _ state ; try { var req = request _ state . web _ request ; var post _ stream = req . end _ get _ request _ stream ( async _ result ) ; stream _ serializer ( null , request _ state . request , post _ stream ) ; post _ stream . flush ( ) ; post _ stream . dispose ( ) ; post _ stream . close ( ) ; request _ state . web _ request . begin _ get _ response ( response _ callback < t > , request _ state ) ; } catch ( exception ex ) { handle _ response _ error ( ex , request _ state ) ; } } </%> <@> var request _ state = ( request _ state < t > ) async _ result . async _ state ; </@> 
 <@> var web _ response = pcl _ export . instance . get _ response ( client ) ; </@> <%> <-> list < t _ response > response ; </%> <%> <*> pcl _ export . instance -> c </%> <%> <-> c </%>
 <@> var web _ response = pcl _ export . instance . get _ response ( client ) ; </@> <%> <-> t _ response response ; </%>
<%> <+> _ response typed </%> <%> <*> ( t -> typed </%> <%> <-> response ) </%> <@> var web _ response = pcl _ export . instance . get _ response ( client ) ; </@> <%> <-> t _ response response ; </%>
 <@> var web _ response = pcl _ export . instance . get _ response ( web _ request ) ; </@> <%> <-> t _ response response ; </%> <%> <+> t _ response </%>
<%> <*> expire _ tokens _ after = app _ settings . get ( STR , expire _ tokens _ after ) ; -> expire _ tokens _ in = app _ settings . get ( STR , expire _ tokens _ in ) ; </%> <%> <+> var date _ str = app _ settings . get _ string ( STR ) ; if ( ! string . is _ null _ or _ empty ( date _ str ) ) invalidate _ tokens _ issued _ before = date _ str . from _ jsv < date _ time > ( ) ; </%> <%> <*> is -> from </%> <%> <*> partial -> token </%> <@> throw new system . not _ implemented _ exception ( STR ) ; </@> 
<%> <*> inject _ request _ context ( service , request _ context ) ; var endpoint _ attrs = request _ context ! = null ? request _ context . endpoint _ attributes : endpoint _ attributes . none ; try -> var response = service _ exec ( request _ context , dto ) ; return response ; } finally { if ( endpoint _ host . app _ host ! = null ) </%> <%> <*> var response = type -> endpoint </%> <%> <*> factory -> host . app </%> <%> <*> fn ( dto , -> host . release ( </%> <%> <-> , endpoint _ attrs </%> <%> <-> return response ; </%> <%> <-> finally </%> <%> <+> else </%> <@> if ( endpoint _ host . app _ host ! = null ) {  endpoint _ host . app _ host . release ( service ) ; } else { using ( service as i _ disposable ) { } } } </@> <%> <+> } </%> <%> <-> } ; try { request _ exec _ map . add ( request _ type , handler _ fn ) ; </%>
 <@> result [ text . string _ extensions . to _ camel _ case ( property _ name ) ] = new property _ route _ member ( property _ info ) ; </@> <%> <*> text . string -> field </%> <%> <*> extensions -> name </%> <%> <-> field _ name </%>
<%> <*> text . string -> property </%> <%> <*> extensions -> name </%> <%> <-> property _ name </%> <@> result [ text . string _ extensions . to _ camel _ case ( field _ name ) ] = new field _ route _ member ( field _ info ) ; </@> 
<%> <-> ( </%> <%> <-> ) </%> <@> return ! type . is _ generic _ type _ definition ( ) & & </@> 
 <@> if ( type . is _ generic _ type ( ) ) </@> <%> <-> _ type </%>
 <@> var base _ type = validator . base _ type ( ) ; </@> <%> <-> ( </%> <%> <-> ) </%> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> while ( ! base _ type . is _ generic _ type ( ) ) </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%> <@> base _ type = base _ type . base _ type ( ) ; </@> 
 <@> type cur = to _ check . is _ generic _ type ( ) ? to _ check . get _ generic _ type _ definition ( ) : to _ check ; </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> to _ check = to _ check . base _ type ( ) ; </@> 
 <@> if ( type . base _ type ( ) ! = null ) </@> <%> <-> ( </%> <%> <-> ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> if ( ! ref _ types . contains ( type . base _ type ( ) ) ) </@> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%>
<%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%> <@> ref _ types . add ( type . base _ type ( ) ) ; add _ referenced _ types ( type . base _ type ( ) , ref _ types ) ; </@> <%> <-> ( ) </%> <%> <-> ( ) </%>
 <@> if ( service _ type . is _ abstract ( ) | | service _ type . contains _ generic _ parameters ( ) ) </@> <%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%> <@> if ( service _ type . is _ abstract ( ) | | service _ type . contains _ generic _ parameters ( ) ) </@> <%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%> <@> if ( service _ type . is _ abstract ( ) | | service _ type . contains _ generic _ parameters ( ) ) </@> <%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%> <@> if ( service _ type . is _ abstract ( ) | | service _ type . contains _ generic _ parameters ( ) ) </@> 
 <@> if ( ! pi . property _ type . is _ generic _ type ( ) ) continue ; </@> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%>
<%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <@> if ( ! ignore _ type _ fn ( type . base _ type ( ) ) | | </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> register _ type _ fn ( type . base _ type ( ) ) ; </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> if ( ! iface . is _ generic _ type ( ) & & ! iface . is _ system _ type ( ) & & ! iface . is _ service _ stack _ type ( ) ) </@> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> ( ) </%> <@> if ( ! type . is _ generic _ type ( ) ) </@> 
<%> <-> ( ) </%> <@> if ( type . is _ generic _ type ( ) ) </@> <%> <-> ( ) </%>
<%> <-> ( </%> <%> <-> ) </%> <@> generic _ args = type . is _ generic _ type ( ) ? get _ generic _ args ( type ) : null , </@> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> is _ enum = type . is _ enum ( ) ? true : ( bool? ) null , </@> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%>
<%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <@> meta _ type . inherits = to _ type _ name ( type . base _ type ( ) ) ; </@> 
 <@> if ( pi . property _ type . is _ generic _ type ( ) ) </@> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> ( </%> <%> <-> ) </%> <@> if ( type . is _ generic _ type ( ) ) </@> 
<%> <-> ( ) </%> <@> is _ value _ type = pi . property _ type . is _ value _ type ( ) ? true : ( bool? ) null , </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <%> <-> ( ) </%> <@> is _ enum = pi . property _ type . is _ enum ( ) ? true : ( bool? ) null , </@> 
 <@> is _ value _ type = pi . parameter _ type . is _ value _ type ( ) ? true : ( bool? ) null , </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> is _ enum = pi . parameter _ type . is _ enum ( ) ? true : ( bool? ) null , </@> 
 <@> var base _ type = type . base _ type ( ) ; </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> else if ( pi . property _ type . is _ array ( ) ) </@> <%> <-> ( ) </%> <%> <-> ( ) </%>
<%> <-> ( </%> <%> <-> ) </%> <@> type . is _ class ( ) & & type ! = typeof ( string ) & & ! type . is _ generic _ type ( ) & & </@> 
 <@> public static readonly assembly ms _ cor _ lib _ assembly = typeof ( string ) . get _ assembly ( ) ; </@> <%> <-> get _ </%> <%> <-> ( ) </%>
<%> <-> get _ </%> <%> <-> ( ) </%> <@> public static readonly assembly system _ web _ assembly = typeof ( http _ context ) . get _ assembly ( ) ; </@> 
<%> <*> string format ; return clr _ types _ to _ swagger _ scalar _ formats . try _ get _ value ( lookup _ type , out format ) ? format : null ; -> return clr _ types _ to _ swagger _ scalar _ formats . try _ get _ value ( lookup _ type , out var format ) ? format : null ; </%> <@> if ( ! type . is _ generic _ type ( ) ) return null ; </@> 
 <@> return type . is _ generic _ type ( ) & & type . get _ generic _ type _ definition ( ) = = typeof ( key _ value _ pair < , > ) ; </@> <%> <-> _ type </%> <%> <-> _ type </%>
 <@> if ( ( ! is _ key _ value _ pair _ type ( schema _ type ) & & schema _ type . is _ value _ type ( ) ) | | schema _ type . is _ nullable _ type ( ) ) </@> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> ( ) </%> <@> if ( ! schema _ type . is _ generic _ type ( ) ) </@> 
 <@> var base _ type = schema _ type . base _ type ( ) ; </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> base _ type = base _ type . base _ type ( ) ; </@> 
<%> <*> dto -> check </%> <%> <*> gen -> service </%> <%> <*> test -> interface </%> <%> <*> dto -> check </%> <%> <*> gen -> service </%> <%> <*> test -> interface </%> <%> <*> dto -> check </%> <%> <*> gen -> service </%> <%> <*> test _ service -> interface </%> <@> public class dto _ get _ test _ service : service _ stack . service </@> 
<%> <-> key . </%> <%> <+> key </%> <%> <-> dictionary _ value . </%> <%> <+> dictionary _ value </%> <%> <*> . to _ safe _ string ( ) ) -> ) </%> <@> . append ( value _ string . to _ safe _ string ( ) ) ; </@> 
<%> <*> using ( var xw = new xml _ text _ writer ( ms , encoding ) ) -> var xw = new xml _ text _ writer ( ms , encoding ) ; </%> <%> <+> if ( indent _ xml ) </%> <@> if ( indent _ xml ) { xw . formatting = formatting . indented ; } serializer . write _ object ( xw , from ) ; xw . flush ( ) ; </@> <%> <*> using ( var reader = new stream _ reader ( ms ) ) { -> var reader = new stream _ reader ( ms ) ; </%> <%> <-> } } </%>
<%> <*> var store _ handler = new store _ new _ user _ handler ( db _ o _ manager ) ; var operation _ context = create _ operation _ context ( new store _ new _ user { -> var store _ request = new store _ new _ user { </%> <%> <*> } , endpoint _ attributes . none ) ; store _ handler . execute ( operation _ context ) ; -> } ; </%> <%> <+> var store _ handler = new store _ new _ user _ handler ( db _ o _ manager ) ; store _ handler . execute ( store _ request ) ; </%> <@> var response = ( get _ all _ users _ response ) get _ all _ handler . execute ( create _ operation _ context ( new get _ all _ users ( ) , endpoint _ attributes . none ) ) ; </@> <%> <-> protected override i _ operation _ context create _ operation _ context ( object request _ dto , endpoint _ attributes endpoint _ attributes ) { var request _ context = new request _ context ( request _ dto , endpoint _ attributes , new factory _ provider ( factory _ utils . object _ factory ) ) ; return new operation _ context ( application _ context . instance , request _ context ) ; } </%>
<%> <+> if ( ! typeof ( t ) . is _ generic _ type | | typeof ( t ) . get _ generic _ type _ definition ( ) ! = typeof ( i _ service < > ) ) throw new argument _ exception ( STR . fmt ( typeof ( t ) . full _ name ) ) ; </%> <@> public void register _ service ( type service _ type ) </@> <%> <+> var generic _ service _ type = service _ type . get _ type _ with _ generic _ type _ definition _ of ( typeof ( i _ service < > ) ) ; if ( generic _ service _ type = = null ) throw new argument _ exception ( STR . fmt ( service _ type . full _ name ) ) ; </%> <%> <+> return generic _ service _ type ; </%>
<%> <*> proto -> data </%> <%> <+> _ order </%> <@> var response = new search _ reqstars _ response ( ) { </@> <%> <*> results = new list < reqstar > ( ) -> results = new list < reqstar > </%> <%> <-> ( ) </%> <%> <-> ( ) </%>
 <@> return instance . split _ case ( text ) ; </@> <%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%>
<%> <-> instance . </%> <@> return instance . humanize ( text ) ; </@> <%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%>
<%> <-> instance . </%> <%> <-> instance . </%> <@> return instance . title _ case ( text ) ; </@> <%> <-> instance . </%> <%> <-> instance . </%>
<%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%> <@> return instance . pascal _ case ( text ) ; </@> <%> <-> instance . </%>
<%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%> <@> return instance . camel _ case ( text ) ; </@> 
<%> <+> if ( get _ type ( ) = = typeof ( orm _ lite _ multitenancy _ stateless _ auth _ tests ) ) return ; </%> <@> credentials = new network _ credential ( api _ key . id , STR ) , </@> 
 <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , </@> <%> <-> . id </%> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , </@> <%> <-> . id </%>
<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> <@> request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , </@> 
<%> <*> request _ context = request _ context -> request _ context = request _ context , </%> <%> <+> service _ exception _ handler = ( req , ex ) = > validation _ feature . handle _ exception ( new basic _ resolver ( ) , req , ex ) </%> <@> return set _ validator _ handler ( service ) ; </@> 
<%> <*> ) -> , bool use _ fork = false ) </%> <%> <+> use _ fork & & </%> <@> if ( repo . fork & & use _ fork _ parent ) { if ( repo . parent ! = null ) return repo . parent . full _ name ; } </@> 
<%> <-> using service _ stack _ web _ host _ endpoints _ metadata ; </%> <@> app _ host . register _ service ( typeof ( swagger _ resources _ service ) , new string [ ] { STR } ) ; app _ host . register _ service ( typeof ( swagger _ api _ service ) , new string [ ] { STR } ) ; </@> 
 <@> return get _ handler _ for _ path _ info ( http _ req . http _ method , path _ info , original _ path _ info , path _ translated ) ? ? not _ found _ http _ handler ; </@> <%> <*> , string original _ path _ info ) -> ) </%>
<%> <*> STR -> http _ methods . post </%> <%> <*> STR -> http _ methods . patch </%> <%> <*> STR -> http _ methods . delete </%> <@> . split ( new char [ ] { '/' } , string _ split _ options . remove _ empty _ entries ) ; </@> <%> <-> . to _ string ( ) </%>
<%> <-> char </%> <@> operation _ id = name + path _ postfix + num . to _ string ( ) + verb _ postfix ; </@> 
<%> <-> app _ host . </%> <@> if ( app _ host . apply _ response _ filters ( http _ req , http _ res , response ) ) </@> 
<%> <+> , is _ mutlti _ request = is _ multi _ request </%> <%> <+> , is _ mutlti _ request = is _ multi _ request </%> <@> var feature = content _ format . to _ feature ( content _ type ) ; </@> <%> <*> request _ name = request _ name -> request _ name = request _ name , </%> <%> <+> is _ mutlti _ request = is _ multi _ request </%> <%> <-> request _ name = request _ name </%>
 <@> { if ( end _ string _ pos = = - 1 ) throw new not _ supported _ exception ( $ STR ) ; } </@> <%> <*> i + = original _ args . length - rewritten _ args . length ; i + = end _ pos ; -> i = end _ string _ pos = = end _ statement _ pos </%> <%> <+> ? end _ statement _ pos - 2 : end _ string _ pos ; </%>
 <@> return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) ) ; </@> <%> <*> type -> generic </%> <%> <*> alias -> arg </%> <%> <-> . generic _ arg ( ) </%> <%> <*> return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) , type _ alias ( generic _ args [ 1 ] . trim _ start ( '\'' ) ) ) ; -> return STR . fmt ( </%> <%> <+> generic _ arg ( generic _ args [ 0 ] ) , generic _ arg ( generic _ args [ 1 ] ) ) ; </%>
<%> <*> type -> generic </%> <%> <*> alias -> arg </%> <%> <-> . generic _ arg ( ) </%> <@> return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) ) ; </@> <%> <*> return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) , type _ alias ( generic _ args [ 1 ] . trim _ start ( '\'' ) ) ) ; -> return STR . fmt ( </%> <%> <+> generic _ arg ( generic _ args [ 0 ] ) , generic _ arg ( generic _ args [ 1 ] ) ) ; </%>
<%> <*> type -> generic </%> <%> <*> alias -> arg </%> <%> <-> . generic _ arg ( ) </%> <%> <*> type -> generic </%> <%> <*> alias -> arg </%> <%> <-> . generic _ arg ( ) </%> <@> return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) , type _ alias ( generic _ args [ 1 ] . trim _ start ( '\'' ) ) ) ; </@> <%> <-> type _ alias ( arg . </%> <%> <*> ) -> arg </%>
<%> <*> return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) , type _ alias ( generic _ args [ 1 ] . trim _ start ( '\'' ) ) ) ; -> return STR . fmt ( </%> <%> <+> generic _ arg ( generic _ args [ 0 ] ) , generic _ arg ( generic _ args [ 1 ] ) ) ; </%> <@> args . append ( type _ alias ( arg . generic _ arg ( ) ) ) ; </@> 
<%> <*> < t -> ( string error </%> <%> <*> request > ( t -> code , string error </%> <%> <*> request request -> message </%> <%> <+> i _ enumerable < </%> <%> <*> result -> field > </%> <%> <*> error -> errors </%> <%> <+> { var response _ status = create _ response _ status ( error _ code , error _ message , validation _ errors ) ; var response _ dto = create _ response _ dto ( null , response _ status ) ; return new http _ error ( response _ dto , http _ status _ code . bad _ request , error _ code , error _ message ) ; } public static object create _ error _ response ( object request , validation _ error _ result validation _ error ) </%> <@> public static object create _ error _ response < t _ request > ( t _ request request , exception ex , response _ status response _ status ) </@> 
<%> <*> content -> mime </%> <%> <*> type -> types </%> <@> var csv _ rows = new stream _ reader ( res . get _ response _ stream ( ) ) . read _ lines ( ) . to _ list ( ) ; </@> <%> <*> content -> mime </%> <%> <*> type -> types </%>
<%> <*> content -> mime </%> <%> <*> type -> types </%> <@> var csv _ rows = new stream _ reader ( res . get _ response _ stream ( ) ) . read _ lines ( ) . to _ list ( ) ; </@> <%> <*> content -> mime </%> <%> <*> type -> types </%> <%> <*> content -> mime </%> <%> <*> type -> types </%>
<%> <*> content -> mime </%> <%> <*> type -> types </%> <%> <*> content -> mime </%> <%> <*> type -> types </%> <@> var csv _ rows = new stream _ reader ( res . get _ response _ stream ( ) ) . read _ lines ( ) . to _ list ( ) ; </@> <%> <*> content -> mime </%> <%> <*> type -> types </%> <%> <-> new stream _ reader ( </%> <%> <-> . get _ response _ stream ( ) ) </%>
<%> <*> content -> mime </%> <%> <*> type -> types </%> <@> var csv _ rows = new stream _ reader ( res . get _ response _ stream ( ) ) . read _ lines ( ) . to _ list ( ) ; </@> <%> <*> content -> mime </%> <%> <*> type -> types </%> <%> <*> content -> mime </%> <%> <*> type -> types </%>
<%> <*> content -> mime </%> <%> <*> type -> types </%> <@> var csv _ rows = new stream _ reader ( res . get _ response _ stream ( ) ) . read _ lines ( ) . to _ list ( ) ; </@> 
 <@> public static i _ comparer < object > get _ comparer ( object x , lisp . interpreter i ) </@> <%> <*> if ( x is func < object , object , int > fn ) return new fn _ comparer ( fn ) ; -> if ( x is func < object , object , int > fn _ compare _ to ) </%> <%> <+> return new fn _ comparer ( fn _ compare _ to ) ; if ( x is func < object , object , bool > fn _ equals ) </%>
<%> <-> i _ </%> <%> <*> new -> parse </%> <%> <*> name -> query </%> <%> <*> value _ collection ( -> string ( string query </%> <@> return new name _ value _ collection _ wrapper ( new name _ value _ collection ( ) ) ; } public override i _ name _ value _ collection parse _ query _ string ( string query ) { return http _ utility . parse _ query _ string ( query ) . in _ wrapper ( ) ; </@> 
<%> <-> pcl _ export _ client . instance . </%> <%> <-> _ </%> <@> headers = new name _ value _ collection _ wrapper ( message . to _ headers ( ) . to _ name _ value _ collection ( ) ) ; </@> <%> <-> pcl _ export _ client . instance . </%> <%> <-> _ </%> <%> <-> pcl _ export _ client . instance . </%> <%> <-> _ </%>
 <@> var static _ file _ handler = ( ( static _ file _ handler ) static _ file _ handler ) ; static _ file _ handler . set _ default _ file ( file . virtual _ path , file . read _ all _ bytes ( ) , file . last _ modified ) ; static _ file _ handler . virtual _ node = file ; </@> <%> <+> new </%> <%> <*> ; -> { virtual _ node = file } ; </%>
<%> <-> using service _ stack _ service _ host ; </%> <%> <+> using service _ stack _ text ; </%> <@> var service _ factory = auto _ wire _ helpers . generate _ auto _ wire _ fn < t > ( ) ; </@> <%> <-> auto _ wire _ helpers . </%>
<%> <-> auto _ wire _ helpers . </%> <@> var service _ factory = auto _ wire _ helpers . generate _ auto _ wire _ fn < t > ( ) ; </@> 
<%> <*> var result = app _ settings . get _ or _ create ( STR , key = > key + + + i ) ; -> var key = STR ; </%> <%> <+> var result = app _ settings . get _ or _ create ( key , ( ) = > key + + + i ) ; </%> <@> result = app _ settings . get _ or _ create ( STR , key = > key + + + i ) ; </@> 
<%> <*> auth -> authenticate </%> <%> <*> auth -> authenticate </%> <@> private object authenticate ( auth request , string provider , i _ auth _ session session , i _ auth _ provider o _ auth _ config ) </@> <%> <*> auth -> authenticate </%>
<%> <*> auth -> authenticate </%> <@> public override object authenticate ( i _ service _ base auth _ service , i _ auth _ session session , auth request ) </@> 
<%> <*> auth -> authenticate </%> <@> public override object authenticate ( i _ service _ base auth _ service , i _ auth _ session session , auth request ) </@> 
<%> <*> auth -> authenticate </%> <@> public override object authenticate ( i _ service _ base auth _ service , i _ auth _ session session , auth request ) </@> 
 <@> return type . is _ generic _ type ( ) & & type . get _ generic _ type _ definition ( ) = = typeof ( nullable < > ) ; </@> <%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> ( ) </%> <@> if ( model _ type . is _ value _ type ( ) | | model _ type . is _ nullable _ type ( ) ) </@> <%> <-> ( </%> <%> <-> ) </%>
<%> <-> ( ) </%> <%> <-> ( ) </%> <@> if ( ! model _ type . is _ generic _ type ( ) ) </@> 
 <@> var base _ type = model _ type . base _ type ( ) ; </@> <%> <-> ( ) </%>
<%> <-> ( ) </%> <@> base _ type = base _ type . base _ type ( ) ; </@> 
 <@> using service _ stack _ virtual _ path ; using service _ stack _ web _ host _ endpoints ; namespace service _ stack _ plugins _ embedded _ virtual _ path </@> <%> <*> throw new not -> return child _ providers . first </%> <%> <*> implemented -> or </%> <%> <*> exception -> default </%> <%> <-> STR </%> <%> <+> . root _ directory </%>
<%> <-> id _ utils . </%> <@> return id _ utils . create _ urn < t > ( id ) ; </@> <%> <*> string . format ( -> $ </%> <%> <*> , typeof ( t ) . name . to _ lower _ invariant ( ) , id ) ; -> ; </%>
<%> <-> if ( this . timeout . has _ value ) { client . timeout = ( int ) this . timeout . value . total _ milliseconds ; } </%> <%> <*> if ( this . credentials ! = null ) { client . credentials = this . credentials ; } -> if ( proxy ! = null ) client . proxy = proxy ; </%> <%> <+> if ( this . timeout . has _ value ) client . timeout = ( int ) this . timeout . value . total _ milliseconds ; if ( this . credentials ! = null ) client . credentials = this . credentials ; </%> <@> { http _ web _ request _ filter ( client ) ; } </@> 
<%> <-> obsolete _ to _ avoid _ name _ conflicts _ with _ mv _ controller _ base _ this _ has _ been _ renamed _ to _ service _ stack _ controller public abstract class controller _ base < t > : service _ stack _ controller < t > where t : class , i _ auth _ session , new ( ) { } obsolete _ to _ avoid _ name _ conflicts _ with _ mv _ controller _ base _ this _ has _ been _ renamed _ to _ service _ stack _ controller public abstract class controller _ base : service _ stack _ controller { } </%> <@> where t : class , i _ auth _ session , new ( ) </@> 
<%> <+> using system _ linq ; </%> <%> <-> where t : class </%> <%> <*> foreach -> if ( fields . contains </%> <%> <*> var field in fields -> default ( t ) </%> <%> <+> ) </%> <@> if ( field = = null ) { throw new argument _ null _ exception ( typeof ( t ) . name ) ; } </@> 
<%> <-> where t : class </%> <@> byte [ ] compressed _ bytes = stream _ extensions . compress ( serialized _ dto , request _ context . compression _ type ) ; </@> <%> <-> where t : class </%>
 <@> def ( STR , 1 , a = > ( a [ 0 ] is string s ) ? s . to _ upper ( ) : a [ 0 ] ! = null ? throw new exception ( STR ) : STR ) ; </@> <%> <*> def ( STR , 2 , a = > ( dynamic _ number . compare _ to ( a [ 0 ] , a [ 1 ] ) < 0 ) ? true : null ) ; -> def ( STR , 2 , a = > a [ 0 ] = = null | | a [ 1 ] = = null ? a [ 0 ] = = a [ 1 ] </%> <%> <+> : dynamic _ number . is _ number ( a [ 0 ] . get _ type ( ) ) ? ( object ) ( dynamic _ number . compare _ to ( a [ 0 ] , a [ 1 ] ) < 0 ? true : null ) : a [ 0 ] is i _ comparable c </%>
<%> <+> ! </%> <%> <-> http _ </%> <@> http _ cookie . domain = ( string . is _ null _ or _ empty ( cookie . domain ) ? null : cookie . domain ) ; </@> 
 <@> var html = markdown _ format . instance . transform ( markdown ) ; </@> <%> <+> abstract </%> <%> <*> if -> eval </%> <%> <*> statement -> expr </%> <%> <*> expr -> statement </%> <%> <*> block -> base </%> <%> <*> public if -> protected eval </%> <%> <*> statement -> expr </%> <%> <*> expr -> statement </%> <%> <*> block -> base </%> <%> <-> this . param _ names = new list < string > ( ) ; </%>
 <@> public interface i _ user _ auth _ repository : i _ user _ auth _ repository < user _ auth > { } public interface i _ user _ auth _ repository < t _ user _ auth > : i _ auth _ repository where t _ user _ auth : class , i _ user _ auth </@> <%> <*> t _ user _ auth create _ user _ auth ( t _ user _ auth new _ user , string password ) ; t _ user _ auth update _ user _ auth ( t _ user _ auth existing _ user , t _ user _ auth new _ user , string password ) ; bool try _ authenticate ( string user _ name , string password , out t _ user _ auth user _ auth ) ; bool try _ authenticate ( dictionary < string , string > digest _ headers , string private _ key , int nonce _ time _ out , string sequence , out t _ user _ auth user _ auth ) ; t _ user _ auth get _ user _ auth ( string user _ auth _ id ) ; new t _ user _ auth get _ user _ auth _ by _ user _ name ( string user _ name _ or _ email ) ; new t _ user _ auth get _ user _ auth ( i _ auth _ session auth _ session , i _ auth _ tokens tokens ) ; void save _ user _ auth ( t _ user _ auth user _ auth ) ; -> i _ user _ auth create _ user _ auth ( i _ user _ auth new _ user , string password ) ; </%>
<%> <+> get { return string . is _ null _ or _ empty ( request . headers [ http _ headers . x _ real _ ip ] ) ? null : request . headers [ http _ headers . x _ real _ ip ] ; } } </%> <@> return remote _ ip ? ? ( remote _ ip = request . headers [ http _ headers . x _ forwarded _ for ] ? ? ( request . headers [ http _ headers . x _ real _ ip ] ? ? request . user _ host _ address ) ) ; </@> 
<%> <+> get { return string . is _ null _ or _ empty ( request . headers [ http _ headers . x _ real _ ip ] ) ? null : request . headers [ http _ headers . x _ real _ ip ] ; } } </%> <@> return remote _ ip ? ? ( remote _ ip = request . headers [ http _ headers . x _ forwarded _ for ] ? ? ( request . headers [ http _ headers . x _ real _ ip ] ? ? request . user _ host _ address ) ) ; </@> 
 <@> var host _ directory _ path = append _ partial _ path _ modifier ! = null ? assembly _ directory _ path + append _ partial _ path _ modifier : assembly _ directory _ path ; </@> <%> <*> * copied over into the / bin / folder with the dlls * / var map _ path = map _ absolute _ path ( relative _ path , null ) ; -> var map _ path = map _ absolute _ path ( relative _ path , string . format ( STR , path . directory _ separator _ char ) ) ; </%>
<%> <-> _ description </%> <@> api _ member _ name _ sentence _ data _ type _ string _ description _ the _ sentence _ to _ echo _ is _ required _ true _ parameter _ type _ form _ allow _ multiple _ false </@> 
<%> <*> void -> object </%> <@> execute ( request ) ; return ; </@> <%> <+> return create _ response _ dto ( request ) ; </%> <%> <*> void -> object </%> <%> <+> return </%>
<%> <-> full _ </%> <%> <-> markdown _ </%> <%> <-> markdown _ </%> <%> <-> markdown _ </%> <@> last _ modified = template _ file . last _ write _ time , service = template _ service , </@> 
<%> <*> http -> mock </%> <%> <*> request -> http </%> <%> <*> context -> request </%> <@> return new http _ request _ context ( ctx , new mock _ http _ response ( ) , null , content _ format . get _ endpoint _ attribute ( http _ method ) ) ; </@> 
<%> <*> context -> ctx </%> <%> <+> var context = ctx . request . request _ context . http _ context ; </%> <@> var http _ req = new asp _ net _ request ( path _ translated , context . request ) ; </@> 
<%> <*> internal static object execute _ service ( object request , request _ attributes request _ attrs , i _ http _ request http _ req , i _ http _ response http _ res ) -> internal static object execute _ service ( object request , i _ request http _ req ) </%> <@> return assert _ app _ host ( ) . service _ controller . execute ( request , new http _ request _ context ( http _ req , http _ res , request , request _ attrs ) ) ; </@> 
<%> <*> mock -> basic </%> <%> <-> _ context </%> <%> <-> _ context </%> <%> <-> _ context </%> <%> <-> _ context </%> <%> <*> mock -> basic </%> <%> <-> _ context </%> <%> <*> o _ auth _ user _ session = request _ context . reload _ session ( ) ; var http _ req = request _ context . get < i _ http _ request > ( ) ; var http _ res = request _ context . get < i _ http _ response > ( ) ; o _ auth _ user _ session . id = http _ res . create _ session _ id ( http _ req ) ; http _ req . items [ service _ extensions . request _ items _ session _ key ] = o _ auth _ user _ session ; -> o _ auth _ user _ session = request . reload _ session ( ) ; </%> <%> <+> o _ auth _ user _ session . id = request . response . create _ session _ id ( request ) ; request . items [ service _ extensions . request _ items _ session _ key ] = o _ auth _ user _ session ; </%> <@> request _ context . container = mock _ app _ host . container ; request _ context . container . register < i _ auth _ repository > ( user _ auth _ repository ) ; </@> <%> <-> _ context </%> <%> <-> _ context </%> <%> <-> _ context </%> <%> <-> _ context </%>
 <@> where t _ attribute : system . attribute </@> <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>
<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> <@> where t _ attribute : system . attribute </@> <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>
<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> <@> where t _ attribute : system . attribute </@> <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>
<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> <@> where t _ attribute : system . attribute </@> 
 <@> where t _ attribute : system . attribute </@> <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>
<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> <@> where t _ attribute : system . attribute </@> <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>
<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> <@> where t _ attribute : system . attribute </@> <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>
<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> <@> where t _ attribute : system . attribute </@> 
<%> <*> get -> internal </%> <%> <*> customer -> only </%> <@> port _ typeof _ get _ customer _ endpoint _ attributes _ external _ endpoint _ attributes _ http _ get </@> 
<%> <-> using system ; using system _ collections _ generic ; </%> <%> <-> using service _ stack _ service _ host ; </%> <@> : i _ service < rest _ movies > , i _ rest _ get _ service < rest _ movies > , i _ rest _ put _ service < rest _ movies > , i _ rest _ post _ service < rest _ movies > , i _ rest _ delete _ service < rest _ movies > , i _ requires _ request _ context </@> <%> <*> execute -> any </%>
 <@> public class cors _ feature _ service : i _ service < cors _ feature _ request > </@> <%> <*> execute -> any </%>
 <@> public class global _ cors _ feature _ service : i _ service < global _ cors _ feature _ request > </@> <%> <*> execute -> any </%>
 <@> public class verb _ match _ service : i _ service < verb _ match > , i _ rest _ service < verb _ match > </@> <%> <*> execute -> any </%>
 <@> public class verb _ match _ service : i _ service < verb _ match > , i _ rest _ service < verb _ match > </@> <%> <*> execute -> any </%>
 <@> : i _ service < requires _ context > , i _ requires _ request _ context </@> <%> <*> execute -> any </%>
 <@> public class test _ service : i _ service < test > </@> <%> <*> execute -> any </%>
<%> <-> using system ; </%> <%> <-> using service _ stack _ configuration ; </%> <%> <-> using service _ stack _ server ; </%> <@> public class get _ customer _ service : i _ service < get _ customer > </@> 
 <@> public class hello _ service : i _ service < hello > </@> <%> <*> execute -> any </%>
 <@> public class hello _ service : i _ service < hello > </@> <%> <*> execute -> any </%>
 <@> public class hello _ service : i _ service < hello > </@> <%> <*> execute -> any </%>
<%> <-> using service _ stack _ server ; </%> <@> public class basic _ service : i _ service < basic _ request > </@> <%> <*> execute -> any </%>
 <@> public class hello _ image _ service : i _ service < hello _ image > </@> <%> <*> execute -> any </%>
 <@> public class hello _ image _ service : i _ service < hello _ image > </@> <%> <*> execute -> any </%>
<%> <-> using system ; using service _ stack _ server ; using service _ stack _ service _ host ; </%> <@> public class reset _ movie _ database _ service : i _ service < reset _ movie _ database > </@> <%> <*> execute -> any </%>
 <@> public class raw _ request _ service : i _ service < raw _ request > </@> <%> <*> execute -> any </%>
 <@> public class ioc _ scope _ service : i _ service < ioc _ scope > , i _ disposable </@> <%> <*> execute -> any </%>
<%> <-> using service _ stack _ server ; using service _ stack _ service _ host ; </%> <@> public class failing _ service : i _ service < failing _ request > </@> <%> <*> execute -> any </%>
 <@> public class store _ customers _ service : i _ service < store _ customers > </@> <%> <*> execute -> any </%> <%> <+> drop _ and _ </%> <%> <-> false </%>
 <@> : i _ service < batch _ widget _ validation _ request > </@> <%> <*> execute -> any </%>
 <@> : i _ service < widget _ validation _ request > </@> <%> <*> execute -> any </%>
<%> <-> using service _ stack _ server ; using service _ stack _ service _ host ; </%> <@> : i _ service < t _ request > </@> <%> <*> execute -> any </%>
 <@> public class rest _ test _ service : i _ service < rest _ test > , i _ rest _ get _ service < rest _ test > , i _ rest _ put _ service < rest _ test > , i _ rest _ post _ service < rest _ test > , i _ rest _ delete _ service < rest _ test > </@> <%> <*> execute -> any </%>
 <@> public class generic _ service < t > : i _ service < t > </@> <%> <*> execute -> any </%> <%> <-> ( ) </%>
<%> <-> < t > </%> <%> <*> execute -> any </%> <@> return new generic _ response ( ) { data = request . get _ type ( ) . full _ name } ; </@> 
 <@> public string error _ response _ except ( template _ scope _ context scope , i _ enumerable < object > fields ) = > </@> <%> <-> i _ enumerable < </%> <%> <-> > </%> <%> <+> var field _ names = context . default _ filters . to _ var _ names ( fields ) ; </%> <%> <-> var field _ names = new list < string > ( ) ; </%> <%> <+> _ name </%> <%> <*> fields -> field _ names </%>
<%> <-> i _ enumerable < </%> <%> <-> > </%> <@> public string error _ response _ except ( template _ scope _ context scope , response _ status error _ status , i _ enumerable < object > fields ) </@> <%> <+> var field _ names = context . default _ filters . to _ var _ names ( fields ) ; </%> <%> <-> var field _ names = new list < string > ( ) ; </%> <%> <+> _ name </%> <%> <*> fields -> field _ names </%> <%> <-> var field _ name = field . as _ string ( ) ; </%>
<%> <-> i _ enumerable < </%> <%> <-> > </%> <%> <-> i _ enumerable < </%> <%> <-> > </%> <%> <+> var field _ names = context . default _ filters . to _ var _ names ( fields ) ; </%> <@> var field _ names = new list < string > ( ) ; foreach ( var field in fields ) { var field _ name = field . as _ string ( ) ; </@> <%> <-> field _ names . add ( field _ name ) ; </%>
 <@> var response = new stream _ reader ( web _ req . get _ response ( ) . get _ response _ stream ( ) ) . read _ to _ end ( ) ; </@> <%> <-> new stream _ reader ( </%> <%> <-> ) </%>
<%> <-> new stream _ reader ( </%> <%> <-> ) </%> <@> var error _ response = new stream _ reader ( error _ web _ response . get _ response _ stream ( ) ) . read _ to _ end ( ) ; </@> 
<%> <+> js _ config . ut _ </%> <@> ms . seek ( 0 , seek _ origin . begin ) ; var reader = new stream _ reader ( ms ) ; return reader . read _ to _ end ( ) ; </@> 
 <@> var expected _ contents = new stream _ reader ( uploaded _ file . open _ read ( ) ) . read _ to _ end ( ) ; </@> <%> <-> new stream _ reader ( </%> <%> <-> ) </%>
 <@> var value = redis _ exec ( r = > r . get _ value _ from _ hash ( hash _ id , test _ key ) ) ; </@> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>
<%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <@> var value = redis _ exec ( r = > r . get _ value _ from _ hash ( hash _ id , test _ key ) ) ; </@> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>
<%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <@> var value = redis _ exec ( r = > r . get _ value _ from _ hash ( hash _ id , test _ key ) ) ; </@> 
 <@> redis _ exec ( r = > r . set _ entry ( test _ key , STR ) ) ; </@> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>
<%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <@> redis _ exec ( r = > r . set _ entry ( test _ key , STR ) ) ; </@> 
 <@> redis _ exec ( r = > r . set _ entry ( test _ key , test _ value ) ) ; </@> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>
<%> <*> string _ values . for _ each ( x = > redis _ exec ( r = > r . set _ entry ( x , test _ value ) ) ) ; -> string _ values . for _ each ( x = > set _ entry ( x , test _ value ) ) ; </%> <@> redis _ exec ( r = > r . set _ entry ( test _ key , STR ) ) ; </@> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>
 <@> redis _ exec ( r = > r . set _ entry ( test _ key , test _ value ) ) ; </@> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>
<%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <@> redis _ exec ( r = > r . set _ entry ( test _ key , test _ value , expire _ in ) ) ; </@> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>
<%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <@> redis _ exec ( r = > r . set _ entry ( test _ key , test _ value ) ) ; </@> <%> <*> string _ values . for _ each ( x = > redis _ exec ( r = > r . set _ entry ( x , x ) ) ) ; -> string _ values . for _ each ( x = > set _ entry ( x , x ) ) ; </%>
 <@> redis _ exec ( r = > r . set _ entry ( test _ key , test _ value ) ) ; </@> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>
 <@> var value = redis _ exec ( r = > r . get _ item _ from _ list ( list _ id , 0 ) ) ; </@> <%> <*> string _ list . for _ each ( x = > redis _ exec ( r = > r . add _ item _ to _ list ( list _ id , x ) ) ) ; -> add _ range _ to _ list ( list _ id , string _ list ) ; </%>
<%> <*> string _ list . for _ each ( x = > redis _ exec ( r = > r . add _ item _ to _ list ( list _ id , x ) ) ) ; -> add _ range _ to _ list ( list _ id , string _ list ) ; </%> <@> var value = redis _ exec ( r = > r . get _ item _ from _ list ( list _ id , 0 ) ) ; </@> <%> <*> var a = new dictionary < string , string > ( ) ; string _ list . for _ each ( x = > redis _ exec ( r = > r . add _ item _ to _ list ( list _ id , x ) ) ) ; -> add _ range _ to _ list ( list _ id , string _ list ) ; </%>
 <@> var rest _ path = new rest _ path ( typeof ( simple _ type ) , new rest _ service _ attribute ( STR ) ) ; </@> <%> <-> new rest _ service _ attribute ( </%> <%> <-> ) </%>
<%> <-> new rest _ service _ attribute ( </%> <%> <-> ) </%> <@> var rest _ path = new rest _ path ( typeof ( simple _ type ) , new rest _ service _ attribute ( STR ) ) ; </@> 
<%> <-> _ engine </%> <%> <-> _ engine </%> <@> var base _ class = string _ extensions . split _ on _ first ( ( string ) host . default _ base _ class , ( char ) '<' ) [ 0 ] ; </@> 
<%> <-> using funq ; </%> <@> using service _ stack _ service _ host ; namespace service _ stack _ web _ host _ endpoints </@> 
 <@> if ( class _ name ! = null ) sb . append ( STR ) . append ( class _ name ) . append ( STR ) ; </@> <%> <*> if ( caption ! = null ) -> if ( caption ! = null & & ! scoped _ params . try _ get _ value ( STR , out ) ) </%> <%> <+> { </%> <%> <+> scoped _ params [ STR ] = true ; } </%>
<%> <*> operation -> application </%> <%> <*> operation -> application </%> <@> service _ model _ finder = model _ info . instance , </@> <%> <*> call -> operation </%> <%> <*> call -> operation </%> <%> <*> i _ sakila _ n _ hibernate _ service _ facade facade = new sakila _ n _ hibernate _ service _ facade ( operation _ context . instance ) ; -> i _ sakila _ n _ hibernate _ service _ facade facade = new sakila _ n _ hibernate _ service _ facade ( application _ context . instance ) ; </%> <%> <*> call -> operation </%> <%> <*> operation -> application </%>
<%> <*> public string binding { get ; } public js _ binding ( string binding ) = > binding = binding ; public override string to _ raw _ string ( ) = > STR ; -> public virtual string _ segment binding { get ; } </%> <%> <+> public js _ binding ( ) { } public js _ binding ( string binding ) = > binding = binding . to _ string _ segment ( ) ; public js _ binding ( string _ segment binding ) = > binding = binding ; public override string to _ raw _ string ( ) = > STR + binding ; </%> <@> public override int get _ hash _ code ( ) = > ( binding ! = null ? binding . get _ hash _ code ( ) : 0 ) ; </@> <%> <+> , i _ enumerable < object > </%>
<%> <+> * / </%> <@> void remove _ client _ session ( long user _ id , i _ collection < guid > client _ session _ ids ) ; </@> <%> <*> user _ client _ sessions _ tuple add _ client _ session ( long user _ id , string user _ name , string ip _ address , string base _ client _ modulus , guid user _ client _ global _ id ) ; -> user _ client _ session store _ client _ session ( </%> <%> <+> guid user _ id , string user _ name , string shard _ id , string ip _ address , string user _ agent , string base _ client _ modulus , guid user _ client _ global _ id ) ; </%>
<%> <*> void remove _ client _ session ( long user _ id , i _ collection < guid > client _ session _ ids ) ; -> void remove _ client _ session ( </%> <%> <+> guid user _ id , i _ collection < guid > client _ session _ ids ) ; </%> <%> <*> user _ client _ sessions _ tuple add _ client _ session ( long user _ id , string user _ name , string ip _ address , string base _ client _ modulus , guid user _ client _ global _ id ) ; -> user _ client _ session store _ client _ session ( </%> <%> <+> guid user _ id , string user _ name , string shard _ id , string ip _ address , string user _ agent , string base _ client _ modulus , guid user _ client _ global _ id ) ; </%> <%> <-> void add _ user _ session ( user _ session user _ session ) ; </%> <%> <*> long -> guid </%> <%> <*> long -> guid </%> <%> <+> , string shard _ id </%> <@> user _ client _ session get _ user _ client _ session ( long user _ id , guid client _ session _ id ) ;       user _ client _ session get _ user _ secure _ client _ session ( long user _ id , guid client _ session _ id ) ; </@> 
<%> <+> route _ reqstars </%> <%> <*> req _ stars -> reqstar : i </%> <%> <*> service : service -> return < reqstars _ response > </%> <%> <+> public int id { get ; set ; } public string first _ name { get ; set ; } public string last _ name { get ; set ; } public int? age { get ; set ; } public reqstar ( ) { } public reqstar ( int id , string first _ name , string last _ name , int age ) { id = id ; first _ name = first _ name ; last _ name = last _ name ; age = age ; } } csv _ csv _ behavior _ first _ enumerable public class reqstars _ response { public int total { get ; set ; } public int? aged { get ; set ; } public list < reqstar > results { get ; set ; } } public class reqstars _ service : service { public static reqstar [ ] seed _ data = new [ ] { new reqstar ( 1 , STR , STR , NUM ) , new reqstar ( 2 , STR , STR , NUM ) , new reqstar ( NUM , STR , STR , NUM ) , } ; </%> <@> db . insert ( reqstar . seed _ data ) ; </@> 
 <@> using system _ io ; </@> <%> <+> public delegate void handle _ uncaught _ exception _ delegate ( i _ http _ request http _ req , i _ http _ response http _ res , string operation _ name , exception ex ) ; public delegate object handle _ service _ exception _ delegate ( object request , exception ex ) ; </%>
<%> <*> throw _ if _ null _ or _ empty ( str _ value , null ) ; -> if ( obj = = null ) </%> <%> <+> throw new argument _ null _ exception ( var _ name ? ? STR ) ; return obj ; </%> <%> <*> public static void throw _ if _ null _ or _ empty ( this string str _ value , string var _ name ) -> public static string throw _ if _ null _ or _ empty ( this string str _ value ) </%> <%> <+> { return throw _ if _ null _ or _ empty ( str _ value , null ) ; } public static string throw _ if _ null _ or _ empty ( this string str _ value , string var _ name ) </%> <%> <+> return str _ value ; </%> <@> public static void throw _ if _ null _ or _ empty ( this i _ collection collection ) </@> <%> <+> return collection ; </%> <%> <*> void -> i _ collection </%>
<%> <*> void -> i _ collection </%> <%> <+> return collection ; </%> <@> public static void throw _ if _ null _ or _ empty < t > ( this i _ collection < t > collection ) </@> <%> <+> return collection ; </%> <%> <*> void -> i _ collection < t > </%>
<%> <+> return collection ; </%> <%> <*> void -> i _ collection < t > </%> <%> <+> return collection ; </%> <@> public static void throw _ if _ null _ or _ empty < t > ( this i _ collection < t > collection , string var _ name ) </@> <%> <+> return collection ; </%>
<%> <*> string -> read </%> <%> <*> segment -> only _ memory < char > </%> <%> <*> private -> private read _ only _ memory < </%> <%> <*> [ ] -> > </%> <%> <*> bytes -> utf </%> <%> <*> public -> public read _ only _ memory < </%> <%> <*> [ ] -> > </%> <%> <*> bytes -> utf </%> <%> <*> bytes ? -> utf . is _ empty </%> <%> <*> bytes -> utf </%> <%> <-> _ bytes </%> <%> <*> ; -> : original _ text _ utf ; </%> <@> public string _ segment binding { get ; set ; } public string binding _ string { get ; } </@> <%> <*> string -> read </%> <%> <*> segment -> only _ memory < char > </%>
<%> <*> . value -> _ string </%> <@> var literal = fragment . argument . as _ span ( ) . advance _ past _ whitespace ( ) ; </@> <%> <*> value -> to _ string </%> <%> <*> . value -> _ string </%>
<%> <*> string -> fragment . argument </%> <%> <-> fragment . argument </%> <@> var literal = fragment . argument . as _ span ( ) . advance _ past _ whitespace ( ) ; </@> 
<%> <+> public static razor _ generator _ build _ task instance ; </%> <%> <*> host _ context . project _ dir = this . project _ dir ; host _ context . project _ target _ path = this . project _ target _ path ; host _ context . app _ config _ path = this . app _ config _ path ; -> instance = new razor _ generator _ build _ task ( ) ; </%> <%> <+> if ( app _ config _ path = = null ) { var config _ names = new [ ] { path _ utils . combine _ paths ( project _ dir , STR ) , path _ utils . combine _ paths ( project _ dir , STR ) , path _ utils . combine _ paths ( project _ dir , STR ) , path _ utils . combine _ paths ( project _ dir , STR ) , } ; app _ config _ path = config _ names . first _ or _ default ( file . exists ) ; } </%> <@> using ( app _ config _ scope . change ( host _ context . app _ config _ path ) ) </@> 
<%> <+> using service _ stack _ service _ interface _ service _ model ; </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>
<%> <+> using service _ stack _ service _ interface _ service _ model ; </%> <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> 
<%> <+> using service _ stack _ service _ interface _ service _ model ; </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>
<%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> 
<%> <-> using system _ linq ; </%> <%> <+> using service _ stack _ service _ interface _ service _ model ; </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>
<%> <-> using system _ linq ; </%> <%> <+> using service _ stack _ service _ interface _ service _ model ; </%> <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> 
 <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>
<%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> 
<%> <+> using service _ stack _ service _ interface _ service _ model ; </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>
<%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> 
<%> <*> xml -> json </%> <@> client . content _ type = STR ; </@> <%> <*> xml -> json </%> <%> <*> xml -> json </%>
<%> <*> xml -> json </%> <@> client . content _ type = STR ; </@> <%> <*> xml -> json </%>
<%> <+> using system ; </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> 
<%> <+> using service _ stack _ service _ interface _ service _ model ; </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>
<%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> <@> data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </@> 
<%> <-> try _ resolve < i _ http _ request > ( ) ? ? ( </%> <%> <*> null -> try _ resolve < i _ http _ request > ( </%> <@> get { return response ? ? ( response = try _ resolve < i _ http _ response > ( ) ? ? ( request _ context ! = null ? request _ context . get < i _ http _ response > ( ) : null ) ) ; } </@> 
<%> <+> public static class markdown _ format _ extensions { public static void add _ file _ and _ view ( this razor _ format razor _ format , view _ page _ ref view _ page ) { var path _ provider = ( in _ memory _ virtual _ path _ provider ) razor _ format . virtual _ path _ provider ; path _ provider . add _ file ( view _ page . file _ path , view _ page . contents ) ; razor _ format . add _ page ( view _ page ) ; } public static void add _ file _ and _ template ( this razor _ format razor _ format , string file _ path , string contents ) { var path _ provider = ( in _ memory _ virtual _ path _ provider ) razor _ format . virtual _ path _ provider ; path _ provider . add _ file ( file _ path , contents ) ; razor _ format . add _ template ( file _ path , contents ) ; } } </%> <%> <*> public razor _ format create ( string website _ template , string page _ template ) -> protected razor _ format razor _ format ; </%> <%> <+> public razor _ format add _ page ( string website _ template , string page _ template ) </%> <@> var razor _ format = new razor _ format ( ) ; razor _ format . add _ template ( STR , website _ template ) ; razor _ format . add _ page ( new view _ page _ ref ( razor _ format , STR , page _ name , page _ template ) { template = STR , </@> <%> <*> create -> add _ page </%> <%> <-> var razor _ format = new razor _ format ( ) ; </%> <%> <+> new view _ page _ ref ( razor _ format , STR , page _ name , page _ template ) { service = razor _ format . template _ service } ) ; </%>
 <@> handle _ unknown _ value public object end ( ) = > stop _ execution . value ; </@> <%> <*> object -> stop _ execution </%>
<%> <*> object -> stop _ execution </%> <@> handle _ unknown _ value public object end ( object ignore ) = > stop _ execution . value ; </@> 
 <@> task < http _ web _ response > get _ async < t _ response > ( i _ return _ void request _ dto ) ; </@> <%> <-> < t _ response > </%> <%> <-> < t _ response > </%>
<%> <-> < t _ response > </%> <%> <-> < t _ response > </%> <@> task < http _ web _ response > post _ async < t _ response > ( i _ return _ void request _ dto ) ; </@> <%> <-> < t _ response > </%>
<%> <-> < t _ response > </%> <%> <-> < t _ response > </%> <@> task < http _ web _ response > put _ async < t _ response > ( i _ return _ void request _ dto ) ; </@> 
<%> <+> razor _ format . instance = null ; </%> <@> } ; razor _ format . init ( ) ; </@> 
<%> <-> using n _ unit _ framework _ syntax _ helpers ; </%> <@> using service _ stack _ text ; namespace service _ stack _ common _ tests _ text </@> 
<%> <+> using service _ stack _ razor _ managers ; </%> <@> public view _ page razor _ page { get ; set ; } </@> 
 <@> throw _ response _ type _ exception < t _ response > ( request , sub _ ex , request _ uri ) ; </@> <%> <-> < t _ response > </%> <%> <-> private void throw _ response _ type _ exception < t _ response > ( object request , exception ex , string request _ uri ) { </%>
<%> <-> < t _ response > </%> <@> throw _ response _ type _ exception < t _ response > ( request , ex , request _ uri ) ; </@> <%> <-> private void throw _ response _ type _ exception < t _ response > ( object request , exception ex , string request _ uri ) { </%> <%> <*> if -> private void throw _ response _ type _ exception </%> <%> <+> object </%> <%> <*> = = null -> , exception ex , string request _ uri </%> <%> <-> throw _ web _ service _ exception < t _ response > ( ex , request _ uri ) ; </%>
 <@> public object execute _ message < t > ( i _ message < t > mq _ message ) </@> <%> <-> < t > </%> <%> <-> < t > </%>
<%> <-> < t > </%> <%> <-> < t > </%> <@> public object execute _ message < t > ( i _ message < t > dto , i _ request req ) </@> 
 <@> object execute _ message < t > ( i _ message < t > mq _ message ) ; </@> <%> <-> < t > </%> <%> <-> < t > </%>
<%> <-> < t > </%> <%> <-> < t > </%> <@> object execute _ message < t > ( i _ message < t > dto , i _ request request _ context ) ; </@> 
<%> <-> vfs . </%> <%> <*> vfile -> path </%> <%> <*> path -> vfile . get _ contents ( ) </%> <@> vfs . write _ file ( path , rom _ chars . to _ string ( ) ) ; </@> <%> <-> vfs . </%> <%> <-> memory _ provider . instance . to _ memory _ stream ( </%> <%> <-> . span ) </%>
<%> <-> vfs . </%> <%> <-> . to _ string ( ) </%> <@> vfs . write _ file ( path , memory _ provider . instance . to _ memory _ stream ( rom _ bytes . span ) ) ; </@> <%> <+> } public virtual void append _ file ( string path , read _ only _ memory < char > text ) { if ( ! ( this is i _ virtual _ files vfs ) ) throw new not _ supported _ exception ( $ STR ) ; vfs . append _ file ( path , text . to _ string ( ) ) ; </%>
<%> <-> vfs . </%> <%> <*> open -> get </%> <%> <*> read -> contents </%> <@> vfs . append _ file ( path , rom _ chars . to _ string ( ) ) ; </@> <%> <-> vfs . </%> <%> <-> memory _ provider . instance . to _ memory _ stream ( </%> <%> <-> . span ) </%>
<%> <-> vfs . </%> <%> <-> . to _ string ( ) </%> <@> vfs . append _ file ( path , memory _ provider . instance . to _ memory _ stream ( rom _ bytes . span ) ) ; </@> 
<%> <*> insenstive -> insensitive </%> <%> <*> insenstive -> insensitive </%> <@> property _ names _ map . add ( property _ name . to _ lower _ invariant ( ) , property _ name ) ; </@> <%> <-> . to _ lower _ invariant ( ) </%>
<%> <-> . to _ lower _ invariant ( ) </%> <@> property _ names _ map . add ( property _ name . to _ lower _ invariant ( ) , property _ name ) ; </@> 
<%> <-> ( cancellation _ token </%> <%> <-> ) </%> <@> await write _ page _ async _ internal ( page , new script _ scope _ context ( this , ms , scope . scoped _ params ) , token ) ; </@> 
<%> <+> using system _ reflection ; using funq ; </%> <%> <*> using service _ stack _ service ; -> using service _ stack _ service _ host ; </%> <%> <+> using service _ stack _ service _ interface ; </%> <@> public abstract class http _ listener _ base : i _ service _ host , i _ disposable </@> <%> <+> private readonly date _ time start _ time ; private readonly service _ manager service _ manager ; public static http _ listener _ base instance { get ; protected set ; } </%> <%> <+> protected http _ listener _ base ( ) </%>
<%> <+> public string render _ dynamic _ page _ html ( string page _ name , dictionary < string , object > scope _ args ) { return render _ dynamic _ page ( get _ view _ page ( page _ name ) , scope _ args , true , true ) ; } </%> <@> var markdown _ page = get _ view _ page ( page _ name ) ; return render _ dynamic _ page ( markdown _ page , model , render _ html , true ) ; </@> <%> <+> return render _ dynamic _ page ( markdown _ page , scope _ args , render _ html , render _ template ) ; } public string render _ dynamic _ page ( markdown _ page markdown _ page , dictionary < string , object > scope _ args , bool render _ html , bool render _ template ) </%>
<%> <+> if ( channels . count = = 0 ) channels = event _ subscription . unknown _ channel . to _ list ( ) ; </%> <@> channels = channels . count > 0 ? channels . to _ array ( ) : event _ subscription . unknown _ channel , </@> 
<%> <+> static </%> <%> <+> static </%> <%> <+> static </%> <%> <+> static </%> <@> this . default _ file _ path = default _ file _ path ; this . default _ file _ contents = default _ file _ contents ; this . default _ file _ modified = default _ file _ modified ; </@> 
<%> <+> return s = > s ; return jsv _ reader . get _ parse _ fn ( property _ type ) ; } </%> <@> var property _ parse _ string _ fn = jsv _ reader . get _ parse _ fn ( property _ type ) ; </@> 
<%> <+> public http _ status _ code status _ code { get ; set ; } </%> <@> response . status _ code = ( int ) http _ status _ code . redirect ; </@> 
<%> <*> private -> public </%> <%> <+> { get </%> <%> <+> set ; } </%> <@> redis _ pub _ sub . keep _ alive _ retry _ after _ ms = NUM ; </@> 
<%> <*> public static string web _ host _ physical _ path = null ; public static string default _ root _ file _ name = null ; public static bool host _ auto _ redirects _ dirs = false ; -> public static string web _ host _ physical _ path ; </%> <%> <+> public static string default _ root _ file _ name ; </%> <@> private static i _ http _ handler default _ http _ handler = null ; private static redirect _ http _ handler non _ root _ mode _ default _ http _ handler = null ; private static i _ http _ handler forbidden _ http _ handler = null ; private static i _ http _ handler not _ found _ http _ handler = null ; </@> <%> <-> = false </%>
 <@> public object continue _ executing _ filters _ on _ error ( object ignore _ target , template _ scope _ context scope ) = > continue _ executing _ filters _ on _ error ( scope ) ; </@> <%> <-> object ignore _ target , </%> <%> <+> , object ignore _ target </%>
<%> <-> object ignore _ target , </%> <%> <+> , object ignore _ target </%> <@> public object skip _ executing _ filters _ on _ error ( object ignore _ target , template _ scope _ context scope ) = > skip _ executing _ filters _ on _ error ( scope ) ; </@> <%> <+> handle _ unknown _ value public object if _ error ( template _ scope _ context scope , object ignore _ target ) = > if _ error ( scope ) ; </%>
<%> <*> operation -> application </%> <%> <*> operation -> application </%> <%> <+> factory = factory , </%> <%> <-> factory = factory , </%> <@> service _ model _ finder = model _ info . instance , </@> <%> <*> call -> operation </%> <%> <*> call -> operation </%> <%> <*> call -> operation </%> <%> <*> operation -> application </%>
<%> <*> var methods = typeof ( collection _ extensions ) . get _ methods ( ) ; var generic _ mi = methods . first _ or _ default ( x = > x . name = = STR ) ; -> var generic _ mi = typeof ( collection _ extensions ) . get _ static _ method ( STR ) ; </%> <@> delegate . create _ delegate ( typeof ( func < object , type , object > ) , mi ) ; </@> 
<%> <-> o _ </%> <%> <*> io -> i </%> <%> <-> o _ </%> <%> <-> o _ </%> <@> this . auth _ http _ gateway = new o _ auth _ http _ gateway ( ) ; </@> <%> <*> io -> i </%>
 <@> . register _ query _ filter < query _ rockstars _ filter , rockstar > ( ( req , q , dto ) = > </@> <%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%> <%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%>
<%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%> <@> . register _ query _ filter < query _ custom _ rockstars _ filter , rockstar > ( ( req , q , dto ) = > </@> <%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%>
<%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%> <%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%> <@> . register _ query _ filter < i _ filter _ rockstars , rockstar > ( ( req , q , dto ) = > </@> 
<%> <-> using service _ stack _ cache _ access _ providers ; </%> <%> <+> using service _ stack _ service _ host ; </%> <@> namespace service _ stack _ service _ host </@> 
<%> <-> using system _ linq ; using system _ text ; </%> <@> namespace service _ stack _ service _ host </@> 
<%> <-> using system ; </%> <%> <+> using service _ stack _ service _ host ; </%> <@> namespace service _ stack _ service _ host </@> 
<%> <+> using service _ stack _ cache _ access ; </%> <%> <-> _ extensions </%> <@> namespace service _ stack _ cache _ access _ providers </@> 
<%> <-> _ extensions </%> <@> public static object to _ optimized _ result _ using _ cache < t > ( this i _ request _ context request _ context , i _ cache _ client cache _ client , func < t > factory _ fn , string cache _ key ) </@> <%> <+> string cache _ key , </%> <%> <-> , string cache _ key </%> <%> <+> { </%>
<%> <*> public static object to _ optimized _ result _ using _ cache < t > ( this i _ request _ context request _ context , i _ cache _ client cache _ client , func < t > factory _ fn , string cache _ key ) -> public static object to _ optimized _ result _ using _ cache < t > ( </%> <%> <+> this i _ request _ context request _ context , i _ cache _ client cache _ client , string cache _ key , func < t > factory _ fn ) </%> <@> public static object to _ optimized _ result _ using _ cache < t > ( this i _ request _ context request _ context , func < t > factory _ fn , string cache _ key ) </@> <%> <+> { var cache _ client = get _ default _ cache _ client ( ) ; return content _ cache _ manager . resolve ( factory _ fn , request _ context . mime _ type , request _ context . compression _ type , cache _ client , cache _ key ) ; } private static i _ cache _ client get _ default _ cache _ client ( ) </%>
<%> <*> app _ host app -> static i </%> <%> <*> host -> log log </%> <%> <*> test _ fixture -> public integration </%> <%> <*> set -> test </%> <%> <*> up public virtual void test -> base ( ) : base ( STR , typeof ( movie </%> <%> <*> fixture -> rest </%> <%> <*> set _ up ( -> service ) . assembly </%> <%> <*> app _ host = new app _ host ( ) ; app _ host . init ( ) ; -> log _ manager . log _ factory = new debug _ log _ factory ( ) ; </%> <%> <+> log = log _ manager . get _ logger ( get _ type ( ) ) ; instance = null ; init ( ) ; </%> <@> app _ host . start ( base _ url ) ; </@> <%> <+> } public override void configure ( container container ) { container . register < i _ resource _ manager > ( new configuration _ resource _ manager ( ) ) ; container . register ( c = > new example _ config ( c . resolve < i _ resource _ manager > ( ) ) ) ; </%>
 <@> method . statements . add ( create _ to _ source _ assignment _ method ( to , to _ source _ type _ property , attr . target _ type , from , get _ types _ translate _ attribute _ fn ) ) ; </@> <%> <*> public static code _ statement create _ to _ source _ assignment _ method ( code _ variable _ declaration _ statement to _ source , property _ info to _ source _ property , type from _ target _ type , code _ parameter _ declaration _ expression from _ target _ param , -> public static code _ statement create _ to _ source _ assignment _ method ( </%> <%> <+> translate _ attribute attr , code _ variable _ declaration _ statement to _ source , property _ info to _ source _ property , code _ parameter _ declaration _ expression from _ target _ param , </%>
 <@> args . append ( STR . fmt ( type _ value ( ctor _ arg . type , ctor _ arg . value ) ) ) ; </@> <%> <+> $ </%> <%> <*> . fmt ( attr _ arg . name , type _ value ( attr _ arg . type , attr _ arg . value ) ) ) ; -> ) ; </%>
 <@> api _ member _ parameter _ type _ path _ description _ range _ description _ data _ type _ double _ is _ required _ true </@> <%> <-> meta _ foo _ bar </%> <%> <+> meta _ foo _ bar </%> <%> <+> } public enum enum _ flags { value = 1 , </%>
<%> <*> from -> item </%> <%> <*> sorted -> with </%> <%> <*> set -> lowest </%> <%> <*> item -> score </%> <%> <*> with -> from </%> <%> <*> lowest -> sorted </%> <%> <*> score -> set </%> <%> <*> from -> item </%> <%> <*> sorted -> with </%> <%> <*> set -> highest </%> <%> <*> item -> score </%> <%> <*> with -> from </%> <%> <*> highest -> sorted </%> <%> <*> score -> set </%> <@> client . increment _ item _ in _ sorted _ set ( set _ id , increment _ by _ score , value ) ; </@> 
<%> <*> from -> item </%> <%> <*> sorted -> with </%> <%> <*> set -> lowest </%> <%> <*> item -> score </%> <%> <*> with -> from </%> <%> <*> lowest -> sorted </%> <%> <*> score -> set </%> <%> <*> from -> item </%> <%> <*> sorted -> with </%> <%> <*> set -> highest </%> <%> <*> item -> score </%> <%> <*> with -> from </%> <%> <*> highest -> sorted </%> <%> <*> score -> set </%> <@> double increment _ item _ in _ sorted _ set ( string set _ id , double increment _ by , string value ) ; </@> 
<%> <*> string -> byte [ ] </%> <@> public int h _ set ( string hash _ id , string key , byte [ ] value ) </@> <%> <+> _ multi </%> <%> <-> value , </%> <%> <-> safe _ key ( </%> <%> <*> ) , safe -> . to _ utf </%> <%> <*> keys -> bytes </%> <%> <-> key </%> <%> <*> value . length -> key , value </%> <%> <*> string -> byte [ ] </%> <%> <+> _ multi _ data </%> <%> <-> safe _ key ( </%> <%> <*> ) , safe -> . to _ utf </%> <%> <*> keys -> bytes </%> <%> <+> ) , </%> <%> <-> ) </%> <%> <*> string -> byte [ ] </%>
<%> <+> using service _ stack _ data ; </%> <@> public class orm _ lite _ cache _ client : repository _ base , i _ cache _ client , i _ requires _ schema </@> 
<%> <+> initial _ </%> <%> <+> initial _ </%> <@> value = invoke _ filter ( has _ filter _ as _ binding , filter , new object [ 0 ] , var . expression ? . binding _ string ? ? var . binding _ string ) ; </@> 
<%> <-> api _ key _ provider . </%> <%> <-> api _ key _ provider . </%> <@> if ( api _ key _ provider . api _ key _ filter _ fn ! = null ) api _ key _ provider . api _ key _ filter _ fn ( api _ key ) ; </@> <%> <+> return api _ keys ; } } internal class api _ key _ auth _ events : auth _ events { private readonly api _ key _ auth _ provider api _ key _ provider ; public api _ key _ auth _ events ( api _ key _ auth _ provider api _ key _ provider ) </%>
<%> <+> var page _ ref = get _ view _ page ( http _ req . operation _ name ) ; if ( page _ ref ! = null ) return page _ ref ; } </%> <@> return http _ req ! = null ? get _ view _ page ( http _ req . operation _ name ) : null ; </@> 
<%> <-> api _ allowed _ attributes _ description </%> <%> <+> required </%> <%> <-> required </%> <@> api _ member _ description _ range _ description _ parameter _ type _ path _ data _ type _ double _ is _ required _ true </@> 
<%> <+> path _ info = path _ info . ends _ with ( default _ page + STR , string _ comparison . invariant _ culture _ ignore _ case ) ? path _ info . substring ( 0 , path _ info . length - ( default _ page + STR ) . length ) : path _ info . without _ extension ( ) ; </%> <@> : web _ host _ url . combine _ with ( path _ info . without _ extension ( ) ) , </@> <%> <-> . without _ extension ( ) </%>
<%> <+> path _ info = path _ info . ends _ with ( default _ page + STR , string _ comparison . invariant _ culture _ ignore _ case ) ? path _ info . substring ( 0 , path _ info . length - ( default _ page + STR ) . length ) : path _ info . without _ extension ( ) ; </%> <%> <-> . without _ extension ( ) </%> <@> ? path _ info . without _ extension ( ) </@> 
<%> <+> path _ info = path _ info . ends _ with ( default _ page + STR + entry . key , string _ comparison . invariant _ culture _ ignore _ case ) ? path _ info . substring ( 0 , path _ info . length - ( default _ page + STR + entry . key ) . length ) : path _ info . without _ extension ( ) ; </%> <@> : web _ host _ url . combine _ with ( path _ info . without _ extension ( ) ) , </@> <%> <-> . without _ extension ( ) </%>
<%> <+> path _ info = path _ info . ends _ with ( default _ page + STR + entry . key , string _ comparison . invariant _ culture _ ignore _ case ) ? path _ info . substring ( 0 , path _ info . length - ( default _ page + STR + entry . key ) . length ) : path _ info . without _ extension ( ) ; </%> <%> <-> . without _ extension ( ) </%> <@> ? path _ info . without _ extension ( ) </@> 
 <@> var is _ multi _ request = path _ action = = STR | | path _ action = = STR ; var is _ reply = path _ action = = STR | | path _ action = = STR ; var is _ one _ way = path _ action = = STR | | path _ action = = STR ; </@> <%> <-> , is _ mutlti _ request = is _ multi _ request </%> <%> <-> , is _ mutlti _ request = is _ multi _ request </%>
 <@> return ! ( type . is _ user _ type ( ) | | type . is _ user _ enum ( ) | | type . is _ interface ( ) ) </@> <%> <-> ( ) </%>
<%> <-> ( </%> <%> <-> ) </%> <@> ! type . is _ interface ( ) & & </@> 
 <@> if ( typeof ( t ) . is _ class | | typeof ( t ) . is _ interface ( ) ) </@> <%> <*> method -> get </%> <%> <*> info -> method </%> <%> <+> non _ public : true </%>
 <@> & & ! service _ type . is _ abstract ( ) & & ! service _ type . is _ generic _ type _ definition ( ) & & ! service _ type . contains _ generic _ parameters ( ) ; </@> <%> <+> , attr . match _ rule </%>
<%> <-> http _ </%> <%> <+> var http _ req = ( i _ http _ request ) req ; </%> <@> var rest _ path = get _ rest _ path ( http _ req . verb , http _ req . path _ info ) ; </@> 
<%> <+> ? </%> <@> tokens . access _ token _ secret = request . access _ token ; if ( ! auth _ http _ gateway . verify _ facebook _ access _ token ( app _ id , tokens . access _ token _ secret ) ) </@> <%> <*> session . is _ authenticated = true ; var auth _ response = on _ authenticated ( auth _ service , session , tokens , new dictionary < string , string > ( ) ) ; if ( auth _ response ! = null ) return auth _ response ; var is _ html = auth _ service . request . response _ content _ type . matches _ content _ type ( mime _ types . html ) ; -> var is _ html = auth _ service . request . is _ html ( ) ; </%> <%> <+> var failed _ result = authenticate _ with _ access _ token ( auth _ service , session , tokens , request . access _ token ) ; if ( failed _ result ! = null ) return convert _ to _ client _ error ( failed _ result , is _ html ) ; </%>
<%> <-> using system _ linq ; using system _ text ; </%> <@> namespace service _ stack _ common </@> 
<%> <-> _ common </%> <@> namespace service _ stack _ common </@> 
 <@> using system _ reflection ; using service _ stack _ common _ utils ; using service _ stack _ service _ model ; </@> <%> <*> namespace service _ stack _ service _ client _ web -> using service _ stack _ utils ; </%> <%> <+> namespace service _ stack _ clients </%>
<%> <-> using system _ linq ; </%> <@> using service _ stack _ service _ host ; namespace service _ stack _ common </@> 
<%> <-> using system _ linq ; using system _ reflection ; </%> <@> namespace service _ stack _ common </@> 
<%> <*> public i _ auth _ events auth _ events { get { return host _ context . try _ resolve < i _ auth _ events > ( ) ? ? new auth _ events ( ) ; } } -> public i _ auth _ events auth _ events = > host _ context . try _ resolve < i _ auth _ events > ( ) ? ? new auth _ events ( ) ; </%> <%> <-> ! = null </%> <%> <-> fallback </%> <%> <-> : null </%> <@> var referrer _ url = ( request ! = null ? request . continue : null ) </@> 
<%> <-> ! = null & & prec . value </%> <@> var precedences = new list < int > { prec . value } ; </@> <%> <-> prec = = null | | </%>
<%> <+> : i _ service _ controller </%> <@> public service _ stack . service _ interface . i _ service _ resolver service _ resolver { get ; private set ; } </@> <%> <*> private -> public </%> <%> <+> , string service _ name </%> <%> <*> debug -> info </%> <%> <-> . get </%> <%> <-> type ( ) . </%> <%> <*> debug -> info </%> <%> <-> . get </%> <%> <-> type ( ) . </%>
<%> <+> claim . type = = </%> <%> <-> types . contains ( claim . </%> <%> <-> ) </%> <@> if ( permission _ claim _ type = = claim . type ) </@> 
 <@> var dynamic _ page = new markdown _ page ( dynamic _ page _ content , STR , dynamic _ list _ page _ content ) ; </@> <%> <-> _ list </%>
 <@> using n _ unit _ framework ; using service _ stack _ text ; using system _ collections _ generic ; </@> <%> <*> template -> script </%> <%> <-> template _ </%>
<%> <+> var property _ infos = base _ type . all _ properties ( ) ; </%> <@> while ( ( base _ type = base _ type . get _ type _ info ( ) . base _ type ) ! = null ) ;  while ( ( base _ type = base _ type . base _ type ) ! = null ) ; </@> 
 <@> if ( typeof ( t ) . get _ type _ info ( ) . is _ class ) </@> <%> <*> runtime -> property </%> <%> <*> property -> info </%> <%> <*> runtime -> property </%> <%> <*> property -> info </%> <%> <+> _ info ( ) </%> <%> <*> runtime -> public </%> <%> <-> get _ </%> <%> <-> true </%>
 <@> var is _ null = regex = = STR ; var compiled _ regex = ! is _ null ? new regex ( regex , regex _ options . compiled ) : null ; </@> <%> <-> if ( req _ value = = null ) return is _ null ; if ( compiled _ regex = = null ) return false ; </%>
<%> <+> public static bool is _ debug ( this i _ html _ helper html ) = > host _ context . debug _ mode ; public static i _ auth _ session get _ session ( this i _ html _ helper html ) = > html . get _ request ( ) . get _ session ( ) ; public static bool is _ authenticated ( this i _ html _ helper html ) = > html . get _ session ( ) . is _ authenticated ; </%> <@> html . get _ request ( ) . get _ session ( ) . get _ profile _ url ( ) ; </@> 
 <@> using system _ diagnostics ; </@> <%> <*> using system ; using config ; -> using n _ log _ config ; </%>
 <@> using system _ collections _ specialized ; </@> <%> <*> public string name { get ; set ; } -> public string item { get ; set ; } </%>
 <@> log _ manager . throw _ exceptions = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ; internal _ logger . log _ to _ console = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ; </@> <%> <*> false -> internal _ logger . log _ to _ console _ error </%> <%> <*> null -> internal _ logger . log _ file </%> <%> <*> STR -> internal _ logger . log _ level . name </%> <%> <*> STR -> log _ manager . global _ threshold . name </%>
<%> <*> false -> log _ manager . throw _ exceptions </%> <%> <*> false -> internal _ logger . log _ to _ console </%> <@> internal _ logger . log _ to _ console _ error = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ; </@> <%> <*> null -> internal _ logger . log _ file </%> <%> <*> STR -> internal _ logger . log _ level . name </%> <%> <*> STR -> log _ manager . global _ threshold . name </%>
<%> <+> { if ( ex ! = null ) </%> <%> <*> if -> lock </%> <%> <*> ex ! = null -> exceptions </%> <@> lock ( exceptions ) { exceptions . add ( ex ) ; } </@> <%> <+> } </%>
<%> <+> sb . append ( encoded _ value ) ; decode _ rot ( sb ) ; return sb . to _ string ( ) ; } internal static void decode _ rot ( system . text . string _ builder encoded _ value ) { </%> <%> <-> null </%> <@> char [ ] chars = encoded _ value . to _ char _ array ( ) ; for ( int i = 0 ; i < chars . length ; + + i ) </@> <%> <*> chars -> encoded _ value </%> <%> <*> chars -> encoded _ value </%> <%> <-> return new string ( chars ) ; </%> <%> <*> string -> void </%> <%> <+> _ formatted _ messsage </%> <%> <+> system . text . </%> <%> <*> text -> _ builder target </%> <%> <-> return </%> <%> <*> text -> target </%>
<%> <+> { if ( factory . throw _ exceptions & & thread . current _ thread . managed _ thread _ id = = original _ thread _ id ) </%> <@> if ( factory . throw _ exceptions & & thread . current _ thread . managed _ thread _ id = = original _ thread _ id ) { throw new n _ log _ runtime _ exception ( STR , ex ) ; } </@> <%> <+> } </%>
<%> <*> private void -> private static exception _ data _ target [ ] </%> <@> data _ targets . add ( this . append _ message ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> data _ targets . add ( this . append _ type ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> data _ targets . add ( this . append _ short _ type ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> data _ targets . add ( this . append _ to _ string ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> data _ targets . add ( this . append _ method ) ; </@> <%> <-> this . </%> <%> <*> this . exception _ data _ targets = -> return </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> data _ targets . add ( this . append _ stack _ trace ) ; </@> <%> <*> this . exception _ data _ targets = -> return </%> <%> <+> static </%>
 <@> if ( log _ event ! = log _ event _ info . empty ) log _ event . add _ cached _ layout _ value ( this , value ) ; </@> <%> <-> } private static layout _ renderer [ ] compile _ layout ( string s , out int needs _ stack _ trace , out bool is _ volatile ) { array _ list result = new array _ list ( ) ; needs _ stack _ trace = 0 ; is _ volatile = false ; int starting _ pos = 0 ; int pos = s . index _ of ( STR , starting _ pos ) ; while ( pos > = 0 ) </%>
 <@> string prop _ name _ element = append _ xml _ property _ value ( prop _ name , null , type _ code . empty , sb , org _ length , true ) ; </@> <%> <-> , convert . get _ type _ code ( item ) </%>
<%> <-> , convert . get _ type _ code ( item ) </%> <@> string prop _ name _ element = append _ xml _ property _ value ( prop _ name , null , type _ code . empty , sb , org _ length , true , ignore _ properties _ element _ name ) ; </@> <%> <-> , convert . get _ type _ code ( item . value ) </%>
<%> <*> count = = 0 -> convert _ to _ string </%> <%> <-> , type _ code . string </%> <@> string prop _ name _ element = append _ xml _ property _ value ( prop _ name , null , type _ code . empty , sb , org _ length , true , ignore _ properties _ element _ name ) ; </@> <%> <*> if ( ! append _ xml _ property _ object _ value ( property . name , property . value , property . type _ code , sb , org _ length , objects _ in _ path , depth ) ) -> var property _ type _ code = property . type _ code ; </%> <%> <+> if ( property _ type _ code ! = type _ code . object ) </%>
<%> <-> using system _ collections _ generic ; </%> <@> using n _ log _ targets ; namespace n _ log _ win _ targets </@> 
<%> <-> this . replace _ new _ lines = true ; </%> <%> <-> default _ value _ true public bool replace _ new _ lines { get ; set ; } </%> <@> if ( this . replace _ new _ lines ) { return text . replace ( environment . new _ line , STR ) ; } else { return text ; } </@> 
 <@> using n _ log _ config ; using n _ log _ layouts ; </@> <%> <+> this . message _ queue _ proxy = new message _ queue _ proxy ( ) ; </%>
<%> <+> _ archive </%> <@> date _ time archive _ date = get _ archive _ date ( is _ period _ switch ( file _ name , log _ event ) ) ; </@> 
 <@> enable _ levels = new [ ] { log _ level _ from _ string ( child _ property . value ) } ; </@> <%> <-> { string [ ] tokens = child _ property . value . split _ and _ trim _ tokens ( ',' ) ; </%> <%> <*> tokens -> string _ helpers </%> <%> <*> select ( log -> is _ null </%> <%> <*> level -> or </%> <%> <*> from -> white </%> <%> <*> string ) ; -> space ( child _ property . value ) ? STR : child _ property . value ; </%> <%> <-> } </%> <%> <-> log _ level _ from _ string ( </%> <%> <-> ) . ordinal </%>
<%> <-> new [ ] { log _ level _ from _ string ( </%> <%> <-> ) } </%> <%> <-> { string [ ] tokens = child _ property . value . split _ and _ trim _ tokens ( ',' ) ; </%> <%> <*> tokens -> string _ helpers </%> <%> <*> select ( log -> is _ null </%> <%> <*> level -> or </%> <%> <*> from -> white </%> <%> <*> string ) ; -> space ( child _ property . value ) ? STR : child _ property . value ; </%> <%> <-> } </%> <@> min _ level = log _ level _ from _ string ( child _ property . value ) . ordinal ; </@> <%> <-> log _ level _ from _ string ( </%> <%> <-> ) . ordinal </%>
<%> <-> { string [ ] tokens = child _ property . value . split _ and _ trim _ tokens ( ',' ) ; </%> <%> <*> tokens -> string _ helpers </%> <%> <*> select ( log -> is _ null </%> <%> <*> level -> or </%> <%> <*> from -> white </%> <%> <*> string ) ; -> space ( child _ property . value ) ? STR : child _ property . value ; </%> <%> <-> } </%> <%> <-> log _ level _ from _ string ( </%> <%> <-> ) . ordinal </%> <@> max _ level = log _ level _ from _ string ( child _ property . value ) . ordinal ; </@> 
<%> <-> _ key </%> <@> builder . append ( context . request . query _ string [ query _ string _ key ] ) ; </@> <%> <-> _ key </%> <%> <-> _ key </%> <%> <*> builder . append ( context . request . cookies [ cookie ] ) ; -> http _ cookie cookie = context . request . cookies [ cookie ] ; </%> <%> <+> if ( cookie ! = null ) </%>
<%> <-> _ key </%> <%> <-> _ key </%> <%> <-> _ key </%> <@> builder . append ( context . request . form [ form _ key ] ) ; </@> <%> <*> builder . append ( context . request . cookies [ cookie ] ) ; -> http _ cookie cookie = context . request . cookies [ cookie ] ; </%> <%> <+> if ( cookie ! = null ) builder . append ( cookie . value ) ; </%>
<%> <-> network _ sender sender ; bool keep ; </%> <@> keep = keep _ connection ; if ( sender ! = null ) </@> <%> <+> if ( sender ! = null ) { </%> <%> <+> sender . close ( ) ; sender = null ; } } ; if ( sender = = null ) </%>
<%> <-> network _ sender sender ; bool keep ; </%> <@> keep = keep _ connection ; if ( sender ! = null ) </@> <%> <+> if ( sender ! = null ) { </%> <%> <+> sender . close ( ) ; sender = null ; } } ; if ( sender = = null ) </%>
<%> <-> = false </%> <@> this . item = item ; </@> 
<%> <+> } </%> <@> this . all _ layouts = new list < layout > ( object _ graph _ scanner . find _ reachable _ objects < layout > ( this ) ) ; </@> <%> <-> bool found _ not _ thread _ agnostic = false ; foreach ( layout layout in this . all _ layouts ) { if ( ! layout . is _ thread _ agnostic ) { found _ not _ thread _ agnostic = true ; break ; } } </%>
<%> <-> file _ characteristics file _ characteristics ; </%> <@> assert . false ( empty _ cache . get _ file _ characteristics ( STR , out file _ characteristics ) ) ; assert . null ( file _ characteristics ) ; </@> <%> <*> assert . false ( cache . get _ file _ characteristics ( STR , out file _ characteristics ) ) ; assert . null ( file _ characteristics ) ; -> assert . null ( cache . get _ file _ characteristics ( STR ) ) ; </%>
<%> <-> file _ characteristics file _ characteristics ; </%> <%> <*> assert . false ( empty _ cache . get _ file _ characteristics ( STR , out file _ characteristics ) ) ; assert . null ( file _ characteristics ) ; -> assert . null ( empty _ cache . get _ file _ characteristics ( STR ) ) ; </%> <@> assert . false ( cache . get _ file _ characteristics ( STR , out file _ characteristics ) ) ; assert . null ( file _ characteristics ) ; </@> <%> <*> assert . true ( cache . get _ file _ characteristics ( temp _ file , out file _ characteristics ) ) ; assert . not _ equal ( date _ time . min _ value , file _ characteristics . creation _ time ) ; -> var file _ characteristics = cache . get _ file _ characteristics ( STR ) ; </%> <%> <+> assert . not _ null ( file _ characteristics ) ; </%>
<%> <-> bool get _ </%> <%> <*> ( out file -> get </%> <%> <-> characteristics </%> <%> <+> ( </%> <@> file _ characteristics = new file _ characteristics ( this . open _ time , this . current _ file _ length ) ; return true ; </@> 
 <@> if ( ! config . contains _ column ( s ) ) </@> <%> <-> config . </%>
<%> <-> config . receiver _ parameters = configuration _ parameter . capture _ configuration _ parameters ( receiver ) ; if ( receiver is i _ log _ event _ receiver _ with _ parser ) { config . parser _ parameters = configuration _ parameter . capture _ configuration _ parameters ( ( ( i _ log _ event _ receiver _ with _ parser ) receiver ) . parser ) ; } </%> <@> return config . save ( file _ name ) ; </@> <%> <-> config . </%> <%> <-> config . </%>
<%> <-> config . receiver _ parameters = configuration _ parameter . capture _ configuration _ parameters ( receiver ) ; if ( receiver is i _ log _ event _ receiver _ with _ parser ) { config . parser _ parameters = configuration _ parameter . capture _ configuration _ parameters ( ( ( i _ log _ event _ receiver _ with _ parser ) receiver ) . parser ) ; } </%> <%> <-> config . </%> <@> if ( config . file _ name = = null ) </@> <%> <-> config . </%> <%> <-> config . </%> <%> <-> config . </%>
<%> <-> config . receiver _ parameters = configuration _ parameter . capture _ configuration _ parameters ( receiver ) ; if ( receiver is i _ log _ event _ receiver _ with _ parser ) { config . parser _ parameters = configuration _ parameter . capture _ configuration _ parameters ( ( ( i _ log _ event _ receiver _ with _ parser ) receiver ) . parser ) ; } </%> <%> <-> config . </%> <%> <-> config . </%> <@> return capture _ parameters _ and _ save _ config ( config . file _ name ) ; </@> <%> <-> config . </%> <%> <-> config . </%>
<%> <-> config . </%> <%> <-> config . </%> <@> if ( config . file _ name ! = null ) sfd . file _ name = config . file _ name ; </@> <%> <-> config . </%> <%> <-> config . </%>
<%> <-> config . </%> <%> <-> config . </%> <@> config . name = path . get _ file _ name _ without _ extension ( sfd . file _ name ) ; tab _ page . text = config . name ; </@> <%> <-> config . </%> <%> <-> config . </%>
<%> <-> config . </%> <@> sorted _ list < log _ event , log _ event > new _ filtered _ events = new sorted _ list < log _ event , log _ event > ( new item _ comparer ( config . order _ by , config . sort _ ascending ) ) ; </@> 
 <@> if ( config . dirty ) </@> <%> <-> config . </%>
<%> <-> config . </%> <@> STR + config . name + STR , </@> 
<%> <+> i _ enumerable < logger > loggers ; </%> <@> }  var loggers = new list < logger > ( logger _ cache . loggers ) ; </@> 
 <@> test _ writer ( writer , expected ) ; </@> <%> <*> private static void test _ writer ( string _ writer writer , string expected ) -> private static void test _ writer ( string expected , string _ writer writer ) </%>
<%> <*> writer -> expected </%> <%> <*> expected -> writer </%> <@> private static void test _ writer ( string _ writer writer , string expected ) </@> 
<%> <*> file _ share . read _ write -> false </%> <@> lock ( this ) { file _ length + = bytes . length ; last _ write _ time = date _ time . now ; file . write ( bytes , 0 , bytes . length ) ; } </@> 
<%> <-> this . </%> <%> <-> this . </%> <@> this . creation _ time _ utc = date _ time . utc _ now ; file . set _ creation _ time _ utc ( this . file _ name , this . creation _ time _ utc ) ; </@> 
<%> <-> this . </%> <@> return this . creation _ time _ utc ; </@> 
<%> <+> if ( task _ timeout _ seconds > 0 ) task _ timeout _ timer . change ( task _ timeout _ seconds * NUM , timeout . infinite ) ; </%> <%> <-> , cancel _ token _ source . token </%> <%> <-> , cancel _ token _ source . token </%> <@> previous _ task . start ( task _ scheduler . default ) ; </@> 
 <@> this . do _ invoke ( parameters , log _ event . continuation ) ; </@> <%> <+> protected virtual void do _ invoke ( object [ ] parameters , async _ log _ event _ info log _ event ) { do _ invoke ( parameters , log _ event . continuation ) ; } </%>
<%> <-> } catch ( exception exception ) { if ( exception . must _ be _ rethrown _ immediately ( ) ) { throw ; } internal _ logger . error ( exception , STR ) ; if ( exception . must _ be _ rethrown ( ) ) { throw new n _ log _ configuration _ exception ( STR + assembly _ file , exception ) ; } } </%> <@> try { internal _ logger . info ( STR , assembly _ name ) ; </@> <%> <-> } catch ( exception exception ) { if ( exception . must _ be _ rethrown _ immediately ( ) ) { </%>
 <@> try { archive _ mutex = create _ archive _ mutex ( ) ; } catch ( security _ exception ex ) { internal _ logger . warn ( ex , STR ) ; } </@> <%> <*> protected virtual mutex create _ archive _ mutex ( ) -> private mutex create _ archive _ mutex ( ) </%> <%> <+> try { return create _ sharable _ mutex ( STR ) ; } catch ( security _ exception ex ) </%>
<%> <+> var type = method . declaring _ type ; if ( this . clean _ names _ of _ async _ continuations & & method . name = = STR & & type ? . declaring _ type ! = null & & type . name . starts _ with ( STR ) ) { int end _ index = type . name . index _ of ( '>' , 1 ) ; if ( end _ index > 1 ) { method _ name = type . name . substring ( 1 , end _ index - 1 ) ; } } </%> <@> if ( this . clean _ names _ of _ anonymous _ delegates & & ( method _ name . contains ( STR ) & & method _ name . starts _ with ( STR ) & & method _ name . contains ( STR ) ) ) </@> 
<%> <*> internal -> private </%> <%> <*> object -> skip </%> <%> <*> supports -> formattable </%> <%> <*> format -> to </%> <%> <*> provider -> string </%> <@> case type _ code . string : return false ; case type _ code . empty : return false ; default : return true ; </@> <%> <*> ! object -> skip </%> <%> <*> supports -> formattable </%> <%> <*> format -> to </%> <%> <*> provider -> string </%>
<%> <+> { internal class dictionary _ base </%> <%> <*> internal class dictionary _ base -> private hashtable hashtable = new hashtable ( ) ; </%> <%> <+> public i _ dictionary dictionary </%> <%> <*> private hashtable hashtable = new hashtable ( ) ; public i _ dictionary dictionary -> get </%> <@> get { return hashtable ; } } public void clear ( ) { hashtable . clear ( ) ; </@> <%> <+> public void clear ( ) { hashtable . clear ( ) ; } </%> <%> <+> } </%>
<%> <*> internal class -> public </%> <%> <*> : system . collections . dictionary _ base -> ( ) </%> <%> <*> public string _ dictionary ( ) -> } </%> <%> <+> public virtual string this [ string key ] { get </%> <%> <+> return ( string ) this . dictionary [ key ] ; </%> <%> <*> public virtual string this [ string key ] -> set </%> <@> get { return ( string ) this . dictionary [ key ] ; } set { this . dictionary [ key ] = value ; } </@> <%> <+> } </%> <%> <+> { this . dictionary . add ( key , value ) ; } public virtual bool contains ( string key ) { return this . dictionary . contains ( key ) ; } </%>
<%> <+> { layout _ appender _ basedir public class base _ dir _ layout _ appender : layout _ appender </%> <%> <*> layout _ appender _ basedir public class base _ dir _ layout _ appender : layout _ appender -> private string file _ name = null ; </%> <%> <+> private string directory _ name = null ; public string file </%> <%> <*> private string file _ name = null ; private string directory _ name = null ; public string file -> get </%> <@> get { return file _ name ; } set { file _ name = value ; } </@> <%> <-> public string dir </%> <%> <+> set </%> <%> <-> get { return directory _ name ; } set { directory _ name = value ; </%>
<%> <*> layout _ appender _ nlogdir public class n _ log _ dir _ layout _ appender : layout _ appender -> private string file _ name = null ; </%> <%> <+> private string directory _ name = null ; private static string nlog _ dir ; static n _ log _ dir _ layout _ appender ( ) </%> <%> <*> private string file _ name = null ; private string directory _ name = null ; private static string nlog _ dir ; static n _ log _ dir _ layout _ appender ( ) -> nlog _ dir = path . get _ directory _ name ( typeof ( log _ manager ) . assembly . location ) ; </%> <%> <+> } public string file { get </%> <%> <*> nlog _ dir = path . get _ directory -> return file </%> <%> <*> ( typeof ( log _ manager ) . assembly . location ) ; -> ; </%> <%> <-> public string file </%> <%> <+> set </%> <@> get { return file _ name ; } set { file _ name = value ; } </@> <%> <+> } </%> <%> <+> { get </%> <%> <-> get { </%> <%> <-> } </%>
<%> <-> public string file </%> <%> <+> set </%> <%> <-> get { return file _ name ; } set { </%> <%> <-> } </%> <%> <+> } </%> <%> <+> { get </%> <@> get { return directory _ name ; } set { directory _ name = value ; } </@> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> directory _ name = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%>
<%> <-> } set { directory _ name = value ; } </%> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> directory _ name = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%> <%> <+> { get </%> <@> get { return nlog _ dir ; } </@> <%> <+> } </%> <%> <+> { string base _ dir = n _ log _ dir ; if ( file _ name ! = null ) </%> <%> <-> string base _ dir = n _ log _ dir ; if ( file _ name ! = null ) { </%>
<%> <+> { layout _ appender _ environment public class environment _ layout _ appender : layout _ appender </%> <%> <*> layout _ appender _ environment public class environment _ layout _ appender : layout _ appender -> private string variable = null ; </%> <%> <+> required _ parameter public string variable </%> <%> <*> private string variable = null ; required _ parameter public string variable -> get </%> <@> get { return variable ; } set { variable = value ; } </@> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> variable = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%>
<%> <-> } set { variable = value ; } </%> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> variable = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%> <%> <+> { if ( variable ! = null ) </%> <@> if ( variable ! = null ) { builder . append ( apply _ padding ( environment . get _ environment _ variable ( variable ) ) ) ; } </@> <%> <+> } </%>
<%> <+> { layout _ appender _ guid public class guid _ layout _ appender : layout _ appender </%> <%> <-> layout _ appender _ guid </%> <%> <+> private string format = STR ; </%> <%> <*> class guid _ layout _ appender : layout _ appender -> string format </%> <%> <*> private string format = STR ; public string format -> get </%> <@> get { return format ; } set { format = value ; } </@> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM ; } protected internal override void append ( string _ builder builder , log _ event _ info ev ) { builder . append ( apply _ padding ( guid . new _ guid ( ) . to _ string ( format ) ) ) ; -> format = value ; </%>
<%> <*> app -> current </%> <%> <*> domain -> app </%> <%> <*> helper -> domain </%> <%> <-> ( ) </%> <%> <*> app -> current </%> <%> <*> domain -> app </%> <%> <*> helper -> domain </%> <%> <-> ( ) </%> <%> <+> i _ enumerable < </%> <%> <+> > </%> <%> <*> app -> current </%> <%> <*> domain -> app </%> <%> <*> helper -> domain </%> <%> <-> ( ) </%> <@> foreach ( var path in private _ bin _ paths . split ( new [ ] { ';' } , string _ split _ options . remove _ empty _ entries ) ) </@> 
<%> <-> _ method </%> <%> <-> _ method </%> <@> assert . is _ instance _ of _ type ( result , typeof ( condition _ message _ expression ) ) ; </@> <%> <-> _ method </%> <%> <-> result , </%> <%> <+> , result </%> <%> <-> _ method </%>
<%> <-> result , </%> <%> <+> , result </%> <%> <-> _ method </%> <@> assert . is _ instance _ of _ type ( result , typeof ( condition _ level _ expression ) ) ; </@> <%> <-> _ method </%> <%> <-> result , </%> <%> <+> , result </%> <%> <-> _ method </%>
<%> <-> result , </%> <%> <+> , result </%> <%> <-> _ method </%> <@> assert . is _ instance _ of _ type ( result , typeof ( condition _ logger _ name _ expression ) ) ; </@> <%> <-> _ method </%>
 <@> assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; </@> <%> <-> last _ exception , </%> <%> <+> , last _ exception </%>
<%> <-> last _ exception , </%> <%> <+> , last _ exception </%> <@> assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; </@> <%> <-> _ method </%>
<%> <-> _ method </%> <@> assert . is _ instance _ of _ type ( last _ exception , typeof ( not _ supported _ exception ) ) ; </@> 
 <@> assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; </@> <%> <-> last _ exception , </%> <%> <+> , last _ exception </%>
<%> <-> last _ exception , </%> <%> <+> , last _ exception </%> <@> assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; </@> <%> <-> _ method </%>
 <@> assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; </@> <%> <-> last _ exception , </%> <%> <+> , last _ exception </%>
<%> <-> last _ exception , </%> <%> <+> , last _ exception </%> <@> assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; </@> 
<%> <-> _ method </%> <@> assert . is _ instance _ of _ type ( client , typeof ( my _ smtp _ client ) ) ; </@> 
<%> <-> _ method </%> <@> assert . is _ instance _ of _ type ( exceptions [ 0 ] , typeof ( timeout _ exception ) ) ; </@> <%> <-> _ method </%>
 <@> assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; </@> <%> <-> _ method </%>
 <@> assert . is _ instance _ of _ type ( last _ exception , typeof ( n _ log _ runtime _ exception ) ) ; </@> <%> <-> _ method </%>
<%> <+> using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; </%> <%> <+> thread _ safe </%> <@> internal . string _ builder _ ext . append _ invariant ( builder , common . async _ helpers . get _ managed _ thread _ id ( ) ) ; </@> 
<%> <*> public virtual bool -> bool i _ log _ event _ receiver . </%> <%> <*> get { return input _ thread . is _ alive ; } -> get </%> <%> <+> { if ( input _ thread = = null ) return false ; return input _ thread . is _ alive ; } </%> <%> <-> quit _ </%> <%> <+> _ quit _ requested ( ) </%> <@> get { return quit _ thread ; } </@> 
<%> <*> this . app _ info = STR ; -> app _ info = STR ; </%> <%> <+> app _ info = STR ; </%> <@> this . app _ info = STR ; </@> <%> <*> this . machine _ name = STR ; -> machine _ name = STR ; </%>
<%> <+> if ( instances . count = = 0 ) </%> <%> <+> lici . file _ name = create _ instance _ file _ name ( logs _ dir ) ; lici . save ( ) ; </%> <@> tab _ control . tab _ pages . add ( instance . create _ tab ( this ) ) ; </@> <%> <-> total _ </%> <%> <*> + + -> . add ( instance ) </%> <%> <+> lici . file _ name = create _ instance _ file _ name ( logs _ dir ) ; lici . save ( ) ; </%> <%> <-> tab _ control . tab _ pages . add ( instance . create _ tab ( this ) ) ; </%>
<%> <*> int -> file </%> <%> <*> ptr -> stream </%> <%> <*> handle -> stream </%> <%> <*> var file _ info = new file _ info ( file _ name ) ; if ( file _ info . exists ) -> if ( ! string . is _ null _ or _ empty ( file _ name ) ) </%> <%> <+> var file _ info = new file _ info ( file _ name ) ; if ( file _ info . exists ) { </%> <%> <+> } </%> <@> else return null ; </@> 
 <@> builder . append ( apply _ padding ( context . request . query _ string [ query _ string ] ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( context . request . form [ form ] ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( cookie . value ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( context . request . server _ variables [ server _ variable ] ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( context . request [ item ] ) ) ; </@> 
 <@> builder . append ( apply _ padding ( log _ event . logger _ name ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <*> builder . append ( apply _ padding ( log _ event . logger _ name ) ) ; -> builder . append ( log _ event . logger _ name ) ; </%> <%> <+> } protected internal override bool is _ volatile ( ) { return false ; </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( log _ event . logger _ name . substring ( last _ dot + 1 ) ) ) ; </@> <%> <*> builder . append ( apply _ padding ( log _ event . logger _ name ) ) ; -> builder . append ( log _ event . logger _ name ) ; </%> <%> <+> } protected internal override bool is _ volatile ( ) { return false ; </%>
<%> <+> . invariant _ culture </%> <@> builder . append ( apply _ padding ( msg ) ) ; </@> 
 <@> builder . append ( apply _ padding ( path . combine ( base _ dir , file ) ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( path . combine ( base _ dir , dir ) ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( base _ dir ) ) ; </@> 
 <@> builder . append ( apply _ padding ( path . combine ( base _ dir , file ) ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( path . combine ( base _ dir , dir ) ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( base _ dir ) ) ; </@> 
<%> <+> sealed </%> <@> builder . append ( apply _ padding ( environment _ helper . get _ safe _ environment _ variable ( variable ) ) ) ; </@> 
<%> <+> ( ) </%> <@> get { return false ; } </@> 
<%> <-> _ ignores _ layout _ true </%> <%> <*> string -> condition _ expression </%> <@> get { return default _ filter . to _ string ( ) ; } set { default _ filter = condition _ parser . parse _ expression ( value ) ; } </@> 
 <@> builder . append ( apply _ padding ( path . combine ( base _ dir , file ) ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( path . combine ( base _ dir , dir ) ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( base _ dir ) ) ; </@> 
 <@> string _ builder sb = builder ; if ( padding ! = 0 ) sb = new string _ builder ( ) ; int sbstart = sb . length ; </@> <%> <*> sb -> builder </%> <%> <*> sb -> builder </%>
 <@> builder . append ( apply _ padding ( path . combine ( base _ dir , file ) ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( path . combine ( base _ dir , dir ) ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( base _ dir ) ) ; </@> 
 <@> builder . append ( apply _ padding ( thread _ id _ helper . instance . current _ process _ name ) ) ; </@> <%> <-> ( apply _ padding </%> <%> <-> ) </%>
<%> <-> ( apply _ padding </%> <%> <-> ) </%> <@> builder . append ( apply _ padding ( thread _ id _ helper . instance . current _ process _ base _ name ) ) ; </@> 
 <@> namespace n _ log _ filters </@> <%> <*> neutral , log , -> neutral , log , </%>
 <@> namespace n _ log _ layout _ appenders </@> <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%>
 <@> namespace n _ log _ appenders </@> <%> <*> appender -> target </%> <%> <*> public appender _ attribute ( string s ) -> private bool ignores _ layout = false ; </%> <%> <+> public target _ attribute ( string name ) </%> <%> <*> s -> name </%>
 <@> namespace n _ log _ appenders </@> <%> <*> appender -> target </%> <%> <*> appender -> target </%> <%> <*> appender -> target </%> <%> <*> appender -> target </%>
 <@> namespace n _ log _ filters </@> <%> <*> public filter _ attribute ( string s ) -> public filter _ attribute ( string name ) </%> <%> <*> s -> name </%>
 <@> namespace n _ log _ layout _ appenders </@> <%> <*> appender -> renderer </%> <%> <*> public layout _ appender _ attribute ( string s ) -> private bool ignores _ padding = false ; </%> <%> <+> public layout _ renderer _ attribute ( string format _ string ) </%> <%> <*> s -> format _ string </%>
 <@> namespace n _ log _ layout _ appenders </@> <%> <*> public abstract class layout _ appender -> public abstract class layout _ renderer </%> <%> <*> protected layout _ appender ( ) { } -> protected layout _ renderer ( ) { } </%>
<%> <*> string -> performance _ </%> <%> <+> counter _ type </%> <@> get { return counter _ type . to _ string ( ) ; } set { counter _ type = ( performance _ counter _ type ) enum . parse ( typeof ( performance _ counter _ type ) , value , false ) ; } </@> 
 <@> bool? wrote _ full _ batch _ size = false ; bool lock _ taken = false ; </@> <%> <*> if -> lock </%> <%> <*> time _ to -> this . write </%> <%> <*> sleep -> lock </%> <%> <*> between _ batches < = 0 -> object </%> <%> <-> monitor . enter ( this . timer _ lock _ object ) ; lock _ taken = true ; } </%> <%> <-> if ( count = = 0 ) wrote _ full _ batch _ size = null ; </%>
 <@> private readonly static char [ ] directory _ separator _ chars = new [ ] { path . directory _ separator _ char , path . alt _ directory _ separator _ char } ; </@> <%> <-> readonly </%> <%> <+> readonly </%>
<%> <-> readonly </%> <%> <+> readonly </%> <@> private readonly static hash _ set < char > invalid _ file _ name _ chars = new hash _ set < char > ( path . get _ invalid _ file _ name _ chars ( ) ) ; </@> 
<%> <*> int -> long </%> <%> <*> u _ int -> ushort </%> <%> <*> u _ int -> uint </%> <%> <*> u _ int -> ulong </%> <@> float single _ value = ( single ) value ; </@> 
<%> <*> ) -> & & reusable _ builder . equal _ to ( cached _ prev _ raw _ file _ name ) ) </%> <@> if ( reusable _ builder . equal _ to ( cached _ prev _ raw _ file _ name ) ) return cached _ prev _ raw _ file _ name ; </@> 
<%> <*> ) -> & & monitor _ for _ enable _ file _ delete _ event ( file _ name , ref last _ simple _ monitor _ check _ time _ utc ) ) </%> <@> if ( monitor _ for _ enable _ file _ delete _ event ( file _ name , ref last _ simple _ monitor _ check _ time _ utc ) ) { file . dispose ( ) ; file = create _ file _ stream ( false ) ; current _ file _ length = file . length ; } </@> 
<%> <*> ) -> & & ! delete _ old _ archive _ file ( file _ name ) ) </%> <@> if ( ! delete _ old _ archive _ file ( file _ name ) ) { file _ share & = ~ file _ share . delete ; } </@> 
<%> <*> ) -> & & ! previous _ task . wait ( NUM ) ) </%> <@> if ( ! previous _ task . wait ( NUM ) ) { internal _ logger . debug ( STR , name , previous _ task . status ) ; } </@> 
<%> <*> ) -> & & monitor _ for _ enable _ file _ delete _ event ( file _ name , ref last _ simple _ monitor _ check _ time _ utc ) ) </%> <@> if ( monitor _ for _ enable _ file _ delete _ event ( file _ name , ref last _ simple _ monitor _ check _ time _ utc ) ) { file . dispose ( ) ; file = create _ file _ stream ( false ) ; } </@> 
 <@> var archive _ file _ pattern _ to _ watch _ path = get _ full _ path _ for _ pattern ( archive _ file _ pattern _ to _ watch ) ; string directory _ path = path . get _ directory _ name ( archive _ file _ pattern _ to _ watch _ path ) ; </@> <%> <-> _ path </%> <%> <-> } private static string get _ full _ path _ for _ pattern ( string pattern ) { string file _ pattern = path . get _ file _ name ( pattern ) ; </%>
<%> <*> public file _ characteristics get _ file _ characteristics ( string file _ name ) -> private base _ file _ appender get _ appender ( string file _ name ) </%> <@> return appender . get _ file _ characteristics ( ) ; </@> <%> <+> public date _ time ? get _ file _ creation _ time _ utc ( string file _ path , bool fallback ) { var appender = get _ appender ( file _ path ) ; date _ time ? result = null ; if ( appender ! = null ) result = appender . get _ file _ creation _ time _ utc ( ) ; if ( result = = null & & fallback ) </%>
<%> <*> return cached _ cleaned _ file _ named ? ? cleanup _ invalid _ file _ name _ chars ( -> return </%> <%> <+> full _ </%> <%> <-> ) </%> <%> <+> get _ full _ </%> <%> <-> . render </%> <@> string file _ name = path . get _ full _ path ( cleanup _ invalid _ file _ name _ chars ( bucket . key ) ) ; </@> 
<%> <-> current _ timer . change ( timeout . infinite , timeout . infinite ) ; manual _ reset _ event wait _ handle = new manual _ reset _ event ( false ) ; </%> <%> <+> wait _ for _ </%> <%> <*> wait -> time </%> <%> <*> handle -> span . from _ seconds ( 1 </%> <%> <+> ) </%> <%> <*> if -> lock </%> <%> <*> wait _ handle -> this </%> <%> <*> wait -> lock </%> <%> <*> one ( NUM -> object </%> <%> <-> ) </%> <@> wait _ handle . close ( ) ; lock ( this . lock _ object ) { write _ events _ in _ buffer ( STR ) ; } </@> 
 <@> fact _ skip _ time _ span _ tostring _ isn _ culture _ aware _ in _ ne </@> <%> <*> renderer . property = process _ info _ property . total _ processor _ time ; -> renderer . property = process _ info _ property . start _ time ; </%> <%> <+> renderer . format = STR ; </%>
<%> <+> using system ; </%> <%> <+> using system _ security ; </%> <@> internal class socket _ proxy : socket , i _ socket </@> <%> <*> public socket _ proxy ( address _ family address _ family , socket _ type socket _ type , protocol _ type protocol _ type ) -> private socket socket ; </%> <%> <*> : base ( address _ family , socket _ type , protocol _ type ) -> internal socket _ proxy ( address _ family address _ family , socket _ type socket _ type , protocol _ type protocol _ type ) </%> <%> <+> this . socket = new socket ( address _ family , socket _ type , protocol _ type ) ; } public void close ( ) { </%>
<%> <+> { lock ( exceptions ) </%> <@> lock ( exceptions ) { exceptions . add ( ex ) ; } </@> <%> <+> } </%> <%> <+> { async _ continuation ( get _ combined _ exception ( exceptions ) ) ; } } ; foreach ( t item in items ) </%>
<%> <*> system _ diagnostics _ code _ analysis _ suppress _ message _ microsoft _ naming _ c _ identifiers _ should _ be _ cased _ correctly _ message _ id _ i _ justification _ backwards _ compatibility -> suppress _ message _ microsoft _ naming _ c _ identifiers _ should _ be _ cased _ correctly _ message _ id _ i _ justification _ backwards _ compatibility </%> <@> system _ diagnostics _ code _ analysis _ suppress _ message _ microsoft _ naming _ c _ compound _ words _ should _ be _ cased _ correctly _ message _ id _ time _ stamp _ justification _ backwards _ compatibility </@> 
<%> <+> bool rebuild _ message _ template _ parameters = reset _ message _ template _ parameters ( ) ; </%> <%> <+> rebuild _ message _ template _ parameters </%> <@> system _ diagnostics _ code _ analysis _ suppress _ message _ microsoft _ performance _ c _ properties _ should _ not _ return _ arrays _ justification _ for _ backwards _ compatibility </@> <%> <+> bool rebuild _ message _ template _ parameters = reset _ message _ template _ parameters ( ) ; </%> <%> <+> rebuild _ message _ template _ parameters </%>
<%> <*> template _ parameters . add ( new message _ template _ parameter ( hole . name , parameters [ hole . index ] , hole . format , hole . capture _ type ) ) ; -> var value = get _ hole _ value _ safe ( parameters , hole . index ) ; </%> <%> <+> template _ parameters . add ( new message _ template _ parameter ( hole . name , value , hole . format , hole . capture _ type ) ) ; </%> <@> is _ positional = false ; if ( hole _ index ! = 0 ) </@> <%> <+> is _ positional = false ; if ( hole _ index ! = 0 ) { </%> <%> <+> } </%>
 <@> internal _ logger . error ( STR , config _ exception ) ; </@> <%> <-> STR , </%> <%> <+> , STR </%>
<%> <-> STR , </%> <%> <+> , STR </%> <@> internal _ logger . error ( STR , config _ exception ) ; </@> 
<%> <*> logger _ names -> strings </%> <@> values = new list _ of _ strings ( ) { STR , STR , STR , } </@> <%> <-> new list _ of _ strings ( ) { </%> <%> <-> STR , STR , } </%>
 <@> var throw _ exceptions = log _ manager . throw _ exceptions ; try { log _ manager . throw _ exceptions = false ; assert _ layout _ renderer _ output ( STR , STR ) ; } finally {  log _ manager . throw _ exceptions = throw _ exceptions ; } </@> <%> <-> var throw _ exceptions = log _ manager . throw _ exceptions ; try { </%>
<%> <+> this . close _ socket ( continuation ) ; } } private void close _ socket ( async _ continuation continuation ) { </%> <%> <+> { var sock = this . socket ; this . socket = null ; if ( sock ! = null ) </%> <%> <*> if ( this . socket ! = null ) { this . socket . close ( ) ; } -> sock . close ( ) ; </%> <%> <+> continuation ( null ) ; } </%> <%> <+> { if ( exception . must _ be _ rethrown ( ) ) </%> <@> if ( exception . must _ be _ rethrown ( ) ) { throw ; } </@> <%> <*> this . socket = null -> continuation ( exception ) </%>
<%> <+> return null ; </%> <%> <+> ! = date _ time </%> <%> <*> has -> min </%> <%> <-> . value </%> <@> return previous _ log _ event _ timestamp . value ; } if ( previous _ log _ overlapped _ period ( log _ event , previous _ log _ event _ timestamp . value , last _ write _ time _ source ) ) </@> <%> <-> . value </%>
<%> <+> ! = date _ time </%> <%> <*> has -> min </%> <%> <-> . value </%> <%> <-> . value </%> <%> <-> . value </%> <@> return previous _ log _ event _ timestamp . value ; </@> 
 <@> if ( sql _ server _ test . is _ travis ( ) ) </@> <%> <*> sql _ server _ test . try _ drop _ database ( ) ; -> bool is _ app _ veyor = is _ app _ veyor ( ) ; </%> <%> <+> sql _ server _ test . try _ drop _ database ( is _ app _ veyor ) ; </%> <%> <+> is _ app _ veyor </%>
<%> <+> is _ app _ veyor </%> <@> if ( sql _ server _ test . is _ travis ( ) ) </@> <%> <*> sql _ server _ test . try _ drop _ database ( ) ; -> bool is _ app _ veyor = is _ app _ veyor ( ) ; </%> <%> <+> sql _ server _ test . try _ drop _ database ( is _ app _ veyor ) ; </%> <%> <+> is _ app _ veyor </%>
<%> <-> if ( app _ domain . current _ domain . is _ fully _ trusted ) </%> <%> <+> try </%> <%> <-> try </%> <%> <+> if ( platform _ detector . is _ desktop _ win ) </%> <@> if ( platform _ detector . is _ desktop _ win ) { return this . windows _ create _ file ( this . file _ name , allow _ concurrent _ write ) ; } </@> <%> <-> catch ( security _ exception ) </%> <%> <*> { -> } </%> <%> <*> internal _ logger . debug ( STR ) ; -> catch ( security _ exception ) </%> <%> <*> } -> { </%> <%> <+> internal _ logger . debug ( STR ) ; </%>
 <@> var buckets = sort _ helpers . bucket _ sort ( log _ events , c = > this . build _ connection _ string ( c . log _ event ) ) ; </@> <%> <*> foreach -> for </%> <%> <*> async _ log _ event _ info ev in -> int i = 0 ; i < </%> <%> <*> ) -> . count ; i + + ) </%> <%> <+> async _ log _ event _ info ev = kvp . value [ i ] ; </%>
<%> <+> false </%> <%> <-> } </%> <%> <*> else -> return true ; </%> <%> <-> { internal _ logger . error ( STR , ex ) ; on _ exception ( ex ) ; } write _ to _ target _ with _ filter _ chain ( target _ list _ head . next _ in _ chain , log _ event , on _ exception ) ; } ) ) ; </%> <%> <*> collection -> enumerable </%> <@> var result = filter _ result . neutral ; </@> 
<%> <-> } </%> <%> <+> build _ web _ service _ query _ parameters ( parameter _ values , sb ) ; </%> <%> <*> separator -> query _ parameters </%> <%> <*> STR ; -> sb . to _ string ( ) ; </%> <%> <-> . to _ string ( ) </%> <@> builder . query = query _ parameters . to _ string ( ) ; </@> <%> <+> } private void build _ web _ service _ query _ parameters ( object [ ] parameter _ values , string _ builder sb ) { url _ helper . escape _ encoding _ flag encoding _ flags = url _ helper . get _ uri _ string _ encoding _ flags ( escape _ data _ n _ log _ legacy , false , escape _ data _ rfc ) ; string separator = string . empty ; for ( int i = 0 ; i < this . parameters . count ; i + + ) { sb . append ( separator ) ; </%>
<%> <-> using system _ configuration ; </%> <@> using n _ log _ internal ; using n _ log _ time ; </@> <%> <+> readonly </%>
 <@> builder . append ( level . to _ string ( ) ) ; </@> <%> <-> . to _ string ( ) </%> <%> <*> string -> var </%>
<%> <-> . to _ string ( ) </%> <@> builder . append ( ex . to _ string ( ) ) ; } string msg = builder . to _ string ( ) ; </@> 
 <@> append _ inner _ exception ( builder , current _ exception ) ; </@> <%> <*> current _ exception = current _ exception . inner _ exception ; while ( current _ exception ! = null & & current _ level < max _ inner _ exception _ level ) { append _ inner _ exception ( builder , current _ exception ) ; current _ exception = current _ exception . inner _ exception ; current _ level + + ; } -> current _ level = append _ inner _ exception _ tree ( current _ exception , current _ level , builder ) ; </%>
<%> <-> using system _ collections _ generic ; </%> <@> using n _ log _ common ; using n _ log _ internal ; </@> 
<%> <-> using system _ collections ; </%> <%> <-> using system _ diagnostics _ code _ analysis ; </%> <@> using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; using n _ log _ internal _ file _ appenders ; using n _ log _ layouts ; </@> 
<%> <+> registry _ hive hive ; </%> <@> this . hive = registry _ hive . local _ machine ; </@> <%> <-> this . </%> <%> <+> return new parse _ result { </%>
<%> <+> registry _ hive hive ; </%> <%> <-> this . </%> <@> this . hive = registry _ hive . current _ user ; </@> <%> <+> return new parse _ result { sub _ key = subkey , hive = hive , } ; </%>
 <@> namespace n _ log _ appenders </@> <%> <*> appender -> target </%> <%> <*> appender -> target </%> <%> <*> appender -> target </%> <%> <*> appender -> target </%>
 <@> namespace n _ log _ filters </@> <%> <*> neutral , log , -> neutral , log , </%>
 <@> namespace n _ log _ layout _ appenders </@> <%> <*> appender -> renderer </%> <%> <*> public layout _ appender _ attribute ( string s ) -> private bool ignores _ padding = false ; </%> <%> <+> public layout _ renderer _ attribute ( string format _ string ) </%> <%> <*> s -> format _ string </%>
 <@> namespace n _ log _ appenders </@> <%> <*> appender -> target </%> <%> <*> public appender _ attribute ( string s ) -> private bool ignores _ layout = false ; </%> <%> <+> public target _ attribute ( string name ) </%> <%> <*> s -> name </%>
 <@> namespace n _ log _ layout _ appenders </@> <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%>
 <@> namespace n _ log _ layout _ appenders </@> <%> <*> public abstract class layout _ appender -> public abstract class layout _ renderer </%> <%> <*> protected layout _ appender ( ) { } -> protected layout _ renderer ( ) { } </%>
 <@> namespace n _ log _ filters </@> <%> <*> public filter _ attribute ( string s ) -> public filter _ attribute ( string name ) </%> <%> <*> s -> name </%>
 <@> else if ( is _ archiving _ enabled ( ) ) </@> <%> <*> private bool is _ archiving _ enabled ( ) { return archive _ above _ size ! = archive _ above _ size _ disabled | | archive _ every ! = file _ archive _ period . none ; } -> private bool is _ archiving _ enabled = > archive _ above _ size ! = archive _ above _ size _ disabled | | archive _ every ! = file _ archive _ period . none ; </%>
<%> <+> delete _ old _ date _ archives ( pattern ) ; </%> <%> <*> archive -> archives </%> <@> try { directory _ info directory _ info = new directory _ info ( dir _ name ) ; if ( ! directory _ info . exists ) { directory . create _ directory ( dir _ name ) ; return ; } </@> <%> <*> list < string > -> var </%> <%> <-> ) . to _ list ( </%> <%> <*> list < string > -> var </%> <%> <-> ) . to _ list ( </%> <%> <*> for -> foreach </%> <%> <*> int index = 0 ; index < -> string next _ file in </%> <%> <-> . count ; index + + </%> <%> <*> files [ index ] -> next _ file </%>
 <@> this . request _ queue = new async _ request _ queue < log _ event _ info > ( NUM , async _ target _ wrapper _ overflow _ action . discard ) ; </@> <%> <-> < log _ event _ info > </%>
<%> <-> < log _ event _ info > </%> <@> this . request _ queue = new async _ request _ queue < log _ event _ info > ( NUM , async _ target _ wrapper _ overflow _ action . discard ) ; </@> 
<%> <+> using n _ log _ internal ; </%> <@> public class async _ request _ queue < t > </@> <%> <*> t -> log _ event _ info </%> <%> <+> log _ event _ info _ </%> <%> <*> t -> log _ event _ info </%> <%> <*> private int batched -> private queue < async _ continuation > async _ continuations </%> <%> <*> items -> queue </%> <%> <*> 0 ; -> new queue < async _ continuation > ( ) ; </%>
<%> <*> using system _ io ; using system _ text ; using system _ xml ; using system _ reflection ; using system _ diagnostics ; -> using system _ component _ model ; </%> <%> <+> using system _ web ; </%> <@> using system _ web ; using n _ log _ config ; using system _ component _ model ; </@> <%> <-> private int buffer _ size = NUM ; </%> <%> <-> private bool grow _ buffer _ as _ needed = true ; </%>
 <@> using system _ text ; using system _ reflection ; using system _ collections ; using n _ log _ config ; using system _ collections _ generic ; namespace n _ log _ internal </@> <%> <-> public class extension _ utils { private static list < assembly > extension _ assemblies = new list < assembly > ( ) ; static extension _ utils ( ) { extension _ assemblies . add ( typeof ( n _ log . log _ manager ) . assembly ) ; } private extension _ utils ( ) { </%>
<%> <*> public string substring { get { return substring ; } set { substring = value ; } } -> public string substring { get ; set ; } </%> <%> <*> if -> if ( this . layout . get _ formatted _ message </%> <%> <*> ignore -> log </%> <%> <*> case -> event </%> <%> <+> . index _ of ( this . substring , this . ignore _ case ? string _ comparison . ordinal _ ignore _ case : string _ comparison . ordinal ) > = 0 ) </%> <%> <*> if ( layout . get _ formatted _ message ( log _ event ) . to _ lower ( ) . index _ of ( substring . to _ lower ( ) ) > = 0 ) return result ; else return filter _ result . neutral ; -> return this . action ; </%> <@> if ( layout . get _ formatted _ message ( log _ event ) . index _ of ( substring ) > = 0 ) return result ; else return filter _ result . neutral ; </@> 
<%> <*> using system _ xml ; -> using system _ collections ; </%> <%> <+> using system _ collections _ generic ; using system _ component _ model ; </%> <%> <+> using system _ text ; </%> <%> <-> using system _ collections ; using system _ collections _ specialized ; using n _ log ; </%> <@> using n _ log _ layouts ; using system _ component _ model ; using system _ collections _ generic ;  using system _ runtime _ interop _ services ; </@> <%> <*> system -> n _ log </%> <%> <*> text -> layouts </%> <%> <+> private readonly log _ event _ comparer log _ event _ comparer ; private readonly dictionary < string , date _ time > initialized _ files = new dictionary < string , date _ time > ( ) ; private line _ ending _ mode line _ ending _ mode = line _ ending _ mode . default ; </%>
<%> <*> { get { return -> = > </%> <%> <-> } } </%> <%> <*> { get { return -> = > </%> <%> <-> } } </%> <%> <-> else </%> <@> else return key _ collection ? ? ( key _ collection = new dictionary _ collection ( this , true ) ) ; </@> <%> <-> else </%>
<%> <-> else </%> <@> else return value _ collection ? ? ( value _ collection = new dictionary _ collection ( this , false ) ) ; </@> <%> <*> { get { return -> = > </%> <%> <-> } } </%> <%> <*> { get { return -> = > </%> <%> <-> } } </%>
 <@> else return new dictionary _ enumerator ( this ) ; </@> <%> <-> else </%>
<%> <-> else </%> <@> else return new dictionary _ enumerator ( this ) ; </@> 
<%> <-> else </%> <@> else throw new invalid _ operation _ exception ( ) ; </@> <%> <-> ( </%> <%> <-> ) </%>
<%> <+> var last _ write _ time _ source = time . time _ source . current . from _ system _ time ( file _ last _ modified _ utc . value ) ; </%> <%> <-> last _ write _ time _ source . has _ value & & </%> <%> <-> . value </%> <@> if ( previous _ log _ overlapped _ period ( log _ event , previous _ log _ event _ timestamp . value , last _ write _ time _ source . value ) ) </@> <%> <-> . value </%>
<%> <-> . value </%> <@> return last _ write _ time _ source . value ; </@> 
 <@> private readonly condition _ tokenizer tokenizer = new condition _ tokenizer ( ) ; private configuration _ item _ factory configuration _ item _ factory ; </@> <%> <*> . init -> = new condition </%>
<%> <+> using system ; </%> <@> using n _ log _ config ; </@> <%> <-> var message = mapped _ diagnostics _ logical _ context . get ( item ) ; builder . append ( message ) ; </%>
<%> <*> i _ dictionary < string , object > combined _ properties = null ; -> return get _ context _ properties ( log _ event , null ) ; </%> <%> <+> } protected i _ dictionary < string , object > get _ context _ properties ( log _ event _ info log _ event , i _ dictionary < string , object > combined _ properties ) { </%> <@> combined _ properties = capture _ context _ gdc ( log _ event , null ) ; </@> 
<%> <+> if ( instances . count = = 0 ) </%> <%> <+> lici . file _ name = create _ instance _ file _ name ( logs _ dir ) ; lici . save ( ) ; </%> <@> tab _ control . tab _ pages . add ( instance . create _ tab ( this ) ) ; </@> <%> <-> total _ </%> <%> <*> + + -> . add ( instance ) </%> <%> <+> lici . file _ name = create _ instance _ file _ name ( logs _ dir ) ; lici . save ( ) ; </%> <%> <-> tab _ control . tab _ pages . add ( instance . create _ tab ( this ) ) ; </%>
<%> <+> culture _ info . invariant _ culture , </%> <@> else { continue ; } </@> <%> <+> culture _ info . current _ culture , </%> <%> <-> else </%>
<%> <-> } </%> <%> <+> culture _ info . current _ culture , </%> <@> else { continue ; } </@> <%> <+> culture _ info . current _ culture , </%>
<%> <+> culture _ info . current _ culture , </%> <@> else { continue ; } </@> 
<%> <-> ( string ) </%> <@> else { return new condition _ literal _ expression ( int . parse ( number _ string , culture _ info . invariant _ culture ) ) ; } </@> 
 <@> n _ log . targets . wrappers . async _ target _ wrapper atw = new n _ log . targets . wrappers . async _ target _ wrapper ( ) ; </@> <%> <+> culture _ info . invariant _ culture , </%>
 <@> foreach ( string config _ file in this . get _ candidate _ file _ names ( ) ) </@> <%> <+> culture _ info . invariant _ culture , </%>
<%> <+> culture _ info . invariant _ culture , </%> <@> this . dump ( this . config ) ; </@> 
 <@> this . dump ( this . config ) ; </@> <%> <+> culture _ info . invariant _ culture , </%>
<%> <*> public int sequence _ id { get { return this . sequence _ id ; } } -> public int sequence _ id { get ; private set ; } </%> <@> return log _ event _ info . create ( log _ level . off , string . empty , null , string . empty ) ; </@> 
 <@> if ( log _ event ! = log _ event _ info . empty ) log _ event . add _ cached _ layout _ value ( this , value ) ; </@> <%> <-> } private static layout _ renderer [ ] compile _ layout ( string s , out int needs _ stack _ trace , out bool is _ volatile ) { array _ list result = new array _ list ( ) ; needs _ stack _ trace = 0 ; is _ volatile = false ; int starting _ pos = 0 ; int pos = s . index _ of ( STR , starting _ pos ) ; while ( pos > = 0 ) </%>
 <@> public class null _ appender : n _ log . appender </@> <%> <*> public -> protected internal </%>
 <@> using n _ log _ layout _ appenders ; namespace n _ log </@> <%> <*> public -> protected internal </%> <%> <*> public -> protected internal </%> <%> <*> public -> protected internal </%>
 <@> public class console _ appender : n _ log . appender </@> <%> <*> public -> protected internal </%>
<%> <+> using n _ log _ appenders ; </%> <@> public class asp _ net _ trace _ appender : n _ log . appender </@> <%> <*> public -> protected </%>
 <@> public class memory _ appender : n _ log . appender </@> <%> <*> public -> protected internal </%>
 <@> public class trace _ appender : n _ log . appender </@> <%> <*> public -> protected internal </%>
<%> <-> context . expected _ headers </%> <%> <*> = null & & context . expected -> validate </%> <%> <*> . count > 0 -> ( ) </%> <@> foreach ( var expected _ header in context . expected _ headers ) { if ( request . headers . get _ values ( expected _ header . key ) . first ( ) ! = expected _ header . value ) return ; } </@> 
<%> <*> if ( internal _ logger . is _ trace _ enabled ) { internal _ logger . trace ( STR , log _ events . length ) ; } -> internal _ logger . trace ( STR , this , log _ events . length ) ; </%> <@> if ( internal _ logger . is _ trace _ enabled ) { internal _ logger . trace ( STR , rule . exists ) ; } </@> 
<%> <-> var replacement = STR ; </%> <@> var test _ cases = new list < tuple < string , string > > </@> <%> <*> tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , -> tuple . create ( STR , STR , STR ) , </%> <%> <+> tuple . create ( STR , STR , STR ) , </%>
<%> <+> { layout _ appender _ basedir public class base _ dir _ layout _ appender : layout _ appender </%> <%> <*> layout _ appender _ basedir public class base _ dir _ layout _ appender : layout _ appender -> private string file _ name = null ; </%> <%> <+> private string directory _ name = null ; public string file </%> <%> <*> private string file _ name = null ; private string directory _ name = null ; public string file -> get </%> <@> get { return file _ name ; } set { file _ name = value ; } </@> <%> <-> public string dir </%> <%> <+> set </%> <%> <-> get { return directory _ name ; } set { directory _ name = value ; </%>
<%> <+> { internal class dictionary _ base </%> <%> <*> internal class dictionary _ base -> private hashtable hashtable = new hashtable ( ) ; </%> <%> <+> public i _ dictionary dictionary </%> <%> <*> private hashtable hashtable = new hashtable ( ) ; public i _ dictionary dictionary -> get </%> <@> get { return hashtable ; } } public void clear ( ) { hashtable . clear ( ) ; </@> <%> <+> public void clear ( ) { hashtable . clear ( ) ; } </%> <%> <+> } </%>
<%> <*> layout _ appender _ nlogdir public class n _ log _ dir _ layout _ appender : layout _ appender -> private string file _ name = null ; </%> <%> <+> private string directory _ name = null ; private static string nlog _ dir ; static n _ log _ dir _ layout _ appender ( ) </%> <%> <*> private string file _ name = null ; private string directory _ name = null ; private static string nlog _ dir ; static n _ log _ dir _ layout _ appender ( ) -> nlog _ dir = path . get _ directory _ name ( typeof ( log _ manager ) . assembly . location ) ; </%> <%> <+> } public string file { get </%> <%> <*> nlog _ dir = path . get _ directory -> return file </%> <%> <*> ( typeof ( log _ manager ) . assembly . location ) ; -> ; </%> <%> <-> public string file </%> <%> <+> set </%> <@> get { return file _ name ; } set { file _ name = value ; } </@> <%> <+> } </%> <%> <+> { get </%> <%> <-> get { </%> <%> <-> } </%>
<%> <-> public string file </%> <%> <+> set </%> <%> <-> get { return file _ name ; } set { </%> <%> <-> } </%> <%> <+> } </%> <%> <+> { get </%> <@> get { return directory _ name ; } set { directory _ name = value ; } </@> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> directory _ name = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%>
<%> <-> } set { directory _ name = value ; } </%> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> directory _ name = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%> <%> <+> { get </%> <@> get { return nlog _ dir ; } </@> <%> <+> } </%> <%> <+> { string base _ dir = n _ log _ dir ; if ( file _ name ! = null ) </%> <%> <-> string base _ dir = n _ log _ dir ; if ( file _ name ! = null ) { </%>
<%> <+> { layout _ appender _ guid public class guid _ layout _ appender : layout _ appender </%> <%> <-> layout _ appender _ guid </%> <%> <+> private string format = STR ; </%> <%> <*> class guid _ layout _ appender : layout _ appender -> string format </%> <%> <*> private string format = STR ; public string format -> get </%> <@> get { return format ; } set { format = value ; } </@> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM ; } protected internal override void append ( string _ builder builder , log _ event _ info ev ) { builder . append ( apply _ padding ( guid . new _ guid ( ) . to _ string ( format ) ) ) ; -> format = value ; </%>
<%> <+> { layout _ appender _ environment public class environment _ layout _ appender : layout _ appender </%> <%> <*> layout _ appender _ environment public class environment _ layout _ appender : layout _ appender -> private string variable = null ; </%> <%> <+> required _ parameter public string variable </%> <%> <*> private string variable = null ; required _ parameter public string variable -> get </%> <@> get { return variable ; } set { variable = value ; } </@> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> variable = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%>
<%> <-> } set { variable = value ; } </%> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> variable = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%> <%> <+> { if ( variable ! = null ) </%> <@> if ( variable ! = null ) { builder . append ( apply _ padding ( environment . get _ environment _ variable ( variable ) ) ) ; } </@> <%> <+> } </%>
<%> <*> internal class -> public </%> <%> <*> : system . collections . dictionary _ base -> ( ) </%> <%> <*> public string _ dictionary ( ) -> } </%> <%> <+> public virtual string this [ string key ] { get </%> <%> <+> return ( string ) this . dictionary [ key ] ; </%> <%> <*> public virtual string this [ string key ] -> set </%> <@> get { return ( string ) this . dictionary [ key ] ; } set { this . dictionary [ key ] = value ; } </@> <%> <+> } </%> <%> <+> { this . dictionary . add ( key , value ) ; } public virtual bool contains ( string key ) { return this . dictionary . contains ( key ) ; } </%>
 <@> throw new n _ log _ configuration _ exception ( string . format ( STR , STR ) ) ; </@> <%> <*> throw new n _ log _ configuration _ exception ( string . format ( STR , STR ) ) ; -> throw new n _ log _ configuration _ exception ( STR , STR ) ; </%> <%> <+> } if ( this . from = = null ) { throw new n _ log _ configuration _ exception ( required _ property _ is _ empty _ format , STR ) ; </%>
 <@> if ( value is exception & & reference _ equals ( options , instance . serialize _ options ) ) </@> <%> <+> var object _ property _ list = object _ reflection _ cache . lookup _ object _ properties ( value ) ; </%> <%> <+> _ object </%> <%> <*> value -> object _ property _ list </%>
<%> <*> file _ share . read _ write -> false </%> <@> lock ( this ) { file _ length + = bytes . length ; last _ write _ time = date _ time . now ; file . write ( bytes , 0 , bytes . length ) ; } </@> 
<%> <*> private static string create _ failed _ default _ value _ message ( type type , property _ info property _ info , object expected _ val , object current _ val ) -> if ( prop _ type = = typeof ( encoding ) ) </%> <%> <*> string message = -> if ( current _ val is ut _ encoding & & ( needed _ </%> <%> <*> format -> equals </%> <%> <+> string _ comparison . invariant _ culture _ ignore _ case ) | | needed _ string . equals ( STR , string _ comparison . invariant _ culture _ ignore _ case ) ) ) </%> <%> <*> type . full _ name , property _ info . name , print _ val _ for _ message ( expected _ val ) , print _ val _ for _ message ( current _ val ) ) -> return true </%> <%> <-> return message ; </%> <%> <+> } return needed _ val . equals ( current _ val ) ; </%> <@> return STR + o . to _ string ( ) + STR ; </@> 
<%> <*> ) -> & & ! string . equals ( app _ domain _ base _ directory , assembly _ location , string _ comparison . ordinal _ ignore _ case ) ) </%> <@> if ( ! string . equals ( app _ domain _ base _ directory , assembly _ location , string _ comparison . ordinal _ ignore _ case ) ) { assembly _ location = app _ domain _ base _ directory ; extension _ dlls = get _ n _ log _ extension _ files ( app _ domain _ base _ directory ) ; } </@> 
<%> <*> ) -> & & async _ helpers . get _ managed _ thread _ id ( ) = = original _ thread _ id ) </%> <@> if ( async _ helpers . get _ managed _ thread _ id ( ) = = original _ thread _ id ) { throw new n _ log _ runtime _ exception ( STR , ex ) ; } </@> 
 <@> public void add _ to _ archive ( string archive _ file _ name , string file _ name , bool create _ directory _ if _ not _ exists ) </@> <%> <+> false </%> <%> <+> false </%>
<%> <+> result _ events = new async _ log _ event _ info [ count ] ; </%> <%> <*> if ( this . log _ event _ info _ queue . count < = 0 ) { break ; } result _ events . add ( this . log _ event _ info _ queue . dequeue ( ) ) ; -> result _ events [ i ] = this . log _ event _ info _ queue . dequeue ( ) ; </%> <@> return result _ events . to _ array ( ) ; </@> 
<%> <+> } if ( visited _ objects . contains ( o ) ) </%> <@> if ( visited _ objects . contains _ key ( o ) ) { return ; } visited _ objects . add ( o , 0 ) ; </@> 
 <@> if ( this . new _ identity ! = null ) { return new context _ reverter ( this . new _ identity . impersonate ( ) ) ; } return null ; </@> <%> <+> out int _ ptr handle </%> <%> <*> this . existing _ token _ handle = int _ ptr . zero ; this . duplicate _ token _ handle = int _ ptr . zero ; -> int _ ptr logon _ handle ; </%>
 <@> theory _ skip _ should _ be _ fixed _ in _ n _ log </@> <%> <-> _ skip _ should _ be _ fixed _ in _ n _ log </%>
<%> <-> _ skip _ should _ be _ fixed _ in _ n _ log </%> <@> theory _ skip _ should _ be _ fixed _ in _ n _ log </@> 
<%> <*> get { return filter _ result ; } -> get </%> <%> <+> { return filter _ result ; } </%> <@> get { return action ; } set </@> <%> <+> return action ; } set { </%>
 <@> this . assert _ layout _ renderer _ output ( STR + file _ name + STR , content ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . assert _ layout _ renderer _ output ( STR , string . empty ) ; </@> 
<%> <*> get { return filter _ result ; } -> get </%> <%> <+> { return filter _ result ; } </%> <@> get { return action ; } set </@> <%> <+> return action ; } set { </%>
 <@> var last = intermediate . skip _ while ( p = > ! is _ non _ user _ stack _ frame ( p . frame . get _ method ( ) , logger _ type ) ) . first _ or _ default ( ) ; </@> <%> <-> - 1 </%>
<%> <*> ) -> & & ( sliding _ timeout | | count = = 1 ) ) </%> <@> if ( sliding _ timeout | | count = = 1 ) { flush _ timer . change ( flush _ timeout , - 1 ) ; } </@> 
<%> <+> using system _ collections _ generic ; using common ; </%> <@> this . left _ expression = left _ expression ; this . right _ expression = right _ expression ; this . relational _ operator = relational _ operator ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return STR + this . left _ expression + STR + this . get _ operator _ string ( ) + STR + this . right _ expression + STR ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> using n _ log _ common ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . parent _ factory = parent _ factory ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . register _ type ( t , prefix ) ; </@> 
 <@> this . register _ definition ( item _ name _ prefix + attr . name , type ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> if ( ! this . try _ get _ definition ( item _ name , out type ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . try _ create _ instance ( name , out result ) ) </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> string _ comparison comparison _ type = this . ignore _ case </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . layout . render ( log _ event ) . index _ of ( this . substring , comparison _ type ) > = 0 ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . action ; </@> 
 <@> this . init _ attributes ( ) ; return this . log _ factory ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . attributes _ loaded = true ; this . log _ factory = value ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . init _ attributes ( ) ; return this . default _ log _ level ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . attributes _ loaded = true ; this . default _ log _ level = value ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . init _ attributes ( ) ; return this . force _ log _ level ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . attributes _ loaded = true ; this . force _ log _ level = value ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . init _ attributes ( ) ; return this . disable _ flush ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . attributes _ loaded = true ; this . disable _ flush = value ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <@> this . attributes _ loaded = true ; this . auto _ logger _ name = value ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . process _ log _ event _ info ( this . default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . process _ log _ event _ info ( this . default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . process _ log _ event _ info ( log _ level . error , null , message , null , null , trace _ event _ type . error , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . process _ log _ event _ info ( log _ level . error , null , message + STR + detail _ message , null , null , trace _ event _ type . error , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( ! this . disable _ flush ) { if ( this . log _ factory ! = null ) { this . log _ factory . flush ( ) ; </@> 
 <@> this . process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , sb . to _ string ( ) , data , id , event _ type , null ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , format , args , id , event _ type , null ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , message , null , id , event _ type , null ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . process _ log _ event _ info ( log _ level . debug , source , message , null , id , trace _ event _ type . transfer , related _ activity _ id ) ; </@> 
 <@> logger _ name = ( logger _ name ? ? this . name ) ? ? string . empty ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . auto _ logger _ name ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( method . declaring _ type = = this . get _ type ( ) ) </@> 
 <@> if ( this . log _ factory ! = null ) { logger = this . log _ factory . get _ logger ( logger _ name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> log _ level = this . force _ log _ level ? ? log _ level ; </@> 
 <@> if ( ! this . attributes _ loaded ) { this . attributes _ loaded = true ; foreach ( dictionary _ entry de in this . attributes ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . default _ log _ level = log _ level . from _ string ( value ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . force _ log _ level = log _ level . from _ string ( value ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . auto _ logger _ name = xml _ convert . to _ boolean ( value ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . disable _ flush = boolean . parse ( value ) ; </@> 
 <@> using n _ log _ common ; using n _ log _ internal _ network _ senders ; using n _ log _ layouts ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> 
 <@> lock ( this . open _ network _ senders ) { remaining _ count = this . open _ network _ senders . count ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> foreach ( var open _ sender in this . open _ network _ senders ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . open _ network _ senders ) { foreach ( var open _ sender in this . open _ network _ senders ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . release _ cached _ connection ( sender _ node ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . open _ network _ senders ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> switch ( this . on _ connection _ overflow ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> while ( this . open _ network _ senders . count > = this . max _ connections ) </@> <%> <-> system . threading . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> system . threading . monitor . wait ( this . open _ network _ senders ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . open _ network _ senders ) { try _ remove ( this . open _ network _ senders , linked _ list _ node ) ; if ( this . on _ connection _ overflow = = network _ target _ connections _ overflow _ action . block ) </@> <%> <-> system . threading . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> system . threading . monitor . pulse _ all ( this . open _ network _ senders ) ; </@> 
<%> <-> this . </%> <@> if ( this . new _ line ) { text = rendered + this . line _ ending . new _ line _ characters ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . current _ sender _ cache ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . current _ sender _ cache . count > = this . connection _ cache _ size ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> foreach ( var pair in this . current _ sender _ cache ) </@> 
 <@> this . release _ cached _ connection ( least _ recently _ used ) ; } } var sender = this . sender _ factory . create ( address , max _ queue _ size ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . open _ network _ senders ) { sender _ node = this . open _ network _ senders . add _ last ( sender ) ; } this . current _ sender _ cache . add ( address , sender _ node ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . current _ sender _ cache ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . open _ network _ senders ) { if ( try _ remove ( this . open _ network _ senders , sender _ node ) ) </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> if ( chunksize > this . max _ message _ size ) { if ( this . on _ overflow = = network _ target _ overflow _ action . discard ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . on _ overflow = = network _ target _ overflow _ action . error ) { continuation ( new overflow _ exception ( STR + this . max _ message _ size + STR + buffer . length + STR ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> chunksize = this . max _ message _ size ; </@> 
 <@> this . creation _ time _ utc = file . get _ creation _ time _ utc ( this . file _ name ) ; if ( this . creation _ time _ utc < date _ time . utc _ now - time _ span . from _ seconds ( 2 ) & & file _ position = = 0 ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . creation _ time _ utc = file . get _ creation _ time _ utc ( this . file _ name ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> if ( this . file _ stream = = null | | this . file _ characteristics _ helper = = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return file _ characteristics _ helper . get _ file _ characteristics ( file _ name , this . file _ stream ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <@> interlocked . increment ( ref this . write _ count ) ; if ( this . throw _ exceptions ) </@> 
 <@> assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ count + + ; </@> 
 <@> internal _ logger . debug ( STR , this . name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> internal _ logger . debug ( STR , this . name , request _ queue . count + 1 ) ; </@> 
 <@> internal _ logger . debug ( STR , this . name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> internal _ logger . debug ( STR , this . name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . sync _ root ) </@> 
 <@> internal _ logger . warn ( completed _ task . exception , STR , this . name ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> internal _ logger . info ( STR , this . name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . warn ( completed _ task . exception , STR , this . name ) ; </@> 
 <@> internal _ logger . warn ( STR , this . name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . sync _ root ) </@> 
 <@> internal _ logger . debug ( STR , this . name , previous _ task . status ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> internal _ logger . debug ( ex , STR , this . name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> internal _ logger . error ( ex , STR , this . name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . sync _ root ) </@> 
 <@> using n _ log _ layout _ renderers ; using n _ log _ layouts ; using n _ log _ targets ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . name = name ; </@> 
 <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , STR , new object [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , STR , new [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new [ ] { arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new [ ] { arg , arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , STR , new object [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , STR , new [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , STR , new object [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , STR , new [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , STR , new object [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , STR , new [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , STR , new object [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , STR , new [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , STR , new object [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , STR , new [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , STR , new object [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , STR , new [ ] { value } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg , arg } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . throw _ exceptions ) </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; if ( this . fail _ counter > 0 ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . fail _ counter - - ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ count + + ; </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . fs _ normalize = true ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . fs _ normalize ) </@> 
 <@> this . name = name ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( fallback _ group _ target ) ; </@> 
 <@> lock ( this . lock _ object ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . current _ target ! = 0 ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . return _ to _ first _ on _ success ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . debug ( STR , this . targets [ target _ to _ invoke ] ) ; this . current _ target = 0 ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . lock _ object ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . current _ target = ( target _ to _ invoke + 1 ) % this . targets . count ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> target _ to _ invoke = this . current _ target ; if ( try _ counter > = this . targets . count ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . lock _ object ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> target _ to _ invoke = this . current _ target ; </@> <%> <-> this . </%>
 <@> this . include _ n _ log _ data = true ; this . ndc _ item _ separator = STR ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . ndlc _ item _ separator = STR ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . app _ info = string . format ( </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . machine _ name = environment . machine _ name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . machine _ name = string . empty ; } this . xml _ writer _ settings = new xml _ writer _ settings { indent = this . indent _ xml , </@> 
 <@> if ( this . include _ source _ info ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . include _ call _ site ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . append ( sb , log _ event ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> using ( xml _ writer xtw = xml _ writer . create ( sb , this . xml _ writer _ settings ) ) </@> 
 <@> if ( this . include _ ndc ) { ndc _ content = string . join ( this . ndc _ item _ separator , nested _ diagnostics _ context . get _ all _ messages ( ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . include _ ndlc ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> ndc _ content + = this . ndc _ item _ separator ; } ndc _ content + = string . join ( this . ndlc _ item _ separator , nested _ diagnostics _ logical _ context . get _ all _ messages ( ) ) ; </@> 
 <@> if ( this . include _ source _ info ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . include _ n _ log _ data ) </@> 
 <@> if ( this . include _ all _ properties ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . parameters . count > 0 ) { foreach ( n _ log _ viewer _ parameter _ info parameter in this . parameters ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> xtw . write _ attribute _ safe _ string ( STR , this . app _ info ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> xtw . write _ attribute _ safe _ string ( STR , this . machine _ name ) ; </@> 
 <@> using n _ log _ internal ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . optimize _ buffer _ reuse = true ; </@> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> native _ methods . output _ debug _ string ( base . render _ log _ event ( this . layout , log _ event ) ) ; </@> 
 <@> this . file = create _ file _ stream ( false ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . file = = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . file = = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . file = = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . file = null ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . creation _ time _ utc ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . last _ write _ time _ utc ; </@> 
 <@> this . detect _ console _ available = false ; this . optimize _ buffer _ reuse = true ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> 
 <@> if ( this . header ! = null ) { this . write _ to _ output ( base . render _ log _ event ( this . header , log _ event _ info . create _ null _ event ( ) ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <@> if ( this . footer ! = null ) { this . write _ to _ output ( base . render _ log _ event ( this . footer , log _ event _ info . create _ null _ event ( ) ) ) ; </@> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <@> this . write _ to _ output ( base . render _ log _ event ( this . layout , log _ event ) ) ; </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> string _ comparison comparison = this . ignore _ case </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> string result = this . layout . render ( log _ event ) ; if ( result . index _ of ( this . substring , comparison ) < 0 ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . action ; </@> 
 <@> this . message = STR ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> throw new invalid _ operation _ exception ( this . message ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . init _ count + + ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . close _ count + + ; </@> 
 <@> using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . normalize = true ; this . difference = false ; this . precision = NUM ; this . align _ decimal _ point = true ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return ! this . raw ; } set { this . raw = ! value ; } </@> 
 <@> this . frequency = performance _ frequency ; this . first _ qpc _ value = qpc _ value ; this . last _ qpc _ value = qpc _ value ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . difference ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> qpc _ value - = this . last _ qpc _ value ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> else if ( this . normalize ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> qpc _ value - = this . first _ qpc _ value ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . last _ qpc _ value = v ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . seconds ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> double val = math . round ( qpc _ value / this . frequency , this . precision ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . align _ decimal _ point ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> string _ value + = STR + new string ( '0' , this . precision ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> string _ value + = new string ( '0' , this . precision - ( string _ value . length - 1 - p ) ) ; </@> 
 <@> log _ event _ info lei = log _ event _ info . create ( log _ level . info , this . name , null , message , par ) ; </@> <%> <-> base . </%>
<%> <-> this . </%> <@> base . log ( typeof ( my _ logger ) , lei ) ; </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> if ( this . universal _ time ) </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . throw _ exceptions ) </@> 
 <@> this . flush _ count + + ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . written _ events = new list < log _ event _ info > ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> assert . true ( this . flush _ count < = this . write _ count ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write _ count + + ; this . written _ events . add ( log _ event ) ; } if ( this . fail _ counter > 0 ) { this . fail _ counter - - ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ count + + ; </@> 
 <@> this . succeeded = succeeded ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . succeeded = succeeded ; this . exception = exception ; </@> 
 <@> this . left = left ; this . right = right ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return STR + this . left + STR + this . right + STR ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . wrapped _ target = wrapped _ target ; this . condition = condition ; this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( filtering _ target _ wrapper ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> using n _ log _ config ; using n _ log _ filters ; using n _ log _ targets ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . target = target ; this . filter _ chain = filter _ chain ; </@> 
 <@> this . log _ factory = log _ factory ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . initialize ( reader , file _ name , ignore _ errors ) ; </@> 
 <@> this . log _ factory = log _ factory ; this . initialize ( reader , file _ name , ignore _ errors ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . initialize ( reader , file _ name , false ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . initialize ( reader , file _ name , ignore _ errors ) ; </@> 
<%> <-> this . </%> <@> return new xml _ logging _ configuration ( this . original _ file _ name ) ; </@> 
 <@> this . original _ file _ name = file _ name ; this . parse _ top _ level ( content , file _ name , auto _ reload _ default : false ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . parse _ top _ level ( content , null , auto _ reload _ default : false ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . check _ parsing _ errors ( content ) ; this . check _ unused _ targets ( ) ; </@> 
 <@> if ( this . initialize _ succeeded = = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ! this . file _ must _ auto _ reload _ lookup . contains _ key ( get _ file _ lookup _ key ( file _ name ) ) ) this . parse _ top _ level ( new n _ log _ xml _ element ( file _ name ) , file _ name , auto _ reload _ default ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . parse _ configuration _ element ( content , file _ path , auto _ reload _ default ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parse _ n _ log _ element ( content , file _ path , auto _ reload _ default ) ; </@> 
 <@> this . parse _ n _ log _ element ( nlog _ element , file _ path , auto _ reload _ default ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . default _ culture _ info = culture _ info . invariant _ culture ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . exception _ logging _ old _ style = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parse _ extensions _ element ( extensions _ child , path . get _ directory _ name ( file _ path ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parse _ include _ element ( child , path . get _ directory _ name ( file _ path ) , auto _ reload _ default : auto _ reload ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parse _ targets _ element ( child ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . parse _ variable _ element ( child ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . parse _ time _ element ( child ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parse _ rules _ element ( rule _ child , this . logging _ rules ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . parse _ logger _ element ( logger _ element , rules _ collection ) ; </@> 
 <@> this . parse _ filters ( rule , child ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parse _ logger _ element ( child , rule . child _ rules ) ; </@> 
 <@> filter filter = this . configuration _ item _ factory . filters . create _ instance ( name ) ; this . configure _ object _ from _ attributes ( filter , filter _ element , false ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> string value = this . expand _ simple _ variables ( variable _ element . get _ required _ attribute ( STR ) ) ; this . variables [ name ] = value ; </@> 
 <@> target new _ target = this . configuration _ item _ factory . targets . create _ instance ( type _ attribute _ val ) ; this . parse _ target _ element ( new _ target , target _ element , type _ name _ to _ default _ target _ parameters ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> new _ target = this . wrap _ with _ default _ wrapper ( new _ target , default _ wrapper _ element ) ; </@> 
 <@> this . parse _ target _ element ( target , defaults , null ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . configure _ object _ from _ attributes ( target , target _ element , true ) ; </@> 
 <@> this . set _ property _ from _ element ( target , child _ element ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parse _ target _ element ( new _ target , child _ element , type _ name _ to _ default _ target _ parameters ) ; </@> 
<%> <-> this . </%> <@> this . parse _ target _ element ( new _ target , child _ element , type _ name _ to _ default _ target _ parameters ) ; </@> 
 <@> this . configure _ from _ file ( file , auto _ reload _ default ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> time _ source new _ time _ source = this . configuration _ item _ factory . time _ sources . create _ instance ( type ) ; this . configure _ object _ from _ attributes ( new _ time _ source , time _ element , true ) ; </@> 
 <@> if ( this . add _ array _ item _ from _ element ( o , element ) ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . set _ layout _ from _ element ( o , element ) ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . set _ item _ from _ element ( o , element ) ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var value = this . expand _ simple _ variables ( element . value ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> property _ helper . set _ property _ from _ string ( o , element . local _ name , value , this . configuration _ item _ factory ) ; </@> 
 <@> this . configure _ object _ from _ attributes ( item , element , true ) ; this . configure _ object _ from _ element ( item , element ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . set _ property _ from _ element ( target _ object , child ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parse _ target _ element ( wrapper _ target _ instance , default _ parameters ) ; </@> 
 <@> return this . configuration _ item _ factory . layouts . create _ instance ( this . expand _ simple _ variables ( layout _ type _ name ) ) ; </@> <%> <-> this . </%>
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> if ( log _ event . properties . try _ get _ value ( this . parameter , out value ) ) </@> 
 <@> return this . get _ targets _ for _ level ( level ) ! = null ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . is _ enabled ( log _ event . level ) ) { this . write _ to _ targets ( log _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( log _ event . level ) ) { this . write _ to _ targets ( wrapper _ type , log _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , null , value ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , value ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . write _ to _ targets ( level , null , message _ func ( ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . log ( level , message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , null , message ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , args ) ; </@> 
 <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , exception , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , exception , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> this . name = name ; this . factory = factory ; this . set _ configuration ( logger _ configuration ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> logger _ impl . write ( this . logger _ type , this . get _ targets _ for _ level ( level ) , log _ event , this . factory ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . write _ to _ targets ( level , this . factory . default _ culture _ info , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> using n _ log _ config ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . name = name ; this . layout = layout ; this . encode = encode ; </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> string _ comparison comparison _ type = this . ignore _ case </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . layout . render ( log _ event ) . equals ( this . compare _ to , comparison _ type ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . action ; </@> 
 <@> using n _ log _ filters ; using n _ log _ targets ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . filters = new list < filter > ( ) ; this . child _ rules = new list < logging _ rule > ( ) ; this . targets = new list < target > ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . logger _ name _ pattern = logger _ name _ pattern ; this . targets . add ( target ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . logger _ name _ pattern = logger _ name _ pattern ; this . targets . add ( target ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . logger _ name _ pattern = logger _ name _ pattern ; this . targets . add ( target ) ; </@> 
 <@> return this . logger _ name _ pattern ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . logger _ name _ pattern = value ; int first _ pos = this . logger _ name _ pattern . index _ of ( '*' ) ; int last _ pos = this . logger _ name _ pattern . last _ index _ of ( '*' ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . logger _ name _ match _ mode = match _ mode . equals ; this . logger _ name _ match _ argument = value ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . logger _ name _ match _ mode = match _ mode . starts _ with ; this . logger _ name _ match _ argument = before ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . logger _ name _ match _ mode = match _ mode . ends _ with ; this . logger _ name _ match _ argument = after ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . logger _ name _ match _ mode = match _ mode . none ; this . logger _ name _ match _ argument = string . empty ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . enable _ logging _ for _ level ( log _ level . from _ ordinal ( i ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> sb . append _ format ( culture _ info . invariant _ culture , STR , this . logger _ name _ match _ argument , this . logger _ name _ match _ mode ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> foreach ( target app in this . targets ) </@> 
<%> <-> this . </%> <@> switch ( this . logger _ name _ match _ mode ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> return logger _ name . equals ( this . logger _ name _ match _ argument , string _ comparison . ordinal ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return logger _ name . starts _ with ( this . logger _ name _ match _ argument , string _ comparison . ordinal ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return logger _ name . ends _ with ( this . logger _ name _ match _ argument , string _ comparison . ordinal ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return logger _ name . index _ of ( this . logger _ name _ match _ argument , string _ comparison . ordinal ) > = 0 ; </@> 
 <@> this . text = text ; this . position = 0 ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . text ; } </@> 
 <@> if ( this . position < this . text . length ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . text [ this . position ] ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . position < this . text . length ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . text [ this . position + + ] ; </@> <%> <-> this . </%>
 <@> this . write ( ( i _ list < async _ log _ event _ info > ) new [ ] { log _ event } ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> var buckets = log _ events . bucket _ sort ( c = > this . get _ smtp _ settings _ key ( c . log _ event ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . process _ single _ mail _ message ( event _ infos ) ; </@> 
 <@> if ( this . header ! = null ) { body _ buffer . append ( this . header . render ( first _ event ) ) ; if ( this . add _ new _ lines ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> body _ buffer . append ( this . layout . render ( event _ info . log _ event ) ) ; if ( this . add _ new _ lines ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . footer ! = null ) { body _ buffer . append ( this . footer . render ( last _ event ) ) ; if ( this . add _ new _ lines ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . smtp _ server = = null & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . delivery _ method = = smtp _ delivery _ method . network & & this . smtp _ server = = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . smtp _ server ! = null & & this . delivery _ method = = smtp _ delivery _ method . network ) { var rendered _ smtp _ server = this . smtp _ server . render ( last _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> client . port = this . smtp _ port ; client . enable _ ssl = this . enable _ ssl ; if ( this . smtp _ authentication = = smtp _ authentication _ mode . ntlm ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( ! string . is _ null _ or _ empty ( this . pickup _ directory _ location ) & & this . delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> client . delivery _ method = this . delivery _ method ; client . timeout = this . timeout ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( ! this . use _ system _ net _ mail _ settings & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) & & this . delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . from = = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> var rendered _ from = this . from = = null ? null : this . from . render ( last _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> if ( this . condition = = null ) </@> <%> <-> this . </%>
 <@> this . name = name ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . flush _ count + + ; </@> 
 <@> this . log _ output = log _ output ; this . parameters = new dictionary < string , string > ( ) ; this . log _ level = log _ level . info ; this . throw _ exceptions = false ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . log ( log _ level . trace , message , arguments ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . log ( log _ level . debug , message , arguments ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . log ( log _ level . info , message , arguments ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . log ( log _ level . warn , message , arguments ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . log ( log _ level . error , message , arguments ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . log _ output ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . log _ output . close ( ) ; this . log _ output = null ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> foreach ( var kvp in this . parameters ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( log _ level > = this . log _ level ) </@> <%> <-> this . </%>
 <@> using n _ log _ common ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> get { return this . name _ to _ method _ info ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . register _ type ( t , prefix ) ; </@> 
 <@> this . register _ definition ( item _ name _ prefix + attr . name , mi ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . try _ create _ instance ( name , out result ) ) </@> <%> <-> this . </%>
 <@> this . buffer = new log _ event _ info _ buffer ( this . buffer _ size , false , 0 ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ timer = new timer ( this . flush _ callback , null , timeout . infinite , timeout . infinite ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> var current _ timer = this . flush _ timer ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ timer = null ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . lock _ object ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . flush _ timeout > 0 ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . sliding _ timeout | | count = = 1 ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ timer . change ( this . flush _ timeout , - 1 ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . lock _ object ) { if ( this . flush _ timer = = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . error ( exception , STR , this . name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . wrapped _ target = = null ) { internal _ logger . error ( STR , this . name ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . lock _ object ) { async _ log _ event _ info [ ] log _ events = this . buffer . get _ events _ and _ clear ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . trace ( STR , this . name , log _ events . length , reason ) ; this . wrapped _ target . write _ async _ log _ events ( log _ events ) ; </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . domain = STR ; this . log _ on _ type = security _ log _ on _ type . interactive ; this . log _ on _ provider = log _ on _ provider _ type . default ; this . impersonation _ level = security _ impersonation _ level . impersonation ; this . wrapped _ target = wrapped _ target ; </@> 
 <@> if ( ! this . revert _ to _ self ) { this . new _ identity = this . create _ windows _ identity ( out this . duplicate _ token _ handle ) ; } using ( this . do _ impersonate ( ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> using ( this . do _ impersonate ( ) ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> using ( this . do _ impersonate ( ) ) { this . wrapped _ target . write _ async _ log _ event ( log _ event ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> using ( this . do _ impersonate ( ) ) { this . wrapped _ target . write _ async _ log _ events ( log _ events ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> using ( this . do _ impersonate ( ) ) { this . wrapped _ target . flush ( async _ continuation ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . revert _ to _ self ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . user _ name , this . domain , this . password , ( int ) this . log _ on _ type , ( int ) this . log _ on _ provider , </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( ! native _ methods . duplicate _ token ( logon _ handle , ( int ) this . impersonation _ level , out handle ) ) </@> 
 <@> this . wic = windows _ impersonation _ context ; </@> <%> <-> this . </%>
 <@> layout . initialize ( this . logging _ configuration ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> using n _ log _ common ; using n _ log _ internal ; using n _ log _ config ; </@> <%> <-> n _ log _ </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> using n _ log _ layouts ; </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . trim _ white _ space = true ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . trim _ white _ space ) </@> 
 <@> this . separator = STR ; this . bottom _ frames = - 1 ; this . top _ frames = - 1 ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . top _ frames ! = - 1 ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> end _ pos = math . min ( this . top _ frames , messages . length ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> else if ( this . bottom _ frames ! = - 1 ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> start _ pos = messages . length - math . min ( this . bottom _ frames , messages . length ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> current _ separator = this . separator ; </@> 
 <@> assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; if ( this . fail _ counter > 0 ) { this . fail _ counter - - ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ count + + ; </@> 
 <@> this . events = new list < log _ event _ info > ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . assert _ expected _ user ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . assert _ expected _ user ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . assert _ expected _ user ( ) ; this . events . add ( log _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . assert _ expected _ user ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . assert _ expected _ user ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . expected _ user ! = null ) </@> 
 <@> using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . separator = STR ; this . top _ frames = NUM ; this . format = stack _ trace _ format . flat ; </@> 
 <@> int starting _ frame = log _ event . user _ stack _ frame _ number + this . top _ frames - 1 ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> switch ( this . format ) </@> 
 <@> using n _ log _ config ; using n _ log _ layouts ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . parameter _ type = typeof ( string ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> this . </%> <@> this . parameter _ type = typeof ( string ) ; this . layout = layout ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . parameter _ type = typeof ( string ) ; this . name = parameter _ name ; this . layout = layout ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . parameter _ type = type ; this . name = name ; this . layout = layout ; </@> 
 <@> this . current _ process _ id = native _ methods . get _ current _ process _ id ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . current _ process _ name = sb . to _ string ( ) ; this . current _ process _ base _ name = path . get _ file _ name _ without _ extension ( this . current _ process _ name ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> get { return this . current _ process _ id ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> get { return this . current _ process _ name ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . current _ process _ base _ name ; } </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . background _ color = console _ output _ color . no _ change ; this . foreground _ color = console _ output _ color . no _ change ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . text = text ; this . foreground _ color = foreground _ color ; this . background _ color = background _ color ; </@> 
 <@> if ( this . compiled _ regex = = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . compiled _ regex = new regex ( regexpression , regex _ options ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . compiled _ regex ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . ignore _ case ) </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> result . append ( ( char ) ( ( int ) this . foreground _ color + 'A' ) ) ; result . append ( ( char ) ( ( int ) this . background _ color + 'A' ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> var regex = this . compiled _ regex ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return regex . replace ( message , this . match _ evaluator ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return system . text . regular _ expressions . regex . replace ( message , expression , this . match _ evaluator , regex _ options ) ; </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . format = STR ; this . culture = culture _ info . invariant _ culture ; </@> 
 <@> private key _ value _ pair < date _ time , string > cached _ utc _ time = new system . collections . generic . key _ value _ pair < date _ time , string > ( ) ; </@> <%> <-> system . collections . generic . </%> <%> <-> this . </%>
<%> <-> system . collections . generic . </%> <@> private key _ value _ pair < date _ time , string > cached _ local _ time = new system . collections . generic . key _ value _ pair < date _ time , string > ( ) ; </@> <%> <-> this . </%>
<%> <-> system . collections . generic . </%> <%> <-> system . collections . generic . </%> <@> if ( this . universal _ time ) </@> 
 <@> this . text = text ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> builder . append ( this . text ) ; </@> 
 <@> using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; using n _ log _ layouts ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . encoding = encoding . default ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> this . </%> <@> this . last _ file _ name = string . empty ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> string file _ name = this . file _ name . render ( log _ event ) ; if ( file _ name ! = this . last _ file _ name ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . current _ file _ contents = this . read _ file _ contents ( file _ name ) ; this . last _ file _ name = file _ name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> builder . append ( this . current _ file _ contents ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return file . read _ all _ text ( file _ name , this . encoding ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> using ( var reader = new stream _ reader ( file _ name , this . encoding ) ) </@> 
 <@> internal class json _ converter _ legacy : i _ json _ converter , n _ log . targets . i _ json _ serializer </@> <%> <-> n _ log . targets . </%> <%> <-> n _ log . targets . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . connection _ strings _ settings = configuration _ manager . connection _ strings ;  this . command _ type = command _ type . text ; this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( database _ target ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> 
 <@> this . run _ install _ commands ( installation _ context , this . install _ ddl _ commands ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . run _ install _ commands ( installation _ context , this . uninstall _ ddl _ commands ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . provider _ factory ! = null ) { connection = this . provider _ factory . create _ connection ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> connection = ( i _ db _ connection ) activator . create _ instance ( this . connection _ type ) ; </@> 
 <@> if ( ! string . is _ null _ or _ empty ( this . connection _ string _ name ) ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> var cs = this . connection _ strings _ settings [ this . connection _ string _ name ] ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> throw new n _ log _ configuration _ exception ( STR + this . connection _ string _ name + STR ) ; } this . connection _ string = simple _ layout . escape ( cs . connection _ string ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . provider _ factory = db _ provider _ factories . get _ factory ( cs . provider _ name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( invariantname = = this . db _ provider ) { this . provider _ factory = db _ provider _ factories . get _ factory ( this . db _ provider ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . set _ connection _ type ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . connection _ type = assembly . get _ type ( STR , true , true ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . connection _ type = system _ data _ assembly . get _ type ( STR , true ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . connection _ type = type . get _ type ( this . db _ provider , true ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . close _ connection ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . write _ event _ to _ database ( log _ event ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . close _ connection ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ! this . keep _ connection ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . close _ connection ( ) ; </@> 
 <@> var buckets = log _ events . bucket _ sort ( c = > this . build _ connection _ string ( c . log _ event ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . write _ event _ to _ database ( ev . log _ event ) ; </@> 
 <@> if ( ! this . keep _ connection ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . close _ connection ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <@> foreach ( database _ parameter _ info par in this . parameters ) </@> 
 <@> if ( this . connection _ string ! = null ) { return base . render _ log _ event ( this . connection _ string , log _ event ) ; </@> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <@> sb . append ( base . render _ log _ event ( this . db _ host , log _ event ) ) ; </@> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <@> if ( this . db _ user _ name = = null ) </@> <%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <@> sb . append ( base . render _ log _ event ( this . db _ user _ name , log _ event ) ) ; </@> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <@> sb . append ( base . render _ log _ event ( this . db _ password , log _ event ) ) ; </@> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <@> if ( this . db _ database ! = null ) </@> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <@> sb . append ( base . render _ log _ event ( this . db _ database , log _ event ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <@> if ( this . active _ connection ! = null ) { if ( this . active _ connection _ string ! = connection _ string ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . close _ connection ( ) ; } } if ( this . active _ connection ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . active _ connection = this . open _ connection ( connection _ string ) ; this . active _ connection _ string = connection _ string ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . active _ connection ! = null ) { this . active _ connection . close ( ) ; this . active _ connection . dispose ( ) ; this . active _ connection = null ; this . active _ connection _ string = null ; </@> 
 <@> cs = base . render _ log _ event ( command _ info . connection _ string , log _ event ) ; } else if ( this . install _ connection _ string ! = null ) </@> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> base . </%> <%> <-> this . </%> <@> cs = base . render _ log _ event ( this . install _ connection _ string , log _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <@> cs = this . build _ connection _ string ( log _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%>
<%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . connection _ type = = null ) { this . set _ connection _ type ( ) ; } this . ensure _ connection _ open ( cs ) ; using ( var command = this . active _ connection . create _ command ( ) ) </@> <%> <-> base . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> command . command _ text = base . render _ log _ event ( command _ info . text , log _ event ) ; </@> 
 <@> this . mutex = create _ sharable _ mutex ( STR ) ; this . file _ stream = create _ file _ stream ( true ) ; this . file _ characteristics _ helper = file _ characteristics _ helper . create _ helper ( parameters . force _ managed ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . mutex = = null | | this . file _ stream = = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . mutex ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . mutex = null ; } } if ( this . file _ stream ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . file _ stream = null ; </@> 
 <@> get { return this . name ; } </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> get { return this . new _ line _ characters ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; this . new _ line _ characters = new _ line _ characters ; </@> 
 <@> using n _ log _ common ; using n _ log _ internal ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> this . dispose ( true ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . close ( ) ; </@> 
 <@> this . last _ write _ time _ utc = date _ time ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . try _ create _ file _ stream ( allow _ file _ shared _ writing ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var directory _ name = path . get _ directory _ name ( this . file _ name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . try _ create _ file _ stream ( allow _ file _ shared _ writing ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> int actual _ delay = this . random . next ( current _ delay ) ; internal _ logger . warn ( STR , i , this . file _ name , actual _ delay ) ; </@> 
<%> <-> this . </%> <@> return this . windows _ create _ file ( this . file _ name , allow _ file _ shared _ writing ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . file _ name , </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> file _ info file _ info = new file _ info ( this . file _ name ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> file . create ( this . file _ name ) . dispose ( ) ; this . creation _ time _ utc = date _ time . utc _ now ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> file . set _ creation _ time _ utc ( this . file _ name , this . creation _ time _ utc ) ; </@> 
 <@> using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> var lra = this . get _ type ( ) . get _ custom _ attribute < layout _ renderer _ attribute > ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . get _ type ( ) . name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . dispose ( true ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> int initial _ length = this . max _ rendered _ length ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . render _ append _ builder ( log _ event , builder ) ; if ( builder . length > this . max _ rendered _ length ) { this . max _ rendered _ length = builder . length ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . initialize ( configuration ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . close ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . logging _ configuration = = null ) this . logging _ configuration = configuration ; if ( ! this . is _ initialized ) { this . is _ initialized = true ; this . initialize _ layout _ renderer ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ initialized ) { this . logging _ configuration = null ; this . is _ initialized = false ; this . close _ layout _ renderer ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( ! this . is _ initialized ) { this . is _ initialized = true ; this . initialize _ layout _ renderer ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . append ( builder , log _ event ) ; </@> 
 <@> this . close ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( culture = = null & & this . logging _ configuration ! = null ) { culture = this . logging _ configuration . default _ culture _ info ; </@> 
 <@> using n _ log _ config ; using n _ log _ internal ; using n _ log _ layouts ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . configuration _ item _ factory = configuration _ item _ factory ; this . tokenizer = new condition _ tokenizer ( string _ reader ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . tokenizer . get _ next _ token ( ) ; } this . tokenizer . expect ( condition _ token _ type . right _ paren ) ; </@> <%> <-> this . </%>
 <@> if ( this . tokenizer . token _ type = = condition _ token _ type . left _ paren ) { this . tokenizer . get _ next _ token ( ) ; condition _ method _ expression predicate _ expression = this . parse _ predicate ( keyword ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . parse _ boolean _ expression ( ) ; </@> 
 <@> using n _ log _ conditions ; using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . exists = when _ exists _ expression ; this . filter = filter _ to _ apply ; </@> 
 <@> using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . counter _ type = performance _ counter _ type . number _ of _ items ; this . increment _ value = new simple _ layout ( STR ) ; this . instance _ name = string . empty ; this . counter _ help = string . empty ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <@> counter _ creation _ data _ collection ccds = get _ counter _ creation _ data _ collection ( counters _ by _ category [ this . category _ name ] , out category _ type ) ; </@> 
 <@> if ( ! performance _ counter _ category . exists ( this . category _ name ) ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> return performance _ counter _ category . counter _ exists ( this . counter _ name , this . category _ name ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . perf _ counter ! = null ) { this . perf _ counter . close ( ) ; this . perf _ counter = null ; } this . initialized = false ; </@> 
 <@> if ( ! this . initialized ) { this . initialized = true ; if ( this . auto _ create ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . install ( context ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . perf _ counter = new performance _ counter ( this . category _ name , this . counter _ name , this . instance _ name , false ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . error ( exception , STR , this . category _ name , this . counter _ name , this . instance _ name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . perf _ counter ! = null ; </@> 
 <@> this . machine _ name = environment . machine _ name ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . machine _ name = string . empty ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> builder . append ( this . machine _ name ) ; </@> 
 <@> using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . parameters = new list < method _ call _ parameter > ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . do _ invoke ( parameters , log _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> var parameter _ value = base . render _ log _ event ( param . layout , log _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> base . </%> <@> using ( var target _ builder = this . optimize _ buffer _ reuse ? this . reusable _ layout _ builder . allocate ( ) : this . reusable _ layout _ builder . none ) </@> 
 <@> using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%>
 <@> this . message _ queue _ proxy = new message _ queue _ proxy ( ) ; this . label = STR ; this . encoding = encoding . ut ; this . check _ if _ queue _ exists = true ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> 
 <@> if ( this . queue = = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . create _ queue _ if _ not _ exists ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var msg = this . prepare _ message ( log _ event ) ; this . message _ queue _ proxy . send ( queue , msg ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> if ( string . is _ null _ or _ empty ( this . host ) & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) ) </@> <%> <-> this . </%>
 <@> if ( this . smtp _ server = = null & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . delivery _ method = = smtp _ delivery _ method . network & & this . smtp _ server = = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( ! string . is _ null _ or _ empty ( this . pickup _ directory _ location ) & & this . delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> client . delivery _ method = this . delivery _ method ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> return console _ target _ helper . get _ console _ output _ encoding ( this . encoding , this . is _ initialized , this . pause _ logging ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( console _ target _ helper . set _ console _ output _ encoding ( value , this . is _ initialized , this . pause _ logging ) ) </@> 
 <@> this . pause _ logging = false ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . encoding ! = null & & ! this . pause _ logging ) console . output _ encoding = this . encoding ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . write _ to _ output ( lei , base . render _ log _ event ( this . header , lei ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . write _ to _ output ( lei , base . render _ log _ event ( this . footer , lei ) ) ; </@> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <@> this . write _ to _ output ( log _ event , base . render _ log _ event ( this . layout , log _ event ) ) ; </@> 
 <@> var console _ stream = this . error _ stream ? console . error : console . out ; if ( this . word _ highlighting _ rules . count = = 0 ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> foreach ( console _ word _ highlighting _ rule hl in this . word _ highlighting _ rules ) </@> 
 <@> foreach ( console _ row _ highlighting _ rule rule in this . row _ highlighting _ rules ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . use _ default _ row _ highlighting _ rules ) </@> 
 <@> this . foreground _ color = foreground _ color ; this . background _ color = background _ color ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . background _ color ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> get { return this . foreground _ color ; } </@> 
 <@> this . stack = stack ; this . previous _ count = previous _ count ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> while ( this . stack . count > this . previous _ count ) </@> <%> <-> this . </%>
 <@> var target _ attribute = this . get _ type ( ) . get _ custom _ attribute < time _ source _ attribute > ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . get _ type ( ) . name ; </@> 
 <@> using n _ log _ common ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . async _ continuation = async _ continuation ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> var cont = interlocked . exchange ( ref this . async _ continuation , null ) ; </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . repeat _ count = repeat _ count ; this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( repeating _ target _ wrapper ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> this . optimize _ buffer _ reuse = true ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . header ! = null ) </@> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> debugger . log ( log _ level . off . ordinal , string . empty , base . render _ log _ event ( this . header , log _ event _ info . create _ null _ event ( ) ) + STR ) ; </@> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <@> debugger . log ( log _ level . off . ordinal , string . empty , base . render _ log _ event ( this . footer , log _ event _ info . create _ null _ event ( ) ) + STR ) ; </@> <%> <-> this . </%>
<%> <-> base . </%> <%> <-> this . </%> <@> if ( this . optimize _ buffer _ reuse ) </@> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> base . </%> <%> <-> this . </%> <@> log _ message = base . render _ log _ event ( this . layout , log _ event ) + STR ; </@> 
 <@> this . separator = STR ; this . bottom _ frames = - 1 ; this . top _ frames = - 1 ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . top _ frames ! = - 1 ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> end _ pos = math . min ( this . top _ frames , messages . length ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> else if ( this . bottom _ frames ! = - 1 ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> start _ pos = messages . length - math . min ( this . bottom _ frames , messages . length ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> current _ separator = this . separator ; </@> 
 <@> this . last _ message = string . empty ; this . counter = 0 ; this . optimize _ buffer _ reuse = true ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . counter + + ; this . last _ message = this . render _ log _ event ( this . layout , log _ event ) ; </@> 
 <@> this . events = new list < log _ event _ info > ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . events . add ( log _ event ) ; if ( this . throw _ exceptions ) </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . throw _ exceptions ) </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; if ( this . fail _ counter > 0 ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . fail _ counter - - ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ count + + ; </@> 
 <@> if ( this . variable ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> var environment _ variable = environment _ helper . get _ safe _ environment _ variable ( this . variable ) ; </@> 
 <@> if ( ! this . thread _ agnostic ) { this . render ( log _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( ! this . is _ initialized ) { this . initialize ( this . logging _ configuration ) ; } return this . get _ formatted _ message ( log _ event ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( ! this . thread _ agnostic ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ! this . is _ initialized ) { this . initialize ( this . logging _ configuration ) ; } if ( ! this . thread _ agnostic ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> cache _ layout _ result = cache _ layout _ result & & ! this . thread _ agnostic ; </@> 
 <@> if ( ! this . thread _ agnostic ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> int initial _ length = this . max _ rendered _ length ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( sb . length > this . max _ rendered _ length ) { this . max _ rendered _ length = sb . length ; } if ( cache _ layout _ result & & ! this . thread _ agnostic ) </@> 
 <@> this . initialize ( configuration ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . close ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . thread _ agnostic = object _ graph _ scanner _ list . all ( item = > item . get _ type ( ) . is _ defined ( typeof ( thread _ agnostic _ attribute ) , true ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ initialized ) { this . logging _ configuration = null ; this . is _ initialized = false ; this . close _ layout ( ) ; </@> 
 <@> this . current _ file _ length = file _ info . length ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . current _ file _ length = 0 ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . file = this . create _ file _ stream ( false ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . file ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . file = null ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . file = = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . creation _ time _ utc ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . last _ write _ time _ utc ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . current _ file _ length ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . file = = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . current _ file _ length + = count ; this . file . write ( bytes , offset , count ) ; </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . action = filter _ result . neutral ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . check ( log _ event ) ; </@> 
 <@> using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> if ( this . class _ name ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . method _ name ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . file _ name ) </@> 
 <@> if ( this . clean _ names _ of _ async _ continuations & & method . name = = STR & & type . declaring _ type ! = null & & type . name . starts _ with ( STR ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . clean _ names _ of _ anonymous _ delegates & & class _ name ! = null ) </@> 
 <@> if ( this . class _ name ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . clean _ names _ of _ async _ continuations & & method . name = = STR & & type ? . declaring _ type ! = null & & type . name . starts _ with ( STR ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . clean _ names _ of _ anonymous _ delegates & & ( method _ name . starts _ with ( STR ) & & method _ name . contains ( STR ) & & method _ name . contains ( STR ) ) ) </@> 
 <@> using n _ log _ common ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . request _ limit = request _ limit ; this . on _ overflow = overflow _ action ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . log _ event _ info _ queue . count > = this . request _ limit ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> switch ( this . on _ overflow ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> while ( this . log _ event _ info _ queue . count > = this . request _ limit ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . on _ overflow = = async _ target _ wrapper _ overflow _ action . block ) </@> 
<%> <-> this . </%> <%> <-> this . </%> <@> result . add ( this . log _ event _ info _ queue . dequeue ( ) ) ; if ( this . on _ overflow = = async _ target _ wrapper _ overflow _ action . block ) </@> <%> <-> this . </%>
 <@> if ( this . is _ authenticated ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> separator = this . separator ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . auth _ type ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> separator = this . separator ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . name ) </@> 
 <@> this . name = name ; this . ordinal = ordinal ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . name ; } </@> 
 <@> return this . name ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . ordinal ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . ordinal = = other . ordinal ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return other ! = null & & this . ordinal = = other . ordinal ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . ordinal - level . ordinal ; </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . throw _ on _ initialize ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> assert . equal ( 0 , this . in _ blocking _ operation ) ; this . initialize _ count + + ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> assert . equal ( 0 , this . in _ blocking _ operation ) ; this . close _ count + + ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> assert . equal ( 0 , this . in _ blocking _ operation ) ; this . flush _ count + + ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> assert . equal ( 0 , this . in _ blocking _ operation ) ; this . write _ count + + ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> assert . equal ( 0 , this . in _ blocking _ operation ) ; this . write _ count + + ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> assert . equal ( 0 , this . in _ blocking _ operation ) ; this . write _ count + + ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . sync _ root ) { this . in _ blocking _ operation + + ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . in _ blocking _ operation - - ; </@> 
 <@> using n _ log _ config ; using n _ log _ layouts ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> string msg = this . render _ inner ( log _ event ) ; builder . append ( this . transform ( msg ) ) ; </@> <%> <-> this . </%>
 <@> this . previous _ culture _ info = thread . current _ thread . current _ culture ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> thread . current _ thread . current _ culture = this . previous _ culture _ info ; </@> 
 <@> return ( t ) this . get _ logger ( name , typeof ( t ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name ) ; </@> 
 <@> using n _ log _ common ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . targets = new list < target > ( targets ) ; </@> <%> <-> this . </%>
 <@> this . name = name ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . last _ log _ event = log _ event ; </@> 
 <@> this . events = new list < log _ event _ info > ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . throw _ exceptions - - > 0 ) </@> <%> <-> this . </%>
 <@> using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . space _ as _ plus = true ; </@> 
 <@> this . log = new string _ writer ( ) ; </@> <%> <-> this . </%>
 <@> this . log = sender . log ; this . log . write _ line ( STR , address _ family , socket _ type , protocol _ type ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> return ( system . net . sockets . address _ family ) NUM ; </@> <%> <-> this . </%>
<%> <-> system . net . sockets . </%> <@> return STR + this . uri + STR ; </@> 
 <@> this . properties = new properties _ dictionary ( message _ template _ parameters ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . level = level ; this . logger _ name = logger _ name ; this . message = message ; this . parameters = parameters ; this . format _ provider = format _ provider ; this . exception = exception ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . calc _ formatted _ message ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> get { return this . stack _ trace ! = null ; } </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> get { return ( this . stack _ trace ! = null ) ? this . stack _ trace . get _ frame ( this . user _ stack _ frame _ number ) : null ; } </@> 
<%> <-> this . </%> <@> return this . logger _ name . substring ( last _ dot + 1 ) ; } return this . logger _ name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> get { return this . message ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . message = value ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> get { return this . parameters ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parameters = value ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . format _ provider ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . format _ provider ! = value ) { this . format _ provider = value ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . message _ formatter ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . message _ formatter = value ? ? string _ format _ message _ formatter ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . formatted _ message = = null ) { this . calc _ formatted _ message ( ) ; } return this . formatted _ message ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . properties ! = null ) { return this . properties . count > 0 ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> internal properties _ dictionary properties _ dictionary { get { return this . properties ; } set { this . properties = value ; } } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . properties = = null ) { interlocked . compare _ exchange ( ref this . properties , new properties _ dictionary ( ) , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . calc _ formatted _ message ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . properties ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var log _ message _ formatter = this . message _ formatter ? . target as i _ log _ message _ formatter ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . properties ! = null & & this . properties . message _ properties . count > 0 ) { return new message _ template _ parameters ( this . properties . message _ properties ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return new message _ template _ parameters ( this . message , this . parameters ) ; </@> 
 <@> return STR + this . logger _ name + STR + this . level + STR + this . formatted _ message + STR + this . sequence _ id ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . stack _ trace = stack _ trace ; this . user _ stack _ frame _ number = user _ stack _ frame ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . layout _ cache = = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . layout _ cache ) { if ( this . layout _ cache . count = = 0 ) </@> <%> <-> this . </%>
 <@> this . formatted _ message = this . message _ formatter ( this ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . formatted _ message = this . message ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . formatted _ message = null ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . calc _ formatted _ message ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . properties ! = null & & has _ message _ template _ parameters ) { this . properties . message _ properties = null ; </@> 
 <@> this . grow _ as _ needed = grow _ as _ needed ; this . buffer = new async _ log _ event _ info [ size ] ; this . grow _ limit = grow _ limit ; this . get _ pointer = 0 ; this . put _ pointer = 0 ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . count > = this . buffer . length ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . grow _ as _ needed & & this . buffer . length < this . grow _ limit ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> int cnt = this . count ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . count = 0 ; this . get _ pointer = 0 ; this . put _ pointer = 0 ; </@> 
 <@> using n _ log _ conditions ; using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . action ; </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . xml _ encode = true ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . xml _ encode ? do _ xml _ escape ( text ) : text ; </@> 
 <@> if ( this . value _ indexes ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> foreach ( int index in this . value _ indexes ) </@> 
 <@> if ( this . value _ indexes ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . value _ indexes = new list < int > ( ) ; </@> <%> <-> this . </%>
 <@> using n _ log _ config ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . json _ encode = true ; this . escape _ unicode = true ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . json _ encode ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> var result = targets . default _ json _ serializer . escape _ string ( target . to _ string ( ) , this . escape _ unicode ) ; </@> <%> <-> this . </%>
 <@> using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . exception _ separator = environment _ helper . new _ line ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . raw ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . with _ exception & & log _ event . exception ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> builder . append ( this . exception _ separator ) ; </@> 
 <@> this . cached = true ; this . clear _ cache = clear _ cache _ option . on _ init | clear _ cache _ option . on _ close ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . cached _ value = null ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . cached _ value = null ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . cached ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . cached _ value = = null | | this . rendered _ cache _ key ! = new _ cache _ key ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . cached _ value = base . render _ inner ( log _ event ) ; this . rendered _ cache _ key = new _ cache _ key ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . cached _ value ; </@> 
 <@> assert . equal ( STR , this . get _ connection _ string ( dt ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> assert . equal ( STR , this . get _ connection _ string ( dt ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> assert . equal ( STR , this . get _ connection _ string ( dt ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> assert . equal ( STR , this . get _ connection _ string ( dt ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> assert . equal ( STR , this . get _ connection _ string ( dt ) ) ; </@> 
 <@> ( ( mock _ db _ connection ) this . connection ) . add _ to _ log ( STR , this . param _ count ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> ( ( mock _ db _ connection ) this . connection ) . add _ to _ log ( STR , this . command _ text ) ; if ( this . connection . connection _ string = = STR ) </@> 
 <@> get { return this . parameter _ name ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parameter _ name = value ; </@> 
 <@> get { return this . parameter _ value ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parameter _ value = value ; </@> 
 <@> this . current _ process _ id = process . get _ current _ process ( ) . id ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> get { return this . current _ process _ id ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . get _ process _ name ( ) ; return this . current _ process _ name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . get _ process _ name ( ) ; return this . current _ process _ base _ name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . current _ process _ name = = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . current _ process _ name = process . get _ current _ process ( ) . main _ module . file _ name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . current _ process _ name = unknown _ process _ name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . current _ process _ base _ name = path . get _ file _ name _ without _ extension ( this . current _ process _ name ) ; </@> 
<%> <-> this . </%> <@> if ( this . throw _ exceptions ) </@> 
 <@> using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> if ( this . full _ name ) </@> 
 <@> using n _ log _ internal ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . string _ reader = string _ reader ; this . token _ type = condition _ token _ type . beginning _ of _ input ; this . get _ next _ token ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> string s = this . token _ value ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . token _ type ! = token _ type ) { throw new condition _ parse _ exception ( STR + token _ type + STR + this . token _ type + STR + this . token _ value + STR ) ; } this . get _ next _ token ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . token _ type ! = condition _ token _ type . keyword ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> string s = this . token _ value ; this . get _ next _ token ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . token _ type ! = condition _ token _ type . keyword ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . token _ type ! = condition _ token _ type . end _ of _ input ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . token _ type = = condition _ token _ type . number ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . token _ type = = token _ type ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . token _ type = = condition _ token _ type . end _ of _ input ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . skip _ whitespace ( ) ; this . token _ position = this . token _ position ; int i = this . peek _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . token _ type = condition _ token _ type . end _ of _ input ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . parse _ number ( ch ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parse _ single _ quoted _ string ( ch ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . parse _ keyword ( ch ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . token _ value = ch . to _ string ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . token _ type = tt ; this . token _ value = new string ( ch , 1 ) ; this . read _ char ( ) ; </@> 
 <@> this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . token _ type = condition _ token _ type . not _ equal ; this . token _ value = STR ; this . read _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . token _ type = condition _ token _ type . less _ than _ or _ equal _ to ; this . token _ value = STR ; this . read _ char ( ) ; return true ; } this . token _ type = condition _ token _ type . less _ than ; this . token _ value = STR ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . token _ type = condition _ token _ type . greater _ than _ or _ equal _ to ; this . token _ value = STR ; this . read _ char ( ) ; return true ; } this . token _ type = condition _ token _ type . greater _ than ; this . token _ value = STR ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . token _ type = condition _ token _ type . not _ equal ; this . token _ value = STR ; this . read _ char ( ) ; return true ; } this . token _ type = condition _ token _ type . not ; this . token _ value = STR ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . token _ type = condition _ token _ type . and ; this . token _ value = STR ; this . read _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . token _ type = condition _ token _ type . or ; this . token _ value = STR ; this . read _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . token _ type = condition _ token _ type . equal _ to ; this . token _ value = STR ; this . read _ char ( ) ; return true ; } this . token _ type = condition _ token _ type . equal _ to ; this . token _ value = STR ; </@> 
 <@> this . token _ type = condition _ token _ type . string ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . read _ char ( ) ; while ( ( i = this . peek _ char ( ) ) ! = - 1 ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> sb . append ( ( char ) this . read _ char ( ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . peek _ char ( ) = = ( int ) '\'' ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . read _ char ( ) ; </@> 
 <@> this . token _ value = sb . to _ string ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . token _ type = condition _ token _ type . keyword ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . read _ char ( ) ; while ( ( i = this . peek _ char ( ) ) ! = - 1 ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> sb . append ( ( char ) this . read _ char ( ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . token _ value = sb . to _ string ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . token _ type = condition _ token _ type . number ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . read _ char ( ) ; while ( ( i = this . peek _ char ( ) ) ! = - 1 ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> sb . append ( ( char ) this . read _ char ( ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . token _ value = sb . to _ string ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> while ( ( ch = this . peek _ char ( ) ) ! = - 1 ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . read _ char ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . character = character ; this . token _ type = token _ type ; </@> 
 <@> get { return this . x ; } set { this . x = value ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . action ; </@> 
 <@> string _ comparison comparison _ type = this . ignore _ case </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ! this . layout . render ( log _ event ) . equals ( this . compare _ to , comparison _ type ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . action ; </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . message _ limit = message _ limit ; this . interval = interval ; this . wrapped _ target = wrapped _ target ; this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( limiting _ target _ wrapper ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . message _ limit < = 0 ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . interval < = time _ span . zero ) </@> 
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . throw _ exceptions ) </@> 
 <@> assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ count + + ; </@> 
 <@> this . open _ async ( null ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . invoke _ async ( this . on _ begin _ open , null , this . on _ end _ open , this . on _ open _ completed , user _ state ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . close _ async ( null ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . on _ end _ process _ log _ messages , this . on _ process _ log _ messages _ completed , </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . begin _ process _ log _ messages ( events , callback , async _ state ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . end _ process _ log _ messages ( result ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . process _ log _ messages _ completed ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . process _ log _ messages _ completed ( this , new async _ completed _ event _ args ( e . error , e . cancelled , e . user _ state ) ) ; </@> 
 <@> if ( this . open _ completed ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . open _ completed ( this , new async _ completed _ event _ args ( e . error , e . cancelled , e . user _ state ) ) ; </@> 
 <@> if ( this . close _ completed ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . close _ completed ( this , new async _ completed _ event _ args ( e . error , e . cancelled , e . user _ state ) ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> 
 <@> if ( this . file _ appender _ cache ! = null ) { this . file _ appender _ cache . check _ close _ appenders - = auto _ closing _ timer _ callback ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . cleanup _ initialized _ files ( time _ source . current . time . add _ days ( - file _ target . initialized _ files _ cleanup _ period ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> file _ target . </%> <@> foreach ( var file in this . initialized _ files ) </@> 
 <@> if ( this . discard _ all ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> else if ( ! this . keep _ file _ open ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> else if ( this . network _ writes ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> else if ( this . concurrent _ writes ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ! this . force _ mutex _ concurrent _ writes & & platform _ detector . is _ desktop _ win & & ! platform _ detector . is _ mono ) </@> 
 <@> return this . archive _ above _ size ! = file _ target . archive _ above _ size _ disabled | | this . archive _ every ! = file _ archive _ period . none ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> file _ target . </%> <%> <-> this . </%> <@> this . appender _ factory = get _ file _ appender _ factory ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . open _ file _ cache _ timeout * NUM , this . open _ file _ cache _ timeout * NUM ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . auto _ closing _ timer = null ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . file _ archive _ helper = null ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var log _ file _ name = this . get _ full _ file _ name ( log _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> byte [ ] bytes = this . get _ bytes _ to _ write ( log _ event ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . full _ file _ name = = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> byte [ ] bytes = this . get _ bytes _ to _ write ( ev . log _ event ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . flush _ current _ file _ writes ( file _ name , first _ log _ event , ms , out last _ exception ) ; </@> 
 <@> this . write _ to _ file ( file _ name , bytes _ to _ write , initialized _ new _ file ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> builder . copy _ to _ stream ( work _ stream , this . encoding , transform _ buffer ) ; </@> 
 <@> var cleanup _ archive _ files = file _ archive _ style . check _ archive _ cleanup ( archive _ file _ pattern , existing _ archive _ files , this . max _ archive _ files ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . full _ archive _ file _ name = = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> archive _ file = this . get _ archive _ file _ name ( file _ name , ev , upcoming _ write _ size ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> var validated _ archive _ file = this . get _ archive _ file _ name ( file _ name , ev , upcoming _ write _ size ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . do _ auto _ archive ( archive _ file , ev , initialized _ new _ file ) ; </@> 
<%> <-> this . </%> <@> if ( this . archive _ above _ size = = archive _ above _ size _ disabled ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> var should _ archive = length . value + upcoming _ write _ size > this . archive _ above _ size ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . archive _ every = = file _ archive _ period . none ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> date _ time file _ create _ time = truncate _ archive _ time ( creation _ time _ source . value , this . archive _ every ) ; date _ time log _ event _ time = truncate _ archive _ time ( log _ event . time _ stamp , this . archive _ every ) ; </@> 
 <@> lock ( this . sync _ root ) { if ( ! this . is _ initialized ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> date _ time expire _ time = this . open _ file _ cache _ timeout > 0 ? date _ time . utc _ now . add _ seconds ( - this . open _ file _ cache _ timeout ) : date _ time . min _ value ; </@> <%> <-> this . </%>
 <@> if ( this . replace _ file _ contents _ on _ each _ write ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write _ header ( appender ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . auto _ flush ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . initialized _ files [ file _ name ] = now ; this . initialized _ files _ counter + + ; </@> <%> <-> this . </%> <%> <-> file _ target . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . initialized _ files _ counter > = file _ target . initialized _ files _ counter _ max ) { this . initialized _ files _ counter = 0 ; this . cleanup _ initialized _ files ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ( is _ archiving ) | | ( ! this . write _ footer _ on _ archiving _ only ) ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> array _ segment < byte > footer _ bytes = this . get _ layout _ bytes ( footer ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . write _ to _ file ( file _ name , footer _ bytes , false ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . do _ auto _ archive ( file _ name , log _ event , true ) ; </@> 
 <@> if ( this . delete _ old _ file _ on _ startup ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( file _ archive _ mode _ factory . should _ delete _ old _ archives ( this . max _ archive _ files ) ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( file _ archive _ style . attempt _ cleanup _ on _ initialize _ file ( archive _ file _ pattern , this . max _ archive _ files ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var cleanup _ archive _ files = file _ archive _ style . check _ archive _ cleanup ( archive _ file _ pattern , existing _ archive _ files , this . max _ archive _ files ) ; </@> 
 <@> array _ segment < byte > header _ bytes = this . get _ layout _ bytes ( header ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> array _ segment < byte > footer _ bytes = this . get _ layout _ bytes ( footer ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ! this . create _ dirs | | ! first _ attempt ) </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( randomize _ group _ target ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . random ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> return base . to _ string ( ) + STR + this . wrapped _ target + STR ; </@> <%> <-> this . </%>
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( round _ robin _ group _ target ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . lock _ object ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> selected _ target = this . current _ target ; this . current _ target = ( this . current _ target + 1 ) % this . targets . count ; </@> <%> <-> this . </%>
 <@> using n _ log _ config ; using n _ log _ layouts ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . name = parameter _ name ; this . layout = parameter _ layout ; </@> 
 <@> using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; using n _ log _ layouts ; using n _ log _ log _ receiver _ service ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . parameters = new list < method _ call _ parameter > ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . name = name ; </@> 
 <@> this . write ( ( i _ list < async _ log _ event _ info > ) new [ ] { log _ event } ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . in _ call ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . precalculate _ volatile _ layouts ( log _ events [ i ] . log _ event ) ; this . buffer . append ( log _ events [ i ] ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var network _ log _ events = this . translate _ log _ events ( log _ events _ array ) ; this . send ( network _ log _ events , log _ events _ array , null ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . send _ buffered _ events ( async _ continuation ) ; </@> 
 <@> if ( this . client _ id ! = null ) { client _ id = this . client _ id . render ( log _ events [ 0 ] . log _ event ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . merge _ event _ properties ( ev ) ; </@> 
 <@> network _ log _ events . events [ i ] = this . translate _ event ( ev . log _ event , network _ log _ events , string _ table ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ! this . on _ send ( events , async _ continuations ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> internal _ logger . error ( e . error , STR , this . name ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . send _ buffered _ events ( null ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . in _ call = true ; </@> 
 <@> if ( string . is _ null _ or _ empty ( this . endpoint _ configuration _ name ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . use _ binary _ encoding ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , binding , new endpoint _ address ( this . endpoint _ address ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , this . endpoint _ configuration _ name , new endpoint _ address ( this . endpoint _ address ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . create _ wcf _ log _ receiver _ client ( ) ; </@> 
 <@> lock ( this . sync _ root ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var network _ log _ events = this . translate _ log _ events ( buffered _ events ) ; this . send ( network _ log _ events , buffered _ events , flush _ continuation ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . in _ call = false ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> internal _ logger . error ( exception , STR , this . name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> internal _ logger . error ( exception , STR , this . name ) ; </@> 
 <@> var config = new n _ log . config . logging _ configuration ( ) ; </@> <%> <-> n _ log . config . </%>
<%> <-> n _ log . config . </%> <@> var config = new n _ log . config . logging _ configuration ( ) ; </@> <%> <-> n _ log . config . </%>
<%> <-> n _ log . config . </%> <@> var config = new n _ log . config . logging _ configuration ( ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . register _ items _ from _ assembly ( asm ) ; </@> 
 <@> get { return this . targets ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> get { return this . filters ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . layout _ renderers ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . layout _ renderers ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . layouts ; } </@> <%> <-> this . </%> <%> <*> public n _ log . targets . -> public </%> <%> <-> n _ log . targets . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . ambient _ properties ; } </@> <%> <*> public n _ log . targets . -> public </%> <%> <-> n _ log . targets . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> public n _ log . targets . i _ json _ serializer json _ serializer { get { return json _ serializer as n _ log . targets . i _ json _ serializer ; } </@> 
 <@> get { return this . time _ sources ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> get { return this . condition _ methods ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . register _ items _ from _ assembly ( assembly , string . empty ) ; </@> 
 <@> foreach ( i _ factory f in this . all _ factories ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> foreach ( i _ factory f in this . all _ factories ) </@> 
 <@> get { return this . x ; } set { this . x = value ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return STR + this . x ; </@> 
 <@> if ( this . padding ! = 0 ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . padding > 0 ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> s = s . pad _ left ( this . padding , this . pad _ character ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> s = s . pad _ right ( - this . padding , this . pad _ character ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> int absolute _ padding = this . padding ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . fixed _ length & & s . length > absolute _ padding ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . alignment _ on _ truncation = = padding _ horizontal _ alignment . right ) </@> 
 <@> assert . equal ( this . get _ type ( ) . full _ name , logger . name ) ; </@> <%> <-> n _ log . </%>
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . max _ size = size ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . logs = new queue < string > ( max _ size ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . logs = null ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . logs = = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> if ( log _ event . has _ properties & & log _ event . properties . try _ get _ value ( this . item , out value ) ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> var format _ provider = get _ format _ provider ( log _ event , this . culture ) ; builder . append _ formatted _ value ( value , this . format , format _ provider ) ; </@> 
 <@> this . socket = new socket ( address _ family , socket _ type , protocol _ type ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . socket ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> ( ( i _ disposable ) this . socket ) . dispose ( ) ; </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> type target _ type = type . get _ type ( this . class _ name ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . method = target _ type . get _ method ( this . method _ name ) ; if ( this . method = = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . needed _ parameters = this . method . get _ parameters ( ) . length ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . method = null ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . method = null ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . method ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> else if ( this . lhf = = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . lhf = new layout _ with _ header _ and _ footer ( ) </@> <%> <-> this . </%>
 <@> get { return this . is _ trace _ enabled ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> get { return this . is _ debug _ enabled ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . is _ info _ enabled ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . is _ warn _ enabled ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . is _ error _ enabled ; } </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . is _ fatal _ enabled ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , null , value ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , value ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . trace , null , message _ func ( ) ) ; </@> 
 <@> this . trace ( message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , null , message ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , args ) ; </@> 
 <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , exception , message , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , exception , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , exception , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . trace ( message , exception _ candidate ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , null , value ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , value ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . debug , null , message _ func ( ) ) ; </@> 
 <@> this . debug ( message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , null , message ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , args ) ; </@> 
 <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , exception , message , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , exception , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , exception , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . debug ( message , exception _ candidate ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , null , value ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , value ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . info , null , message _ func ( ) ) ; </@> 
 <@> this . info ( message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , null , message ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , args ) ; </@> 
 <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , exception , message , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , exception , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , exception , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . info ( message , exception _ candidate ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , null , value ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , value ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . warn , null , message _ func ( ) ) ; </@> 
 <@> this . warn ( message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , null , message ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , args ) ; </@> 
 <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , exception , message , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , exception , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , exception , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . warn ( message , exception _ candidate ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , null , value ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , value ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . error , null , message _ func ( ) ) ; </@> 
 <@> this . error ( message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , null , message ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , args ) ; </@> 
 <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , exception , message , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , exception , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , exception , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . error ( message , exception _ candidate ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , null , value ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , value ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . fatal , null , message _ func ( ) ) ; </@> 
 <@> this . fatal ( message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , null , message ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , args ) ; </@> 
 <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , exception ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , exception , message , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , exception , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , exception , format _ provider , message , args ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . fatal ( message , exception _ candidate ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument , argument } ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument , argument , argument } ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <@> return this . to _ event _ info ( string . empty ) ; </@> 
 <@> this . implementation = implementation ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> get { return this . implementation ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . get _ enumerator ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . wrapped = wrapped ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> get { return this . entry ; } </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> using n _ log _ config ; using n _ log _ layouts ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . parameters = new list < database _ parameter _ info > ( ) ; this . command _ type = command _ type . text ; </@> 
 <@> using n _ log _ common ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . address _ family = address _ family ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . close _ socket ( continuation ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> var sock = this . socket ; this . socket = null ; </@> 
 <@> args . completed + = this . socket _ operation _ completed ; args . remote _ end _ point = this . endpoint ; if ( ! this . socket . send _ to _ async ( args ) ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . socket _ operation _ completed ( this . socket , args ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> 
 <@> get { return this . max _ message _ length ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . max _ message _ length = value ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> get { return this . max _ kilobytes ; } </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . max _ kilobytes = value ; </@> 
 <@> event _ log . delete _ event _ source ( fixed _ source , this . machine _ name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return event _ log . source _ exists ( fixed _ source , this . machine _ name ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> string message = base . render _ log _ event ( this . layout , log _ event ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( message . length > this . max _ message _ length ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> message = message . substring ( 0 , this . max _ message _ length ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> for ( int offset = 0 ; offset < message . length ; offset + = this . max _ message _ length ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> string chunk = message . substring ( offset , math . min ( this . max _ message _ length , ( message . length - offset ) ) ) ; </@> 
 <@> if ( this . entry _ type ! = null ) </@> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> var value = base . render _ log _ event ( this . entry _ type , log _ event ) ; </@> 
 <@> event _ log _ instance . log = = this . log & & event _ log _ instance . machine _ name = = this . machine _ name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> event _ log _ instance = new event _ log ( this . log , this . machine _ name , rendered _ source ) ; } if ( this . max _ kilobytes . has _ value ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . source ! = null ? base . render _ log _ event ( this . source , log _ event ) : null ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> machine _ name = this . machine _ name </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> machine _ name = this . machine _ name </@> 
 <@> this . process _ log _ messages ( log _ events ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . log _ factory ! = null ) </@> <%> <-> this . </%>
 <@> using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . property = process _ info _ property . id ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . property _ info = typeof ( process ) . get _ property ( this . property . to _ string ( ) ) ; if ( this . property _ info = = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> throw new argument _ exception ( STR + this . property _ info + STR ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> late _ bound _ property _ get = reflection _ helpers . create _ late _ bound _ method ( this . property _ info . get _ get _ method ( ) ) ; this . process = process . get _ current _ process ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . process ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . process . close ( ) ; this . process = null ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . late _ bound _ property _ get ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> var value = this . late _ bound _ property _ get ( this . process , null ) ; builder . append _ formatted _ value ( value , this . format , format _ provider ) ; </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . culture = culture _ info . invariant _ culture ; this . uppercase = true ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . uppercase ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> culture _ info culture = this . culture ; </@> 
 <@> using n _ log _ common ; using n _ log _ internal ; using n _ log _ layouts ; using n _ log _ targets ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . logging _ rules = new list < logging _ rule > ( ) ; </@> 
<%> <-> this . </%> <@> this . initialize _ all ( ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <@> this . config _ items = object _ graph _ scanner . find _ reachable _ objects < object > ( roots . to _ array ( ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . info ( STR , this . config _ items . count ) ; foreach ( object o in this . config _ items ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . validate _ config ( ) ; </@> 
 <@> this . initialize _ all ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> this . logs = new list < string > ( ) ; this . optimize _ buffer _ reuse = true ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . logs . add ( base . render _ log _ event ( this . layout , log _ event ) ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . ignore _ case ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . whole _ words ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . regex = new regex ( regex _ string , regex _ options ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . text = text ; this . replace _ group _ name = replace _ group _ name ; this . replace _ with = replace _ with ; </@> 
 <@> this . optimize _ buffer _ reuse = true ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . format _ message ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . render _ log _ event ( this . layout , log _ event ) ; </@> 
 <@> using n _ log _ common ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> var web _ request = web _ request . create ( new uri ( this . address ) ) ; </@> 
 <@> this . sent _ messages = new list < message > ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . queue _ exists _ called = true ; return this . queue _ exists ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . queue _ created = true ; </@> 
 <@> this . increment = 1 ; this . value = 1 ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . sequence ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> v = get _ next _ sequence _ value ( this . sequence . render ( log _ event ) , this . value , this . increment ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> v = this . value ; this . value + = this . increment ; </@> 
 <@> if ( this . user _ name ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . domain ) </@> 
 <@> get { return this . lock _ object ; } </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . is _ initialized ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . sync _ root ) { return this . is _ initialized ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . sync _ root ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> bool was _ initialized = this . is _ initialized ; this . initialize ( configuration ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . close ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . dispose ( true ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . sync _ root ) { if ( ! this . is _ initialized ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ async ( async _ continuation ) ; </@> 
 <@> if ( this . all _ layouts _ are _ thread _ agnostic ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . sync _ root ) { if ( ! this . is _ initialized ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . all _ layouts ! = null ) { if ( this . optimize _ buffer _ reuse ) { using ( var target _ builder = this . reusable _ layout _ builder . allocate ( ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> foreach ( layout layout in this . all _ layouts ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> foreach ( layout layout in this . all _ layouts ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> var target _ attribute = this . get _ type ( ) . get _ custom _ attribute < target _ attribute > ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> return target _ attribute . name + STR + ( this . name ? ? STR ) + STR ; } return this . get _ type ( ) . name ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( ! this . is _ initialized ) { lock ( this . sync _ root ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . initialize _ exception ! = null ) { lock ( this . sync _ root ) { log _ event . continuation ( this . create _ init _ exception ( ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . write _ async _ thread _ safe ( wrapped _ log _ event ) ; </@> 
 <@> if ( ! this . is _ initialized ) { lock ( this . sync _ root ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . initialize _ exception ! = null ) { lock ( this . sync _ root ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> log _ events [ i ] . continuation ( this . create _ init _ exception ( ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . optimize _ buffer _ reuse ) </@> 
 <@> this . write _ async _ thread _ safe ( wrapped _ events ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . sync _ root ) { this . logging _ configuration = configuration ; if ( ! this . is _ initialized ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . initialize _ target ( ) ; this . initialize _ exception = null ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . initialize _ exception = exception ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . is _ initialized = true ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . sync _ root ) { this . logging _ configuration = null ; if ( this . is _ initialized ) { this . is _ initialized = false ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . initialize _ exception = = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . close _ target ( ) ; </@> 
 <@> lock ( this . sync _ root ) { if ( ! this . is _ initialized ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write ( log _ event ) ; </@> 
 <@> this . write ( log _ events [ i ] ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . sync _ root ) { if ( ! this . is _ initialized ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> async _ log _ event _ info [ ] log _ events _ array = this . optimize _ buffer _ reuse ? null : log _ events as async _ log _ event _ info [ ] ; if ( ! this . optimize _ buffer _ reuse & & log _ events _ array ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write ( log _ events _ array ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . write ( log _ events ) ; </@> 
 <@> if ( this . process _ exit _ event = = null & & this . current _ app _ domain ! = null ) this . current _ app _ domain . process _ exit + = on _ process _ exit ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . process _ exit _ event + = value ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . process _ exit _ event - = value ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . process _ exit _ event = = null & & this . current _ app _ domain ! = null ) this . current _ app _ domain . process _ exit - = on _ process _ exit ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . domain _ unload _ event = = null & & this . current _ app _ domain ! = null ) this . current _ app _ domain . domain _ unload + = on _ domain _ unload ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . domain _ unload _ event + = value ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . domain _ unload _ event - = value ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . domain _ unload _ event = = null & & this . current _ app _ domain ! = null ) this . current _ app _ domain . domain _ unload - = on _ domain _ unload ; </@> 
 <@> this . optimize _ buffer _ reuse = true ; </@> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . name = name ; </@> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> string log _ message = base . render _ log _ event ( this . layout , log _ event ) ; if ( this . raw _ write | | log _ event . level < = log _ level . debug ) </@> 
 <@> this . protocol = web _ service _ protocol . soap ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . encoding = new ut _ encoding ( write _ bom ) ; this . include _ bom = write _ bom ; this . optimize _ buffer _ reuse = true ; this . headers = new list < method _ call _ parameter > ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> 
 <@> this . found _ enable _ group _ layout = false ; this . only _ enable _ group _ layout = true ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> if ( this . headers ! = null & & this . headers . count > 0 ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var header _ buckets = log _ events . bucket _ sort ( this . convet _ to _ header _ array _ delegate , array _ deep _ equality _ comparer < string > . default ) ; </@> 
<%> <-> this . </%> <@> if ( this . pre _ authenticate ) </@> 
 <@> write _ stream _ and _ fix _ preamble ( post _ payload , stream , this . include _ bom , this . encoding ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . error ( ex , STR , this . name ) ; </@> 
 <@> if ( this . protocol ! = web _ service _ protocol . http _ get ) { return this . url ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> using ( var target _ builder = this . optimize _ buffer _ reuse ? this . reusable _ layout _ builder . allocate ( ) : this . reusable _ layout _ builder . none ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> var builder = new uri _ builder ( this . url ) ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . throw _ exceptions ) </@> 
 <@> this . buffered _ write _ count + + ; this . buffered _ total _ events + = log _ events . count ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . fail _ counter > 0 ) { this . fail _ counter - - ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ count + + ; </@> 
 <@> this . configuration _ item _ factory = configuration _ item _ factory ; this . text = txt ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . configuration _ item _ factory = configuration _ item _ factory ; this . set _ renderers ( renderers , text ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . layout _ text ; </@> 
<%> <-> this . </%> <@> this . set _ renderers ( renderers , txt ) ; </@> <%> <-> this . </%>
 <@> return STR + this . text + STR ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . fixed _ text = null ; } this . layout _ text = text ; if ( this . logging _ configuration ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> return this . fixed _ text ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> this . left _ expression = left ; this . right _ expression = right ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return STR + this . left _ expression + STR + this . right _ expression + STR ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> this . events = new list < log _ event _ info > ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%>
 <@> using n _ log _ config ; using n _ log _ layouts ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> get { return this . inner ; } set { this . inner = value ; } </@> 
 <@> using n _ log _ layout _ renderers ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . renderer = new log _ j _ xml _ event _ layout _ renderer ( ) ; </@> 
 <@> this . name = name ; </@> <%> <-> this . </%>
 <@> using n _ log _ common ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . address = url ; this . last _ send _ time = interlocked . increment ( ref current _ send _ time ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . do _ initialize ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . do _ close ( continuation ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . do _ flush ( continuation ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . last _ send _ time = interlocked . increment ( ref current _ send _ time ) ; this . do _ send ( bytes , offset , length , async _ continuation ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . dispose ( true ) ; </@> 
 <@> if ( ! this . with _ header ) { this . header = null ; } switch ( this . delimiter ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . actual _ column _ delimiter = culture _ info . current _ culture . text _ info . list _ separator ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . actual _ column _ delimiter = STR ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . actual _ column _ delimiter = STR ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . actual _ column _ delimiter = STR ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> sb . append ( this . actual _ column _ delimiter ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> switch ( this . quoting ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( column _ value . index _ of _ any ( this . quotable _ characters ) > = 0 ) </@> 
 <@> sb . append ( this . quote _ char ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> sb . append ( column _ value . replace ( this . quote _ char , this . double _ quote _ char ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> sb . append ( this . quote _ char ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parent = parent ; </@> <%> <-> this . </%>
 <@> using n _ log _ config ; using n _ log _ layout _ renderers ; using n _ log _ layouts ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ; this . renderer . parameters = this . parameters ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . layout ; </@> 
 <@> using n _ log _ common ; using n _ log _ conditions ; using n _ log _ config ; using n _ log _ internal ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . rules = new list < filtering _ rule > ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . rules = new list < filtering _ rule > ( ) ; this . wrapped _ target = wrapped _ target ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . name = name ; </@> 
 <@> result _ filter = this . default _ filter ; </@> <%> <-> this . </%>
 <@> this . watcher = new multi _ file _ watcher ( ) ; this . watcher . file _ changed + = this . config _ file _ changed ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . configuration = config ; </@> 
 <@> if ( this . config _ loaded ) return this . config ; lock ( this . sync _ root ) { if ( this . config _ loaded ) return this . config ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . config = = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . config = xml _ logging _ configuration . app _ config ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . config = = null ) </@> 
 <@> if ( this . config ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . config _ loaded = true ; } } return this . config ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . sync _ root ) { logging _ configuration old _ config = this . config ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . flush ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . config = value ; if ( this . config = = null ) this . config _ loaded = false ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . config . initialize _ all ( ) ; this . reconfig _ existing _ loggers ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . config _ loaded = true ; } } this . on _ configuration _ changed ( new logging _ configuration _ changed _ event _ args ( value , old _ config ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . global _ threshold ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . sync _ root ) { this . global _ threshold = value ; this . reconfig _ existing _ loggers ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var configuration = this . configuration ; </@> 
 <@> return this . get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return ( t ) this . get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name , typeof ( t ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name , logger _ type ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return ( t ) this . get _ logger ( new logger _ cache _ key ( name , typeof ( t ) ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . get _ logger ( new logger _ cache _ key ( name , logger _ type ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . sync _ root ) { if ( this . config ! = null ) { this . config . initialize _ all ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> logger . set _ configuration ( this . get _ configuration _ for _ logger ( logger . name , this . config ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . flush ( default _ flush _ timeout ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> async _ helpers . run _ synchronously ( cb = > this . flush ( cb , timeout ) ) ; </@> 
 <@> this . flush ( time _ span . from _ milliseconds ( timeout _ milliseconds ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . flush ( async _ continuation , time _ span . max _ value ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . flush ( async _ continuation , time _ span . from _ milliseconds ( timeout _ milliseconds ) ) ; </@> <%> <-> this . </%>
 <@> lock ( this . sync _ root ) { this . logs _ enabled - - ; if ( this . logs _ enabled = = - 1 ) { this . reconfig _ existing _ loggers ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . sync _ root ) { this . logs _ enabled + + ; if ( this . logs _ enabled = = 0 ) { this . reconfig _ existing _ loggers ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . logs _ enabled > = 0 ; </@> 
 <@> if ( this . reload _ timer = = null & & this . is _ disposing ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . sync _ root ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . is _ disposing ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var current _ timer = this . reload _ timer ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . reload _ timer = null ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . watcher . stop _ watching ( ) ; if ( this . configuration ! = configuration _ to _ reload ) </@> 
 <@> if ( this . is _ disposing ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . is _ disposing = true ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . configuration _ reloaded = null ; if ( this . watcher ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . watcher . file _ changed - = this . config _ file _ changed ; }  if ( monitor . try _ enter ( this . sync _ root , NUM ) ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> var current _ timer = this . reload _ timer ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . reload _ timer = null ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . watcher ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . watcher . dispose ( ) ; }  var old _ config = this . config ; if ( this . config _ loaded & & old _ config ! = null ) </@> 
 <@> this . config = new xml _ logging _ configuration ( config _ file , this ) ; </@> <%> <-> log _ factory . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> internal _ logger . info ( STR , log _ factory . reconfig _ after _ file _ changed _ timeout ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> log _ factory . </%> <@> lock ( this . sync _ root ) { if ( this . is _ disposing ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> log _ factory . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . reload _ timer = = null ) { var configuration = this . configuration ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> log _ factory . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> log _ factory . reconfig _ after _ file _ changed _ timeout , </@> <%> <-> this . </%> <%> <-> log _ factory . </%>
 <@> this . name = name ; this . concrete _ type = concrete _ type ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return ( this . concrete _ type = = key . concrete _ type ) & & string . equals ( key . name , this . name , string _ comparison . ordinal ) ; </@> 
 <@> this . factory = factory ; </@> <%> <-> this . </%>
 <@> using n _ log _ layouts ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . layout = layout ; </@> <%> <-> this . </%> <%> <-> this . </%>
 <@> return this . format ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . format = value ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> return this . inner _ format ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . inner _ format = value ; </@> 
 <@> foreach ( exception _ rendering _ format rendering _ format in this . formats ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> separator = this . separator ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> while ( current _ exception ! = null & & current _ level < this . max _ inner _ exception _ level ) </@> 
 <@> sb . append ( this . inner _ exception _ separator ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> foreach ( exception _ rendering _ format rendering _ format in this . inner _ formats ? ? this . formats ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> separator = this . separator ; </@> 
<%> <-> this . </%> <@> this . increment _ usage _ count ( type . base _ type ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . increment _ usage _ count ( iface ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . increment _ usage _ count ( method . return _ type ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . increment _ usage _ count ( p . parameter _ type ) ; </@> 
 <@> this . increment _ usage _ count ( type . get _ generic _ type _ definition ( ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> this . increment _ usage _ count ( parm ) ; </@> 
 <@> args . remote _ end _ point = this . parse _ endpoint _ address ( new uri ( this . address ) , this . address _ family ) ; args . completed + = this . socket _ operation _ completed ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . async _ operation _ in _ progress ) { this . close _ continuation = continuation ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . close _ socket ( continuation ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ! this . async _ operation _ in _ progress & & this . pending _ requests . count = = 0 ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ continuation = continuation ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> var sock = this . socket ; this . socket = null ; </@> 
 <@> this . async _ operation _ in _ progress = false ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . pending _ error = new io _ exception ( STR + e . socket _ error ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> async _ continuation ( this . pending _ error ) ; } } this . process _ next _ queued _ item ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . async _ operation _ in _ progress ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . pending _ error ! = null ) { while ( this . pending _ requests . count ! = 0 ) { args = this . pending _ requests . dequeue ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> async _ continuation ( this . pending _ error ) ; } } if ( this . pending _ requests . count = = 0 ) { var fc = this . flush _ continuation ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . flush _ continuation = null ; fc ( this . pending _ error ) ; } var cc = this . close _ continuation ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . close _ continuation = null ; this . close _ socket ( cc ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> this . parse ( reader ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . parse ( reader ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> foreach ( var ch in this . children ) </@> 
 <@> string value = this . get _ optional _ attribute ( attribute _ name , null ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> throw new n _ log _ configuration _ exception ( STR + attribute _ name + STR + this . local _ name + STR ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> throw new invalid _ operation _ exception ( STR + string . join ( STR , allowed _ names ) + STR + this . local _ name + STR ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> foreach ( var child _ element in this . children ) </@> 
 <@> this . value + = reader . value ; </@> <%> <-> this . </%>
 <@> if ( this . machine _ name ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . perf _ counter = new performance _ counter ( this . category , this . counter , this . instance , this . machine _ name ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . perf _ counter = new performance _ counter ( this . category , this . counter , this . instance , true ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . perf _ counter . close ( ) ; this . perf _ counter = null ; </@> <%> <-> this . </%>
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . stop _ lazy _ writer _ thread ( ) ; if ( monitor . try _ enter ( this . write _ lock _ object , NUM ) ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> monitor . exit ( this . write _ lock _ object ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . timer _ lock _ object ) { if ( this . lazy _ writer _ timer ! = null ) { if ( this . time _ to _ sleep _ between _ batches < = 0 ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . trace ( STR , this . name ) ; this . lazy _ writer _ timer . change ( 1 , timeout . infinite ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . lazy _ writer _ timer . change ( this . time _ to _ sleep _ between _ batches , timeout . infinite ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock _ taken = monitor . try _ enter ( this . write _ lock _ object ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . timer _ lock _ object ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . lazy _ writer _ timer ! = null ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> monitor . exit ( this . write _ lock _ object ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . timer _ lock _ object ) { var current _ timer = this . lazy _ writer _ timer ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . lazy _ writer _ timer = null ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . write ( log _ event ) ; </@> 
 <@> if ( this . lazy _ writer _ timer = = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . write _ lock _ object ) { int count = write _ events _ in _ queue ( this . batch _ size , STR ) ; if ( count = = this . batch _ size ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( wrote _ full _ batch _ size & & this . time _ to _ sleep _ between _ batches < = 0 ) this . start _ instant _ writer _ timer ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . error ( exception , STR , this . name ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . time _ to _ sleep _ between _ batches < = 0 ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( ! wrote _ full _ batch _ size & & this . request _ queue . request _ count > 0 ) this . start _ lazy _ writer _ timer ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . start _ lazy _ writer _ timer ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> lock ( this . write _ lock _ object ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . time _ to _ sleep _ between _ batches < = 0 & & this . request _ queue . request _ count > 0 ) this . start _ lazy _ writer _ timer ( ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . error ( exception , STR , this . name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . wrapped _ target = = null ) { internal _ logger . error ( STR , this . name ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . trace ( STR , this . name , log _ events . length , reason ) ; this . wrapped _ target . write _ async _ log _ events ( log _ events ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> internal _ logger . trace ( STR , this . name , log _ events . count , reason ) ; this . wrapped _ target . write _ async _ log _ events ( log _ events ) ; </@> 
 <@> assert _ layout _ renderer _ output ( $ STR , path . combine ( this . sys _ dir , STR ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> assert _ layout _ renderer _ output ( $ STR , path . combine ( this . sys _ dir , STR ) ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> assert _ layout _ renderer _ output ( $ STR , path . combine ( this . sys _ dir , STR , STR ) ) ; </@> 
 <@> this . property = garbage _ collector _ property . total _ memory ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> switch ( this . property ) </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> if ( this . short _ name ) </@> 
 <@> using n _ log _ config ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> if ( this . universal _ time ) </@> 
 <@> this . happy _ path _ test ( false , line _ ending _ mode . crlf , STR , STR , STR ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . happy _ path _ test ( true , line _ ending _ mode . crlf , STR , STR , STR ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . happy _ path _ test ( true , line _ ending _ mode . lf , STR , STR , STR ) ; </@> 
 <@> this . memory _ stream = new memory _ stream ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . log . write _ line ( STR , this . id , this . address ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . log . write _ line ( STR , this . id ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
 <@> using n _ log _ config ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . culture = culture _ info . invariant _ culture ; this . lowercase = true ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . lowercase ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> culture _ info culture = this . culture ; </@> 
 <@> this . name = name ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . wrapped _ target = wrapped _ target ; this . retry _ count = retry _ count ; this . retry _ delay _ milliseconds = retry _ delay _ milliseconds ; this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( retrying _ target _ wrapper ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . retry _ sync _ object ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ! this . is _ initialized ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . write _ async _ thread _ safe ( log _ events [ i ] ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . retry _ sync _ object ) </@> 
 <@> internal _ logger . warn ( STR , this . wrapped _ target , ex , retry _ number , this . retry _ count ) ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> if ( retry _ number > = this . retry _ count ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> for ( int i = 0 ; i < this . retry _ delay _ milliseconds ; ) </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> int retry _ delay = math . min ( NUM , this . retry _ delay _ milliseconds - i ) ; </@> <%> <-> this . </%>
 <@> this . literal _ value = literal _ value ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . literal _ value = = null ) </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return convert . to _ string ( this . literal _ value , culture _ info . invariant _ culture ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> return this . literal _ value ; </@> 
 <@> this . format = STR ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . generated _ from _ log _ event ) </@> 
<%> <-> this . </%> <@> builder . append ( guid . new _ guid ( ) . to _ string ( this . format ) ) ; </@> 
 <@> base . thread _ agnostic = false ; </@> <%> <-> base . </%>
<%> <-> base . </%> <@> base . thread _ agnostic = false ; </@> 
<%> <-> this . </%> <%> <-> this . </%> <@> if ( this . include _ mdc ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . include _ mdlc ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( this . include _ all _ properties & & log _ event . has _ properties ) </@> <%> <-> this . </%>
 <@> if ( ! this . suppress _ spaces ) </@> <%> <-> this . </%>
<%> <-> this . </%> <@> if ( ! this . suppress _ spaces ) </@> 
 <@> public n _ log . targets . debug _ target get _ debug _ target ( string target _ name ) </@> <%> <*> protected n _ log . targets . -> protected </%> <%> <-> n _ log . targets . </%>
<%> <*> public n _ log . targets . -> public </%> <@> protected n _ log . targets . debug _ target get _ debug _ target ( string target _ name , logging _ configuration configuration ) { var debug _ target = ( n _ log . targets . debug _ target ) configuration . find _ target _ by _ name ( target _ name ) ; </@> 
 <@> lock ( this . writer ) { this . writer . write ( value ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . writer ) { this . writer . write _ line ( value ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> lock ( this . writer ) { return this . writer . to _ string ( ) ; </@> 
 <@> this . old _ console _ output _ writer = console . out ; this . old _ console _ error _ writer = console . error ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . global _ threshold = log _ manager . global _ threshold ; this . throw _ exceptions = log _ manager . throw _ exceptions ; this . throw _ config _ exceptions = log _ manager . throw _ config _ exceptions ; </@> 
 <@> using n _ log _ common ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> n _ log _ </%> <@> this . async _ continuation = async _ continuation ; this . timeout _ timer = new timer ( this . timer _ elapsed , null , timeout , time _ span . from _ milliseconds ( - 1 ) ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . stop _ timer ( ) ; var cont = interlocked . exchange ( ref this . async _ continuation , null ) ; </@> 
 <@> this . stop _ timer ( ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> var current _ timer = this . timeout _ timer ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . timeout _ timer = null ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . function ( new timeout _ exception ( STR ) ) ; </@> 
 <@> this . expression = expression ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> return STR + this . expression + STR ; </@> <%> <-> this . </%>
 <@> using n _ log _ common ; </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> this . accepts _ log _ event = true ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> int actual _ parameter _ count = this . method _ parameters . count ; if ( this . accepts _ log _ event ) </@> 
 <@> this . late _ bound _ method = internal . reflection _ helpers . create _ late _ bound _ method ( method _ info ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> this . late _ bound _ method _ default _ parameters = new object [ formal _ parameters . length - method _ parameters . count ] ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> this . late _ bound _ method _ default _ parameters = null ; </@> <%> <-> this . </%>
<%> <-> this . </%> <@> sb . append ( this . condition _ method _ name ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . accepts _ log _ event ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> if ( this . late _ bound _ method _ default _ parameters ! = null ) </@> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <@> return this . late _ bound _ method ( null , call _ parameters ) ; </@> 
 <@> using n _ log _ config ; using n _ log _ layouts ; </@> <%> <-> this . </%>
<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <@> this . layout = STR ; </@> 
<%> <+> valid _ </%> <%> <-> string name = child _ element . name ; </%> <@> parse _ compound _ target ( type _ name _ to _ default _ target _ parameters , name , child _ element , compound , null ) ) </@> <%> <+> wrapper , child _ element , </%> <%> <-> , name , child _ element , wrapper </%>
<%> <+> valid _ </%> <%> <-> string name = child _ element . name ; </%> <%> <+> compound , child _ element , </%> <%> <-> , name , child _ element , compound </%> <@> parse _ target _ wrapper ( type _ name _ to _ default _ target _ parameters , name , child _ element , wrapper ) ) </@> <%> <*> dictionary < string , i _ logging _ configuration _ element > type _ name _ to _ default -> wrapper </%> <%> <*> parameters -> base wrapper </%> <%> <-> string name , </%> <%> <*> i _ logging -> validated </%> <%> <*> wrapper -> dictionary < string , validated _ configuration _ element > type _ name _ to _ default </%> <%> <*> base wrapper -> parameters </%>
 <@> logger . error ( STR , ex ) ; </@> <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>
<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> <@> logger . log ( log _ level . error , STR , ex ) ; </@> <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>
<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> <@> logger . trace ( STR , ex ) ; </@> <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>
<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> <@> logger . debug ( STR , ex ) ; </@> <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>
<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> <@> logger . info ( STR , ex ) ; </@> <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>
<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> <@> logger . warn ( STR , ex ) ; </@> <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>
<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> <@> logger . error ( STR , ex ) ; </@> <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>
<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> <@> logger . fatal ( STR , ex ) ; </@> 
<%> <+> if ( file ! = null & & file . ends _ with ( STR , string _ comparison . invariant _ culture _ ignore _ case ) ) { return true ; } </%> <@> var class _ names = new hash _ set < string > ( ) ; </@> 
 <@> throw new system . not _ supported _ exception ( STR ) ; </@> <%> <-> system . </%>
<%> <-> system . </%> <@> throw new system . not _ supported _ exception ( STR ) ; </@> 
<%> <*> protected internal -> public </%> <%> <-> if ( ! this . is _ initialized ) { internal _ logger . warn ( STR , this , this . get _ hash _ code ( ) ) ; } else { internal _ logger . trace ( STR , this , this . get _ hash _ code ( ) ) ; } foreach ( layout l in this . all _ layouts ) { l . close ( ) ; } this . is _ initialized = false ; </%> <@> if ( this . is _ initialized ) { this . close ( ) ; } </@> <%> <+> public override string to _ string ( ) { var target _ attribute = ( target _ attribute ) attribute . get _ custom _ attribute ( this . get _ type ( ) , typeof ( target _ attribute ) ) ; if ( target _ attribute ! = null ) { return target _ attribute . name + STR + ( this . name ? ? STR ) + STR ; } return this . get _ type ( ) . name ; </%>
<%> <+> public layout layout { get ; private set ; } </%> <@> return STR + this . layout . text + STR ; }     public override void populate _ layouts ( i _ collection < layout > layouts ) { this . layout . populate _ layouts ( layouts ) ; </@> 
 <@> internal void add _ cached _ layout _ value ( layout layout , string value ) </@> <%> <+> return value ; </%>
<%> <-> _ key </%> <@> builder . append ( context . request . query _ string [ query _ string _ key ] ) ; </@> <%> <-> _ key </%> <%> <-> _ key </%> <%> <*> builder . append ( context . request . cookies [ cookie ] ) ; -> http _ cookie cookie = context . request . cookies [ cookie ] ; </%> <%> <+> if ( cookie ! = null ) </%>
<%> <-> _ key </%> <%> <-> _ key </%> <%> <-> _ key </%> <@> builder . append ( context . request . form [ form _ key ] ) ; </@> <%> <*> builder . append ( context . request . cookies [ cookie ] ) ; -> http _ cookie cookie = context . request . cookies [ cookie ] ; </%> <%> <+> if ( cookie ! = null ) builder . append ( cookie . value ) ; </%>
<%> <*> ) -> & & ! is _ format _ name _ syntax ( queue ) & & ! message _ queue _ proxy . exists ( queue ) ) </%> <%> <*> ! is -> create </%> <%> <*> format -> queue </%> <%> <*> name -> if </%> <%> <*> syntax ( queue -> not _ exists </%> <%> <-> & & ! message _ queue _ proxy . exists ( queue ) ) </%> <@> if ( create _ queue _ if _ not _ exists ) { message _ queue _ proxy . create ( queue ) ; } else { return ; } </@> 
 <@> nlog _ event . message _ ordinal = this . get _ string _ ordinal ( context , string _ table , event _ info . formatted _ message ) ; </@> <%> <-> this . </%> <%> <-> this . </%>
<%> <-> this . </%> <@> nlog _ event . logger _ ordinal = this . get _ string _ ordinal ( context , string _ table , event _ info . logger _ name ) ; </@> <%> <-> this . </%>
<%> <-> this . </%> <%> <-> this . </%> <@> int string _ index = this . get _ string _ ordinal ( context , string _ table , value ) ; </@> <%> <-> } private int get _ string _ ordinal ( n _ log _ events context , dictionary < string , int > string _ table , string value ) { int string _ index ; if ( ! string _ table . try _ get _ value ( value , out string _ index ) ) { string _ index = context . strings . count ; </%>
<%> <*> . to _ lower ( culture _ info . invariant _ culture ) ; -> ; </%> <@> if ( this . is _ target _ element ( name ) ) </@> <%> <*> nlog -> configuration </%> <%> <*> factories . target -> item </%> <%> <+> . targets </%>
 <@> if ( this . is _ target _ element ( name ) ) </@> <%> <*> nlog -> configuration </%> <%> <*> factories . target -> item </%> <%> <+> . targets </%>
 <@> http _ web _ request request = ( http _ web _ request ) web _ request . create ( new uri ( this . url ) ) ; </@> <%> <+> , string _ comparison . ordinal </%>
 <@> builder . append ( this . get _ item ( request . get _ query _ string ( ) , this . query _ string ) ) ; </@> <%> <-> this . </%> <%> <+> , culture _ info . invariant _ culture </%>
<%> <-> this . </%> <@> builder . append ( this . get _ item ( request . get _ form ( ) , this . form ) ) ; </@> <%> <+> , culture _ info . invariant _ culture </%> <%> <-> this . </%>
<%> <-> this . </%> <%> <+> , culture _ info . invariant _ culture </%> <@> builder . append ( this . get _ item ( request . get _ server _ variables ( ) , this . server _ variable ) ) ; </@> 
<%> <-> & & value is string </%> <@> else { new _ value = null ; return false ; } </@> 
<%> <-> if ( sb ! = null ) </%> <%> <-> continue ; } if ( sb = = null ) { sb = new string _ builder ( text . length ) ; for ( int j = 0 ; j < i ; + + j ) sb . append ( text [ j ] ) ; </%> <@> return sb ! = null ? sb . to _ string ( ) : text ; </@> <%> <-> } </%>
 <@> internal _ logging _ config _ test ( log _ level . trace , true , true , log _ level . warn , true , true , STR ) ; </@> <%> <+> , false </%> <%> <+> , false </%>
<%> <+> , true </%> <@> { internal _ logging _ config _ test ( log _ level . error , false , false , log _ level . info , false , false , STR ) ; </@> <%> <+> , false </%>
 <@> return ( async _ continuation cont , t argument ) = > </@> <%> <*> cont -> argument </%> <%> <*> argument -> cont </%>
 <@> var changed = this . configuration _ changed ; </@> <%> <+> protected virtual void on _ configuration _ reloaded ( logging _ configuration _ reloaded _ event _ args e ) { var reloaded = configuration _ reloaded ; if ( reloaded ! = null ) { </%>
<%> <*> ) -> & & layout ! = null ) </%> <@> if ( layout ! = null ) {  layout . initialize ( logging _ configuration ) ; } </@> 
<%> <*> ) -> & & cached _ time . key = = timestamp . date . add _ hours ( timestamp . hour ) ) </%> <@> if ( cached _ time . key = = timestamp . date . add _ hours ( timestamp . hour ) ) { builder . append ( cached _ time . value ) ; return ; } </@> 
<%> <+> this . status _ strip . dock = system . windows . forms . dock _ style . none ; </%> <@> this . status _ strip . location = new system . drawing . point ( 0 , NUM ) ; </@> 
<%> <+> 2 , </%> <%> <-> , 2 </%> <%> <+> NUM , </%> <%> <-> , NUM </%> <%> <+> NUM , </%> <%> <-> , NUM </%> <%> <+> NUM , </%> <%> <-> , NUM </%> <%> <+> NUM , </%> <%> <-> , NUM </%> <@> assert . equal ( log _ level . fatal . compare _ to ( level _ max ) , 0 ) ; assert . equal ( log _ level . off . compare _ to ( level _ max ) , 1 ) ; </@> 
<%> <*> equal -> single </%> <%> <-> 1 , </%> <%> <-> . count </%> <@> assert . equal ( msg . body , STR ) ; </@> 
 <@> assert . equal ( t . name , STR ) ; </@> <%> <*> equal -> single </%> <%> <-> 1 , </%> <%> <-> . count </%> <%> <*> ( typeof ( -> < </%> <%> <*> ) , -> > ( </%>
 <@> assert . equal ( t . name , STR ) ; </@> <%> <*> equal -> single </%> <%> <-> 1 , </%> <%> <-> . count </%> <%> <*> ( typeof ( -> < </%> <%> <*> ) , -> > ( </%>
 <@> assert . equal ( t . name , STR ) ; </@> <%> <*> ( typeof ( -> < </%> <%> <*> ) , -> > ( </%> <%> <*> ( typeof ( -> < </%> <%> <*> ) , -> > ( </%> <%> <*> ( typeof ( -> < </%> <%> <*> ) , -> > ( </%>
 <@> assert . equal ( t . name , STR ) ; </@> <%> <+> STR , </%> <%> <-> , STR </%>
<%> <+> if ( message = = null ) { return ; } </%> <@> if ( message ! = null ) { mq . send ( message ) ; } </@> 
<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> <@> write _ to _ targets ( log _ level . trace , format _ provider , STR , new [ ] { value } ) ; </@> 
<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> <@> write _ to _ targets ( log _ level . debug , format _ provider , STR , new [ ] { value } ) ; </@> 
<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> <@> write _ to _ targets ( log _ level . info , format _ provider , STR , new [ ] { value } ) ; </@> 
<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> <@> write _ to _ targets ( log _ level . warn , format _ provider , STR , new [ ] { value } ) ; </@> 
<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> <@> write _ to _ targets ( log _ level . error , format _ provider , STR , new [ ] { value } ) ; </@> 
<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> <@> write _ to _ targets ( log _ level . fatal , format _ provider , STR , new [ ] { value } ) ; </@> 
<%> <*> should -> is </%> <%> <*> skip -> non </%> <%> <*> type -> user </%> <%> <*> type declaring -> [ not </%> <%> <*> type -> null ] method _ base method </%> <%> <+> [ not _ null ] </%> <%> <*> if ( -> var </%> <%> <*> = null ) return false -> method . declaring _ type </%> <%> <+> var assembly = declaring _ type ! = null ? declaring _ type . assembly : method . module . assembly ; </%> <%> <-> declaring _ type . </%> <@> return logger _ type ! = null & & logger _ type . is _ assignable _ from ( declaring _ type ) ; </@> 
<%> <*> this . watchers . add ( watcher ) ; -> if ( this . watcher _ map . contains _ key ( file _ name ) ) </%> <%> <+> return ; var watcher = new file _ system _ watcher { path = directory , filter = path . get _ file _ name ( file _ name ) , notify _ filter = notify _ filters } ; watcher . created + = this . on _ watcher _ changed ; watcher . changed + = this . on _ watcher _ changed ; watcher . deleted + = this . on _ watcher _ changed ; watcher . enable _ raising _ events = true ; internal _ logger . info ( STR , watcher . path , watcher . filter ) ; this . watcher _ map . add ( file _ name , watcher ) ; </%> <%> <*> lock -> if </%> <%> <*> ) -> . on _ change ! = null ) </%> <@> if ( this . on _ change ! = null ) { this . on _ change ( source , e ) ; } </@> 
<%> <+> public bool async _ flush { get { return async _ flush ? ? true ; } set { async _ flush = value ; } } private bool? async _ flush ; </%> <@> this . name = name ; </@> <%> <*> this . wrapped _ target = wrapped _ target ; -> wrapped _ target = wrapped _ target ; </%> <%> <+> } protected override void initialize _ target ( ) { base . initialize _ target ( ) ; if ( ! async _ flush . has _ value & & wrapped _ target is buffering _ target _ wrapper ) </%>
<%> <-> this . </%> <%> <*> this . wrapped _ target = wrapped _ target ; -> wrapped _ target = wrapped _ target ; </%> <%> <+> } protected override void initialize _ target ( ) { base . initialize _ target ( ) ; if ( ! async _ flush . has _ value & & wrapped _ target is buffering _ target _ wrapper ) { async _ flush = false ; } </%> <@> if ( this . condition = = null | | this . condition . evaluate ( log _ event . log _ event ) . equals ( true ) ) </@> <%> <*> async _ continuation current _ continuation = log _ event . continuation ; async _ continuation wrapped _ continuation = ( ex ) = > -> if ( async _ flush ) </%> <%> <+> async _ continuation current _ continuation = log _ event . continuation ; async _ continuation wrapped _ continuation = ( ex ) = > { </%> <%> <-> this . </%>
<%> <+> dir = path . get _ full _ path ( dir ) ; </%> <@> dir = path . get _ directory _ name ( root _ dir ) ; </@> 
 <@> using system _ windows ; </@> <%> <-> message _ box . show ( message , caption , message _ box _ button . ok ) ; </%>
<%> <-> using system _ windows ; </%> <@> message _ box . show ( message , caption , message _ box _ button . ok ) ; </@> 
 <@> public static bool equals ( string first _ value , string second _ value ) </@> <%> <-> bool ic = false ; </%>
<%> <-> public static bool equals ( string first _ value , string second _ value ) </%> <@> bool ic = false ; </@> <%> <-> public static bool contains ( string haystack , string needle ) </%>
<%> <-> bool ic = false ; </%> <@> public static bool contains ( string haystack , string needle ) </@> <%> <-> bool ic = true ; </%>
<%> <-> public static bool contains ( string haystack , string needle ) </%> <@> bool ic = true ; </@> <%> <-> public static bool starts _ with ( string haystack , string needle ) </%>
<%> <-> bool ic = true ; </%> <@> public static bool starts _ with ( string haystack , string needle ) </@> <%> <-> bool ic = true ; </%>
<%> <-> public static bool starts _ with ( string haystack , string needle ) </%> <@> bool ic = true ; </@> <%> <-> public static bool ends _ with ( string haystack , string needle ) </%>
<%> <-> bool ic = true ; </%> <@> public static bool ends _ with ( string haystack , string needle ) </@> <%> <-> bool ic = true ; </%>
<%> <-> public static bool ends _ with ( string haystack , string needle ) </%> <@> bool ic = true ; </@> 
<%> <+> this . message = message ; this . parameters = parameters ; this . format _ provider = format _ provider ; this . exception = exception ; </%> <%> <+> if ( need _ to _ preformat _ message ( parameters ) ) { this . calc _ formatted _ message ( ) ; </%> <%> <+> } public int sequence _ id { get ; private set ; } </%> <@> get { return this . stack _ trace ! = null ; } </@> <%> <-> virtual </%> <%> <*> { -> { get ; set ; } </%> <%> <-> get { return null ; } </%>
<%> <+> return this . logger _ name . substring ( last _ dot + 1 ) ; } return this . logger _ name ; } } public string message { get ; set ; } public object [ ] parameters { get ; set ; } public i _ format _ provider format _ provider { get ; set ; } </%> <%> <*> public abstract string formatted _ message { get ; } -> public string formatted _ message </%> <%> <+> { get { if ( this . formatted _ message = = null ) { this . calc _ formatted _ message ( ) ; } return this . formatted _ message ; } } </%> <@> public i _ dictionary < string , object > context </@> <%> <+> hybrid _ </%> <%> <-> < string , object > </%>
 <@> try { async _ log _ event _ info [ ] log _ events _ array = optimize _ buffer _ reuse ? null : log _ events as async _ log _ event _ info [ ] ; if ( ! optimize _ buffer _ reuse & & log _ events _ array ! = null ) { </@> <%> <-> } } catch ( exception exception ) { if ( exception . must _ be _ rethrown ( ) ) </%>
<%> <*> if ( ex . target _ site ! = null ) { sb . append ( ex . target _ site . to _ string ( ) ) ; } -> sb . append ( ex . target _ site ? . to _ string ( ) ) ; </%> <@> if ( ! string . is _ null _ or _ empty ( ex . stack _ trace ) ) sb . append ( ex . stack _ trace ) ; </@> 
 <@> int expected _ growing _ number = 0 ;  expected _ growing _ number = logged _ event _ count - queue _ limit ;  expected _ growing _ number = NUM ; </@> <%> <-> _ for _ event _ tests </%>
<%> <*> string -> performance _ </%> <%> <+> counter _ type </%> <@> get { return counter _ type . to _ string ( ) ; } set { counter _ type = ( performance _ counter _ type ) enum . parse ( typeof ( performance _ counter _ type ) , value , false ) ; } </@> 
<%> <-> public bool is _ token ( object [ ] tokens ) { for ( int i = 0 ; i < tokens . length ; + + i ) { if ( tokens [ i ] is string ) { if ( this . is _ keyword ( ( string ) tokens [ i ] ) ) { return true ; } } else { if ( this . token _ type = = ( condition _ token _ type ) tokens [ i ] ) { return true ; } } } return false ; } public bool is _ punctuation ( ) { return this . token _ type > = condition _ token _ type . first _ punct & & this . token _ type < condition _ token _ type . last _ punct ; } </%> <@> if ( this . ignore _ white _ space ) { this . skip _ whitespace ( ) ; } </@> <%> <-> if ( ! this . ignore _ white _ space & & char . is _ white _ space ( ch ) ) { </%>
<%> <-> using system _ configuration ; </%> <@> using n _ log _ internal ; using n _ log _ time ; </@> <%> <+> readonly </%>
 <@> builder . append ( level . to _ string ( ) ) ; </@> <%> <-> . to _ string ( ) </%> <%> <*> string -> var </%>
<%> <-> . to _ string ( ) </%> <@> builder . append ( ex . to _ string ( ) ) ; } string msg = builder . to _ string ( ) ; </@> 
<%> <-> if ( ! string . is _ null _ or _ empty ( filter _ count _ message _ append _ format ) ) { </%> <%> <*> if ( -> if ( ! string . is _ null _ or _ empty ( filter _ count _ message _ append _ format ) & & </%> <%> <-> } </%> <@> else { filter _ info . refresh ( log _ event . level , log _ event . time _ stamp , filter _ info . filter _ count + 1 ) ; return action ; } </@> <%> <+> private </%>
 <@> else { return ( log _ event _ time - last _ filter _ time ) . total _ seconds > timeout _ seconds & & has _ expired ( log _ event _ time , timeout _ seconds * 2 ) ; } </@> <%> <*> public -> private </%> <%> <-> private </%> <%> <*> public -> private </%> <%> <-> private </%>
<%> <-> else { </%> <%> <-> } </%> <@> public date _ time last _ log _ time { get ; private set ; } public date _ time last _ filter _ time { get ; private set ; } </@> <%> <+> private </%> <%> <*> public -> private </%>
<%> <-> using system ; using system _ collections ; using system _ collections _ generic ; using system _ reflection ; using n _ log _ config ; </%> <%> <+> using system _ collections ; using system _ collections _ generic ; using system _ reflection ; using n _ log _ common ; using n _ log _ config ; </%> <@> internal class object _ graph _ scanner < t > where t : class </@> <%> <*> private readonly dictionary < object , bool > visited _ objects = new dictionary < object , bool > ( ) ; private readonly queue < in _ log _ configuration _ item > queue = new queue < in _ log _ configuration _ item > ( ) ; public t [ ] scan ( ) -> public static t [ ] find _ reachable _ objects < t > ( params in _ log _ configuration _ item [ ] root _ objects ) </%> <%> <+> where t : class </%> <%> <+> internal _ logger . trace ( STR , typeof ( t ) ) ; </%> <%> <-> while ( this . queue . count > 0 ) </%>
<%> <*> wrapper _ layout _ renderer _ base -> var </%> <%> <-> lr . </%> <%> <+> lr </%> <@> new _ renderer . inner = new simple _ layout ( new layout _ renderer [ ] { lr } , string . empty ) ; </@> <%> <+> private static bool can _ be _ converted _ to _ literal ( layout _ renderer lr ) { foreach ( i _ renderable renderable in object _ graph _ scanner . find _ reachable _ objects < i _ renderable > ( lr ) ) { if ( renderable . get _ type ( ) = = typeof ( simple _ layout ) ) { </%>
 <@> else { return - 1 ; } </@> <%> <-> else { </%>
<%> <-> else { </%> <%> <-> } </%> <@> else { return - 1 ; } </@> 
 <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> 
<%> <+> using system _ component _ model ; </%> <%> <-> not _ supported _ runtime _ framework _ runtime _ framework _ dot _ net _ compact _ framework </%> <@> system _ component _ model _ default _ value </@> 
<%> <+> i _ collection < </%> <%> <*> _ collection -> > </%> <@> system _ component _ model _ default _ value _ auto </@> 
 <@> public i _ layout layout </@> <%> <-> i _ </%>
<%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> _ layout . text </%> <%> <-> _ layout </%> <%> <-> new layout ( </%> <%> <-> ) </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> _ layout . text </%> <%> <-> _ layout </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ true </@> 
 <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> <%> <*> string -> encoding </%> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%>
<%> <-> system _ component _ model _ </%> <@> public string encoding { get { return encoding . web _ name ; } set { encoding = system . text . encoding . get _ encoding ( value ) ; } </@> <%> <-> system _ component _ model _ </%> <%> <-> system _ component _ model _ </%>
<%> <*> string -> encoding </%> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> 
 <@> accepts _ layout public string archive _ file _ name { get { if ( auto _ archive _ file _ name = = null ) return null ; return auto _ archive _ file _ name . text ; } set { auto _ archive _ file _ name = new layout ( value ) ; } </@> <%> <-> system _ component _ model _ </%> <%> <-> system _ component _ model _ </%>
<%> <*> accepts _ layout public string archive _ file _ name { get -> public layout archive _ file _ name </%> <%> <*> if ( -> get { return </%> <%> <*> = = null ) return null -> ; } set { auto _ archive _ file _ name = value </%> <%> <*> return auto _ archive _ file _ name . text ; -> } </%> <%> <-> } set { auto _ archive _ file _ name = new layout ( value ) ; } </%> <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <*> if ( -> get { return </%> <%> <*> = = null ) return null -> ; } set { auto _ archive _ file _ name = value </%> <%> <*> return auto _ archive _ file _ name . text ; -> } </%> <%> <-> } set { auto _ archive _ file _ name = new layout ( value ) ; } </%> <%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> 
 <@> public string encoding </@> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%>
<%> <*> string -> encoding </%> <@> get { return encoding . web _ name ; } set { encoding = system . text . encoding . get _ encoding ( value ) ; } </@> 
<%> <+> using system _ component _ model ; using n _ log _ layout _ renderers ; </%> <%> <-> supported _ runtime _ o _ runtime _ o _ windows supported _ runtime _ o _ runtime _ o _ windows _ n </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ true </@> 
<%> <+> using system _ component _ model ; </%> <@> system _ component _ model _ default _ value _ false </@> 
 <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> 
 <@> system _ component _ model _ default _ value _ empty </@> <%> <*> system _ component _ model _ default _ value _ empty supported _ runtime _ framework _ runtime _ framework _ dot _ net _ framework _ min _ runtime _ version -> default _ value _ empty </%>
 <@> system _ component _ model _ default _ value _ false </@> <%> <-> compiled _ </%>
<%> <-> not _ supported _ runtime _ framework _ runtime _ framework _ dot _ net _ compact _ framework </%> <@> system _ component _ model _ default _ value _ flat </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> 
 <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> 
<%> <+> using system _ collections _ generic ; using n _ log _ layouts ; using n _ log _ targets ; </%> <%> <-> supported _ runtime _ framework _ runtime _ framework _ dot _ net _ framework supported _ runtime _ framework _ runtime _ framework _ dot _ net _ compact _ framework _ min _ runtime _ version </%> <@> private layout label = new layout ( STR ) ; </@> <%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> . text </%>
<%> <-> new layout ( </%> <%> <-> ) </%> <@> accepts _ layout public string queue { get { return queue . text ; } set { queue = new layout ( value ) ; } </@> <%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%>
<%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> accepts _ layout </%> <@> public string label { get { return label . text ; } set { label = new layout ( value ) ; } </@> <%> <-> system _ component _ model _ </%> <%> <*> string -> encoding </%> <%> <-> . web _ name </%>
<%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <@> system _ component _ model _ default _ value _ false </@> <%> <*> string -> encoding </%> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%>
<%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%> <@> public string encoding { get { return encoding . web _ name ; } set { encoding = system . text . encoding . get _ encoding ( value ) ; } </@> <%> <-> system _ component _ model _ </%> <%> <-> system _ component _ model _ </%>
<%> <*> string -> encoding </%> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%> <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> <%> <*> layout -> i </%> <%> <+> < layout > </%>
<%> <+> i _ collection < </%> <%> <*> _ collection -> > </%> <%> <+> list < </%> <%> <*> _ collection -> > </%> <@> system _ component _ model _ default _ value _ true </@> 
<%> <+> using system _ collections _ generic ; using n _ log _ layouts ; </%> <%> <+> simple _ </%> <%> <*> string -> simple _ layout </%> <@> layout = new layout ( layout ) ; </@> <%> <*> layout -> i </%> <%> <+> < layout > </%>
<%> <*> compiledlayout -> layout </%> <@> accepts _ layout public string layout </@> <%> <*> get { return compiledlayout . text ; } set { compiledlayout = new layout ( value ) ; } } public layout compiled _ layout { get { return compiledlayout ; } set { compiledlayout = value ; } -> get { return layout ; } </%> <%> <+> set { layout = value ; } </%>
<%> <+> using system _ component _ model ; using n _ log _ config ; </%> <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> 
<%> <-> i _ </%> <%> <-> , i _ layout _ with _ header _ and _ footer </%> <%> <-> i _ </%> <%> <-> i _ </%> <%> <-> i _ </%> <@> public i _ layout layout </@> <%> <-> i _ </%> <%> <-> i _ </%>
 <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ true </@> <%> <+> i _ collection < </%> <%> <*> _ collection -> > </%>
<%> <-> not _ supported _ runtime _ framework _ runtime _ framework _ dot _ net _ compact _ framework </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ true </@> 
 <@> system _ component _ model _ default _ value </@> <%> <-> accepts _ layout </%>
<%> <-> system _ component _ model _ </%> <@> accepts _ layout public string event _ id { get { return convert . to _ string ( event _ id ) ; } set { event _ id = new layout ( value ) ; } </@> <%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> convert . to _ string ( </%> <%> <-> ) </%> <%> <-> new layout ( </%> <%> <-> ) </%>
<%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> convert . to _ string ( </%> <%> <-> ) </%> <%> <-> new layout ( </%> <%> <-> ) </%> <@> accepts _ layout public string category { get { return convert . to _ string ( category ) ; } set { category = new layout ( value ) ; } </@> 
<%> <-> accepts _ layout </%> <@> public string layout </@> <%> <*> get { return compiledlayout . text ; } set { compiledlayout = new layout ( value ) ; } } public layout compiled _ layout { get { return compiledlayout ; } set { compiledlayout = value ; } -> get { return layout ; } </%> <%> <+> set { layout = value ; } </%>
<%> <+> using n _ log _ layouts ; </%> <@> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , base _ dir ) ; </@> <%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ; -> assert _ layout _ renderer _ output ( STR , path . combine ( base _ dir , STR ) ) ; </%>
<%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , base _ dir ) ; -> assert _ layout _ renderer _ output ( STR , base _ dir ) ; </%> <@> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ; </@> <%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ; -> assert _ layout _ renderer _ output ( STR , path . combine ( base _ dir , STR ) ) ; </%>
<%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , base _ dir ) ; -> assert _ layout _ renderer _ output ( STR , base _ dir ) ; </%> <%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ; -> assert _ layout _ renderer _ output ( STR , path . combine ( base _ dir , STR ) ) ; </%> <@> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ; </@> 
 <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> 
 <@> system _ component _ model _ default _ value _ discard </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> 
<%> <+> using system _ component _ model ; </%> <@> system _ component _ model _ default _ value _ false </@> 
 <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> 
<%> <+> using n _ log _ layouts ; </%> <@> layout l = new layout ( STR ) ; </@> <%> <+> unformatted _ </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <+> unformatted _ </%>
<%> <*> accepts _ layout public string caption -> public layout caption </%> <@> get { return caption . text ; } set { caption = new layout ( value ) ; } </@> <%> <*> layout -> i </%> <%> <+> < layout > </%> <%> <+> if ( caption ! = null ) </%> <%> <-> compiled _ </%>
<%> <+> simple _ </%> <%> <-> new layout ( </%> <%> <-> ) </%> <@> layout l = new layout ( STR ) ; </@> <%> <+> simple _ </%> <%> <-> new layout ( </%> <%> <-> ) </%>
 <@> accepts _ layout public string layout { get { return compiledlayout . text ; } set { compiledlayout = new layout ( value ) ; } }    public layout compiled _ layout </@> <%> <-> system _ component _ model _ </%>
<%> <-> accepts _ layout public string layout { get { return compiledlayout . text ; } set { compiledlayout = new layout ( value ) ; } } </%> <%> <*> public layout compiled _ layout -> public layout layout </%> <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> 
<%> <-> accepts _ condition </%> <%> <-> string </%> <%> <+> _ expression condition </%> <%> <*> get { if ( condition = = null ) return null ; else return condition . to _ string ( ) ; } set { if ( value ! = null ) condition = condition _ parser . parse _ expression ( value ) ; else condition = null ; } -> get { return condition ; } </%> <%> <+> set { condition = value ; } </%> <@> system _ component _ model _ default _ value _ no _ change </@> <%> <-> system _ component _ model _ </%>
<%> <*> get { if ( condition = = null ) return null ; else return condition . to _ string ( ) ; } set { if ( value ! = null ) condition = condition _ parser . parse _ expression ( value ) ; else condition = null ; } -> get { return condition ; } </%> <%> <+> set { condition = value ; } </%> <%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ no _ change </@> <%> <*> string -> condition _ expression </%>
 <@> private layout db _ host _ layout = new layout ( STR ) ; </@> <%> <-> compiled _ </%> <%> <+> i _ collection < </%> <%> <*> _ collection -> > </%> <%> <+> list < </%> <%> <*> _ collection -> > </%>
<%> <-> compiled _ </%> <%> <+> i _ collection < </%> <%> <*> _ collection -> > </%> <%> <+> list < </%> <%> <*> _ collection -> > </%> <@> system _ component _ model _ default _ value _ sqlserver </@> 
 <@> accepts _ layout public string connection _ string { get { return convert . to _ string ( connection _ string ) ; } set { connection _ string = new layout ( value ) ; } </@> <%> <-> system _ component _ model _ </%> <%> <-> system _ component _ model _ </%>
<%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> convert . to _ string ( </%> <%> <-> ) </%> <%> <-> new layout ( </%> <%> <-> ) </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> convert . to _ string ( </%> <%> <-> ) </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> <%> <-> accepts _ layout public string db _ host </%>
<%> <*> accepts _ layout public string db _ host -> public layout db _ host </%> <@> set { db _ host _ layout = new layout ( value ) ; } </@> <%> <*> accepts _ layout public string db _ user _ name -> public layout db _ user _ name </%>
<%> <-> new layout ( </%> <%> <-> ) </%> <%> <*> accepts _ layout public string db _ user _ name -> public layout db _ user _ name </%> <@> set { db _ user _ name _ layout = new layout ( value ) ; } </@> <%> <-> accepts _ layout </%>
<%> <-> accepts _ layout </%> <@> set { db _ password _ layout = new layout ( value ) ; } </@> <%> <-> accepts _ layout </%>
<%> <-> accepts _ layout </%> <@> set { db _ database _ layout = new layout ( value ) ; } </@> <%> <-> accepts _ layout </%>
<%> <+> using system _ component _ model ; using n _ log _ config ; </%> <@> system _ component _ model _ default _ value _ false </@> 
 <@> system _ component _ model _ default _ value _ false </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> 
 <@> system _ component _ model _ default _ value _ no _ change </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ no _ change </@> 
 <@> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , system . environment . get _ environment _ variable ( STR ) ) ; </@> <%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , system . environment . get _ environment _ variable ( STR ) ) ; -> assert _ layout _ renderer _ output ( STR , system . environment . get _ environment _ variable ( STR ) ) ; </%>
<%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , system . environment . get _ environment _ variable ( STR ) ) ; -> assert _ layout _ renderer _ output ( STR , system . environment . get _ environment _ variable ( STR ) ) ; </%> <@> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , system . environment . get _ environment _ variable ( STR ) ) ; </@> 
 <@> system _ component _ model _ default _ value _ false </@> <%> <-> compiled _ </%> <%> <+> , culture _ info . invariant _ culture </%>
 <@> private layout subject = new layout ( STR ) ; </@> <%> <*> string -> layout </%> <%> <*> string -> layout </%> <%> <*> string -> layout </%>
<%> <*> string -> layout </%> <%> <*> string -> layout </%> <@> public string from { get { return from . text ; } set { from = new layout ( value ) ; } </@> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%>
<%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <@> public string to { get { return to . text ; } set { to = new layout ( value ) ; } </@> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%>
<%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <@> public string cc { get { return cc . text ; } set { cc = new layout ( value ) ; } </@> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%>
<%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <@> public string bcc { get { return bcc . text ; } set { bcc = new layout ( value ) ; } </@> <%> <-> system _ component _ model _ </%> <%> <*> string -> layout </%> <%> <-> . text </%>
<%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <@> system _ component _ model _ default _ value _ message _ from _ n _ log _ on _ machinename public string subject { get { return subject . text ; } set { subject = new layout ( value ) ; } </@> <%> <-> system _ component _ model _ </%> <%> <*> string -> layout </%> <%> <-> system _ component _ model _ </%> <%> <*> string -> encoding </%>
<%> <-> system _ component _ model _ </%> <%> <*> string -> encoding </%> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%> <@> system _ component _ model _ default _ value _ false </@> <%> <*> string -> layout </%>
<%> <*> string -> layout </%> <@> system _ component _ model _ default _ value _ none </@> <%> <*> set { assert _ fields _ support ( STR ) ; smtp _ authentication = value ; } -> set { smtp _ authentication = value ; } </%>
<%> <-> assert _ fields _ support ( STR ) ; </%> <%> <*> smtp _ username = value ; } -> set { smtp _ username = value ; } </%> <%> <*> string -> layout </%> <%> <-> set { assert _ fields _ support ( STR ) ; </%> <%> <*> smtp _ password = value ; } -> set { smtp _ password = value ; } </%> <@> system _ component _ model _ default _ value </@> <%> <*> set { if ( value ! = NUM ) assert _ fields _ support ( STR ) ; smtp _ port = value ; } -> set { smtp _ port = value ; } </%>
<%> <+> using system _ component _ model ; using n _ log _ config ; </%> <@> system _ component _ model _ default _ value _ false </@> <%> <-> compiled _ </%>
 <@> public string layout </@> <%> <*> get { return compiledlayout . text ; } set { compiledlayout = new layout ( value ) ; } } public layout compiled _ layout { get { return compiledlayout ; } set { compiledlayout = value ; } -> get { return layout ; } </%> <%> <+> set { layout = value ; } </%>
<%> <-> system _ component _ model _ </%> <%> <*> private -> public </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ true </@> 
<%> <+> using system _ component _ model ; using n _ log _ config ; </%> <@> system _ component _ model _ default _ value _ false </@> 
<%> <*> string -> layout </%> <%> <-> . text </%> <@> address _ layout = new layout ( value ) ; </@> <%> <-> public layout address _ layout { get { return address _ layout ; } </%>
<%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> public layout address _ layout { get { return address _ layout ; } set { address _ layout = value ; } } </%> <@> system _ component _ model _ default _ value _ true </@> <%> <-> system _ component _ model _ </%>
<%> <-> public layout address _ layout { get { return address _ layout ; } set { address _ layout = value ; } } system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> 
 <@> system _ component _ model _ default _ value _ false </@> <%> <+> i _ collection < </%> <%> <*> _ collection -> > </%>
<%> <*> accepts _ condition public string exists -> public condition _ expression exists </%> <@> get { return exists . to _ string ( ) ; } set { exists = condition _ parser . parse _ expression ( value ) ; } </@> <%> <*> accepts _ condition public string filter { get { return filter . to _ string ( ) ; } set { filter = condition _ parser . parse _ expression ( value ) ; } } public condition _ expression filter _ condition -> public condition _ expression filter </%>
<%> <*> accepts _ condition public string exists -> public condition _ expression exists </%> <%> <-> . to _ string ( ) </%> <%> <-> condition _ parser . parse _ expression ( </%> <%> <-> ) </%> <@> accepts _ condition public string filter { get { return filter . to _ string ( ) ; } set { filter = condition _ parser . parse _ expression ( value ) ; } }    public condition _ expression filter _ condition </@> <%> <-> public condition _ expression exists _ condition { get { return exists ; } set { exists = value ; } } </%>
 <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value </@> 
 <@> system _ component _ model _ default _ value </@> <%> <-> system _ component _ model _ </%>
<%> <-> system _ component _ model _ </%> <@> system _ component _ model _ default _ value _ false </@> 
<%> <*> STR ) -> null | | s . length = = 0 ) </%> <@> else return s ; </@> 
<%> <+> using system _ component _ model ; using n _ log _ layouts ; namespace n _ log _ targets </%> <%> <-> i _ </%> <%> <*> compiledlayout -> layout </%> <@> accepts _ layout system _ component _ model _ default _ value _ longdate _ level _ uppercase _ true _ logger _ message public virtual string layout </@> <%> <*> get { return convert . to _ string ( compiledlayout ) ; } set { compiledlayout = new layout ( value ) ; } } public virtual i _ layout compiled _ layout { get { return compiledlayout ; } set { compiledlayout = value ; } -> get { return layout ; } </%> <%> <+> set { layout = value ; } </%>
 <@> system _ component _ model _ default _ value _ empty </@> <%> <*> system _ component _ model _ default _ value _ empty supported _ runtime _ framework _ runtime _ framework _ dot _ net _ framework _ min _ runtime _ version -> default _ value _ empty </%>
<%> <+> if ( x > 0 & & ! negative | | x > 1 ) return negative ? - i : i ; </%> <@> else { break ; } } has _ digits = true ; </@> <%> <-> if ( ! has _ digits ) </%> <%> <-> return negative ? - i : i ; </%>
<%> <-> else { </%> <%> <-> } has _ digits = true ; </%> <@> if ( ! has _ digits ) throw new template _ parser _ exception ( STR , position , template ) ; return negative ? - i : i ; </@> 
<%> <-> private object lock _ object = new object ( ) ; </%> <@> lock ( this . lock _ object ) { this . logs . add ( msg ) ; } </@> 
 <@> lock ( this ) { if ( this . sender ! = null ) { this . sender . close ( ) ; } </@> <%> <*> lock -> if </%> <%> <+> . keep _ connection </%>
<%> <+> fast _ </%> <%> <-> log _ event , </%> <%> <+> fast _ </%> <%> <-> log _ event , </%> <%> <+> ( get _ or _ allocate _ ordinal </%> <%> <+> ) </%> <@> foreach ( log _ event ev in filtered _ events . keys ) </@> <%> <-> ev , </%>
<%> <-> string key = file _ name ; string key = path . get _ full _ path ( file _ name ) ; this . visited _ file [ key ] = true ; </%> <@> this . parse _ top _ level ( content , path . get _ directory _ name ( file _ name ) ) ; </@> 
 <@> throw new n _ log _ runtime _ exception ( string . format ( required _ property _ is _ empty _ format , STR ) ) ; </@> <%> <-> ( string . format </%> <%> <-> ) </%>
<%> <-> ( string . format </%> <%> <-> ) </%> <@> throw new n _ log _ runtime _ exception ( string . format ( required _ property _ is _ empty _ format , STR ) ) ; </@> 
<%> <*> lock ( this ) -> var current _ timer = interlocked . exchange ( ref timeout _ timer , null ) ; </%> <%> <+> if ( current _ timer ! = null ) </%> <@> var current _ timer = timeout _ timer ; if ( current _ timer ! = null ) { timeout _ timer = null ; current _ timer . wait _ for _ dispose ( time _ span . zero ) ; } </@> 
 <@> public class trace _ appender : n _ log . appender </@> <%> <*> public -> protected internal </%>
 <@> public class memory _ appender : n _ log . appender </@> <%> <*> public -> protected internal </%>
 <@> public class console _ appender : n _ log . appender </@> <%> <*> public -> protected internal </%>
<%> <+> using n _ log _ appenders ; </%> <@> public class asp _ net _ trace _ appender : n _ log . appender </@> <%> <*> public -> protected </%>
 <@> using n _ log _ layout _ appenders ; namespace n _ log </@> <%> <*> public -> protected internal </%> <%> <*> public -> protected internal </%> <%> <*> public -> protected internal </%>
 <@> public class null _ appender : n _ log . appender </@> <%> <*> public -> protected internal </%>
 <@> return new property _ value ( fast _ lookup [ index ] . name , fast _ lookup [ index ] . value _ lookup ( owner , null ) , fast _ lookup [ index ] . type _ code ) ; </@> <%> <*> properties [ index ] . name -> owner </%> <%> <-> . get _ value ( owner , null ) , type _ code . object </%>
<%> <-> ( fast _ lookup [ index ] . name , fast _ lookup [ index ] . value _ lookup </%> <%> <-> , null ) </%> <%> <-> . type _ code </%> <@> return new property _ value ( properties [ index ] . name , properties [ index ] . get _ value ( owner , null ) , type _ code . object ) ; </@> 
<%> <*> var linked _ list _ node = this . open _ network _ senders . add _ last ( sender ) ; -> linked _ list _ node = this . open _ network _ senders . add _ last ( sender ) ; </%> <%> <+> } </%> <%> <+> { try _ remove ( this . open _ network _ senders , linked _ list _ node ) ; if ( this . on _ connection _ overflow = = network _ target _ connections _ overflow _ action . block ) </%> <@> try _ remove ( this . open _ network _ senders , linked _ list _ node ) ; if ( this . on _ connection _ overflow = = network _ target _ connections _ overflow _ action . block ) { system . threading . monitor . pulse _ all ( this . open _ network _ senders ) ; } </@> <%> <-> if ( ex ! = null ) </%> <%> <*> { -> } </%> <%> <*> internal _ logger . error ( STR , ex ) ; -> if ( ex ! = null ) </%> <%> <*> } -> { </%> <%> <*> sender . close ( ex = > { -> internal _ logger . error ( STR , ex ) ; </%> <%> <-> ) ; </%> <%> <*> log _ event -> sender </%> <%> <*> continuation -> close </%> <%> <+> = > { } </%> <%> <*> } -> log _ event . continuation ( ex </%> <%> <+> ) ; </%>
 <@> this . targets [ name . to _ lower ( culture _ info . invariant _ culture ) ] = target ; </@> <%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%> <%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%>
<%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%> <@> this . targets . remove ( name . to _ lower ( culture _ info . invariant _ culture ) ) ; </@> <%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%>
<%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%> <%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%> <@> if ( ! this . targets . try _ get _ value ( name . to _ lower ( culture _ info . invariant _ culture ) , out value ) ) </@> 
 <@> return cache . try _ get _ value ( property _ name . to _ lower ( ) , out result ) ; </@> <%> <+> string _ comparer . ordinal _ ignore _ case </%>
<%> <+> string _ comparer . ordinal _ ignore _ case </%> <@> ret _ val [ attributes [ 0 ] . element _ name . to _ lower ( ) ] = prop _ info ; </@> <%> <-> . to _ lower ( ) </%>
<%> <*> if ( this . ignore _ case ) -> string _ comparison comparison = this . ignore _ case </%> <%> <+> ? string _ comparison . ordinal _ ignore _ case : string _ comparison . ordinal ; string result = this . layout . get _ formatted _ message ( log _ event ) ; if ( result . index _ of ( this . substring , comparison ) < 0 ) </%> <%> <-> if ( this . layout . get _ formatted _ message ( log _ event ) . to _ lower ( ) . index _ of ( this . substring . to _ lower ( ) ) < 0 ) { </%> <%> <-> } else { return filter _ result . neutral ; } </%> <@> else { if ( this . layout . get _ formatted _ message ( log _ event ) . index _ of ( this . substring ) < 0 ) { return this . action ; } else { return filter _ result . neutral ; } } </@> 
<%> <+> culture _ info . invariant _ culture </%> <@> data _ targets . add ( new exception _ data _ target ( this . append _ message ) ) ; </@> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%>
<%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <@> data _ targets . add ( new exception _ data _ target ( this . append _ stack _ trace ) ) ; </@> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%>
<%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <@> data _ targets . add ( new exception _ data _ target ( this . append _ method ) ) ; </@> 
<%> <*> if ( this . layout . get _ formatted _ message ( log _ event ) . index _ of ( this . substring , this . ignore _ case ? string _ comparison . ordinal _ ignore _ case : string _ comparison . ordinal ) > = 0 ) -> string _ comparison comparison _ type = this . ignore _ case </%> <%> <+> ? string _ comparison . ordinal _ ignore _ case : string _ comparison . ordinal ; if ( this . layout . get _ formatted _ message ( log _ event ) . index _ of ( this . substring , comparison _ type ) > = 0 ) </%> <@> else { return filter _ result . neutral ; } </@> 
<%> <*> if ( 0 = -> string _ comparison comparison _ type </%> <%> <*> string -> this </%> <%> <*> compare ( this . layout -> ignore _ case ? string _ comparison </%> <%> <*> get -> invariant </%> <%> <*> formatted -> culture </%> <%> <*> message ( log -> ignore </%> <%> <*> event ) , this -> case : string _ comparison </%> <%> <*> compare -> invariant </%> <%> <*> to , -> culture ; </%> <%> <+> if ( </%> <%> <*> ignore _ case ? string -> layout . get _ formatted </%> <%> <*> comparison . invariant -> message ( log </%> <%> <*> culture _ ignore _ case : string -> event ) . equals ( this . compare </%> <%> <*> comparison . invariant -> to , comparison </%> <%> <*> culture -> type </%> <@> else { return filter _ result . neutral ; } </@> 
<%> <*> info -> characteristics </%> <%> <-> internal . </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <@> var fi = new system . io . file _ info ( file _ path ) ; </@> <%> <*> info -> characteristics </%> <%> <-> internal . </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <-> internal . </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%>
<%> <+> using system _ io ; </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <@> var fi = new system . io . file _ info ( file _ name ) ; </@> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%>
 <@> writer . write _ attribute _ string ( remove _ invalid _ xml _ chars ( prefix ) , remove _ invalid _ xml _ chars ( local _ name ) , remove _ invalid _ xml _ chars ( ns ) , remove _ invalid _ xml _ chars ( value ) ) ; </@> <%> <-> ( remove _ invalid _ xml _ chars </%> <%> <-> ) </%> <%> <*> writer . write _ element _ string ( remove _ invalid _ xml _ chars ( prefix ) , remove _ invalid _ xml _ chars ( local _ name ) , remove _ invalid _ xml _ chars ( ns ) , remove _ invalid _ xml _ chars ( value ) ) ; -> writer . write _ element _ string ( prefix , local _ name , ns , remove _ invalid _ xml _ chars ( value ) ) ; </%>
<%> <-> ( remove _ invalid _ xml _ chars </%> <%> <-> ) </%> <%> <-> remove _ invalid _ xml _ chars ( </%> <%> <-> ) </%> <%> <-> remove _ invalid _ xml _ chars ( </%> <%> <-> ) </%> <@> writer . write _ attribute _ string ( remove _ invalid _ xml _ chars ( local _ name ) , remove _ invalid _ xml _ chars ( value ) ) ; </@> <%> <*> writer . write _ element _ string ( remove _ invalid _ xml _ chars ( prefix ) , remove _ invalid _ xml _ chars ( local _ name ) , remove _ invalid _ xml _ chars ( ns ) , remove _ invalid _ xml _ chars ( value ) ) ; -> writer . write _ element _ string ( prefix , local _ name , ns , remove _ invalid _ xml _ chars ( value ) ) ; </%> <%> <*> text -> value </%> <%> <*> text -> value </%>
<%> <-> ( remove _ invalid _ xml _ chars </%> <%> <-> ) </%> <%> <-> remove _ invalid _ xml _ chars ( </%> <%> <-> ) </%> <%> <-> remove _ invalid _ xml _ chars ( </%> <%> <-> ) </%> <%> <-> ( remove _ invalid _ xml _ chars </%> <%> <-> ) </%> <@> writer . write _ element _ string ( remove _ invalid _ xml _ chars ( prefix ) , remove _ invalid _ xml _ chars ( local _ name ) , remove _ invalid _ xml _ chars ( ns ) , remove _ invalid _ xml _ chars ( value ) ) ; </@> <%> <*> text -> value </%> <%> <*> text -> value </%>
 <@> builder . append ( cached _ date _ formatted . formatted _ date ) ; return ; </@> <%> <*> builder . append ( -> return </%> <%> <-> ) </%>
<%> <*> public garbage _ collector _ property property { get ; set ; } -> public garbage _ collector _ property property { get ; set ; } = garbage _ collector _ property . total _ memory ; </%> <%> <-> var format _ provider = get _ format _ provider ( log _ event ) ; if ( reference _ equals ( format _ provider , culture _ info . invariant _ culture ) ) { format _ provider = null ; } </%> <%> <-> format _ provider = = null & & </%> <@> builder . append ( convert . to _ string ( value , format _ provider ? ? culture _ info . invariant _ culture ) ) ; </@> 