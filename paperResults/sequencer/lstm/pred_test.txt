public void configure ( i _ hosting _ environment app , = = = = = = STR var var ( <%> _ <+> ;
public void configure ( i _ hosting _ environment app , output _ <%> _ ] ! override output _ <%> _ < <*> _ < ( <+> _ lock </%> task > >
public void configure ( i _ hosting _ environment app , i _ logger _ factory logger _ factory )
public void configure ( i _ hosting _ environment app , i _ logger _ factory env , i _ logger _ factory logger _ factory )
public void configure ( i _ hosting _ environment app , ) null if <-> override )
public void configure ( i _ hosting _ environment app , i _ logger _ factory logger _ factory )
public override async task < t > invoke < t > ) . configure _ ready ) . configure _ ready ) ; _ ready ) logger ) . ( is _ client ( ) ( <%> <%> string new _ <%> <%> <%> <%> <%> <%> string STR ) ->
var response = await client . post _ async ( STR + port _ number , payload ) ;
port _ number = 0 ;
private static readonly json _ serializer _ settings json _ serializer _ <*> </%>
} finally { invocation _ semaphore . release ( ) ; <+> _ STR _ : </%> <%> json json json if
protected override void on _ output _ data _ received ( data index _ STR ( handle <%> this file _ . _ result + if null add _ . ( STR <%> <%> <%> = <*> </%> </%> <*> _ < </%> </%> var </%> </%> </%> </%> </%> var var <%> contract _ if <%> logger contract i _ . _ configuration ( logger <%> _ data <%> <%> contract data <%> <%> contract <%> ) ) contract contract <-> <%> > source <+> _ -> _ arguments <%> set <*> > source ;
request _ absolute _ url : get _ encoded _ url ( request ) , request _ path _ and _ query : request . path + request . query _ string . value ;
public string _ as _ temp _ file ( string content . ( ( ( path _ factory , path _ ( name ) . ( . write . write _ } = path ) code <%> _ services if build _ configuration if = logger . ( logger . ( . <%> _ arguments connection -> -> -> object -> -> -> -> ) -> -> -> -> -> -> -> -> ) private object -> private object -> ->
private home _ controller ( i _ node _ services node _ _ , control _ write name _ ) . . task < </%> _ public _ configure > STR
private readonly task _ completion _ source < bool > node _ process _ is _ ready _ source ; private readonly string project _ path ;
public void configure ( i _ hosting _ environment app , i _ logger _ factory logger _ <-> this _ factory )
public void configure ( i _ application _ builder app , <-> _ add _ i add _ i , )
public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ void <%> ( 0 _ </@> factory builder )
public void configure ( i _ application _ builder app , node , node _ result _ <+> + ( ! contract _ $ _ builder logger )
public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ <*> logger )
public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ <*> logger )
bool on _ drag _ enter ( i _ web _ = . . . this browser _ this . _ _ . <%> ; ) ) ->
if ( handle ! = int _ ptr . zero )
def _ wnd _ proc ( ref m ) ;
managed _ cef _ browser _ adapter . send _ focus _ event ( true i i i ) logger ;
managed _ cef _ browser _ adapter . send _ focus _ event ( false ) ;
managed _ cef _ browser _ adapter . load _ html ( if ; true ) <@>
managed _ cef _ browser _ adapter . go _ back ( & &
managed _ cef _ browser _ adapter . go _ forward ( i i i & & ) data
managed _ cef _ browser _ adapter </@> </@> <@> ; ; STR
address = web _ view . address memory _ is _ <-> _ <*> </%> { _ response . x _ <@> : <*> _ ( . int modifiers modifiers modifiers ; ;
if ( source ! = null )
create _ offscreen _ browser ( ) ;
using system ;
on _ preview _ key ( e view view = <%> buffer . create _ <%> _ args _ down . web view _ preview _ <-> _ down . web view </%> ) ;
on _ preview _ key ( e ) ;
render _ handler ? . on _ paint ( is . ) ( dirty _ element ( <@> </%> </%> paint <*> buffer . on <*> _ , _ , . modifiers <*> <*> . modifiers . modifiers . modifiers <*> </%> paint _ 0 _ , = </%> paint <*> <*> <*> _ , <*> bool void , ) ( error , on _ can _ error args ) ( error , height _ element _ error bool bool bool _ void bool void _ void , bool bool void void <*> bool void _ can load load load
browser . get _ host ( ) . send _ ; _ index . system . ( . move _ </%> = = & point ( & & point . content . window . left . ;
result = new cef _ app _ _ ) ; <-> <%> <%> { </@> . cef ;
this . browser _ panel . location = new system _ drawing _ point ;
using cef _ sharp _ wpf _ <%> _ views <+> <+> ; ; _ if _ wpf <%> _ else <%> <%> ,
foreach ( var item in e . <%> on items int null int null ref </@> )
using ( var subprocess = cef _ core _ <@> </%> </%> ) ) _ sub _ </@> handler response response _ collection response get _ or )
owner . show ( ) ; } }
owner . close ( ) ; } }
resize _ browser ( ) ;
return bitmap ;
void i _ render _ handler . create _ <%> else ; size , size , int is _ create )
create _ or _ update _ bitmap resource resource _ > _ update ( is _ type , buffer _ rect _ STR _ <+> _ <+> _ <*> _ -> _ <*> _ ) _ <@> _ -> _ popup . size _ ) . popup . <%> , ( popup . <%> . ) _ get _ modifiers _ file . ; ;
private void create _ or _ update _ 0 public bool update _ width , int or _ ptr or ) , int or , int , <+> width , memory memory ; { { resource _ ; _ true ; int ; int memory _ true . int memory _ modifiers . int memory
void i _ render _ handler . null <+> create </%> paint ( ; null new else = <-> )
create _ or _ update _ bitmap ( is _ ; . & _ owner , dirty ( method , ref , ref _ size , ref _ type , ref _ type _ mapped _ this _ be ) ? <%> , ref _ type _ mapped _ this _ be _ be ) ?
private void create _ or _ update _ bitmap ( is is _ width width , int or _ ptr buffer _ ) , int or , int , int width , memory memory , <+> stream <@> _ set _ interface set _ </%> -> _ </%> -> _ </%> -> _ </%> -> _ ; be , <+> ( = </%> . mapped . view . ( </%> . ( </%> -> . </%> . mapped view . </%> _ ( -> ) ) )
void i _ render _ handler . on _ paint ( core is <%> ! ! _ ptr = int , int , int ) _ ( int ) _ )
create _ or _ update _ bitmap ( is _ set ; : : : : : : & invoke _ invoke _ owner _ var _ mapped ( ; owner _ web , & owner _ var _ mapped ( <+> dirty ( ) -> mapped ( is ( ; ) ) -> dirty ( image _ <%> . ) <-> _ get ( ; owner owner </%> owner _ window ( = view _ get _ window </%> view _ ! _ window _ view ( ; ( ; ) . ( ( ( ( modifiers _ size
private void create _ or _ update _ bitmap ( < is is . </%> _ ptr view _ ref buffer , ) or or or , int width _ ) , int , memory memory , <+> ; <+> ( ( ( int _ file , <+> _ mapped </@> _ </@> ) ) _ true _ <%> window ) )
bool on _ before _ browse ( i _ web _ browser browser _ control , i _ browser browser , i _ request request , bool is _ redirect , i _ frame frame ) ;
managed _ cef _ browser _ adapter </%> ( </%> _ size ? _ size <%> </%> int < address _ settings = . . ( address _ settings = . ; is </%> <%> <%> </%> </%> </%> </%> , , address _ memory . _ adapter . ref , , , , </%> </%> _ true ) ;
browser _ core . address = address <-> int int ,
managed _ cef _ browser _ adapter . create _ offscreen _ ) </%> int _ process ) ;
get { return new [ ] { 1 , 2 , NUM _ NUM _ ) ( ) _ NUM _ ) ( object _ . _ _ settings _ settings ) get ( ) ; )
settings . cef _ command _ line _ args . add ( STR var = get _ var . <+> show ) ) ) ) ;
owner . close ( ) ;
if ( ! cef . initialize ( settings , shutdown _ on _ ( _ i = true _ is _ , _ exit message true . </@> , _ null _ ( ) . true _ sub _ void ) ) , text ) ,
return dictionary [ property _ name ] ;
is _ loading = isloading ;
can _ go _ back = can _ go _ back ; settings ( <%> ( ; , ( _ . -> _ </%> factory . _ null exception ( ( _ source ( ) _ source (
title = title ;
tooltip _ text = tooltip _ text <@>
browser . get _ host ( ) . was _ hidden ( get _ </%> var ) add ) ;
browser . get _ host ( ) . was _ hidden ( ? ) ) ) ( <*> ) ) ;
interop _ bitmap = null ;
browser . get _ host ( ) . notify _ screen _ info _ <+> ;
return new cef _ render _ process ( args , new cef _ ) ( args _ null result ) new
get { return new [ ] { 1 , 2 , NUM , . . NUM _ ) _ STR _ NUM _ NUM _ object result <*> <*> <*> = <*> ; <%> . <%> [ settings ) ;
uri = browser _ core . address this this ( ;
throw _ exception _ if _ browser _ null ( cef _ browser ) ;
host . stop _ finding ( cef _ browser ) ;
host . print ( cef _ browser . get _ host ( ) = ! ! _ browser . = get _ ) ;
throw _ exception _ if _ browser _ host _ null ( cef _ , ) ; _ ) ;
throw _ exception _ if _ browser _ host _ null ( cef _ browser ) ;
throw _ exception _ if _ browser _ host _ dictionary ( context callback callback ( ? </%> = = ; ) . get _ . ) . if add . static ) . = host . = _ , _ null _ if ( ; ; ; _ ) ; ; ; ; level _ host ( _ null _ if ( ; ; ; ;
return managed _ cef _ browser _ adapter . get _ focused _ id <%> ) -> ) = </%> & </%>
return managed _ cef _ browser _ adapter . get _ browser ( return null </%> null ; message message . throw ; _ target _ host _ get ;
modifiers : modifiers ;
return new cef _ sub _ process ( args ) -> = </%> </@>
internal sealed class javascript _ callback _ surrogate : i _ data _ if _ ;
cef . do _ message _ loop _ work ( ) ;
return javascript _ object _ repository . try _ call _ method ( ( _ id . <%> ) ) ; _ host _ var get _ call ( , <*> _ throw , ) ) ) ) ;
return javascript _ object _ repository . try _ get _ property ( </%> _ if ( get _ if _ open ( ( . if ( get _ exception ( -> _ if ( get _ -> ( <%> _ if ( -> entry entry ) entry ( -> ( -> ( -> ( -> entry ) ) ) ) ) ) ;
public override void decrypt ( stream input , stream output )
public override void decrypt ( stream input , system . io . ; -> < <*> < <*> < <*> < object < > < ) < <*> < <*> < <*> < <*> <%> item > item item item )
new _ opts [ STR ] = true <->
var missing = new list < remote _ volume _ entry private remote _ volume _ entry , ;
public void post ( string key , request </%> , options , _ . patch . <+> STR ( <+> STR <-> ; }
public stream open _ write ( string file )
con . put ( get _ full _ path ( remotename ) system </%> <+> <+> , <+> , . , ) out
con . get ( get _ full _ path ( remotename ) , stream </%> <*> </%> </%> </%> </%> ) <*>
return run _ from _ most _ recent , } io ) <+>
known _ storage _ classes = ns ;
program . use _ database _ encryption = ! </%> </%> ; _ var , </%> . </%> . new new key _ <@> _ option ) ; ; _ . stream ;
var sshfolder = client . list _ directory ( first ( <*> ) keys <%> <%> . new , ( ; , _ ( options . name <-> <-> core ) ) name
var existing _ authorized _ keys = client <%> . list . request ) target target target null : client . <@> </@> <-> to <%> ) ) ) ) ;
i _ node parent = nodes . first ) ( exception <%> </%> </%> > ( > ) , </%> m . utility ( </%> list _ type ( root <*> < root _ bool = ) get get ;
var cur = notifications . first _ or default x <*> <*> ; <%> ] ]
throw new folder _ missing _ exception ( ex _ token _ ) ) ; ,
using ( var backend = new fh _ backend <+> <%> . = . fh </%> </%> . stat </%> <+> , null <*> & <@> = m _ </%> options = </%> _ stat )
using ( var tr = new temporary _ file _ wrapper io m . </@> _ </@> ) async <+> info
using ( var backend = new fh _ backend ( culture < io m full . options ( full . options ( null ( extension object object object object object object object object object object ) object </@> . stat object void . ( state . { list </%> </%> </%> . id </%> task . id </%> task . id long task long long null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null
using ( var backend = new fh _ </%> ( , . backendurl . ) . </@> . ( database <%> <@> _ <@> . options _ </@> STR _ core log _ <-> . _ = . true _ backendurl ) stream
using ( var backend = db . begin _ res , file _ options = db _ level = <+> _ options get get get ) </%> <%> </%> <*> . _ false stream </%>
if ( t = = null | | t . item ! = ( copy stream , input new input , input new utility new { <*> utility ) ) -> using utility void security void utility new input , override <*> , ) void using utility void security stream
using ( file _ stream fs = file . </@> -> <%> ( or = ;
using ( file _ stream fs = file _ create . where . x ( type ) )
if ( options = = null )
temp _ file = null ;
using ( core . temp _ folder ttf = ; key <+> current core m m <%> _ item )
using ( new timer ( STR + folders } = <@> temp ) ) temp ) )
( logging . log . current _ log as </@> m m file ) ) case ) _ entry _ entry <+> ( ( -> ; ( <%> ;
public static void print _ argument ( list < string > <%> if static <%> )
mx . value . configure ( conopts ) ;
var fhopts = new forest _ hash . fh _ options ( ; = = ;
using ( var handler = new restore _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler active null ( null ( | _ ) . key ( | _ ) . key ( | _ ) ( ] ( rs ( -> , -> , -> , -> , -> , -> , var , -> , -> , -> , rs , -> , -> , -> , rs , -> , var , -> , -> ) , -> , var ( rs ( -> _ options
using ( var handler = new delete _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new delete _ handler ( m _ backend . raw _ options ) )
using ( var handler = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( new handler _ handler . repair _ handler , hash _ ; handler m options ( handler _ ; options ( var ( rs ( ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = new = ] = ] ) = new = ] = new
using ( var handler = new forest _ hash . fh _ ( , m _ ( m ) , file _ + ;
using ( var handler = new forest _ hash . fh _ source ( ref _ source . options _ , ) hash ( using handler ; files 0 = builder . configure . configure _ last ) )
var writer _ guids = new guid [ ] { ; </%> full ;
operation _ progress ( this , duplicati _ operation . async </%> </%> collections current </%> collections current </%> options . interface . status _ loading _ filelist , control ) ;
n = n . union ( db . delete _ <%> _ _ _ . get _ _ ) . ) <+> ) STR STR out m _ = _ <@> </%> . </@> </%> . enumerator <%> _ -> . <+> _ , . <*> m m _ , ( new _ . ( , _ . ( , _ . ( , _ . ( , _ . ( , _ . ( , _ . ( new _ . ( new _ . _ string _ n ( , _ . ( , _ . ( new
using ( file _ stream fs = file . create id . key <%> . key . ;
m _ active _ nonces . remove ( m _ active _ nonces [ nonce . value ] . item ) ;
else if ( result is i _ enumerable )
string cert _ hash = cert . byte _ array . </%> _ hex _ = ( _ ( . empty = . <@> . generic _ as ; _ options ;
get { return m _ current ; }
list < backup _ entry > entries = parse _ file ) get ) ? else _ ( return <*> <*> < < <@> . enumerator -> generic ref generic ref = options options options handler ;
foreach ( key _ value _ pair < bool , i _ = _ var <@> <@> in in <@> m _ options options options
public class hyper _ v _ options : interface . <*> _ . _ null ( m , m _ generic . source _ _ _ , . system )
if ( rd . read ( ) ) { do
m _ username = null ; if ( m _ - last <*> null <*> _ = string _ interface <*> </%> . try ( - <%> > async <%> async null ) , null _ value ) , generic _ operation new hash ) new _ password new
return null ;
( rd ) = > new backup {
files . add ( new temp _ file ( filename . new . ] _ ( ( ( ( fs ( fs ( fs ( fs ( fs ( fs ( fs ( fs ( fs ( fs ) ( localfilename ( fs ( fs ( fs ( ( ( fs , ) , fs options ) ) , fs options , fs options , fs options , fs options , fs options ) , fs options ) ; options options , 0 , fs options ) ; options . target , fs options , fs options , fs options
remote _ path = url . absolute _ path . utility <%> line , _ ) arg ( ( , , , _ -> <%> ( . result <%> ; </%> _ ref = . ) ; 0 . options = )
void enumerate _ files _ and _ folders ( string startpath core ( length new length . length . filename _ i i hash array ) ) _ callback _ ; return ) ) ;
m _ statusmessage = string . format ( strings . <+> <%> wrapper . stream <%> from <%> uploading get > get uploading event ( <%> . <%> _ </%> ( if _ object _ if handler _ -> ) options options ) ; ; ; _ max , next . , , strings _ wrapper _ wrapper _ </@> ) ; ; ; ; _ <%> _ list ( new _ using ( filename ) _ <%> ) ; ; handler ; ; ; _ wrapper _ </@> _ </%> . , . new ( strings _ using .
if ( is _ client _ linux )
m _ path = path ;
public void enumerate _ files _ and _ folders ( string rootpath <%> ? rootpath <%> <%> ? <-> _ _ _ _ <%> <%> , return ) ) )
callback ( rootpath , r . key , duplicati _ file _ status . file ) ;
if ( r . value . usn > = last _ = utility utility utility . key . starts _ with ) core -> . key . starts core -> -> last <%> -> . folder . = callback _ if _ string utility utility utility STR
if ( r . key . starts _ with ( m . if . </%> core filename core , ) <%> <%> utility _ = . utility . utility ) _ utility _ core . core utility _ with utility <*> . <*> . <*> . starts . <*> . <*> . </@> -> <*> -> -> . <*> core <*> . starts . <*> . <*> . </@> . </@> . <*> </%> ->
success = m _ original _ signature _ stream , m _ , . ; _ signature status ( dictionary . = . append core -> _ files . </%> ) ;
m _ stream ( m _ signature _ stream , core core utility utility utility ) <*>
sourcefolder [ i ] = sourcefolder [ i ] ;
if ( is _ client _ linux & & options . usn utility = = = core . optimization _ utility . = )
usn _ helpers = new dictionary < string , usn _ search > . -> . -> _ m ( _ ( m ) . client _ key _ ( _ comparer ) = new = new . io core return ( ( m <*> ( -> core append . ? . core utility _ helper = default . STR target target target target ) target target -> ) . default . default . default . ( ( ( status </%> status -> , core . ( ( utility _ void callback _ status _ if ,
int ix = m _ unproccesed . files . binary _ system <*> m , client ( m . = . = . client . client . client . client . client . combine . ) ;
fs = new temp _ file _ stream ( ) ;
if ( ! compare _ streams ( signature , new _ = core core ) ( new -> file <%> true . utility < _ = , , comparer string string string string utility ) utility )
return m _ filter . should _ include ( core . utility . directory _ separator _ string , core . utility . directory _ separator _ string + element ) ;
destination [ i ] = destination [ i ] ;
string contentprefix = content _ root ;
string deltaprefix = delta _ root ;
copy _ stream ( , st ) ;
public void callback ( string rootpath , string path , enumerated _ file _ status status ) { if ( status = = core . utility . enumerated _ file _ status . folder )
else if ( status = = enumerated _ file _ status , _ _ utility ( destination ( ) </@> </@> )
else if ( status = = enumerated _ file _ status . </%> )
if ( ! is _ client _ linux )
dictionary < string , int > duplicates = new dictionary < -> string string utility ;
targets [ index ] = string . is _ null _ or _ empty ( m _ default _ target ) ? STR : m _ default _ target + suffix ;
public void callback ( string rootpath , string path , enumerated _ file _ status status ) { if ( status = = duplicati . core . utility . enumerated _ file _ utility _ <%> </%>
else if ( status = = enumerated _ file _ status . folder <*> file <*> file )
public void enumerate _ files _ and _ folders ( string startpath , filename _ filter filter , enumeration _ callback _ delegate callback )
parent _ folders . add ( folder ) ;
m _ folder = basefolder ;
return core . utility . enumerate _ files ( m _ folder . path . combine ( m _ key ( status <%> ( status <%> <%> <%> <%> <%> <%> utility <%> core core core utility ) , element ( -> ( -> ( -> ( core -> path -> -> callback -> -> ) -> -> -> -> -> -> -> -> -> ) ) -> ) filter -> core . core utility -> -> callback -> -> -> -> ) filter -> filter -> filter callback filter callback filter -> filter callback filter callback filter -> filter
return system . io . enumerate _ folders ( m _ > -> if > . source . source . else . else _ array _ utility _ return ( utility ( m -> folder ; ) utility ( ( default ( ] ( ( ( default ( ( core . folder . path . string _ ( if status _ ( public core core core core . string _ string . string . string _ path core core _ <@> core core _ <@> core core . string _ string . string _ string _ file core core core
return system . io . path . combine ( m _ parent </@> prefix -> -> -> -> core ( ( -> ( -> core . path . combine ( m ( -> core folder -> status status ) status status status status status status core status status utility utility utility utility utility utility utility ) _ to utility utility ) utility utility utility utility ) string to string <%> _ element core core _ <@> core m utility utility utility utility utility utility utility utility utility utility utility utility utility utility utility utility utility STR } to . ;
sources [ i ] = sources [ i ] ;
if ( sources [ i ] . equals ( sources [ j ] , string _ <@> core core _ = find _ ignore core <@> <%> <%> <%> _ ; core _ ; <*> _ ; <*> <*> . if . or . or . <@> ) <*>
else if ( sources [ i ] . starts _ with ( sources [ j ] s s s core core core utility _ </@> files _ my _ sensitive </@> = . , = = . , core . </@> . </@> . ; <*> override null override override n _ </%> . get _ </@> _ <%> ) ) ) ) )
manifest . content _ hashes . add ( contentfile ) ;
manifest . signature _ hashes . add ( signaturefile ) ;
string prefix = r _ sync . r _ sync _ dir . control core m </@> </@> this + <*> _ root ; ; . string _ <*> core s ;
thread . thread . current _ thread . priority = parse _ priority <*> m m ; . utility _ <%> core <*> ( <%> core data _ -> _ utility _ -> . <%> utility </%> </%> </%> ) ( ) ( <*> core . ( _ this ) _ options . -> core _ utility _ <*> core _ -> _ utility _ server } ) ) ;
string root = application . startup _ path ;
foreach ( string s in enumerate _ files ( application . startup _ parse STR STR utility ) utility
if ( ! is _ client _ linux )
if ( ! is _ client _ linux & & string . is _ null _ or _ find utility <*> documents . format _ null core variable core <%> <%> utility utility -> -> -> ) ->
entry . folder _ size = m _ sizes [ path ] ;
total _ size . text = string . format ( strings . select _ files . final core size core ; string _ ; </%> . empty _ ; -> core ) ; ; ; _ ( </%> _ ( <+> = : : <%> string _ var _ string filter j ( message j ] j filter j ) j j j ( message j j ( message j j ( j j ( message j j ( message j j ( message j ( j j ( message j j } filter j j ( message j j
total _ size . text = string . format ( strings . select _ files . , } : : : : : -> system ) file x file _ io j out ) bool <%> bool <%> _ ] _ </%> ( message bool
my _ music _ size . text = find _ actual _ size ( m _ folder . empty destination destination destination destination ) ,
my _ pictures _ size . text = find _ actual _ size ( m _ my ) ;
desktop _ size . text = find _ actual _ size ( m _ desktop ) string string string string </@> string
appdata _ size . text = find _ actual _ size ( m _ app _ , [ _ sources _ , , text ) ; my _ size . text is <+> . ;
my _ documents _ size . text = find _ actual _ size ( m _ case _ ] [ case [ </@> _ ] [ ) ) </@> ,
m _ sourcefolders [ i ] = folders [ i ] ;
if ( s . equals ( startpath , client _ filename _ string _ comparision ) ( startpath ) ( ) )
return new key _ value _ pair < string , string > ( x , system . io . path . get _ bool _ out ) ,
return STR + username + STR + this . host + STR + -> . hash _ return ;
return STR + username + STR + this . host + STR + folder ;
if ( ! string . is _ null _ or _ empty ( username ) ) = </%> <*> _ _ string size string ( = { { private { = system . system . <%> . io .
result . add _ verbose _ message ( STR , sources [ i ] , sources [ j ] ) ;
private const string oauth _ login _ url _ template = STR ;
return to _ string ( ) +
? environment . new _ line + exception </@> )
throw new exception ( string . format ( STR , error _ ; . <%> utility core core core core . append STR ! . . string _ ( <@> core . string core client . </%> utility utility _ </@> core core core core core core core ;
console . error . write _ line ( error _ builder ) ;
internal void do _ compact ( local _ delete _ database db , > > > if if _ verified . -> ( i . format . i new if _ = _ new new ) new if id . STR . STR ;
if ( old _ id < 0 | | m _ options . run ( invalid ( last _ options . <@> ) ( ; = = none , & _ options _ http ) )
assert . are _ equal ( NUM , filesets ) ;
assert . are _ equal ( 1 , filecount . count + 1 _ STR _ STR _ ; var var var <@> </@> _ -> ;
assert . are _ equal ( STR , res . rewritten _ file target run . <-> . log active ( ( ( STR ( STR ( STR ( ; ( ; ( ; ( </@> _ assert _ res _ bool _ STR ) < code target target ) target target command command ( res ) ) command _ new STR _ block _ last _ last _ <+> _ <+> _ <+> s s ;
assert . are _ equal ( STR , res . rewritten _ file . 1 , ; ; ; ; ; ; ; ; ; ; ; ; assert ) ; ; = <-> = <-> = <-> _ <%> _ error . </@> _ ; line ;
assert . are _ equal ( STR , res . rewritten _ file m lists _ changed _ ; files files files files ) ; ) < > <*> _ ; <*> error _ </@> </%> code . removed </%> <-> index block STR description STR _ ] = last ;
assert . are _ equal ( NUM , filesets , NUM ) ; double -> = filecount -> filenames . count count <@> <*> . <+> </@> , filecount ) <->
assert . are _ equal ( NUM , filesets . count + 1 , format ) string ( _ , ( _ set ;
m _ old _ folders . remove ( s ) ;
target = new upload _ request ( options , options . indexfile _ policy STR STR STR . <@> lock <%> block database block database ;
system . net . http _ web _ request req = create _ lock ( access . m . time ) , req ( req ) , req ( method ( ; ; req ( ; { { { { { { { } ) ; ( STR ; using ( args ; using ( ; ; } } . | . > . _ 0 . } . _ 0 ; } }
private i _ write _ channel < data _ block > m _ + string ( utility ( utility ( utility ( utility . data ) ) ) system . combine . directory . directory . directory . report . data _ id 2 , file , file _ date _ | . error . error . error . error . <@> _ </%> > ) )
private async task < bool > add _ folder _ to _ output . string filename ( <@> filename ( [ object } [ . ( exception ( exception ( exception ; ( execute . foreach 0 ; }
cmd . execute _ non _ query ( STR + query , m _ tablename ) ;
void runner _ duplicati _ progress ( duplicati _ operation operation , duplicati . <%> ( , _ ( ) . -> message . database size . -> . string size NUM string size size NUM
public void set _ current _ icon ( runner _ result icon , foreach <@> database file database file <-> ) { )
void runner _ result _ event ( runner _ result result , string <@> , <+> NUM )
foreach ( var s in system _ io . enumerate _ file _ </%> , count 1 1 1 string s string string ( utility string string <%> , is <%> 1 1 ) 1 )
if ( s . io . exists ( target ) )
if ( ! s . io . exists ( target ) )
void connection _ status _ updated ( i _ serializable _ status status are are are are i )
logging . log . write _ message ( strings . format _ script _ ? ( file ) ) = } = type _ exit ) argument ) bool </%> bool </%> ) bool </%> bool - -> _ block database - - , {
logging . log . write _ message ( strings . run _ script _ id i </%> if if 1 1 1 1 , file </%> _ type _ log ) ) <%> </@> ) <%> ) _ library _ skip _ if -> -> ; ! duplicati _ long _ </%> . | = | , false ) async
return string . format ( strings . utility . format _ string _ </@> s s . . -> message message message . NUM ( NUM ( NUM STR <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> ) <+> are NUM , _ ;
return string . format ( strings . utility . format _ string _ combine <+> <+> , , res ! ; io ! . <-> string string string ) ) ) . connection . status ( NUM . connection . _ STR STR <+> , file & > > . _ . ( ( <-> options <@> writer _ new options ) * . line ) ) ) meta database meta meta false meta _ database meta meta ] <%> <%> ( ] <%> / / NUM <%> <%> <%> <%> NUM <%> <%> <%> <%> <%> <%> <%> <%>
return string . format ( strings . utility . format _ string _ double , ( <@> <-> return system , . = ;
throw new exception ( strings . google _ docs . folder _ has <%> multiple io io io error _ title _ title </%> NUM ( ; </%> . path <%> </@> target -> -> -> -> . join <%> ; ;
return string . format ( strings . controller . unsupported _ boolean _ m format size format / / <*> ) <+>
return strings . controller . block ) to ) ;
return strings . controller . unsupported _ path _ < < _ _ </@> m task task task task ;
return string . format ( strings <%> <+> <%> list ) ) ) ) ;
var bit = bit _ to _ </@> _ 0 . 0 . <@> . <@> ; <-> _ new <*> ; ; _ get _ return ; ;
var bit = bit _ null <%> m } >
task = new key _ object _ m <@> . </%> , <-> ( <-> _ async _ > ( ( ( index _ item _ null , method , method , , , file _ upload _ < data ( ( = = = = ] data data <*> <*> <*> <*> <*> <*> _ value <*> 0 <%> <%> <%> <%> <%> _ entry ) <%> <%> ) <%> <*> <%> <%> <%> <%> <%> <%> <%> <%> <%> entry <%> ) <%> <%> <%> entry <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> entry _
task = new key _ value _ pair <*> ( ( file _ return _ <+> _ request <%> <%> <%> . <%> <-> <%> . <%> if generic ; if <%> . <%> ; <%> new system _ <*> <%> <%> <%> _ entry <%> <%> <%> _ . options options options options options options contains ;
m _ task . signaturekey _ size _ , . , . , . , , func < else _ with <%> < enable <%> <%> if </%> <%> <%> </%> ( ! _ if -> -> -> -> _ time <%> add . add -> ) ;
private i _ backend m _ ( ( <+> . _ _ _ m . . . < < < < < < [ <%> _ <%> ) _ </%> . <%> _ - <%> _ taskreader ; _ ] , _ ] , _ ] , _ ] filter _ <%> filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m
private async task do _ with _ retry ( . <*> [ ! _ <*> = if = ! ! ! ! _ > <%> -> -> -> )
private async task do _ to )
vss _ backup _ components ) ;
return res ;
if ( m . key ;
using ( snapshot . open )
m _ block _ hash _ int ( key ) task task task _ hash ) </%> ( new <-> ( new ; </%> = r = </%> ) = </%> ) ) </%> ) ( </%> ( r ) ; > ) ) > > ) ) > </%> <%> <%> ) <%> ] <%> ) byte
m _ block _ hash _ lookup key . async . async . new _ pair name size = null = size = return </@> handler common </@> handler common private private ) common
entry . add _ fileset _ res </%> try _ <@> _ res </%> try _ <@> _ res </%> try _ <@> _ = ( _ = ( -> _ = ( </@> ) ) ;
return run ( ) ; return to </%> ) . ] _ i _ <@> </%> . async <%> </%> <%> <%> <%>
public i _ list _ results <*> . size > ( size > <@> <@> )
public i _ list _ results + if ( ( ( [ <*> <@> _ -> filter string ;
private string add _ tree _ false bool string m ( </@> <*> )
schedule s = program . 0 _ . ) </%> </%> _ data [ <-> _ = ) </%> ;
m _ client = new item _ ( </@> _ id private </@> _ key . u -> ; -> ; _ [ module m ) ( ) ;
application _ settings [ allow _ saved _ credentials ] = gui _ options [ allow _ saved _ credentials ] ;
array . reverse ( deletedfolders ; operation _ _ </%> string string <%> string
addedfolders . sort ( ) <@>
count + + ;
if ( tn . tag = = <*> , format format . <%> ) . ;
m _ wrapper . add _ range ( extras ) ; m _ wrapper . encoded _ filters = filters . encode _ as _ filter ( ) ;
if ( t . checked )
directory . delete ( restorefolder , true ) ;
directory . delete ( restorefolder , true , true , </@> ) result ( restorefolder i i i _ <*> ;
backend _ signature _ cache _ copy ( be ) ;
delete . delete ( be . signature _ file [ i </%> ( <-> . cache _ <*> [ [ ( = ; , , <%> ( <%> ( is _ file new </%> = be = be ( be ( be . signature ) ) ) ) ; _ signature _ file _ <%> ( [ . signature _ string <*> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> . signature </%> ) -> >
{ backend . delete ( be . content _ volumes [ i ] . filename ) ;
m _ stderr . write _ <@> ) STR
m _ stdout . write _ <@> ) STR STR
add _ verbose _ message ( message , new object [ data if ( _ _ _ . ! ) ;
m _ database . add _ blockset ( filehash , size _ result . . . method . <%> . i . folder _ blockbuffer _ length _ <%> _ <%> copy ) ; & </%> _ log STR STR . options _ bool { <%> _ m , m . empty , m _ m , [ . entry ) file . content ) file . entry ) file . entry file file . [ . signature signature signature signature file _ entry _ </@> _ copy signature path signature ) file . = ) ;
system . net . http _ web _ request req = </@> . <-> </%> remotename ) ) ; ; ) ( http _ </@> ( <+> . connection _ type <%> ;
private readonly i _ metahash empty _ line to to to
i _ metahash metahash ;
private bool add _ folder _ to _ private <%> )
private bool add _ symlink _ to ( string filename ) </@> , i _ + 1 = i ) ;
private void add _ file _ to _ output ( string database ; long size <%> stream <%> stream . request . . be ) metadata ( </%> </%> ( ) bool blocklisthashes ( i _ list ; log _ </%> type ! _ ) out <%> display entry </%> </%> </%> </%> </%> ( )
public duplicati _ operation _ mode ) string _ ( return ; ( <@> ( . ( <+> return </%> ( } hash _ string . <%> ( request . ; request . [ new <-> _ ( } _ ( } _ log ; ) ) . _ <%> ( m . <%> . _ <-> new new new new . ( < < new < new . new < ( . new < < < . . . ( new <+> . entry . _ = ; <%> ) ;
program . data _ connection . purge _ log _ data ; parse _ bool ( parse _ parse _ return _ interval ( true [ <@> . now [ true [ true i true <*> <*> ) <*> ; <*> <*> name ) ;
get ( entry , tf , null ) ;
public void get ( string remotename , stream output )
return new list < i _ file _ entry > ( ( ( 0 log _ & type log log ) <%> <-> . display < entry entry entry entry entry entry entry ) ) ;
return new list < i _ file _ entry > ( entry entry entry entry entry entry ) )
cmd . command _ text = preparse _ sql ( c _ type cache cache . command _ i cache ( return c _ </%> & <@> ) ) ) ) ) message , preparser . date _ STR { else
throw new user _ information _ < ( _ result </@> </@> < if ( if ) , STR , </%> _ format ;
throw new user _ information _ exception ( if ; _ _ ( _ _ _ _ _ if ) <%> <%> ) ) ) http
m _ stat . log _ warning ( strings . format ( strings . r _ sync _ dir . snapshot _ failed _ error , ex ) , null ) ;
return metadata ;
return new dictionary < string , from > <%> < ) ;
return false ;
return false ;
return true ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return true ;
s + = url _ encode ( username ( ( string io io io = = </%> attributes attributes attributes attributes ) -> ( < ) -> arg -> <%> ) arg <-> if _ ! </%> system system ( username ( username ( ( = directory io io <%> <%> copy io io io io <%> <%> io io io <%> <%> copy io io io <%> <%> copy io io io <%> <%> copy io io io <%> <%> copy io io io <%> <%> copy io io <%> <%> <%> io io <%> <%> io io <%>
s + = url _ encode ( password ) )
public const file _ attributes attribute _ error = ( file _ attributes ) ( 1 < < NUM ) ;
public delegate bool enumeration _ filter _ delegate ( string rootpath , string path , file _ attributes attributes ) ;
public static void copy _ stream ( stream source , stream target )
public delegate file _ attributes extract _ file _ attributes ( string path ) ;
return enumerate _ file _ system _ entries ( rootpath , callback , new file _ </%> ( ; ; ;
file _ attributes attr = attribute _ reader = = file ? </%> . . . = </%> path ( > is return ? ? ? ? ? ? ? ? ? </%> _ reader . _ stream <*> ( [ _ io ) ) public
file _ attributes attr = attribute _ reader </%> </%> null < <*> path _ <-> . <%> is ) mono stream ! path ! ! io _ </%> file ! ! ;
return enumerate _ folders ( folder , filter ) . sum ( ( path ) = catch new . <@> stream , , </%> </%> = , <@> </%> </%> . length ) source
public static int force _ stream _ read ( stream stream , byte [ ] buf <%> ; ; ;
return parse _ bool ( value , ( = <%> <%> </@> = ? ? ? default </%> </%> default </%> , } ) bool -> ) bool -> bool <@> _ ; in <*> ( <+> ( ( ( = <%> copy <%> null <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> [ <%> <%> <%> <%> <%> < <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> [
var regex = new regex ( STR ) ;
return get _ unique _ items ( collection , equality _ comparer < t > . public ) attributes attributes attributes ; ( <%> _ <-> ) ; _ comparer ( </%> ] < ) </%> </%> </%> ( ;
using ( var sw = new string _ parse ) <%>
this . auth . password _ credentials = </@> return </@>
auth . api _ credentials = new api return </@> return )
options [ STR ] = null ;
options [ STR ] = null ;
return post _ and _ get _ json _ data < bool . is . mono _ json _ ] <*> . folder ! url ! ! <+> _ str _ comparer . bool . ( 1 < ( < ( > public byte . delegate > connection connection connection _ ! < connection connection connection _ string options connection _ } connection _ json . . _ using _ <%> _ json _ ! < connection . . . connection _ <%> _ json connection connection _ ! < connection . . connection = . options connection connection _
newtonsoft _ json _ json _ property _ ;
using ( second ! = null & & server . program . application _ instance . second _ instance _ detected ( x _ url . to _ string ) )
directory . delete ( normalize _ <%> ( path ) ) ;
create _ directory ( snapshot _ base . directory _ time ( <@> <%> <%> <%> <%> <%> <%> <%> <-> ) last _ = ) <*>
return directory . exists ( normalize . normalize . normalize . normalize . directory ) time time _ last time _ directory _ </%> .
return file . get _ symlink _ target base get _ time _ target ( foreach _ <%> ( <%> parent ) _ ; </%> ( <-> ( <-> ( <-> ( v file . s ( ; ( ; ( string file file file file file file file file file file file ( string file file _ string ) file file file _ } ( ; . c . callback . system . callback ) . c ) . c ) . c ) attributes c . callback ( ; . system ( ; . system . system _
return get _ directory _ name STR ( , } _ } ( ( base base base base ( base ( ( . <-> = time . . ) _ </%> . return _ <%> </%> ) name name name name string string ( ) string ) in ) ( ) string all _ ] _ files . all _ ] . foreach string string string ) ) STR
set _ last _ write _ <@> _ [ _ [ _ utc <%> return return <-> </@> ;
set _ creation _ time _ utc </%> </@> _ path </%> date ) <%> time ) <+> <+> ) _ path <*>
return get _ last _ write _ time _ utc <%> </@> . normalize _ m </%> m command command ; _ = . return _ ! , ! ) ) . </%>
return get _ creation _ time _ utc -> foreach . from _ path <%> time time time time <-> ;
directory . delete ( normalize _ base . normalize _ ) base ) </%> recursive ) </%> ) <%>
var f = normalize _ path base ; ; ; ( file ) ( binary ) ,
var s = string . format ( list </%> <-> ) ; ; _ keys ( list ) ; ; STR ;
program . data _ connection . purge ( parse . parse . parse . parse ( [ ( [ ( new _ utility . & filter ( & ( ! ( > > filter filter filter filter filter ) ;
m _ selectfilelastmodified _ command . ) ) . create _ parameter _ temp </%> { = folder _ selectfilelastmodified _ command ( time ( set . ] . <-> _ platform _ public ) file file ( to file ( 1 . c . c _ string _ callback ) ( attributes . <%> . c ) . <%> . c _ string . 2 { filesetid { filesetid { filesetid { filesetid { filesetid { filesetid { filesetid { set _ ( _ data ; set { filesetid { filesetid { filesetid { filesetid { filesetid { filesetid
tr . commit ( ) ;
if ( ! use _ unmanaged _ ssh _ to time time command </%> </%> = ) <%> ) <%> <+> 0 <%> = . value < dictionary . set )
get _ data _ data _ change _ size ( get _ symbol _ declaration , STR ) ;
sp . file . save _ binary base ( _ fileurl _ stream _ true _ time <-> </%> </%> true { . <@> ( ) <+> </@> } <+> <*> } ; _ file file ( files _ files _ STR . new . save . new new new filter . new convert ) = </%> . fileurl . stream . new STR STR
string path = file ;
foreach ( string f in filenames _ contains . this . list . list . list filter filter filter filter )
foreach ( string f in filenames . list _ files <-> sigentry from value ( sigentry from value ( sigentry ( </@> name string ) ) )
foreach ( string f in filenames _ , . ! . -> . -> . out . -> . -> . list _ prefix string string )
foreach ( string f in signature _ list base . signature ) ) ! ! ! ! ! ! ! ;
args . add ( time ) <%> -> -> -> ;
enumerate _ file _ system _ entries ( folder , filter , c . callback ) ;
next _ progress _ event = ;
catch { }
this . regexp = new system . void _ to _ { file ( ) string create ( data . & _ ; _ ; m m m m _ object m ) ; }
parents = new [ ] { try <-> _ ) _ <@> _ reference f path = files _ folder _ options time ]
parents = new [ ] { ) ( parent _ . _ ! _ date next } next <%> ;
return environment . expand _ environment _ variables ( str ) ;
console . write _ line ( STR , h , environment . new _ </%> <*> block <%> <%> <%> <%> ) ) ) ;
console . write _ line ( STR , blh , environment . new _ line , ex ) ;
trace . write _ line ( STR + ex ) ; console . write _ line ( STR + ex ) ( , -> . = . , ) value value value value value value ; value key
system . diagnostics . trace . write _ line ( STR + ex ) ; console . write _ line ( STR + </%> , </%> , , , , , , , , , ) ; ; key key key key key key key key key key key key key key ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) path ) ) ) _ ; ) ) _ ) ) } _ ) } } _ ex ) }
console . write _ line ( STR , i , e . , string . <-> , . remotefilename . <-> ) = <@> to to options ( . . . key . key _ environment . . . <*> _ <%> _ <%> _ <%> _ m , / m m m m m m m m m -> / m 0 <%> _ m ) </%>
console . write _ line ( string . format ( <@> <-> e . <%> options . <%> . . _ environment . , , </@> . , . . . , , ) ) ; ;
sw . write _ line ( c ) ;
sw . write _ line ( STR , e ) ;
log . known _ file _ count = remotelist . string to <%> to , e string ) string
log . unknown _ file _ count = unknownlist . count ;
var url = uri _ builder ( web _ api . google _ cloud _ storage . url . api , path , </@> _ <+> . string . <+> _ , . <%> ) info
m _ hash . transform _ block ( m _ hashbuffer , 0 , m _ hashbuffer . length , m _ hashstore ) = ( ! _ <%> command ( , . </%> ( , _ <%> ) ) return . get = ( ( ( ( . _ static return . _ { ( ( ( . _ { ( . _ { ( ( string _ { ) ( return _ { return . get static return . _ static return . return return return _ { ( ( ( ( . _ { ( . _
m _ hash . transform _ block ( buffer , offset , bytes _ to _ use . </%> _ hashstore , </@> <%> , hash _ hashstore ) </%>
m _ block _ hash _ lookup . add ( str , new key _ value _ pair < long , long > . url path ( { attribute , attribute ) ) ;
m _ block _ hash _ lookup . add ( key , new key ( m </%> ) ) $ <%> . to <%> _ _ int ) ) ) ) ;
m _ block _ hash _ lookup . add ( key , new key _ value _ pair < long , string <@> . to , ; ; _ to ( ; ; ; ;
m _ lookup . dispose ( ) ;
backend = new backend _ wrapper ( bs , backend , m _ options . raw _ options ) ;
backend = encryption . encrypted _ with _ encryption ( m _ options . raw _ options ) ;
backend = new backend _ wrapper ( rs , backend ( <@> _ } _ ; <-> <-> </%> <-> . raw _ options <%> rs . ; ( add . <%> </%> , ) </%> <%> ( / _ . ( rs , ) add add add add , rs , m _ . add _ . add _ . add _ . add add add add add ) web var <-> web _ ( object ) web _ ( append _ ( object ) web _ ( append _ ( object web _ ( ( append _ (
backend = encryption . encrypted _ with _ encryption ( backend , best _ convert key key hash _ . , long _ , ) ) . console <%> system . + ) <->
backend = new backend _ wrapper ( rs , backend , m _ options . _ } ! ! <@> ! environment . ) <->
backend = encryption . encrypted _ with _ encryption ( backend , best _ fit , m _ options . raw _ . $ ( $ _ <-> , raw _ <-> options options options ) &
public static i _ localization _ table current _ localization _ verify _ signature ( string [ ] column _ name )
if ( m _ filters . any ( x = > x . matches _ > ( windows ( windows ( path , path ( path package package package package package package package package package ) ( > . object . <@> . <@> . query _ utility _ <*> _ <*> . query . <@> . <@> ) . object . object . <@> . <@> . <@> _ line . -> _ line _ string . </@> . . _ -> _ string . any _ any _ ; . </@> . . . -> . -> .
foreach ( var path in m _ snapshot . enumerate _ files _ and _ folders ( filterhandler ) )
return m _ filters . aggregate ( ( a , b ) = > a . join ( b ) ) ;
var httpex = wex . response as http _ web _ string )
if ( package _ result . value ! = null ) { var pkginfo = package _ result . get _ package _ information . hash append append append append append ;
this . log ( ) . error ( STR . STR ( , . format . with </%> ; ;
this . log ( ) . info ( chocolatey _ loggers . format , STR . error . with <%> ;
this . log ( ) . debug ( . _ with . to . name . <-> _ with ( ) . <-> timeout ) out in in . with ( , . . _ ( , . . _ using , _ _ _ with ( , file file file file file ( in file file file , base ( base ) ) property property ) ) base ) property ) ) base ) ) property ) ) ) ) ) ) property ( ) ) property property ( ) property i i base ) base ) property i
public operating _ system os _ version
private static readonly i _ log logger = ) <%> <%> STR <%> typeof <%> <%> ( command . </%> , bootstrap ) ,
nuget _ service . install _ noop ( configuration , ( pkg ) = > powershell _ service . install _ noop ( pkg ) ) ;
public string copy _ file _ unsafe ( get _ file _ is property change _ file ( ) )
if ( string . is _ null _ < _ property _ cache <%> _ . only <%> , , var </%> _ <%> expression , , -> ( ; _ right expression )
using synchronization ;
this . log ( ) . debug ( chocolatey . source ) file . </@> . this ( chocolatey . loggers . trace , , STR , with _ update ( with _ file _ string using </@> using using , STR , STR , in , STR ( ! ( & base base ( -> ( ! base config ) config config config config config config config config config config config config config config config config config ) config config config config config ) config ; config config config config ) config ; config config config config config )
this . log ( ) . debug ( ( ( string < string using i _ i _ _ <@> ) ) & else
this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ </@> _ file < <@> , <@> , STR , else & index ( & ( property ) , _ } , file ) db -> db ) ->
this . log ( ) . debug ( int _ out timeout _ <%> ;
this . log ( ) . debug ( chocolatey _ loggers . update , format . temp timeout . this _ ; ( result _ config _ dictionary <%> ) ( file ( path ) _ copy _ path name index _ file _ empty package package _ </%> _ = is new new chocolatey _ </%> is = & & & & & & & context context _ -> _ ; context context _ -> _ ; . & context context _ -> _ ; context context _ -> _ ; context context _ -> _ ; context context
this . log ( ) . debug ( chocolatey _ loggers . with , STR ) ;
this . log ( ) . debug ( ( ( ( <@> <%> 0 file file file file base base _ _ ( file ( p ( p ( p ( p ( p ( new configuration configuration configuration . & ; ) ;
this . log ( ) . debug ( chocolatey _ loggers . trace , STR . destination _ in ) try try ( trace ( trace ( trace _ config _ dictionary , result _ file ( destination ) destination _ ; property _ ; property _ ; _ empty package package _ file _ empty package package package is is ) is = is ) is = is _ with is = is is = key ) command command _ = is new is _ with is = is ( source _ configuration _ = source _ </%> _
this . log ( ) . debug ( { { { var <%> var <-> var </%> net . this _ command ( chocolatey . <@> , </@> , <@> ) <*> <*> <*> , int timeout int int ;
nuget _ service . uninstall _ noop ( ) ( . null & . uninstall & powershell _ < . cache _ type ( , ) ) <%> <%> <%> var _ < . cache _ t expression ;
configuration . push _ command . timeout _ in <%> seconds _ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( if file name _ command file _ , base base base ) . _ . _ . _ in ) ) p </%> p ( _ ( _ ( _ find <%> visit expression expression ) ) ) expression ) expression expression expression expression )
var original _ config = config . [ [ ) _ <-> _ <-> _ <-> _ <%> new ( ;
var original _ config = config . deep new new ( ) _ <-> ( ) _ <%> ( </%> </%> ;
using system ;
public interface i _ nuget _ service : </@> ( </@> ( , . . . </%> ) ) ;
& & ( p . declaring _ type list -> typeof , ; constant expression )
detect _ navigation _ change ( entry , ( = STR . i _ ( ( i { ! null source ( null null source source source source source source ) source ( null source <%> ! . ! . t _ format <%> -> -> -> -> -> = configuration -> -> } -> -> -> = configuration -> -> -> -> -> _ . store -> _ <%> -> -> -> -> -> -> _ <%> -> -> configuration -> -> -> = configuration -> -> -> <%> -> <*> -> -> -> configuration -> <*> _ .
private expression try _ optimize (
var persistent _ database = new in _ log ( . format ( ) ) <*> <*> ;
var persistent _ database = new in _ get i = _ ) using _ <@> using ( . , , . STR <%> </@> ( -> <-> option timeout ( > <%> ( > } </%> -> } -> -> <%> configuration <%> <%> , <%> <%> -> -> -> -> -> ) -> -> ) <->
var persistent _ database = new in _ system _ <*> using ;
using system ;
expression . constant ( <%> <%> <%> <%> ) value value entity . query _ ( ( type type ( ( </%> [ sql ( <%> value <%> ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( _ _ _ _ _ </%> _ </%> _ </%> _ </%> _ </%> _ new _ _ . . . . . node node ) node node ) node ) node ) node
theory
theory _ skip _ query _ issue
conditional _ fact
conditional _ fact
var old _ base _ type _ builder ] node _ i null var var = configuration _ add _ source name entity _ info model model model _ ) typeof property typeof configuration _ add _ ) typeof has _ add _ discriminator . has . has . has entity _ discriminator typeof property _ add _ ) typeof has _ add _ ) typeof has _ add _ ) typeof has . has . has ;
select distinct [ ] . [ customer _ id ->
return new generated _ value ( convert . change <%> ref ( ref current ) , . property ( ref _ temp _ ; _ unwrap _ nullable _ > node t t t _ > t t _ ; _ unwrap ( ( current ( ref current ( current ( ref ( ref ( ref [ 1 ( ( current ( nullable entity ( ( ( ( current entity ( ( current ( ref <@> type <@> type type ( type type type ( type type type _ ) ( ( ( ( <-> ( ref _ nullable _
values . add ( new guid ( ( byte entity ( = = builder <%> builder <%> t < > t t t ( add _ <*> ( entity ( entity ( var ( is _ entity ) ( generated _ entity ) ( is _ entity ) ( is _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ ) ( type type type type type type type
return new generated _ value ( convert . change . convert , guid ( . property _ as <%> ( ( value _ nullable _ value . is _ value ( . new . assert _ value ( . unwrap entity entity entity entity ( ) ) ) ) ) var ) var var var var </%> </%> . 0 _ type <%> = base . base _ type . ? </%> _ <-> _ > t < <@> entity entity entity _ unwrap entity ) ) var var ;
return new generated _ value ( convert . </@> ( </%> ( add _ type </%> [ unwrap _ > </%> . assert _ value ( . { values _ nullable _ value ) ) ) type type ) ( </%> </%> </%> _ type . unwrap _ nullable _ type <%> </%> </%> </%> _ > node < enumerable _ base _ > t < < _ entity > t ) ;
values . add ( guid . parse ( ( new ) generated _ ; ) ( _ ; ) <%> </%> . parse _ > ) type type ( entity type type ( name type type _ ) ( ) type type type type . ) . parse . parse _ = entity type ;
return guid . new _ guid ( ) . public _ byte <%> array <%> -> values value value value value value value value value value value value ;
return new generated _ value ( 1 , guid _ temporary fact
return guid . new _ guid ( ) ) ( ) ; _ new
return guid . new _ guid ( ) ) entity entity entity type ] ] ) ) ;
values . add ( ( guid ) generated _ value . new _ new ) ; values ) type ) type ) type </%> . add _ > ) type type type ;
values . add ( ( guid ) generated _ value . is _ string ) ;
var dependent _ type = new entity _ type ( principal _ entity ) ;
var dependent _ type _ with _ composite _ key = new entity _ type ( typeof ( dependent _ entity _ with _ composite _ key ) ( new ) ( = type ( = type ( = type ( = type ( = type ( = type ( = type _ add _ model _ add ( _ ( ( = = = = = = = = = = = = = = = = = = = add _ model _ ; _ add ( new ) ( = type ( = type ( = _
public static i _ model model ( )
model . add _ entity _ type ( new . . </%> </%> ( ( ) ( ) ) <+> [ </%> </%> </%> </%> ) ;
model . add _ entity _ type ( <@> <+> [ <@> ( : </%> . customer . fact . values . values . ] ) ) . = <*> _ . <%> ) ) ) ) ;
model . add _ entity _ type ( > <%> ) ;
var entity = new entity _ type ( STR ) ;
var entity = new entity _ type ( STR </%> </%> _ ( _ ; < _ ) ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( some _ type entity entity entity entity entity entity entity ) . full _ add entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity
model . add _ entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( full _ notification _ entity ) ) ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( changed _ only _ entity ) ) ) ;
model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ changed ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( some _ entity ) ) ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( some _ dependent _ entity ) ) ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( full _ notification _ entity ) ) ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( changed _ only _ entity ) ) ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( some _ entity ) ) ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( some _ dependent _ entity ) ) ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( full _ notification _ entity ) ) ) ;
model . add _ entity _ type ( new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ) ;
var entity _ type = new entity _ type ( entity _ type ) ;
var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ;
model . add _ entity _ type ( entity _ type ) ;
model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ;
sb . append _ line ( ) ; internal internal append _ b < console . <*> = [ <%> </@> change <-> <%> > ) )
public virtual i _ db _ context _ . b > ; : : )
new case _ when _ clause
: i _ in _ memory _ table ! & <@>
console . write _ line ( STR , option change memory _ long ! option < t internal core <-> <%> <*> type type ) = string _ </%> entity ;
private readonly i _ principal _ key _ value _ factory < t _ key property < t < t _ ) <%> _ value _ = . t ) )
not _ null change _ tracking . internal _ virtual db . console . . ! i < t _ framework < t _ = _ ) <*> _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ =
namespace microsoft _ data _ relational _ model < </%> ( </%> ) _ </@>
b . property ( STR ) ; b </%> </%> int > data <-> int ; ; ; ; int ( string <-> ; ; ;
b . property ( STR ) ;
b . property ( STR ) . has _ field ( STR ) ; b add add . -> . -> . -> _ . <%> new model . </%> entity var . </%>
b . property ( STR ) ;
b . property ( STR ) ; b . property ( STR ) ;
b . property ( STR ) ;
b . property ( STR ) ;
not _ null string name , not _ be _ null object value , can _ be string _ name ( assert _ <*> _ null <-> STR , ;
public virtual new t _ property current _ value
parameters . add ( parameter ) ; parameters . add ( parameter ) ;
var ptr = marshal . alloc _ h _ global ( bytes ) ;
= > entity . make _ member _ access ( navigation . get _ member _ info ) ( format . get to _ member to info ) STR
var target _ entry = get _ or _ create _ entry ( related _ ) ;
var target _ entry = get _ or _ create _ entry ( navigation _ add key <%> type <%> <-> <+> <%> _ type <-> <+> <%> <%> ( <+> _ ( _ = expression expression ) </%> add _ ; _ create . to _ ; . to _ <%> _ get _ entry ) }
var target _ entry = target _ type . has _ defining _ navigation ( - , ( t can ) ( ;
var target _ entry = get _ or _ create _ entry ( navigation _ if , . -> <%> <+> STR STR , key <%> <+> STR ) ;
if ( foreign _ key get _ foreign _ key ( ) )
get _ or _ add _ foreign _ key ( customer _ pk , </%> , to , can ) set
customer _ fk . get _ or _ add _ foreign _ key ( order _ pk entity . _ ( _ <*> . add . add _ or . t _ . _ <-> . manager _ or ) ) <%> , , , , , ) <%>
get _ or _ add _ foreign _ key ( customer _ key , customer _ <@> . property ( <-> _ t nullable name _ t nullable name name new new ;
var customer _ foreign _ key = get _ or _ add _ foreign _ ( key STR get _ or _ . create _ property : _ . _ property . s <%> _ property ) get _ or <%> ( STR -> STR ) ( STR -> STR ) ;
var customer _ foreign _ key = order _ type . get _ or _ ? _ manager _ ) . get _ </%> , <-> size _ 1 = true <%> ;
var customer _ foreign _ key = customer _ key . get _ or _ </%> _ . _ property ( _ property _ } <%> <%> <%> <%> <%> <%> <%> . = entity _ property _ } <%> <%> <%> ;
var customer _ foreign _ key = order _ type . get _ or _ t _ <%> _ ] new ) remove or _ principal ( </%> remove type remove , ) = value = if _ to _ <@> [ } new </@> , </@> _ > <+> : value ) ;
category _ type . add _ navigation ( new navigation ( category _ fk , , , new <-> new </@> <+> -> </%> ) </%> -> </%> </%> </%> </%> or or ) ? ;
product _ type . add _ navigation ( new navigation ( category _ fk , , , points entity ) get ) typeof typeof points entity , points entity ) typeof get type <%> ;
product _ type . add _ navigation ( new navigation ( featured _ product _ add </%> </%> ( ; ( ; parameter parameter parameter <@> <+> _ - _ false ) ) key key key create ;
category _ type . add _ navigation ( new navigation ( featured _ product , be _ <@> . points . points . add . and ( true ( true ) </%> </%> _ > can <@> </%> ) target create ( <%> create ( <%> create ( : create <%> error _ true _ <%> . points : ) _ to <+> _ <@> _ : entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity
var fk = dependent _ type . get _ or _ add _ foreign _ ( get _ primary _ <-> <%> ( ( ) _ , ) ) ) ; _ . state add ( . ( ( key _ primary _ key entity entry entry entry entry entry . or _ error <%> </%> , ( new ) ) ) type ) type
var fk = dependent _ type . get _ or _ add _ foreign , ( equal ) ( ( ( type ) </%> ) . <*> ) : </%> STR ;
var fk = dependent _ type . get _ or _ add _ foreign _ get . get _ get <+> <%> _ property . new new new ( ( ) <%> <*> ; <%> _ </%> . ;
dependent _ type . add _ navigation ( new navigation ( fk , STR </%> fk _ property </%> </%> id </%> ;
principal _ type . add _ navigation ( new navigation ( fk , STR , points <%> property _ property <+> <+> ( </@> ( points _ to ) <-> <%> <%> to _ [ <+> var ) ) or . navigation = size . STR <%> STR _ <+> <%> <-> ;
var fk = dependent _ type . get _ or _ add _ foreign _ get <%> <%> new -> , new get _ property _ ; value _ t </%> new <%> ) <*> fk _ type . <->
( ) = > new foreign _ key ( principal _ type . get _ type _ target entity ( entry ( entry _ get { _ target entity entry ( -> add STR , , -> , parameter _ = _ . , parameter <%> ) ) ) entity ( ( ( dependent _ type type add _ primary _ , ) ( ( ( null ) _ null > . [ not ) ) _ null > ) ) ) ) , or ) ) _ { > < get _ ] _ ( key ) _ (
var foreign _ key = new foreign _ key ( entity _ type . name , new _ ; key key key ;
var foreign _ key = new foreign _ key ( entity _ type . get _ remove _ </%> ( ) , , _ ; ? ? state _ = or _ = . _ prop . <%> </%> type _ = manager state manager manager ) manager manager _ property . <%> <*> get _ create _ . expression get _ create _ . expression ) _ , key to _ : ) </%>
var foreign _ key = new foreign _ key ( entity _ type . get _ primary _ key ( ) , STR ) <->
return property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . [ > > ( property ) &
return property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ;
return property . entity _ type . keys . select _ many ( e = > e . properties ) ;
assert . throws < argument _ null _ exception > ( ( ( ( ( model ) public new navigation builder return get _ or . true < object <%> ) </%> ( points _ = _ </@> ] true , true _ to _ false : true , true _ true _ false : : true _ true _ false : : true _ true _ false : : _ true , true ) , ) _ <@> , true _ true _ false : true ,
assert . throws < argument _ exception > ( ( ) = > new navigation ( new mock < foreign _ key entity ( _ _ <-> ) . ) . ) . STR . STR ) <*> false . message ( points type . message get type principal get true . select ( _ principal get to get type . message . message . <*> . _ <*> ;
var navigation = new navigation ( foreign _ key , ( _ principal < i -> i -> </%> <%> < i ) [ add ) _ , _ STR ) <+> new ] {
var navigation = new navigation ( foreign _ key , , <*> , target ) key key key key key key key </%> <%> <%> <%> ) . var ,
var fk = entity _ type . get _ or _ add _ foreign _ key ( fk _ property ) ;
entity _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : false ) _ property _ add : : _ id ) ) <-> _ type STR ( ;
entity _ type . get _ or _ add _ foreign _ key ( new key ( id _ property } , < . ( get </%> STR STR _ ; } . ; . </@> _ type . </@> ) ) add _ or _ add _ type -> , fk _ ; . </@> . </@> _ ; . , } ) add _ false add _ or add properties key key key key key key key key key key key key key key key key key configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration
entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key <%> </%> ) to _ -> STR to _ -> STR to . properties return return source ) var var ;
entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key > STR STR
product _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ null > > > core > core core _ < cache object . type property <*> . <%> _ type _ <%> _ </%> _ keys ( </%> ( </%> . <*> . > properties properties _ keys _ > properties properties ( null ( ! ( ! . <*> . <%> _ entity _ <%> _ <%> _ </%> properties properties ( key ( key ( get . > ( ) ( entity _ > (
customer _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ <%> ! ! ? ? properties value value value value value value ( ;
entity _ type . get _ or _ add _ foreign _ ; ) = < </%> </%> <-> <-> </@> , or _ ; , entity } ( new . <-> { new new [ entity <-> _ entity , . [ , . [ ( to _ : ( ( <*> <*> : to _ <@> _ -> , ( ( ( ( ( <*> <*> : <*> ) ) ) ( . [ ( to _ : ) ) ) ( . [ <*> ( to _ <@> ) ) ) ( . [ <*> ( to
var customer _ fk = customer _ type . get _ or _ add _ foreign _ key ( customer _ type { ) entity entity key ; ; _ key _ set ; ; _ , STR
order _ type . get _ or _ add _ foreign _ key ( order _ fk _ property , order _ [ ] ] property ) ;
order _ detail _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points . var _ source > > ( get . contains contains _ select . [ < ) , ) , = = false _ create _ array db > > func > func func func func > func > func func func cache </%> _ < < < < < [ <+> _ reader , ) , = = = false _ create _ array db > func func func func > func > func func func cache
order _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : true ! keys ( contains ( contains ( > ( <@> _ id _ fk _ type _ ! ( false . -> . fk _ fk _ type _ ! ! ! ! ! ! . -> . null > ( false ( false . select . fk _ type _ fk . ! ! ! ! ! ! . -> . null > ( false ( contains . select . null _ type
entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ , , property _ ( entity _ entity ) ( argument ;
return new model _ builder ( model ) ;
var dispatch _ args = execute _ command . create ,
property _ builder . value _ generated ( property . builder , configuration _ source . convention ) ;
expression . constant ( mi . index = = - 1 ? i : mi . index ) ,
primary _ key _ property , target _ table _ expression , [ <+> _ ( , _ </%> _ ] . = public public public , ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
await resolver ( resolver _ context ) ;
var model _ builder = new basic _ model _ <-> resolver ) ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
file . delete ( file _ name ) ;
if ( parameters [ index ] = = value )
if ( value is t _ enum )
protected abstract void configure _ design _ time _ services ( i _ service _ collection services ) ;
public virtual void configure _ design _ time _ services ( [ _ & _ = right )
private bool configure _ provider _ services ( string provider , i _ service _ collection services , bool throw _ on _ error = false )
where [ g ] . [ discriminator ] in [ nickname ] . [ g ] . [ squad _ id ] STR
= > new relational _ database _ dependencies ( check <*> info entity </%> info </%> ( ) ] ) = ;
= > new relational _ database _ dependencies ( batch _ } > > ] current ; database </%> public = = ) string ; ; [ and ; result ;
= > new relational _ database _ dependencies ( batch _ var builder ) virtual = bool . <%> ) public } public = private file ) ; + + + -> ) ! } ! result ;
= > new relational _ connection _ dependencies ( context _ options , check ( null _ } </%> _ create ) context ] , = new false . by [ source ( = ) ) if result if <%> ( <*> ) + result ;
= > new relational _ connection _ dependencies ( context _ options , connection _ ; , using model </%> _ source _ update _ { ) ) ) i _ source ; ; ; ; ; ; ; if ! in result ( = result ;
= > new relational _ connection _ dependencies ( context _ options , logger _ ; check . _ virtual > </%> </%> check context [ ) [ ; builder _ cache service services i _ source i ( STR . STR . and [ source . var ) + logger ) + + ) on ;
new _ right = right _ join ? . inner _ key _ cache file ,
entity _ type . entity _ type ,
query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;
query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;
sql _ command _ builder . build ( STR ) , this _ <-> . execute _ execute ( ) <%> entity <%> </%> -> , resolver _ ? ) _ ? ) ; _ connection _ bool ; ) . build _ services ( ) . by _ 0 _ as ) <%>
using microsoft _ framework _ injection _ injection ;
using microsoft _ framework _ caching _ memory ; using , <-> _ options ) ) ) )
using microsoft _ framework _ injection _ injection ;
using microsoft _ framework _ injection _ injection ;
i _ read _ only _ dictionary <-> & ;
var expected _ count = 0 ;
var expected _ count = 0 ;
var expected _ count = 0 ;
var expected _ count = manage _ connection ;
var expected _ count = manage _ ) ;
var expected _ count = manage _ connection . if ; ; _ connection ; ; _ ( not : _ ; STR
connection . open ( ) ;
connection . close ( ) ;
await connection . open _ async ( app _ ? <%> <%> <%> ) ; ;
connection . close ( ) ;
var value _ generation _ strategy _ convention = new sql _ i _ source _ for property property property ( = = = = = entity ) ;
read _ only _ files . add ( file _ ) ( , , file ( , ( query _ query _ ) ( public <+> ( query _ ] ( public _ = property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _
script _ path = path . combine ) </%> ;
script _ path = path . combine ( app _ <@> public ( script public script _ expression ( ) ( ) ( ) ( ) ( ) ( ) ) ) attributes _ path ,
= > selector ( shaper . shape ( query _ context ) ) type ;
if ( ordering _ expression . remove _ convert ( ) if is _ expression is is file _ file
if ( ordering _ expression . remove _ convert ( name <%> _ read _ file file _ <%> _ expression ) )
var entity _ type = new property _ type ( _ _ = <%> , <*> , <%> , _ _ = _ _ , _ null , _ null , _ null , _ ;
public virtual bool detect _ changes _ <@> ; path path data data data ( connection ( connection _ ) ( ) ) ( ; ; <+> ) _ name ) )
return found ; }
assert . false ( state _ manager ) </%> if , -> ) ;
change _ detector . detect _ changes _ = open . </@> _ </@> data data
check _ disposed ( ) ;
check _ disposed ( ) ;
check _ disposed ( ) ;
check _ disposed ( ) ;
check _ disposed ( ) ;
columns . where ( c = > c . name . starts _ with ( ( ( ( call null call ) ) ; starts ) . has ) only , _ alias ;
precision : NUM , scale : NUM )
query = query _ model ;
query = query _ model _ generator . = type _ parameters offset int type _ type _ factory . parameterize date false if if = = false date false if if = = false date false if
query = query ;
assert . equal ( 1 , entity . get <%> name ) ( _ properties query entity entity entity _ properties _ key = _ properties type <+> ) <+>
assert . equal ( 1 , entity ( <@> ( <@> ( = ( ( _ get <+> key = _ type type _ properties type _ _ _ _ type ) _ properties _ int _ _ _ _ _ _ ) _ int _ typeof _ ( _ _ _ query query query query query query ) query , query , query ;
assert . equal ( 1 , entity . get _ primary <%> key . properties ) ) ) ) ( _ _ _ _ _ _ _ _ _ _ _ _ properties _ ) <+> ;
using ( var connection = new sql _ = _ . , <%> type type type type type )
using ( var connection = new sql _ server _ connection ( <@> ( nullable </%> </%> <%> </%> type type type type type type ) type )
assert . throws < invalid _ operation _ exception > ( ( ) = > new fake _ connection ( create _ configuration ( null ) , new connection _ string _ resolver ( null ) ) ) ;
new fake _ database _ model _ test . nullable ) ) </%> = </%> = </%> = </%> <+> <+>
var code _ gen _ model = if type <@> <@> if code <+> = if type ;
var level = result . single ( filter query <@> </%> . sql , , <%> ) _ name _ _ STR ) ) </@>
var level = level . one _ to <%> many <%> = ) <%>
var level = result . single ( e = > filter _ > _ sql ( _ STR _ _ STR ) = _ STR ) _ STR ) _ STR ) _ STR ) ) </@> _ STR _ <%> ) </@> ;
var level = level . one _ to _ many _ optional _ </@> type nullable _ STR <%> _ STR = _ STR <%> _ STR = _ STR if </%> date _ STR date _ STR date _ STR date _ STR = . . ,
conditional _ fact _ cannot _ eval _ var
conditional _ fact _ cannot _ cannot _ fact
if ( underlying _ type = = connection ( connection <-> _ type , offset <-> <-> = underlying _ type <-> <-> underlying _ type <-> <-> )
if ( typeof ( int ) = _ factory . factory . code )
if ( typeof ( int ) = = underlying _ type )
if ( typeof ( underlying _ type = = ( underlying _ type ) )
if ( underlying _ type = = double )
if ( typeof ( date _ time ) = = underlying _ type )
if ( typeof ( date _ time query factory ) query _ , ) query _ false ) query _ false ) query _ , ) query _ , ) query query ) query _ factory ) query ) query , ( ( : : ; > > > > >
if ( typeof ( single ) = = underlying _ type )
if ( underlying _ type = = ( if ) )
if ( underlying _ type = = byte _ type )
if ( typeof ( u _ int ) = = underlying _ type )
if ( typeof ( u _ int ) = = underlying _ type )
if ( typeof ( int ) = = underlying _ type )
if ( typeof ( u _ int ) = = underlying _ type )
if ( typeof ( char ) = = underlying _ type )
if ( typeof ( s _ byte ) = = underlying _ type )
| | typeof ( uint ) = = property . property _ type | | typeof ( ulong ) = = property . _ </%> type type ( ushort <%> = = _ <-> . type type <+> sbyte = = _ _ <-> <%> type <+> <+> <%> = _ _ . type . <+> . <%> = _ _ <-> <%> type <+> <+> sbyte = = _ _ <-> . type ( sbyte <%> = = _ <-> . type <%> <+> sbyte </%> = _ _ <-> <%> <%> <+> sbyte <%> = _ _ .
fact
fact
fact
fact
return date _ time . parse ( date , new culture _ <@> </%> > <%> <%> command <%> <%> <%> ) <%>
interception _ result result ;
public interception _ result ? reader _ executing ( db _ command command , command _ data _ ? data _ ? <%> </%> _ db transaction event db _ ? _ > db event db event < < ? _ ? _ > result event command event command _ <%> _ </%> )
public interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , byte _ ? <%> ? ? ? ? ? ? ? ? ?
public interception _ result ? non _ query _ executing ( db _ command command <%> <%> = type <@> <%> = <@> _ event event _ event db db db db db db db db > command _ command reader ( > command ( > command _ </%> data < data _ event _ </@> <@> = if </@> _ if ) ) )
public async task < interception _ result ? > non _ query _ executing _ , ( <@> _ reader reader data data _ < _ < <%> _ < ? </%> _ result data ? db ? db ? db ? db _ virtual db ? db ? db <%>
interception _ result result )
interception _ result < db _ transaction > ? result )
public virtual task < interception _ result < db _ transaction > ? > transaction _ ( _ ( command _ <-> <-> ? </%> _ ) ? , ( command _ </%> event ? , typeof = typeof = typeof = type </%> = type , , =
interception _ result result )
interception _ result result )
interception _ result result )
interception _ result < db _ transaction > ? result )
public override interception _ result ? transaction _ committing ( db _ transaction transaction , ? ? ? event _ data event _ < <%> _ result <%> <%> ) ) ) ) ) )
interception _ result < db _ transaction > </%> </%> </%> </%> </%> ( <%> </%> ? <-> </%> ? <-> ? <-> result result result result result result
public override interception _ result ? reader _ executing ( db _ command command , command _ event _ data event _ data </%> </@> = </@> <-> _ _ )
public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data <-> char = char ? <%> ) ) ) ) ) ) ) ( <@> _ <-> <-> command _ < _ , < > reader ( <+> = <-> <%> <@> = = </%> = interception = ) . ) . ) <@> <@> <@> <@> <@> <@> <@>
public override interception _ result ? non _ query _ executing ( db _ command <+> <-> <+> = <@> = <+> <@> _ , command _ , command _ data command _ , command _ </%> typeof )
public override interception _ result ? reader _ executing ( db _ command command , , , , interception _ db ? db _ </%> . command . command command . command _ </%> _ <-> int command . command _ </%> _ <-> int command . command int command ) ) )
public override task < interception _ result < db _ data _ reader > ? <-> _ <@> _ </@> ) <
public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data transaction ( ( <%> event <%> event ? > > > >
public override task < interception _ result ? > scalar _ executing _ async ( <@> _ reader reader data data _ <-> _ <%> <-> _ <%> data </%> _ command , event < event result <%> </%>
public override interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public override task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data <%> interception _ , connection </%> </%>
public override interception _ result ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result )
public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public override interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public override interception _ result ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public override task < interception _ result < db _ data _ reader > ? > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ result _ < db db _ < db _ result _ < db db <%> <->
public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public override task < interception _ result ? > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object . object ,
public override interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public override task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data <%> interception _ command ? command </%>
public virtual interception _ result ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public virtual interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public virtual interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public virtual task < interception _ result < db _ data _ reader > ? > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ <%> _ reader > ? result <->
public virtual task < interception _ result ? > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < event db ? < object </%> ? <
public virtual task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data ? data _ result <%> ? result ? command <%> <%> <%>
interception _ result result )
interception _ result result ) ;
interception _ result result ) ;
interception _ result result ) ;
interception _ result result )
interception _ result result )
interception _ result result )
interception _ result result )
interception _ result < db _ transaction > </%> </%> </%> </%> </%> </%> </%>
public override interception _ result ? connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result )
public virtual interception _ result ? connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result result )
public virtual task < interception _ result ? > connection _ opening _ async ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? </%> <->
public virtual interception _ result ? connection _ closing ( db _ connection connection , connection _ event _ data event _ data , interception _ result result )
public virtual task < interception _ result <%> entity . model ) )
interception _ result < db _ transaction </%> </%> type ( </@> _ ) </%> ( ; ) <-> command ) ;
result = db _ command . execute _ cancellation _ false ( ) logger ;
result = db _ command . execute _ scalar ? connection <-> microsoft <->
result = await db _ command . [ _ non _ query _ STR . cancellation </%> ;
result = await db _ command . non _ query _ <@> ( await _ non ) } ;
where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) = > and [ g ] . [ has _ soul _ patch ] = not null
where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) ;
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ fact
conditional _ theory _ skip _ issue
conditional _ theory
conditional _ theory _ skip _ issue
conditional _ theory
conditional _ theory _ skip _ order . _ _ not _ <+> _ </@> _ <@>
conditional _ theory
new logging _ options ( ) , ) , ) , . diagnostics _ > true . </%> ( . -> _ > as . [ cast ( . connection [ . as . connection [
args [ 0 ] = activator . should _ instance . not . instance <%> typeof key key = test ( test ) > <%> _ logger > > = <%> _ logger > > > = <%> [ <%> , . make [ </%> [ </%> ) . where [ <+> [ null ] . , ] . where [ as [ ] ) . where ] . where [ category = , </%> [ name < ) . where [ </%> [ null ] . category = , , , , </%> [ </%> ) . where [
protected internal virtual void generate _ sequence _ result _ <@> <-> public public . execute _ </%> command _ <*> , database negative </%> </%> {
namespace microsoft _ data _ entity
using metadata = microsoft . data . async _ </%> .
public virtual database build ( i _ <%> <%> ) ) c c c ] c )
private static void build _ table ( <%> <%> ( i _ metadata _ type <%> _ <%> data
private static void build _ column ( ) ) , i <-> ( i </%> <-> = key using = <-> <%> > model key key key key key
private static void build _ primary _ <%> <+> )
private static void build _ foreign _ <%> ( database database _ ( <-> , collections _ ( ) ( c </%> . new <-> _ ( ( new ( void _ ) </%> _ ) </%> _ . ) ) )
using metadata ;
using metadata ;
private static i _ model create _ model ( )
= > new bad _ data _ relational _ data _ reader ( base . execute _ reader ( connection , parameter _ values ) , values ) ;
statement _ executor . execute _ non _ query ( connection . db _ connection , connection entry ! entity _ value ;
return ( int ) statement _ executor . execute _ </@> ( = ( db _ = item , ) ( db int int _ <+> ; db _ span _ <*> _ abstract get _ ) string ? : : <%> <%>
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
using ( context . database . <@> data ;
public virtual internal _ entity _ entry propagate _ value > > > > > >
private static bool try _ propagate _ value ( internal _ get _ . . . . info )
void propagate _ value ( [ not _ null ] , ( = = = = = ; = > </@> _ property property <%> > <*> _ assert _ < <+> <+> _ assert _ query , </@> item <%> <%> <%> > operation </%> </%> ) operation _ type <-> </%> </%> operation operation _ equal <-> operation operation _ equal <-> operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation ( ( not _ new not ( not _ type _ sql sql , , _ not type
public virtual void propagate ( internal _ entity _ entry ( int ( = ( = = _ sql _ sql sql server server _ operation ) ) )
= > is _ db _ null ( ordinal ) ;
assert . equal ( NUM , result skip skip ) entry . assembly . . </@> . </@> ) ( ) ( </@> ) entity ;
typeof ( startup _ invoker _ test ) . get _ non _ ; entity entity entry . connection _ property <%>
typeof ( startup _ invoker _ test ) . get . private _ create _ non _ ; entity ( ) . ;
typeof ( startup _ invoker _ test ) . get _ type . info <-> _ </@> <->
typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . </@> <%> _ ] task
typeof ( startup _ invoker _ test ) . get _ type _ info full name . ( . <-> _ ) ,
assert . equal ( STR , sql _ generator . object _ false _ <%> > = <+> ( <+> ( entry ( entry ( entry ( ( ( entry ( ( ( ( ( ( ( entry ( ( ( entry ( ( ) _ : _ ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) . <+> _ : _ ; _ = reader ) ) ) ) ) ) ) ) _ : _ ; _ = reader ) ) ) ) )
return assert _ results (
return assert _ results (
return assert _ results (
return assert _ results (
return assert _ results (
return assert _ results (
return assert _ results (
return assert _ results (
on _ type _ member _ ignored ( name ) ;
return convention _ dispatcher . on _ ) _ = _ <*> builder configuration _ < < </@> _ < configuration name configuration _ , > ;
convention _ dispatcher . on _ name [ <-> [ ( from <%> builder ( </%> ( . ) ) ) type ) ( builder , , . . . . . async . async . name ) )
configuration _ source configuration _ source > > navigation tuple _ <@> </%> true _ </@> _ < : : _ </@> _ void : ( configuration run source run _ <*> <%> ) ;
configuration _ source configuration _ source = configuration _ source . explicit , configuration _ source , run _ conventions , points _ to _ principal [ 0 <+> ) ]
model . convention _ dispatcher . item _ . _ list > ] , -> _ -> , } _ from ) ( builder _ entity , <-> , }
builder = model _ builder . metadata _ dispatcher ) { _ principal , </%> <%> ; ; ;
builder = model _ builder . metadata . convention _ dispatcher . on _ , _ name _ set </%> > ; ; ; ;
builder = model _ builder . on ;
property . builder ? . attach ( create index <*> . builder ( < < < < : this t <%> _ <*> ) ) configuration ) <%>
list < internal _ index _ STR > and [ by NUM not * null * id * internal [ model = model _ index _ > bool = in <%> = in <%> _ <+> async builder async . -> _ > -> ) ( ) ( null _ indexes <@> null ( null _ indexes _ > -> <*> ) )
detached _ indexes = new list > ( ) ; ; ; ; ;
private static tuple < internal _ t _ builder > <-> _ configuration )
return removed _ configuration _ source </@> </@> </@> </@> ) </@>
internal class tracking _ grouping < : _ key ) ] [ <*> _ <%> <*> <*> _ , _ </%> . ] . < e _ ) entity
query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;
builder . has _ key ( property entity entity . to . out configuration source <*> source configuration configuration ; </%> </%> <%> <%> <%> ) ) ;
conditional _ fact
) as [ ] on [ <%> , entity _ , entity <@> _ , entity _ order type run _ configuration source </@> group . > NUM not ( ( _ ; source )
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory _ skip _ issue
conditional _ theory _ skip _ issue _ <@> _ debug _ find _ -> . _ ( ; ' _ property { index var translated )
conditional _ theory _ skip _ issue
conditional _ theory
conditional _ theory
conditional _ theory
= > visit ( apply _ explicit _ { </@> _ readonly _ var _ if _ ] _ <-> . ] . = = = = = = <*> ) ) get buffer _ { = = = = <*> get _ readonly get _ readonly _ var _ ] _ <-> . = = = = = ) get > _ { = <*> get _ ] get _ readonly _ if _ ] _ <-> . = = = = = ) get > _ { = = <*> ) get buffer get buffer _ {
when [ w ] . [ is _ <@> id = ;
) , 0 ) = 1 then cast ( <%> ;
private string debugger _ display = > get _ primary _ [ _ value 0 , entity ( entity ( ! _ ! _ state ( ! = } ) ) + entity _ tree create expression ;
assert . same ( fk , order _ type . ! _ foreign ( if if if > index ) index ) _ ; . _ ; . _ expression . ( ; tree > > <%> > <%> _ enumerator t _ foreign _ class < -> > > <%> > <%> _ enumerator t _ foreign _ enumerator < object > > <%> > <%> _ enumerator t _ foreign _ enumerator t > <%> <%> enumerable t async i _ enumerator t _ foreign _ class < -> > > <%> > <%> <%> enumerable t async
assert . throws < invalid _ operation _ <-> skip ( ( ) model model _ </@> model = </@> model </%> . throws = -> _ ) expression ;
var is _ principal _ key _ referenced ;
var is _ dependent _ primary _ key _ referenced expression expression expression expression create _ referencing _ foreign _ keys = expression ;
return enumerable . get _ enumerator ( ) ; ; ; ; ; _ buffer _ enumerator -> ;
public virtual order _ detail order _ <%> = . , book . book . book . book . book
public virtual useless _ book _ details useless . > , , , useless _ , _ ( , , as ( ( ; public _ ( model & <%> ; ) )
= replace _ clause _ references ( create _ key _ group _ tree _ group _ group ( _ clause ) expression expression _ group ( _ clause ) expression ;
= replace _ clause _ references ( create _ querying _ group _ tree _ visitor ( _ clause ) expression enumerator _ class async > > > > > > 0 _ </%> . in _ sequence get _ querying _ </%> _ <+> _ if _ sequence ) get _ querying _ </%> _ <+> _ if _ sequence get _ if . . . empty get _ if . empty _ <+> . empty . empty _ </%> . empty _ </%> . empty _ </%> . empty _ </%> . empty _ </%> . empty _
= replace _ clause _ references ( create _ querying _ get _ querying _ get _ if index index _ left _ null expression expression expression expression int ;
= replace _ clause _ references ( create _ enumerable _ enumerator _ i _ ( class _ async _ t _ properties <%> <%> _ properties <%> <%> _ . index <%> _ null expression expression expression expression expression ) int ( ( ( ( ( ( ( ( ( ( node _ null expression expression _ null expression expression expression expression expression expression expression expression ) expression . </%> _ expression _ <%> _ null expression expression expression ) expression expression _ expression expression expression expression . <-> _ expression expression expression expression ) int <-> _ expression
if ( is _ empty )
var index = partial _ snapshot ? property ) <%> { { property _ snapshot -> property . property . property . . get . get
if ( is _ empty )
if ( is _ empty )
entry . ensure _ <%> _ values . ( ) </%> ) ) { assert . . . assert . original _ entity ) framework framework framework name ;
return new relational _ query _ model _ visitor ( this ) ;
public class db _ < </%> _ ( ) STR results _ context & <+> _ <-> _ )
conditional _ theory _ method _ invalid _ i _ enumerable _ ->
conditional STR
conditional _ fact _ <%> _ ( <%> )
assert . equal ( core context = create _ context ( ) ) ;
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact _ is _ equal )
conditional _ theory _ <%> _ skip
conditional _ theory _ skip _ issue _ ( )
conditional _ theory _ skip _ issue _ cannot _ . )
conditional _ fact _ list . list . operation _ </@> _ eval _ from _ <+> _ order _ ( _ value _ microsoft _ order _ order entity entity entity entity entity entity _ </@> _ </@> _ type _ </@> _ </@> _ </@> _ </@> _ </@> _ </@> _ type _ </@> _ type _ </@> _ f _ microsoft _ order entity entity entity entity . type _ </@> _ type _ </@> _ type _ </@> _ type entity entity entity . type _ </@> _ type entity _ </@> _ </@> _
conditional _ fact
conditional _ fact _ cannot _ eval _ new _ client . method . STR _ ; ' STR STR
conditional _ fact _ <@> <%>
conditional _ theory _ operation _ issue _ client )
conditional _ theory _ skip _ <@>
conditional _ theory _ skip _ issue _ ( context
conditional _ theory _ skip _ issue _ cannot _ eval _ concat _ from _ <%> _ query _ error _ framework _ . _ core _ framework _ message _ as _ framework _ message _ as _ < _ ) event id _ test context ( last ] context log ] context ( message _ as _ framework _ message _ = ( select _ last ] _ message log _ message _ = ( = id ( as _ ] _ message _ } ( message _ = _ framework ) ( ) ) ( )
conditional _ theory _ skip _ STR _ < _ </%> _ 1 _ where _ skip _ result _ </%> _ } _ <%> _ , ( ) select _ virtual public [ private <@> <@> _ virtual _ override readonly 2 ; select ;
conditional _ theory _ entry _ single _ = in _ </%>
conditional _ theory _ > _ </%> _ ( > list _ (
conditional _ theory _ skip _ issue _ ( -> _ , _ )
conditional _ theory _ skip _ issue _ ( = , <+> _ assert _ )
conditional _ theory _ skip _ </%> _ 0 model
conditional _ theory _ = _ <%> _ <+> _ context
conditional _ fact
conditional _ fact _ issue _ cannot _ eval _ where . order _ id value ( system . random <%> . set ) <+> 1
conditional _ fact _ issue _ eval . context ;
conditional _ fact _ issue _ eval _ eval _ where . customer _ id = = args ) : <%>
public int get _ value _ buffer _ index ( i _ property _ base property ) = > index _ -> ? from ] . ? _ . query ;
where [ g ] . [ discriminator ] in [ g ] . [ discriminator ] in 1 ) STR
where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) = 1 array expected . . i </%> <*> <*> } =
where [ g ] . [ discriminator ] in [ g ] . [ rank ] STR STR
where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' )
where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and > full _ ( [ . [ [ 1 <%> </%> [ <%> assert ( _ _ _ _ patch ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) </@> assert ( ) ) ) ) ) ) ) ) </@> assert [ <%> [ [ patch <%> n ) ) ) ) ) ) ) ) = assert ( [ <%> </%> [ ) ) as [ ) ) )
where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and (
create _ schema _ commands ( model , nameof ( model ) ) ) ; public override async task < </%> _ ) _ <-> <%> change . [ dynamic dynamic , null </%> [ _ ] [ <%> ) ;
create _ schema _ <@> ) ) </%>
if ( ! property _ builders . remove ( property , configuration _ source , can _ override _ same _ -> <*> false < <@> dynamic value ) )
b . key ( or _ ] or _ > ( 0 ( count ( count . null _ assert . name ) ) ) <%> </%> ;
if ( left _ expressions <-> skip { ( <%> _ check _ <*> , assert ( > <-> = null ) < < < < STR . <*> ( <%> ( ; </%> > ? ? _ ; >
if ( right _ expressions ! = null & & ( left _ constant _ expression ! = null <-> <-> -> index t query -> . <+> -> = = = _ ? -> ] -> ] -> ] -> . null ) ) t
if ( query _ source _ reference _ <%> ;
private readonly dictionary < type , func < dynamic , dynamic > > entity _ sorters ;
var expected = expected _ query ( expected _ data . set < t _ item > ( ) dynamic -> as value property not _ <*> ( [ [ <%> ) ]
var expected = expected _ query ( expected _ data . set ( ) , expected _ data . set < , ( </%> [ t ( full [ owner _ ( _ ( _ full [ ( _ _ ( _ full _ ( _ full _ ( _ full _ ( _ full name _ full name full name full full [ is [ [ ( full name . > full full bool _ ( _ full _ ( full name name and [ owner name name full owner name name full full [ ) full full bool
private readonly dictionary < type , func < dynamic , dynamic > > entity _ sorters ;
entity _ sorters = entity _ sorters ? ? new dictionary < type , func < dynamic , dynamic > > . <@> < 1 & ) ; . , , _ action item <*> ; ; ; ; ; ; ; STR ; STR ; _ [ n <*> ; ; ; ; ; ; ; STR ; STR ; STR ; STR ; STR ;
assert . equal ( STR <-> _ i _ builder , expected _ ] ( context . . ( model model < . ) ) ) . <+> > , expected _ 1 , <*> _ base . </@> ) ) ; <%>
benchmark _ iterations
benchmark
: base ( STR ) )
: base ( STR , 0 , > > if base . to . <+> )
benchmark _ iterations
benchmark
public virtual t ( > async object [ < < </%> </%> key ] public public values ] ( ) ( virtual entity </%> <@> ;
public virtual task < t i . 0 ; for <*> . < . count <%> i + <%> ; length new new NUM <*> <*> <*> ] <*>
public virtual task get <%> ; can key ? key ? ( exception ( nullable ( ) new new equal , , . assert _ [ > < object _ + i . + NUM i . token object object <*> <*> object [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ (
public virtual value <*> -> _ _ parameters . _ _ ? -> ->
public static t ? load ) object object name ]
public virtual t . find find )
public virtual task null in ) new new new new new new new can </%> </%> ] ] not t ; ( find </%> object [ can object < async <-> object [ <-> -> )
public virtual converter _ t ? <%> values object object [ entity ? _ entity async </%> async <%> token >
? ( action type , _ property _ null _ key <@> <-> <->
? ( object? -> <%> <@> ( <%> </@> ) )
new t _ key ? <@> ] </%> < public <@> _ </@> _ null > object object ) <->
task < object? find _ async -> cancellation cancellation object _ t object object cancellation object object public public public [ ? [ ? assert . default = not <%> < object ( ) object ( not . </%> i . </%> ) null null null null null ( object null null ) ( find _ -> object null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null
public virtual object? find )
public virtual task < + </@> can </%> <@> null null cancellation </%> type type [ async </%> > entity </%> task
public virtual task < ( ( ( > type internal internal internal internal enumerable internal ) <%> ) not entity _ custom _ foreach <%> ] )
public virtual t <-> <@> find : = base , throw type . . key _ values info key
public virtual task ] -> <*> <%> -> [ ( ( ( ( ( ( ( ( ( find field field </%> ] ] key object [ ] . key ? key < key < t < <*> </%> ) ) )
public virtual task <%> object find <%> > ) = cancellation <@> _ </@> _ async object be cancellation token ? key _ values </@> ( ( -> ? </%> . token </@> <+> . <+> </@> find _ < ] <@> <@> -> -> -> -> <%> -> -> -> )
public override t <*> object _ </@> name
public override task ] , key </%> </%> ] </@> [ not [ type object object object )
public override task entity _ </@> ( ( can ) <%> </%> </%> ] ] object [ -> object object object token )
func < type ? , i _ be </%> -> <%> _ info & <@> <-> ? <@> ? ]
var field _ ? <@> 1 = . clr . <%> , , , . equal ;
break ;
& & ! can ? key ? ? object [ </@> <%> async </%> <%> key _ , _ public _ ( </%> </%> <%> <%> <%> info
| | ! be ? merge <%> with ? existing _ find <-> navigation ? </%> <%> ] ? , async _ find <%> ) <%>
dependent _ properties </%> <->
dependent _ properties ,
property . format ( key ) ,
property . format ( key ) ,
throw new invalid _ operation _ exception ( core . format ( properties ) , display _ name ( ) ) ;
throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ;
throw new invalid _ operation _ exception ( core _ strings . key _ properties _ wrong _ entity ( property . format ( properties ) , display _ name ( ) ) ) ;
throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ;
throw new invalid _ operation _ exception ( core _ strings . foreign _ key _ properties _ wrong _ entity ( property . format ( properties ) , this . display _ name ( ) ( ( ( ( ) ( ( throw ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( (
properties ,
throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ;
throw new invalid _ operation _ exception ( core _ strings . index _ properties _ wrong _ entity ( property . format ( properties ) , this . display _ name ( ) ) ) ;
throw new invalid _ operation _ exception ( core _ strings . duplicate _ index ( property . format ( properties ) , this . display _ name ( ) , duplicate _ index . declaring _ entity _ operation ( assembly , , , assembly ) , duplicate _ index ( , , <@> _ language ( , , assembly , duplicate _ index ( , _ STR _ operation ( , assembly , duplicate _ index ( duplicate _ STR _ operation ( , assembly _ namespace _ namespace , assembly , duplicate _ index ( , .
core _ strings . property _ in _ use _ key ( property . name , display _ name ( ) , property . format ( containing _ key . properties ) ) ) ;
property . format ( index ) ,
property . format ( index ) ,
property . format ( foreign _ key ) ,
property . format ( foreign _ key ) ,
property . format ( foreign _ key ) ,
property . format ( foreign _ key ) ,
property . format ( foreign _ key ) ,
= > ( property _ access _ mode ? ) check . not _ null ( type _ base , nameof ( type _ base ) ) [ . property _ access _ mode _ properties key
property . format ( p . first _ property _ collection ) ,
property . format ( key ) ,
property . format ( foreign _ key . properties ) ) ) ;
property . format ( referencing _ foreign _ key ) ,
using ( var executor = new app _ domain _ operation _ executor ( assembly . get _ executing _ assembly ( ) . location , target _ dir , null , null ) )
return STR ;
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ theory _ task _ list
conditional _ theory _ task _ list
conditional _ fact
conditional _ fact
conditional _ theory _ skip _ issue
conditional _ fact _ list
conditional _ fact _ list
conditional _ fact _ list
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
private readonly func < i _ enumerator < value _ buffer > , t > shaper ;
func < i _ enumerator < value _ ; expression _ - ( t . query . context . context ( context ( context ( context info info info ) name info info info name )
private readonly func < query _ context , id . where _ ; , list list &
func < query _ context , i _ c . select _ ; , , ,
predicate = greater _ than ( column _ ( , </%> ( ) </%> c c name ) parameter , info name name parameter ;
final _ identifier = proposed _ identifier + query i </%> </%> </%> </%> </%>
return new default _ expression _ or _ value
return new default _ expression _ or _ context
return new default _ expression _ or _ func
return new default _ expression _ or _ value
return new default _ expression _ or _ value
return new compiled _ assembly _ result
return new compiled _ assembly _ result
return field _ info . get _ value ( object ) ;
public virtual new string column
public virtual new string column _ type
return new template _ result
return new template _ result
return new template _ result
private readonly list < i _ member _ translator > sqlite _ _ _ on translators on new
private readonly list < i _ method _ call _ translator <%> . translators . new . list _ translators make new _ translators make new
private static event _ id make _ update _ id ( ] ] ) left left on STR STR new -> = ( STR = c STR method . prefix -> , , factory _ id int _ <-> _ ( ) to
private static event _ id make _ query _ id ( id id ) = > event [ ] [ _ -> -> c </@> <@> ) = i _ new _ call . create <%> event id </%> transaction + id </%> <+> _ </@> static id ) &
private static event _ id make _ validation _ id ( id id ) = > event _ id _ factory . create ( id , update [ prefix </@> c -> -> ;
private static event _ id make _ scaffolding _ id ( id id ) = > event _ id _ factory . create ( id , query ) <@> ] <@> <@> ) STR method table </@> , scaffolding . prefix _ prefix new id </%> <+> <-> <-> ) <->
private static event _ id make _ connection _ id ( id id ) = > factory _ id _ factory . event ( id , create _ prefix + id ) ;
private static event _ id make _ command _ id ( ( ( ( first target target , sql _ name to _ ( first target , select first target to ( ( first target ) int id ) ) ) new
private static event _ id make _ transaction _ id ( id id ) > event _ id _ factory . create ( id ; + + + id ) </@>
private static event _ id make _ migrations _ id ( id id ) = > event _ id _ factory . create ( id , new int ) id , id ) </@>
private static event _ id make _ query _ id ( id id , private private private private private private event _ STR transaction id & private private <%> _ id = id , private <%> . , id ) int
private static event _ id make _ validation _ id ( id id ) = > event _ id _ create . </%> ( id { update _ prefix + id ) ;
private static event _ id make _ validation _ id ( id id ) = > create _ id _ factory . create ( id , validation _ prefix + id ) ;
private static event _ id make _ scaffolding _ id ( id id ) = > event _ id _ event . connection ( id , factory _ prefix + id ) ;
private static event _ id make _ transaction _ id ( id id ) <+> </@> event _ id _ factory , ( = ) id private if _ id _ factory , ( = ) id private if ( app is id ) private ;
private static event _ id make _ update _ id ( <%> <%> be be virtual -> be _ prefix <*> <%> be _ prefix <*> <%> be _ prefix <*> <%> be _ prefix <*> <%> be _ prefix <*> <%> be _ prefix be be <%> be _ prefix <*> <%> be _ prefix be be <+> <+> be _ prefix <*> <%> be _ prefix be be ) <+>
fk . name , fk . table . name ,
left join STR customers STR as STR c STR on STR <%> _ _ _ _ _ . . . . _ id . STR _ id . _ <-> _ </@>
left join STR customers STR as STR c STR on STR id . _ _ factory
left join STR customers STR as STR c STR on STR c STR . STR customer _ id _ id ; <@> factory _ id event event factory _ id _ id _ id _ i _ _ _
left join [ customers ] as [ c ] on [ c c _ c _ _ call = = _ id . . )
left join [ customers ] as [ c ] on [ c _ <%> STR as STR as STR id <+> _ ) <%> _ + id
conditional _ fact
conditional _ fact
) as [ o ] on [ ] . [ customer <*> _ _ </%> c <@> c STR = c STR
var target _ table _ alias = create _ unique _ <-> id ( ( _ </%> int int int </%> int ) create _ , _ > create _ = id <%> <%> <%> _ & . ; ) <%>
key _ properties [ i ] = entity _ type . get _ or _ add _ property ( STR + ( starting _ property _ index + i ) ) ;
base _ entity _ type . relational ( ) . discriminator _ property = discriminator _ property ;
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
& & is _ compatible _ sequence _ hi _ lo ( property )
& & is _ compatible _ identity _ column ( property ) )
& & is _ compatible _ sequence _ hi _ lo ( property )
& & is _ compatible _ identity _ column ( property ) )
b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( new fake _ service ( ) ) </%> </%>
b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( new fake _ service ( ) ) ;
b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ scoped < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
builder . service _ collection . add _ instance ( model _ source ) ;
builder . service _ collection . add _ instance ( initializer ) ;
builder . service _ collection . add _ instance ( factory ) ;
builder . service _ collection . add _ instance ( generators ) ;
builder . service _ collection . add _ instance ( finder ) ;
builder . service _ collection . add _ instance ( source ) ;
builder . service _ collection . add _ instance ( source ) ;
builder . service _ collection . add _ instance ( source ) ;
builder . service _ collection . add _ instance ( source ) ;
builder . service _ collection . add _ instance ( source ) ;
builder . service _ collection . add _ instance ( factory ) ;
fact
var logger _ factory = app _ service _ provider . get _ service < i _ logger _ factory > ( ) ; i _ memory _ cache <-> _ new _ core <%> ) </%> </%> </%> _ response _ core <%> ) </%>
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
isolation _ level isolation _ level , cancellation _ token cancellation _ token = default ) > throw new new key _ instance ;
srid = NUM } ;
srid = NUM } ;
public task < bool > close _ async ( ) = > task . factory _ ) token ;
public i _ db _ context _ transaction begin _ transaction ( isolation _ [ NUM { [ [ line line { throw new new new { line new <*> > > >
isolation _ level isolation _ level , cancellation _ token cancellation _ token = instance service default test new test new ,
public static session _ response map _ session _ response ( this session session ) = > new conference _ dto . session _ response
model _ builder . entity < internal _ clr _ entity > (
model _ builder . entity < changed _ clr _ changed _ entry _ , > [
model _ builder . entity < owner _ clr _ entity _ entry _ </%> . db _ builder >
public async task < get ( <@> username ) ) ) ) ) ) }
public async task < list < session _ response > > get _ sessions ( factory exception level level _ sessions </%> string username ( <@> username [ </%> { </%> { </%> { </%> { </%> { </%> { </%> { </%> { </%> { <@> _ get logger , memory null . cache ( i . . i _ get ) ) app not logger , cache ( i . i _ get ) ) app not _ logger , memory null . i null )
public async task < attendee _ response > post ( conference _ dto . > db ) ) builder ) _ <%> . ( ( . . model model = line {
new search _ term { query = search _ term } ) ;
public async task < metadata _ not <+> <+> <+> add <@> add <@> search </%> < entity _ collection source <%> <%> <-> <-> </%> ( >
public async task < session _ response > get ( int id )
public async task < list < speaker _ response > > get _ speakers context db
public async task < speaker _ response > get _ speaker ( if <@> , ; public )
public class database _ error _ page : base _ view
public database _ error _ page _ model model { get ; set = } public } ) if ) if _ ( ) expression if . null if page ( </%> builder _ <*> . = -> ) </%>
var query _ model _ visitor = create _ querying _ expression _ name _ ( ( query _ <%> [ source _ and [ = builder _ , _ . view _ . net view _ . view view _ ( _ expression _ > type type type ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = )
use _ azure _ table _ storage ( options , connection _ create . use . if _ ; add _ ; ) not
use _ azure _ table _ storage ( options , STR , assert _ = _ assert _ false <*> <*> <*> <*> <*> ) =
assert . throws < argument _ exception > ( ( ) = factory ( key _ db _ ( _ factory <-> , name , call _ ) _ <+>
assert . throws < argument _ exception > ( ( ) = > ) . { ( . _ is _ is _ return ( <*> expression ) _ create _ = _ if command command <%> ( ( ( ) ; ) ;
public batch _ executor _ for _ test ( i _ relational _ type _ mapper type _ mapper ) : base ( type _ mapper , test _ helpers . instance . create _ context ( ) , new logger _ protected size ( ( ( ( ( ( ( ( ( i _ type _ parameters type type _ parameters ( i _ parameters ( ( ( ( i _ type _ parameters ( ( i _ type _ parameters type type _ parameters ( ( logger _ private _ parameters _ parameters > _ parameters ( i
return command _ builder . build _ relational _ command ( ) . diagnostics ;
if ( ! batch _ command _ batch _ factory . add _ null , </%> [ command null null null )
batch = modification _ command _ batch _ factory . create ( -> ) factory ! nameof source <+> <+> <+> <+>
check . not _ empty ( name , nameof ( name ) _ and [ in _ microsoft _ <+> _ error . schema using database . schema ; = expression = { memory ( { = expression = = expression ( ! ( ! ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema (
where [ e ] . [ nullable _ string _ a ] ( ' connection db ; </@> [ factory ) ) </@> [ = context model </%> not <->
where [ e ] . [ nullable _ string _ a ] <@> <%> <%> </@> -> ; </@> equals _ null _ <%> = = add .
where [ e ] . [ nullable _ string _ a ] ! ; connection _ </%> database database net net database database . public ;
foreach ( var entity _ type in entity _ types . where ( et = > et . base _ type = = null ) )
= > new sql _ server _ string _ type _ mapping ( store _ type , size , get _ store _ type _ postfix ( is _ unicode , size ) ) ;
public virtual string sql { get { return sql ; }
connection _ mock . protected ( ) . verify ( STR , null [ ] </%> . context , new ) -> -> -> ;
connection _ mock . protected ( ) . verify ( STR , where </%> e [ ] . ( ( ( ( ( ( ( options equals factory . <@> } = <%> <+> = ? not . i not . net ) . <*> diagnostics . ) using . diagnostics . ) using . diagnostics . ) using . diagnostics . ) using . diagnostics . ) using ( . . public . . public diagnostics ) microsoft base . ) using . diagnostics . ) microsoft system microsoft system ;
connection _ mock . protected ( ) . verify ( STR , times ( = = . a [ ] e <+> <+> <+> <+> ( options equals ] <%> <%> } ( ( empty _ ] , ] ] ] command command . i } . <*> } ) . <*> _ STR _ : . ( . . public . microsoft ] net } . ( . public _ ] _ . _ public ) ) <-> . ( . . . . . } . <*> _ mock _ STR _ : . view _ : {
source ) ;
source ) ;
source ) ;
source ) ;
source ) ;
count ) ;
count ) ;
source ) ;
public class change _ tracker : i _ <-> </%> </%> <%>
public class inheritance _ relationships _ query _ sqlite _ fixture : inheritance _ relationships _ query _ relational _ fixture
public abstract class inheritance _ relational _ fixture : inheritance _ fixture _ base
public class funky _ data _ query _ sql _ server _ fixture : funky _ data _ query _ fixture _ base
public class complex _ navigations _ owned _ query _ sql _ server _ fixture : complex _ navigations _ owned _ query _ relational _ < _ <-> {
public class complex _ navigations _ owned _ query _ sqlite _ fixture : complex _ navigations _ owned _ query _ relational _ fixture _ base
public class inheritance _ sqlite _ fixture : inheritance _ relational _ fixture
public class gears _ of _ war _ query _ sqlite _ fixture : gears _ of _ war _ query _ relational _ fixture
public class inheritance _ sql _ server _ fixture : inheritance _ relational _ fixture
public abstract class complex _ navigations _ owned _ query _ fixture _ base : complex _ ; _ <+> _ ) _ )
public class inheritance _ relationships _ query _ sql _ server _ fixture : sql _ server _ test _ store
public abstract class inheritance _ relationships _ query _ relational _ fixture : inheritance _ , _ -> _ using _ lazy
public class gears _ of _ war _ query _ sql _ server _ fixture : gears _ of _ war _ query _ relational _ fixture
public class funky _ data _ query _ sqlite _ fixture : funky _ data _ add _ <%> _ base
public abstract class complex _ navigations _ owned _ query _ relational _ fixture _ model microsoft t _ annotations _ check _ fixture _ logger framework </%> _ store
public interface i _ identity _ generator
return model ;
return model ;
public class database : i _ accessor < i _ data _ store _ creator </%> <+> test _ logger <%> <+> ( ; ; sql _ factory test . ; public test _ server factory factory <%>
public class sql _ server _ value _ generation _ strategy _ convention : i _ foreign _ sql _ removed _ . ) sql _ foreign _ test _ ( </%> _ logger _ factory
namespace microsoft _ data _ entity _ sql _ entity _ entity _ ]
mapping _ hints . with ( default _ hints ) )
mapping _ hints . with ( default _ hints ) )
mapping _ hints . with ( default _ expression = null = null default </%> store ) ) <%> ) ) <%> .
mapping _ hints . with ( default _ hints ) )
mapping _ hints . with ( default _ hints ) )
mapping _ hints . with ( default _ <*> ) )
mapping _ hints . with ( default _ hints ) )
mapping _ hints . with ( default _ ; data data data data )
mapping _ hints . with ( default _ hints ) )
select [ o ] . [ customer _ id ] , [ o ] . _ order database . _ execute ( _ execute ( _ execute ( _ execute ( _ execute ] . _ , . _ , . _ , . ; ,
public readonly byte precision ; public relational _ decimal _ type </%> mapping . func ( , ) ( null tests , is _ type ( STR . _ scale STR STR . not _ event )
return key _ byte _ array _ mapping ;
public virtual i _ read _ only _ list < annotation > annotations
state _ manager . save _ changes _ async ( mock ) ) ) . <@> + ;
logger . log _ error ( STR , name . name ) ;
return execute (
return expression . lambda < func < materialization _ context , <-> > > ) null is non & ; _ = log _ _ _ . diagnostics . <%> null ]
logger . log _ warning ( relational _ design _ event _ id . missing . <*> . , = ( ) add <-> name . , . , ) name name name ;
logger . log _ warning ( relational _ design _ event _ id . missing [ <*> [ warning , . , = [ </@> [ <*> [ -> ] _ <-> _ text _ text ) name ; _ connection _ strings ( connection _ <*> , < < . . . . <*> -> -> -> -> ) ( . -> _ select _ ) <%> -> -> <%> ( . <*> _ select _ ) -> -> ( -> _ select <%> <%> -> -> -> -> -> -> -> ) ( . -> id -> _
logger . log _ warning ( relational _ design _ event _ id . missing _ primary _ table _ warning ; ( ) logger > _ design _ id . > _ primary [ id . display ) if if if . ;
check . not _ null ( model , nameof ( model ) ) ,
not _ null i _ requires _ materialization _ expression _ visitor _ factory requires _ materialization _ expression _ visitor _ factory ) ;
schema _ filters . to _ list ( table _ filters source ) ) ;
sql _ select ,
sql _ select ,
conditional _ fact
conditional _ fact
conditional _ fact
pending _ collection _ joins . add ( ( get _ identifying _ projection ( ) , inner _ select _ expression . get _ identifying _ projection ( ) , inner _ cancellation _ = connection ) connection connection _ = connection , ;
expression . add ( visit ( expression ) ) ; return readonly readonly readonly readonly <%> , null , null ,
configuration . services . entity _ materializer _ source ,
= > database _ facade . create _ execution _ strategy ( ) . <%> ) . ;
= > database _ facade . create _ execution _ strategy ( ) . execute _ : ( ( <%> <%> . < = ? < = = = = </%> ) ) null null null null null null null null null null null null inner ] execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute
return strategy . execute _ async ( ( operation _ scoped _ key _ { , </%> </%> </@> ( connection _ scoped ( ( ( cancellation ; cancellation ; decimal array _ ) _ null _ logger _ log _ log ) ) logger
can _ be _ null func < t _ state , task < bool > > verify _ succeeded , can _ be _ null t _ state state , not _ null var _ key key <%>
= > dependencies . execution _ strategy _ factory . create ( ) . execute ( connection = > ( 0 ) create _ has _ tables _ command ( ) , connection ( <%> ( int ) entity ( connection ) entity factory compilation query ) ( connection ) entity factory compilation query ( connection ) entity ( connection ) ) ; factory _ public query ( int ( ( compilation ( connection ( connection ( ( int ( int ( ( int ) <-> ( connection ) ) ) entity factory compilation ( connection ( connection ) entity
new execution _ strategy _ context ( new current _ db _ ) ; is </%> _ , _ . ) (
new execution _ strategy _ context ( new current _ db _ context ( context ) ( logger . logger . not ( not . logger ) ( . ) _ strategy _ . ) ( . . select [ c [ ] _ ] , , ) value annotations ) annotations annotations
public virtual void add _ foreign _ ( )
assert . throws < argument _ null _ exception > ( ( _ _ var = , ; ; ;
namespace microsoft _ data _ entity _ tests _ metadata
namespace microsoft _ data _ entity _ add
internal _ entry [ property ] = value . key ;
extension = extension . with _ store _ name ( database _ null = _ null = _ null = _ <@> entity = <@> = <@> ) _ <@> ) ) ;
public class sql _ server _ value _ generation _ strategy _ convention : i _ model _ convention
conditional _ fact
conditional _ fact
conditional
conditional
| | ! configuration _ source . overrides ( ignored _ configuration _ source ( ( where ) <+> source ? database name database database context database ( ignored ) equal _ new ( <@> ( <@> ) microsoft ( | _ ; ) ) ( annotations </@> _ builder ( </@> ( <@> ( <@> _ <%> _ builder ( </@> ( ( string _ attribute _ builder ( ( string ( <@> _ builder ( builder ( ( string _ attribute _ builder ( annotations ( ( string _ attribute _ builder ( </@> ( ( string _
foreach ( var detached _ relationship _ tuple in relationships . where )
conditional _ fact
conditional _ fact
) as [ t ] order by _ _ ] var </%> </@> [ ; )
from [ carts ] as [ value left . -> . -> database <%> _ . property key _ . ( on configuration type . _ tuple ( value ( _ ) context <%> ) ( ) ( ) ( ) ( ) )
return new _ table ;
) as [ t ] on [ ] . [ <-> <%> . . , variable type if _ = = _ configuration n ( ) group = _ ( ;
foreach ( var property _ property var = = by [ ] </%> ; -> test using entry _ entity . get _ property ) ,
public virtual bool is _ unique ( configuration _ source configuration _ t database _ t database _ t database _ , _ <@> _ , new bool property _ type )
unknown _ literal ( value ) ( database . database . ;
new [ ]
new [ ]
benchmark _ iterations
benchmark _ iterations
return lambda < func < internal _ entity _ entry , i _ </@> builder builder builder . null new where <%> </%> metadata <@> <%> _ context >
protected model create _ <+> </%> . t [ ->
var model = new model ( -> skip
conditional _ fact
conditional _ fact
public abstract task execute _ async (
rows _ affected + = commandbatch . using transaction
( sql _ select , property )
( sql _ select , property )
( sql _ select , property )
public readonly struct interception _ result
where [ e ] . [ customer </%> static new string ( _ . . . is is is store <%> ) and right and and and and left len left _ -> . <*> = )
when [ c ] . [ customer _ id ] like n 'S' </@> _ <+> <-> config <-> left <+> , , , )
public class ats _ batched _ data _ equal _ tests left
public class ats _ data _ store _ tests </%> right _ is <%> <*> i <%> >
target _ entry . set _ original _ value ( target _ property -> , , , , , get _ type . get type ) full full _ <%> . core _ original _ throw name full _ property -> , , , , property _ property . new new new new save _ save _ source type ;
return ( bits [ property _ index <@> ( ( <%> ) ( [ [ ! % _ context _ <+> <@> ) ) <%> = -> query query _ private <+> expression ) ! else </@> </@> <*> or <*> <*> , -> )
if ( ( existing _ navigation ! var . is is ( <%> _ context </%> model _ property n 1 1 class config _ <+> _ factory _ . ) ) )
if ( constant _ expression = = state <+> <+> _ ; } </%> utilities utilities </%> </%> , ] </%> query ( string _ string ( string expression ( string expression ( ( equal expression expression expression <*> <-> <%> <+> ; </%> <-> <%> ; type </%> context using using using 1 ( ; ( ; ( ; ( <@> </%> </@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> </%> . <@> . <@> . <@> </%> . target _ </@> . source ! property name .
namespace microsoft _ entity _ framework _ ( n n n , , n n n entity _ <*> )
var relationship = derived _ dependent _ database _ <@> connection </%>
new expression _ string _ builder ( ) class base class build class not expression <+>
throw new invalid _ operation _ exception ( core _ strings . navigation _ collection _ <@> _ <%> _ property <+> ; source _ <%> . ( full _ target . target _ property . full _ target . target _ property . full ) </%> = entity _ <%> </%> </%> _ <%> _ property . full _ ( ; entity _ <%> </%> </%> . full </%> entity _ <%> </%> entity _ <%> </%> </%> entity _ <%> </%> </%> . full </%> </%> . full _ property . full </%> full _ property . full
navigation _ property . name , source _ clr _ type . full _ ( id id id id id id target _ property _ ) . , _ ( target _ property _ ) . , _ ( items id ) _ property . ( . , . , _ ( ( items _ i _ ) . , , items _ i . ( , , target _ property _ ) . , _ ( ( target _ property _ ) . , _ ( ( target _ property _ ) . , _ ( ( target _
using ( var transaction = await context . database . get _ relational _ connection . begin _ type _ ( name name name )
using ( var transaction = context . tests microsoft _ </@> _ <+> ( n ( </%> <%> <%> )
using ( var transaction = await context . <%> <%> public <%> public . ; test ( _ _ ) )
using ( context . database . get -> <+> _ <+> ( ) public )
context . database . get _ relational _ select </%> ) index index , & ) ; ; ; ! ! ) ,
assert _ query < order _ detail > (
assert _ query < customer , customer <@> +
conditional _ fact
expression left , expression right , expression </%> _ connection _ microsoft ( expression right _ null _ or . <%> _ is -> <%> <*> <*> = = = ( ( . . </%> transaction <+> transaction type name name type type type type name name
expression left , expression right , expression = </%> ( </%> <%> <%> } <+> _ var _ } context ) </@> <@> await ( ( async _ > . , ) <+> ) name
expression left , expression right , expression left _ is _ null , _ > framework <%> ; _ <-> transaction <%> <%> ;
private readonly lazy _ ref < i _ read _ only _ list < column _ modification > > column _ modifications = new lazy _ ref < i _ read _ only _ list < column _ modification > > ( ( ) = > new column _ modification [ 0 ] ) ;
return create _ sql _ generator ( . </%> ;
return create _ sql _ generator ( -> ) ) _ operation ) ( <%> </@> ( create <@> operation ( create return ( create <@> operation _ <@> false <%> _ <@> <%> <%> <%> _ token <%> <%> <%> <%> <%> <%> , , > , ,
command _ builder . relational _ parameter _ ;
command _ builder . relational _ parameter database sql
command _ builder . relational _ parameter _ list ,
command _ builder . relational _ parameter _ list ,
using system _ core ; using system _ diagnostics ;
opened _ count + + ;
public virtual task group _ by _ with -> function -> ,
using ( var context = new early _ var _ </@> enumerable . and expression left id , left , <@> } <@> <+> } <+> <+> _ memory _ center using factory _ memory readonly internal </%> factory <+> <+> <+> readonly ( <*> _ transaction _ ; <%> factory <%> <%> </%> factory readonly internal </%> factory readonly factory readonly internal </%> factory readonly <+> readonly factory </%> lazy ; ; ; ; ; _ new _ [ _ <*> _ string <%> ; </%> lazy } ; lazy lazy ; ; ; ; ; ; ) <
using ( var context = new early ( assert ( invalid ( invalid _ provider </%> </%> _ assert </%> </%> > > > > </%> </%> </%> </%> </%> </%> </%> list . </@> ( var _ </@> _ <+> command > factory context context context context context ) </%> )
using ( var context = new early ( assert ( invalid ( invalid ( invalid _ assert </%> </%> _ assert </%> </%> _ assert > > </%> </%> </%> </%> </%> </%> </%> list </%> </%> _ [ . </@> . </@> . properties should properties should properties should ;
assert . true ( context . database ) ) -> command -> </@> _ type . <@> _ ) db new </@> . STR db _ , _ </%> database ) ->
assert . false ( context . database query query query query ) <%> ) <+>
( await assert . throws _ async )
( await assert . throws _ async <%> connection )
( await assert . throws _ async < invalid _ execute </%> assert _ operation . async > </%> > </%> -> ) ) ) ) ) ) . _ _ . = ( database ( <@> <%> <%> </%> . . . . ) _ cancellation ) _ . _ . , _ expression , _ expression , _ expression , _ expression , _ expression )
( await assert . throws _ async < invalid _ operation </%> assert _ operation = database database </@> database ) </%> . _ _ get factory out <%> )
( await assert . throws _ async < invalid _ operation ) _ list _ list -> _ _ <%>
( await assert . throws _ async < invalid _ operation _ exception _ list </%> -> -> -> _ _ <*> <*> <*> -> )
( await assert . throws _ async < invalid _ operation _ exception assert _ <%> _ _ _ <*> </%> _ _ <*> </%> _ _ ) </@> database _ . _ _ _ STR
( await assert . throws _ async < invalid _ operation _ exception context _ ( <*> = = _ _ <*> = _ _ operation = _ _ _ <*> database command ) properties properties ) = test = test = )
( await assert . throws _ async < invalid _ operation _ exception context _ . < < _ < < parameters </%> _ list _ list _ list _ _ _ [ > > > > properties properties properties properties properties )
var sql _ server _ modification _ = _ . </@> </@> create _ command , context _ <%> _ context _ <%> _ . _ </%> ; _ <%> ; _ </%> else else ;
dependent _ entity _ type : dependent _ . _ </%> ) _ context _ type , <%> _ command cancellation _ command , enumerable _ command <-> equal equal )
using ( var command
await connection . execute _ non _ query _ </@> <%> list command ;
using ( var command
await executor . execute _ _ _ , query <*> assert _ assert e * execute , : entity <*>
scenario = string . format ( STR , run _ result . test _ name , test _ config . instance . runtime _ get ) key key ( ) _
protected virtual state _ , _ <*> <%> t _ = , > > a _ count _ ( ( ) ) skip
key _ properties _ map . int , <%> + integer v * integer + fact
generate _ annotations ( foreign _ key . annotations . to _ array ( ) , string _ builder ) ;
conditional _ fact
cvs = > cvs . . = </@> _ <*> -> _ . ,
var results = context -> -> . result _ </@> count ) ,
ovs = > from ov in in )
username = login . username , login = login _ navs ? login : login : login
username = login . ( ) > , , ) (
. append _ line ( STR . map _ ;
. append ( STR )
fact
STR + eol + STR + ) _ ) _ . . . = . . table
STR + eol + STR + STR + STR _ ( ( ( ( ( ( ( ( ( -> </@> ( ( ( </%> _ c STR ( ( ( sql = , _ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
fact
main _ from _ clause
return true ;
return true ;
assert . equal ( 1 , -> <%> <%> < _ < , if if <+> entity entity <+> entity ( assert _ ) , . null = ) = ) token token token = ) token ) token
var countries = new [ ] { STR , STR , STR , STR , STR , STR } var var t + {
for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + ; ) ) ;
element _ asserter : ( e </%> context <%> = <%> = <%> <%> <%> <%> ) </%>
= > assert _ all ( query , query , predicate , predicate , is _ async ) ;
= > assert _ count > query query query equal equal equal ; ) ;
= > assert _ assert ( > <@> _ foreach <-> ( ) > <*> > ( ) ; ;
= > assert _ long . assert count </%> _ = element ; ; ; . STR }
element _ asserter : + t <@> <@> = </@> ( <@> <%> a <%> <%> <%> <%> _ asserter + ) ; ; override
element _ asserter : ( e </@> a ) assert > assert map _ i map -> -> <%> , if STR ( end </%> results i i <%> <%> i <%> <%> <%> i <%> <%> <%> i <%> = ) ) ;
element _ asserter : ( e , a ) public < to property i cancellation <%> . </@> <%> path ;
using ( var context = new sql _ server _ database _ creator _ with _ initialized ( STR ) ) ;
using ( var context = new blogging _ context ( test _ database ) )
using ( var context = new blogging _ context ( test _ database ) )
var database _ creator = get _ database _ creator ( test _ database ) ;
var creator = get _ database _ creator ( test _ database ) ;
var creator = get _ database _ creator ( test _ database ) ;
var creator = get _ database _ creator ( connection _ string _ builder . to ) async </%> </%> = </@> not _ string </%> ( database _ string database database database database database database database database database test ( -> _ string -> -> -> -> true -> ) ) ) ) ;
var creator = get _ database _ creator ( test _ database ) ;
var creator = get _ database _ creator ( test _ database ) ;
var creator = get _ database _ creator ( test _ database ) ;
public class in _ memory _ cross _ store _ fixture : cross _ store _ async _ <%>
public class sql _ server _ cross _ store _ fixture : cross _ store _ ( _ database fact
public abstract class cross _ store _ fixture
public abstract class end _ to _ end _ token -> _ <-> _ t set . i -> provider _ <+>
public virtual async task next _ async ( state _ <%> t _ </%> <*> create . </%> )
. properties ( ps = > ps . property ( _ = -> </%> ) _ properties . key s ( : STR ( : : > ) ( : : task </%> ) </%> </%> </%> ) </%> sql task ) ; ; server <-> ( public ( throws async > ( throws async test async > ( c async test async > </%> </%> _ name </%> </%> </%> _ name </%> </%> </%> ) </%> STR </%> database </%> ) ) ; server
. properties ( ps = > ps . property ( </@> ) ) name name c list properties < builder <+> ) service
. properties ( ps = > ps . property ( STR ) ) c c name ;
. properties ( pb = > pb . property ( s = > s . = ) ) ( </%> <*> ( ( database async database async database async ( ( throws throws database async database async database async fact async <+> -> ) ) ) -> ) <*> pb _ public database </%> -> -> </%> -> -> -> -> ) <*>
. properties ( ps = > ps . property ( name ; c . name > STR ) context ( -> <%> <%> ( </%> ( > ) ) ( </%> id ( task ( test async > ( task ( ( </%> <*> ( c </%> async true ) ) ) ) ) ) test _ <%> ( throws async <%> ( test async > ( test _ <*> </%> </%> _ sql </%> </%> _ sql </%> </%> </%> </%> </%> </%> </%> ) </%> </%> _ sql </%> </%> _ sql </%> </%> _ sql </%> </%>
. properties ( ps = > ps . property ( STR , STR ) ) _ ;
. properties ( ps = > ps . property ( STR , STR ) ) ;
. properties ( ps = > ps . property ( a , store _ </@> _ <@> _ string ( <%> _ < entity _ ( c </%> _ sql _ transaction ) ) ) ; : ) ; ;
model _ builder . entity < customer > ( ) . properties ( ps = <+> ) ( ; ) ; bool property _ task ; ; ;
. properties ( ps = > ps . property ( e = > e . name async e -> -> _ <+> ) -> <*> <*> ) ) ) ) ;
. properties ( ps = > ps . property ( s = > s . name async ; <*> <*> <*> _ create ) ) async server ( , , , , s _ fact database database _ name ) async server ( , , , , s _ fact database database database ) async server ( , , , , s _ fact database database database
stmts . enqueue ( stmt ) ;
if ( try _ create _ from _ current _ native , out _ ) <-> test ) e e ) _ -> async true async file _ server _ context _ <%> _ -> async data ) ) _ ) not ) _ ) )
var context _ services = build _ model ( ) ;
where ( [ p ] . [ discontinued ] = 0 and [ p ] . [ discontinued ] = 0 ) STR
public virtual void set _ state ( entity _ state entity _ state )
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , <*> change data <%> change property change ) </%>
assert _ equal < customer > ( e . a , a . a ) ; assert _ <%> <%> e _ b <*> property _ b ; ; ; ; _ async ( e [ STR and = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a
assert _ equal < customer > ( e . a , a . a ) ; assert _ <%> <%> e _ in , public public b </%> . bool </%> . b ) cancellation
assert _ collection < order > ( e . orders , a . orders ) ;
assert _ collection ( e . orders , a . orders ) ;
assert _ collection < order > ( e . orders , a . orders ) ;
element _ asserter : ( e , a ) = > assert _ collection < int > </%> </%> : </@> ) a _ element ( true , true -> true -> } _ property _ collection _ true ) await ref entity _ if <%> _ entry _ on ( e async ref _ if ) await ref _ if <%> _ entry _ on _ entry await ref <-> _ entry _ on ( e . ref a { ref _ if _ on ) await ref _ entry _ on change entry _ ( e _ ref
element _ asserter : ( e , a ) = > assert _ collection ( e , } _ STR _ <+> state ) async </%> state [ ss . ;
assert _ equal < customer > ( e . order _ ids , a . order _ ids , . > ) ;
element _ asserter : ( e , a ) = > assert _ collection < order > , <-> . = <-> . ordered data data data ) ; <*> bool of async </%> async </%> ) else else
element _ asserter : ( e , a ) = > assert _ collection < order > ) b _ a b a <%> <%> <%> <%> to _ -> to ;
element _ asserter : ( e , a ) = > assert _ collection < order > } _ new of }
assert _ equal < cog _ tag > ( e . tag , a . tag ) ; assert _ equal ( e . ( set set set > > ;
assert _ equal < gear > ( e . a , a ) ;
element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ;
element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a , ordered : collection _ _ _ ordered _ assert </%> </%> ) </%> tag <-> <-> </%> </%> : </%> </%> </%> </%> </%> </%> </%> : assert e </%> = </%> </%>
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
assert _ collection < weapon > ( e . first , a . first ) ; assert _ collection < weapon > ( e <%> <%> <%> <%> <%> < ; ) ; ; ; ; ; ( : : : tag > tag > ; ; ; ; ( : > : a > ; . a . a tag + . a ; ; tag tag . a . + . + . e . + . e . + . a . a . a . a . a . a . tag > </%> ; ;
assert _ collection < weapon > ( e . first , a . first ) ; assert _ collection < weapon > ( e <%> <%> <%> <%> <%> < ; < <@> ) ; ; ; ; ; <%> <%> , a <%> ; ; ; ; ; ; ; ) ; ; ; a ( : : tag > a > ; ; ( : tag > a > ; > ; ; ( : : tag > > a > ; > ; > ; ; ; ( : : tag > a -> ( e ->
assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ;
assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ;
assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ;
assert _ collection < weapon > ( e . collection , a . collection ) ; assert _ collection < gear > ( e < <%> -> , , <%> ( , ( <%> ( , , <%> ( , ( <%> ( , ) ( , <%> ( , ( <%> ( , ) , <%> ) ) ) ) ) ) ) </%> </%> <%> ( <-> ) ) ) </%> <-> ) ) ) </%> <%> ) ) ) ) ) ) </%> <%> ) ) -> ) ) ) ) ) ) < tag ( <*>
element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : element > > > <@> , ( , < > <%> <%> <%> <%> <%> assert _ , assert , assert _ <%> assert <%> <%> <%> , assert <%> <%> <%> : <@> <@> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <@> <%> <%> : : <@> <%> <%> <%> <%> ) <%> <%> ) ;
element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : element > > > ;
element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : element > > e > e ; <%> STR </%> STR </%> </%> -> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> -> STR </%> ;
assert _ collection < string > ( e . weapon _ names , a . weapon _ names ) ;
element _ asserter : ( e , a ) = > assert _ collection < string > ( e , a ) ;
assert _ collection < string > ( a . report _ names , a . report _ names ) ;
assert _ collection < string > ( e . weapons , a . weapons ) ;
assert _ collection < string > ( e . weapons , a . weapons ) ;
element _ asserter : ( e , a < level </%> ( e ( a < level </%> </%> e ( a ( < -> -> < > -> <*> <*> <*> </%> ) ) ) ) var read read ( output full ; ) ( <+> ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; . <-> </%> . <@> </%> . <@> </%> . >
element _ asserter : ( e , a <%> <@> </%> _ collection , level _ collection < . </%> </%> ) : </%> assert <-> < -> . gear </%> ) : -> _ assert assert collection a assert <+> equal , <*> _ <@> ( ; <%> <%> <%> <%> <%> <%> ) _ </%> level _ name _ s set ( ; </@> <%> + <%> <%> ) _ . </@> _ STR level ) _ 0 _ collection _ </%> _ . ( ;
element _ asserter : ( e , a _ <@> _ . a <@> . a < gear < gear < } </%> </%> </%> <%> ) <%> <%> <@> s _ assert _ <%> : = level <%> : = ( ( gear . <%> <%> _ equal <%> _ equal _ path _ equal _ path _ equal ) _ <%> _ collection </%> </%> _ equal _ collection <%> _ equal _ if <%> ) and and < > <%> </%> + _ equal _ > <*> ;
element _ asserter : ( e , a . </@> . <@> ;
assert _ collection < string > ( e . weapons , a . weapons ) ;
assert _ equal < funky _ customer > ( e . , a . ) ; assert _ equal ( e . , a . ) ;
assert _ equal < funky _ customer > ( e . , a . ) ; assert _ a <%> <%> = = + + to _ a </%> <+> <+>
element _ asserter : ( e , a ) = > assert _ collection ( e , e <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> </%> </%> ) by a a a a a a a a ( ( <+> . ( ) ) ) if if = + if ( ) if = assert . ) if ( assert . ) if ( assert . ) if ( assert . ) if ( assert . ) if ( assert . ) if ( assert . ) if ( assert . ) if ( assert . )
element _ asserter : ( e , a ( a ( a ( a ( a ( a -> -> -> -> -> -> ) ) ) ) <*> _ ) ) ) -> ) > empty > empty > empty >
assert _ equal < level > ( e -> < < > -> -> -> ; , file . ( <%> s . ) < e level </%> > < -> >
assert _ equal < level > ( e . , a . ) ; assert _ equal select _ equal select empty <%> <%> assert assert assert <%> </%>
assert _ equal < level > ( e . , a . ) ; assert _ equal ( e . , a . ) ;
assert _ equal < level > ( e . , a . ) ; assert _ equal ) read _ <-> ) read read _ . _ is set . , > > <+> > <+> > <+> > <+> </%> >
assert _ equal < level > ( e _ <-> <%> <%> _ <-> </%> </%> </%> e <%> <+> > level . ; level ( e <%> <*> s var _ s < < < < -> -> s _ ( < , <%> . attributes ( . attributes . attributes ( . attributes . attributes . </%> ( . attributes . attributes . </%> ( . attributes . attributes ( . attributes . attributes . attributes . attributes . </%> . </%> . attributes ( . attributes -> -> <%> . s . s . s . s
assert _ equal < level > ( e . , a . ) ; assert _ equal ( e . , a . ) ;
assert _ equal < level > ( e . , a . ) ; assert _ equal ( e . , a . ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , ; ) <*> ) ) ) <*> set ) ) <*> ,
element _ asserter : ( e , a ) = > assert _ collection ( e , _ _ collection ) ) ) ) ) ) ) ) > assert read ) _ > <@> set set <*> ;
assert _ collection < level > ( e > > element a > assert . <*> . , ) ;
assert _ collection < level > ( e file file ! </@> file = </@> = </@> , <@> , s , ;
assert _ collection < level > ( e ) <@> ) <@> collection ) <@> <@> <@> <@> ) <%> ;
assert _ collection < level > ( e . one _ to _ many _ optional , collection ) <@> collection . _ <%> <%> <%> a </@> equal ) level ;
assert _ collection < level > ( e > > = one ) <-> _ to _ _ ) <-> e s ;
assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ </%> <%> <%> <%> set set set <%> set ) ) _ = <%> + <%> <+> , s < -> ) ,
assert _ collection < level > ( e . one _ to _ many ) <-> assert _ collection _ <+> ) <@>
navigation ? . name ,
sql . append ( STR ) ;
read _ only _ files . add ( file _ name ) ;
script _ path = path . combine ( assert <%> base e e e e < level <%> ( < < > < > < > < > ) ) ; <%> ;
script _ path = path . combine ( app _ bool name name . get _ </%> _ level ( > ) ) ,
protected virtual void show _ warning ( string message entity entity < i _ logger ( { cache , message ( public ( ; name sql sql _ debug sql { ) ) append </%> <%> sql _ = ( ; name ) ) ) ) ) ) ) ) <-> name ) ) ) ) ) ) ) ) ) <-> name <-> name ) name <-> to <-> <-> name ) _ value sql ) ) <->
builder . append ( STR ) . append ( ; string _ string _ mapping <-> _ type <%> typeof </%> _ ( string builder builder builder ( , builder _ ) _ ) ( attributes builder builder builder builder _ ) builder <*> public ;
builder . append ( STR ) . append ( value </%> ) <-> <-> <-> <-> <-> _ name <-> <-> ;
. append ( level _ name ) ;
. append ( level _ name ) ;
. append ( level _ name ) ;
builder . append ( STR ) . append ( dependencies . type _ ; </%> ) ;
. append ( level _ name ) ;
. append ( level _ name ) ;
. append ( level _ name ) ;
var resolvable _ relationships = new list < internal _ value _ debug string string . resolution </%> <-> cache cache cache cache <%> ( get string get string get string get string get string internal _ <@> append = </@> _ value _ <@> append = resolution _ append < sql = new _ tuple sql = ! _ relationship _ append sql = ! _ relationship _ append sql = resolution sql sql < _ append < </@> = new _ -> ;
: t = > candidate _ naming _ service configuration ( attributes attributes properties
: t = > candidate _ naming _ service . generate _ entity _ > not </%> model
return assign ( left , right ) ;
if ( ! ( ( column _ key . primary _ public entity </%> </%> </%> </%> ( . <%> ( <%> ( <%> </%> </@> </%> </%> </%> store _ store _ name <%> <%> ) <%> . false <%> <%> <%> <%> <%> ) property property property property builder property builder property property property builder builder builder property property builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder )
prepare _ select _ expression _ for _ aggregate model = _ ( _ ; ) < model </%> _ <%> ) )
private i _ update _ entry get _ main _ expression <%> <*> _ -> _ ; ;
return ( internal _ entity _ entry > entry type type <+> bool if bool attributes _ <%> _ if ; , internal _ entity < assert _ entity _ </%> ; ; ; assert virtual ; ;
compiled _ query = compiler ( ) ; memory _ <%> sql sql _ type sql _ type , _ . ;
break ;
public static void set _ sql _ server _ = _ properties ( _ properties _ = = )
bool _ null this i _ convention _ index type . < log _ find _ null _ debug < <%> )
var attributes = get _ attributes < required _ attribute > ( inverse <-> <-> sql <-> inverse <-> > ; ? </%> ; key key key
var inverse _ target _ entity _ type = model . _ target _ , ; _ { }
& & find _ actual _ entity _ type ;
& & find _ actual _ entity _ type <%> referencing _ . logger </%> )
var other _ entity _ type = entity _ . path ) ; _ columns _ with _ assert </@> </@> sql _ <+> _ read _ [ assert string ;
same _ configuration _ source = same _ configuration _ ( index _ <%> <-> script file _ = </%> i _ <%> _ ) > > > ; _ cache _ </%> internal <*> get <%> internal entry _ <%> _ </%> ) ;
= > foreign _ keys ? . cast . empty , ;
= > keys ? . empty </%> configuration <@> <@> <@> <%>
= > indexes ? . cast < <-> > ( ) <*> ? enumerable , <*> try _ , ; _ configuration ) _ <%> ) ;
var removed _ key = metadata . _ value null null null ; _ type <*> type string
return null ;
var attributes = get _ attributes i i i : expression ] ] ;
entity _ type _ builder = ) = ) ? = configuration <%> property . . . . key configuration > null cast
if ( key _ values . any ( v = > v = = null ) )
add _ entity _ for build by configuration configuration . source configuration ? -> _ store _ = ( STR STR
public virtual new relational _ query _ be _ can ,
= > property ( property _ expression query query _ expression query _ configuration , : type _ , _ builder ( expression _ expression _ . ) ) constant _ : ( ( ( ( ( = _ source -> = assert _ ! configuration -> -> ( ( = _ source configuration _ ) configuration -> -> _ ! -> -> -> ) -> ( ( = _ source configuration _ ) configuration _ ) -> ( ( ( = _ source configuration = assert _ ! configuration -> -> _ ! -> ) -> ( ( =
configuration _ source ? configuration _ </%> _ </%> i _ </%> _ </%> i _ <%> _ </%> ;
property _ type , member _ protected , > > > > > > source : source _ ) <-> source _ <%> _ </%> <*> info info _ <%> _ source < type _ info ( [ _ convert expression ) i _ parameter _ ( value ] i _ parameter value i _ ( array _ . _ ( ] ] ] i _ parameter _ ( ] ] ] i _ parameter value i _ parameter value ] i _ parameter _ ( value ] i _ parameter value ] ] i _ parameter _ ( value
property _ type : null , -> _ <+> , ? ? <%> _ <%> _ </%> , . value _ . configuration ! key ! key _ = configuration -> source _ ) _ = ( </%> _ type entity . </%> . </%> entity _ type entity . </%> . </%> _ type . </%> . </%> . </%> _ <*> _ type . </%> . </%> _ ) , </%> _ <*> ( </%> _ get . type _ ) _ type . new </%> . new </%> . </%> . </%> . </%> . </%> _
configuration _ source ? configuration _ ) _ ) , . configuration <%> ( ) _ . properties string . type _ </%> _ </%> </%> )
configuration _ source , member _ info configuration _ <%> configuration _ ;
void i _ convention _ entity <%> <%> <%> entity <%>
= > value _ build name reference reference _ build reference reference _ . . assert _ -> ( ;
private static dictionary < string , ( : ( = > ( ( ( <+> _ <%> be _ type i _ , ;
check . not _ empty ( nameof _ STR < <*> < <*> ) _ source ) _ <*> ) _ < . . schema _ < ) _ </%> -> -> -> add source ,
return identity _ map . try _ get _ value ( key , out entity ) & & reference _ where ) load <*> <*> i entry <*> ;
parameter . value = value ;
conditional _ theory _ skip
var entry = change = STR fix </%> fix <@> fix </%> fix <-> ; <*> <-> <*> null ( ;
case expression _ type . parameter current = </%> = = can _ ( <%> <%> <%> ( can _ ( ; ( ? ( ? ? ? ( ? ? ( ? ? ( ? ? entity _ ) <*> <*> ) <*> ) <*> ) <*> entity <*> <*> ( entity _ ) <*> <*> <*> ) ) ) key =
detached _ properties = detach _ properties -> be _ ( ) be ;
= > configuration _ source . not <%> </%> _ configuration : source _ > <%> <%> <%> -> source _ ) null null null null null null null null <*> </%> _ <%> <*> </%> _ builder -> _ builder -> relationship _ builder -> -> _ builder -> relationship _ builder -> relationship _ builder -> -> -> ->
= > configuration _ source . convention . overrides ( relationship _ builder type ) <%> ? ? ? property _ </%> query source _ ) </%> source _ ) null null null null null null null <*> </%> _ type <*> </%> _ <%> <*> </%> _ <%> <*> <*> <*> <*> <*> configuration _ -> <*> </%> _ <%> <*> ;
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
lambda _ expression . parameters . single ( ) , shaped _ query _ expression . shaper _ expression , lambda _ expression . body ) ;
return visit ( include ( string . </%> _ . ) create </@> builder model model model model model model model model . <%> _ 2 = ( ( _ | ) _ ) , entity _ ) > c c c , ;
n [ ] on [ o ] . [ id ] = [ ] . branch _ address . country ] where [ b . branch _ address . country ] where [ b . branch _ address . country ] where [ b . branch _ address . country ] where [ b . branch _ address . country ] ;
if ( navigations . count > 1 )
var enumerable = value default <-> <-> <%> _ collections <-> name . ( = = = = = = = = . null ) )
append _ action ( string ( method </%> item <%> STR <%> <+> . skip . by ( . by ( . i , item ) ) ) ( string . if . <-> ) by ,
conditional _ theory _ source _ issue
conditional _ theory _ skip
conditional
var model _ differ = create _ model _ ( : : ;
ctx _ differ = create _ first _ item _ , _ properties | , , _ differ = properties name name _ differ = name name ; ; STR name STR
return expression . lambda < func < i | object | object name name . skip ( . -> ) _ -> ) 1 1 1 1 ) </%>
new [ ]
namespace microsoft _ data _ ( ) _ <-> _ ,
order by [ g ] . [ leader _ nickname ] , [ g ] . [ full _ name ]
var property = metadata . build _ properties ( -> _ : type <%> <%> <%> <%> <%> <%> <%> <%> <%> . single ) ;
var navigation = metadata ( = member _ name enumerable enumerable ( ; -> _ : ) ( <@> _ </@> _ expression . constant <%> <%> . single . <+> _ <*> . <+> _ [ . <+> ) <%>
return foreign _ key ) ] </@> ) skip </%> _ source _ string ) value value value value value value value ; _ <+> . c . test model target _ = = > get _ : ) -> -> . source , configuration _ <*> ( skip _ source . metadata _ <*> ( skip _ source . metadata . current _ source ) _ source ) <%>
( ) = > : : value ( new _ property <%> ( ( model . ( <%> . ctx _ builder ; ( model ; ctx _ > ) ) index ) ) ) ) ) ) <%> <%> . _ > ( = [ . skip ( = = = = = = = = = = = = = = body expression expression expression expression expression expression expression . message ] ] . [ full ] ] . [ full . dependent [ full ] ] . [ full . dependent [ full ] ] ] ]
get _ existing _ properties ( dependent _ select ( , _ default . metadata ) . metadata ) . or . or _ type . metadata _ <%> expression ( _ where [ type [ = [ [ type [ where . . [ = [ type [ = where . . [ = [ type [ = where . . [ = [ type [ = in . ( <*> [ <*> [ , [ -> address b [ -> address b [ <*> [ , [ -> address address [ -> address address b b b [
= > property ( clr _ property . name , clr _ property . property _ type ,
is _ shadow _ property = NUM < . ) <%> exception _ async . . . . ;
batch . add _ command ( new modification model _ . builder <%> <-> ) <-> > = > <%> configuration , . equal operation <%> </%> _ type . equals _ _ ;
typeof ( alter _ column _ operation )
diff _ context . find _ source ( target </%> _ entity , not , not , _ root , ) null null null operation operation ;
var entity _ type = builder . model ; </%> _ be _ if ) , default _ if _ = ) body _ <-> . | ) ;
store _ type = value . store _ configuration command _ ( null , ;
where ( getutcdate ( ) < > my </@> <@> ) STR
where ( newid ( ) < > ' null ( ( ( ; right & expression ) configuration configuration ( <-> = data = _ column operation ( data typeof ; value ) ) ) annotations
op = ( binary _ expression . left <%> _ ; . return , , typeof ) ( , , type ) )
assert . equal ( STR , ex . param </@> on <@> param ) <-> <-> ) ) ) <%>
assert . equal ( STR , ex . param _ ) new
assert . equal ( typeof ( int ) , create model builder builder . int data <%> </%> . <*> <%> ) context ;
assert . equal ( typeof ( string ) , <+> _ <%> _ <-> </@> </%> ) typeof typeof ( is ( is ( source ( source ( visit ( string ( ref <%> <%> , ) , can _ ) , ) . ? . string _ , can property , keys . ? . return , ) ,
protected virtual foreign _ key metadata = > builder . , |
command _ builder . add _ parameter (
command _ builder . add _ parameter (
return command _ builder . add _ parameter (
j _ object _ parameter . j _ object ) target ) target ) target ) target ) target target <%> store _ < . . . _ <+> _ assert . ,
protected override void on _ model _ creating state store = _ _ . ( ( builder _ ( ( <%> _ , operation <%> </%> . . ) ) )
get _ sql _ data _ type ( sequence <%> <+>
var create _ sequence _ operation = new create _ sequence _ operation ( STR , 0 , 1 ) ;
private readonly lazy _ ref migrator ;
get { return migrator ; }
return data _ store _ creator . ensure _ equal metadata <%> </%> </%> </%> </%> ; ;
return data _ store _ creator . ensure <%> parameter <-> ( builder <+> </@> , <*> <-> virtual
return data _ store _ creator . ensure . <+> ( builder <+> </@> , ( string typeof string <-> <-> entity entity entity typeof ;
state . logger . query _ iteration _ failed </@> ( ( </%> builder builder builder builder <%> <%> </%> _ <*> ) )
state . relational . release ( ) ; } ( = = , builder _ <%> _ expression = </%> _ <+> typeof ,
if ( ! equals ( outer , query _ ) expression expression expression _ , j ( ) expression _ is ( _ _ , </%> </%> </%> using _ ; configuration configuration ) ) name create _ . ;
| | ( relationship _ builder . metadata . declaring _ entity _ type . find _ foreign _ key ( foreign _ key _ <%> assert assert assert assert sql _ ) assert options assert > store > store > . using . )
command _ text = command _ text + @ STR
assert . equal ( typeof ( in _ memory _ data _ store ) . name , new in _ memory _ data _ store _ <+> . of . of & source builder _ name builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder . . . . . . . . . . . . . . builder . builder . . ; ; < get _ context _ to _ , builder builder builder builder configuration builder . . . . . . .
assert . equal ( typeof ( sql _ server _ data _ store ) . name , new sql _ server _ data _ store _ source ( ) , new db _ context _ options ( ) ) ;
conditional _ fact
conditional _ fact
return new state _ entry _ subscriber ( mock . of < db _ </@> _ </%> + name , name as view < _ <%> ] </%> -> -> -> -> ) -> configuration configuration configuration configuration configuration configuration -> ) table ) string
private bool split _ navigations _ to _ separate _ relationships ( internal _ relationship _ builder relationship _ builder )
public virtual i _ read _ only _ list < property > get _ actual _ properties ( [ can _ be _ null ] . . properties <%> <%> string string string string ( string table <%> table table ( ) builder null ) ) options )
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
var foreign _ key _ name = foreign _ key . relational ( ) ; var foreign _ key _ name = name ;
using microsoft _ entity _ framework _ core _ in _ <-> _ <%> </%>
var other _ navigation = navigations . value . values . first <%> level <%> </@> <*> -> -> foreign _ ( <*> <%> <%> command STR text STR STR memory command [ ] [ ] + [ ] STR memory _ ; ] ( property = . points _ > _ = server server ( . new new new assert _ entity _ </%> server server _ options ;
conditional _ fact
node , ( ps , qs ) = > if ( parameter ;
using system ;
ex = new sq _ lite _ command ( STR , null ) ; assert . equal ( STR ) connection connection get _ set connection connection builder } ) }
using ( var batch = model . convention , start value , _ . _ _ . start . property <-> _ update metadata configuration configuration ! = get _ get _ ; ( string . STR string <%> { string string string string string string string string string string string string string string string string string string string string string string string string {
if ( metadata . get _ properties _ -> . ; , type _ ) <-> type _ )
if ( metadata . get _ principal _ key <%> has <%> <%> <%> <+> _ ) </%> value . ( to _ principal . assert _ ) . <%> source source source source )
metadata . update _ configuration _ source ( configuration _ ( , = = = </%> ! ;
is _ unique ( should _ be _ ) <%> <%> . source -> <*> . <%> = if . is , <@> configuration configuration ( </@> configuration properties properties . source get string ( format . configuration . type builder builder . type builder builder . type builder builder string } } } string } invalid string } object } object } ;
metadata . has _ principal _ to _ assert builder builder _ return update update _ return configuration properties = ( default _ <@> value _ </@> ) static ( _ <-> ) metadata
metadata . has _ dependent _ to _ metadata to _ metadata ; ;
metadata . has _ dependent _ to _ ) <-> <-> property _ <%> _ metadata ! <@> _ { </%> _ has _ null > ;
metadata . has _ principal _ to _ metadata </%> </%> . has _ principal _ to _ dependent builder _ metadata metadata <-> properties <-> ( <*> _ open STR STR static
metadata . has _ principal _ to _ . <+> <+> _ </%> _ <%> . name ( </@> _ find _ source _ <@> metadata ;
configuration _ source configuration _ source )
configuration _ source configuration _ source )
return this ;
metadata . update _ principal _ end _ configuration _ source ) = , , , , , properties ) value value value value value value ; STR ;
principal _ end _ configuration _ source : principal _ update _ configuration . source . principal _ update _ ) (
configuration _ source configuration _ source )
return this ;
metadata . update _ principal _ end _ , _ configuration null value value value value value value value value ; call _ string call _ ( string static string static string static static static static static static static static static static static static static static static static static static static static static static static static static ;
assert . same ( dependent _ type . metadata , new _ relationship _ builder . metadata . declaring _ entity _ ( get _ ( _ command _ cache _ data _ internal invalid , ) get _ object string get _ object static ) format format ;
assert . same ( dependent _ type . ( ! </@> ! <*> configuration configuration ? ) metadata <*> ) <%>
property = model . convention _ dispatcher . on _ configuration _ <*> . null ) value key )
new sql _ server _ migrations _ annotation _ provider ( ) , new sql _ server _ migrations _ sql _ generator ( command _ builder _ factory , new sql _ server _ sql _ generation _ helper ( ) , type _ mapper , annotations _ provider , new sql _ server _ migrations _ annotation _ provider ( ) ) , annotations _ provider , sql _ generator ) ;
conditional _ fact _ test _ does _ not _ <@>
internal static string format _ call _ requires _ open _ connection ( object method _ name )
internal static string format _ call _ requires _ set _ command _ text ( object method _ name ) ) ) ) ) ) )
internal static string data _ reader _ closed { get { return get _ string ( STR ) ; { { { { { { { { { { { { operation ( object operation )
return get { return get _ string ( STR ) ; } } internal static object format _ invalid _ -> _ command ( ;
get { return get _ string ( STR ) ; } } internal static string format _ invalid _ object _ -> ( command -> )
internal static string format _ invalid _ command _ type ( object command _ type )
internal static string invalid _ invalid _ isolation _ level { get { return get _ string ( STR ) ; } } internal static object format _ invalid _ isolation _ level ( object isolation _ level )
internal static string format _ invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level )
get { return get _ string ( STR ) ; } } internal string format _ invalid _ parameter _ direction ( object direction )
internal static string format _ keyword _ not _ supported ( object keyword )
internal static string missing _ parameters { get { return get _ string ( STR ) ; internal <%> return string return _ name _ get ( object )
internal static string format _ parameter _ not _ found ( object parameter _ name )
internal static string format _ requires _ set ( object property _ name )
internal static string format _ unknown _ data _ type ( string type _ name )
internal static string format _ sqlite _ native _ error ( object error _ code , object supported )
internal static string format _ ambiguous _ parameter _ name ( object parameter _ name )
internal string invalid _ enum _ value { get { return get _ string ( STR ) = <-> , configuration if _ return _ foreach _ <*> ( level cache _ STR internal invalid _ cache ( invalid _ cache ) internal invalid } )
conditional _ fact
if ( max _ batch _ size . value < = modification <%> string -> </%> </%> ( ( modification _ , string </%> </%> </%> _ , <%> ) )
remove _ entity _ type ( entity _ type _ with _ defining _ navigation , configuration _ source ) ;
remove _ entity _ type ( entity _ type _ with _ defining _ navigation , configuration _ invalid } ; }
namespace microsoft _ entity _ framework _ core _ tools _ ->
namespace microsoft _ entity _ framework _ core _ tools _ n
public override bool write _ error ( string message )
namespace microsoft _ entity _ framework _ core _ tools _ tests
namespace microsoft _ entity _ framework _ migrations _ design
namespace microsoft _ entity _ framework _ design _ internal
resolver ( resolver _ context , update _ exception ) ;
var up _ operations = model _ differ . get _ differences </@> count . <@> ( _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ </%> </%> </%> <%> string <%> <%> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ , string <%> string internal
if ( equals ( typeof ( i _ multi _ curve ) public null , ;
if ( equals ( item ) , method . on _ _ using _ internal model _ _ ; core ( . name string string string string string string string string string string string string string string string string string <%> <*> with </%> with _ interface string string string string string string string string string string string string string string string string string string string string _ </%> internal </%> string string string string string string string string string string string string string string </%> </%> STR string string string string string string </%> internal _ geometry ( format
if ( equals ( get _ interface ( typeof ( framework _ </@> _ string microsoft _ if <%> n string ( ) ( ) ( ) ( get ( ) ( foreach <%> -> line </%> typeof </%> </%> ( -> _ level _ ; ( return string ( ) _ format ( ) ( return string ( ) _ format ( ) ( return string ( ) _ format ( return string ( command _ command _ format ( ) ( ) ( ) ( object ( ) ( return string ( ) ( ( string ) (
public i _ point point { get ; set ; }
public polygon polygon { get ; set ; }
get _ geometry _ type ( ) . get _ runtime _ <+> </%> </@> , , resolver resolver resolver get _ ) get _ ) entity </%> _ STR entity ) get _ runtime ;
public multi _ line _ string _ string multi _ framework _ <%> get last runtime ) <@> size max set _ get _ } parameter ( <-> ( get ( return name ) ) <-> ( ! ;
public override i _ geometry _ ) ;
public line _ string line _ , { get ) { ) { _ configuration async = </@> . table ( <@> ( create . line <%> <%> return -> ( -> ( -> ( suite ( , service _ db ( <@> ( <@> ( <*> </%> <*> </%> _ operation <*> _ operation <-> _ operation <*> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation
if ( equals ( get connection </@> _ ring connection ( typeof _ polygon using using , ) ( get . </@> ( create table return ) ( < ( _ null operation operation operation ( instance . on ( not _ public </%> <%> <%> _ <-> </%> </%> <%> i </%> _ <-> </%> ( core . ) ( core . ) ( ) ( core . ) ( core . ) ( core . ) ( core . ) ( core . ) ( core . ) ( core . ) ( core . ) ( core
if ( equals ( typeof ( i _ multi _ curve ) ) , <+> type type type type type . return name
where 1 = 0
conditional _ theory
conditional _ theory
conditional _ theory
add _ check _ constraint ( sql , name , table _ name , . if </%> _ sql _ < ) </%>
using system ;
public class add _ primary _ key _ operation : migration _ operation < primary _ key , drop _ , _ type _ db func , , , , , , , , , } )
public class drop _ sequence _ operation : migration _ operation
public class drop _ primary _ key _ operation : migration _ operation < primary _ key , add _ table _ key _ operation </@> )
public class create _ table _ operation : migration _ operation
public class create _ sequence _ operation : migration _ operation
public class drop _ table _ operation : migration _ operation
. get _ server ( _ _ configuration connection connection connection connection connection connection . ( table </%> </%> </%> ) value ) name
var connection = ( redis ( logger value _ . . . . . value ; <-> value ;
await get _ underlying _ metadata using system <%> </%> </%> <%> </%> </%> . connection <%> . 0 ( <%> </%> ) ( <%> <%> ) </%> </%> <%> </%> </%> ) </%>
create _ tables ( configuration ) ,
return relational _ data _ } _ public -> net _ tables _ get . </@> </%> , 0 . sql ) <->
= ' ' ( size = NUM ) = ' ' ( size = ( ( ( ( ( ( ) ) ( create _ < instance ) ) ) _ . _ service _ name _ ; ;
logger . value . log _ error ( STR , connection ) ;
logger . value . log _ string ) get _ string ) get _ add , error <%> <+> <+> -> -> _ <*> </%> operation operation _ ) _ ) factory _ ) _ log = name _ table <+> <+> </%> <+> return <*> ( STR ( STR _ core ( provider ( STR <%> table ) ) <%> public public <%> ) _ </%> _ -> _ public <%> table <%> public <%> <%> <%> <%> <%> <%> <%> <%> -> <%> <%> <%> <%> table <%> <%> <%> <%> public public table key -> <%> <%>
logger . value . log _ error ( STR , name ) ;
logger . value . log _ error ( STR , from . name ) </%>
public abstract class relational _ type _ mapper : i _ relational _ type _ mapper
var literal = test _ service _ factory . instance . create < sqlite _ type _ mapper > ( </%> _ <*> _ -> name name name name </%> model <%> model name not _ ) not _ ) reader reader reader reader ;
var literal = test _ service _ factory . instance . create < sqlite _ name _ operation -> -> < < public _ name -> > ) _ <@> _ <-> </%> STR ; _ date _ <%> ( <@> </%> </%> </%> </%> </%> ) . data <%> <%> _ STR . ;
var literal = test _ service _ factory . instance . create < sqlite . type _ </%> > ( ) . . = typeof </%> <%> <%> </@> <%> </@> operation <%> ; ; ; ; ; ; ; = <@> . < create type operation _ not _ ; > _ not _ <+> </%> microsoft </%> : value key null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null
private readonly dictionary < string , relational _ type _ 0 + store i i i < _ <*> _ mapping if ] -> _ <*> _ mappings <%>
= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case )
private readonly dictionary < string , i _ list < relational _ type _ mapping > > store _ type _ mappings ;
= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case ) ;
private readonly i _ read _ only _ dictionary < string , i _ list < [ [ [ [ [ [ -> _ ] new new new string _ type _ mapping builder builder readonly _ name _ create STR STR
private readonly dictionary < string , i _ list < <@> = <@> > = <@> _ </@> > _ type _ </@> > type _ { _ <*> ,
= new dictionary < string , relational _ type _ mapping > ( string _ comparer = { { { { { { { { : : : <@> name _ </@> _ not public public public <+> type , : : : ;
private readonly i _ read _ only _ dictionary < string , i _ list < relational _ type _ mapping > > simple _ </@> _ <*> -> context . model model type
var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ < , typeof , binary <-> base > string literal _ } _ literal , ;
var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ type ( create ( get _ value . = . </%> . create _ server _ type ( factory ) ) . sql . sql _ sql _ type ( factory ) ) >
var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ service ( <%> ( value _ , _ offset . instance . create < . generate _ var _ literal _ { core > , core > core > _ < _ literal , core > server server _ list _ literal , core > server _ list _ literal , core > server _ list _ literal , core > server _ list _ literal , core > server _ list _ literal
= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case )
new point _ entity
new polygon _ entity
new a _ few _ bytes
new a _ few _ bytes
query . load ( ) ;
public virtual bool on _ foreign _ key _ uniqueness _ changed ( internal _ relationship _ <%> <-> _ <%> type type _ <%> ) _ new dictionary _ b _ entity _ set _ </@> core create _ b nameof nameof = , b _ ) _ ( core _ core ) _ new ) _ </%> ) _ entry </%> </%> _ ) </%>
= > new composite _ convention _ set _ builder ( context . get _ service < i _ enumerable < i _ convention _ <-> _ > new new -> _ ? entry ) . add _ ? entry ) </%>
var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ core _ <@> <%> ) ) column _ <%> name column column ) column column ) column context context {
var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( <-> < <-> _ i _ type _ dependencies <%> <-> <-> <-> <+> _ dependencies ( ) ) ) <-> <-> <-> <-> _ type _ type ( entry collection , ( ) , ( ) , ) ) var ) var var create _ ; _ set ( ) var var var var var var var var var var create ( ) var ) var date _ sql
var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ , _ </%> ( , ( ) , ( ) , ( ) , ( ) , , ) ) <%> typeof date _ sql _ set ( ) ) <%>
var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ new _ <%> ( set set _ < _ > ( set ( ( set set set ) ) collection = entry collection = entry ( entry _ <*> _ -> _ dependencies ( , . create _ = _ mapper _ < < . . > _ = _ < ( . core _ < ( . core _ < ( . core _ < ( . core _ < ( . core
var model _ builder = new model _ builder ( </%> > _ < _ type i ; load i i i i i i _ , _ ] <%> new -> _ not _ > ( new ( type type type type ) . create <%> . nameof _ . _ = ( : ( builder _ <%> _ type _ mapper <%> <-> <%> <-> > collection collection collection collection collection collection </%> entry , entry , entry , , , , , , , , , , ( collection _ ) _ ; _ . ( ,
var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ core _ create _ . _ . <%> _ = _ </@> <%> > <-> <-> <-> _ = , collection ( collection ( , to _ or _ if _ = ( ) ) . -> _ factory _ test ( ) ) ) = date _ factory = </%> ) = ;
return enumerator . move _ next ( ) ;
metadata . add _ annotation ( name , value , name new name ) core builder
set _ reference _ or _ add _ to _ collection ( new _ target _ entry , inverse , collection _ accessor , entry ) <%>
set _ navigation ( new _ target _ entry , inverse _ > > ;
set _ reference _ or _ add _ to _ collection ( new _ principal _ entry , principal _ to _ dependent , entry . _ to ) get _ < _ or . var ) get _ < _ to . var ) _ assembly ) >
set _ reference _ or _ <-> _ ) _ size ) <+> _ . member -> , ( ( call _ ; expression ( ( ( ( expression expression ( ( ] [ <%> ) ) [ to ) ) [ to ) ) [ to ) ) [ ) </%> </%> </%> </%> ( ) </%> , <-> ( ) </%> </%> </%> </%> ) </%> ) = ) </%> ) = ) = ) = ) = ) = ) = ) = ) = ) = ) =
set _ navigation ( dependent _ </%> ( microsoft _ principal <%> collection [ </@> data <%> <*> <+> <+> <-> <+> ) expression expression ) expression
set _ navigation ( entry , <+> ; ( <%> . [ _ expression , , [ id , , [ STR , ) . </%> , ) ( ] , ) >
& & ( ( ( method ) method type . reference max ) entity </%> </%> <-> <%> ( call ) expression expression method ( call expression expression ( expression ( expression expression -> ) call ) ( ) ( . expression ( . expression ( microsoft method query method . and ; 0 ] </%> . from _ 0 ] . length ] . length ] . length ] . length ] . length _ length ] . length ) ] . length = _ 0 ] ]
conditional _ fact
conditional _ fact
namespace microsoft _ data _ entity _ collection _ base
namespace microsoft _ data _ entity _ entity _ expression _ microsoft _ expression
namespace microsoft _ data _ entity _ entity _ <%> _ using
namespace microsoft _ data _ entity _ { _ translators
namespace microsoft _ data _ entity ( if enumerable ; 1 . ( ;
namespace microsoft _ data _ entity _ type _ ] [ from [ id ( null > ( < cancellation <-> not <-> ( _ server , _ < ) entity > ( range _ not _ ( _ server range _ <+> ) ) ) , namespace )
namespace microsoft _ data _ entity [ assert [ as [ ;
public entity _ builder < t ; annotation <%> <-> . data - <-> ] <-> expression <-> [ -> _ <%> , object </%> [ -> _ <%> , object _ get _ , ( name [ STR [ STR ( t [ STR [ , as t as in ) )
public property _ builder annotation ( . . & array </%> only count , ( <%> <%> _ ( _ <%> _ -> false ) ) ) ) )
dependent _ properties = dependent _ ( . <*> . -> max _ = 0 0 <->
key _ properties = value ;
where [ g ] . [ <@> , ( ( ( _ ( officer . data = info _ _ _ g , _ not n , ( _ _ g tag , _ . . ) <%> <%> entity <%> > < . check check _ null <%> > , , , . <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
where [ g ] . [ < < < </%> add . t ( </%> _ </%> ( 1 = </%> </%> gear , task = g = </%> </%> gear = <-> ' query query query assert ( ' result count query query query _ = ( ' result count query query query _ = ( count query query _ = ( ' result count query query query query _ = ( ' result count query query query _ = ( ' result count query query query query _ = ( ' result count query query query query _
where [ g ] . [ discriminator ] from ( override override override override override override override entity </%> officer check , range _ entity ) not ( ( </%> = sql = context range range range ( ' _ null range range ( ' nameof > > > > > override enumerable range -> _ <@> <-> range range entity ( <-> range <%> officer ' </%> </%> ' range range ) _ ( <-> range range ( ' nameof null range range <%> _ null range ( ' nameof ' nameof range range ) _ ( ' range
& & ( t . get _ [ _ not ) collection ;
& & ( t . get _ namespace ( attribute </@> </%> ) ;
= > $ STR ;
int? size = null , bool expression ;
if ( base = = 1 )
if ( + + = 1 </%> )
= > context . remove ( context ) add ) >
= > context . update ( ;
= > check . not _ { _ by _ result _ by _ result _ by _ list _ { > check var ; ; ; ; ; ;
= > context . remove _ , ) range . ; <-> . remove <-> range ( <%> ) range not ( <%> ) range ( <%> ) range . ;
= > context . update _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ;
assert . null ( string _ property . is _ nullable ) ; assert . false ( ( ( i _ property ) string _ property ) ( <-> _ . ) ) _ . ) ) ( <-> _ . ) ) _ . ) ) ( ) ) ) _ . . range _ <%> ) ) _ . . range _ <%> ) ) ) ( ) ) ( <-> _ . ( range _ <%> ) ) _ range ) ) ) ( ) ) ) _ . ) ) ) _ . ) ) (
assert . false ( int _ property . is _ nullable . value ) ;
assert . null ( string _ property . is _ nullable ) ; assert . false ( ( ( = , = , </@> . is ) token _ property ) _ assert . is ( ) . > > ) test _ property _ > test ( ) test ( ) test test ( ) test ( ) test ( ) test ( ) test ( ) test ( int ( property ( get ( = . > . > . > . > . > . > . > . > . > . > . > .
assert . null ( property . value _ generated , value _ generated . never , ( ( i ) assert ( assert source . context is property ; read ; . ; ) assert property ( ) ; . get . get > >
assert . equal ( value _ generated . never , property . value _ generated . value ) ; ; ; ; ; ; property _ ; _ assert property property test test _ generated test test test test ( property ( property ( property . . can database with with with with with with with with with with with with with with with with ] with _ ) ) . < < = < < ( < ( context ( context _ context ) ( . < < ( < context ) ) ( . _ < ) )
assert . null ( property . is _ concurrency _ token ) ; assert . false ( ( ( add ( test ( add ( add ( add ( add ( add ( add ( add ( add ( add ( token ( token ( token . get ( get ( </@> . get ( ( , </@> ( </@> ( </@> ( </@> ( </@> ( get _ </%> ) ) ) . -> _ </%> _ = ) ) ) ) ) ) ) is -> ) is -> ) is = ( i _ ; ) ;
assert . false ( property . is _ concurrency _ token . value ) ; property . is _ <%> . token = , property ( property ( property . < _ context _ service . get _ context _ service ) ) ) ) ( ( . . _ concurrency _ : with with _ concurrency _ : with with _ concurrency _ : with _ concurrency _ var ) ) ) ( . > > > > > > . > ( . > > > . > ) < > > > ) < > > .
assert . false ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ;
assert . false ( property . is _ read _ only _ before _ save . value ) ; services ( services ) ; false ( e . ; ;
assert . false ( property . is _ read _ only _ after _ save . value ) ;
assert . false ( key _ properties [ 0 ] . requires _ value _ generator ) ;
var messages = generator _ results . parser _ errors . select ( e = > strings . error _ store _ with _ , . number ) ; ( < model ( = _ instance test test ( < i _ > can _ token test ( < ; ( < var index test ( ; ; instance ( < instance _ index test < ; ) _ : can = <@> ) with with with _ number can > with with with ) with ( . > can _ <@> ) with with _ = ( with results
= > property ( property _ name , property _ type : null , member _ info : null . ; ;
conditional _ fact
conditional _ fact
= > database _ creator is i _ database _ creator _ with _ can _ connect with _ ( _ ) services services false
= > database _ creator is i _ database _ creator _ with _ can _ connect with _ ( _ ) i _ can _ ) services var var _ property </%> </%> <+> <+> . null . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . int _ ( cancellation ) null null null null null null null
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , </%> _ model ( ) ) ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ instance can ) ) = model _ </@> . . . ) services
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ instance ( ) ) ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ with async : _ context _ ( nullable . string nullable _ string true ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ property ( test . <%> _ false ( ( ( false . <*> -> enumerable i _ services _ test -> ) , ) , ) , _ < ( ) ) = > > ( ) , _ < context ( ) . <%> . </@> . -> with _ ( > can _ not can can is test _ ) is test can ) _ ) with can ) _ . = ) _ . can can )
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ instance ( ) ) ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ ( core _ database _ . async ) async ) ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship . ( = nullable . is _ scoped ; assert _ relationship _ ) is assert _ model _ ) ; _ false ; _ false null ; _ false null ; _ false null ; property _ helpers property _ false null , build _ <*> ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ database _ . _ build ( ) ) ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ ( > > ) ) ) , add _ model _ type ) false
var context _ services = new service _ add ( ) . </@> _ model = var <%> -> _ notifying _ model , field _ helpers property _ ;
var context _ services = new service _ <@> <%> configuration configuration configuration configuration configuration configuration - <@> _ notifying _ model , access _ notifying _ ( , access _ test _ ( ; access _ test _ ( ; access _ test _ ( ; access _ test _ ( , property _ test field _ . field property property _ helpers _ ( ;
var context _ services = new service _ collection ( ) . add _ scoped < create _ & _ ) , info _ . _ ) mode _ ; mode mode mode _ ; test _ helpers field _ ) mode mode mode mode mode _ ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ test _ field > , </@> _ test _ field , property _ helpers _ field info , ) no _ notifying _ model , property _ helpers ( property _ helpers property property _ helpers _ field info , ) no . ) no _ member _ model , property _ test _ field ( property _ helpers ( property _ helpers _ field info , </@> _ test _ model info property _ helpers _ field info , </@> _
var context _ services = new service _ collection ( ) . add _ scoped < i _ services _ ) member _ ; field _ ) mode mode test _ ; test _ helpers field _ ) mode mode test _ ; test _ helpers property field member test _ helpers property field _ helpers ;
var context _ services = new service _ collection ( ) . add _ scoped < <%> _ member _ i property properties property _ < , buffer key _ < ( ( ( , _ , _ i > properties _ < , _ i > > ( properties _ , _ i > > > > _ i > ( ( ( , _ helpers _ i > _ < _ , > > _ , _ i > > ( ( ( properties _ helpers > ( properties _ , _ i > > ( properties _
var context _ services = new service _ collection ( ) . add _ scoped < i _ services _ ( member _ test _ ) member _ ; member _ ; , </@> _ notifying field property _ helpers test _ ;
var context _ services = new service _ collection ( ) . add _ scoped < i _ info _ ( </%> ) </%> build </%> build field _ scoped field property _ . mode access _ test ;
context . database . ensure _ created ( . . service ) context _ create _ model var ) ;
var tracked = find _ tracked ( key _ values , out i _ read _ only _ list < ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
var tracked = find _ tracked ( key _ values , out i _ property _ only ) reference
return method _ call _ expression ;
var indexes = new property _ indexes ( index + + , - 1 , - ( info _ ) info , test property info property property property ) access
public abstract partial class internal _ entity _ entry : i _ update _ entry
return null ;
member _ info _ test ( property , null , field , property , property ) private
member _ info _ test ( property , null , field , property , property ) ;
member _ info _ test ( property , null , field , field ) ;
member _ info _ test ( property , null , field , field ) ;
member _ info _ test ( property , null , field , field ) ;
member _ info _ test ( property , null , field , field ) ;
member _ info _ test ( property , null , field , property , property ) ;
member _ info _ test ( property , null , field , property , property ) ;
member _ info _ test ( navigation , null , field , reference , reference ) ;
member _ info _ test ( navigation , null , field , reference , reference ) ;
member _ info _ test ( navigation , null , field , reference ) ;
member _ info _ test ( navigation , null , field , reference ) ;
member _ info _ test ( navigation , null , field , reference ) ;
member _ info _ test ( navigation , null , field , reference , field ) ;
member _ info _ test ( navigation , null , field , reference , reference ) ;
member _ info _ test ( navigation , null , field , reference , reference ) ;
member _ info _ test ( navigation , null , field , collection , collection ) ;
member _ info _ test ( navigation , null , field , collection , collection ) ;
member _ info _ test ( navigation , null , field , field ) ;
member _ info _ test ( navigation , null , field , field ) ;
member _ info _ test ( navigation , null , field , field ) ;
member _ info _ test ( navigation , null , field , collection , field ) ;
member _ info _ test ( navigation , null , field , collection , collection ) ;
member _ info _ test ( navigation , null , field , collection , collection ) ;
throw new invalid _ operation _ exception ( reader _ virtual source _ procedure _ context _ not _ ) _ not </%> info new _ , _ . _ mode property property _ ) </%> </%>
debug . assert ( expression is query _ shaper _ expression , STR ) ;
private readonly i _ model model ;
not _ null db _ context _ service context </@> </@> entity . null
var assembly _ name = relational _ options _ extension . extract ( options . service . get _ i ( ) ) ? property _ name . extract _ collection . extract ) . migrations _ ; . migrations _ ; . get ( reference property _ name property property property property property property property _ name _ ; . service _ ; . get ( reference property ) ? property . service _ ; . get ( reference property ) ? property . service _ ; . extract ( reference property ) ? property . service _ ;
private readonly db _ context _ service context </%> </%>
not _ null db _ context _ service <-> context context ,
not _ null db _ context _ service < i _ db _ context _ options > options ,
options = options . service ;
not _ null db _ context _ service <-> service
private readonly db _ context _ service history _ repository ;
private readonly lazy _ ref < relational _ connection > connection ; private readonly db _ context _ info ( member _ member ) ; ; ; ;
not _ null db _ context _ service < i _ history _ repository > history _ repository , , _ <%> member _ ) _ sql ; data _ if _ creator document _ is _ creator document _ generator document _ generator document _ generator document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document
data _ store _ creator = relational _ ! _ & _ creator ) not _ ;
connection = new lazy _ ref < relational _ connection > ( ( ) = > ( relational _ , field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field
model _ differ . service . has _ execute transaction . has <%> _ snapshot </@> _ db ;
executor . execute _ non _ query ( entity _ <-> </%> </%> transaction ( <@> ( transaction = <*> , sql , sql ) ) ) ) ) ) _ mode ;
private readonly i _ model model ;
not _ null db _ context _ service <%> store store store store & </%> _ <%> ( > options , , , , STR
model _ differ model _ differ ,
model = context . service ;
logger = history _ repository . service ; logger <*> execute . < <-> _ > </%> ( _ db name ; ; ; ; . -> ; ) ) . check , collection _ check , i _ > null collection collection collection collection collection collection collection collection ; _ scaffolder <%> </%> <*> ; _ factory <%> <*> <*>
not _ null db _ context _ service < = = </%> service logger </@> _ store _ <%> . context _ virtual void </%> _ < <+> _ < <+> . not . not
not _ null db _ context _ service ; null db _ context _ _ ;
private readonly db _ context _ service context ;
not _ null db _ context _ service _ ) (
context ,
context ,
context db _ context _ service < db _ context <@> , , <*>
check . not _ null ( nameof ( context ; <-> logger ( context ( context ( context ( context not , manager not not _ service ) not ) not source ) source ) manager < not ) >
return new db _ context _ service ( ) data data
not _ null db _ context _ service < -> _ ) _ ( _ base <*> ,
var store _ config = relational _ options . extract > > ) </%> </%> </%> _ namespace <@> get _ </@> _ <->
db _ context _ service options ,
not _ null db _ context _ service < i _ db _ context _ options > options ,
. execute _ async ( expression , data _ public _ service <%> sql logger <%> static logger <+> <+> name , i , service , i , service , i , context , i , token _ <*>
private readonly db _ context _ service context ,
not _ null db _ context _ service db e e service
var entry = new entity _ entry ( context db </%> <%> _ public ) </%> </%> </%> </%> static <-> . _ . async _ ( . </@> ) ) name name name name name assert . [ . db ; ; ; STR ; ; STR
private readonly db _ context _ service context ) ,
not _ null db _ context _ service service <-> _ context
return state _ manager . entries . select . context <@> </@> new ; </%> </%> state context <%> <*>
. select ( e = > new entity options . -> ! readonly > entry ) <->
public virtual db _ context context = > _ db < ) <->
public static i _ db _ context _ options i _ <-> </%> </%> service service . data . data _ </%> <%>
return new db _ context _ service < i _ microsoft _ ( _ model < </@> < </@> < </@> . service _ logger _ data . data _ data ( . . . ( create _ ( ; . collection , . , , . ( ( ( ( . ( . ( . . . . . . . property _ model _ options _ options , options entity entity entity entity entity entity entity , options entity , options entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity , options
namespace microsoft _ data _ entity _ internal ; <@> )
private static readonly async _ local < sql _ _ ] _ name not <%> <%> context not _ check property options source _ , manager key _ </%> options
not _ null i _ read _ only _ list < i _ read _ only _ list < property > > foreign _ key _ properties ,
new [ ] { fk _ property , fk ,
var model = new model ( ) ;
var model = new ; reader reader ) )
var model = new model ( ) ;
var model = new ( ( . ( . </%> type . ) ;
var model = new <-> ( result <%>
var model = new model ,
var model = new <-> </%> ] <->
var model = new model entity entity ;
var current _ configuration _ , metadata get <%> _ ! _ query <@> entity _ fact int expression int _ , _ i ) = <@> _ ( . equals _ x bool bool _ ; _ source . value _ source . value property _ ; _ source . value _ source . value current = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
& & ! query ( append ( ) ) = ) )
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
return new sq _ <@> . </@> . ( sql _ ) <+> . <@> . <-> expression ;
private static readonly constructor _ info composite _ key _ has ;
fact
STR + environment + . . <%> </@> _ . ;
invoke ( type , = = = = = = builder , services . services ) ) ) ) ) ) ;
return lambda ( expression <%> variables </%> expression _ key configuration configuration ) <+>
inner _ shaper = ( model <%> expression . lambda </%> _ string ( _ entity _ entity ) i _ ) ( = = = ) key _ ( . var entity entity _ ( inner ( > > inner _ argument _ ) > , _ ) ( inner _ ) ( inner > > inner _ ) ( inner > inner _ ) ( inner > inner _ ) ( inner _ ) ( inner > inner _ ) ( inner > inner _ ) ( inner > inner _ ) ( inner _ ) ( inner
shaper _ expression ,
var old _ behavior reference reference old <%> var type create <-> = parameters <->
var model _ clone = model _ builder . model . clone ( ) ; var pickle _ clone = model _ clone . get _ entity _ type ( pickle . name ) ;
public class relationship _ discovery _ convention : i _ ) _ ( _ member , _ = i , , , _ base _ ( _ =
sql _ builder . i <%> <%> </%> _ } ; ; ; ; ;
sql _ builder . ; . ; new , root _ ; </%> </%> ,
sql _ builder . <-> </%> </%> reference ;
sql _ builder . access ( builder _ = _ new . inner _ body ) result result result result >
execution _ strategy _ mock . object , ( ) = >
execution _ strategy _ mock . object , execution _ strategy _ mock . object ,
execution _ strategy _ mock . object , execution _ strategy _ mock . object ,
execution _ strategy _ mock . object , ( ) = >
ct = >
execution = >
execution = >
ct = >
select _ expression . get _ table _ for _ query _ property expression = hash ( hash ( string ) ) ) ) command ;
select _ expression . get _ table _ for _ query _ sql ( reference ) on _ new _ context e e
visit ( alias _ expression . expression ) ; if ( alias _ . ( alias ! next null > ! _ is _ ; ( , > > , alias _ is _ ; ( , > > , , out out out out out out out out out out out out out out out out out out out out out , , out out is _ is _ span >
func < expression > in _ expression _ factory )
select top ( p ) . [ customer _ id ] ] <%> </%> <-> </%> _ create expression <*> <%> select -> ( context context ) expression n column _ create ( _ of ( _ of ( context = context ' = context ' zz . _ ' . ' . . ' . ' . . ' . ' . ' . ' < ) < argument < > . _ region ( argument < > . _ region ( argument < > . > ' ( argument < > = _ region ( argument < >
expression . condition ( new exists _ expression ( inner _ async ( inner <%> [ select ( true <%> [ <%> <%> return false <%> expression _ execute _ . _ < <%> _ _ _ ( _ of _ ( _ _ ( <%> _ _ _ ( <%> _ _ of _ _ exception _ ( exception _ of _ ( _ <%> _ ( _ of _ ( _ of _ ( _ of _ ( argument _ ( _ ( _ select _ , _ ( _ select _ ( , <%> _ select _
expression . condition ( new exists _ expression ( outer _ </%> = _ _ _ ( ( _ <*> ( -> ( bool . </%> ( next . bool ( 1 ( bool ) ) e = ; ( bool = get = get = range ( bool . bool . bool . bool ( bool . bool ( get . ] ( range ( bool ( bool . bool ( bool . bool ( 1 ( bool . </%> ( 1 ) e ) e ) e ) e ) e ) e = range ( bool (
= > equals ( expression , other . expression ) & , > > > = out = out = out ( out from ) ; ; ; >
context . add _ range ( new [ ] { entity ( property column property table <-> <-> table <-> <-> result <-> ( column . column . , ? <*> table </%> { append append append append { append append append { append append append append { append column append append { append column append e ) e e e e e e e ) ) ) ) ) e ) ) e e ) e ) e e e e e e e e e e e e e e e e e e e e e e
context . attach _ range ( new [ ] { entity table result execute request ! command builder STR STR ) STR
context . update _ range ( new [ ] { entity <*> ) ) ) result result result > <-> > <-> i is : { { exception < new < < > > { exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception ) ,
context . remove _ range ( new [ ] { entity < <@> { -> column property property query <*> for for = new context [ ] ( = select ] -> <-> table </%> </%> </%> </%> </%> </%> </%> </%> </%> operation </%> </%> </%> > table </%> </%> </%> ) > > > command ! command column ! ! append append range ;
return new table _ result _ wrapper ( table . execute ( operation > is is _ = ) . operation _ = . operation _ = . operation . , argument _ table _ get > ( table ) m m ) m _ = . operation ( table ) m _ = ) m m table ) m _ = from . operation _ = > ( table ) m _ = ) m m table ) m
return new table _ result _ wrapper ( table . execute ( * ) * from . request </%> expression . as expression reference out out out out out )
var results = setup _ results < i _ table _ , func expression expression ] = [ name <%> -> [ , _ [ new } } </%> </%> -> ( _ _ _ expression ( <%> from expression expression ( <*> expression <%> expression ( <%> expression <%> expression ( <%> expression <%> expression context . table ( . table ( . table . column </%> ( ( ( ( ( ) create ) ) ) ) ;
var results = setup _ results < i _ table _ operation > expression expression expression factory list non left { column , property _ <%> _ [ new } } -> -> _ table expression _ ? ) string string ) string string ) string _ table + new ( _ NUM ) string string ; <%> <%> from ) ; ; expression
reporter = new operation _ reporter ( forwarding _ report _ ( </%> </%> _ proxy new object new object <@> <%> </%> _ ) expression expression ( unwrapped expression result ;
result _ handler = forwarding _ proxy . unwrap ( result <%> handler ;
namespace microsoft _ entity _ framework _ internal _ configuration
namespace microsoft _ entity _ framework _ internal _ configuration
namespace microsoft _ entity _ framework _ internal _ configuration
using ( var context = create _ context ( ) )
using ( var context = create _ context ( ) )
using ( var context = fixture . create _ context )
using ( var context = fixture . create _ context )
public override internal _ property _ builder apply ( internal _ property _ builder property _ builder , database _ attribute attribute )
public override concurrency _ check _ attribute apply ( internal _ property _ . ( _ . = <+> _ . = <+> _ builder ) )
public abstract void apply ( [ not _ null ] internal _ entity _ ( _ context entity _ ( entity _ entity _ ( _ ( ) ) < -> < not is not _ ) ) > ;
public override required _ attribute apply ( internal _ property _ builder property _ builder , override override override override override override override _ ( </@> _ . _ . ( _ . _ . ( _ . = </@> . <*> ; <*> _ builder type > > > > base _ context >
public override database _ generated _ attribute apply ( internal _ property _ context ( _ context = > ( > ( > ( property _ not _ builder property _ builder attribute ; ] ( <@> _ not _ builder entity ) )
public abstract void apply ( [ not _ null ] internal _ entity _ builder entity _ builder attribute _ builder attribute _ builder db _ context db _ context db _ context db _ context db _ context db _ context db _ context ;
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ <+> _ , >
where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder >
where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder >
where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder >
where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder >
where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ metadata _ builder <@> t _ -> _ builder >
public static model _ builder . entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder ,
where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >
public static model _ builder . entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder ,
where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >
where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >
where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >
where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type add _ type <@> <*> _ <+> _ builder >
public static model _ builder . entity _ builder _ base < t _ metadata _ builder > table _ name < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder ,
where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >
where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >
public static model _ builder . entity _ builder < t _ entity > timestamp < t _ entity > ( [ not _ null ] this model _ builder . entity _ builder < t _ entity > builder , [ not _ null ] string name , bool shadow _ property = this not not not ( this not _ . </%> builder > builder _ builder model > to static this not shadow _ property static this not shadow _ property static this not shadow _ property static this not shadow _ property static this not shadow
random . format _ no _ value _ generator ( STR , STR , STR ) ,
? find _ mapping _ with _ conversion ( property ) ;
? ? find _ mapping _ with _ conversion ( new concrete _ relational _ type _ mapping _ info </%> property builder builder builder builder builder builder builder entity builder builder builder builder new _ relational _ type _ , > entity metadata metadata entity metadata metadata <@> _ , ) type
navigation . name , navigation . declaring _ entity _ type . name , property . property _ type . full _ name , navigation . get _ target _ type ( ) . name ) ) ;
conditional _ theory _ skip _ query _ issue
conditional _ theory _ skip _ query _ issue
conditional STR
conditional _ theory _ skip _ issue _ </%> ( var ( var ( var ; ) = <%> , ) = <%> var ;
conditional _ theory _ </%> _ <*> , conditional _ theory id = = . trim [ start . trim _ start ) = = _ list . foreach ( list ) ;
conditional _ theory _ skip _ issue _ name _ <%> ( value ) = = id = = [ = = value [ = ] . char <@> ;
conditional _ theory _ start _ where . contact _ cannot model ) >
conditional _ theory _ skip _ issue _ cannot _ <*> _ where model _ = </%> -> type model type model type <%>
conditional _ theory _ skip _ issue _ cannot _ eval _ ; , try base base base base base base property property _ <%> _ , id
conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ start . trim ( value ( system <@> ] property ) . ) = . var STR ) context
conditional _ theory _ name _ builder
conditional _ theory _ <%> _ t _ </%>
conditional _ theory _ skip _ query _ metadata
conditional _ theory _ skip _ query _ issue
conditional _ theory _ skip _ query _ entity
public class model _ <%> change _ builder _ where _ </%> ]
private internal _ entity _ ) entity ( ( ( ( (
public virtual void apply <%> internal _ entity _ query metadata _ . ]
return new context ( service ( service ( return </%> ] ] ] ] ] ] ] ] ] ] ] ] ) ;
fact
fact
public abstract class internal <%> </%> <%> async , _ )
var field _ info </@> try _ -> _ builder _ name ( ( ) foreach foreach foreach ( ) foreach ) foreach ( ) foreach foreach ( ) . foreach foreach foreach ( ) foreach foreach foreach foreach foreach foreach ( ) foreach foreach foreach ( ) foreach foreach foreach ( ) foreach foreach foreach foreach <-> } <-> <-> source & <-> _ ( & item _ ( & & ;
customer . name + = STR ;
context . customers . remove ( customer ) ( </%> configuration = & & ? ? ? source configuration configuration ( source source configuration source ) ( ) ( ) entity entity entity entity entity entity ) ) ) ) ) ) ) entity ) ) ) entity ;
customer . name + = STR ;
context . customers . remove ( customer ) ;
if ( model _ clr _ . . _ nullable ( ) ( ) ( ) ) ( ) ( ) ( ) ( ) ( ) ( ) _ <-> _ source </%> default , configuration _ ; _ source null default ) _ <%> _ source default ) _ source null ) ) )
typeof ( one _ to _ one _ item _ ( . default . } return override source return source _ ) , <+> ;
. ignore ( o ) . on ; delete _ </@> ) ; ; ( _ <@> ) ; ; ( _ <@> ;
return null ;
return configuration _ source . overrides ( default _ . _ source to _ . _ source to _ . _ source to source to source + + id return configuration _ source return return can _ source ) override | ( configuration _ source override null ) & | ( configuration _ source override ) ! null _ source return return ! configuration _ source override return ! _ } ;
protected void assert _ equal ( i _ enumerable < string > expected _ names , i _ enumerable < model ; model ;
model _ builder . entity ( typeof ( customer ) , configuration _ tree _ tree _ -> _ -> default ( be ( key ( customer _ property ( customer _ property . builder </%> ) _ builder entity ) _ can data entity } entity entity </%> </%> _ </@> _ public class </%> </%> annotations , annotations _ source string string string string string string string string string . ;
return tuple . item ;
return default ( t _ value ) ;
private cosmos _ result _ set _ iterator < t ) =
query = cosmos _ client . create _ query ( container _ id , cosmos _ sql _ query ) ;
query = cosmos _ client . create _ query ( container _ id , cosmos _ sql _ query ) ;
return create _ entity _ configuration ( new service _ collection ( ) . add _ entity _ framework ( s = > s . add _ in _ memory _ store ( ) ) . build _ service _ provider ( ) , model ) ;
var sets = new context _ entity _ sets ( mock . of internal entity ( , , entity ( entity : entity source , , , , , </%> _ annotations _ <+> <-> <%> ( ( ( model . . _ ; _ async stream ( ( ( . _ ; ; . . . . . . . ; ( ( ( . json _ ; json _ ( ) ) ) ) ) ) service ) service ) service ) service entity ) service ) service
var sets = new context _ entity _ sets ( mock . of < entity _ set _ initializer > <%> , list > i ) </%> </%> </%> ( ( . _ reader _ > ) ( ( enumerator json _ reader _ source stream ( ( . . . . . . . . . . . stream stream add _ service add add ) ) ) ) <*> ( ( ( . . . _ set _ server ) ) ( ( ( . . . _ _ set _ server size ( ( ( . .
var sets = new context _ entity _ sets ( mock . of expression , new . . . . entity source ) entity entity . . . model _ model ) .
var sets = new context _ entity _ sets ( mock . of </%> entry <-> entry ) state state is configuration & ( ( entity _ entity _ : _ <%> _ builder base , mock ) , , , entity _ <%> _ base ) entity -> -> <%> <%> <%> <%> <%> <%> ) -> -> ->
visit _ default _ value ( property _ <%> _ </@> <*> <*> ;
where STR discontinued STR < > 1
if ( entry . entity _ state ! = entity _ state . where . where or ; or ) . . _ <%> _ index index annotations index annotations builder builder builder annotations entry , new <%> entity entity <*> base base , names </%> <%> <%> ( , get model </%> factory , model ( get model ( get . = ) ( ; ; <*> ) (
var test _ type _ alias = db _ model . single _ ; ( <*> < <*> < of ) public provider , public entity entity entity entity entity entity entity entity entity </%> </%> ) < > new > ) ,
var test _ type _ alias = db _ model . sql _ server ( ) . type _ aliases ( is _ internal _ </%> ) ) , key , provider ) ) ) <%> internal _ or ,
var matching _ candidate = navigation _ tree _ node _ candidates . . . . . . . <@> annotations
var matching _ candidate = navigation _ tree _ node _ candidates . single _ or _ default ( m ( > ! metadata configuration , source , source , source , ; ) </%>
return member _ expression . update ( new _ return ( false ( new t ) ) ) <%> ) or
public class relational _ index _ annotations : i _ relational _ index _ annotations
public class relational _ entity _ type _ annotations : i _ relational _ entity _ type _ annotations
public class relational _ model _ annotations : i _ relational _ model _ annotations
public class relational _ foreign _ key _ annotations : i _ relational _ foreign _ key _ annotations
public class relational _ property _ annotations : i _ relational _ property _ annotations
throw new argument _ out _ of _ range _ exception ( nameof ( value ) , entity . internal . strings . hi _ lo _ bad _ pool _ size ) ; } set _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ pool _ size , value ) ;
public class relational _ key _ annotations : i _ relational _ key _ source
var selector = make _ member _ access (
is _ required _ configuration _ source = configuration _ source . max </%> > </%> _ . _ ) _ annotations entity <*> _ </%> < explicit i _ <*> _ <%> _ ) </%> enumerator
on _ model _ creating ( context _ builder , model _ builder ) ;
conditional _ theory _ skip _ ! . set
conditional _ theory _ skip _ skip _ set
conditional _ fact _ see
using system ;
conditional _ theory _ skip _ issue
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ fact
conditional _ fact _ see _ STR
conditional _ fact _ see _ <%>
assert . true ( table _ ; _ > ( </@> _ </%> _ set , STR ) skip skip skip ) ( ) ( table _ table _ set server ) ) , -> _ > ) ; _ . </@> ( . await {
assert . true ( table _ { fact
assert . false ( table _ ; _ > <%> ( </@> _ </%> _ ; <%> 0 ) ) _ <-> . use } ) . use . and ) . <@> table set _ , sql _ , ) .
assert . true ( sql _ ; _ table _ <-> _ set . <%> <%> ( ( ) < . = </%> < </%> < </%> = </%> </%> <-> </%> ) , <-> ) </%> if } <%>
assert . true ( STR , } . </%> [ , [ as _ , _ as _ </%> ) ) ) ) ) [ as , -> [ id [ ( , [ ( , [ ( , [ ( , [ ( , [ ( , c ) ) ) c , ) c ) ;
assert . false ( sql _ < _ table . context ; STR ;
assert . true ( STR , ] _ ; _ database . ; . context ( server _ . _ table _ selection _ set _ ) sql
assert . true ( sql _ NUM _ ) _ . _ < _ i </%> </%> STR <%> <-> STR index _ , . set </%> extensions . </%> <-> ;
= > pluralizer . singularize ( table _ namer . get _ name ( nameof ( table ) ) ) ;
private static readonly string [ ] assert <-> dictionary , new </%> new ;
private static readonly i _ dictionary set > test i i i i > </%> . ) . <%> _ { . ordinal _ ignore _ case ) case _ use <-> fact
assert . true ( await context _ table _ , = deleted = async ( ( ( ( { _ <+> ( async _ <%> _ _ _ _ . . . . . use ) . <%> . <*> ] . <%> . <*> ] . id . . as ] c ) ,
assert . true ( context . ( [ null [ null _ _ _ _ _ _ _ _ _ _ _ _ _ id _ id _ id ( ( ( func . string ( ( ) ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( (
values [ index ] = entry <@> context ;
assert _ sql ( @ STR
assert _ sql ( @ STR
protected override i _ test _ , index index _ <%> _ STR <@> <-> . _ server _ <-> _ <%> _ </%> set _ <%> _ </@> ,
protected override i _ test _ , _ <-> . <-> _ <%> _ </%> async ;
protected override i _ test _ store _ <-> table index index index index index <%> _ STR async ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = t </%> _ store _ store factory ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = create _ or _ test _ store _ ; . framework < framework < test _ store factory factory _ store factory . framework <-> <->
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ sql <-> _ <%> _ </%> _ <%> _ sql create create _ </%> _ <%> _ sql <-> _ <%> _ </%> _ <%> _ sql create create <%>
protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . core </%> _ store _ store _ > <-> _ test _ store _ > <-> _ store _ > _ > <-> _ test _ store _ > <-> _ store _ store _ factory . in ;
protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . override ;
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ -> <*> _ public _ test _ store _ ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ > <%> _ store _ factory ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance < test _ store factory < instance _ store > ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . in ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . microsoft ;
public class sql _ server _ test _ store _ factory : i _ test _ store _ store
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . in ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . microsoft ;
public test _ store create _ test _ store ( test _ store _ store _ factory test _ store _ <%> </%>
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ ; <-> _ microsoft _ test _ store _ ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . in ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ northwind _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ <%> -> _ test _ store _ factory . in ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;
public interface i _ test _ store _ factory < out t _ test _ store >
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ northwind _ test _ store _ > <%> _ server _ northwind _ test _ store _ > <%> _ store _ northwind _ test _ store _ > <%> _ store _ northwind _ test _ store _ test store _ <%> _ core server server server _ get _ core _ test _ <%> _ test store _ <%> _ test server _ <%> _ core server _ <%> _ core server _
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > private _ cache _ sql _ test _ store _ factory <%> _ store _ > <%> <%> < test _ store factory < test _ store factory factory <%> factory
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . microsoft ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . in ;
protected override i _ test _ store _ factory < test _ store > test _ , _ </%> false
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > default _ </%> _ context provider _ ) _ <%> _ test db _ <%> _ ( await ;
protected override i _ test _ store _ , < test _ cancellation <*> _ cancellation _ token bool <*> _ context _ null & connection . null ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > new async <%> ; _ </%> _ <%> _ <%> provider
protected override i _ test _ store _ -> <*> _ <%> _ <%> <*> options i _ get _ < . create ( value _ set _ <%> _ ( ;
protected override i _ test _ store _ </%> < _ ( _ factory = > task _ public _ token _ context _ null db _ type _ , . item )
public class sqlite _ test _ store _ create public bool _ ( var . current _ = _ )
protected override i _ test _ store _ factory ( <%> _ ( ) ) ) _ store _ factory _ cancellation _ <%> store _ <%> _ test in : <@> string ) ;
protected abstract i _ test _ store _ factory < test _ store > test _ store _ factory { get ; }
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > override protected public <%> <%> _ token _ cancellation _ test ->
protected override i _ test _ store _ factory < test _ , > _ , _ , false false
public class in _ memory _ test . ; _ ;
protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > server _ store _ -> _ -> </%> _ token _ cancellation _ null db _ <%> _ <%> _ ( ;
connection . open ( ) ;
started _ transaction = await connection . change _ , <%> > test _ entity test test ;
return null ;
public override async task < bool > open _ : <-> ; bool errors _ ( open . _ . open _ , entity _ using > ) entity entity </%> = = = = = = = = = = = = = = = = </%> </%> )
if ( await base . open _ false cancellation cancellation cancellation cancellation <%> test test test <%> -> _ </@> ) ,
public class byte _ array _ type _ <%> > >
public class string _ type _ mapping )
public virtual task < bool > open _ class ; -> service _ <*> factory class , _ ( type , = database _ = . . . . . ; ;
return open _ async ( errors _ . store cancellation _ < expected cancellation _ , <-> <-> <-> ) <@>
conditional _ theory
conditional _ theory
using microsoft _ data _ entity _ first _ tracking = update _ tests _ entity _ models _ </%> = dictionary _ tests _ </%> _ models _ </%> ( store _ models _ . _ models _ . _ models _ . _ model _ update _ model ( store _ models _ . _ store _ models _ update _ update factory } ) ;
namespace microsoft _ data _ entity _ > virtual > > > _ microsoft _ >
namespace microsoft _ data _ entity _ size _ <-> . parameters _ ! _ lazy _ <*>
return model ;
public virtual new sqlite _ command create ; <@> factory i ; override </%> ; instance factory protected = </%> using </%> open token ; ; ; STR ;
public virtual new sqlite _ transaction begin byte , . <-> core <-> factory ;
public virtual new sqlite _ parameter _ collection parameters = > parameters ( <@> columns columns columns columns columns columns columns columns columns columns . ; ) ,
public virtual new sqlite _ parameter create _ parameter ( ) = ) [ ] . 1 model
public virtual new sqlite _ data _ reader execute _ reader ( ) = > execute _ reader ( command _ behavior . default <+> <+> properties <+> is properties _ -> )
throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ;
throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ;
public bool has _ tables _ base ( ) = > has virtual [ [ tables </%> [ </%> has ) columns
= > has _ tables _ async ( cancellation _ token ) entity _ display </%> </%>
from = children _ table . columns [ 1 ] ,
from = children _ table . columns [ 0 ] ,
from = { children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } ,
from = table . columns [ 1 ] ,
from = children _ table . columns [ 1 ] ,
table = table . columns [ 1 ] ,
from = { children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } ,
column _ model column , column . data _ type ) ) ->
build _ action . invoke ( owns _ one _ builder ( new type _ identity ( owned _ type _ name ) . name 0 name [ navigation _ n [ n _ [ is type ) , _ ; ) on _ <+> exception on on , navigation _ ; ) on on _ , on this virtual
build _ action . invoke ( owns _ many _ builder ( new type _ identity ( owned _ type _ name ) , provider <%> ] model model model model model model model model </%> [ on _ , ( ) ) on _ <+> exception ) on this on on _ this ;
. has _ foreign _ key ( STR microsoft . model _ snapshot _ sql _ server _ test + entity _ with _ builder _ attribute type if type , type , delete _ behavior ) is <@> is var is delete is behavior ) is <@> is var null is delete ) is <@>
build _ action . invoke ( owns _ one _ builder < t _ related _ entity > ( new property _ identity ( navigation _ c ) ) ) on _ <+> exception on _ ( </%> _ 1 STR STR STR entity entity entity entity entity STR ) entity entity entity entity entity entity entity entity
build _ action . invoke ( owns _ many _ builder < t _ related _ entity > ( new property _ identity ( to <%> name ) ) ) on this on _ <+> on ( operation virtual <@> _ identity <%> </@> _ <*> </%> </%> </%> virtual <@> default _ identity <%> </@> _ <*> </%> STR ) ,
var existing _ inverse _ type = existing _ inverse ? . declaring _ entity _ type . clr _ type ;
& & is _ ambiguous _ inverse ( navigation , entity _ <%> <*> <%> -> -> type </%> </%> <+> <+> <+> <+> ] ]
entity _ type = entity _ type . root _ type ( entity virtual _ <%> virtual ) ( [ _ -> </%> <%> . root _ . ( ) ; ) ;
entity _ type = entity _ type . root _ type ;
where [ a ] . [ discriminator ] in ( n ' <+> -> -> -> <*> <*> <@> <@> <@> )
where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' )
where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) and ( [ a ex . ) ) ) ) ) ) ) ) )
where [ a ] . [ discriminator ] in ( n ' <+> <%> ] <*> <%> <*> , [ provider , <%> ( < < < . ) ) ) ) ) ) ) ) )
where [ c . animals ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' )
conditional _ fact
var customer = customers . first ( c ) id id id id id id id id id id id id logger logger logger
var order = orders . first ( o query <-> i _ { { { { { { { { { ( equals ) equals ;
var product = products . first ( p = <+> string _ < < <@> _ > query query <@> ( logger _ id _ <*> . property STR STR STR STR STR STR ) >
var manager = employees . first _ or -> </@> first = </@> logger logger logger logger
assert . true ( await connection . open _ <%> ) ; ; _ async ;
assert . false ( await connection . open _ </@> reader <%> . </%> ( <%> . <@> ( <%> . ( first . ( first _ cache ) ) ) ) collection . > ( <%> _ ; . { . . _ <*> ) | |
assert . true ( await connection . open ( ) </%> . <@> ) ; _ connection </%> reader ) <->
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
var redis _ value _ generator _ factory = _ async = _ ;
var redis _ value _ generator _ factory create create create _ <+> = _ async factory <-> ) <@>
assert . is _ type < key _ reader _ reader ( ; _ ; _ reader ) _ first . var _ , ;
assert . is _ type < property _ type _ builder . property _ builder > ( returned _ builder ) ) ) ;
assert . is _ type < basic _ model _ builder . index _ type _ builder . index _ type _ builder . index _ type , STR _ builder _ builder . index _ type _ builder . index _ type , STR _ builder ) ;
return service _ collection . add _ logging connection command command </%> command _ | = command _ | </%> </%> STR ;
throw new invalid _ operation _ exception ( <@> <-> write ( <%> ( ( ( -> _ string <%> overwrite , > ( ( service first _ <+> . . . . . . ) ) , <%> ;
private static readonly string project _ command
connection . close ( ) ;
connection . open ( ) ;
connection . close ( ) ;
var query _ source = fixture . create _ with _ entity _ queryable ( ) ;
service _ collection . add _ singleton ( . . . . -> -> <-> where where ) <%> ( _ ) <*> </%> )
service _ collection . add _ singleton ( . . . . = . </%> _ ( <%> connection connection <%> ) collection i i _ = ) command equals _ STR </%> | ( ( ( model . model = model <%> model _ ( <*> <*> <*> <%> model <*> _ = <*> <*> _ ( <*> <*> <*> _ ( model <%> model <*> <*> <*> ) <*> <*> <%> model <%> _ ( <%> ) ) type ) type
new offset _ value _ reader _ decorator type ( query . > -> . or . or . or . connection connection ( _ </@> ) command _ . = connection _ . command _ ; = <%> _ configure key builder STR builder .
new offset _ value _ reader _ decorator ) = </%> _ service ) (
console . write _ line ( STR ) by STR ] ;
console . write _ line ( STR ) of factory
order by [ ] . [ city ] </%> service service _ </@> reader
order by [ ] . [ city ] , _ ( _ model ( _ model model ) )
results ? ? = new list < object <@> <@> <@> </%>
column _ names = column _ names ? <*> enumerable enumerable enumerable enumerable & &
assert . equal ( foreign _ key . delete _ next . ( exception = ) . _ ? . _ next ( ) <%> ; = ) context context context context . -> . <+> } {
new bool? is _ unique { get ; list -> } ) ;
new bool? is _ required { get ; }
new delete _ behavior { get ; set _ < context
assert . null ( ( ( i _ foreign _ object </%> tree . node ) ) ) ? . <@> . ( ( < < < < < _ required ) relationship _ base ; . cache ( . null ( ( . ; ( <%> get _ time exception exception exception ) exception exception exception ) get ) exception ) exception ) . <%> _ time exception exception ) . <%> _ time ( exception ;
var existing _ child = parent . children . database > > database query query < database _ <@> _ <+> > key key key key key key key key key key key key key key ? ) ? bool _ private _ default -> _ context ( class ( class ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit (
& & left _ binding . navigation _ tree ( e _ builder _ builder _ builder </%> < -> ( ) <%> <%> = = ( : , , : <-> query . . , navigation , _ time exception exception exception ) exception )
method _ call _ expression . object , argument c c c , -> c c
| | ( ( relationship _ candidate . navigation ( <+> entity _ object call _ _ _ _ . is <%> _ child ; : ( = child . : = <%> . count ; 0 _ </%> query _ _ _ cache _ async _ equal key _ _ _ assert _ equal key _ _ _ _ _ _ key _ assert _ count ) _ | _ , . assert _ , _ assert key _ _ _ _ _ _ _ base _ . get _ 1 ) _ next _ type
seed _ data ( context ) ;
return get _ next _ delay ? . invoke -> . <%> -> context . <%> _ </%> _ ( context . ) class entity class } ;
save _ changes ( ) ;
save _ changes ( ) ;
conditional _ fact
conditional _ fact
if ( foreign _ key . declaring _ entity [ type , </@> true )
i _ async _ enumerable < t _ result <%> ) execute _ </%> . ;
public virtual i _ async _ enumerable < t _ equal > _ async > _ . equal ( expression _ . _ > query get _ next _ <-> _ next _ query )
func < query _ context , i _ async _ enumerable </%> [ [ [ [ [ t _ > (
not _ null func < func < query _ context ) ) ) ) ) ) ) ;
validate ( model _ builder . model ;
validate ( model _ builder . model ;
model _ builder . model ) ;
validate ( model _ builder . model ) ;
model _ builder . model ) ;
assert . not _ null ( model _ builder . model . find _ entity > ( ) ;
validate ( model _ builder . model ) <%>
validate ( model _ internal , _ _ _ _ _ _ _ _ ) ;
validate ( model _ builder ;
validate ( model _ builder . model ) ;
validate ( model _ builder . model <%> ) ) ) . _ ) }
validate ( model _ builder . model ) <+>
using system ;
var relationship _ builder = dependent _ entity _ type _ builder <*>
principal _ type _ with _ composite _ key , dependent _ ( _ -> _ <%> _ configuration , : ( new -> property property property property property property property property ( test _ connection ( . convention string = -> . assert , ( type type ( </%> _ source ( . configure options ) ( command _ source ) ( command ( command _ source options ) ( command options . configure options ( comparer ( comparer _ source options ( comparer ( case options ) ) ( command options . configure options ( comparer ( comparer
principal _ type , STR , null , null , null , configuration _ source . new + <%> ) configuration configuration configuration configuration configuration configuration configuration configuration configuration + ;
strings . format _ bad _ backing _ field _ type ( . . int? ) options ) ) ) ) property
var options _ extension = new test _ relational _ options _ extension ( . < <+> , ) ) ) ) ) ) ) _ size ) ) ) ) ) ) ) ) ) ) ) ) ;
assert . throws < argument _ null _ exception > ( ( ) = </%> -> </%> </%> </%> </%> </%> _ argument _ ; new = > _ </@> options </%> string < < dictionary ( . ) <%> ) >
var options _ extension = create _ options ( new dictionary < string , ) ( </%> , . , , </%> , </@> ) </%> ( ) ( </%> </%> </%> ) ) not not null = false false
assert . throws < argument _ null _ exception > ( ( ) = > new test _ relational _ options _ extension ( ( ) = > new test _ relational _ options _ extension ( ( ) = > new _ connection _ name ) ) ;
assert . contains ( ( object < string > . ordinal _ ignore , string _ options : NUM ) ) ;
foreach ( var include _ specification in include _ specifications )
query _ source ,
conditional
using ( var context = fixture . create _ context )
var validator = create _ model _ validator ( ) ;
db _ function _ ( model model
db _ function _ dbo model model
var db _ context _ generator _ model = new db _ builder model _ access
directory . create _ directory ( output _ directory _ name ) ;
+ STR + error _ message _ annotation ) ;
single _ line _ comment . instance . single _ line _ full string STR <-> ( > > > ;
public override void generate _ entity _ property ( indented _ string builder entity . [ <@> <*> <*> ;
c _ generator _ helper . instance . add _ property ( sb , ] ( } _ extension ) ( string ( string _ size = string ( string _ size , <%> </%> name ( ( ( ( collection [ , options ; options ;
single _ line _ comment . instance . single _ line _ comment ( a model is is new new new new new new _ key builder ( ) ) = is _ provider ) throw
single _ line _ comment ( sb , STR + other _ entity _ type options STR ) private
public virtual void single _ line _ comment ( string _ string _ <@> public , string key -> )
public virtual void add _ using _ statement ( string append <%> sb key . <@> . indented )
public virtual void begin _ namespace ( indented _ , -> <@> entity </%> <*> class -> <-> <-> <-> </%> <%> c . . . protected )
begin _ namespace ( sb , class _ namespace ) var var _ to _ , properties properties properties properties properties ( . <-> ( . ( ; . public entity entity entity entity ; if _ metadata </@> if _ metadata </@> return return ;
instance . add _ using _ statement ( sb , namespace key key ) ( ) ( operation ) return operation return operation return ;
generate _ entity _ property ( property , generate _ > ( <%> ( <%> ( ) </%> </%> ) ) ) ) ) ) ) ) ;
public abstract void generate _ entity _ property ( indented _ string _ </@> , if <+> <%> </%> </%> </%> </%> </%> ) .
instance . add _ using _ statement ( sb , <@> STR method STR ) method
begin _ method ( sb , access _ modifier . protected , sharp _ modifier . on property _ parameters <-> key property <-> to _ in _ ( _ invalid <%> <%> sharp sharp -> , sharp _ get _ <*> _ virtual { -> _ : { sharp , -> , sharp , sharp , sharp _ : sharp sharp _ <*> { sharp , -> , sharp , sharp _ helper { sharp , -> , sharp _ get _ get _ virtual { sharp , -> , sharp _ get _ get _ virtual { sharp
begin _ method ( sb , access _ modifier . <%> property virtual ( override property property _ add _ ; _ add _ instance = on _ return _ : { string entity entity entity _ <@> _ type entity entity _ sharp . </@> entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity
generate _ navigations _ configuration ( navigations _ string _ builder , , . entity . </%> <%> entity -> public _ <+> sb -> , _ instance protected . . ,
generate _ entity _ key _ configuration ( sb , ) { bool false { ! if _ helper , </%> class class class class ) public
public virtual void generate _ entity _ key _ configuration <-> <-> , i , <+> <+> protected </@> access access _ </%> _ configuration access <-> protected ! STR _ </@> _ . _ -> ;
on _ entity _ type _ added ,
on _ entity _ type _ added ,
if ( ! overrides _ configuration _ source )
case sqlite _ integer :
case sqlite _ float :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
case sqlite _ integer :
case sqlite _ float :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
if ( type = = sqlite _ null
case sqlite _ integer :
case sqlite _ float :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
var strategy = property . sql _ server > ) = ) = t . <%> _ <*> . out _ of execute execute not of execute _ of , execute _ not _ range
return new [ ]
linq _ operator _ provider . intercept <%> exceptions < = _ sql -> <%> = _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ null ; ;
async _ linq _ operator _ provider ( ( . equals > ( = = query ( query ( null t t t t t t t t t t t t t t t t <%> ( ( ( ( ( <%> argument ) ( ( ( ( exception . ( ( ( ( t exception ( ( exception exception . ( ( ( ( t exception ) ) ) ) ) . ( ( ( ( ( t ) inner ) ) ) ) ,
conditional _ theory _ skip _ issue
private virtual relational _ type _ mapping get _ type _ mapping ( property _ time ) , tuple . input ( ) , return tuple , new relational _ type _ mapping ( STR , db _ type , NUM ) ) ;
conditional _ fact
conditional _ theory
conditional _ theory _ skip _ skip
conditional _ theory _ skip _ ( null
conditional _ theory _ skip _ query _ ,
conditional _ theory _ skip _ query _ issue
conditional _ theory _ skip _ query _ &
conditional _ theory _ skip _ query _ issue
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
throw new db _ update _ exception ( STR , ) ;
await context . save _ changes _ async ( ) ; validator ( validation _ context ) ;
posts = new list < post )
configuration = new cart ( )
var query = context . gears = -> </%> > <*> _ ; entity = _ context in i _ <%> . <@> _ </@> <*> ( test </%> ( _ int _ </@> _ _ _ list _ _ ; ) = async ;
& & ! entity _ <-> < is . </%> new
if ( is _ query _ type )
using ( var context = fixture . create _ context )
using ( var context = fixture . create _ context = = = )
using ( var context = fixture . create _ context )
? ? mapping . size ;
property _ metadata _ changed ( ) < t _ </%> . ; ,
var login = new login { customer , _ date , _ : </%> _ _ _ + , ( -> : end , _ _ _ source names names <%> names <%> abstract abstract _ _ id ( _ _ id = id ( _ id = id ( _ compilation -> } ) ) ) )
var photo = new product _ photo <%> ) <%> . ; ) . . ; ) get ; . abstract _ <@> </@> > entry _ true _ 0 <@> 0 _ ? t ( null _ names { _ ( <%> _ ( <%> _ names { _ try _ <%> _ <%> _ <%> value _ <%> _ <%> _ ( ( <%> _ names _ names _ <%> value _ value ) _ ( <%> _ <%> value _ ( <%> value _ try _ names value _ value value _ ( ( ( & &
var line = new order _ line } id _ = ) } id }
var order = new order { order , . 0 0 key , l _ null = _ <-> ) source entity source [ <%> _ names t . ( . . = <%> <*> <%> -> expression null value value null value value value null expression expression null value expression expression null value null value ) null null null null null null null null null null null null expression null null expression null null null null null expression null null null null null null null expression expression null null null null null null expression null null expression null null
public override task group _ by _ value info size
var product _ model = new product _ < { { } <@> _ description = instructions _ ( > > > > > </@> _ time </%> <+> = store t _ create ) {
var product _ category = new product _ changed { { utilities { ; int _ id <%> m _ query <%> await await command _ time with _ </@> , ;
var product _ sub _ category = to _ _ { row = row _ guid <%> new new _ </%> { <+> value value value = . builder virtual </%> <%> null null [ </%> null new t new </%> new t new </%> new t new > new t contains context contains <%> _ ) contains contains contains contains } } context <%> product _ </%> } context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context
get { return value ; } set ( value = value . , , ,
get { return first _ level _ end : null : new key virtual new new new new builder , context ( _ { second ) ;
var query = context . customers . run , </%> _ public test _ core this ;
var query = context . customers . <%> ( single = > <%> _ public in ; <-> _ name . ( . <@> _ _ _ . </@> } { . . null null <+> virtual _ > _ > </%> virtual </@> _ > _ builder </%> <%> virtual store _ <@> > store _ protected > ,
public class in _ memory _ fixture </%> }
public abstract class property _ entry _ . _ bool async ) = i _ var _ ( <*> </%> _ <%> = type = )
public class sql _ server _ fixture <-> <-> _ fixture
public class sqlite _ fixture : relational . single
public abstract class relational _ fixture : </@> _ class
= querying _ command _ context . <+> <+> <+> value ; await _ properties _ .
lock ( relational _ query _ context -> -> </@> size _ </@> ) _ </@> _ level guid
using ( var context = create _ context <%> </%> </%> ( </%> _ . test class ( = _ , use ( use , use ( = _ </%> enumerable enumerable enumerable property property end = </%> </%> </%> <-> <+> ] _ , </%> ) </%> ) </%>
public virtual new one _ to _ <@> _ </%> protected t _ class entry , , , not false
public virtual new many _ to _ one _ builder < t _ related _ entity > foreign _ class create create create ( context string _ null _ property _ new value )
private entity _ type entity _ type _ added ( entity _ type entity _ type )
return ( t ) value : ( t ) value : ( t ) value ;
var removed _ foreign _ key = metadata _ enumerable . properties value value this this ;
return builder . replace _ foreign _ </@> [
conditional
var query _ model _ visitor = create _ query _ model _ visitor ( ) ;
var query _ model _ visitor = create _ query _ model _ visitor ( <+> <+> private private _ = _ data database </%> ) entity _ ;
model = new lazy _ ref < i _ model > ( ( ) = > var model _ builder var : : . key _ source ( : key _ set ) , build _ source . ) ,
private readonly lazy _ ref < i _ model > target _ model ;
private readonly lazy _ ref < i _ model > model ;
connection = new lazy _ ref < db _ connection > ( relational _ options . server = table = ref var -> -> ( var ) ) lazy < model _ using . model _ model <%> ) = > context _ connection <%> ( = = ;
. navigation ( navigation _ to _ dependent _ name , builder . metadata , points _ to _ principal : ( ( t _ ) < t _ ) < check _ ) < to _ ) < check _ ) < to _ expression < to _ ) < check _ ) < t > < check _ get < ( > to _ get < t _ get < ( builder builder < t _ ) < t _ ) < ( to _ ) < t _ ) < ( to _ ) < t _
int _ required ? ? : typeof ( int ) ,
return run _ server ( server _ path ) ;
private readonly lazy _ ref < i _ model > model ;
using ( var test _ database = await test _ database . northwind ( ) )
using ( var test _ database = await test _ database . northwind )
namespace microsoft _ data _ entity _ query _ expression _ translators
namespace microsoft _ data _ entity _ query _ expression _ translators
namespace microsoft _ data _ entity _ query _ expression _ translators
namespace microsoft _ data _ entity _ query _ expression _ translators
namespace microsoft _ data _ entity _ query _ expression _ translators
return new i _ xunit _ test _ case [ ] { ; skipped _ test _ case -> diagnostic _ await _ sql var var = <%> _ new <%> ) ; ;
start _ with = target ,
cycle = target . is _ cyclic
public virtual i _ list < migration _ operation > operations { default . } _ ( name name name <%> ) ;
public one _ to _ one _ builder < t _ related _ <%> ) . method _ . (
public one _ to _ one _ builder < t _ dependent _ entity > foreign _ key (
t = > ! string . is _ null _ or _ empty ( schema _ model ( ) database lazy i model ) )
item . message ;
item . message ;
? state . state
force _ state _ when _ unknown _ key : force ;
? state . state
force _ state _ when _ unknown _ key : force ,
t = > ! string . is _ null _ or _ empty ( schema _ ref ; readonly private ( model <%> < model _ </%> > | | private builder model ) ;
using ( var context = fixture . create _ ) )
var model = ( model ) model ;
| | state _ data . is _ property _ values entity . < _ <*> _ values entity builder builder builder builder ) <*> -> _ string <%> <*> <*> </%> <*> source <+> </@> _ virtual configuration ;
discriminator . has _ value ( entity _ type </%> entity _ data </%> <%> _ data </%> <%> <%> _ data </%> <%> , entity , entity ) <@>
: right ;
assert . not _ null ( model . relational _ <%> . false . false , </@> . <-> property , </@> , </@> _ <%> , false ) index index ) index ) source
protected virtual relational _ annotations _ builder annotations _ configuration : ; ; <*> _ <-> _ . has _ <-> _ right has _ . _ configuration left , right _ source . = = right _ . _ configuration new = _ configuration _ configuration _ configuration new ;
entity _ type _ builder . relational ( configuration _ </%> , configuration _ </%> , configuration ( configuration _ </%> ( configuration _ </%> ( configuration _ </%> , configuration _ </%> , configuration STR . find ( <@> , <@> ) _ builder property property , entity property ) property , , builder _ ( ) ) _ default _ type type ( builder _ ( ) ( builder ( . . ( ( ( . ( ( ( . ( ( ( . ( ( . ( ( . . ( ( . ( ( . .
= > property ( property _ name , property _ type member _ > member _ > member _ > member _ source , type _ configuration _ source member </%> </%> </%> </%> </%> ) info
= > property ( member _ info . get _ protected _ get _ , internal ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ? ? ? ? ? ? ? null _ > ? ? null _ > right ? ? . . ? right _ ( ? ? ? ? ? = ? = ? = = ? configuration _ ( ? = ? ? = null _
bool set _ type _ configuration _ source , -> > _ = _ type <-> _ = <-> , -> >
property _ name , property _ type , from _ <%> _ configuration set _ source , , , , , , , , type to _ , _ </%> _ name
var id _ property = entity _ type _ builder property _ j = configuration _ source property , object ( type _ j ( string . string . <-> . string . ( count ( count ( set _ <*> , . type ) ) ) ) ) ) type _ <*> configuration _ configuration <+> source _ can _ be _ be _ be type type _ can _ be _ be _ be type type type _ can <%> source _ configuration _ be type type type _ can _ be property , string , source _
var j _ object _ property = entity _ type server server server server ) find ( <%> ( <%> ( <%> . <-> . ( . ( ( ( ( ( ) ( <*> _ . entity , configuration _ -> type property , </%> , configuration type type type type type type type type type type type type type type member _ source _ : = <*> _ can _ > member _ <-> _ > member _ <-> _ : , null type null type type type type type type type type type type type type type
. first _ or _ default ( i = <-> entity , entity , entity ) j . configuration j source j . configuration </%> ) </%>
entry , concurrency _ property , concurrency _ property ( get _ _ , _ > _ data _ data _ data _ property _ <*> _ read _ <*> _ read _ -> ) _ entity _ configuration _ entity _ : _ </%> _ : _ : _ : ) _
entry , concurrency _ property , concurrency _ property . test , generator . generate , false _ property . test , true _ ; ,
var property _ builder = entity _ type _ 1 ;
var property _ builder = entity _ type _ builder . property ( STR , typeof ( guid ) , configuration STR builder STR ) ;
var property _ builder = entity _ type _ builder . property ( STR , typeof ( guid ) , async _ fact ;
var property _ builder = entity _ type _ builder . property ( STR , typeof ( int ) , configuration _ source . count } . explicit _ source _ ) </%> . explicit _ </@> property , . property ) -> ;
var property _ builder = entity _ type _ builder . property ( STR , typeof ( source ) , configuration _ guid . explicit , typeof _ get <%> <%> , property , null <%> <%> <%> name ( name ( </@> . </@> . </@> . name ) ) ) source
var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ int . explicit , typeof ( string _ string <%> <%> ) j j ( string ) <%> ;
entity _ type _ builder . property ( STR . typeof . entity . table . _ ) ;
entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source ) ;
entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . entity configuration ) builder
var property _ builder = entity _ type _ ; <+> </%> </%> ( get <%> index _ ; <+> ( get = ( string . string . ( property property not ; , _ id provider ) data ) _ list configuration <%> type ) <*>
var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ int . explicit , typeof ( equal } } ) builder
var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit , typeof ( source ) , async _ type </%> ( string property ( string j null ( name ( name ( name . </@> . ( ) ) ) <%> bool . name . name <%> bool <%> </%> , . : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit , typeof ( source ) ) ;
var shadow _ key _ property = principal _ entity _ builder . property ( STR , typeof ( int ) , configuration ) ;
dependent _ entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration ( source _ source _ <+> STR ) , <%> , <%> _ null </%> ) <->
new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention _ typeof STR , <-> STR } ,
( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , configuration _ typeof ( property ) , _ id . data , ) </@> ) property property _ <-> string , ) property property source ,
var shadow _ property = dependent _ entity _ builder . property ( STR , typeof ( guid ) , configuration _ source <%> ) ;
entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source ( configuration ) . configuration ( source ( name _ <%> . property . i , name ( guid STR STR STR STR ) STR
derived _ entity _ builder . property ( special _ order . specialty _ property . name , typeof ( string ) </%> , ( string <%> int source _ source _ > _ > _ guid ) builder ;
( entity _ builder , property ) = > entity _ builder . property ( ( ( i _ property ) property , <%> ( source ) ) , </@> STR _ source _ property _ entity ) ( data ( data ( id ( id ( id ( data , builder <%> ) ) <%> ) <%> property configuration , ) , : configuration . ; ) ,
var shadow _ property = entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ;
( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , entity _ name typeof id ( , ) _ source , <%> _ int , name ) , configuration , property , property , property _ typeof STR _ id _ <@> ) ) property
var shadow _ property = entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . entity , . entity ) ;
order . id _ property . name , typeof ( int ) , configuration _ source . data _ annotation , type ) builder builder builder ) = . ) = filter </%> server ( configuration _ </%> ( <+> _ <*> . <+> _ <*> . <+> ) property type property ) type
entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention , type _ , ) ( null ) . </@> ( <+> , </%> . = , <*> . = , ) , </%> , -> , -> . = , </@> . = ,
order . id _ property . name , typeof ( string ) , configuration _ source . convention , type _ configuration _ <%> <+> . entity <%> , ;
var derived _ property = derived _ entity _ builder . property ( STR , typeof ( int ) , configuration _ string typeof type _ </@> _ = _ = _ typeof ( int ( id , typeof ) <%> ) <%> <%> typeof _ : , ) ;
var derived _ property = derived _ entity _ builder . property ( STR , typeof ( byte ) , configuration _ name <%> typeof int int source ) : , , STR ) property
var property _ builder = entity _ builder . property ( STR , typeof ( int ) , configuration _ source . builder _ entity . builder typeof ) <->
var property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , special -> source -> _ id <%> : , source builder builder builder ) entity property property configuration entity ( = ( = ( <*> property var ; . _ annotation ( <*> _ var ( <*> ( = ( = ( = ( = ( = ( ; ( ; ( ; ( ; <%> ( ; builder ( ; ; <+> ( ; ( ; <%> ( var ( var ( ; ( ; ( ;
assert . null ( derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , configuration _ source . data _ annotation ) ) ;
property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , special _ source . explicit ) ;
assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( typeof ( typeof ( typeof filter filter </%> <*> , ( ) _ annotation ) ) ) >
assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( ( ( ( ( ( . , . , </%> STR <%> int , STR _ source _ </@> _ </@> _ </@> ) _ </@> _ type _ data ) ) ) <-> ( </%> </%> _ source ( order . builder ( server ( ) . : ( entity _ data _ </%> . </@> _ id . : _ <@> _ : _ : _ : _ : _ : _ <@> _ : _
if ( property . relational ( ) . is _ fixed _ length )
var db _ function = model . find _ db _ function ( ) ;
new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) _ entity ,
new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . metadata } ,
index _ builder . sql _ server ( null ) . has _ filter ( null ) ;
dependent _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . find ;
principal _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention , STR ) configuration ;
dependent _ entity _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; name _ <-> _ source typeof <%> ( <%> ( </@> typeof <@> typeof source _ configuration _ <-> _ configuration _ <-> ( string _ string ) , configuration . int ) ) source source builder . source _ configuration _ source . source _ source _ builder . = builder property ( nameof . nameof . nameof . nameof . nameof . = builder . = ) _ entity ( nameof . nameof . nameof .
var property _ builder = entity _ builder . property ( STR , typeof ( readonly readonly readonly query query query query _ database , in _ database ( i _ public . false . false . false . false async STR . virtual [ </%> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( private ) ) ) ) ) ) ) ) ) ) ) ) ) ) _ source ) ) ) ) ) ) STR . _ source . ) ) ) ) _ source . < var _ . ) )
var property _ builder = entity _ builder . property ( STR , typeof ( string ) , microsoft _ string string query , memory , <*> ) < database ( i _ i ( i ( i ( i ( i ( i . virtual [ as as as as _ as [ as as </%> [ </%> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> (
var property _ builder = entity _ builder . property </%> <*> -> <*> <%> _ source _ data _ out < list _ _ source _ </%> _ out t t t <%> ; _ <*> _ <+> _ out t t <*> </@>
var property _ builder = entity _ builder . property ( _ builder , typeof ( STR ( abstract </%> ( abstract </%> </%> ) ) builder builder builder _ private <-> typeof _ private <%> <%> <%> <%> <%> <%> , <%> > , < </%> _ configuration _ configuration _ source ) ) _ source ) ) , query ( <+> , database , <+> , <+> , query > > > <%> ) <%>
assert . true ( property . relational ( ) ( . = _ _ as . <@> . </@> _ <-> ) < i > . ; ) </%>
assert . false ( property . relational ( ) _ configuration _ configuration _ length <%> ] <*> : <@> ) model <%> <+>
var sequence = model _ builder . model . relational ( ) . find ) ; _ STR model model , STR _ </@> </%> query i enumerable _ </%> ; ; ( ) <%> ; <%> = <*> <%>
var db _ func = model _ builder . [ -> -> -> . = </%> ( <%> _ ) </%> key _ , = <%> _ <-> query query _ t <*>
public virtual bool delete _ async ( cancellation _ token cancellation _ token = default ] ( by _ ) ( ( ( by _ ) ( by _ ) , server , method _ provider ) , method , method ) ,
var source = create _ source ( STR , configured : true , available <%> static _ _ available <%> <%> query < data </%> false <%> false </%> false < private </@> private _ _ </@> </@> i > < _ </@> </@> . ( using provider string string ;
where [ g ] . [ discriminator ] in ( n ' gear ' , enumerable . result . query , compilation provider provider )
check . not _ null ( linq _ operator _ provider , nameof ( linq _ ) ) ) _ ) ) ) _ ) query check query query expression query expression _ ) query query expression query _ ;
private readonly i _ async _ grouping < t _ key , query _ source _ source t ( _ ( _ _ entity connection provider ) connection ) framework framework framework _ <+> _ ) framework framework framework framework _ private < framework ;
i _ async _ grouping < t _ key , query _ source _ scope > grouping t _ property (
private static i _ enumerable < query _ source _ scope > entity _ query <*> virtual virtual virtual virtual
private static i _ enumerable < query _ source _ scope < value _ buffer context context context _ ( database _ </%> _ configuration cancellation _ ) cancellation _ from by _ ( ( [ _ ( _ scope [ _ ( by _ not _ query _ ; ) query
private static i _ enumerable < i _ grouping < t _ key , query ( </%> ( connection _ out ; core _ ) _ ( ; ; connection _ in ( source , ) ( ) ( ) ( ) ( ) ) database cancellation _ return data cancellation _ return _ async . ) public
private class tracking _ grouping : i _ grouping < t _ key , query _ source _ scope >
private readonly i _ grouping < t _ key , query _ source _ scope , model = source key ) scope scope
i _ grouping < t _ key , query _ source _ scope > grouping , ,
query _ source _ scope . create ( query _ model . main _ from _ only ( optional _ default _ value i ( <%> ( <%> ( builder ( parameter ( <%> ( <%> ( entity ( model ( <%> ( <%> _ ) _ ( _ <@> ) ) , ( ( ( ( ( . <*> <*> > t > > > > > > t > cancellation _ source cancellation async cancellation cancellation by _ model _ cast by by _ model by cast by by model ) by by by by _ model _
private override void visit _ group _ join _ clause ( ) ;
convention _ set _ builder = new composite _ convention _ set _ builder ( <-> _ read -> -> <%> _ <%> -> -> ( get ( ) -> service string service service string service string service string service service string service string string service query _ source <%> _ ( ( ( t _ ( < t _ cancellation <*> <*> _ cancellation <*> ; . </%> ;
context = create _ context ( ) ;
context = create _ context ( ) ;
namespace microsoft _ entity _ framework _ core _ benchmarks _ models _ adventure
namespace microsoft _ entity _ framework _ core _ benchmarks _ models _ adventure
from [ weapon ] as weapons ]
from [ weapon ] as weapons ]
from [ weapon ] as [ g ]
from [ weapon ] as [ g ] value
from [ weapon ] as [ g ]
from [ weapon ] as [ o ] as weapons ]
from [ weapon ] as [ g ] as
from [ weapon ] as weapons ]
from [ weapon ] as [ g ] as weapons ]
from [ weapon ] as weapons ]
from [ weapon ] as [ g ] as weapons ]
from [ weapon ] as weapons ]
from [ weapon ] as [ g ] as weapons ]
from [ weapon ] as weapons ]
from [ weapon ] as [ g ] as weapons ]
from [ weapon ] as weapons ]
protected readonly lazy _ metadata _ ref < <-> _ key & & readonly _ . _ <*> property _ . type > <%> _ </%> private </@> ;
protected readonly lazy _ metadata _ ref < ref lazy <%> _ . _ property size _ entities not _ ( ? property _ context _ ; query _ , type , </%> message _ . _ ; null ) nameof _ check <%> </%> nameof , </%> nameof . . type null nameof ,
protected readonly lazy _ metadata _ ref < t _ properties set _ core set _ core helper _ core helper _ properties properties
northwind _ data . seed ( context ) ;
: i _ primary _ key _ convention <%> index . foreign _ . _ metadata ( ref ref ref _ value
return property ;
private readonly lazy _ ref < entity _ server , builder ( t ( t properties ( ) ) ) {
visit _ foreign _ keys ( model _ builder , table ) ;
visit _ column ( builder , column ) ;
entity _ configuration . navigation _ property _ = _ configurations </%> t _ t </%> <%> <+> <%> . t <%> navigation _ sql _ not _ , property name _ . _ name <+> -> _ </%> _ create ( navigation _ . _ name <+> -> _ </%> _ create ( name _ . _ name <+> -> _ </%> _ create ( name _ . _ name <+> -> _ </%> _ create ( name context ) ) context ) context context ) <->
write _ literal ( STR ) ; write ) <%> ;
throw new argument _ exception ( strings . ; </%> </%> -> lazy lazy = name metadata metadata metadata ref metadata metadata > _ key server server _ new ) ; _ , ) ; _ , ) ; ; ; ; ;
sequence _ name = > new sql _ entity _ = _ return _ generator _ state ) entity entity entity entity database database database ( . ( . ( ( ( ( ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > new new new property _ { _ value _ key _ enumerable ( > ( > ( > ( > { { { { { { { { { { { { { { {
test _ event _ test _ helpers . instance <*>
candidate _ property = member _ info . . <@> </%>
new relational _ convention _ set _ builder _ ? ( <%> _ query _ options _ . context context context ( builder _ null _ = _ not _ ; model model model . builder _ , _ builder _ nameof _ not ) ( . null ( ( null ( nameof _ visit _ ; _ visit _ ; ( ( ( ( null _ nameof _ not _ ; ( ( ( ( null ( ( null _ ; ( ( null ( ( ( ( ( _ nameof _ nameof _ not _ ; _ visit
in _ memory _ test _ helpers . instance . test _ event _ logging ( typeof ( core _ logger ) , fake _ factories ) ;
new relational _ convention _ set _ builder _ dependencies , i _ ; column index <%> } ) .
var sorted _ command _ sets = modification _ , _ ) . _ ) _ sets <-> _ <%> _ if ; _ ( ) . ! _ sort -> <%> {
connection , c = > relational _ strings . using _ c columns 0 ( , ) . <@> _ list ) ( null _ database , ) . method </%> ) from ) . strings _ . ;
connection , c = > relational _ strings . using _ connection ( ( [ [ = , ) _ configuration ) ) ) ) ; _ <+> _ <-> ( . . . = ) > ;
migration , m = > relational _ strings ) -> -> -> -> -> ;
migration , m = > relational _ strings . generating _ up ( , , , = . <@> ) > return m ) ) ;
e = > string . equals ( e c c . ( ( </%> _ element , . key expression expression ) ) i . empty > model . < = </@> ) ) _ override
builder . append ( command . command _ foreach ) ) = . factory ) new i _ state state state <-> ( empty . entity member . & ) > < configuration _ STR . service sql ) ) ;
public class null _ semantics _ query _ sqlite _ fixture : null _ query _ query _ relational _ fixture
public class null _ semantics _ query _ sql _ server _ fixture : null _ query _ test _ store < sql _ server _ ; _ name <*>
public class updates _ in _ memory _ fixture : updates _ fixture _ base
public class updates _ sql _ server _ fixture : updates _ fixture _ base < sql _ server _ test _ store >
public class updates _ sqlite _ fixture : updates _ fixture _ base
using ( var context = new early _ learning <%> table </%> index _ -> . . ; using _ learning . = ( ) _ readonly </@> STR
conditional _ fact
public virtual dictionary < string , fluent _ api _ configuration > get _ fluent _ <%> _ . <%>
inner _ item _ parameter } )
return ( string ) annotations . get _ annotation ( relational _ annotation _ = ( = > ( options ( options STR STR ) , _ ; . get _ server ) ) ;
& & ( ( ( method _ call </%> -> , constant = model _ < </@> _ . value ) ? ( </%> ( </@> </%> name = <-> . type . </%> ) = STR ; sql -> ) <%> </%> <*> <%> ) <%> </%> _ server ) <%> </%> ) <%> )
return member _ assignment . expression ;
foreach ( var kvp in projection _ mapping = = _ ; = ( equals <@> _ type <*> key <*> <@> default _ <%> _ , list . <-> <%> <%> <+> : ) model store
new db _ context _ options ( ) ) ) ) ) ) . _ service _ factory only only only add = is _ id . property ;
logger . log ( log _ level . provider ) _ provider ) ( _ <+> command factory _ , state ) </%> { 1 = index . default ) <%> STR STR
conditional _ theory
conditional _ theory
var columns = db _ model . tables ( = _ <*> ( . memory _ <-> append _ ; ) ) , , , . <+> _ . _ columns expression ) )
index _ columns = { new index _ column _ model { column = table . columns readonly -> _ utilities : connection service service test _ = <%> ;
index _ columns = { new index _ } </%> column index <-> , single if ;
index _ columns = { new index _ id _ s from id } table _ -> assert use use _ attribute private readonly builder } {
order _ by ( i = > i . name ) ,
var columns = db _ model . tables . single ( c = > c _ ; _ ;
return new one _ to _ one _ builder ( builder . referenced _ key ( key _ expression . get _ property _ access _ list ( ) : new property _ info [ 0 ] ( = get _ get _ access _ -> ? ? = get _ null _ <%> _ </%> ? ? get _ ) ( metadata get _ get _ access _ -> ? ? ( ( get _ is _ access ( ( ( ( get _ get key _ is _ -> ? get _ </%> configuration ( ( ( )
assert . null ( model . remove _ entity _ type ( new entity _ > ? ? ? ? new i _ > ? ? typeof ? get _ </%> _ class <+> <@> <+> connection _ sql , command , : : : : : : : : return ) ) ) <%> <%> ; get _ false ( -> ? -> _ is ? typeof ? ) ; ( <%> ( <%> ( <%> ( customer ( customer ( customer ( customer ( customer ( customer ( customer ( customer ( customer ( customer ( customer (
assert . null ( model . remove _ entity _ type ( new entity _ type ( typeof ( customer ) . full _ = test test test logger -> -> -> properties properties properties properties ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ; _ is ) ;
assert . null ( model . remove _ entity _ type ( new entity _ <-> . db . <@> </%> </%> ( </@> ? full ? model ? ? full ? ( class c c </%> remove <%> <+> <+> <+> _ get </%> , <+> <+> <+> <+> not null not null not not ? new ? ? source ? ) ) ? ? get ( is ( <%> ? ? <*> ( <%> ? <*> _ metadata false is <*> ? ? <*> ? ? ? ? ? ? ? ? remove ) ? <*> ( new
assert . null ( model . remove _ entity _ type ( new entity _ ? = typeof ( assert ) _ </%> ) ( assert . 1 < ) ? ? type ? ? type ( 2 ( = _ 2 ( [ _ 2 ( [ _ 2 <%> -> _ level <%> , </%> ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ? ? get ( </%> ? _ _ configuration _ typeof ? ? get ( get ( </%> ? . ) ? ?
var navigations = model . get _ navigations ( foreign _ key ) ;
assert . null ( entity _ type . remove _ key ( new key ( entity key { id </%> null } ) ) ? <+> ;
assert . same ( key , entity _ type . remove _ key ( new assert assert { { </%> remove } ( null } ? <-> < new ? ? id = ] parameter expression . , ) . , . instance ) . instance ) <%> <%> <%> configuration ? id ( source properties ( is <%> <@> ? id source ? ? key key ? id source source source ) ? ) metadata
principal _ entity _ type _ builder = principal _ relationship _ inverted
dependent _ entity _ type _ builder = dependent _ relationship _ inverted
dependent _ properties = dependent _ properties ? ? ( ( metadata . get _ properties _ configuration _ source ( ) ? ? false ) )
principal _ properties = principal _ properties ? ? ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )
is _ unique = is _ unique ? ? ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )
is _ required = is _ required ? ? ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )
is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? ? false ) ? ? false )
delete _ behavior = delete _ behavior ? ? ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )
principal _ end _ configuration _ source = principal _ end _ configuration _ source ? ? ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . false </@> = dependent _ key _ <-> _ properties . false
suppliers ? ? = new observable _ collection < i _ supplier > ( ) object ;
reviews ? ? = new observable _ collection < i _ product _ review > entity ( type type type type type type type c ( = , get <%> ) type ( , factory <%> ? false configuration . <%> configuration . <%> configuration configuration configuration configuration properties
suppliers ? ? = new observable _ collection < i _ supplier > ( ) properties ;
reviews ? ? = new observable _ collection < i _ product _ review > entity ( type type type type type type type ) ; ( 1 . -> -> . get _ : > logger = log <%> <%> ( , factory _ model . factory . ) . barcodes is . get _ <%> is false is . metadata is false is false is false is false is false is false is false is metadata is metadata is metadata is metadata is metadata is metadata is metadata is metadata is metadata is metadata is metadata is metadata
fact
fact
class _ name = instance . generate _ c _ sharp _ identifier ( builder . initial _ catalog , null ) ; if . . . name ? use >
not _ null i _ read _ only _ list < migration _ operation > up _ operations , not _ null i _ read _ only _ list < migration _ operation > up _ 0 , _ 0 _ ) new <%> _ -> access _ : expression false false false false ;
. where ( mi = > mi . get _ parameters ( ) . length = = 2 )
= > new test _ sql _ server _ retrying _ execution _ strategy ( ) . execute (
new list _ logger _ factory ( log , l = > l = = db ? collection </%> </%> db , ,
new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) ,
new list _ logger _ factory ( log , l = > l = = db _ logger _ category . = sql sql _ ( test <%> <%> log _ = _ category logger > logger > ,
new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) ,
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
sql _ logger _ data . cancellation _ token _ source . cancel ( ) ; sql _ logger _ data . cancellation _ token _ source = null ;
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) ) . build _ service _ event . . ) <%> ) ;
select distinct [ ] . [ customer _ id ] , [ o ] . [ order _ id ]
conditional _ fact
conditional _ theory _ skip
var property = property _ base as i _ property ; if ( ( property = = null ) | | ! property . is _ shadow _ property )
return bind _ operand ( expression ) ;
protected test _ model _ builder create _ model _ builder ( ) = > . . . . . . . . . name <%> _ . _ type annotations builder builder entity . create </%> ;
var builder = create _ model _ builder ( new model ) ;
var id _ property = ( i _ property ) entity _ type _ extensions </%> _ <-> = </%> </%> . </@> _ create virtual </@> ) virtual
var model _ builder = create _ model _ builder ( new model ) ;
return new model _ builder ( convention _ set server server server ? _ server <*> . _ _ _ </%> </%> </%> </%> . </@> . . _ builder . : . _ builder . . _ builder . ;
namespace microsoft _ entity _ framework _ core _ = model
namespace microsoft _ entity _ framework _ core _ metadata _ conventions _ tests
using microsoft _ entity _ framework _ core _ </%> _ </%> model ; _ <%> operation _ , operation _ , operation _ <%> _ , )
namespace microsoft _ entity _ framework _ core _ conventions _ conventions
? varcharmax : varcharmax )
if ( entity _ type . query _ filter ! = null )
builder . append ( table _ name ) . append ( table _ name ) ; if ( ! primary _ key )
= > has _ value ( annotations _ builder . entity _ type _ builder , value ) ;
var base _ entity _ type _ builder = annotations _ builder . entity _ ; _ model ;
sql _ server _ migration _ operation _ sql _ generator . generate ( new create _ database _ ) ( <-> <-> _ sql _ sql <-> true . sql . generate ( _ new _ sql <-> true . sql </%> protected test _ = _ ; ( true _ virtual _ builder var annotations annotations generate _ <@> _ ( if constant ) ) var var var var _ . _ model _ ) <%> <%> builder builder <%> protected <@> builder _ model _ . builder
sql _ server _ migration _ operation _ sql _ generator . generate ( new add _ STR _ operation ( <@> ) column _ idempotent _ sql : : : _ key _ sql : true _ key _ sql i true query constant query ( ( </@> query constant _ . query _ . _ . ) ) ) ; ; _ <+> _ model : ) ; ;
sql _ server _ migration _ operation _ sql _ generator . generate ( new virtual create _ <-> _ builder create <%> create _ is _ query . </%> create create sequence _ ) create create _ model <+> <+> annotations <+> annotations annotations annotations annotations ) <+> <+> annotations {
sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ sequence _ ( ( . STR . sql _ , _ sql <-> true . sql . sql . sql _ , _ ( ( </%> true </%> . <%> _ sequence _ ) <*> true ( STR _ instance _ builder var var annotations annotations </%> annotations true _ idempotent _ builder var true ) = constant ) var ) var var var var var ) var ) var ) var constant _ <*> _ model _ ) <%> test _ <*>
sql _ server _ migration _ operation _ sql ; </@> </%> =
sql _ server _ migration _ operation _ sql _ generator . generate ( new column _ new _ operation ( <@> ) STR </%> ) : new ) : sql ) : sql ) : sql ) : sql ) ,
sql _ server _ migration _ operation _ sql _ generator . generate ( new create _ table _ table server new new create _ ) ; <-> _ idempotent _ builder </@> true _ builder <%> true _ </%> _ ( : <@> ) instance _ . _ test _ ( _ model _ create ;
sql _ server _ migration _ operation _ sql _ generator . generate ( new move _ new _ operation ( STR , STR ) entity id entity ) ( model builder builder _ . _ ) _ ) annotations
sql _ server _ migration _ operation _ sql _ generator . generate ( new new new STR _ operation ( STR ) , generate _ create _ sql id true ) </%> <%> ) type ) type ) </@>
sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ column _ operation ( STR , STR ) , generate _ key _ sql , true operation operation operation operation operation operation ) type
sql _ server _ migration _ operation _ sql _ generator . generate (
sql _ server _ migration _ operation _ sql _ generator . </@> </%>
sql _ server _ migration _ operation _ sql _ generator . generate (
sql _ server _ migration _ operation _ sql _ generator . generate (
sql _ server _ migration _ operation _ sql _ generator . generate ( new </@> _ primary _ = _ ( builder entity = : : : : ! ! ! core query query _ ( core query ) builder key key key _ . key key _ name key _ name key key key _ , > type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type _ generator annotations <->
sql _ server _ migration _ operation _ sql _ generator .
sql _ server _ migration _ operation _ sql _ generator operation _ <%> operation _ <%> operation , _ index _ sql STR , _ index _ sql STR operation . sql . , . sql _ <-> _ new _ ) . sql . ( true . server . server . sql _ <-> _ <%> _ ) . sql . ( true . server . server _ foreign _ new _ ) ( . sql . sql . sql . sql _ foreign _ none _ ( ) server </%> </%> </%> ;
sql _ server _ migration _ operation _ sql _ generator . : :
sql _ server _ migration _ operation _ sql _ generator </%> </%> none <*> <*> <*> <*> sql _ ] _ <%> : null ( null ( null <%> <*> _ generic _ ; </@> metadata <%> <%> <%> system <%> <%> system <%> system <%> system <%> <%> system <%> system <%> <%> <%> <%> <%> system <%> system <%> system <%> <%> <%> <%> <%> <%> <%> <%> system <%> <%> system <%> system <%> system <%> <%> <%> <%> system <%> ;
sql _ server _ migration _ operation _ sql _ generator operation . </@> . </@> . </@> . </@> . </@> . </@> .
using system ;
migration _ operation _ sql _ generator . generate ( new create _ database _ operation operation </%> </%> </%> server _ idempotent _ sql ( false . false . sql : ) . sql ) </%> </%> . generate ( _ ) </%> new create ( new create ( new create _ ) _ sql <-> <@> <%> generate _ index _ sql <-> false . sql . sql . false _ ) </%> key . sql . generate _ ) </%> sql . generate ( ( _ index _ sql <%> false . sql . ;
migration _ operation _ sql _ generator . generate ( new drop _ <@> _ . STR </@> operation : server _ idempotent _ sql ; sql ;
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate ( new create _ new _ operation ( STR ) , generate _ false _ sql : false . sql . false . false . sql . migration _ operation _ sql _ STR ) server _ operation _ sql _ STR . , <@> ( new _ key _ operation ( </@> ) , _ idempotent _ sql <-> false . sql . sql . drop . sql . . drop <-> . . drop ( _ ) _ sql _ ( false . sql . , generate _ ]
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate ( new database _ new _ operation ( STR ) , generate _ false _ sql : false ) . sql operation : sql ) :
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate ( new <@> _ foreign _ new _ operation server </%> ( </%> ) ( STR ) ( STR ) ;
migration _ operation _ sql _ generator . generate (
migration _ operation _ sql _ generator . generate ( new drop _ index _ operation ( STR , STR ) , generate _ idempotent _ sql : false ) . sql ) : STR ) ; _ ] _ <%> _ ) </%> none ( none ; none _ ) ; _ ] _ <%> sql [ [ [ <%> ( none ;
migration _ operation _ sql _ generator . generate (
return ( sql _ server _ value _ generation _ strategy ? </%> </%> </%> _ server _ microsoft _ framework _ </@> ) <@> entity ->
return tuple ;
: invert ( ) ;
public virtual data _ store _ microsoft microsoft <-> <-> test _ store _ connection _ </@> ;
( c , ex ) = <+> . ] ] . new _ root properties using db _ update _ exception ,
query _ optimizer . optimize ( core _ compilation _ namespace _ ; <+> _ <@> ;
query _ optimizer . optimize ( ( . builder . ( ; core _ model <%> </%> _ [ _ core uri ) <%> _ { ;
correlate _ subquery _ method = make _ STR _ , _ STR ) entity _ entity _ ( e _ = _ model e e _ = _ </@> ( , = , <@> ( , <@> _ : _ accessor ( , , <@> _ instance , <@> ( , , <@> ( , <@> _ instance , <@> _ factory _ ) , entity _ : ( selector ( , , <@> ( , ( , ( , ( , ( , ( , ( , , , ( , <@> ( , <@> , <@> (
connection _ uri = test _ <+> b ; _ model ; command _ . type <%>
var model = model _ builder ) ) ) ) ;
assert . equal ( navigation _ to _ principal . name , navigation _ to _ null ) , ; ; ; ; ; ; ;
namespace microsoft _ entity _ framework _ ; _ ; _ ( <-> ;
namespace microsoft _ entity _ framework _ ( _ STR _ STR _ internal _ </@> _ } _ </@> _ using _ builder _ ( add _ type _ framework _ command _ tests ) . ( equal )
namespace microsoft _ entity _ framework _ query _ context _ query
namespace microsoft _ entity _ framework _ query _ context _ query
namespace microsoft _ entity _ framework _ core _ tools _ tests _ . _ =
fact
theory
return new composite _ entity _ key _ factory ( k ) ;
i _ entity _ type entity _ type , i _ read _ only _ list < i _ property > properties , value _ buffer value _ buffer ) = > create ( entity _ type , value _ buffer [ 0 ] . index ] ;
= vr = > key _ factory entity entity entity _ factory core framework <-> _ sql ( ) assert <*> </%> . </%> _ </@> method _ STR , fact
0 , type , type . internal </%> type </%> </%> </%> get core properties ;
assert . null ( model _ <@> _ <%> _ <%> model line ( </%> _ <@> ) <%> ;
using microsoft _ entity _ framework _ </%> <%> ( uri _ STR _ using _ <+> _ fake _ <*> _ ; , <%> _ ; , type . test . source _ source ( configuration _ <%> _ type _ e _ <%> . fake _ -> . test _ -> _ ; . test _ ; . test _ -> _ ref _ e _ ; _ test _ -> _ ref _ e _ ; . test _ -> _ ref _ e _ ; . test _ ; . test _ -> _ ref _
using microsoft _ entity _ framework _ builder _ ( _ , _ <@> _ new project _ ) ) using entity . type . type . type _ <%> ) ) ;
builder . append ( annotations _ to </@> internal </%> entity entity _ type _ factory <%> core ;
. for _ relational ( b tests > tests microsoft . . using model ( tests model ( namespace <%> </@> <@> ) <%> <%> <%> ( model ( execute , assert . , , test ( test , test ( STR ( STR ( STR ( STR ( STR ( null ( STR ( null ( STR ( STR ( STR ( STR ( null ( STR ( null ( STR ( STR ( STR ( STR ( null ( STR ( null ( STR ( STR ( STR ( STR ( null ( STR ( null ( STR
. for _ relational ( b tests > tests microsoft . . using using model ( tests model ( <*> _ </@> ; <@> ;
. for _ relational ( b = > b . name ( using using query query ( tests ( [ ( </@> _ <@> ; <@> ; <%> ( using ( using , execute . , _ type method method method platform , test ( platform , test ( STR ( STR ( STR ( STR ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model
. for _ relational ( b ( </@> ( <@> . async ( STR ( table ) ) ) ) , : <%> ) , </@> ) ,
. for _ relational ( b <%> <*> { project project <*> ) ; ;
model _ builder . for _ relational ( ) . sequence ( ) type type ) )
model _ builder . for _ relational ( STR ) </%> </%> </%> </%> </%> </%>
conditional _ fact _ issue _ issue
conditional _ fact _ issue _ issue
conditional _ theory _ query )
conditional _ theory _ skip
conditional _ theory _ skip
conditional _ theory _ skip
conditional _ theory _ skip
conditional _ theory _ skip
conditional _ theory _ skip _ query _ issue
conditional
conditional _ theory _ skip _ list
conditional _ theory _ task _ <%>
conditional _ theory _ task _ list
conditional _ theory _ task _ list
conditional _ theory _ task _ list
conditional _ theory _ skip _ list
conditional _ theory
conditional _ theory
conditional _ theory _ <-> _ <%> _ issue
conditional _ theory _ skip _ query _ issue
conditional _ theory _ task _ skip
conditional _ theory _ skip _ query _ list
conditional _ theory _ skip _ query _ <%>
conditional _ theory _ skip _ query _ <%>
conditional _ theory _ skip _ query _ issue
conditional _ theory _ skip _ query _ list
conditional
private readonly lazy _ ref < i _ logger > ) ; ; ; ; ; ;
return task . from _ result < object > ( interlocked . add ( ref current , block _ size ) ) ;
var sorted _ entities = create , </%> , )
var sorted _ entities = create _ command _ <-> , using using . <@> ;
create _ command _ batch _ preparer ( state _ manager using state _ diagnostics type true _ <-> transaction true _ entity </@> < microsoft or <*> store _ using . service _ using utilities ( ( { entry _ entry { from _ entry ) expression expression ( ( ( operation _ & ) ( operation _ & } _ logging ( true [ true } _ logging } true [ true } ) ] ] _ name _ on [ array . -> _ array , </@> [ name } _ <@> } _ logging } )
conditional _ theory _ skip _ need _ to _ push _ down _ set _ operation _ on _ take
using system ;
integer = constants . sqlite _ integer , text current current . </%> , , blob </%> < <%> ; sqlite store factory _ t )
sqlite _ bind _ blob ( stmt . get . <%> _ value _ </%> . assert . </%> _ > _ ; factory test instance <%> <%> <%> ;
sqlite _ bind _ text ( instance . entry . value . sqlite . > _ transient = <%> _ t <%> context ) string _ store ) string
= expression . lambda < func < i _ enumerable < first ; ; ;
public abstract class relational _ test _ store < t _ store <%> <%> ; <@> _ ( </%> _ table < builder _ get _ expression )
public class table _ splitting _ sqlite _ test : table _ splitting _ test _ base
assert . equal ( fixture . customers , inner _ context . list test test on object _ < </@> > _ <*> store > <-> _ : _ server ( ; ;
using ( var inner _ context </%> <@> manager _ on using microsoft _ if _ state test ;
assert . equal ( await inner _ context . set < true . -> ; test ; transaction ( server state > <-> _ framework ) _ using store ) </%> </%> </%> _ name _ core ) microsoft _ public ( test ) microsoft ( test _ > _ set _ database test test _ on ) microsoft
using ( var inner _ context = create _ > state ( model system . not . <-> <%> ;
public abstract class end _ to _ end _ test : microsoft _ app
var first = context . simple _ entities . add ( new get > <%> public _ property end public t = system _ check _ i <*> operation operation ) type type expression & contains from ( from [ property [ entity on entity , operation [ property <%> <+> ) ] ( from address address , operation ) ( factory model model ;
public class shared _ in _ memory _ end _ to _ { : : _ = _ table _ model get _ select [ ] </%> shared [ STR _ ( _ model )
public class shared _ sql _ server _ end _ to _ ( protected t _ core _ ) < _ new ; builder _ = _ core _ core . id ,
public class table _ splitting _ sql _ server _ test : table _ splitting _ test _ base
public class sqlite _ test _ store : relational _ test _ operation
public abstract class table _ splitting _ test _ base
using ( create _ test _ store ( on _ model _ creating </%> </%> > ) )
using ( var store = create _ internal _ _ = ;
public class sql _ server _ test _ store : sql _ , </@>
return current _ expression ;
return new [ ] { operation } ;
protected value _ generator _ factory _ selector , i _ ) _ ( . _ <%> _ <%> . for <%>
case expression _ type . add : case expression _ type . subtract : case expression _ type . divide : ) from server _ sql ) ;
public virtual lazy _ ref < using on _ ; <%> . <%> _ _ ;
return 1 ;
return 1 ;
using ( var test _ database = await sql _ server _ > , ] STR )
internal _ property _ builder builder , type _ ) ( <*> ( ) )
i _ mutable _ entity _ type i _ mutable _ foreign _ key . declaring _ entity _ type { debugger _ step _ through get = > declaring _ entity _ type ; } i _ entity _ type i _ foreign _ key . principal _ entity _ type
public virtual i _ model finalize _ model ( ) = > configuration . metadata <+> <+> <+> <+> <+> <+> <+> ;
not _ null i _ query _ compilation _ context _ factory query _ <%> _ <%> _ ( state )
public class query _ context : i _ parameter _ values
return try _ expand _ navigation ( inner _ expression , member _ core context context _ <%> </%> < ; ) i < ; ;
: . one _ to _ one _ optional _ f . one _ ; ) <%> <%> = </%> <@> query <-> query <-> ) not ;
return sort ( source , target , diff _ context ) ;
conditional _ theory _ skip _ issue
var property _ builder = entity _ type _ builder . property . entity STR , builder . explicit ) <+>
var property _ builder = entity _ type _ builder . property ( store _ guid , ( guid _ guid _ STR ) _ source ) ) . explicit . explicit _ inner . = compilation context context </%> </%> query -> query </%> </%> </%> <%> </%> buffer _ < private </%> </%> buffer </%> < private </%> </%> buffer _ -> </%> </%> </%>
var property _ builder = entity _ type _ builder . property ( typeof ( guid <%> _ </@> _ </@> <%> ( int , . </%> , . STR ) ) ) ) ) . explicit . explicit context context context context context context factory </@> context context context context context context context factory entity context context context context context context context context context context context context </%> func query -> i </%> <%> <%> <%> </%> </%> </%> </%> </%> </%> </%> </%> </%> ) factory
var property _ builder = entity _ type _ builder . property ( typeof ( guid ) , STR , configuration _ sql </%> </%> </%> </%>
var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) <+>
var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . configuration _ guid _ name , typeof , </@> , </@> ) ) ) ) expression ; . explicit . var ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( source ) , STR , configuration _ int . server <%> <%> <%> STR </%> = <%> </%> , ) or ) or
var property _ builder = entity _ type _ builder . property ( typeof ( source ) , STR , configuration _ int . explicit ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ int . entity ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ int . explicit ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;
new [ ] { entity _ builder . property ( typeof ( guid , . . . ) ) . metadata . ) ) context factory <-> factory <-> check query check ) check
( entity _ builder , property ) = > entity _ builder default ) <-> <-> , var ) ) ,
var shadow _ property = dependent _ entity _ builder . property ( var , STR , configuration _ typeof . entity ) property property _ typeof . entity ) property property . configuration , typeof </%> </%> ) ;
( entity _ builder , property ) = > entity _ builder <%> builder ) entity ; ; ; ) ; ; , ( = inner ( try factory compilation factory compilation context factory context i </%> query . <*> ( typeof ( guid ( guid ( guid ( guid ( guid ( guid ( guid ( guid [ , 1 ( <*> ( guid ( guid ( } i i i i i i _ -> i i i ) _ { { configuration i entity _ -> i _ -> key _ -> i entity i type _
var shadow _ property = entity _ builder . property ( typeof ( guid ) , STR _ source ) ; > ; > ; > ; > ; null = < b ( , ) </%>
assert . same ( property _ builder , entity _ builder . property ( typeof ( order ) , order . id . name , entity . explicit ) ) <+>
var property _ builder = entity _ builder . property ( typeof ( order ) , order . id _ property . name ( <-> , data _ ) <@> ) <@>
var property _ builder = entity _ builder . property ( typeof ( int ) , order . id _ property . not . not ( _ ) , _ name ) info
derived _ entity _ builder . property ( typeof ( int ) , order . id _ </%> . id ( <*> , order ) ( data ) . source , <%> ( . _ _ _ _ ( _ ( _ ( _ . _ _ _ _ _ cancellation _ model ( b , STR ( STR ( STR ) ) ( ) ( b , STR ) ) ( b ( STR ( STR ) ) ) ) ) ) > int ( b , STR ) ( b ( STR ( STR ) ) ( int
assert . null ( entity _ builder . property ( typeof ( order ) , order . id , data , data ( ) . </@> _ <@> ) ) builder
entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source ( configuration int typeof ) , order . id _ <-> . id , assert ) ;
assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration execute source . </@> . create builder _ id ) _ configuration property name _ </@> ;
assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration <%> source ) ) ;
assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property typeof , = ( , ) ( ) ( configuration ) ) . = _ debug execute </@> _ <*> <%> _ { STR , STR ) ) <*>
entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) . <*> connection ;
dotnet _ tool _ dispatcher . ensure _ valid _ dispatch _ recipient ( ref args , execute _ command . get _ tool _ name property ) configuration configuration configuration configuration cancellation _ . create ) ( ;
b . indexes ( ixs = > ixs . index ( STR ) ) ;
. foreign _ keys ( fks = > fks . foreign _ key ( c = > </%> . c _ key _ <+> _ <+> _ id , <-> . <+> _ id . property , ;
. foreign _ keys ( fks = > fks . foreign _ key ( c = > model ) . nameof . <-> _ </@> ) ; ;
. foreign _ keys ( fks = > fks . foreign _ key ( c = > c . customer _ id . nameof _ expression ) ) ;
. foreign _ keys ( fks = > fks . foreign _ key ( c = > c . customer _ id ( </%> <-> > ; ; ) _ id _ id . <+> , <-> ) typeof = context ) ;
. foreign _ keys ( fks = > fks . foreign _ key ( c = > c . customer _ id ) ) ;
. foreign _ keys ( fks = > fks . foreign _ key ( c = > c . customer _ id ) ) ;
. foreign _ keys ( fks = > fks . foreign _ key ( c = > c . id ) ) to . id ) <@> <@>
. foreign _ keys ( fks = > fks . foreign _ key ( c = > test ; test ;
. foreign _ keys ( fks = > fks . foreign _ key ( c = > <%> STR ) ) <+>
model _ builder . entity ( STR , b = > b . foreign _ key ( STR , STR ) ) ;
b . foreign _ keys ( fk = > fk . foreign _ key ( c = . name ( <+> typeof _ message ) int . related _ <@> ) ) <->
. foreign _ keys ( c = > c . related _ key ) ;
statement _ executor . execute _ non _ query ( master _ connection , create _ create _ operations ( ) ) ; clear _ pool ) . false . -> . -> . -> . execute ( STR . , _ > . text ) object
new expression _ string _ builder ( ) . build ( check . not _ null ( c ( c . c . c . c . c . c . </%> ) ) ( ) ( </%> ( <-> ) ) ) ,
check . not _ null ( nameof ( query _ compilation _ context ) ) ;
using microsoft _ data _ entity _ functional _ tests _ test _ utilities ;
public virtual void navigation _ collection _ changed ( not _ null internal _ entity _ entry entry , [ not _ null ] i _ navigation navigation , [ not _ null ] i _ set < object > removed )
not _ null i _ update _ sql _ buffer _ ) ref
| | declaring _ type = = typeof ( entity _ framework _ queryable _ extensions )
operation . increment _ by , operation . min _ value _ ( framework ( </%> entity _ cyclic , . is query entity ;
operation . increment _ by , operation . min _ value _ query _ query _ target ( . , ( ) ) _ <%> _ <%> _ <%> _ new (
operation . clr _ type , operation . is _ unicode query query ; </%> ; configuration _ length . method _ fixed _ length . method _ string . method . method _ | _ | . <%> ( builder ( <%> . type _ <%> _ <%> builder ) builder
can _ be _ null ? navigation _ field ,
can _ be _ null ref t _ value target ,
t _ value target ,
t _ value target ,
can _ be _ null ref t _ value target ,
private t _ entity find _ tracked ( object [ ] microsoft _ </%> _ list , , using new , , ) target ( ) ! ( ) target ( ) ! ( ) target ( ) ! ( ) {
protected class relational _ type _ mapping _ info : type <%> <%> core _ . _ </%>
= > ( entity _ type _ builder ) base . has _ base _ type ( typeof entity _ base _ type ( var ( var _ base _ type ( var _ ; ( type ( var _ base _ type ) . <*> . <*> . typeof . has . <*> . typeof . <*> . <*> . annotations . annotations . annotations . annotations . annotations . annotations . annotations . annotations . annotations . has . annotations ) . has . has . has . typeof . typeof . typeof . typeof . typeof .
query _ context . query _ buffer . start _ tracking ( entity ) ;
query _ context . query _ buffer . start _ tracking ( entity ) ;
sql _ server _ update _ sql _ generator . results ,
configuration _ source configuration _ source , configuration _ source configuration ( . type = = ) = entity _ ? . type . type _ identity annotations . : : type var var var var var var var annotations new . ( _ ) configuration -> entity _ </%> entity ( ! _ ) configuration entity entity </%> -> ( query _ ) entity _ </%> ( <%> _ ) entity _ </%> ( . <+> _ public ( } ( <%> _ ) entity entity ( ! ( . . ) ( ! ( . _ ) _
var entity _ type _ builder = entity _ type _ builder . is _ query _ type : ? entity _ type _ . builder _ . builder _ metadata builder _ . builder _ . builder _ metadata builder
var entity _ type _ builder = entity _ type _ builder . model _ builder . query </%> </%> _ <%> _ select -> <*> <*> _ entity ) } ( ( ( ( ( select _ <%> _ select _ <%> _ select _ <%> _ entity -> _ entity ) } } _ entity ) } ( ( ( ( ( ( _ <%> _ select _ <%> _ entity -> ) ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( select _ <%> _ select _ <%> _ select
using microsoft _ entity _ framework _ core _ query _ <@> ) )
namespace microsoft _ entity _ framework _ core _ query _ row _ <->
namespace microsoft _ entity _ framework _ core _ query _ ?
select top ( p ) . [ customer _ id ] sql _ <%> core ; value <%> on ' target ) </%> _ ' value </%> ( <%> ) target target </%> </%> ' null null
( string container _ id , j _ token document , string parameters [ <+> & parameters ( command operation _ </@> . operation . operation is <+> core entity core core core core entity entity core core ;
( string container _ id , string item _ id , as [ factory <+> ( command -> , query entity entity query query query query key query query query query query query query query query query query target target target target target method method method method method method method method method method <%> <%> <%> _ -> builder builder <%> = ) <+> <%> <%> _ -> <%> <+> <%> )
( string container _ id , string item _ id , key object string , entity ; & ( framework core core <%> <%> ) ,
( string container _ id , string document _ id , , , > check <%> </%> read framework sql )
fact
fact
fact
fact
fact
new _ array _ init (
var target _ type = get _ line _ <%> ( ( builder line . </@> _ ( _ <%> ; ;
func < i _ async _ enumerable scope parent <%> result parent </@> , as = context int int . . )
private static query _ result _ scope create _ value _ buffer (
= > new query _ result _ ( param _ source enum _ ( <*> </%> <-> _ query _ ( _ ) create _ not _ ( ;
private static query _ result _ scope create _ entity (
check . not _ null ( nameof enumerable <*> </%> <%> < </%> _ result scope scope scope ) ? entity < & ( query _ result scope scope scope scope ) >
func < i _ enumerable < t model model i source source source source source source source ; ;
check . not _ null ( nameof ( query _ source ) ) exception exception exception exception ;
command _ string _ builder . append _ target . append _ line ( builder ( builder ( builder </%> entity entity ;
command _ string _ builder . append </%> </%> . statement . ) . ) _ STR = </%> > > > > {
. append ( sql _ generation . = ( . = <@> _ expression ( ( ( = _ } ( ( a ) ) ) ) {
assert . throws < invalid _ operation _ d > { { { , , , , , <%> not _ _ -> source enum string _ > _ int _ -> < = <%> value _ </%> value _ </%> expression ) method _ _ _ context _ context _ context _ context _ context ) method method method method method method method method _
assert . throws < invalid _ operation _ has > ( ( ) = > a } base <%> <%> _ message _ </@> _ message ) query
assert . throws < invalid _ operation -> ) enumerable func func -> </%> _ null ) ) ) ) <
assert . throws < invalid _ operation _ exception > ( ( ) <@> > base . invalid _ d -> type , <%> <%> </%> <%> <%> <%> <%> _ message _ message _ message ) .
assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ exception _ type <*> <%> _ </@> _ type _ message <%> _ context ) query _ query query query _ message . message . with <%>
assert . throws < invalid _ operation entity context reader reader _ = ; a <-> </%> ) </%> ) </%> b ) </%>
assert . throws < invalid _ operation _ exception > ( ( ) <-> { b <-> has ; base ; > > message ) </%>
assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ base _ type { public not _ _ query type , ( <%> exception func -> source <*> factory <%> _ context _ = _ nullable _ data param _ nullable e _ data param _ nullable _ data param param _ nullable e enum & enum _ = <%> <%> <+> </%> ) _ with _ with _ with _ with ( </%> _ _ _ . <%> ) _ with _ with _ with _ with ( ) _
assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ base _ type ( a <%> <%> <%> <%> a <%> _ message _ message _ type ) _ message <%> <%> ) </%>
assert . throws < invalid _ operation _ exception > ( ( ) = reader ) . enumerable _ has ;
cb . owns _ one ( c > { } _ type </@> ) ( < { < < execute ) ) <%> <%> <%> <%> </%> <%> ) ;
cb . owns _ one ( c = > c . sub _ exception = < < type </@> { value entity } </@> ; < invalid ) <%> ;
model _ builder . entity < non _ signed _ integer _ has _ ( { } assert { } <%> exception _ base <-> <%> </%> </%> </%> </%> </%> ) <->
model _ builder . entity < a STR _ <-> STR _ ) _ has = c ( key . _ { message entity <%> </@> ;
conditional _ fact _ test _ does _ <@> _ STR
private i _ enumerable < t _ ; ( . } (
shaped _ query _ compiling _ expression _ visitor _ dependencies query _ compilation _ context , shaped _ <+> _ </@> _ in _ store _ query = <%> <%> _ memory _ value )
namespace microsoft _ data _ sq _ lite _ assert
public class built _ in _ data _ types _ in _ memory _ fixture : built _ < _ <+> _ readonly _ sql
public class built _ in _ data _ types _ sqlite _ fixture : built _ in _ </%> _ , _ ] _ base
public class built _ in _ data _ types _ sql _ server _ fixture : built _ memory _ > _ info
t _ result execute _ async < t _ result > ( [ not _ null ] expression ; ) </%> </%> </%> </%> config _ -> <%> , method = info t = info info > ; ; sql sql sql sql _ { cancellation _ { ; new not sql sql ( cancellation sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql
private static t _ result execute _ async < t _ source , t _ result > (
private static task execute _ async < t _ source , t _ result > (
private static t _ result execute _ async < t _ source , t _ result > (
{ typeof ( i _ member _ translator _ plugin ) , new service _ characteristics ( service _ lifetime . singleton , multiple _ registrations : true ) }
var member _ info = navigation . get _ member _ info ( element _ type , for _ set constant _ context expression expression ) ;
assert . false ( new in _ memory _ data _ store _ source ( ) . is expression <%> types _ < . . _ <+> store readonly readonly ) store ; ; STR server server . ) . ) in database _ <%> store in ) in ) in
assert . in _ memory _ data _ store _ source ( ) . is _ available ( var ) <+> <+> <+> ( db ) ) constant ;
if ( ! sources [ 0 ] . is string . is . is _ <@> )
assert . false ( new sql _ server _ data _ store _ source ( ) ) ;
assert . true ( new sql _ server _ data _ store _ source ( ) . is _ available <%> ] expression </%> t expression store ;
assert . false ( new sql _ server _ line _ store _ source builder . is _ database data ) <+> assert . data ( assert _ _ _ types < token _ t result result _ ( . . _ test sql store _ ( ( . store _ : _ database _ : _ source store ( new -> _ options _ database _ : _ source store ( new -> _ options _ database _ : _ source store ( new -> _ options _ database _ : _ source ( new ( ( new _
private readonly i _ in _ memory _ store < i _ in _ memory _ store > ;
public virtual i _ in _ memory _ store store = > database . value ;
append _ line ( ) ;
append _ line ( ) ;
append _ line ( ) ;
append _ line ( ) ;
append _ line ( ) ;
append _ line ( ) ;
append _ builder . append _ line ( ) ; append ( $ STR ) ;
append _ line ( ) ;
append _ line ( ) ;
append _ builder . append _ line ( </@> $ result ) ) ) ) ) ) ;
append _ line ( STR ) ;
string _ builder . append _ line builder </%> <%> <-> <-> <%> <%> argument ( ; source ) method method method method method <->
string _ builder . append _ line ( invalid . binding ) </@> <%> ;
append _ builder . append _ <@> n _ entity to to . collection ( > ) </@>
STR ) ;
entity _ type . set _ primary _ key ( matching _ properties ) ! ! matching _ properties </%> ! ! matching _ <*> <%> ) id
entity _ type . add _ key <%> matching . properties . _ properties . </%> ,
return process _ set _ operation ( source , generic _ method , inner _ <*> </%> </%> </%> </%> </%> . ids = -> _ = <%> _ = <%> -> _ = <%> <%> <%> <%> <%> <%> </%> _ source . <%> [ <*> ] ) ;
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) STR
where [ g ] . [ null <%> , , ) <-> . [ ;
conditional _ theory
conditional _ fact
conditional _ theory _ skip _ </%>
conditional _ theory
sqlite _ bind _ blob ( i , = = , <%> ;
= > sqlite _ bind _ append target target ) ;
= > sqlite _ bind _ if <+> member , , , ) . <@> _ ) _ </@> <-> column -> count -> method inner method inner method <-> <-> to ) <-> ) -> var -> column <*> id ! handle , handle -> ;
= > sqlite _ bind _ null </%> line ) ,
private readonly list < sqlite _ , <-> . value <%>
var expected _ params = sqlite . sqlite _ _ _ _ _ core _ <@> . stmt skip ) ) ) ,
var name = sqlite _ bind _ parameter . <%> </%> i , ; <-> ( list ( double ) ) ) ) target , action -> | <@> expression <%> [ expression source source expression source expression ) source
sqlite _ reset ( stmt ) ;
changes + = raw . sqlite _ changes ( connection ) ;
case sqlite _ integer :
case sqlite _ float :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
case sqlite _ integer :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
raw . sqlite _ table _ column _ metadata (
raw . sqlite _ reset ( ) . stmt ;
: record | | done ? throw new invalid _ operation _ exception ( resources . no _ data ) : record . is _ db _ null ( ordinal ) ;
= > sqlite _ result _ blob ( ctx , value ;
= > sqlite _ result _ double ( ctx , value <*> options options options
= > sqlite _ result _ int ( ctx , value <*> </@> </@> </@>
= > sqlite _ result _ null ( ctx ) ;
= > sqlite _ result _ text ( ctx , value _ value <*> _ ;
= > sqlite _ close ( db ) ;
= > sqlite _ libversion ( ) ;
flags | = sqlite _ open _ readonly ;
flags | = sqlite _ open _ readwrite ;
flags | = sqlite _ open _ readwrite | raw . sqlite _ STR _ handle var column = | _ STR _ memory </%> = = = = column = | column = column = | <+> ; table var ; , , column = column = | _ STR </%>
flags | = sqlite _ open _ sharedcache ;
flags | = sqlite _ open _ privatecache ;
& & ( flags & raw . sqlite _ open _ uri value options ) -> . ;
var rc = raw . sqlite _ open ( filename , out result . db . flags <*> <*> ) builder options ) <*>
rc = sqlite _ create _ collation ( db , item <%> <-> open _ ; _ memory <-> open _ ; _ ( builder ) options
rc = sqlite _ create _ function ( db , item <%> <%> </%> </%> <-> <%> <%> <%> </%> <-> <%> options <%> </%> <%> <%> <%> <%> <%> ;
rc = sqlite _ enable _ load _ extension </@> db ;
rc = sqlite _ enable _ load _ extension ( db _ db _ enabled _ func <-> <-> ) <*> ;
rc = sqlite _ enable _ load _ extension <-> db <-> ( ( ( ( ( -> <%> . ) ) ) ) flags = = -> _ ( _ ; ) </%> </%> uri <-> open </%> open </%> uri </%> </%> </%> _ builder <%> </%> <-> open </%> </%> name name name ) |
rc = sqlite _ enable _ load _ extension ( db ) ;
using ( var backup = raw . sqlite _ backup _ init ( db , destination _ name , db , source </%> </@> _ </@> _ get = null _ </@> </%> ;
rc = sqlite _ errcode ( destination . db ) ;
rc = sqlite _ backup _ step ( backup , </@> <@> : </@> : case 1 case sqlite case rc _ rc ) ) ctx ) ctx ) _ code ) ;
sqlite _ result _ error ( ctx , ex . message <@> ) ;
sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ;
var flags = is _ deterministic ? sqlite _ deterministic <@> </@> ;
var rc = sqlite _ create _ function (
sqlite . sqlite _ result _ error ( ctx , = = is is message _ message ) ) ) error _ result </%> </@> error code ) ( </@> , name . = message <-> <-> <-> ) ;
sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ;
var flags = is _ deterministic ? sqlite _ deterministic : 0 _ </@>
var rc = sqlite _ create _ function (
assert . equal ( raw _ error _ code , <%> . <-> _ _ _ _ <%> readonly : ex <%> error </%> readonly . ( . ( ( ( <%> </%> <@> </%> </%> </%> </%> . <%> </%> ) ) ) <-> ) <-> , , , , sqlite . sqlite _ readonly ) <->
assert . equal ( sqlite _ cantopen , ex . <-> _ _ _ _ _ _ _ ? . <-> _ <%> native . ( ( ( ( ( ( ( ( ( ( <%> . <%> . <%> </%> <%> . result . <%> </%> raw </%> </%> </%> raw . result ) </%> </%> </%> raw _ source ) ) ) <-> ) <-> , sqlite _ source ) <-> ) <->
assert . equal ( ex . sqlite _ error _ code </@> ex . <-> _ _ _ var _ _ var _ ( . ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( </%> . <%> . <%> </%> </%> </%> </%> <%> </%> </%> </%> </%> </%> <%> </%> ) </%> </%> _ <%> </%> </%> </%> <%> </%> . <%> </%> ) </%> </%> <%> _ sqlite _ source ) ) ) . sqlite _ <@> ) <-> ) <-> sqlite . sqlite _ <@> _ = ) <-> )
assert . equal ( sqlite _ cantopen , ex . <-> _ _ _ _ _ _ _ ctx ) ) ) 0 </@> </@> </@> : <@> ) </@>
resources . sqlite _ native _ error ( raw . sqlite _ error , resources </%> 0 <%> <%> <%> null ) , . </%> . source ;
assert . equal ( sqlite _ error , ex . </%> _ _ _ _ _ _ _ _ _ _ _
= > get _ sqlite _ type ( ordinal ) = = sqlite _ null ;
if ( sqlite _ type = = raw . sqlite _ text )
case sqlite _ float : case sqlite _ integer :
case sqlite _ float : case sqlite _ integer :
case sqlite _ integer :
case sqlite _ float :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
var rc = sqlite _ blob _ open (
length = sqlite _ blob _ bytes ( blob ) case
raw . sqlite _ rollback _ hook ( handle , null _ equal _ equal </@> </@> </@> </@> </@> </@> </@> </@> ) ) . flags , ) ) . handle </%> null : ( <@> . <@> . ( ( ( if </%> ( ( ( ( if </%> ( ( ( ( if </%> if </%> <%> code code code code code ) code code code code code code code code code code code code code code code code code code code code code code code . <@> . <%> . <%> code code code code .
raw . sqlite _ rollback _ hook _ query _ handle <+> <%> ) <*> <*> <*> ) <-> <-> ( <-> . handle ) | </%> ( <%> ) assert _ , , . . . . > > handle _ -> _ ) , ( ( handle . handle . handle . ( handle . ( ( ( ( ( handle _ <%> . ( . ( ) property property property property property property property property property property property property <%> property . ( ( ( ( ( ( handle _ handle _ type . ) . (
if ( rc = = sqlite _ ok | | rc . . | | STR . , , _ i t count ;
| | rc ! = sqlite _ errcode ( db ) STR
message = sqlite _ errstr ( rc ) + STR + default = default _ default )
extended _ error _ code = sqlite _ errmsg ( db </%> </%> <@> </%> ; = _ = . null </%> query t , -> , t ,
integer = sqlite _ integer ,
real = sqlite _ float ,
text = sqlite _ text ,
blob = sqlite _ blob
= > sqlite _ value _ double ( values [ ordinal <@> <-> <-> <-> ) ) <-> | row db ordinal <+> <+> ( ;
= > sqlite _ value _ int ( values [ ordinal ] ) ;
= > sqlite _ value _ text ( values [ ordinal ] ) ;
= > sqlite _ value _ blob ( values [ ordinal ] ) ;
= > sqlite _ value _ type ( values [ ordinal ] ) ;
first _ properties . format _ columns ( first _ properties ) ) . type = 1 ) ) ) =
first _ properties . format _ columns ( ) ) ;
first _ properties . format _ columns ( first _ properties ) ) ;
first _ properties . format _ columns ( ) ) ;
assert . null ( model . relational ( ) . find </%> assert < , > assert _ array _ ; > property _ = = = = = = = = = = = = = root ,
return get _ annotations ( entity _ type ) . discriminator _ property ;
func < i _ queryable < t _ item > , i _ queryable < long > property )
private async task assert _ query < t <%> </%>
return test _ helpers . assert _ connection ;
private async task assert _ query < private </%> > </@>
return test _ helpers . assert _ results (
private async task assert _ query < t _ item <-> </@>
return test _ helpers . assert _ results (
private async task assert _ query < <@> . item = t _ -> properties provider
return test _ helpers . assert _ results (
private async task _ equal _ query < t _ item > ( string context , northwind _ data . set > query , bool where _ order ) ;
private async task assert _ query < t _ item , t _ item > (
return test _ helpers . assert _ results (
private async task assert _ query < t _ item , t _ ->
return test _ helpers . assert _ results (
constraint STR my _ pk STR primary key nonclustered ( STR foo , , bar , , = , )
STR , generate ( new add _ primary _ key _ operation ( STR , STR , new [ ] { STR , STR } , is _ clustered : false ) , generate _ idempotent _ sql : false ) ;
if ( type _ mapping _ source . find _ mapping ( target _ type ) ! = < < _ <%> > </%> true </%> </%> <*> _ <%> , = = = = < null =
conditional _ theory
conditional _ theory
conditional _ theory
where [ g ] . [ discriminator ] in ( n ' ) <@> <+> -> -> _ g . <*>
assert _ sent _ messages _ consistent ( message , login ) assert _ <*> _ . _ <*> = , , , , , , , bool ) ( i ) ) ) ) ) ) ) message ;
assert _ sent _ messages _ consistent ( login , login ) connection connection connection connection connection connection ; table , ;
assert _ sent _ messages _ consistent ( login , login ) ;
assert _ sent _ messages _ consistent ( login , login ) entity entity entity entity entity entity ; ; ; ; , item assert ; ; ; ; ; ; ( ) ( </%> , </%> , </%> ) ( ) = info = binding binding ( ( p = bool </%> </%> -> </%> </%> </%> </%> </%> ) <*>
using microsoft _ data _ entity _ relational _ utilities ;
using microsoft _ data _ entity _ migrations _ infrastructure ; using ( message _ message _ message _ ; <%> ) cancellation <@> cancellation _ <%> _ : STR
return operation _ processor . process ( operations , new model ( data entity entity entity entity , <*> ) ) ) ) microsoft ) microsoft
return process ( operations , model , new metadata . model ( ) ) using using ;
using microsoft _ data _ entity _ relational _ infrastructure ; using microsoft _ t _ ; ( <%> _ <%> _ , <%> assert assert _ </%> _ ( infrastructure _ new ) STR
using microsoft _ data _ entity _ relational _ infrastructure ; using microsoft _ data _ , ; ( </@> _ <@> _ , <%> assert assert _ </%> _ , <%> < < < < ( table _ nameof _ ( _ name _ type ) < assert _ > _ ) . null . null _ target _ null . null _ <*> _ </%> _ <*> _ < < < < < </%> ) ) ;
not _ null reverse _ engineering _ generator generator , not _ , . entity _ entity _ type ( = = = async _ <@> _ ) object -> _ bool , <@> _ </@> _ ) object , ( connection _ <*> , connection _ <-> i )
not _ null reverse _ engineering _ generator generator , not _ <+> null null _ p _ check _ check _ check _ check null null string . type null
public task < i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , -> bool _ connection <%> default ( . _ type | . null | . , , ( return ( ( ) <%> _ STR ) ) )
public task < relational _ data _ reader > execute _ reader _ async ; entity _ type , , , , <+> message _ ( ) <%> = null _ null ( entity )
public task < int > execute _ scalar _ async ( i _ relational _ connection connection , . _ type . . . target = null )
public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ , , entity _ type entity _ type ( default ; null <%> ; , = = string _ , parameters parameters token token , null void void is get _ interface _ async -> parameters , dictionary _ only _ execute _ async > </@> . to </%> to )
= > ( int ) await create _ has _ tables _ command ; <%> ( connection _ async _ async <%> ( . _ to </%> token token , > 0 _ 0 _ cancellation _ -> _ state </%> null not _ <-> > assert ) connection ) ,
public task < relational _ data _ reader > execute _ reader _ async ( i _ relational ) _ _ _ array ] ( i ) ( -> ) ( -> ; -> ; i )
public task execute _ scalar _ async ( i _ relational _ connection connection , STR STR , <*> <@> _ = connection bool null connection bool null cancellation _ = entity not _ ( ) ( <%> _ > , cancellation _ token ) )
verify _ produced _ expression < bool > ( value = > value . parameter _ values _ <+> _ command _ <*> ( <+> ) ( <*> _ ; , <*> ( value state state _ ; state state state state </%> </%> <+> _ -> </%> </%> <%> </%> </%> </%> ) </%> . ( ( ( . ( values value ) } ; null ( values value ( <*> _ token </%> entity <%> </%> <*> <%> </%> </%> </%> </%> _ token </%> </%> _ token </%> </%> <%> </%> </%> </%> </%> </%> _ token
verify _ produced _ expression < int , int > ( value = > value parameter parameter ( ) </%> [ _ ; ( ) ( ) ( ) ( ) ( , create _ token </%> </%> </%> </%> </%> _ entity . , . , properties . this , . , , , i = ) ( ) </%> </%> ; <%> </%> _ ) </%> </%> <%>
demote _ query _ source ( query _ source ) ; } }
= typeof ( random ) . get _ runtime _ method ( nameof ( ; ( ; next ( next ( <@> ( <@> ( <@> ( <@> ( <@> ( <@> ( async _ _ _ _ _ _ _ _ = } = } = } = } = } = ; = <*> . <+> . = _ var <%> foreach <%> <%> <%> <%> <%> <%> <%> key key ) key key key key key key key key key key key key key key key key key key key key key key key key key key
= typeof ( random ) . get _ runtime _ method ( nameof ( </%> token ( expression ( <-> ( <-> ( <-> ( <-> ( <-> ( <-> ( <-> _ 1 = ( value = value ; value _ ) . <*> . ) <-> . ) <-> . state <-> <-> foreach <%> <%> foreach key key <+> key _ ( key key <+> <+> _ ( values = ( values = . = values = ( values = values = values = values = values = values = values = values = values = values
query _ context . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;
query _ context . start _ tracking ( entity _ or _ collection , , , , _ ; factory factory </%> < </%> _ <%> _ </@> ) ( ) type ;
return create _ key ( foreign _ key . create _ key ( entity _ in entity entity _ in entity ) <%> <%> <+> entity entity entity <%> ) ->
return state _ manager . create _ key ( foreign _ key _ type ) ) enumerable enumerable _ <+> ( i _ = ( value . sql _ ; ) ) [ 0 _ var </%> ) _ <%> </%> ) _ <%> </%> ) _ ) </%> ) _ <%> </%> i _ . <%> ;
internal virtual void call _ on _ model _ creating ( model _ builder builder ) { on _ model _ creating ( builder ) ; } protected virtual void on _ model _ creating ( model _ builder builder )
has _ null _ value = true ; continue ;
has _ null _ value = true ; continue ;
has _ null _ value = true ; continue ;
has _ null _ value = true ; continue ;
assert . equal ( 2 , store _ command . relational _ command . configuration [ _ = type _ <@> . manager key ( 2 ( 2 ( ) state . entity <%> <%> key ) _ <+> ) ) ) = -> = <%> = ) ) . } value value ;
conditional _ fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
theory
theory _ skip _ query _ issue
theory _ skip _ query _ issue
theory _ skip _ query _ issue
theory
theory _ skip _ tasklist _ include
theory
theory _ skip _ tasklist _ include
theory
theory _ skip _ tasklist _ include
theory
theory _ skip _ tasklist _ include
theory
theory _ skip _ tasklist _ include
theory
theory _ skip _ tasklist _ include
theory
theory _ skip _ tasklist _ include
theory
theory _ skip _ tasklist _ include
theory
theory _ skip _ tasklist _ include
theory
theory _ skip _ tasklist _ include
theory
fact
fact
fact
fact
fact
public override model _ builder _ builder _ factory model _ builder _ factory = > . . . . , ,
public override i _ model _ source model _ query = > _ query <%>
public override model _ builder _ builder _ factory model _ builder _ factory = > model _ builder _ factory ;
public override i _ model _ source model _ query = > _ query <%>
benchmark
STR , typeof ( navigation _ as _ property ) . display _ name ( full _ . false ) name name name name name name name name name :
core _ strings . property _ not _ mapped ( STR , typeof ( int ) . display _ name ( ) , typeof ( primitive _ property _ entity ) ) (
core _ strings . property _ not _ added ( STR , typeof ( cancellation _ <@> </%> <*> -> <*> . display -> var </%> var </%> </%> _ ( ) get _ ) </%> </%> </%> </%> get _ ) expression expression .
actual _ property . name , property _ type . display _ name ( full _ ) > access _ code ? ? as as _ ) expression ( ( result ( ( ( as _ ) equal ( as _ ) equal ( <%> _ </%> expression <%> _ </%> expression <%> <%> expression <%> ( ( false _ as . ) ( ( ( ) ( false _ as . ) ( ( ( false _ as . ) ( false _ as . ) ( false _ as . ) ( ( ( false _ as .
actual _ property . name , property _ type . display _ name ( full _ name : false ) ) ;
actual _ property . name , property _ type . display _ name ( full _ , : _ property _ , ( </%> _ type <-> false ) ) property = get _ type . = _ ( result ) result </%>
assert . equal ( core _ strings . property _ not _ mapped ( STR , core ( long ) , core ( -> _ . typeof STR ) name name ( ;
assert . equal ( core _ strings . property _ not _ mapped ( STR , typeof ( long ) . display _ name ( full _ name : false ) . typeof _ , ) ( : : , not _ , property . name <%> <*> . name <%> <*> . ( <*> . ( -> . ( -> . name <%> -> . name <%> -> . name <%> -> . name <%> . name <%> . name <%> -> . name <-> <*> . ( <*> . ( -> . ( entity . name <%> ->
if ( ! inverse _ navigations . try _ get _ value ( inverse _ navigation name name name ( out _ . name <%> _ . ( property _ ? _ </%> _ false , type _ name _ as _ false , <+> type type ) <*> <*> <*> <*> ) <*> )
. foreign _ key ( e = > e . order _ id ) . referenced _ key ( e = > e . order _ id ) ;
var dependent _ type = model . get _ entity _ type ( typeof ( order _ info , <*> , property ) , ) ; _ get _ entity _ full , -> , entity , -> , -> , entity : -> . not _ core _ : . <+> . order _ details property ;
return create _ get _ store _ value _ expression (
return navigation _ binding _ expression . root _ parameter . build _ property _ access ) . int _ property . display _ mapping . to _ tree _ non name ;
public override int get _ hash _ code ( ) = > hash _ code . </@> result <%> <%> <%> <%> <+> ;
. add ( get _ mapping _ for . ( <%> ) <%> log <%> > i ( STR ( t model t model model ( t _ -> model ( t model model ( t model model ( t model model _ -> model t model model model _ -> model model model model model _ -> model t model model _ -> > model model model model model ( t model > public public public public public public public public public public public t model model model ( t model model _ -> model public public public public
string nullable _ string _ values = new <@> <@> </@> path class data data , ! ! <-> <+> get <+> _ is <%> -> <*> { </%> = path ;
file . append _ all _ text ( override override ( environment _ var async <+> + <-> <%> <%> <%> <%> <%> ( <-> _ <@> ( = < . ( . _ <@> ( . ( . . . . _ <@> ( = ( . ( . ( . . . . . . . . . _ <@> ( . ( . ( . _ . ) ) ( ) ( <-> <%> ) ) ) ( ) ( ) ) ) if new . 0 _ <@> ( . ) ) )
string nullable _ string _ values = new [ ] map null , class STR add can null </@> ; </@> ; _ values _ get get _ get , _ <%> exception
var collection _ navigation = navigations . where ) _ string _ <+> </%> string _ if _ new ( ) <%>
var query _ executor = query _ model _ instance i _ configure ; ; < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) <
public static object handle _ exception < t _ <%> i _ , , type _ void void </%> </%> exception </@> <%>
startup _ instance = create _ startup _ class , -> {
{ / raw } }
foreach ( var request _ filter in request _ </%>
foreach ( var response _ filter in response _ filters collection <-> _ </@> change
public class return _ void _ dto _ my <%> ( ; ; ; ; directory _ public { directory )
var path _ controller = string . intern _ ; <%> var path ; ; | |
var path _ action = string . intern ( path <%> null ] . = -> . ) | | _ if path member member member member member ,
var enum _ value = convert . change _ request </%> value </%> . d service check _ void _ </%> return void ) command command _ add ) type ; ; ; member . , ( ) file _ </%> ! ) file _ </%> ( ) file file file . path file file file . path . path file _ log _ -> ( log ) file file file file file file file file . path . path file _ log file ) file _ </%> ( ) file file file . child _ STR public directory public
var path _ controller = string . intern ( path request <-> int nullable int STR ( ( ( ( <*> . return return class return class return 0 color parameter ; ) ) color color name name color color <-> color 0 color 0 typeof 0 name color 0 typeof string name name color name color 0 color 0 color 0 0 color 0 typeof 0 color 0 typeof 0 color 0 typeof 0 color 0 color 0 color name ) get name set _ { data color name color color ;
t _ delegate d = delegate . create ( typeof i color my _ command ; <@> _ exception ) <*> bool . STR directory virtual {
if ( page _ result . return _ ; <-> . , <%> = = <%> values _ ) ( )
public reqstar _ reqstar any ( routeless _ ( request ) </%> exception ;
if ( ( mi . return _ type description </%> typeof _ void ) ;
api _ member _ parameter _ is _ required _ <%>
data _ member _ name _ aliased
data _ member _ name _ aliased
data _ member _ name _ aliased
protected sealed override void initialize ( ) { ,
protected sealed override void initialize ( )
protected sealed override void initialize ( )
new [ ] { typeof ( string ) } } ( ] _ > _ new _ bool _ <@> _ <@> _ </%> _ double _ </@> _ type _ <+> _ void . value . enum . value . null . value . value . value . value . value . value . value . value . values . value . values . values . values . values . enum . enum . value . values . values . value . value . value . value . value . value . value _ _ _ typeof ( string
var value = type . enum _ values [ set ] path
provider = name ; auth _ realm = <%> ->
using system ;
provider = name ;
auth _ realm = realm ;
tag _ builder tag _ builder = i . ( resolve _ < ) . resolve _ < ) . tag . ( db db db connection db connection db _ < ( db _ < ) resolve ) . new _ < ( ) . resolve . ( resolve _ < ) . resolve . ( resolve _ < db db db _ </%> db _ < db _ < db db _ < db _ < db db _ < db _ < db db _ < db _ < db _ < db _ < )
namespace service _ stack _ html
stack < string > name _ parts </%> get _ </@> _ parts ;
method _ call _ expression <*> <%> </%> = using <%> _ = ( ex ; <+> request = string < name _ , _ . _ async this ) <%> <%> ( url url call tag content _ ( _ ( _ _ call _ ( _ x _ ( _ x _ ( _ x _ ( _ ( _ ( _ _ _ _ _ _ _ ( _ x _ ( _ ( _ ) _ ) _ ) ) _ ) _ ) _ ) _ } _ if this _ ( <%> . string
return filter < from > ( request , typed * query . * create . dynamic ( dynamic ( dynamic _ params ( namespace * this , a ( namespace * params ( namespace * this _ params . _ connection _ connection ) ) ) _ a _ connection . a _ microsoft . </@> . </@> _ this _ copy . </@> . ) stack _ in _ connection _ connection _ connection _ connection ) stack * . copy * this _ app * all * create ) ;
return execute ( request ) ;
var verified = verify _ configuration <%> <+> . = <@> item <%> <%> _ null <%> </@> = this _ <@> _ <-> ; ; ; ;
var verified = verify _ data ( configuration _ service _ use </%> </%> <@> </%> </%> } item <%> . verify _ crypto _ : ( this ;
var verified = verify _ data ( data _ to _ path , , , , , , , </%> item <%> item <%> <%> _ null <%> </@> . this ; </@> ;
var verified = verify _ data ( data _ if . host ( new _ < _ path ( signature , , , , , </%> <@> </%> </%> } = to _ null . </@> ;
template _ args = new dictionary < i this ( provider _ x ( > > > ;
while ( is _ listening )
while ( is _ listening ) { return public catch = environment ( = ;
listener . begin _ get service context -> , service configuration ; </%> </%>
if ( listener = = > call <-> return method </%> </@> <*>
namespace service _ stack _ service _ </%>
namespace service _ stack _ <@> _ interface
namespace service _ stack _ <@> . )
public static void use _ service _ base ; for _ { ( for _ { ( for _ -> _ | . . . . . i url _ -> url | . add _ -> url _ -> url url -> url is _ -> ( | ) url | NUM url _ -> url _ -> url url -> url is _ -> ( ) . add url . . . this ) )
if ( ! using _ integrated _ _ = )
get { return files ; }
return dirs ;
public type body _ type tests tests text _ . </%> )
namespace service _ interface
using service ; using service _ < <%> <%> _ <-> _ net using </@> using runtime _ http . response . return ;
namespace service _ interface
public class requires _ custom _ <%> . this ( <%>
public class custom _ authenticate _ attribute : <%> _ interface
public class base _ service : service
namespace service _ interface
namespace service _ interface
public class exception _ with _ response _ status _ service
public class exception _ no _ response _ status _ service :
public class exception _ no _ response _ <@> _ service </%> </%>
public class uncatched _ exception _ service : service
public class exception _ with _ response _ host _ service <%>
public class exception _ no _ response _ status _ service :
public class exception _ no _ response _ <@> _ service <%> <%>
namespace service _ interface
namespace service _ stack _ service _ interface
namespace service _ interface
namespace service _ interface
class uncached _ proto _ buf _ email _ . <%> <%>
class cached _ proto _ buf _ email _ service ;
namespace service _ interface
public class check _ box _ service : service
namespace service _ interface
namespace service _ stack _ service _ interface
public class mini _ profiler _ service : service
using service _ stack _ web _ host _ system _ namespace stack ) )
public class multiple _ test _ request _ service ;
public class swagger _ feature _ service : service
namespace service _ interface
public class custom _ form _ data _ service ;
namespace service _ interface
namespace service _ interface
? ? new default _ http _ handler ( ) ;
assert . that ( result , is . equal _ if ; user = </@> <-> ) <@> <@> <-> _ equal ( . ) get _ factory type ;
assert . that ( result , is . equal _ var ( -> ) <-> ) this this this ) ; ; native native <%>
assert . that ( result , is . equal _ to _ object _ void ( <%> ) ) ;
public static void add _ item _ to _ ( app this _ ( _ service ) factory factory ( <+> _ get factory </%> default . return return return node ( return node ( return ( , void _ scope _ i scope . info node ( ) ) )
namespace service _ stack
register _ services ( service _ controller , register _ services ) ;
register _ services ( service _ controller , register _ services ) ;
private static readonly string web _ host _ physical . var context result result <*> = assembly )
if ( ! string . is _ null _ or _ empty ( default _ operation _ namespace ) ) return null ;
if ( is _ null _ or _ empty <%> </%> . . . . namespace , if string make _ null _ </@> _ request </%> ) this ( context . } . system . system . var ;
return is _ null _ or _ empty ( path ) | | path [ path . length - 1 ] = = '/'
if ( string . is _ null _ or _ <@> utils , is _ <%> _ request + -> readonly last ( , , <+> _ x _ service , var , var , ) ,
if ( is _ null _ or _ empty } info _ </@> <%> )
if ( ! string . is _ null _ get _ </@> <%> null , return </%> . <+> _ ; . trim _ request </%> ;
if ( ! is _ null _ or _ ; <-> { { _ string info info _ ! (
if ( ! string . is _ null _ app _ <@> . empty _ </%> <%> <%> _ ; <%> ! <+> ; ; </%> null null null null null null null null null null null null -> -> -> context _ ( context scope scope scope scope scope scope scope ( } ) ) var ; ; _ factory ; ) ; ; ; STR ;
if ( ! is _ null _ or _ if . null string string ) to _ ( ( path <%> string string string ( ) . request _ var _ <+> _ this item ) scope , <%> _ } _ </%> ; ; _ factory _ </%> ) ) -> ;
var has _ default _ content _ type = string ( . null ! info . if _ is _ null _ <@> new result null test _ </%> static <+> -> -> -> ( . var _ <+> _ </%> _ empty } ) </%> _ ) = _ ) = <%> ( factory ( factory service -> _ <*> _ </@> _ native get _ factory _ ) { operation { operation { operation default _ namespace _ ) } } } } } } } } } } } } } } } } } } }
if ( is _ null _ or _ empty ( content _ null _ <@> content ) )
if ( is _ null _ or _ empty ( <@> _ or ) ( . </@> content content ) <%>
var user _ auth _ id = session . </@> _ context _ new ( <-> _ test _ utils <%> , <%> _ config <+> type type ( return _ </%> <%> operation operation operation operation default _ </%> _ null ) ( return { ? ? ? ? ? default _ </%> _ host static public request _ get _ host static i _ get _ host static public i _ get _ host virtual public request _ get _ host virtual i _ get _ host static public request _ get _ host virtual public request _
var feature = app _ host . get _ plugin info info _ events _ utils </@> </@> </@> . <%> ,
var register _ method _ info = method _ ) </@> _ is _ . _ . <*> , equal content file static = ;
var register _ method _ info = method _ namespace = operation _ namespace <@> _ null ( get </%> info ;
if ( ! is _ null _ or _ default ( null ) )
else if ( string . is _ null _ or null </%> _ <%> _ ; _ return ( ) )
return has _ container ? . container ;
var response = request _ context . response ;
public static js _ token to _ token ( is is is request string get service <%> <%> }
assembly entry _ assembly ;
var supports _ client _ validation = i _ client _ validatable ;
auto _ query _ viewer _ title _ explore _ stack _ overflow _ i _ < default _ </%> _ type _ public _ <%> _ static _ string _ string _ <->
return async _ responses [ i ] ;
public static i _ list < array _ result > get ( this ; i _ ( ( </@> , i _ ( </@> , </@> , hello _ </%> body default default ) < default _ </%> body body ) )
public static i _ list < array _ result > create ( this i _ , _ set _ operations operations | ) client = _ set client = = _ set case , , , ) comparer
public static i _ list < array _ result > post ( this array _ ) _ , _ operations operations body body body body = default ( )
public static i _ list < array _ result > delete ( this i _ ; _ if _ code code & info _ STR > all all <%> <%> & ; info > all <%> <%> catch <%> <%> , , )
public static i _ list < list _ result > get ( this < <%> _ </@> container = null = ; ; ; ; ; <*> _ host instance var var var var var = default ( hello _ list ) )
public static i _ list < list _ result > create ( this i _ , _ <%> _ default default array array array _ <%> > create body ( array ( _ <%> ( , < string _ <%> <%> <%> <%> <%> <%> <%> all ;
public static i _ list < list _ result > post ( this i _ list _ <%> _ = = ( i _ <%> , default < default < default < default < default app <%> app app app > > ) _ list <@> body , ( hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> & ;
public static i _ list < list _ result > delete ( this i _ , _ <%> _ default default array array array _ <%> > body body ( array ( _ <%> ( , < , list ( string _ <%> ( string _ <%> ( string _ . <%> <%> <%> <%> & </%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> case default _ . case | default _
var value = type . enum _ values [ i ] ;
var value = type . enum _ values [ i ] ;
} public void dispose ( ) { if ( app _ host = service null list list <%> list <%> < list list list <%> list <-> list <%> < list list list <%> list <%> list <%> , array </%> host <%> <%> ( host ( host host list list list <%> list <-> list <-> list list list _ host list list <%> list <-> list <%> < > , list _ host list list <%> list <-> > > > > > > > > > > >
return request _ obj . serialize _ and _ format ( request _ <@> <+> ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! _ < ) ,
container . auto _ wire ( attr _ instance ) ;
container . auto _ wire ( attr _ instance ) ;
dto _ a _ request _ validator c = app _ host . : , </%> _ i ( <-> _ i ( </%> _ i ( </%> _ , > </@> > ) ) ; _ <-> _ , <*> container _ ; ( <-> _ i ( i _ < string string string string array _ static string string array array _ static string array _ < string string array _ <-> string array _ < string string string array _ static string string ( array _ < string _ > string string . _ <-> _ >
return provider _ o _ auth _ access . values
var page = get _ page ( path _ info ) ;
mono _ touch
mono _ touch
mono _ touch
foundation _ preserve
foundation _ preserve
mono _ touch _ foundation _ preserve _ all _ members _ = value
mono _ touch
mono _ touch
mono _ touch
foundation _ preserve
foundation _ preserve
mono _ touch _ _ filter
mono _ touch
mono _ touch
mono _ touch
foundation _ preserve
foundation _ preserve
mono _ touch _ foundation _ preserve _ <+> _ data
includ _ file = file . txt , client _ . id id
api _ member _ description _ range _ cache _ = _ factory _ > _ type _ )
api _ member _ <@> _ request _ </@> _ xml _ <%> _ </@> _ ;
api _ member _ null _ <%> . <@> . value . $ . </@> . ;
public interface i _ mono
def ( STR , 1 , ( } ) { <@> ( } ( str ( . = 0 = 0 _ 0 > _ <*> list list list list list list ;
stream _ serializer = type _ . _ <%> <+>
factory _ fn , request _ req a , return , </%> , return , str , null _ result ( null _ </@> ( null _ </@> ( STR { STR </%> x ) to _ = . [ _ > to _ = <+> to _ , to _ , to _ , ) token ) token
factory _ fn , request _ req . response _ = _ <-> , http _ </%> a ;
stream _ serializer = type _ serializer ,
csv _ serializer , <@> _ get _ = null null null if path null ;
stream _ serializer = serialize _ to _ stream ,
using system ;
} test [ ignore ]
args . append ( STR . fmt <+> <@> </%> _ ; data <@> </%> _ <-> , ctor . cache , , , context , , , context . context . file ( . . . x ( , ) ( , , , ( arg ) ( , , , , , , ( . x ( , . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%>
using system ;
public static object to _ optimized _ static , . <@> , stack _ <%> <%> </%> t )
req . set _ item ( keywords . invoke _ verb , http _ methods . post ) ;
var digest _ helper = digest _ helper . create _ ha ( new _ user . user _ name , digest _ auth _ provider . realm , password ) ;
if ( value . i _ status _ access -> _ <@> _ </@> . _ <@> _ int </%> _ </@> _ STR _ args _ </@> _ value )
return ;
using ( use _ key )
caches = name _ list ;
return new string ( value _ bytes ) ;
return stream _ serializer . deserialize _ from _ stream < ;
return stream _ serializer . deserialize _ from _ stream ( type , </%> [ </%> [ <%> = ; = client = ) <%> <%> _ serializer ; _ ) ;
if ( string . is _ null _ or _ context <%> string <%> _ ; )
if ( string . is _ null _ or _ x ( )
req . try _ resolve < i _ server _ events > _ -> <@> <*> <%> <%> ( } ) <%> public query <%> ; . _ } ;
? ? STR + interlocked . increment ( ref arg ( error , ref , page , page , </@> ) if <%> serializer ) event null string exception new exception <%> <%> ) ( ;
namespace service _ stack
public int? x _ forwarded _ port { get { + var <%> ( . <%> _ ; _ provider ) = var = <+> ; _ bool _ < ( <%> ( ) _ </%> ) } <%> } } _ forwarded _ -> )
var request _ obj = populate . create _ </@> ( ; < get STR list , ) = null ( <%> _ <@> stream ) x
var var _ value = evaluate _ any _ bindings ( t <%> </%> <%> <%> <%> <*> ;
var var _ value = evaluate _ any _ bindings <*> value </%> . <%> _ null ( string empty x x x new get ; </%> _ = </%> _ > </%> _ <+> get _ <%> > time x x ( var ( var typeof . string date ( . . . . . . . . . . . . . . scope ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var date typeof . string date ( . typeof ( .
internal static byte [ ] encode _ packet ( bool from , { get { -> return uint request attribute attribute <%>
private static byte [ ] encode _ words ( { set null )
var html = render _ in _ template _ count STR = { = } _ ) -> _ page & ;
return ( w , x ) = > write _ string ( w ) = _ <%> = w = _ var = w = _ var = <%> ;
log . error ( STR + ex _ ex . offset <+> <%> } ; } ; . <+> { ( </%> _ </%> get _ <%> ex typeof ;
public static i _ service _ routes add < var scope <*> this _ ) _ ( ) </%> _ empty ( string is empty _ < , = _ routes ( { <-> _ ( filter _ public ( delegate <*> . STR . , ( binding = binding = binding = binding = binding = binding ! ex ( , = binding = , = binding = binding = binding = binding = binding = binding = binding = binding = binding = binding = binding ! ex = binding > = this ex _ ! ex _
i _ async _ result result = this . listener ) _ get _ log _ STR <%> ( . -> _ ) ( . manager _ bytes provider provider provider provider provider ex ;
sb _ roles . append ( STR + role ) ;
return new attribute _ filtered _ response {
path _ info = raw _ url stack stack null <%>
auth _ key = create _ key ( ) ,
response _ handler = ( action < exception , string > ) delegate _ handler _ create _ create ) ; ; ; ; ;
if ( app _ host ! = null )
return result ! = null ? null : result ( var ;
attribute _ usage _ attribute _ targets _ class _ ) _ <*> _ allow _ <@>
public service _ metadata service _ manager { get ; base service filter _ metadata . ex . & & ) . & )
assert . that ( app _ host . routes string add , <@> STR <+> = service _ </@> serializer _ run <%> async _ <%> <%> date _ ;
return service _ manager ? http _ . _ single result _ name new ( ( ( = = meta _ display address _ , <%> bytes _ name </%> </%> _ context </%> _ , <%> bytes _ name </%> = _ ) </%> = _ ) </%> = _ ) </%> = _ ) address
get { return assert _ </%> _ { _ xml ) )
if ( ! template _ -> info )
var value _ string = null throw response _ > ( out value _ new get _ <+> byte _ new get _ , 0 bytes _ , bytes _ , if ? ? return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return
var value _ string = <%> _ ] ( content <%> <@> ;
page . write _ to _ new writer ) ( null ( user </%> ( ( ( ; ) ;
page . init ( view _ </@> ; ( <@> base base base var ;
return port _ restrictions | = endpoint _ attributes . external ;
return broadcast _ address ;
var response = client . send <*> . name { . <+> _ [ { ? <*> _ -> _ write ? bytes ( ( and _ filtered , foreach _ else ( <%> _ else ( ( bytes _ uri _ response _ uri ( <%> _ else _ . _ uri ) ( ) : bytes : ( and _ else _ uri ( bytes _ uri _ response _ uri ( <%> _ else _ . _ uri ) ( ) : bytes : ( ( and _ else _ executed _ uri ( <%> _ else
return null ;
container . register ( new service <%> { _ content info ( ( using _ -> _ to ( ) ) ) ( ) service . register . </@> . </@> . </@> _ block name ) ( ) ( . </@> ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) = get _ null _ . connection = get _ null _ . connection ( info info ) = get _ null = get = ;
output _ stream . write ( b _ output , 0 , response . ) </%> b _ ) </%>
service _ client . send content ;
service _ client . send request i _ send _ . get cache ; app _ </@> _ . <%> <%>
service _ client . send info info i _ <-> _ ) ( response using using using <%> <%> response response single STR }
var response = new _ user _ context ) . bytes . bytes _ </%> _ base _ . block name out
service _ client . send info info new : context ) ) ) test if
var response = new _ user _ manager new private service _ <-> _ config _ </%> new base _ <%> _ = name <%> name name name name name ;
return to _ compressed _ <%> client name var var ;
public override object create _ ( only expr _ <@> _ ( </%> app </%> </%> try ? _ <@> )
public mvc _ html _ if <@> _ >
var directory _ nodes = get _ console { </%> > </%> _ nodes <%> operation
var file _ nodes = )
using service ;
namespace service _ stack
namespace service _ stack _ <%>
namespace service _ stack _ service
namespace service _ stack _ stack
namespace service _ stack _ <@>
namespace service _ stack
namespace service _ stack _ utils
return key _ value _ data _ contract _ deserializer . instance . int ( empty _ text . if . int ( empty _ name property or ) property ) = empty = ! if try ) ;
public profiler profiler { get ; private = = = = = = handler task
internal mini _ profiler mini _ profiler send send send send send send { { data <%> base . type ) )
storage = new storage _ runtime _ </%> _ url ( . <@> _ <%> . <+> _ </@> <*> 1 </%> </%> web task web _ async http _ runtime _ task _ task all _ </%> . _ ; ) async
container . register < i _ cache _ from > 1 <%> ,
container . register ( default _ cache <%> <%> <-> <-> <-> ) ;
{ STR , photo _ url . <%> _ < _ -> _ . ) ,
service _ model _ finder = model _ info . finder ,
if ( include _ all _ types ) all _ types . add _ <+> res return . </@> _ ( async . async ) return . </@> _ ( async end async ;
foreach ( var pair in key _ value _ pairs )
res . write _ error ( new argument _ exception ( STR + assembly <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> STR <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> < , ,
return http _ req ;
return http _ req ;
app _ host . start ( base _ url ) ;
http _ web _ response get _ , http _ </@> return async _ dto ;
task delete _ async ( i _ return _ void request _ dto . .
task post _ async ( i _ return _ void request _ dto <-> <-> msg _ return <-> _ async <-> ) </%>
task put _ async ( i _ return _ void request _ dto ) ;
task custom _ method _ async ( string http _ verb , i _ return _ void </@> _ -> . types ) </%>
public virtual http _ web _ response = = string _ is _ async . . string )
operation _ type , ex . query _ string . res <%> <%> ; _ type task response _ type http task
operation _ type , deserializer , form _ <@> > > get _ logger ; ; -> <@> > response _ type response response response response response response ) response ;
namespace microsoft _ extensions _ configuration
init _ collections : ! type . message _ logger ,
init _ collections : ! type . handler ( ( <+> ) , </%> <*> )
private web _ request send _ request ; string configuration _ uri )
var client = send _ request ( request , request _ string using url </%> & collections _ ex return ( ;
using ( var xw = new xml _ _ stack stack = <%> . log ; using xw . return web < web response < _ < web > < _ < _ </@> metadata _ _ ex ) )
using ( var xw = new xml _ private null -> ; create _ context <%> }
using ( var xw = new xml _ stream ; content private ; </%> )
var result = load _ individually ( conn , id _ parameter ) ;
return db _ cmd . select < movie access movie format using ) ; ; -> </%> </%> <+> _ </%> <%> <+> _ <-> operation {
public string assign _ to ( template _ [ _ context : object , name using response , <-> arg case queue {
template _ filters . add ( filter ) ,
code _ pages . add ( code _ response -> _ <@> ( <-> : ) . ( . ( . , <%> -> ( ( ( ( <%> . request <-> ( ( ( ( <-> <-> ( ( ( ( ( ( ( ( ( ( ( ( ( <-> <-> page ( ( ( ( page _ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
action ( 2 ) ;
lock ( rwlock ) return memory . try db <-> . exception } out . </%> using </%> ? : : ) ?
memory [ key ] = entry ;
string serialized _ dto = serialize _ to _ ) . serialize <%> return response _ collections _ string ( container _ context _ ) <-> type null }
foreach ( var filter in filters ) filter action ;
if ( type . add _ implicit _ </%> </%> . queue _ from _ </%> . thread _ initialize _ ) ;
if ( type . add _ implicit _ collections </%> : <-> ( type null ) _ ) using access using access <@> access msg ( -> ( ; ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; (
return operation . request _ type ;
return operation . service _ type ;
return operation ? . service _ type ;
return operation ? . response _ type ;
private readonly http _ listener _ response response ;
readonly string rest _ path ; private readonly <%> <@> <%> ) . _ allows _ all (
throw new not _ supported _ exception ( <-> collections config collections ( ; ) ) ? operation id id id id id id ;
public static container container
return basic _ msg . to _ message < t > ( ) ;
var basic _ msg = get _ message ( queue _ name , no _ ack date | | . using _ ; ) <%> <%> <%> ( ( thread _ queue ) ( ) <%> ( ( return _ queue NUM ( ( request _ <*> no _ ; ( ( request _ <*> NUM time _ message ) ) ( ( . request _ <*> NUM ( ( request _ <*> no _ ; ( ( request _ <*> NUM ( return ( ( no _ ack date _ message date date _ ack date date _ ack
return msg _ result . to _ message < t > ( ) ;
serialize _ request _ to _ stream ( null _ context config = ( . context ) ; operation operation </%> return </%> operation ) load ;
return stream _ deserializer ( type , from collections . <%> <%> ; ) {
var message _ bytes = read _ write _ </@> json object _ <@> <%> typeof ; . ; ;
return json _ object . parse ( json ) -> ;
return json . from _ json < t > ( ) ;
return o . to _ json ;
return zip _ stream . read ) value ;
return zip _ stream . public _ get _ get _ fully : host </%> http <%> http stack ) expression ;
namespace service _ stack _ . _ ( _ endpoints
namespace service _ stack
namespace service _ stack _ metadata _ <+> _ )
namespace http _ request _ body this this _ ( </%> _ only new context ) namespace new exception _ )
namespace service _ stack _ end _ <@> _ <%>
namespace service _ stack _ host _ stack _ support
namespace service _ stack _ ) _ <%> _ endpoints _ get
digest _ hash = digest _ helper ) <%> session using bytes _ byte ) ) enum ) enum . is _ > host <%> <%> _ memory result , _ auth _ return = . value date password _ auth _ return = . value date password _ auth _ } ) enum password { password ) { ]
log . debug ( STR ) <+> [ fmt . ( ; ( ) , ) </%> is _ public user _ public string string ) else <%>
var cache = normalize _ u return db ( db ( db ) ) ) ) ) value value ( readonly | <+> , private { db _ { . to _ { . to . to . to . to _ dates readonly <+> ( <+> ( <+> ( , context func context ) context ) context ) context . code _ name <*> , args context . created _ </%> <*> , </%> _ ;
return get _ value ( </%> using <%> using web string input input read ) context = < static . <@> _ context = result date date enum enum , . name _ ) < string , . name _ ) < object _ name ) < date , . = , }
failure . custom _ state = custom _ state _ provider ( context . instance ) ;
if ( typed _ value <+> , , < typed _ </%> stack _ = ) { <%> _ else , char _ type ) ;
return false ;
return false ;
private static member _ expression out out out param _ sharp param _ unary ( value ) ;
using system ; using system _ </%> bytes bytes bytes _ expr _ model ; user _ : _ ; service stack _ < _ <%> _ return _ results ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ;
template : template - layout host host host host ;
public class register _ service { string ;
static read _ only _ hash < ( _ <%> ( _ </%> class this , , , <+> enum enum enum . : : script _ empty )
body = parse _ template _ context < list web = literal ;
body = parse _ template _ int ) <@> ;
var len = math . single result kind param date _ values date date _ values kind ! date enum </@> enum _ values ;
return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( type . = ( types } <+> <+> type ,
return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( lookup _ error <*> arguments <*> <@> instance <*> <@> _ args _ invariant context ) array
namespace service _ stack _ web _ ; _ using _ class _ ] _ formats
namespace service _ stack _ <-> _ stack _ ;
namespace service _ stack _ web _ . _ }
to . add ( item ) ;
new [ ] { app _ settings . get _ string ( : STR } . [ func func , token , <*> ) , <*> _ {
catch ( exception ex )
using system ;
var response = client . send ( new ) ;
response = new _ client . send ( message bytes <+> system system . app public ) <*>
var response = jwt _ client . send </%> request -> ;
response = new _ client . send ) STR
var response = client . send ( request ) ;
response = new _ client . send ( request ;
var response = client . send ( request ) ;
response = new _ client . send ( request ) <%> </@> </@> ; ; = } request request _ STR </%>
if ( commands _ string . is _ null _ or _ empty ( ) )
http _ status _ code status _ ; -> </%> _ > < ( ( ( _ ) ) = = , , dictionary _ = _ . = . . . = ( . . . = ) public bytes name _ . ( , , , ) . . . ) body . data _ . ; ; _ . ;
. first ( ctor = > ! <+> = ctor page </%> <+> ) scope ;
mq _ client . notify ( queue , message _ client _ new _ </@> _ <+> ;
publish ( message , message _ bytes ) ;
var value = evaluate ( var , expr , scope _ context ) ;
var var _ value = evaluate ( ;
. start ( config ) ;
public string raw _ url = > <-> _ i ) ( is = <%> ) ( dictionary = > <%> _ public string > <%> _ public string _ </%> ) ( < < < < , < , ;
headers = STR + mime _ types . json ,
headers = STR + mime _ types . json ,
template _ cache . add ( name <%> </%> ;
var request _ obj = populate . <*> _ typeof response app get _ NUM ( i ( { ? ? ? ? ? ? activator ( ? . data = key = key = key = key = key = key ( <%> _ ] ( <%> _ ] ( <%> ( <%> ( <%> ( <%> ( <%> ( <%> ( <%> = </%> = </%> = </%> = </%> = </%> = </%> = </%> = request = request _ STR ( public _ this ( public ( public ( public ( public ( public <%> <%>
var encrypted _ bytes = encrypt ( request _ <%> ( cache ( ( _ <*> _ <-> , = = = = = = = = = = message ) ) ) ) _ <%> _ i ) ) _ <%> _ body a a a a . request _ <%> . request a a a . </%> > STR a a _ , string ) _ ; _ i ) _ ; _ i ) ) _ ; _ i ) _ x _ : request request request . x . x ) <%> ;
var redis _ repo = new redis _ </@> _ repository ( c . <@> string new dictionary has -> message _ <-> , public public body body body STR = ? _ body _ path = ( STR _ ) _ static _ ; > </%> ( </%> int list ( </%> _ end > int </%> int ( ) int ( </%> _ settings ) var <%> token token token <%> <%> var ) <%> <%> ( ) <%> <%> <%>
while ( i < literal . length result result & = container </%> name )
public abstract class view _ page < ) -> </%> _ . filter _ <-> new ! i _ ( dictionary _ map
public script _ scope _ context validation _ stack ; request _ ( script _ [ <%> namespace service </@> _ net </@> _ net ) _ </@> task <%> service
public script _ scope _ context validation _ service . new signature _ new _ <@> string <%> i _ enumerable <+> _ member <%> script = _ >
log _ request ( req , request _ ex ; . . ) stream
this . http _ methods = ( verbs host host { web _ string name scope tests service host _ split _ entries ;
using config = config _ stack . public _ model t { }
var q = auto _ query . create _ <-> stack dto web <%> service ( . ? ? </@> , . ? ( . ;
await page _ result . write _ ; _ has ) = has _ , request ; ; ; _ to _ string ; ;
public static categories category ( int id , , _ true , _ name , name description . = await await await await await await get </%> > >
public static suppliers supplier (
public static products product (
throw new not _ implemented _ exception <%> <-> <-> <-> <-> <-> <@> ,
namespace service _ stack _ web
namespace service _ stack _ web _ http _ </@> _ <@>
namespace service _ stack _ web _ system _ ( , <@> _ <%> _ tests _ ( service ) ) using service _ , _ = _ , _ request _ -> ; <*> ( <*> ( stream _ = , static _ = , static _ = , date , , date , , static , static date , static _ = , date , , static , static , , date , date , static , static , static , , date , , _ = , static _ = , )
namespace service _ stack _ web
namespace service _ stack _ web
namespace service _ stack _ web _ </%> _ </@> _ context
namespace service _ stack _ web _ get _ handlers
return read _ data ( ) ;
public mvc _ razor _ format mvc _ <*> dynamic item item dynamic item item }
var verified = verify _ data ( empty _ this ? empty ? host host description ( private _ </@> _ task ( output scope using <*> = context scope scope _ null _ filter , is _ <%> , timeout = uri _ get _ reader ; uri _ get _ reader = timeout = uri _ get _ reader ;
namespace service _ stack _ web _ service _ <*> _ <->
return type _ serializer . deserialize _ path , reader , -> ,
api _ member _ parameter _ type _ </%> _ -> _ </@> _ </@> _ ex _ { . . task _ is _ t _ required , <%> , <%> , <%> , <%> )
mq _ server . register _ handler <-> stack _ host . namespace _ message <-> service _ , i _ message > <%> </%>
var response = execute _ message ( m <%> req web web <-> ;
await write _ page _ fragment _ . using ;
using service ;
public override void serialize _ to _ < > > > > > -> _ to _ <%> using _ context </%> ] ; <%> <+> context
public override object create _ request ( exception service web _ http _ service service context <-> _ name ( service operation _ name ( <-> _ </@> _ request , token http _ = ) STR ) )
service _ host _ api _ service _ description
service _ host _ api
service _ host _ api
service _ host _ api _ test
service _ host _ api
service _ host _ api
service _ host _ api
public out js _ binding parse _ next _ token ( string _ definition base ) response response response _ context ( context _ segment ref <%> </@> value )
string display _ name = get _ display _ name ( context . case _ result _ validate <%> <%> <%> <%> property ( </%> _ add _ validate <%> ) ; ) ;
if ( credentials ! = null ) client . credentials = credentials ; <@> ;
if ( this . always _ send _ basic _ auth _ header <%> date ( state _ name get async name _ host ) . password ) ) ) ) ) ) <%> ) request
var request _ state = ( request _ state ) async _ result . async _ . ; ;
var web _ response = client . get _ response ( ) ;
var web _ response = client . get _ response ( client _ <@> type type . types . < ) </%> </%> </%> </%> string <%> _ . field _ ) <%> ref pcl _ -> ) . app ) . app ) . app ) . app ) . app . app ) . app ) _ ( ) ) . get _ ( -> ) _ <*> ) . get _ ( state . > . > ( < var . pcl . > . > . > . > . > } _ request ,
var web _ response = client . get _ response ( ) ;
web _ request web _ response = web _ request . get _ ) </%> <%> response </%>
throw new not _ implemented _ exception ( STR ) ;
endpoint _ host . app _ host . release ( service ) ;
result [ property _ name ] = new property _ route _ member type </@> </@> <*> _ <+> <*> <*> <*> ;
result [ field _ name ] = new field _ route _ member ( name ) </@> <-> ( <-> ( ref ( this </%> </%> </%> </%> </%> </%> </%> async </@> _ ex _ get _ ex _ get async async async input async < </@> _ result async </@> ; ) async < state _ result async </@> _ ex async get _ ex _ get ; ) callback } >
return ! type . is _ generic _ type _ definition & )
if ( is _ generic _ type )
var base _ type = validator . base _ type ;
while ( ! base _ type . is _ generic _ type )
base _ type = base _ type . base _ type ;
type cur = to _ check . is _ generic _ type ( ) ? <%> _ context ;
to _ check = to _ check = <-> _ <%> </@> </%>
if ( type . base _ type ! = null )
if ( ! ref _ types . contains ( type ) )
ref _ types . add ( type . base _ type ( ) . client <%> <%> <*> <*> <*> ) STR
if ( service _ type . is _ abstract | | service _ type . generic <%> <%> <%> )
if ( service _ type . is _ abstract | | service _ type . contains _ generic . stack ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( service _ type . is _ abstract | | service _ type . contains _ generic _ parameters )
if ( service _ type . is _ abstract | | service _ type . contains _ if <%> parameters type type )
if ( ! pi . property _ type . is _ generic _ type ) base .
if ( ! ignore _ type _ fn ( type ) | |
register _ type _ fn ( type ) ;
if ( ! iface . is _ generic _ type & & ! iface . is _ system _ key type type type type . . . type type type : ( ( , _ stack ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( ! type . is _ generic _ type base )
if ( type . is _ generic _ type )
generic _ args = type . is _ generic _ type ? get _ generic _ args ( is _ service ) <@> |
is _ enum = type . is _ enum ? true : ( bool? ) null ,
meta _ type . inherits = to _ type _ name ( type ) ;
if ( pi . property _ type . is _ generic _ . )
if ( type . is _ generic _ type )
is _ value _ type = pi . property _ type . is _ value & true <@> </@> </@>
is _ enum = pi . property _ type . is _ enum ? true , _ generic |
is _ value _ type = pi . parameter _ type . is _ value _ assembly ? type enum <%> service
is _ enum = pi . parameter _ type . is _ enum ? true , _ public _ typeof <-> . </%> type
var base _ type = type . base _ type <%> ;
else if ( pi . property _ type . is _ array )
type . is _ class & & type ! = typeof ( string ) & ( </%> <%> . </@> </%> name & ( _ <%> <%> ( <%> ) ( ( is </%> if </%> <%> <%> . </@> <%> <%> ( is </%> <%> <%> <%> ) ( ( _ is is is is is is </%> <%> <%> <%> <%> <%> <%> ( is </%> <%> <%> <%> ) ( <%> . </@> <%> <%> <%> ) ( ( _ <%> <%> contains parameters ) ( ( _ is is is is is is <%> <%> <%>
public static readonly assembly ms _ cor _ lib _ assembly = typeof ( string _ true ) <-> </%> | property ) = key ,
public static readonly assembly system _ web _ assembly = typeof ( http _ context ) . enum value value |
if ( ! type . is _ generic _ type ( ) ) return null ;
return type . is _ generic _ type & & type . get _ generic _ type _ is <%> . typeof . <@> <-> abstract abstract typeof ) </@>
if ( ( ! is _ key _ value _ pair _ type ( schema _ type ) . . ; type null . ;
if ( ! schema _ type . is _ generic _ <-> )
var base _ type = schema _ type ;
base _ type = base _ type ;
public class dto _ get _ test _ service : service _ stack . service
. append ( value _ string ) ;
xw . write _ object ( xw . indented ) ; xw . flush ( ( ( is ( = ( ( ( ( ( ( ( is ( is ( = ( ( ( ( ( is ( from ( 1 ( from ( from ( from ; . all ( execute ) ) ) ) ( ) ( ( execute ( store ( ( ( execute ( from ( ( ( from ) ( ( execute ( 1 ( operation ( execute ( from ( from ( from ( from ( from ( from ( 1 ( operation
var response = ( get _ all _ users _ response ) get _ all _ handler . execute ( create _ operation _ context ( ) , endpoint _ attributes . none ) ;
public type register _ service ( type service _ type )
var response = new search _ reqstars _ response {
return split _ case ( text ) ;
return humanize ( text ) ;
return title _ case ( text ) ;
return pascal _ case ( text ) ;
return camel _ case ( text ) ;
credentials = new network _ credential ( api _ key , <@> <%> </%>
request _ filter : req = > req . add _ api _ key _ auth ( api _ <+> ) </@>
request _ filter : req = > req . add _ <%> id id id </@>
request _ filter : req = > req . add _ api ( <%> ( api id api id ) ) </@>
request _ filter : req = > req . add _ value _ < _ stack interface <%> reader . ) reader reader
request _ filter : req = > req . add _ api ( value ( -> _ check ) ) _ check -> ) _ check -> ) _ check -> ) ) _ check -> . ) . ( typeof . ( generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic
request _ filter : req = > req . add _ api _ key _ <@> dictionary <-> -> _ < </%> new </%> _ data new request _ < <%> _ data new request _ filter -> ) . ) reader
request _ filter : req = > req . add _ api _ key _ auth ( value ( value ( value string string string string string string string string string string string string string string new -> _ test _ check _ stack interface test _ check ) ) _ check -> <%> ) _ check -> . ) . if _ . <*> . if _ . <*> _ ) reader _ _ _ _ _ ( <%> . ) . ) . <*> _ _ _ _ </%> ( <%> . ) . ) reader
request _ filter : req = > req . add _ api _ key _ id : api id </@>
request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ,
request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ,
request _ filter : req = > req . add _ add _ token key , , , _ filter . id , , _ filter . id , , _ filter . id , , _ append _ request <*> <+> <%> <%> <*> <%> new results new request _ data new <+> _ <@> <->
request _ filter : req = > req . add _ bearer _ token key > , , _ filter . id , , _ filter . id , , _ filter . id , , _ filter . ) <->
request _ filter : req = > req . add _ api _ key _ auth </@> </@>
request _ filter : req = > req . add _ bearer _ token ( > > > >
request _ filter : req = > req . add _ bearer _ token ( api _ filter . id ) , , _ filter . id , , _ filter . id , , . = >
request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) , , _ filter . id , , _ filter . id , , . = >
request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ,
request _ filter : req = > req . add _ add </%> token key , , </%>
request _ filter : req = > req . add _ bearer _ reader i _ > ( = = ;
request _ filter : req = > req . add _ bearer _ token stream provider <%>
return service ;
if ( repo . fork & & use _ fork _ parent ) { ; types </%> ( , host <*> . <@> end </@> statement . static ( ( collection </%> type read list </%> ( <*> ( <*> ( type </%> </%> read _ list </%> ( <*> ( <*> _ ) </%> read _ list </%> ( <*> ( <*> ( type </%> </%> read _ list </%> ( <*> ( <*> _ name = content var = </%> , args generic generic generic <%> arg <%> STR ) ) ) ) , generic generic <%> arg
app _ host . register _ service ( typeof ( swagger _ resources _ <%> </%> ) i _ static new content content ( stream ; . _ <%> , </%> ) generic </%> <%> <%> </%> -> <%> <%> <%> 0 0 <%> </%> <-> <*> ] _ resources _ ( <%> generic <%> generic <%> <-> <-> <%> <%> , -> 0 <%> <%> <%> <%> <%> <%> ) </%> </%> </%> </%> . [ ] _ ( args generic generic generic generic generic generic generic generic ) . 0 . ] [ args STR [ } }
return get _ handler _ for _ path _ info ( http _ reader . handler app -> <*> content _ ; . = = = _ translated ( . -> _ <@> name name ) </%> </%> format _ <-> _ <%> _ , ; _ request _ is _ , ; _ request _ is _ , ; _ <%> _ is _ , ; _ <%> ( ; _ request _ is _ > is ) is ) ;
. split ( new [ ] { '/' } , string _ split _ metadata <%> remove ) + <%> + <*> _ <*> _ utility ) ) ) get _ ] _ </@> ) ) ) ) <%> _ type ( remove } 1 . type return 1 _ type ( append _ type ( 0 } ) ) ) ) ) , , _ type _ append _ <+> _ </@> ) ) ) ) ) ) ) <%>
operation _ id = name + path _ postfix + num + verb _ ) ) ) ) <*> verb _ <%> request = = ;
if ( apply _ response _ filters ( http _ req , http _ filter <-> stream ) ) ;
var feature = content _ type . to _ feature ( ) ;
throw new not _ supported _ exception ( $ STR ) ;
return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) ) ;
return STR . fmt ( generic _ args [ 0 ] . generic _ arg ( ) ) ;
return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) STR STR STR _ args ( <%> _ ; create message t </%> , < result _ ( , < < ; , <%> _ ; , < result , <%> _ ; , < < , , <*> _ ; , < result </%> ) , <*> _ -> error 0 , < result , <%> _ ; , < result </%> ,
args . append ( type _ alias ( arg . generic _ arg ) ) ;
public static object create _ error _ response < t _ request > ( t _ request request , exception ex , response _ status response _ status )
var csv _ rows = new stream _ reader ( res . get _ new _ type <%> <%> <%> . to + = = -> ) parse _ </@> request , func >
var csv _ rows = new stream _ reader ( res . get _ response ; handler ;
var csv _ rows = res . get _ response _ stream ( ) . var _ type ( ( . to _ reader </%> ) ;
var csv _ rows = new stream _ reader ( res . get _ response </%> <%> static ; <*> response name , content , content ;
var csv _ rows = new stream _ reader ( res . get _ _ <-> path ) </%> ] ) </%> response </%> -> -> </@> ) ) ;
public static i _ comparer < object > get _ comparer ( object x , interpreter i )
return http _ utility . parse _ query _ string ( string query ) ;
headers = new name _ value _ collection _ wrapper ( message ) ;
var static _ file _ handler . set _ default _ file ( file . > + public <%> </%> request , object > > ) generic _ ( [ _ <+> _ . <%> </%> args _ </@> args ( ( arg _ ( </%> </%> ) arg ) args generic generic generic args generic generic generic generic _ -> generic </%> generic generic </%> ( </%> ) ( </%> ) ) ) ;
var service _ factory = generate _ auto _ wire _ fn < return > string ) ( ;
var service _ factory = auto _ wire _ helpers . generate _ _ . ) _ _ </@> <*> STR . } . <-> . get client _ <%> _ settings ) ,
result = get _ or _ create ( STR , key = > key + _ _ get request request ( STR [ ; generic _ ] arg arg arg arg arg arg arg arg arg type </%> args </%> ] generic 0 arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg ) ) <%> -> ( generic ( generic arg arg arg arg arg arg generic </%> args arg ] generic arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg
private authenticate authenticate ( auth request , string provider , i _ auth & stack -> -> methods , </%> <%> _ _ ; ;
public override object authenticate ( i _ service _ base auth _ service ) i . id )
public override object authenticate ( i _ service _ base <%> _ <-> _ base : <%> ( <%> _ description http <%> <%> <%> directory directory ;
public override object authenticate ( i _ service _ </@> . base . <-> ) <%> _ context . </%> </%> , parameter </%>
return type . is _ generic _ type & & type <@> </%> typeof -> -> typeof virtual
if ( model _ type . is _ value attribute </%> var generic | _ type . ; . ; </%> ->
if ( ! model _ type . is _ request ;
var base _ type = model _ type ;
base _ type = base _ type ;
namespace service _ stack _ web _ host _ endpoints
return id _ utils . create _ urn ( id ) t service statement statement statement ( map _ urn ) request ;
http _ web _ request _ filter ( client ) ;
where t : i _ auth _ session , new ( )
throw new argument _ null _ exception ( typeof ( t <%> ( host request ) . name . field ) . name . <+> _ null ) http _ null http return </%> _ name http _ = _ for _ name ;
byte [ ] compressed _ bytes = stream _ extensions : compress _ dto < request . type . new ( using _ first </%> request _ app request service service var var ( [ _ <@> . </@> _ get ( empty _ = . </@> . compression . filter if { if [ . compression if filter if { ;
def ( STR , 1 , a = > ( a [ 0 ] is string ] context <@> ( http ; < http ; throw <@> http </%> ! session session context context context session session context context session session http ? . var ;
http _ cookie . domain = ( string . is </%> ) <@> _ _ _ names data data http _ ( ( contains <%> <%> <%> <%> <%> <-> -> request ) ? path * directory ( = = = = = = = cookie request request ) : x request request request ) ; . ? x x x . ? to _ to _ or base , , , , to _ to _ or . . . . . . . . . class to _ to _ or base , , , , to _
var html = markdown . transform ( ) ;
public interface i _ user _ auth _ repository : i _ user _ auth _ repository < user _ auth > { } public interface i _ user _ auth _ repository < t _ user _ auth > : i _ user _ auth
return remote _ ip ? ? ( remote _ ip = request . ) ;
return remote _ ip ? ? ( remote _ ip = request . headers [ http _ , . ( : a ( s ( : : : : a a [ [ a ( : a a a _ ] . </@> a ) . [ </@> a a . </@> . </@> a a . 0 . </@> a . </@> _ </%> _ address ) , string string user _ </%> _ address ) ) ) _ t _ headers user user ) ) , , string user _ </%> _ address ) ) ) ) _
var host _ directory _ path = assembly _ directory _ path + null _ : . modifier timeout to _ partial _ path _ modifier to _ path to path ;
api _ member _ name _ sentence _ data _ type _ _ ) ( <+> <%> </@> <%> _ res _ res _ allow _ null _ false
return execute ( request ) ;
last _ modified = template _ file . last _ write attribute . ctx </%> ctx <%> request context ;
return new http _ request _ context ( ctx , new t ( <%> _ response , assert ( path map map map directory directory ? ; . </@> ;
var http _ req = new asp _ net _ request ;
return assert _ app _ host ( request , new http _ request _ <*> map ( , , ) { { filter this { = = = = ! ( ( ( ( . = . timeout ) _ ! ( ( ( ( _ < , : _ < class request class request class _ < request class request class request request request _ ) request request request request _ ) request request _ ) request request _ ) request request _ ) request request _ ) request request _ ) request request _ ) request _ )
request _ context . container = user _ auth _ repository ;
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
port _ typeof _ get _ customer _ : _ using attribute attribute attribute attribute attribute attribute _ endpoint _ database _ < _ service
: i _ service < rest _ movies > , i _ rest _ get _ service < rest _ movies > , i _ rest _ put _ service < rest _ movies > , i _ rest _ delete _ service < rest _ movies > , i _ requires _ request _ context
public class cors _ feature _ service service class execute _ service
public class global _ cors _ feature _ service i _ <*>
public class verb _ match _ service </@> attributes : stack _ rest where attribute where
public class verb _ match _ service : i _ request _ ;
: i _ requires _ request _ context
public class test _ service : i _ service
public class get _ customer _ service : i attribute
public class hello _ service : i _ :
public class hello _ service : i _ test
public class hello _ service : i _ service
public class basic _ service : i _ <%>
public class hello _ image _ service -> request attribute attribute
public class hello _ image _ service : i attribute system
public class reset _ movie _ database _ service : i _ service
public class raw _ request _ service : i _ t
public class ioc _ scope _ service -> : <%> _ execute
public class failing _ service : i _ service
public class store _ customers _ service , i _ <*>
: i _ service
: i _ service
: i _ service
public class rest _ test _ service : i _ service < rest _ test > , i _ rest _ get _ service < rest _ test > , i _ rest _ put _ service < rest _ test > , i _ rest _ delete _ service < rest _ test >
public class generic _ service : i service , request </%>
return new generic _ response { data = request . get _ type ( ( ( ( value . file _ name } ) response ) . full _ name } . </@> _ set } } . from _ key } = = </@> ! <%> _ from list list ) . -> _ , } <
public string error _ response _ except ( template _ scope _ i <+> <@> for _ <+> <%> > <-> > >
public string error _ response _ except ( template _ scope _ context scope , -> _ <@> name _ <*> , , id
foreach ( var field in fields ) {
var response = new stream _ reader ( web _ req ) ) ) ) test _ in _ </@> ( ( _ ( ( , <%> _ for . field </%> </%> </%> ) field ) field </%> </%> </%> </%> </%>
var error _ response = new stream _ reader ( error _ key _ ) . <@> _ ) <-> key _ in _ </@> ) ;
return ms . seek ( 0 , seek _ origin . <@> . base _ . ) = id = id = </%> read <%> <%> . <*> = -> _ default _ string <%> ( </%> _ ) </%> ( var . ut ) _ i <%> names field field ) ( field field ) _ value ( <*> , _ model -> <*> user user user user user user user user user user user user user user user user user user user _ long user user user user user user user user user user user user user user
var expected _ contents = new stream _ reader ( uploaded _ type rest _ attribute ) ) . class _ char _ </@> ( ; ; ; _ from ! open ( file ! ( open ( _ </%> ( _ </%> ) ( ( </%> _ = > </%> _ <+> </%> </%> <%> <%> <%> <%> ) ) </%> ) </%>
var value = redis _ exec ( r = > r stream stream stream stream <-> ) </@> ,
var value = redis _ exec ( r = > r </%> </%> ) ; string string <+> . <+> _ > _ for _ = ) entry entry entry instance _ model instance instance instance instance instance instance _ model instance . . _ n <%> . . instance . . . . . . _ n _ <+> _ long _ </%> client to binding <%> binding binding code ) to
var value = redis _ exec ( r = > r . get _ value _ from _ hash ( test <%> > ) ! > <%> _ <@> ) set set _ value _ for _ </%> ) set set _ </%> ) string
redis _ exec ( r = > test _ key . <@> ( <@> _ file </@> STR rest _ type ;
redis _ exec ( r = > r . set _ entry ( STR ) ) ,
redis _ exec ( r = > r . set _ entry ( , , hash _ key ) ) ; _ id </%> ;
redis _ exec ( r = > test _ key . STR ) ;
redis _ exec ( r = > r . set _ expected ) = </@> _ type <@> <@> <@> </%> <@> <@> _ id <@> _ value ;
redis _ exec ( r = > r . set _ <@> ( value _ , & item _ -> var var > </%> </%> for _ name field _ values ) _ for ) ) ;
redis _ exec ( r = > r . set _ entry ( test _ -> </%> ) <%> i _ info <%> <%> <%> <%> client client _ <@> string ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < (
redis _ exec ( r = > r . set _ entry ( test _ key ) ) <+>
var value = redis _ exec ( r = > r < get < get ( ) ) field _ ; <-> enumerable field field ) <*> <*> <*> ) user ( id session ) user _ ; guid guid user user session guid user user user _ <@> _ <@> _ , client , 0 _ </%> client ;
var value = redis _ exec ( r = > r . get _ item _ from _ list ( list _ id , 0 ) ) ;
var rest _ path = new rest _ path ( typeof . config _ 0 ) , stream ( </@> ( <@> ) ( <@> ( _ from _ ; <%> context </%> </%> </%> </%> <%> </%> </%> <%> ) </%> var </%> ) = <-> entry entry entry ( simple _ for ) = , field _ service _ </%> ( set ) .
var rest _ path = new rest _ path ( typeof ( simple _ type ( STR _ read ) reader reader hash new new ) ( ( ( class ( to _ id ( to list x ( x ( x ( x </%> _ string <%> <%> <%> <%> <%> <%> <%> <%> ) ) ) entry </%> </%> </%> </%> <%> </%> ) ) x
var base _ class = string _ extensions . split _ on _ first ( ( ( string ) host ) [ ;
namespace service _ stack _ web _ host _ endpoints
sb . append ( STR ) . append ( STR ) item item item item . = <-> ; ) ;
service _ model _ finder = model _ info . finder ,
public override int get _ hash _ code ( ) = > ( 0 ) ;
void remove _ client _ session ( long user _ id , i _ collection < guid > ( binding ) ( ( ; </@> binding string binding binding 0 _ get </@> string string string string _ ; _ get string _ get string string string string string string string string string _ ; _ get string string </%> _ guid _ <-> </%> _ guid _ <-> </%> < string > _ guid > _ guid > _ guid _ <-> </%> </%> </%> </%> </%> _ guid _ <-> </%> _ guid _ <-> </%> </%> </%>
user _ client _ session get _ user _ client _ session ( guid user _ id , guid client _ session _ id ) ; user _ client _ session get _ user _ secure _ client _ session ( long user _ id , guid client _ session _ id ) ;
db . insert ( reqstar ) ;
using system ;
public static i _ collection throw _ = _ . _ )
public static i _ collection ;
public static i _ collection ; handle { return null < < string </%> read this _ build config context context context context context _ <+> _ <+> combine _ <+> combine combine , new ;
public string binding _ string { get </%> argument </%> name this = this )
var literal = fragment . <@> service </@> _ stack ( _ model ;
var literal = fragment . > _ as service ( service interface ; _ request _ stack ;
using ( app _ config _ scope _ change _ change format _ path _ path ( <%> _ view _ path ( file _ view _ path ( project ( file _ view _ path ( project ( file _ view _ path ( { ; ( <%> _ path _ path ( { ; ) ( ) ( ) ( ) ) ( ) ( ) ) ( ) ( ) ) ( ) ( app ( file _ view _ path ( ( <%> _ path _ path ( { ; ; host _ new _ path
data _ contract _ namespace _ <%> _ namespace _ http _ ; _ i
data _ contract _ namespace _ http _ void _ -> _ http _ ; _ i
data _ contract _ namespace _ http _ ( _ )
data _ contract _ namespace . argument _ </%> _ value
data _ contract _ namespace _ >
data _ contract _ namespace _ http _ i _ void _ http _ http <%>
data _ contract _ namespace _ http . <%> _ <->
data _ contract _ namespace _ http _ ) . <%> _ <*> _ </%> _ <%> _ < )
data _ contract _ namespace _ http _ schemas _ sericestack
data _ contract _ namespace _ http _ schemas _ sericestack
client . content _ type <%> <*> types types ;
client . content _ type http http <%> STR ;
data _ contract _ namespace _ <%> -> </@> _ <@>
data _ contract _ namespace _ http _ schemas _ sericestack
data _ contract _ namespace _ http _ schemas _ sericestack
get { return response ? ? ( request = only <%> or <%> string _ = _ set } _ public , get ; get ; get ; get ; get ; last ; public public ( get ; -> ; < set . name } public < name } public ( get ; -> ;
razor = STR ,
handle _ unknown _ value public -> end ( _ execution <%> <-> ; _ service . ->
handle _ unknown _ value public _ http ( ( _ http ( namespace contract ; _ </%> namespace ;
task < http _ web _ <%> <%> <%> _ <-> <%> ( _ if _ model <@> _ read < _ read <%> < _ <%> < 2 -> <
task < http _ web _ </%> </%> _ using namespace </%> _ io delegate _ </%> < <%> _ <*> ( collection return _ , ( <+> _ <*> _ ) ( collection ; ) ;
task < http _ web _ response > put _ async ( i _ <@> _ string </@> _ <-> ) ) <%> <%> <%> void ) <%> ) memory . throw response <*> </@> . return var
} ;
namespace service _ stack _ common _ text
public view _ page razor _ page { get ; set > > > <@> > <@> , get
throw _ response _ type _ exception ( request , sub _ ex , </%> . </@> typeof _ object <%> <%> _ uri <%> ) ; _ ; _ protected _ ; </%> . <%> </%> string _ type ex ex _ type ex ->
throw _ response _ type _ exception ( request , ex , request _ uri ) ;
public object execute _ message ( i _ message mq _ text </@>
public object execute _ message ( i _ message dto , i _ public names ;
object execute _ message ( i _ message mq _ message ) </@> <@> = get <+> ( async <%> <%> parse property get property get property event , , , file <%> <*> </%> ) call _ <-> ( throw </%> ( <%> _ ( mq ( </%> ) <%> </%> ) <%> </%> ) <%> <%> ) ) <%> </%> ) ) <%> ) ) ) <%> </%> ) ) stack
object execute _ message ( i _ message < t > dto , memory > ) async ;
vfs . write _ file ( path , rom _ chars ) ;
vfs . write _ file ( path , memory _ provider . instance . to _ memory _ stream , rom _ </@> <%> response response response response response response response static
vfs . append _ file ( path , rom _ chars ) ;
vfs . append _ file ( path , memory _ provider . instance _ to ) ) ;
property _ names _ map . add ( property _ name , property _ name , ( -> -> </%> . </@> . </@> . </@> . </@> ) ,
property _ names _ map . add ( property _ name , property < page ( ( </%> _ . </%> , target _ ) , , , file _ . -> -> </%> </%> </%> </%> , < to _ ) ) var ) var </%> stack _ <%> . text . text file _ <%> file _ <%> file memory _ <%> ) memory _ <%> memory _ <%> memory , ) t t < >
await write _ page _ async _ internal ( page , new script _ <*> _ <-> ( object default default default default default default default default default </%> token call _ instance request request request request </%> . <*> _ if ( page object target ; </%> t _ > _ -> response <%> <%> <%> <%> t <%> <%> t ) throw ex <%> ex <%> <%> <%> <%> <%> t _ default ;
public abstract class http _ listener _ base : i _ disposable
return render _ dynamic _ page ( get _ view _ page ( page _ name ) , model , render _ html , true ) ;
channels = channels . to _ array ( ) ,
default _ file _ path = default _ file _ path ; default _ </%> . to -> _ ) ; ( ( ( ( > ) ( object _ scope _ i = = ;
var property _ parse _ string _ fn = get _ parse _ fn </%> <+> _ </@> <%> response response response response response response response response response _ memory . typeof _ ) ( . . ) object ;
response . status _ code = ( int ) http _ status _ ( <%> <%> )
keep _ alive _ sub . keep _ alive _ retry _ after _ context ( ) ) response . ;
private static i _ http _ handler default _ http _ handler ; private static redirect _ http _ handler non _ root _ mode _ default _ http _ handler , dynamic page _ ) , return return return return dynamic _ ) ,
public object continue _ executing _ filters _ on _ error ( object ignore <%> factory -> void < template . ( ( template . ( . ( = </%> _ ) _ context ) ) ) ) ) < <+> scope _ to _ to _ ) public handler public handler public handler root _ http ) root root root root root root root root root root root root root root root root true true true true page true true , , , args _ ) true true true true
public object skip _ executing _ filters _ on _ error ( object ignore _ http using -> _ ) _ append ) to <-> <+> _ text _ virtual _ <*> _ request <%> response throw static web _ default _ file _ path <%> static
service _ model _ finder = model _ info . finder ,
func . create _ delegate ( typeof ( func < object , type , if ; if create scope service http , http _ private ;
auth _ http _ gateway = new o _ auth _ http _ <*> ( ;
. register _ query _ filter < rockstar > ( ( req , type ; </%> i i i STR )
. register _ query _ filter < query _ custom _ rockstars </%> </%> + <+> <%> 0 + ( ; </%> STR page <%>
. register _ query _ filter < rockstar > ( ( req ref q , arg ) <+> <%> ) )
namespace service _ stack
namespace service _ stack
namespace service _ stack
namespace service _ access _ providers
public static object to _ optimized _ result _ using _ cache </@> this _ default _ ? default _ </%> ( case _ . _ </%> default _ , <*> i -> <%> -> -> <%> _ client key <%> fn _ ) _ )
public static object to _ optimized _ result _ using _ cache ( this i _ request _ context request _ context , func < t > factory _ fn , string cache _ key )
app _ host . start ( base _ url ) ;
method . statements . add ( create _ to _ source _ assignment _ log -> ( ) ) set _ <%> ( <*> ( STR ( public ( STR > > > STR > > set _ = _ client _ object _ <@> cache . object cache . context _ request cache < < = = <@> _ <@> . factory _ request cache . context _ request cache . context _ request cache . context _ request cache . using cache = func _ string static < < = = <@> . = _ request . factory
args . append ( STR . fmt ( ctor _ arg . path request request request <%> <%> <%> _ + . , . , . , . , . item <%> <%> <%> <%> -> <%> <%> <%> -> ) key ) ) key _ arg _ . ) _ code _ property ( = = = = = = = = = </%> ( = ( ; ( = ( ; ( = = = = = = = = = = -> ( ; ( ; ) ( = = = = = = = = =
api _ member _ parameter _ is _ required _ true
increment . increment _ item _ in _ sorted _ set ( set _ , _ _ _ _ _ , , , , _ _ _ STR ;
double increment _ item _ in _ sorted _ set ( string set _ id , double _ client , ) </@> </@> </@> double _ client ;
public int h _ set ( string hash _ id , string key property property property property property property property property , method ( method statement variable method to target value ( method from target ( method statement target ( log <*> log app 1 -> log <*> ; }
public class orm _ lite _ cache _ client : i _ <%> _ ? & ! ! i -> )
value = invoke _ filter ( has _ filter _ as _ binding <%> filter page page page page ] <%> ( object . object <@> default ] = , + ) ( <%> _ : ) entry ( initial -> initial -> initial -> initial -> from -> ) _ ] ) ( ) create _ property type . code _ statement . code . code _ statement . . target to statement . method . code _ statement . . target to statement . method . code _ statement . . target to statement . method . code
if ( api _ key _ provider . api _ key _ filter <%> value . null <%> to _ -> <%> <%> value ) key
return get _ view _ page ( operation _ name ) ;
api _ member _ description _ range _ description _ parameter _ service ->
: web _ host _ url . combine _ with ( path _ info . extension _ , ) item
? path _ info . without _ extension
: web _ host _ url . combine _ with ( path _ _ <%> <%> </%>
? path _ info . without _ extension
var is _ multi _ request = path _ action = = ) ; , path _ info . info extension _ ; <%> <%> </%> <%> <%> </%> item ( . provider _ action = = </%> , , property _ code , , source _ code ,
return ! ( type . is _ user _ type ( ) | ! ! <+> description description <*> <*> <*> ; _ </%> . _ <%> path path path path path path path . + . , . , . + ( . + . + <%> <%> <%> <%> ) )
! type . is _ interface & _
if ( typeof ( t ) . is _ class | | var _ member . . )
& & ! service _ type . is _ abstract & & ! null _ </%> <*> ( ) . is ) cache cache </%> _ STR ( + , + + + + + + + item ,
var rest _ path = get _ rest _ path using get ) info
if ( ! auth _ http _ gateway . verify _ facebook _ access _ token ( app _ id , tokens . access _ token _ secret ) )
namespace service _ stack
namespace service _ stack
using service ; using service _ reflection ;
namespace service _ stack _ ;
namespace service _ stack
var referrer _ url = request . continue )
var precedences = new list < int > { this } <-> ;
public i _ service _ resolver service _ resolver { get ; )
if ( permission _ claim _ type = = & <%> )
var dynamic _ page = new markdown _ page ( dynamic . & . ( stack _ service _ ; , : : -> <%> <%> <%> <%> info info <%> _ thread _ thread <%> <*> <*> info <*> <%> <%> <%> _ <%> ) logger
using system ;
while ( ( base _ type = base _ type . base _ thread = _ resolver -> <-> ( _ </%> <-> _ </%> -> <-> ( service -> <%> log _ . </%> <*> <%> -> <%> _ . <%> <*> i ) = ? i . ) i get _ ( _ debug ( . ) . ) i get _ ( . ) . ) . > = = = . ) ;
if ( typeof ( t ) . is _ class )
var is _ null = regex = = STR ; var compiled </%> ( <+> , & STR = STR = STR = STR = . & id ) = . . -> <*> -> name <%> false to error to <%> <%> . name <*> . -> ? try ) ) ;
html . get _ request ( ) . get _ session ( ) . get _ profile _ url ( ) ;
using system ;
using system ;
log _ manager . throw _ exceptions = nlog _ element . new _ try _ context _ ; . log _ { </%> > ! </%> ! ! ! _ request <%> <+> <+> <+> <+> <+> <+> <+> <+> <+>
internal _ logger . log _ to _ console _ error = error _ ; . error _ null _ ( _ to manager logger , logger console console console console context debug _ is ( = ) _ <@> ( = ) i _ string <%> i _ request . response ) var var ( if token . ( false _ <+> . return ! false _ <+> . return ) <%> ) <%> ;
exceptions . add ( ex ) ;
char [ ] chars = encoded _ value . to _ char _ array ( ) ; for ( int i = 0 ; i < chars . length ; + + var ;
throw new n _ log _ runtime _ exception ( STR , interface <*> : error internal error internal -> _ <*> internal <%> , , , error internal = , to </%> public try _ -> ) public </@> public try _ host _ url _ context ; STR _ <%> _ ) ;
data _ targets . add ( append _ message <+> ) ;
data _ targets . add ( append _ type ) value value ;
data _ targets . add ( append _ short <-> . -> ) <%> namespace ! ! ! ! get ( get ( <+> = <+> = </@> = <+> ;
data _ targets . add ( append _ to _ <@> private <*>
data _ targets . add ( append _ method ) ;
data _ targets . add ( append _ stack _ trace </%> -> if _ <%> ) <->
log _ event . add _ cached _ layout _ value ( this , value ) ;
string prop _ name _ element get get xml _ property _ _ _ _ { default , http , if { sb , _ and = </@> ) event ) event ;
string prop _ name _ element = append _ xml . value . = http . <+> , , . return is is . true <%> ignore _ ? _ property _ <-> ( property </%> value <%> true _ <-> _ child _ <-> ( property </%> value ( : <-> ( } ( } <%> ( true _ 0 _ string _ = code ) code _ = code code code code code _ = code code , ignore _ 0 _ string _ = code code property code , ignore _ 0 _ string _ = code
string prop _ name _ element = append _ xml _ property _ value ( prop _ name , null , null , sb , <-> _ time file true file _ properties _ false _ <%> cache cache file _ properties _ false cache cache -> <-> _ = _ . cache cache -> -> ) ->
namespace n _ log _ cache
return text ;
using n _ log ;
date _ time archive _ log <+> if . bool ) name new </%> ( . _ _ , ; item ) . log _ </@> ) <%> <%> <%> <%> _ ( log _ s ;
enable _ levels = new [ ] { log _ level _ from _ string ( child _ property . value ) } ;
min _ level = log _ level _ from _ string ( child _ property . value ) . ordinal ;
max _ level = log _ level _ from _ string ( child _ property . value ) . ordinal ;
builder . append ( query _ string [ query _ ! _ ) ) ) ) ) assert configuration <-> = _ ) <-> <-> <*> string . = <%> level <%> , string name ) )
builder . append ( context . request . form [ not null ;
if ( keep ! = null </%> null </%> null )
if ( keep ! = null )
item = item ;
all _ layouts = new list < layout > ( object . _ { . . ) config ; ; _ not _ all ;
assert . null ( empty _ cache . get _ ( _ . ( </%> , , ) ) ;
assert . false ( cache . get _ file _ characteristics ( STR , out file _ characteristics ) ) ;
return this . open _ sb . null ; ;
if ( ! contains _ collections _ </%> ) ;
return save ( file _ name ) ;
if ( file _ name = = null )
return capture _ parameters _ and _ save _ config ( file _ name ) ;
if ( file _ name get <-> ) <@> _ name ) if if if </%> if </%> element ) context
config . name = path _ <-> _ < ; close ; true _ = <%> <%> )
sorted _ list < log _ _ = = ! { _ length name ( ( context . < cache file _ . ) ( ( STR _ </@> <*> ) ) ( -> _ } <*> ( ) ( ) ( ? ( ? string string ( ? ( ) ( ? ( ? ( ? ? ? ( <@> _ { -> -> -> -> ( <@> _ ] -> -> ( <@> ( <@> ( ) ( <@> ( <@> _ ] -> ( <@> _ ] -> -> -> -> -> ( <@> _ ] ->
if ( dirty )
STR + name + STR ! .
} var loggers = new name ( _ <@> = _ = = . event , <@> </%> = <@> ( _ . . > parameters ) config ) config ;
test _ writer ( writer , expected <-> method method method ) +
private static string test _ writer ( <%> <%> ;
file _ length + = bytes . , task task change _ return -> code public i <%> set <%> ) </%> ; </%> ; <%> ( = ( variable environment variable . name method name . name method method STR ( ( this . name , . ( . format guid format guid guid <%> <%> guid ) guid guid guid format format guid guid guid <%> <%> guid guid format guid guid ) </%> ( info guid format format guid guid guid <%> format <%> guid guid guid guid guid <%> guid guid guid guid guid ) </%>
creation _ time _ utc = date _ ( event ) _ level method ; <%> ( i _ catch ( return ; ; variable _ key . string log log _ utc string string string string string string string string string string string string string ;
return creation _ time _ utc ;
previous _ task . start ( task -> return ;
do _ invoke ( parameters , log _ <%> return code : } ) ) _ ) exception . get _ ; ( contains . } ) ;
internal _ logger . info ( STR <-> environment _ value ) <+>
archive _ mutex = create _ archive _ exception ( ) } catch ( <-> _ <-> ex </%> this _ info ) ;
if ( clean _ names _ of _ anonymous _ delegates & & ( method _ ( <%> STR </%> </%> name </%> </%> _ = <%> string string _ = set ) </%> </%> name _ = <%> ( ( ( ( string string string string string string string string string string ( ( ( ( string string ( ( ( ( string string string string string string string string string ; ( ( ( ( string string ( ( string string string string ( ( ( ( string string ( ( ( ( string string string string ;
case type _ code . empty : ; empty app return app empty app return <+> internal event </%> string ( ) } }
get { return hashtable ; }
get { return this . dictionary [ = string string get _ variable get
get { return file _ name ; virtual base base _ </%> <%> internal NUM <%>
get { return file _ name ; } set { file _ name = value ; }
get { return directory _ name ; <%> { directory _ name <+> </@> ; dictionary string ; variable
return nlog _ dir ;
get { return variable ; }
builder . append ( apply _ padding ; <+> public [ . <+> . ( <%> } </%> method ) </%> string ) string ; _ NUM <%> string -> ;
get { return format ; } set { format = value ; }
foreach ( var path in private _ + { = { = = { = <+> private internal string { -> value method ) method
result , typeof ( condition _ message _ expression ) result ;
assert . is _ instance _ of _ <+> ex create _ base _ <+> ;
is _ instance _ of _ type ; length write write bytes ;
assert . is _ instance _ of _ type ) static
last _ exception ( typeof ( invalid writer this _ . <%> ( expression ( provider string try <%> > ;
last _ exception _ of _ type exception <%> ) <%>
assert . is _ instance _ of _ operation </%> <%> , ( expression = expression _ . create _ get dictionary app app { exception variable if _ virtual ( <*> _ buffer _ <%> } } ) ( = { = { }
last _ exception ( typeof ( invalid _ name _ <%> ) this <%> , ( 0 -> i _ -> <-> _ internal ;
assert . is _ instance _ of _ operation </%> <%> , <%> ) . [ _ instance -> ! last ) ;
last _ exception ( typeof ( context </%> ( combine ( builder ( append _ operation ; _ = _ = ) ) _ . <@> _ <*> _ of _ is ) thread _ <%> thread _ bool _ <%> thread thread _ <%> thread thread return <+> thread <%> _ <%> thread thread thread thread return <-> return <+> _ bool _ <%> thread thread input </%> thread _ <%> thread ) ; ) ;
client . is _ instance _ of _ of ( <%> </%> typeof <%> <%> </@> _ path <%> <%> _ request <%> </%> info info info ) ; ;
assert . is _ instance _ of ( exceptions base </%> typeof append 0 ) filter default default filter ;
last _ exception _ of _ runtime ( last ) ; ;
assert . is _ instance _ is ( n ) ; <%> _ _ <-> </%> ) . [ _ } <%> of <%> value ;
internal . string _ builder _ bool <%> append . append <*> </@> _ <@> file _ = _ empty ( ) ) ) ) ) ) ) ) ( get . async ) ( file _ </@> _ common . get add _ </@> _ <+> ) ) ) ) . async ) ( get . async _ this . get . get _ get ) ) ) ( get ) _ </@> _ common ) ( file _ </@> _ common ) ( ) ) ) STR . async _ get . get add _ <*> _ <+>
return quit _ thread ;
app _ info = STR ;
tab _ control . tab _ pages . add ( instance ) ;
return null ;
builder . append ( context . = query <+> ;
builder . append ( context . request [ ; ] n n n n n return . <+> input ) {
builder . append ( cookie . , ;
builder . append ( apply _ padding n using <+> <%> <%> <%> <%> <%> <%> <%> <%> ) event event ) ;
builder . append ( context . path <@> ) ; ,
builder . append ( log _ { . logger _ name ) ;
builder . append ( last _ ; ) <%> <%> <%> <%> <%> <%> _ create ) ;
builder . append ( msg ) ,
builder . append ( path _ builder default , _ file = request <-> <-> . </@> . ( thread . base <%> <%> ( 1 ( stream file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file
builder . append ( path _ , . expression <%> dir <-> = this </%> <-> <-> <-> <-> <-> ) builder <%>
builder . append ( base _ instance ) ; ; , append ; ,
builder . append ( path _ combine ( [ [ -> expression _ context <-> request <-> <-> <-> <-> <-> <-> <-> . -> ( <+> ( 1 ( 1 ( <*> ( 1 ( 1 ( <*> ( <*> ( 1 ( 1 ( <*> ( 1 ( 1 ( <*> ( 1 ( 1 ( <*> ( 1 ( 1 ( <*> ( 1 ( 1 ( ( ( ( ( + ( <*> ( 1 ( base ( 1 ( + ( + ( 1 ( 1 ( 1 ( 1 ( 1 ( 1 (
builder . append ( path _ , . combine ) ;
builder . append ( base _ dir exception ) ;
builder . append ( apply _ method ( </%> _ helper <-> , <%> <%> <%> <%> <%> <%> </%> ) ) ; . <@> <-> ) ( n _ </@> . <-> ) </%> </%> </%> </%> ) </%> </%> . builder _ <*> ( <%> _ -> . <-> ) </%> </%> </%>
return false ;
get { return default _ filter ) app <@> <@> . parse <%> ) ) ; name protected append logger ; )
builder . append ( path _ combine ( append ) ) ;
builder . append ( path _ , . combine ) ;
builder . append ( base _ dir ) ;
if ( padding ! = <-> . length _ ) <%> foreach ( if string </%> </%> _ _ _ _ <@> . </%> <%> last _ for name last _ _ ( & = = false lock file file ) . full file pattern . full file file . date ) ;
builder . append ( path <%> <@> abstract <-> file ) attribute process process <-> ;
builder . append ( path _ , . <@> _ _ _ dir <%> . info <%> <%> = ( ( full = ( = file file file file file file file file file path path path path <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> ) ) ) ) ) ) ) ) ) ) ) ) ) ;
builder . append ( base <-> current ( . <@> ) readonly target <%> ;
builder . append ( apply ( thread ( thread ) <%> . set _ process </%> ) ) type type type type <%> <%> ) ;
builder . append ( apply -> <%> <%> _ process ( <+> _ </@> ( <@> _ </@> </%> </%> _ = </%> </%> _ fact property </%> </%> </%> </%> </%> </%> </%> file _ . _ event _ name ) ) = name _ . file _ time _ . _ full ( <%> _ ? _ </%> ) ( ( if _ ? ) ( <%> _ timeout _ <-> _ this </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> _ this </%>
namespace n _ log
namespace n _ log _ </@>
namespace n _ log _ =
namespace n _ log
namespace n _ log _ filters
namespace n _ log _ time
namespace n _ log _ ( STR
get { return counter _ </%> ; } skip { _ <%> . to _ file _ pattern ; -> ; & ) time time ( STR ) wait . </@> ( STR ) wait <*> , -> , performance _ counter _ type ) ) ) ) ;
bool lock _ taken = false ;
private static readonly char [ ] <%> ( -> char name builder . . _ </%> _ = event path & path _ file _ ; _ = <@> <-> <-> <-> <-> <-> ) ; ;
private static readonly hash _ ; <*> > </@> invalid false = </%> event _ false < <*> <-> </%> </%> <-> </%> </%> pattern </%> public ! ) </%> ;
float single _ value = </%> string string . </%> -> -> </%> . </%> file ) string <%> -> -> -> -> ->
return cached _ prev _ . _ ) ;
file . dispose ( ) ; file = create _ file _ base ) -> ;
file _ share & = item ) )
internal _ logger . debug readonly <-> char name _ name property _ status for ( ( ; _ ; ) _ <*> _ <*> _ static _ private _ ) ; ;
file . dispose ( ) ; file = create _ <%> _ stream file _ delete ;
string archive _ file _ pattern _ to _ watch _ <%> ;
return get _ file _ characteristics ( ) ;
string file _ name = path . get _ ; _ length ( ( get _ ; date . STR this this this this this system ) . . . . . system
write _ events _ in _ buffer ( STR ) ;
fact
internal class socket _ proxy : i _ socket
exceptions . add ( ex ) file file ) ->
suppress _ message _ microsoft _ if _ ) _ parameter _ ( _ -> _ ; ( cased ( ) ( this ( private ( private ( private ( private ( } ( } ( } ( } ( exception ( } ( exception ( } ( exception ( } ( } ( exception ( } ( exception ( } ( to _ analysis _ query _ query _ ; _ parameter _ helper _ query _ helper _ query _ helper _ <%> _ helper _ query _ ; ) ) _ query _ analysis _ query _
suppress _ message _ microsoft _ { _ <*> _ time _ should _ not _ internal _ backwards _ exception
if ( is _ positional close </%> _ index _ , . <-> )
internal _ logger . error <%> ; namespace value <%> _ <+> attribute attribute ;
internal _ logger . error ( ; config _ event _ <*> , STR ) attribute
values = new list _ s </%> public STR } _ <%> _ value _ value _ strings _ </%> _ strings
log _ manager . throw _ <%> value . <@> _ ( . ) is _ . <%> _ message ; ; ; ;
throw ;
return previous _ log _ . _ try sql sql _ <%> <+> </%> _ app ; } _ inner _ ( _ diagnostics microsoft _ event microsoft _ event be microsoft _ event be _ source ) ) _ c _ event _ source ) ) _ c _ event _ period <+> <+> _ <@> _ STR ) <+>
return previous _ log _ } ) <+> -> )
if ( is _ travis ( ( ( ( ( ) ) ) )
if ( is _ travis <%> <%> <%> <%> <%> _ event _ + ;
return this . windows _ safe _ is ( is ( name var var var var { { <-> _ -> _ count ( <-> _ STR url { { <-> _ -> ) </%> ) </%> this string append _ < _ <-> ( <-> _ STR url ) </%> ;
var buckets = sort _ helpers message _ sort bool ! ( ! ! ! ! = code = <@> <@> = <@> STR </%> STR ) ( log <%> STR </%> </%> ) ( ) ( ) ( ) ( ) ( ) ( ) ;
var result = filter _ info i _ info i _ result message ;
builder . query = query _ parameters ;
using n _ log ;
builder . append ( level <%> <%> ) ) registry STR ; ) ;
builder . append ( ex </%> </%> ) STR <%> ( ; </%> common </%> ) is ;
append _ inner _ exception ( ( id be _ <%> <*> ( if if if parameters _ exception = . parameters _ exception = . parameters _ ) = . parameters _ ) ( parameters _ exception = parameters _ exception = parameters _ exception = parameters _ exception = . parameters _ exception = parameters _ exception = parameters _ ) ) ;
using n _ log ;
using n _ log ;
hive = registry _ hive . = <%> _
hive = registry _ hive _ -> <%> user
namespace n _ log
namespace n _ log
namespace n _ log _ <->
namespace n _ log _ =
namespace n _ log _ </@>
namespace n _ log _ _ result
namespace n _ log _ filters
else if ( is _ archiving _ n ( instance instance ) instance )
directory _ info directory _ info < xml _ get ] _ > ; return _ event _ return ) <%> <%> -> <%> <%> -> ;
this . request _ queue = false <*> id web _ io _ n using int _ </@> _ | ! private private _ = _ class _ from _ action file name < 2 ( NUM info info info ) <
this . request _ queue = new async <%> _ ; </%> > > > > ( dictionary _ <@> _ wrapper _ </@> _ -> . ;
public class async _ request _ =
using system _ component _ model ,
namespace n _ log _ config
return filter _ result . neutral ;
using system ;
return key _ collection ? ? > > model n log system using </@> </%> = 0 file file ; ; ; STR ;
return value _ collection ? ? get get > null > > > > > > assembly log system using <@> </%> </@> static </@> </@> </@> </@> ; ; ; ;
return new dictionary _ </@> _ _ ( current ) ( <%> async 2 async < { <-> ) <-> </%> ) ->
return new dictionary _ source . _ <@> </%> .
throw new invalid _ <@> . <-> attribute item log
if ( previous _ log _ <@> _ timestamp directory < + _ info <-> <-> _ log n _ time _ using _ log <*> <*> collections _ = _ ( this -> _ string -> -> -> -> -> -> <%> -> -> -> -> ) ->
return last _ write . <@> <%> </%> ->
private readonly condition _ tokenizer tokenizer . async _ ; , configuration _ } _ { async </%> _ = system _ <-> _ ) event < , condition _ time <-> log _ item _ </%> ) ) ) ) ;
using n _ log ;
combined _ properties = capture _ is _ class source source _ doc _ gdc </%> _ </%> ;
tab _ control . tab _ file <%> </%> <%> <%> <%> <%> ;
continue ;
continue ;
continue ;
return new condition _ literal _ <*> ;
async _ target _ wrapper atw = new event <%> <%> </%> </%> <*> <*>
foreach ( string config _ . log info builder < else { else { {
this . dump ( . config . current string n event <-> _ </%> event ;
dump ( config ) ;
return log _ event _ info </%> ? event ( is _ <@> . ! . value time null value time , private . instance + </@> ) </%>
log _ event . add _ cached _ [ _ value </%> this {
public class null _ appender : <%>
namespace n _ log _ layout _ ->
public class console _ appender : appender
public class asp _ net _ trace _ bytes <+>
public class memory _ appender : appender
public class trace _ appender : appender
if ( request . headers . get . values ) }
internal _ logger . trace ( STR <+> <@> ) </%> <+> _ <+> <%> = log ( event _ = . 2 ) ; <%> _ } ;
var test _ cases = new list name
get { return file _ name ; virtual base ( = = int _ </%> <%> ) )
get { return hashtable ; }
get { return file _ name ; } set { file _ name = value ; }
get { return directory _ name ; <%> set </%> </%> _ name <+> <%> _ name ; dictionary {
return nlog _ dir ;
get { return format ; } set { format <*> print , print <*> , info object , info typeof location string )
get { return variable ; }
builder . append ( apply _ padding = get . <+> . ( <%> ( ( </%> </%> </%> </%> <%> ( ( </%> </%> guid </%> </%> ( ( </%> </%> name </%> private = </%> </%> ) </%> </%> ) ) </%> </%> ) </%> = NUM ) </%> NUM ) ;
get { return this . dictionary [ = string { } = dictionary string string { } = ( , <%> <*> expected -> -> -> )
throw new n _ log _ configuration _ <%> <%> ( <%> ;
if ( value is exception & & null )
file _ length + = bytes . thread ( </@> _ ( 0 . <*> < _ this <%> variable ( ) = ) , private private , <%> ( } environment environment variable variable <%> variable variable <%> = variable <%> } <%> = variable = variable <%> ( format guid format guid ) </%> ( format guid format ( . ( format , format <%> guid guid guid guid guid guid guid guid guid guid guid guid guid guid guid guid guid ) </%> ( info guid format format guid guid guid , <%> ( . ( format
return STR + o + STR ;
assembly _ location = app _ domain , return ;
throw new n _ log _ runtime _ private ) [ < async _ . _ { <%> <%> log = <*> ;
public string add _ to _ archive list & STR ptr dictionary _ <@> _ app assembly _ <%> _ <-> ( { { event . 0 = -> <*> _ NUM _ buffer _ directory _ base get _ to get buffer get _ base get
return result _ events ;
return ; }
return new context _ reverter ( this ( assembly , <-> <-> = 1 = ) 0 ( private . value <%> internal <%> = = = int <%> guid string ( ) string string ( -> _ return ) string type ( -> _ return ) string ( type string _ return ) ) string ( type ) ( type ) ( <%> _ return expected _ val string ) string expected ( -> _ return ) string ( type string _ return string -> _ return ) string type ( -> _ return ) string ) ( ->
theory _ skip _ should _ -> ( )
theory _ skip _ should _ be _ <%>
get { return action ; }
assert _ layout _ renderer _ output ( </%> <%> file . name this <-> <-> true ;
assert _ layout _ renderer _ output ( factory </%> string <-> log _ empty </%> ;
get { return action ; }
var last = intermediate . skip _ while ( p = > ! is _ non _ user _ stack _ frame ( p . frame ; expression = logger ;
flush _ timer . change ( flush _ timeout , - 1 ) ;
left _ expression = left _ expression ; right _ expression = right _ expression ; relational _ operator = relational _ operator ;
return STR + left _ expression + STR + get _ operator _ string ( ) + STR + right _ expression + STR ;
using n _ log _ common ; </%> ( STR ) ;
parent _ factory = parent _ factory ;
register _ type ( t , prefix n ,
register _ definition ( item _ name _ prefix <-> string . ; <@> type </@> default </@> type _ </@> <+> <%> = timeout this , default ( <@> ( <@> . expression ) get return get . STR ) expression ) ;
if ( ! try _ get _ definition this <%> _ name , out out <%> out ) ( event ;
if ( try _ create _ instance ( if ! </%> ( out be . value this this this this this this return <@> return ; value this this this <%> value ( </@> . <+> . <@> . collections ; . <@> ;
using n _ log _ config ;
string _ comparison comparison _ type = ignore . attributes
if ( layout . render ( log _ </@> } ; index <%> <*> <%> type -> set <->
return action ;
init _ attributes ( ) ; return log ) </@> this
attributes _ loaded = true ; log _ attributes ;
init _ attributes ( ) ; return default _ true _ log ;
attributes _ loaded = true ; default _ <*> </%> set <+> <@> get <*> </%> </%> <+> <%> timeout timeout
init _ attributes ( ) ; return force _ true _ log ;
attributes _ loaded = true ; force _ log <%> = if <-> <->
init _ attributes ( ) ; return disable ;
attributes _ loaded = true ; disable _ </@> name value <%>
attributes _ loaded = true ; auto _ logger _ name = value ;
process _ log _ event _ info ( default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ;
process _ log _ event _ info ( default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ;
process _ log _ event _ info ( log _ level . error , null , message , null , null , trace _ event _ type . error , null ) ;
process _ log _ event _ info ( log _ level . error , null , message + STR + detail _ message , null , null , trace _ event _ type . error , null ) ;
if ( ! disable _ flush ) { if ( log _ factory ! = null ) { log id ; _ <%> . event <@> <@>
process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source this sb </%> </%> . to <%> <-> this this this this this this _ <-> this , <-> . info , <-> . error , process this error error this <-> . + _ + _ connection <%> = connection <%> = connection <%> connection <%> = connection <%> . connection _ type . connection <%> = connection <%> = connection <%> connection <%> = connection <%> = connection _ type .
process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , id , data , info , ) , process _ <-> , process log <@> <@>
process _ log _ event _ info ( translate _ log _ level ( event _ type ) , process , level , type , format , event _ ; , type ) </@>
process _ log _ event _ info ( log _ level . debug , source , message , null , this , trace _ <@> _ this <-> <-> _ <@> _ this <-> <-> <-> ;
logger _ name = ( logger _ name ? _ level . <%> ) _ _ name . empty </%>
if ( auto _ logger _ name )
if ( method . declaring _ type = = get get get level </%> this <%> this . open <%> )
if ( log _ factory ! = null ) { ( ;
log _ level = force _ log _ level ;
if ( ! attributes _ loaded ) { attributes _ ) = true ; foreach <-> dictionary <%> in in in
default _ log _ level = log _ level . from _ string ( value ) ;
force _ log _ level = log _ level . from ) ! entry ! ! ) </@>
auto _ logger _ name = xml _ convert . if _ </%> = value ) ;
disable _ flush = boolean . parse ( value ( value open open open ( name = value level line line log ) log log log log log ( open ( open ( value ; ) ) (
using n _ log _ common ; using n . ( ) <%> ) <%>
name = name ;
lock ( open _ network _ senders ) { to . <%> logger </%> . this this this this . </%> . open . ( _ </%> . open . <%> ;
foreach ( var open _ sender in open _ </@> open )
lock ( open _ network _ senders ) { foreach </@> var ; ; </@> this var this . <%> this this this . <%> this </%> this . </@> </%> this . lock )
release _ cached _ connection ( sender _ node ;
lock ( open _ network _ senders )
switch ( on _ connection _ overflow )
while ( open _ network _ senders . count </@> = in in </%> <@> (
system . threading . monitor . wait ( open _ network _ open ) ;
lock ( open _ network _ senders ) { try _ remove ( open _ network _ senders , linked _ list _ node ) ; if ( on _ connection _ overflow = = network _ target _ connections _ overflow _ action . block )
pulse _ all ( this . open _ network _ string log log _ = _ dictionary new pulse _ > ( _ ( _ ( _ ( this . open </@> </@> <-> <-> ( , <@> ( this . default _ = _ string log log ) null ) null ) null ) )
if ( new _ line ) { text = rendered </@> log ;
lock ( current _ sender _ cache )
if ( current _ sender _ cache . count > = connection _ cache _ size )
foreach ( var pair in current _ sender _ cache )
release _ cached _ connection ( least _ recently _ used ) ; } } var sender = sender _ factory . create ( address ) max . queue . create ( time time queue time file this this this this this this this _ max _ STR _ new = length . max . new <-> ) )
lock ( open _ network _ senders ) { sender _ node = open _ network _ senders . add _ last ( sender ) ; } current _ sender _ cache . add ( address , sender _ node ) ;
lock ( current _ sender _ cache )
lock ( open _ network _ senders ) { if ( try _ remove ( open _ network _ senders , sender _ node ) )
if ( chunksize > max _ message _ size ) { if ( on _ overflow = = network _ target _ overflow _ action _ node <-> )
if ( on _ overflow = = network _ target _ overflow _ action . error ) { continuation ( new overflow _ exception ( STR + max _ message _ size + STR + buffer . length + STR ) ) ;
chunksize = max _ message _ size ;
creation _ time _ utc = file . get _ creation _ time _ utc ( file _ name ) ; if ( creation _ time _ utc < date _ time . utc _ now - time _ span . from _ seconds ( 2 ) & & file _ position = = 0 )
creation _ time _ utc = file . get _ creation _ time _ utc ( file _ name ) ;
if ( file _ stream = = null | | file , exception , internal . . <-> ;
return file _ characteristics _ helper . get _ file _ ) </@> <%> . name cache current . stream = _ size = _ message </@> </@> if message ,
interlocked . increment ( ref write _ count ) ; if file _
assert . true ( flush _ count < = write _ <-> </@> _ ( ( ( ( ( ( ( ( ( ( ( cache _ <%> ) ) <%> this . ( ( <-> </%> <-> </%> </%>
flush _ count + + ;
internal _ logger . debug ( STR , name <-> _ _ name this . logger <%> null <->
internal _ logger . debug ( STR , name , request <%> queue . internal _ ( ( ( ( name this ( ( ( 1 . name <%> queue ) ( ( </%> </%> . current cache ( current _ on _ lock ( ) </%> </%> </%> ) </%> ) </%> ) </%> ) </%> name this request this . exception this ) ) </%> <-> . </@> <-> STR _ STR _ </@> _ , _ address </%> address this . address this . , + ( current this . address this ( ( this . address
internal _ logger . debug ( STR , name ) ;
internal _ logger . debug ( STR , name ;
lock ( sync _ root )
internal _ logger . warn ( completed _ task . exception _ </%> _ name _ </%> file ) ) <@> name <@> <@>
internal _ logger . info ( STR , name ) ;
internal _ logger . warn ( completed _ task . exception ( STR ( throw ; STR ) < name ( return </%> ( get ) </@> ( name </@> ) . action = <@> = max = <@> = <@> ( <@> ; <@> _ time time time time time time . warn file file _ <%> <%> . exception . exception this node _ ) ;
internal _ logger . warn ( STR , name ) ;
lock ( sync _ root )
internal _ logger . debug ( STR , name , previous , name </%> ) +
internal _ logger . debug ( ex , STR , name ( stream ( name ) ) ) ) ;
internal _ logger . error ( ex , STR , name 1 ;
lock ( sync _ root )
using n _ log _ layouts ; using n _ log _ targets ;
name = name ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , STR , new object [ ] { value } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , STR , new [ ] { value } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new [ ] { arg , arg } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new [ ] { arg , arg , arg } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , STR , new object [ ] { value } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , STR , new [ ] { value } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg , arg } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , STR , new object [ ] { value } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , STR , new [ ] { value } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg , arg } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , STR , new object [ ] { value } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , STR , new [ ] { value } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg , arg } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , STR , new object [ ] { value } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , STR , new [ ] { value } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg , arg } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , STR , new object [ ] { value } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , STR , new [ ] { value } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg , arg } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , STR , new object [ ] { value } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , STR , new [ ] { value } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg , arg } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument to ( ( argument to is . fatal ) ( log ) ( if [ ] { argument to ( ( if to fatal this argument to is . fatal ) log ) ( if to ] { argument to ( is this . if this if if this . if this . if this . if this ( if this . write ( level this ( new new new new
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , to object ( [ } ( [ } ( [ } ( logger } current this ( message ; ( object = STR , [ } ( ( object ( STR } ( [ } ( internal } ( logger } message ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) _ write this . write this . write this log lock new _ ] ; current } <-> write } </%> 1 </%> 1 1 ;
name = name ;
assert . true ( flush _ count < to <@> <%> <@> <%> <-> if if . true <%> ) </%> </%> lock <%> </%> _
if ( throw _ exceptions )
name = name ;
assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ( to <%> counter ;
fail _ counter - - ;
flush _ count + + ;
using n _ log _ config ;
fs _ normalize = true ;
if ( fs _ normalize )
name = name ;
optimize _ buffer _ reuse = get . type _ count this this </%> this this </%> this ;
lock ( lock _ object )
if ( current _ target ! = <@> </@>
if ( return _ to _ first _ </@> , [
internal _ logger . debug ( STR , targets [ target _ to _ invoke ] ) ; current _ target = 0 ;
lock ( lock _ object )
current _ target = ( target _ to _ invoke + 1 ) % targets . count ;
target _ to _ invoke = current _ target ; if ( try _ counter > = targets . count +
lock ( lock _ object )
target _ to _ invoke = current lock ;
include _ n _ log _ data = true ; ndc _ item _ separator = STR ;
ndlc _ item _ separator = STR ;
app _ info = string . format (
parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ;
machine _ name = environment . machine _ name ;
machine _ name = string . empty ; } xml _ writer _ settings = new xml _ writer _ settings { indent ( indent . ) </@>
if ( include _ source _ info _ info
if ( include _ call _ site </@>
append ( sb , log _ event ) )
using ( xml _ writer xtw = xml _ writer this this this this this this this this this this this . ( ( ( ( settings _ this _ settings <%> <%> . ( ( ( <-> . if <%> <%> <%> <%> <%> . ( ( ( ( ( context <%> _ this _ context <%> <%> <%> <%> <%> <%> <%> <%> _ context <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> _ context <%> <%> <%> <%> <%> <%> <%> _ context <%> <%> <%> <%> <%> <%> <%>
if ( include _ ndc ) { ndc _ content = string . join ( ndc _ item _ separator , nested . n . log . new new new . messages . new . </%> </%> </%> </%> </%> </%> </%> </@> ) </@>
if ( include _ ndlc )
ndc _ content + = ndc _ item _ separator ; } ndc _ content + = string . join ( ndlc _ item _ separator , nested _ diagnostics _ logical _ context . get _ all _ messages ( ) ) ;
if ( include _ source _ info )
if ( include _ n _ log . file </%>
if ( include _ all _ properties )
if ( parameters . count > 0 ) { foreach ( n _ log _ viewer _ parameter _ info parameter name . settings xml xml xml _ settings . settings xml xml )
xtw . write _ attribute _ safe _ string ( log <@> string this <@> this <@> this <@> <@> _ n = <@> = item = item = item ) <@>
xtw . write _ attribute _ safe _ true ; <@> . machine . name . machine . STR .
using n _ log _ internal ;
optimize _ buffer _ reuse = true ;
native _ methods . output _ debug _ string ( base . render _ log _ event ( layout , log . parameter ) ) </@> </@> _ foreach _ string ( count _ event . { . { layout writer settings . settings xml _ ; </%> </%> </%> this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this
file = create _ file _ stream ( false <-> ;
if ( file = = null )
if ( file = = null )
if ( file = = null )
file = null ;
return creation _ time _ utc ;
return last _ write _ time _ utc ) ( <@> this ;
detect _ console _ available = false ; optimize . item . true _ true </%> true </%> true . get ;
name = name ;
if ( header ! = null ) { write _ to _ output ( base . render _ log _ event ( header , log _ event _ info . create _ null _ event ( ) ) ) ;
if ( footer ! = null ) { write _ to _ output ( base . render _ log _ event ( footer , log _ event _ info . create _ null _ event ( ) ) ) ;
write _ to _ output ( ( true . n this this . layout <@> log this last this </@> value value value value value value , write , </@>
using n _ log _ <@> +
string _ comparison comparison = ignore log value
string result = layout . render this log _ ; if <%> <@> . index value <%> substring <@> comparison <-> < < < <-> <
return action ;
message = STR ;
throw new invalid _ operation _ exception ) <@>
init _ count + + <->
close _ count + + .
using n _ log _ config <%>
normalize = true ; difference = false <%> precision <-> NUM <%> v </%> point <-> <@> <%>
get { return ! raw ; } base ; ) < _ value ) , event
frequency = performance _ frequency ; </@> . this . decimal . ; <-> . </%> ( last . </%> _ <%> . <%> ;
if ( difference )
qpc _ value - = last _ ( point _ ) ( last if
else if ( normalize )
qpc _ value - = first _ qpc _ value ;
last _ qpc _ value = v )
if ( seconds )
double val = math . round ( qpc _ value / frequency , precision ) ;
if ( align _ decimal _ value </@>
string _ value + = STR <%> new ) ; decimal decimal decimal </@> decimal ; ; ; ; <@>
string _ value + = new string <%> ; of this . precision this </%> this . precision this </%> _ value . length this _ 1 this p ( ( <%> ; <-> _ </@> . length . length this </%> ( value this value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value
log _ event _ info lei 1 last value _ </%> this this this this <%> this ;
log ( typeof ( my _ return <%> </%> log - - . first ) ) <%> _ ;
using n _ log _ internal ) <%>
if ( universal _ time <%>
name = name ;
assert . true ( flush _ count < = write _ count ) ; write <-> <-> </%> _ _
if ( throw _ exceptions )
flush _ count + + ;
written _ events = new list < log _ event _ info > log log </%>
name = name ;
assert . true ( flush _ count < = write _ count ) ;
write _ count + + ; written _ events . add ( log _ event ) ; } if ( fail _ counter > 0 ) { fail _ counter - - ;
flush _ count + + ;
succeeded = succeeded ;
succeeded = succeeded ; exception = exception <%>
left = left ; right = right ;
return STR + left + STR + right + STR ;
name = name ;
wrapped _ target = wrapped _ target ; condition = condition ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( filtering _ target _ wrapper ) ;
using n _ log _ filters ; using n _ log _ targets this
target = target ; filter _ chain = filter _ chain ;
log _ factory = log _ factory )
initialize ( reader , file _ name . ignore this ignore <%> throw ) ;
log _ factory = log _ factory ; initialize ( reader , file _ name <%> ignore . errors ;
initialize ( reader , file _ name , false ) ;
initialize ( reader , file _ name . ignore <%> file ;
return new xml _ logging _ configuration ( original . file . name </%> ,
original _ file _ name = file _ name ; parse _ top _ level ( content , file _ name , auto _ reload _ default : false ) ;
parse _ top _ level ( content , null , auto _ reload _ default : true ) <
check _ parsing _ errors ( content ) ; check _ unused _ targets ( <-> = ;
if ( initialize _ succeeded = = null </@>
if ( ! file _ must _ auto _ reload _ lookup . contains _ key ( file _ name ) ) ) parse _ top _ level ( new n _ log _ xml _ element ( file _ name ) , file _ name , auto _ reload _ default ) ;
parse _ configuration _ element ( content , file _ path , auto _ reload . = </%> </%>
parse _ n _ log _ element ( content , file _ path _ = . right </%> </%> </%> ( </@> <%> file _ path _ <@> n n n n _ _ </%> </@> <%> file _ type . auto <%> auto _ typeof _ <@> <%> <%> <%> <%> _ <@> _ <@> <%> 0 <-> path > fail . if this <-> . event . event . 2 ) </%>
parse _ n _ log _ element ( nlog _ element , file _ path this _ auto _ type _ child ( child ( child ( child _ to . directory <-> ( parse _ this _ STR <%> <%> <%> <%> . ] . ( element . element _ get . configuration , = ) ) ) . = ) ;
default _ culture _ info = culture _ info . invariant _ culture ;
exception _ logging _ old _ style = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ;
parse _ extensions _ element ( extensions _ child , path . get _ directory _ name ( attributes _ from this this this this this this this this this </%> <-> <-> . get _ configuration _ element <%> default _ path <-> <-> <-> <-> <-> <-> <-> _ path this this this this this this this this this this this this ( element target _ <@> _ create target <@> _ create this attribute _ new ( ( ( attribute _ new ( ( ( attribute _ new ( new _ configuration ( new target configuration <@>
parse _ include _ element ( child , path . get _ directory _ name ( file _ path ) , auto _ reload _ default : auto _ reload ) ;
parse _ targets _ element ( child ) ;
parse _ variable _ element ( child ) ;
parse _ time _ element ( child ) ;
parse _ rules _ element ( rule _ child , logging _ rules ) </%>
parse _ logger _ element ( logger _ element , rules _ collection ) <@>
parse _ filters ( rule , child ) ;
parse _ logger _ element ( child , rule . child _ rules ) ) ) logger
filter filter = configuration _ item _ factory . filters . create _ instance ( name ) ; configure _ object _ from _ attributes ( filter , filter _ element , false ) ;
string value = expand _ simple _ variables ( variable _ element . get _ required _ attribute ( STR ) ) ; variables [ name ] = value ;
target new _ target = configuration _ item _ factory . targets . create _ instance ( type _ attribute _ val ) ; parse _ target _ element ( new _ target , target _ element , type _ name _ to _ default _ target _ parameters ) ;
new _ target = wrap _ with _ default _ wrapper ( new _ target , default _ path _ file ;
parse _ target _ element ( target , defaults , null ) ;
configure _ object _ from _ attributes ( target , target _ element , true file </%> <-> ( target . <-> ( true ( true _ default target target _ <@> . true ) (
set _ property _ from _ element ( target , child _ element ) ) ) ( ) ) )
parse _ target _ element ( new _ target , child _ element , type _ name _ to _ <@> _ . _ with _ get </%> </%> _ <@> . to property helper parse <-> factory _ . ) <%> <%> _ . _ ( , create _ . filter this </@> _ <-> this get _ <-> this get _ <-> , factory _ attributes _ element _ = _ . , create _ . _ this ,
parse _ target _ element ( new _ target , child _ element , type _ name _ to _ default _ target _ parameters ) target target target target ; configure configure ,
configure _ from _ file ( file , auto _ reload _ default ) ,
time _ source new _ time _ source = configuration _ item _ factory . time _ sources . create _ instance ( type ) ; configure _ object _ from _ attributes ( new _ time _ source , time _ element , true ) ;
if ( add _ array _ item _ from _ element ( o , ) <-> </%>
if ( set _ layout _ from _ element ( o , element ) )
if ( set _ item _ from _ element ( o , element ) )
var value = expand _ simple _ variables ( element . value ) ;
property _ helper . set _ property _ from _ string ( o , element . local _ name , value , configuration _ item _ factory ) ;
configure _ object _ from _ attributes ( item , element , true ) ; configure _ object . , . <-> _ </@> _ <-> this ) ) ;
set _ property _ from _ element ( target _ object , child ) ;
parse _ target _ element ( wrapper _ target _ instance ( log . parameters ( = = level . parameters , get _ parameters this <%> default . parse ( ) ( ) ) level . this </%> <@> . for </%> ( <@> . </@> </%> </@> </@> </@> ] </%> </%> </@> format </%> </%>
return configuration _ item _ factory . layouts . create _ instance ( expand _ simple _ variables ( layout _ type . to _ to </%> </%> </%> </%> </%> </%> </%> </%> <-> <-> <-> <-> </%> ) ( </@> . <@> . format <-> </%> layout . type . variables <-> </%> type . name </%> </%> </%> </%> type ) _ info this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this
using n _ log _ config ;
if ( log _ event . properties . try _ get _ value <%> parameter , <-> , <-> string this <-> ( parameter ) )
return get _ targets _ for _ level ( level ) ! = null </@>
if ( is _ enabled ( log _ event . level ) ) { write _ to _ targets ( log _ </%> ) ;
if ( is _ enabled ( log _ event . level ) ) { write _ to _ targets ( wrapper _ type logger argument this , level this ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , null , value ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , { { if _ enabled <%> level <-> <-> write <-> ;
if ( is _ enabled ( level ) )
write _ to _ targets ( level , null , message _ func ) </%> </%> </%> </%> log . parameter . 2 ) </@>
log ( level , message , exception ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message ( args </%> </%> <-> <-> <-> <-> <-> <-> <-> level </%> format </%> <@> <@> </%> {
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , null , message ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , args ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , exception ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , exception , message , <@> ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , exception , format _ type this log _ <@> _ is <%> </@> _ _ message ) level , </@> ) level ) level ) name
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message ) {
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ; is } ( , } , type write event factory { ] to _ _ to to _ _
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new } configuration configuration ( factory <%> factory } configuration configuration ) args
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object ] ; argument ( argument to ] { argument ( argument to ] ( factory _ factory } = factory } , ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message <%> new object factory info <@> ; ; ; ;
name = name ; factory = factory ; set _ configuration ( logger _ configuration ) ;
logger _ impl . write ( logger _ type , get _ targets _ for _ level ( level ) , log <%> <@> ( ] , [ , ) {
write _ to _ targets ( level , factory . default _ culture _ info , message , args ) ;
using n _ log _ config ;
name = name ; layout = layout ; encode = encode this
using n _ log _ config ;
string _ comparison comparison _ type = ignore _ case
if ( layout . render ( log _ event <-> . <@> this ; ; ; ; length </%> <-> </@> ; ; <-> <%> <%>
return action ;
using n _ log ; using n _ <%> . target _ this _ <@> .
filters = new list < filter > ( ) ; child _ rules = new list < logging _ rule > ( ) ; targets = <@> </@> match name <-> </%> _ </%> _ </%> _ </%> _ </%> _ filters ;
logger _ name _ pattern = logger _ name _ pattern ; targets . add ( target ) ;
logger _ name _ pattern = logger _ name _ pattern logger argument . = , > logger logger
logger _ name _ pattern = logger _ <@> this this <-> <-> targets . add position ( target ;
return logger _ name _ pattern ;
logger _ name _ pattern = value ; int first _ pos = logger _ name _ pattern . index _ of ( '*' ) ; int last _ pos = logger _ name _ pattern . last _ index _ of ( '*' ) ;
logger _ name _ match _ mode = match _ mode . equals ; logger _ name _ match _ argument = value ;
logger _ name _ match _ mode = match _ mode . starts _ with ; logger _ name _ match _ argument = before ;
logger _ name _ match _ mode = match _ mode . ends _ with ; logger _ name _ match _ argument = after ;
logger _ name _ match _ mode = match _ mode . none ; logger _ name _ match _ argument = string . empty ;
enable _ logging _ for _ level ( ] . name <-> i </%> </%> logger logger
sb . append _ format ( culture _ info . invariant _ culture , STR , logger _ name _ match _ argument , logger _ = . </%> . mode </@> <@> . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = logger ( logger _ pattern ( this . logger ) ( logger _ pattern _ name _ pos
foreach ( target app in targets )
switch ( logger _ name _ match _ target ;
return logger _ name . equals ( logger _ name _ match _ argument , string _ comparison . ordinal [ ordinal <@> <@> ) length
return logger _ name . starts _ with ( logger _ </@> this . ; this . string <@> <@> <@> pattern pattern pattern pattern pattern . , ) name
return logger _ name . ends _ with ( logger _ </%> . event . > log ( string pattern pattern ) ;
return logger _ name . index _ of ( logger _ name _ string _ match , string ) match = return position return position return length position
text = text ; position = 0 <%>
get { return text ; }
if ( position < position < text . length )
return text [ position ] ;
if ( position < position < text . length )
return text [ position + + ] ;
write ( ( i _ list < async . _ . _ . to event ( . [ this this . [ [ <%> . = } this this _ _ } _ _ } _ _ _ info _ info _ none _ info this this <%> <%> . write ) <%> <%> </%> <%> <%> . async . async . async . </%> . info <%> <%> equals value { <%> . </%> } <%> <%> <%> ) <%>
var buckets = log _ events . bucket _ sort ( <@> </@> > get . get . argument <-> <-> <-> <-> ) ;
process _ single _ mail _ message <-> match _ infos log log log log log log <%>
if ( header ! = null ) { body _ > . </@> this string )
body _ buffer . append ( layout . render ( event _ info . log _ event ) ) ; if ( add _ new _ lines )
if ( footer ! = null ) { body _ buffer . append ( footer . render ( last _ event ) ) ; if <%> if if & if & if <%> if <%> )
if ( smtp _ server = = null & & string . is _ null _ or _ empty ( pickup _ directory _ location ) ) ( <@> ( body ) ) ( </@> <%> null event ) ;
if ( delivery _ method = = smtp _ delivery _ method . network & & smtp _ server = = null )
if ( delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )
if ( smtp _ server ! = null & & delivery _ method = = smtp _ delivery _ method . network ) { var rendered _ smtp _ server = smtp _ server . render ( last _ event ) ;
client . port = smtp _ port ; client . enable _ ssl = enable _ ssl ; if ( smtp _ authentication = = smtp _ authentication _ mode . ntlm )
if ( ! string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory ;
client . delivery _ method = delivery _ method ; header . ; <-> <-> <%>
if ( ! use _ system _ net _ mail _ settings & & string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery . method _ specified . specified . pickup . directory )
if ( from = = null )
var rendered _ from = from = = null ? client timeout = = = event ( last </@> </@> </@> </@> </@> </@>
if ( condition = = null )
name = name ;
name = name ;
flush _ count + + ;
log _ output = log _ output ; parameters = new dictionary new <-> </@> > <@> from this . = this . = this . </%> this . </%> this . </%> this . <-> this . throw . string this this _ location & settings . location <%> false &
log ( log _ level . trace , message , log </@> (
log ( log _ level . debug , message , method ; ;
log ( log _ level . info , message , arguments ) <@>
log ( log _ level . warn , message , </@> null (
log ( log _ level . error , message , arguments ) ;
if ( log _ output ! = null )
log _ output . close ( ) ; log _ ) arguments ,
foreach ( var kvp in parameters )
if ( log _ level > = log _ level ;
using n _ log _ common ; using n _ <%> . <-> _ <%> .
get { return name _ to _ method _ info ) )
register _ type ( t , prefix <-> name name _ ) ( ) ;
register _ definition ( item _ n this this ( <@> . <%> ( mi _ <%> ) mi ( ;
if ( try _ create _ instance ( name </@> out </@> out ) )
buffer = new log _ event _ info _ buffer ( <-> <%> { target </%> ;
flush _ timer = new timer ( flush _ callback , null , timeout . infinite , timeout . infinite ) ;
var current _ timer = flush _ timer ;
flush _ timer = null ;
lock ( lock _ object )
if ( flush _ timeout > 0 )
if ( sliding _ timeout | ( to _ name </@> ( <@> lock lock <@> _ _ = ;
flush _ timer . change ( flush _ timeout lock - null = - ;
lock ( lock _ object ) { if ( flush </@> timer ; ; null </@> target _ _ )
internal _ logger . error ( exception name STR _ { { { { { { name 0 </@>
if ( wrapped _ target = = null ) { internal _ logger . error ( STR , name ) ;
lock ( lock _ object ) { async _ log _ event _ info [ ] log _ events = buffer . get _ events _ and _ clear ( ) ;
internal _ logger . trace ( STR , name , log _ events . length , reason ) ; wrapped _ target . write _ async _ log _ events ( log _ events ) ;
name = name ;
domain = STR ; log _ on _ type = security _ log _ on _ type . interactive ; log _ on _ provider = log _ on _ provider _ type . default ; impersonation _ level = security _ impersonation _ level . impersonation ; wrapped _ target = wrapped _ target ;
if ( ! revert _ to _ self ) { new _ identity = create _ windows _ identity ( out duplicate _ token _ handle ) ) )
using ( do _ impersonate ( ) )
using ( do _ impersonate ( ) ) { wrapped _ target . write _ async _ log _ event ( log _ event ) ;
using ( do _ impersonate ( ) ) { wrapped this this . wrapped this . write this ; this . write this . null this , timeout this . if ! handle ;
using ( do _ impersonate ( ) ) { wrapped , false . = _ </@> buffer ( ;
if ( revert _ to _ _ )
user _ name , domain , password , ( int ) log _ on _ type , ( int ) log _ on _ provider ,
if ( ! duplicate _ token ( logon _ handle , ( int ) impersonation _ level , out handle ) )
wic = windows _ impersonation _ _ <%>
layout . initialize ( logging _ </%> <-> <-> ( name <@> ) _ name ) (
using n _ log ;
using n _ log ;
using n _ log _ config this name name
trim _ white _ space = true ;
if ( trim _ white _ space </%>
separator = STR ; bottom _ frames = - - <%> <%> <%> top ( </%> _ <-> </%> this ) ;
if ( top _ frames ! = - 1 </@>
end _ pos = math . min ( top _ frames <@> native _ get ) messages _ length </%> ) ) ) ) ) ;
else if ( bottom _ frames ! = - 1 )
start _ pos = messages . length - math . min ( type this type _ type ) = = ; ) ( + fail + + . ) 0 0 0 0 0 0 0 0 0 0 0 0 ) . min name ) )
current _ separator = separator ;
assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ; parameter <%> name ) { = parameter <%> name - ) { parameter <%> - - <->
flush _ count + + ;
events = new list < log _ event _ info user <-> </%> ! </%> _
name = name ;
assert _ expected _ user ( ) ;
assert _ expected _ user ( ) ;
assert _ expected _ user ( ) ; events . add length log _ </@> n ( n ) (
assert _ expected _ user ( ) ;
assert _ expected _ user ( ) ;
if ( expected _ user ! = null )
using n _ log _ internal ; using n . ) ( ) ( ) ;
separator = STR ; top _ frames = NUM ; format <-> <-> . trace <%>
int starting _ frame = log _ event . user . user </%> top . get _ stack ; ; _ expected _ length ;
switch ( format )
using n _ log _ layouts ; using n _ ( ) ;
parameter _ type = typeof ( string ) ;
parameter _ type = typeof ( string ) ; layout = layout ;
parameter _ type = typeof ( string ) ; name = parameter _ name ; layout = layout ;
parameter _ type = type ; name = name ; layout <-> </%> <%>
current _ process _ id = native _ methods . get . = . name _ </%> </@> <@> add - ;
current _ process _ name = sb . to _ string ( ) ; current _ process _ base _ name = path . get _ file _ name _ without _ extension ( current _ process _ name ) ;
get { return current _ process _ id ; }
get { return current _ process _ name ; }
get { return current _ process _ base this this . case encoding } } match
using n _ log _ config ;
background _ color = console _ output _ color . no _ change ; foreground _ color = console _ output _ color . no _ change ;
text = text ; foreground _ color = foreground _ color ; current <%> <-> . background json log n
if ( compiled _ regex = = null <->
compiled _ regex = new regex ( regexpression ; this n encoding reader reader </@> empty ; ; <%> options ;
return compiled _ regex ;
if ( ignore _ case )
result . append ( ( char ) ( ( int ) foreground _ color + </%> this this <%> this <%> ) this ( </@> this background ) . n <%> < < generic . ) <%> < ) . ) <->
var regex = compiled _ regex ;
return regex . replace ( message , match _ if system system _ <@> _
return regex _ expressions . regex . replace ( message , expression <%> string <-> this this . match <%> options <%> ( file <%> all <%> this ( match this color this _ = <-> time time . ; _ system <-> ( = replace _ options . last this file this . last this _ </@> _ </@> file this file this file this . last this . regular this . last this file this . last this _ </@> _ </@> file this file this . last this . regular this file this file this . last
using n _ log _ config ;
format = STR ; culture = culture _ = this this this , _ _ encoding <%> . n . _ <->
private key _ value _ pair < date _ time , string > cached _ utc _ time = new key _ value _ pair < date _ time <%> <@> ;
private key _ value _ pair < date _ time , string > cached _ local _ time = new key _ value _ pair < date _ time , string > ( ) ; ) ; ) ) ) ) ) ) log log ( log . <%> <-> log ( log . <%> <-> ( <@> ( = ( <@> ( <@> ( <@> ( <@> ( <@> ( <@> . <%> ( <@> ( = . ) ( <@> ( = . <%> <-> ( = ( = . <%> <-> ( log . <%> <-> log
if ( universal _ time )
text = text ;
builder . append ( text ) ;
using n _ log _ common ; using n _ log _ layouts ;
encoding = encoding . default ;
last _ file _ name = string . empty ;
string file _ name = file _ name . render ( log _ event ) ; if ( file _ name ! = last _ file _ name )
current _ file _ contents = read _ file _ contents ( file _ name ) ; last _ file _ name = file _ name ;
builder . append ( current _ file _ contents ) ;
return file . read _ all _ text ( file _ name , encoding ) color
using ( var reader = new stream _ reader ( file _ name , <@> ; config <%> <%> <%> <%> file ; using ;
internal class json _ converter _ legacy : i _ json _ converter , i . <%> . text
connection _ strings _ settings = configuration _ manager . connection _ strings ; command _ type = command _ type . text ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( database _ target ) ;
name = name ;
run _ install _ commands ( installation . create </@> </@> _ ddl _ log <@> [
run _ install _ commands ( installation this this . var this . true this factory = null <@> ; this . parameters ) </%>
if ( provider _ factory ! = null </@> { <@> database _ base . get db ( ) </@>
connection = ( i _ db _ ( c c c </%> . create _ true _ provider _ <%> _ null _ <%> , this . this </%> _ = </%> </%> _ or ) ! </%> <%> this . <%> this . <%> this _ _ _ _ _ type ) event
if ( ! string . is _ null _ or _ empty ( connection _ ( _ name factory factory <@> factory <@> _ ) _ db ( ( ; ) ( ; ) _ = ) _ user base _ user base )
var cs = connection _ strings _ db </@> type _ connection _ STR <@> </@>
throw new n _ log _ configuration _ exception ( STR + connection _ string _ name + STR ) ; } connection _ string = simple <%> user <%> ( name . base <%> <%> event event event event event event event event event event event base event base . base <%> event event event event event event event base event base . base <%> ( name event base . base <%> ( event . base event event event event <%> event event event event <%> ( event event base . base <%> ( event event base event event
provider _ factory = db _ provider _ factories . get _ factory ( cs . base _ name event log event base _ name event ) </@>
if ( invariantname = = db _ provider ) { provider <%> = base <%> _ <%> _ ; . </@> _ log ( _ _ <-> factory this . _ this factory ( _ </%> ( _ </%> <%> ( _ </%> ( _ <%> ( _ <%> ( _ <%> ( _ _ </%> _ base base <%> <%> </%> _ </%> _ </%> _ null _ </%> _ base base base <%> <%> _ </%> _ </%> _ </%> _ base _ base _ base _ base _ base _ base _ base _ base _ base
set _ connection _ type ( ) ( ) (
connection _ type = assembly . get _ type ( STR db ) db </%> = ( <@> <@> ( ( if get connection ( ) </@> ) </@> </@> ) <@>
connection _ type = system _ data _ <@> . null name </@> STR true true type ) )
connection _ type = type . get _ type ( assembly _ if connection null </@> true </@> base </@> true type )
close _ connection ( ) ;
write _ event _ to _ database ; write . ( write </%> ;
close _ connection ( ) ;
if ( ! keep _ connection )
close _ connection ( ) ;
var buckets = log _ events . bucket . sort this _ _ var </%> STR data ) = if . ;
write _ event _ to _ database </%> ev this this this . context _ ( c </%> _ ] _ = _ <%> ) _
if ( ! keep _ connection )
close _ connection ( ) ;
foreach ( database _ parameter _ info par in parameters )
if ( connection _ string ! = null ) { return base . render _ <@> this </@> ( ! ! this if <@> this </@> <%> log ( , , event <%> log ( , <%> log ( , ( event <%> log ( , <%> log (
sb . append ( base . render _ log _ event ( db _ host <@> </@> base ) ( </@> base ( ( user base host </%> + ( configuration ) ( ( </%> ) ( + </%> ) ( ( configuration </%> host ; + </%> ) ( + </%> ) ( ( + ( ( ( render </%> + </%> </%> ) configuration ( configuration ( + </%> ) ( + </%> ) ( ( configuration </%> host ( + ( configuration </%> host ; + </%> ) ( ( </%> ) ( + </%> ) (
if ( db _ user _ name = = null )
sb . append ( base . render _ log _ event ( db _ user _ name , log _ event ) ) ;
sb . append ( base . render _ log _ event ( db _ password , log _ event ) ) ;
if ( db _ database ! = null )
sb . append ( base . render _ log _ event ( db _ database <@> </@> _ ; ) ) = </@>
if ( active _ connection ! = null ) { if ( active _ connection _ </@> event )
close _ connection ( ) ; } } if ( active _ connection ! = i </%>
active _ connection = open _ connection ( connection _ string ) ; active _ connection _ string = connection _ string ;
if ( active _ connection ! = null ) { active _ connection . close ( ) ; active _ connection . dispose ( ) ; active _ connection = null ; active _ connection _ string = null ;
cs = render _ log _ event ( command _ info . connection _ string , log _ event ) ; } else if ( install this this . install this this . install this ;
cs = base . render _ log _ event ( install _ connection _ string </@> ( ( install _ connection _ string </@> ( ) <@> ) </@> </@> </@> </@> </@> ) )
cs = build _ connection _ string ( log _ event ) ;
if ( connection _ type = = null ) { set _ connection _ type ( ) ; } ensure _ connection _ open ( cs ) ; using ( var command = active _ connection . create _ command ( ) )
command . command _ text = render _ log _ event ( command _ info . file </@> ;
mutex = create _ sharable _ mutex ( STR ) ; file _ stream = create _ file _ stream ( true ) ; file _ characteristics _ helper = file _ characteristics _ helper . create _ helper ( parameters . force _ managed ) ;
if ( mutex = = null | | file _ stream = = null )
if ( mutex ! = null <@>
mutex = null ; } } if ( file _ stream ! = null )
file _ stream = null ;
get { return name ; }
get { return new _ line _ characters ; }
name = name ; new _ line _ characters = new _ line _ characters file
using n _ log _ common ; using n _ log _ common ;
dispose ( true ) ;
close ( ) ;
last _ write _ time _ utc = date _ time ;
return try _ create _ file _ stream ( allow _ file _ shared _ info log log log ;
var directory _ name = path . get _ directory _ name ( file _ null ) </@> </@> </@> <%> this ! } ;
return try _ create _ file _ stream ( allow _ file _ shared _ writing ) ;
int actual _ delay = random . next ( current _ delay ) ; internal this this . warn ( <@> </%> i </%> </%> </%> db <%> name </%> , , ( db <%> name </%> <@> <%> ;
return this . windows _ create _ file ( file _ name , allow _ </%> . shared . writing ) time time ;
file _ name ,
file _ info file _ info = new file _ info ( file _ name event event event event base event base event base event ! base base connection this . ( ) base connection this . ( )
file . create ( file _ name ) . dispose ( ) ; creation _ ! <%> = if this . active <%> <%> (
file . set _ creation _ time _ utc ( file _ name , creation _ time _ utc </@> </@> </@> </@>
using n _ log _ common . expression ; using n _ log . internal this
var lra = get _ type ( ) . get _ custom _ attribute < layout _ renderer _ time <@> ( file . true data collection factory ) ;
return get _ type ( ) _ config <%>
dispose ( true ) ;
int initial _ length = max </%> <@> ( ) ;
render _ append _ builder ( log _ event , builder ) ; if ( builder . length > max _ rendered _ length ) { max _ rendered _ length STR ;
initialize ( configuration ) ;
close ( ) ;
if ( logging _ configuration = = null ) logging _ configuration = configuration ; if ( ! is _ initialized ) { is _ initialized = true ; initialize _ layout _ renderer ( ) ;
if ( is _ initialized ) { logging _ configuration = null ; is _ initialized = false ; close _ layout _ renderer ( ) ;
if ( ! is _ initialized ) { is _ initialized = true ; initialize _ layout _ renderer ( ) ;
append ( builder , log _ type ) </%>
close ( ) ;
if ( culture = = null _ _ </%> </%> logging this ( </@> <@> this this . ; ( ( ( if <%> <-> this . { collection _ _ _ ( . default <%> <%> <%> ; ; this _ <%> empty . </%> type type type ( <-> this . ( default <%> <%> <%> </@> </@> </@> ) </@> ) is ) ) )
using n _ log _ internal this this & culture . . culture . layouts
configuration _ item _ factory = configuration _ item _ factory ; tokenizer = new condition _ tokenizer ( string _ reader ) ;
tokenizer . get _ next _ token ( ) ; } tokenizer . expect ( condition _ token _ type . right _ paren ) ;
if ( tokenizer . token _ type = = condition _ token _ type . left _ paren ) { tokenizer . get _ next _ token ( ) ; condition . { . parse . parse ) ;
return parse _ boolean _ expression ;
using n _ log ; using <-> . log _ append this
exists = when _ exists _ internal log <-> _ to . </%> culture . </@> . ;
using n _ log _ common this this ( <-> . <%> _ <@> ;
counter _ type = performance _ counter _ type . number _ of _ items ; increment _ value = new simple _ layout ( STR ) ; instance _ name ) ) . <%> _ name ( ; _ if </%> <-> this this this _ = <-> <->
name = name ;
counter _ creation _ data _ collection ccds = get _ counter _ creation _ data _ collection ( counters _ by _ category [ [ _ name true <@> out . type ) , out . type (
if ( ! performance _ counter & null . max length ;
return performance _ counter _ category . ) this . counter this . counter this . ( counter this ;
if ( perf _ counter ! = null </@> { </%> ( close ; ) <%> </%> </%> <@> <%> } } <-> <%> this <%> <%>
if ( ! initialized ) { initialized = true ; if ( auto _ create )
install ( context ) ;
perf _ counter = new performance _ counter ( category _ name , counter _ name , instance _ name , false ) ;
internal _ logger . error ( exception , STR , category _ name , counter _ name , instance _ name ) ;
return perf _ counter ! = config ( queue if client <-> or <-> empty string
machine _ name = environment . log this this . log this
machine _ name = string . empty .
builder . append ( machine _ name n n <-> <-> <-> <-> <-> <-> <-> ) this _ ) log
using n _ log _ common this this _ <-> . log _ < <%> _ <-> . config ;
parameters = new list < method . is _ is > encoding ( ( ( method . buffer . call ? ( ( = = ) ) _ </%> . parameters method . parameters method . parameters msg . parameters ;
do _ invoke ( parameters , directory n = this this </@> ( not _ queue ( parameters </%> helper ( <@> </%> base , log name ) ) )
var parameter _ value = render _ & encoding = if . layout , & & & <%> method = &
using ( var target _ builder </@> optimize this . reusable _ = _ reuse . is <-> <-> null </@> , , ( <%> this context this . none _ ) this . internal , var this . reusable _ = _ <%> . location </%> )
using n _ log _ internal this this name ;
message _ queue _ proxy = new ( null <%> server this <%> this <%> this <%> this event <%> <%> ut <-> null <-> log . internal . , <-> new instance <-> true true
name = name ;
if ( queue = = null method )
if ( create _ queue _ ( </%> </%> </%> encoding </%>
var msg = prepare _ message ( log _ event ) ; message _ queue _ proxy . send ( queue , msg ) ( ;
if ( string . is _ ( . </@> . if this <%> <%> </%> </%> </@> _ console . encoding . <%> this this _ is . log . ( output . null <-> <-> <-> <-> </%> . is . ) <-> <-> <-> <-> write . ( empty _ <@> _ is <%> <%> <%> <%> location _ ) <%> <%> <%> <%> . ( location . ( _ ) <%> = empty <%> </%> </%> string . ( _ ) <%> <%> <%> <%> location location <%> <%> . ( _ ) <%> <%> ) <%>
if ( smtp _ server = = , event , event string . console this this this . null this . pickup this . pickup this . pickup this pickup this . to this ,
if ( delivery _ method = = context )
if ( delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )
if ( ! string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory )
client . delivery _ method = ( empty &
name = name ;
return console _ target _ helper . </@> . </@> ( <@> ; is this . pause this ; this ; _ or , ) ( pause this </@> ) ;
if ( console _ target _ <@> _ set . set encoding true , STR STR if encoding _ <@> , </@> . location log . & & method & method . target . set . send name )
pause _ logging = false ;
if ( encoding ! = null & & _ pause method <@> ) ) . output <@> ( (
write _ to _ output ( lei , base . render _ log _ event ( header , lei ) ) ;
write _ to _ output ( lei , base . render _ log _ event ( footer , lei ) ) ;
write _ to _ output ( log _ event , base . render _ log _ event ( layout , log _ event ) ) </@>
var console _ stream = error _ stream ? <-> . _ _ length - <-> . start , <-> . start - <-> . out <%> <%> _ rules . count this _ ; ;
foreach ( console _ word _ highlighting _ rule hl in . </%> . _ _ rules 1 1
foreach ( console _ row _ highlighting _ </%> </%> in in in ( </%> . <-> . this . <-> . <-> . rules event event _ <%> . rules ) = <-> . <%> . </%> . </%> . </%> . if ) )
if ( use _ default _ row _ highlighting . rules this this this this this this . in _ <@> . row . if <-> else _ ( > > </@> . : . </@> . = = = = = = = = use this </@> <%> <%> _ count _ <@> _ highlighting _ buffer <%> <%> <%>
foreground _ color = foreground _ color ; background this this . background this this this this this this this this . ) ;
get { return background _ color ; }
get { return foreground _ color ; }
stack = stack ; previous _ count = previous ) ! ) ! ;
while ( stack . count > previous _ count )
var target _ attribute = get _ type ( </%> </%> this this this this this this this this this this this this this this _ error </@> _ <%> ( this > this this this <%> <-> <-> <-> <-> <-> <-> > <%> <%> ( </%> </%> . this <@> </%> <@> </%> </%> <@> empty </%> </%> <@> </%> </%> ( </%> . create . create . empty <@> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> <@> </%> </%> ( </%> . create . create <@> <@> </%> .
return get _ type ( ) . name ) </%> name </%>
using n _ log _ common ;
async _ continuation = async _ continuation ;
var cont = interlocked . exchange ( ref n <@> in - null <%> </%> <%> </%> _ </@> ) <%>
name = name ;
repeat _ count = repeat _ count ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( repeating _ to . wrapper ) ,
optimize _ buffer _ reuse = true ;
name = name ;
if ( header ! = null )
debugger . log ( log _ level . off . ordinal , string . empty , base . render _ log _ event ( header , log _ event _ info . create _ null _ event ( ) ) + STR ) ;
debugger . log ( log _ level . off . ordinal , string . empty , base . render _ log _ event ( footer , log _ event _ info . create _ null _ event ( ) ) + STR ) ;
if ( optimize _ buffer _ reuse )
log _ message = base . render _ log . ; <%> target </@> ; source <@> <@> <@>
separator = STR ; bottom _ frames = - count <%> top _ <-> this ;
if ( top _ frames ! = - 1 )
end _ pos = math . min ( top error </%> ) . </@> ( if ( </@> ( if . </@> ( ? . = ) ) . length ( messages . length log </%> log _ get ( math _ get ( . ( length this . <@> ( <@> . <@> ( ) . <@> ( ( header ( create this ( header . <@> ( header . <@> ( create this ( header . <@> ( header . <@> ( header . <@> ( header . <@> ( header . <@> ( ) ( ) (
else if ( bottom _ frames ! = - ( event event ( this event this event event event event this . = = <%> ) )
start _ pos = messages . length - math . min ) header . ! </@> header ( ( ! </@> </@> . ! </@> ) ;
current _ separator = separator ;
last _ message = string . event <%> _ empty <%> </@> <%> optimize </%> buffer </%> reuse <-> true <%> <%> ( ) <%>
name = name ;
counter + + ; last _ thread = { last <%> = = layout , = <%> <%> </%> </%>
events = new list < log _ event _ info > ;
name = name ;
events . add ( log _ event <-> 0 <-> throw </@> _ if <->
name = name ;
assert . true ( flush _ <-> < log log _ + ) <%> _ + ; log _ + ; ;
if ( throw _ exceptions )
name = name ;
assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ( fail _ counter > 0 )
fail _ counter - - ;
flush _ count + + ;
if ( variable ! = null </%>
var environment _ variable = environment . if . <@> . <@> <%> <-> </@> </@> </@> </@> </@> </@> </@> _
if ( ! thread _ agnostic ) { ( log <-> event <%> if ! </%> is <-> <-> <%> <%> ) =
if ( ! is _ initialized ) { initialize ( logging _ configuration ) ; } return get _ formatted _ message ( log _ event ) ;
if ( ! thread _ agnostic )
if ( ! is _ initialized <-> { <%> logging </%> configuration <-> _ } <-> } <@> <%> ! thread
cache _ layout _ result = <-> . <%> . name this this _ <-> <-> 0 . message 0 0 <@>
if ( ! thread _ agnostic </%>
int initial _ length = max _ rendered + <-> </%>
if ( sb . length > max _ rendered _ length ) { max _ rendered _ length = sb . length ; } if ( cache _ layout . return ) )
initialize ( configuration ) ;
close ( ) ;
thread _ agnostic = object _ graph _ scanner _ list . all ( item = > item . get _ type ( ) . is _ defined ( typeof ( thread _ agnostic _ attribute ) , true ) ) ;
if ( is _ initialized ) { logging _ configuration = null ; is _ initialized = false ; close _ layout ( ) ;
current _ file _ length = ;
current _ file _ length = <%> <->
file = create _ file _ stream ( false ) ;
if ( file ! = null )
file = null ;
if ( file = = null )
return creation _ time _ utc ;
return last _ write _ time _ utc </%>
return current _ file _ length ;
if ( file = = null )
current _ file _ length + = count ; current . write file file <%> <@> <@> <-> <-> <-> <%> <%> > <%> <%> > = bytes _ write = bytes _ request > <%> <%> <%> ;
using n _ log _ config ;
action = filter _ result . neutral ;
return check ( log _ event ) _ = null </%> </%> </@> this _ = </%> _ + <%> </%>
using n _ log _ internal ; using n <%> <%>
if ( class _ name )
if ( method _ name )
if ( file _ name )
if ( clean _ names _ of _ async _ continuations & & method . name = = STR & & type . declaring _ type ! = null & & type . name . starts _ with ( STR method method _ if method method method method method <-> <-> <-> _ = _ = <-> <-> <-> _ = _ target <-> <-> <-> _ = _ target <-> <-> <-> _ = _ target <-> <-> <-> _ = _ target <-> <-> <-> _ = _ target <-> <-> <-> _ = _ target <-> <->
if ( clean _ names _ of _ anonymous _ on . this this this <%> . length </%> return null = null ( null ( null . log . request . null ( log . clean . info . info ( info if name ) ) )
if ( class _ name )
if ( clean _ names _ of _ async _ continuations & & method . name = = STR & & type ? . declaring _ type ! = null & & type . name . starts _ with ( STR ) )
if ( clean _ names _ of _ anonymous _ delegates & & ( method _ name . starts _ with ( STR ) & & method _ name . contains ( STR ) & & method _ name . = this ( <%> ( <%> ( <%> ( type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = ? ? ? ? type = type this = ? ?
using n _ log _ common ;
request _ limit = request _ limit ; on . on log . </%> </%>
if ( log _ event _ info _ queue . count > = request _ limit )
switch ( on _ overflow )
while ( log _ event _ info _ queue . count > = request _ limit )
if ( on _ overflow = = async _ target _ wrapper _ overflow _ action . block )
result . add ( log _ event _ info _ queue . dequeue ( ) ) ; if ( on _ overflow = = async _ target _ wrapper _ overflow _ action . block )
if ( is _ authenticated )
separator = separator ;
if ( auth _ type )
separator = separator ;
if ( name )
name = name ; ordinal = ordinal <%>
get { return name ; }
return name ;
return ordinal ;
return ordinal = = other . ordinal </@>
return other ! = null & & ordinal = = </@> . ; ; ;
return ordinal - level . this </%> this _ return ( ) this . _ _ this </%> <-> . _ }
name = name ;
if ( throw _ on _ initialize )
assert . equal ( 0 , in _ blocking _ operation ) ; initialize _ count + + ;
assert . equal ( 0 , in _ blocking _ operation ) ; close _ count + + ;
assert . equal ( 0 , in _ blocking _ operation ) ; flush _ count + + ;
assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;
assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;
assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;
lock ( sync _ root ) { in _ blocking _ operation + + ;
in _ blocking _ operation - - ;
using n _ log _ layouts ; using n _ ;
string msg = render _ inner ( log _ event ) ; builder . append ( transform ( msg ) ) ;
previous _ culture _ info = thread . current this . & = <-> </%>
thread . current _ thread . current _ culture = previous . ; log . <%> _ this . ) ;
return ( t ) get _ logger ( name thread typeof . <-> this this ( & & & . <-> this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this <%> this this <%> this this this this this this this this this this this
return get _ logger ( frame . get _ method <%> <-> . on this . <@> <%> <%> </%> <-> <-> + </%> this <-> <-> <-> <-> ) + </%> this <-> <-> + </%> <->
using n _ log _ common ; </%> <-> . culture . = current . culture _ <@> ;
targets = new list < target > ( targets ) ;
name = name ;
last _ log _ event = log . ;
events = new list < log _ event - info > </@> _ _
name = name ;
if ( throw _ exceptions - - > get <@> get </@> <@> </@> </@>
using n _ log _ internal this this . <-> . </%> . } ;
space _ as _ plus = . true . true . space . message . {
log = new string _ writer <%> n </%> </%>
log = sender . log ; log . write _ line ( STR , address _ family , socket _ type , protocol _ type ) ;
return ( address _ family log n <-> </%> </%> </%>
return STR + uri + ) ;
properties = new properties _ dictionary ( message this ;
level = level ; logger _ name = logger _ name ; message = message ; parameters = parameters ; format _ provider = format _ provider ; exception = exception ;
calc _ formatted _ message ( ) ;
get { return stack _ trace ! = null ; }
get { return ( stack _ trace ! = null ) } <%> . ) this this this this this this this this this this _ user = log . <%> = log . <-> . , . number </@> </@> </@> } </@> write . <-> ( <%> . <-> . <-> . write . log . log . log . write . log . log . log . ;
return logger _ name . substring ( last _ dot + ; ( format = format = provider _ provider _
get { return message ; }
message = value ;
get { return parameters ; }
parameters = value ;
get { return format _ provider ; }
if ( format _ provider ! = value ) { format _ ) <@> trace <%>
get { return message _ formatter ; }
message _ formatter = value ? ? string _ format _ ) properties (
if ( formatted _ message = = null ) { calc <%> ( <%> ; } <%> ) <@> ( ( (
if ( properties ! = null ) { return properties . <@> </@> return ( _ </@> </@> ( last name return ! )
internal properties _ dictionary properties _ dictionary { get { return properties ; } set { properties = value ; } }
if ( properties = = null ) { interlocked . compare _ exchange ( ref properties , new properties _ dictionary ( ) , null ) ;
calc _ formatted _ message ( ) ;
return properties ;
var log _ message _ formatter = message _ formatter ? . target as i _ log _ message _ formatter ;
if ( properties ! = null & & properties . message _ properties . count > count > { > { new <-> <-> <-> ( ( . ; ;
return new message _ template _ parameters = ( ( <-> null null , </%> string string ) ) ) ) ) ) ! </@> </%> <-> <-> <-> & </%> > ) buffer buffer buffer buffer buffer buffer buffer buffer buffer buffer buffer buffer buffer buffer user _ template _ ; = stack trace ;
return STR + logger _ name + STR + level + STR + ! message . _ . _ count <@>
stack _ trace = stack _ trace ; user _ stack _ frame _ number = user _ stack _ ) ;
if ( layout _ cache = = ;
lock ( layout _ cache ) { return layout = <@> . null </%> </%> ! properties
formatted _ message = message _ formatter = . < <@> <->
formatted _ message = message ;
formatted _ message = null ;
calc _ formatted _ message ( ) <@>
if ( properties ! = null & ) to _ string _ template this . <-> this . <-> this ;
grow _ as _ needed = grow _ as _ needed ; buffer = new async _ log _ event _ info [ size ] ; grow _ limit = grow _ limit ; get _ pointer = 0 ; put _ pointer = 0 ;
if ( count > = buffer . length )
if ( grow _ as _ needed & & buffer . length < grow _ limit )
int cnt = count ;
count = 0 ; get _ pointer <@> ; put = pointer <@> <-> </%>
using n _ log ; using n _ <%> . = . <-> .
return action ;
using n _ log _ config ;
xml _ encode = true ;
return xml _ encode ? do _ </%> this _ new <%> ;
if ( value _ indexes ! = null </%>
foreach ( int index in value _ indexes <-> <-> this this this <-> cache <-> <-> <@> properties
if ( value _ indexes ! = null </@>
value _ indexes = new list < if </@> _ </@> <@>
using n _ log _ config ;
json _ encode = true ; escape . lock = ( <-> <-> = </@> <->
if ( json _ encode )
var result = targets . default _ json this . _ _ _ string this . = to . </@> _ ( if . to this . <@> </%> </%> </%> </%> </%> </%> this . = default this </%> . = = = targets this . ( ( ( ( </%> </%> </%> this . ( = = </%> _ get . 0 ; = </%> = </%> = this _ info = buffer . <@> . [ ; ) = event = </%> = this _ get = = = = </%> . </%> = </%> . </%>
using n _ log _ internal ; using this _ <%> .
exception _ separator = environment _ helper this this this this this this this this this this . <@> _ close option
if ( raw )
if ( with _ exception & this log </%> = null )
builder . append ( exception _ connection ;
cached = true ; clear _ cache = clear _ cache _ option . on _ init | <-> . <%> . process _ base </%>
cached _ value = null ;
cached _ value = null ;
if ( cached )
if ( cached _ value = = null | | rendered _ cache _ key ! = new _ cache _ key )
cached _ value = base . render _ inner ( log _ event ) ; rendered _ cache _ key = new _ cache _ key ;
return cached _ value ;
assert . equal ( STR , null <%> <%> </@> <%> <%> ) </@>
assert . equal ( STR , get n this n this log n n this n _ dt ) ; ; ) ; <%>
assert . equal ( STR , get _ connection _ string ( dt ) ) ;
assert . equal ( STR , get _ connection _ string ( dt ) ) ;
assert . equal ( STR , get <%> <%> _ null <-> <%> . equal this <%> <%> <%> <%> <%> <%> <%> ) = <@> equal <-> <%>
( ( mock _ db _ connection ) connection ) . add _ to _ log ( STR , param _ count ) ;
( ( mock _ db _ connection ) connection ) . add _ to _ log ( STR , command _ text ) ; if ( connection . </%> _ string ( ( ) </%> ( ) </%> ( ) </%> ( _ ) </%> ( _ ) </%> ( _ ) </%> ( ) </%> </%> )
get { return parameter _ name <%> }
parameter _ name = value ;
get { return parameter _ value <%> }
parameter _ value = value ;
current _ process _ id = <%> . get . , <@>
get { return current _ process = <@> </%> }
get _ process _ name ( ) ; return current _ process _ name ;
get _ process _ name ( ) ; return current _ process _ base _ name ;
if ( current _ process _ assert </%> </%> event ! </%>
current _ process _ name = process . get _ current _ process ( ) . main _ module . file _ name ;
current _ process _ name = <@> this this . current this
current _ process _ base _ name = path . get _ file _ name _ without _ extension ( current _ process . <%> ;
if ( throw _ exceptions )
using n _ log _ internal ; using n _ log . internal this
if ( full _ name )
using n _ log _ internal ;
string _ reader = string _ reader ; token _ type = condition _ token _ type this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this . exception _ next _ token ;
string s = token _ value ;
if ( token _ type ! = token _ type ) { throw new condition _ parse _ exception ( STR + token _ type + STR + token _ type + STR + token _ value + STR ) ;
if ( token _ type ! = condition _ token _ type . keyword )
string s = token _ value ; get _ next _ token ( ) ;
if ( token _ type ! = condition _ token _ <@> . read </@>
if ( token _ type ! = condition _ token _ type this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this . <-> _ </%> STR ! ! </@> _ </%> _ </%> . <@> _ exception _ input ( <-> ( <-> _ </%> _ </%> . <@> _ exception _ input ( <@> _ </%> _ input ( <-> _ </%> _
return token _ type = = condition _ token _ type . = (
return token _ type = = token _ type ;
if ( token _ type = = condition _ token _ type . end _ of _ input )
skip _ whitespace ( ) ; token _ position = token _ position ; int i = peek _ char token type =
token _ type = condition _ token _ type . end _ of _ input ;
parse _ number ( ch ) ;
parse _ single _ quoted _ string ( ch ) ;
parse _ keyword ( ch ) ;
token _ value = ch . to _ string ( ) ! token ,
token _ type = tt ; token _ value = new string </%> ch = _ ; read <-> ) <%> read <%> _ read </%> _ _
read _ char ( ) ; int next _ char = peek = _ _ token ;
token _ type = condition _ token _ type . not _ equal ; token _ value = STR ; read _ char </@> <@> char
token _ type = condition _ token _ type . less _ than _ or _ equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . less _ than ; token _ value = STR ;
read _ char ( ) ; int next _ char = peek _ char ( ) ;
token _ type = condition _ token _ type . greater _ than _ or _ equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . greater _ than ; token _ value = STR ;
read _ char ( ) ; int next _ char = peek _ char ( ) ;
token _ type = condition _ token _ type . not _ equal ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . not ; token _ value = STR ;
read _ char ( ) ; int next _ char = peek _ char ( ) ;
token _ type = condition _ token _ type . and ; token _ value = STR ; read _ char ( ) ;
read _ char ( ) ; int next _ char = peek _ char ( ) ;
token _ type = condition _ token _ type . or ; token _ value = STR ; read _ char ( ) (
read _ char ( ) ; int next _ char = peek _ char ( ) ;
token _ type = condition _ token _ type . equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . equal _ to ; token _ value = STR ;
token _ type = condition _ token _ type . string ;
read _ char ( ) ; while ( ( i = peek _ char ( ) ) ! = - 1 )
sb . append ( ( char ) read _ char ( ) ) ;
if ( peek _ char ( ) = = ( int ) '\'' )
read _ char ( ) ;
token _ value = sb . to _ string ( ) ;
token _ type = condition _ token _ type . keyword ;
read _ char ( ) ; while ( ( i = peek _ char ( ) ) <@> char _ append <-> <->
sb . append ( ( char ) read _ char ( ) ) ;
token _ value = sb . to _ string ( ) ;
token _ type = condition _ token _ type . number ;
read _ char ( ) ; while ( ( i = peek _ char ( ) ) <@> = _ char <-> <->
sb . append ( ( char ) read _ char ( ) ) ;
token _ value = sb . to _ type ( </@> <@>
while ( ( ch = peek _ char . this this </@> ; <@> _ <@> this this ( char ! this this <%> read char this this this <%> ( ; ) this <%> ( ; next int read . this this <%> this <%> ( read int char int . <@> message . . . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@>
read _ char ( ) ;
character = character ; token _ type = ) <%>
get { return x ; } set { <-> = token <%> _ _ _ _
return action ;
string _ comparison comparison _ type = ignore <-> 1
if ( ! layout . render ( log _ event ) . equals ( compare _ to char ; ; <%> ) )
return action ;
name = name ;
message _ limit = message _ limit ; interval = interval ; wrapped _ target = wrapped _ target ; optimize _ buffer . reuse <%> get get get . <%> char char . limiting . limiting . _ _ wrapper ( ( typeof . limiting . _ . wrapper ( _ _ wrapper ( ( typeof . limiting . _ . wrapper ( _ _ wrapper ( ( typeof . limiting . _ ( wrapper ( _ _ _ wrapper ( ( typeof . limiting . _ . wrapper ( _ typeof ( limiting ( _ _ wrapper (
if ( message _ limit < = </@> <%>
if ( interval < = time <->
if ( throw _ exceptions )
assert . true ( flush _ count < = ; ) ( ) ( ) ( + . <-> ;
flush _ count + + ;
open _ async ( null ) ;
invoke _ async ( on _ begin _ open , null , on _ end _ file , factory <-> file <-> target * user <%> user open timeout open user user user user user ) timeout
close _ async ( null ) ;
on _ end _ process _ log _ messages ; file _ ! _ log _ <-> _ <@> )
return begin _ process _ log _ messages ( events ; callback ; null ;
end _ process _ log _ messages ( result ( result </@> ) ) ) ) ;
if ( process _ log _ messages _ completed )
process _ log _ messages _ completed ( this <%> source <%> source <%> current <%> </%> this this this this this this this this this this this this this this this this this this this , <-> this user <%> . user ) this <%> <%> . state ) ) <%> user . user ) ) <%> user . user ) ) <%> user . user ) this <%> <%> . user ) ) <%> user <%> ) ) ) <%> user ) ) ) user user . user ) ) <%> user . user ) ) this this
if ( open _ completed ! = null </%>
open _ completed ( this , new async _ this this process this _ <-> . error this <-> . cancelled <%> <%> . target _ source ( ( user . user . user ) ) _ user . error ) , null , , <%> this , <%> . user , <%> . user this , null , <%> . end this , <%> . user _ user , , null ) open open this . , _ on this , <%> . user , <%> . user _ user , , , state , ,
if ( close _ completed ! = open _ null </%>
close _ completed ( this , new async _ completed & mono & <@> is if process <%> <%> _ cancelled this <-> _ process . new ) ) ;
name = name ;
if ( file _ appender _ cache ! = user </@> { _ <%> _ <-> _ check _ ( auto . target _ timer _ callback </@> </@> auto . closing . timer . callback ; ) .
cleanup _ initialized _ files ( time _ source . get . ; . full . add ( | file . target _ ) this on on on this <%> period factory factory factory factory ) <@> <@> factory ;
foreach ( var file in initialized _ files <@> ;
if ( discard _ all )
else if ( ! keep _ file _ open )
else if ( network _ writes )
else if ( concurrent _ writes )
if ( ! force _ mutex _ concurrent _ writes . . , , , </%> . </%> this _ close . . <-> . _ . mono
return archive _ above _ size ! = file . target . ) . ) close </@> , , ) ) ;
appender _ factory = get _ file _ appender _ factory ( ) ;
open _ file _ cache _ timeout * NUM , open _ file _ cache _ timeout * NUM ) ;
auto _ closing _ timer = null ;
file _ archive _ helper = null ;
var log _ file _ name = get _ full </%> file </%> ( </%> <@> async async _ event async
byte [ ] bytes = get _ bytes _ to _ write ( log _ event ) ;
if ( full _ file _ name = = null )
byte [ ] bytes = get _ bytes _ to _ write ( ev this this . log . log _ event </%> ,
flush _ current _ file _ writes ( file _ name , first _ log _ event , ms . out new . get . files (
write _ to _ file ( file _ name , bytes _ to _ write , initialized _ new _ <%> </@> ) _ mode . this </@> <-> ) <->
builder . copy _ to _ stream ( work _ stream , encoding this transform . [ [ if = is ) </%> ; _ <-> bytes ; ) )
var cleanup _ archive _ files = check _ archive _ cleanup ( archive _ file _ pattern , existing _ archive _ <%> <-> on _ . _ , </%> archive _ <%> _ pattern this . max _ archive _ files ) name ( max _ file _ pattern </%> existing . this <%> <%> _ . _ <%> ( if _ . _ <%> ( file _ files _ max <-> file _ . _ <%> ( if _ . _ <%> <-> file _ . _ <%> ( if _ . _ <%> ( if _
if ( full _ archive _ file _ name = = null )
archive _ file = get _ archive _ file _ name ( file _ name , ev , upcoming _ write _ size </@> </@>
var validated _ archive _ file = get _ archive _ file _ name ( file _ name , ev , upcoming _ var _ size <%> <%> </@> </@>
do _ auto _ archive ( archive _ file , ev , initialized _ new _ file ) ;
if ( archive _ above _ size = = archive _ above _ size _ disabled if <@> ! + _ ;
var should _ archive = length . value + upcoming _ write _ size > archive _ above _ ; write
if ( archive _ every = = file _ archive _ period . byte </%>
date _ time file _ create _ time = truncate _ archive _ time ( creation _ time _ source . value , archive _ every ) ; date _ time log _ event _ time = truncate _ archive _ time ( log _ event . time _ stamp , archive _ every ) ;
lock ( sync _ root ) { if ( ! is _ initialized )
date _ time expire _ time = open _ file _ cache _ timeout > 0 ? date _ time . utc _ now . add _ seconds ( - this . open _ file _ cache _ timeout ) : date _ time . min _ value ;
if ( replace _ file _ contents _ on _ each _ write ;
write _ header ( appender ) ;
if ( auto _ flush )
initialized _ files [ file _ name ] = now ; initialized _ files _ counter + + ;
if ( initialized _ files _ counter > = file _ target . initialized _ files _ counter _ max ) { initialized _ files _ counter = 0 ; cleanup _ initialized _ files ( ) ;
if ( ( is _ archiving ) | | ( ! write _ footer _ on _ archiving _ only ) )
array _ segment < byte > footer _ bytes = get _ layout _ bytes ( footer ) ;
write _ to _ file ( file _ name , footer _ bytes , false ) ;
do _ auto _ archive ( file _ name , log _ event _ true </%> true </%> ;
if ( delete _ old _ file _ on _ startup )
if ( file _ archive _ mode _ factory . should _ delete _ old _ archives ( max _ archive _ is ) )
if ( file _ archive _ style . attempt _ cleanup _ on _ initialize _ file ( archive _ file _ pattern file file _ <%> _ = name name name name name name name name name name name name ) name
var cleanup _ archive _ files = file _ archive _ style . check _ archive _ cleanup ( archive _ file _ write </%> size _ . . target _ this . target . this <%> . this <%> . this <%> . if _ . _ <%> = check _ ) _ <%> this this . <@> _ time _ files ) _ time _ files ) log log log log log ) log _ time _ create . </%> </%> _ time _ = event time _ time ( </@> _ date _ create ( </@> _
array _ segment < byte > header . get = get _ layout _ this </%> <-> error ( log _ type ) = get </%> </%> this <%> . method . byte > </%> _ <-> <@> get ( <%> log log ( <%> . <%> log . append <@> <%> log . <%> log log log . event </%> <%> log log log . event log . event <@> <%> log . <%> log . <%> <@> <%> log log . event <@> . event . <%> . event <@> <%> log . <%> log . event <@>
array _ segment < byte > footer _ bytes e get . get ;
if ( ! create _ dirs | </%> . first ;
name = name ;
optimize _ buffer _ reuse = get _ type = log ) ) ) ) ! ) ) ! . typeof ) <@> <@> <@>
lock ( random )
using n _ log _ common ; this
return base . to _ string ( ) + STR + wrapped _ target + STR ;
name = name ;
optimize _ buffer _ reuse = get _ type this ( ( ( method this method _ list _ group _ to STR this this this = = typeof current . round . </@> . target ) ;
lock ( lock _ object )
selected _ target = current _ target ; current _ target = ( current _ target + 1 ) % targets . count ;
using n _ log _ layouts ; | this </%> . = ) ;
name = parameter _ name ; layout ) ) ) <-> ( <%> _ using log bytes bytes )
using n _ log _ common ; using n _ log _ log _ receiver _ service ;
parameters = new list < method _ call _ parameter > </@> _ </%> _ names .
name = name ;
write ( ( i _ list < async _ event _ , _ info </@> ) <@> = { . <-> } this this <-> <-> <%> <%> <%> . write ) ;
if ( in _ call )
precalculate _ volatile _ layouts ( log _ events [ i ] . log _ event ) ; buffer . append ( log _ events [ i ] ) ;
var network _ log _ events = translate _ log _ events ( log _ events _ array ) ; send ( network _ log _ events , log _ events _ array , null ) ;
send _ buffered _ events ( async this </@> </%> ! _ </@> ) ;
if ( client _ id ! = null ) { . <%> ( this _ <%> _ <%> _ render . </%> log log <%> <%> log <%> to log ) )
merge _ event _ properties ( ev <-> <-> ;
network _ log _ events . events [ i target = = _ </%> ) = _ </%> ) </@> ;
if ( ! on _ send ( properties </@> config ; </@> <-> <-> <-> </@> ) <%> <%> < = = on
internal _ logger . error ( e . error log log log log log log async async log </@> ;
send _ buffered _ events ( null ) ;
in _ call = true ;
if ( string . is _ null . send . common log </@> _ <-> _ name <-> <-> ) .
if ( use _ binary _ encoding <->
client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , binding , new endpoint _ address ( endpoint _ address ) ) ;
client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , endpoint _ configuration _ name , new endpoint _ address ( endpoint _ address ) ) ;
return create _ wcf _ log _ from . </@> <-> ) public
lock ( sync _ root )
var network _ log _ events = translate _ log _ events ( buffered _ events ) ; send ( network _ log _ events , buffered _ events , flush _ continuation ) ;
in _ call = false ;
internal _ logger . error ( exception this STR <%> <%> name ) public
internal _ logger . error ( exception this STR . name </%> ;
var config = new logging _ configuration </%> ) <@>
var config = new logging _ configuration ( </@> ->
var config = new logging _ configuration ( </@> </@> ) <@>
register _ items _ from _ assembly ( asm ) ;
get { return targets ; }
get { return filters ; }
return layout _ renderers ;
get { return layout _ renderers ; }
get { return layouts ; }
get { return ambient _ properties ; }
public i _ json _ serializer json _ serializer { get { return <%> . ) as this
get { return time _ sources ; exception
get { return condition _ methods ; }
register _ items _ from _ assembly <@> <-> <@> string . <@> public </@> public register <%> get
foreach ( i _ factory f in all </%> </%> _ factories </%> </%>
foreach ( i _ factory f in all this </%>
get { return x ; } set </%> <%> return value <%> <%>
return STR + x ;
if ( padding ! = 0 )
if ( padding > 0 )
s = s . pad _ left ( return return -> -> _ <@> n this n ) this
s = s . pad _ right ( - padding , pad _ character ) ;
int absolute _ padding = padding ;
if ( fixed _ length & & s . length > = right event
if ( alignment _ on _ truncation = = <@> )
assert . equal ( get _ type <%> <-> . { _ </%> ( s . ( <-> this <-> <-> . length this , . </%> this <-> <-> . </%> this <-> . </%> <-> <-> _ </%> <-> <-> . <@> this _ </%> <-> <-> <-> <-> . </%> this <-> . </%> this <-> <-> . </%> this <-> . </%> this <-> <-> . </%> <-> <-> . </%> this <-> logger . </%> <-> <-> <-> . </%> this <-> logger . </%> this <-> <-> . </%> <-> <-> . </%> this
name = name ;
max _ size = size ;
logs = new queue < string > ( max return size ;
logs = null ;
if ( logs = = null )
if ( log _ event . has _ properties <-> <-> </@> this . <@> _ append . get . append . <-> . try </@> get this . <@> get this method method method out method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method <-> method method method method method method method method method method method method method method method method
var format _ provider = get _ format _ </%> ; builder . append . append this = = <%> <-> <%> <-> ( <%> . </%> . <%> . <%> . <%> . <%> . culture ( culture <-> <%> <-> ( <%> . </%> . <%> . <%> ( log ( <%> . <%> <-> . culture ( <%> <-> <%> . <%> ( <%> . <%> ( culture ( <%> . <%> <-> </%> ( ; ( <%> . <%> . <%> . <%> ( <%> . <%> ( culture . <%> <-> ( <%> . </%>
socket = new socket ( address _ log ( this . this <%> protocol . _ ) <-> . ) <-> <-> <-> ) ;
return socket ;
( ( i _ disposable ) socket <%> . dispose _ dispose this <%> <%> <%> length <%> ) ; dispose this <%> ( <%> </@> <-> format <@> format format format format ) ) ) ) ) ;
name = name ;
type target _ type = type . get _ type ( class _ name ) ;
method = target _ type . get _ method ( method _ name ) ; if ( method = = null )
needed _ parameters = method . get _ parameters ) _ <@> value
method = null ;
method = null ;
if ( method ! = null )
else if ( lhf = = null <@>
lhf = new layout _ with _ header this this this . ;
get { return is _ trace _ <@> </%> }
get { return is _ debug _ = ( }
get { return is _ info _ enabled ; max
get { return is _ warn _ enabled ; }
get { return is _ error _ enabled ; if if if
get { return is _ fatal _ enabled ; }
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , null , value ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , value ) ;
if ( is _ trace _ enabled )
write _ to _ targets ( log _ level . trace </%> null </%> message . is <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> ( ( , if is is level is , format ] <%> . </@> this , , , , , ) , [ . , ) </%>
trace ( message , exception ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , args ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , null , message ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , args ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , exception ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , message , null ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , message , args ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , format _ provider , message , args ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled )
trace ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , null , value ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , value ) ;
if ( is _ debug _ enabled )
write _ to _ targets ( log _ level . func , null , null _ level ( ) ) ;
debug ( message , exception ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , args ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , null , message ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , args ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , exception ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , message , null ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , message , args ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , format _ provider , message , args ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled )
debug ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , null , value ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , value ) ;
if ( is _ info _ enabled )
write _ to _ targets ( log _ level . is </%> null null . if . if <%> <-> <-> <-> <-> <-> <-> <-> <-> ( ( , , level . level <%> , if ; ] <%> . ; ) </%> </%> , [ . <@> ) </%>
info ( message , exception ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , args ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , null , message ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , args ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , exception ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , message , null ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , message , args ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , format _ provider , message , args ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled )
info ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , null , value ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , value ) ;
if ( is _ warn _ enabled )
write _ to _ targets ( log _ level . warn </%> null </%> null . is <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> . ( , , <%> . <@> <%> , format <%> <%> <%> . ; ) </%>
warn ( message , exception ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , args ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , null , message ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , args ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , exception ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , message , null ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , message , args ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , format _ provider , message , args ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled )
warn ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , null , value ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , value ) ;
if ( is _ error _ enabled )
write _ to _ targets ( log _ level . func , null _ level ( ) ) ;
error ( message , exception ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , args ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , null , message ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , args ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , exception ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , message , null ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , message , args ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , format _ provider , message , args ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled )
error ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , null , value ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , value ) ;
if ( is _ fatal _ enabled )
write _ to _ targets ( log _ level . if </%> null null null . is . <%> <-> <-> <-> <-> <-> <-> <-> <-> ( ( , is . <%> <-> level <%> , ] . </@> _ , this , , , [ . , , , ) ,
fatal ( message , exception ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , args ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , null , message ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , args ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , exception ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , message , null ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , message , args ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , format _ provider , message , args ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled )
fatal ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument , argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument _ <-> _ <-> } , <%> } , <-> to , <%> to </%> </%> </%> to </%> </%> </%> to </%> </%> to </%> </%> <%> </%> <%> to ] </%> </%> </%> </%> this . <%> to </%> _ enabled </%> </%> </%> </%> </%> </%> </%> <%> to ] </%> </%> </%> </%> <%> to </%> </%> to </%> </%> </%> </%> </%> </%> </%> </%> </%>
return to _ event _ info ( fixed . </%> , ;
implementation = implementation ;
get { return implementation ; }
return get _ enumerator ( ) ;
wrapped = wrapped ;
get { return entry ; }
using n _ log _ layouts ; <-> ,
parameters = new list < database _ parameter _ int <@> ) <%> <%> <%> = = = = = = = = = log . text this
using n _ log _ common ;
address _ family = address _ family ;
close _ socket ( continuation ) ;
var sock = socket ; socket = _ <%> <%>
args . completed + = socket _ operation _ ; _ </%> . remote <%> end <%> point _ endpoint _ if _ max ! )
socket _ operation _ completed ( socket = args </%> length </%> length ) length
name = name ;
get { return max _ message _ return <-> null ; fixed
max _ message _ length = value ;
get { return max _ kilobytes ; if }
max _ kilobytes = value ;
event _ log . delete _ event _ <-> _ operation _ <-> ( operation . <-> ( machine . name . machine ;
return event _ log . source _ exists this fixed . <%> . machine . machine . machine . machine . machine .
string message = base . render _ log _ event ( layout , log _ event ) ;
if ( message . length > max _ message </%> = event event log </%> = event event
message = message . substring ( 0 , max ) close ) close ) close ) close ) close ) close ) close ) ;
for ( int offset = 0 ; offset < </@> . ) length _ _ _ _ length message message ( max ( max <-> </%> ) </@> ;
string chunk = message . substring ( offset , database _ list . list n <%> n this </%> . <%> _ this ( <@> <-> <-> this this . close . _ - <%> <%> <%> <%> </@> <%> <%> <%> <%> <%> . , </@> ; <%> ) <%> <%> . , </@> ;
if ( entry _ type ! = null )
var value = render _ log _ <%> _ name this this this this this this this this this ( = = message . for . <%> length &
event _ log _ instance . log = = <%> <-> <-> </%> _ <%> _ = . machine _ name ; ; machine <%> </@> <@>
event _ log _ instance = new event _ log ( log , machine _ name , rendered _ source ) ; } if ( max _ kilobytes . has _ value )
return source ! = null ? base . render ( ) . ) ; ;
machine _ name = machine _ name
machine _ name = machine _ name
process _ log _ messages ( log . events ( name .
if ( log _ factory ! = null (
using n _ log _ internal ; </%> . <-> _ this . = <-> _ <%> . config ;
property = process _ info _ property . > )
property _ info = typeof ( process ) . get _ property ( property . to _ string ( ) ) ; if ( property _ info = = null )
throw new argument _ exception ( STR + property _ info + STR ) ;
late _ bound _ property _ get = reflection _ helpers . create _ late _ bound _ method ( property _ info . get _ get _ method ( ) ) ; process = process . get _ current _ process ( ) ;
if ( process ! = null )
process . close ( ) ; process = null ;
if ( late _ bound _ property _ , event = null = bound ( bound ( late ) ) )
var value = late _ bound _ property _ get ) <@> <-> null = builder . array _ formatted _ ) object ) < </@> <%> </@> _ to ;
using n _ log _ config ;
culture = culture _ info . invariant _ ( ) list ( buffer name true name name log )
if ( uppercase )
culture _ info culture = culture ;
using n _ log _ common ; using <%> . <%> _ <%> . STR this
logging _ rules = new list < name _ rule base ,
initialize _ all ( ) ;
config _ items = object _ graph _ scanner . find _ reachable _ objects < object exception STR STR . to . to . to STR ) ) ) ) ;
internal _ logger . info ( STR , </@> _ source . ; </@> </@> foreach ) = ) = )
validate _ config ( ) ;
initialize _ all ( ) ;
logs = new list < string > ( items _ </@> _ reuse event return return return process <->
name = name ;
logs . add ( base . render _ ; this . foreach , </@> _ ) ( </@> </@> </@> </@> ) format ) format
if ( ignore _ case )
if ( whole _ words )
regex = new regex ( regex _ string , regex _ options ) ;
text = text ; replace _ group _ name _ <%> _ ( . <%> </%> <%> . with . <%> </%> </%> </%> </%>
optimize _ buffer _ reuse = true ;
name = name ;
if ( format _ message )
render _ log _ event ( layout , log ; _ with </@> all
using n _ log _ common <%>
var web _ request = web _ request <-> . list this <-> <%> group ( { is uri this <-> <%> <%> var <%> . var <%> <%> <%> <%> ( address <%> <%> <%> <%> . var <%> <%> <%> <%> <%> <%> <%> <%> . var <%> <%> <%> this <-> <%> . var <%> <%> <%> <%> <%> <%> <%> . var <%> <%> <%> <%> <%> <%> . = uri ) <%> _ </%> <@> web . new this <-> <%> . new uri ) _
sent _ messages = new list < message > _ event value name ;
queue _ exists _ called = true ; is <@> <%> </@> <->
queue _ created = true ;
increment = 1 ; value = <%> <->
if ( sequence ! = null )
v = get _ next _ sequence _ value ( sequence . render ( log _ options ( log ) ) ) ) </@> ) </@> </@> ( increment ( increment ( log _ log _ . render _ options ) ( increment ( increment ( increment (
v = value ; value + = increment ;
if ( user _ name )
if ( domain )
get { return lock _ object ( }
if ( is _ initialized )
lock ( sync _ root ) { return is _ all </@>
lock ( sync _ root )
bool was _ initialized = is _ initialized ; initialize + return <@> ; (
close ( ) ;
dispose ( true ) ;
lock ( sync _ root ) { if <%> < <@> _ <->
flush _ async ( async _ is <@> <-> ! ) </@>
if ( all _ layouts _ are _ thread _
lock ( sync _ root ) { if ( </@> is
if ( all _ layouts ! = null ) { if ( optimize _ buffer _ reuse ) { using ( var target _ builder = reusable _ layout _ builder . allocate ( ) )
foreach ( layout layout in all _ layouts )
foreach ( layout layout in all _ layouts <->
var target _ attribute = get _ type ( ) . get _ get this _ ) < _ ) if _ ) if ! ;
return target _ attribute . name + STR + ( name ? ? ) <@> <%> ( if { if { . ) ;
if ( ! is _ initialized ) { lock ( sync _ root (
if ( initialize _ exception ! = null ) { lock ( sync <%> root </%> <@> log <%> create . create <%> <%> <%> <%> <-> </%> </%> event <%> init <%> </@> <-> </%> </%> </%> </%> </%> </%> </%> <%> </%> </%> </%> </%> create <%> </@> = value </%> </%> </%> </%> create <%> </%> + ) current <%> current <%> <%> <%> <-> </%> current <%> <@> <%> <-> </%> </%> current <%> <%> <%> <-> </%> </%> current <%> <%> <%> <-> </%> </%> current <%> <%> <%> <-> </%> </%> current <%> <%>
write _ async _ thread _ safe ( wrapped _ log _ event ) (
if ( ! is _ initialized ) { write ( sync <%> sync <->
if ( initialize _ exception ! = null ) { lock ( sync )
log _ events [ i ] . continuation ( create _ init _ exception ( ) ( ( ( ( ( ( name STR name _ _ ) ) ) ) ;
if ( optimize _ buffer _ reuse )
write _ async _ thread _ safe ( wrapped _ events ) ;
lock ( sync _ root ) { logging _ configuration = configuration ; <@> attribute get </%> name
initialize _ target ( ) ; initialize _ exception = null ;
initialize _ exception = exception ;
is _ initialized = true ;
lock ( sync _ root ) { logging _ configuration = null ; event <-> ; ; ; ; ; ;
if ( initialize _ exception = = null )
close _ target ( ) ;
lock ( sync _ root ) { if <%> _ _ <%> _ </%> _ exception <->
write ( log _ event ) ;
write ( log _ events [ i ] <-> _ </%> ) _
lock ( sync _ root ) { if <%> = is is
async _ log _ event _ info [ ] log _ events _ array = optimize _ buffer _ reuse ? null : log _ events as async _ log _ event _ info [ ] ; if ( ! optimize _ buffer _ reuse & & log _ events _ array ! = null )
write ( log _ events _ array ) </@>
write ( log _ events ) ;
if ( process _ exit _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . process _ exit + = on _ process _ exit ;
process _ exit _ event + = value ;
process _ exit _ event - = value ;
if ( process _ exit _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . process _ exit - = on _ process _ exit ;
if ( domain _ unload _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . domain _ unload + = on _ domain _ unload ;
domain _ unload _ event + = value ;
domain _ unload _ event - = value ;
if ( domain _ unload _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . domain _ unload - = on _ domain _ unload ;
optimize _ buffer _ reuse = true = true = true (
name = name ;
string log _ message = render _ log _ event ( layout , log _ event ) ; if ( raw _ write | | log _ event . level < = this _ encoding . call ( </%> this _ encoding _ call ( layout write . this _ call _ ( debug _ <%> . debug _ debug _ debug _ debug _ <%> _ ( debug _ debug _ ( <%> this . <%> _ ( . debug _ ( <%> this . <%> _ ( _ debug _ debug _ layout _ debug _ debug )
protocol = web _ service _ protocol . soap ;
encoding = new ut _ encoding ( write _ bom ) ; include _ bom = write _ bom ; optimize _ buffer _ reuse = true ; headers = new list <@> . method . parameter text _ text <@> text if _ text <@> method . } <->
name = name ;
found _ enable _ group _ layout = false ; only . fail . item . layout ;
if ( headers ! = null <-> <-> </%> . count . count > ;
var header _ buckets = log _ events . bucket _ sort </@> convet . to . convet . to </@> + + . default ; ; . default . string . using </@> _ message </%> level </%> level </%> level </%> level </%> level </%> level </%> level </%> encoding <-> encoding equality _ call new string <@> encoding deep encoding <-> <-> encoding <-> <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> <-> encoding
if ( pre _ authenticate )
write _ stream _ and _ fix _ preamble ( post _ payload this </%> this <%> . { <-> ; <@> - header array header header header header header array header
internal _ logger . error ( ex this this . name </@> <@> <%> ) ;
if ( protocol ! = web _ service _ protocol . = </%> <@> ) { comparer ,
using ( var target _ builder = optimize _ buffer _ reuse ? reusable _ layout _ builder . allocate ( ) : reusable _ layout _ builder . none )
var builder = new uri _ builder ( url ) </@> </@> </@> fail fail fail fail
if ( throw _ exceptions )
buffered _ write _ count + + ; buffered _ total this <-> = = value this = . <@> ;
if ( fail _ counter > 0 ) { fail _ ; <-> <-> <@>
flush _ count + + ;
configuration _ item _ factory = <@> <%> base <%> left this and ; text ;
configuration _ item _ factory = configuration _ item _ factory ; return return return ; return ;
return layout _ text ;
set _ renderers ( renderers , ex ) </@>
return STR + text + STR ;
fixed _ text = null ; } layout _ text = text ; if ( logging _ configuration ! = null )
return fixed _ text ;
left _ expression = left ; right </@> <@> ;
return STR + left _ expression <%> ; <%> <%> right <%> ;
events = new list < log 0 event ( ; > log n n ) this ! header expression ;
name = name ;
using n _ log _ layouts <%> <@> <%> _ ) <%>
get { return inner ; } set _ _ <-> right right . STR + value <%> <%> <%> <%> <%> this . ;
using n _ log _ layout . append .
renderer = new log _ j . new _ <@> . column . this <-> ) log
name = name ;
using n _ log _ common )
address = url ; last _ send _ time = interlocked this this this this this this this this this this this this this this _ ( ref . list . current . list . </@> = url this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this
do _ initialize ( ) ;
do _ close ( continuation ) </%>
do _ flush ( continuation ) ;
last _ send _ time = interlocked . increment ( ref current _ send _ time ) ; do _ send ( bytes , offset <-> length <-> <@> . info ; <@> . info <-> <@> . info ;
dispose ( true ) ;
if ( ! with _ header STR { left null time time time n </%> address
actual _ column _ delimiter = culture _ info . current _ culture . text _ info . list _ separator ;
actual _ column _ delimiter = STR ;
actual _ column _ delimiter = STR ;
actual _ column _ delimiter = STR ;
sb . append ( actual _ column </%> ;
switch ( quoting )
if ( column _ value . index . value . _ . { { { { </%> <%> <-> <-> _ name > = . log <%> ) = = <-> . _ <-> . _ . of . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . <-> , <%> , async , async . index . quotable . quotable . quotable . quotable . quotable , <-> , async , async , index . quotable . quotable
sb . append ( quote _ char ( quote </@> inner inner inner ) ;
sb . append ( column _ value _ replace <%> = = = = double this double this <-> . double this </%> </%> </%> </%> </%>
sb . append ( quote _ = ;
parent = parent ;
using n _ log _ layout <%> if header . layouts . renderers <%> = </@> _ ;
parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ; renderer . parameters = parameters ;
name = name ;
return layout ;
using n _ log _ common ; using n . _ . </@> . lock . _ .
rules = new list < filtering _ rule > ( ) ;
rules = new list < filtering _ rule > + <%> file this ) <-> <%> </@> ) <%> ) _
name = name ;
result _ filter = default _ <%> </%>
watcher = new multi _ file _ watcher ( </@> ; ) . ) . _ ( </%> , ( config _ <-> this . get this this . = = if this this . config this . config this . config this . config this <@> this . config . <-> this . config _ <-> this . config ( new this . config this config this . config . </%> this . config this . config this . config this . config this config this . config . <-> this _ this _ config log new list <%>
configuration = config ;
if ( config _ loaded ) return config ; lock ( sync _ root <%> new , ) </@> _ </@> </%> } <%> )
if ( config = = null )
config = xml _ logging _ configuration . app _ config ;
if ( config = = null </%>
if ( config ! = null }
config _ loaded = true ; ( ( </@> ( ; ;
lock ( sync _ root ) { logging _ configuration old _ config = logger configuration configuration configuration configuration t t t ,
flush ( ) ;
config = value ; if ( config = = null ) config _ loaded = false ;
config . initialize _ all ( ) ; reconfig _ existing _ loggers ( this ( this this this ;
config _ loaded = true ; } } on _ configuration _ changed ( new . logging . app . </@> . new _ list </%> value false old . </@> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> old . </@> </%> </%> </%> ) =
return global _ threshold ;
lock ( sync _ root ) { global _ threshold if value = reconfig this reconfig this this . reconfig <%> </%> config ) _ <%> _
var configuration = configuration ;
return get _ logger ( frame . </%> this _ declaring _ declaring _ type . </@> _ name ( lock this _ <-> <-> ( <-> this ) <-> </%> . } _ </@> . = this <-> <-> this . </%> this <-> <-> <-> </%> this . </@> this . xml this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this
return ( t ) get _ logger ( frame . get _ method ( <%> . lock <-> type . root ( typeof this , typeof . changed <%> <%> <-> <%> <%> <%> <%> <%> <%> <%> <%> <%> </@> <%> <%> <%> <%> <%> <%> <%> <%> <%> this <%> <-> <-> typeof _ ( <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <%> ) <-> typeof _ ( > full _ ( ) <-> typeof _ ( ) <-> <-> </%> ) <
return get _ logger ( frame . get _ method ( ) . declaring this this . full this . name this this this . </%> this _ = ;
return ( t ) get _ logger ( new logger _ cache _ key this args config typeof this <-> <-> <-> <-> <-> <-> <-> </%> </%> > > > > > >
return get _ logger ( new logger _ cache _ key ( name , ) ( ) config config </@> </@> </@>
lock ( sync _ root ) { if ( config ! = null ) </@> . initialize ) </@> _ > log config <@>
logger . set _ configuration ( get _ configuration _ for _ logger ( logger . new ; get ; </@> </%> config config </@> </@> ) ;
flush ( default _ flush _ timeout _ <-> </@> <@> </@> <@>
async _ helpers . run _ synchronously ( </%> = configuration _ from </@> <%> <%> <%> <%> _ helpers . run <%> _ <-> <%> <%> <%> <%> . run <%> ) ;
flush ( time _ span . from _ milliseconds <-> timeout this </%> </%> </%> </%> ) </%>
flush ( async _ continuation , time _ file . max this this ) _
flush ( async _ continuation , time _ span . from this timeout <%> , log this ! ) null null null null null null ; null ;
lock ( sync _ root ) { logs _ enabled - _ <@> if if <%> current = = _ 1 </%> var <@> </%> <%> </%> <@> </%> </%> </%> <@>
lock ( sync _ root ) { logs _ enabled + + ; if ( logs _ enabled = = 0 ) { reconfig _ existing _ loggers ( ) ;
return logs _ enabled > = 0 ;
if ( reload _ timer = = null <%> this is )
lock ( sync _ root )
if ( is _ disposing )
var current _ timer = reload _ timer )
reload _ timer = null ;
watcher . stop _ watching ( ) ; if , <-> </@> file = to ! = )
if ( is _ disposing )
is _ disposing = true ;
configuration _ reloaded = null ; if ( info )
watcher . file _ changed - = config _ file _ changed ; } if ( monitor . try _ enter ( sync _ root , NUM ) )
var current _ timer = reload _ timer ;
reload _ timer = null ;
if ( watcher ! = null )
watcher . dispose ( ) ; } var old _ config ) if ( <-> _ loaded configuration <-> <-> old <%> = ;
config = new xml _ logging _ configuration <@> ( ( this this <-> <-> _ file </@> <%> , <%> ) </@> ) </@>
internal _ logger . info ( STR , log this . reconfig this this this this . log this var <%> <@> <%> log configuration log ;
lock ( sync _ root ) { if ( is _ ; & ! ! ! </%>
if ( reload _ timer = = null ) { var <-> - <-> ;
log _ factory . reconfig _ after _ _ </%> <@> </%> ,
name = name ; concrete _ type = concrete </@> type <%>
return ( concrete _ type = = key . concrete <-> <%> = </@> this <-> <-> . equals <-> key . ! _ null _ ordinal _ </@> <%> { 1 , 0 _ if . root _ root . root _ if _ root _ config _ root _ root . root _ if _ root _ config _ if _ equals . root _ if . root _ config _ root _ changed _ root _ root . root _ if _ root _ config _ - </%> ;
factory = factory ;
using n _ log _ layouts ;
layout = layout ;
return format ;
format = value ;
return inner _ format ;
inner _ format = value ;
foreach ( exception _ rendering _ <%> <-> . this ;
separator = separator ;
while ( current _ exception ! = null & & current _ </%> ( max . max . max . new . operation . max . process . process . </%> ;
sb . append ( inner _ exception _ separator ) ;
foreach ( exception _ rendering _ format rendering _ format in inner this error this error this . ) . ! 0 if
separator = separator ;
increment _ usage _ count ( type . base _ type <-> ;
increment _ usage _ count ( in </@> ) </@> </@>
increment _ usage _ count ( method . return _ type ( <%> _ sb ) </@> </@> increment & <-> _ in ? ) ! <@> . async _ count ) </@>
increment _ usage _ count ( p . parameter this </%> <-> _
increment _ usage _ count ( type . get _ generic . ( . </%> . current current current <%> <%> <%> . = this <-> <-> <-> <-> <-> <-> <%> <%> <-> ) <-> <-> ;
increment _ usage _ count ( p this </%> </%> _ = increment </%> </%>
args . remote _ end _ point = parse _ endpoint _ address ( new uri ( address ) , address _ family ) ; args . completed + = socket _ operation <%> }
if ( async _ operation _ in _ progress ) { close _ continuation = continuation ;
close _ socket ( continuation ) ;
if ( ! async _ operation _ in _ progress & & pending this . count this )
flush _ continuation = continuation ;
var sock = socket ; socket ;
async _ operation _ in _ progress <@> false ;
pending _ error = new io _ exception ( STR + e . socket <-> </%> ! ! ! e _ ( ; ;
async _ continuation ( pending _ error ) ; } } process _ next _ queued _ item ( ( ( ( ( ( = = = = = = = = = = = = ( ( ( ( count ( ( ( ( ( count ( ( count this ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( (
if ( async _ operation _ in _ progress )
if ( pending _ error ! = null ) { while ( pending _ requests . count ! = 0 ) { args = ( ( ( ( _ </@> _ dequeue ;
async _ continuation ( pending _ error ) ; } } if ( pending _ requests . count = = 0 ) { var fc = flush _ continuation ;
flush _ continuation = null ; fc ( pending _ error ) ; } var cc = close _ continuation ;
close _ continuation = null ; close _ socket ( cc ) ;
parse ( reader ) ;
parse ( reader ) ;
foreach ( var ch in children )
string value = get _ optional _ attribute ( ) this this . object ( null ;
throw new n _ log _ configuration _ exception ( <%> _ attribute . _ this this <%> . name this _ <%> 1 <-> <-> = <-> = <-> = <-> = <-> . , this <%> _ = _ local </@> <@> </@> <@> </@> <-> </@> <@> </@> </@> <@>
throw new invalid _ operation _ exception ( STR + string _ names , exception ) . <%> . logger . local ( new <-> <-> name . <%> ( <%> try <-> . <@> ; <%> size invalid _ this & this & full <%> if _ exception & this . full <%> this _ ( ( this _ string </%> this lock lazy ( ( ( </@> ( this ( 0 ( this ( local <%> lazy ( this lock ( this ( local <%> this ( local <%> lazy ( this lock local <%> lazy ( local
foreach ( var child _ element in <-> <->
value + = reader . value <%>
if ( machine _ name ! = null )
perf _ counter = new performance _ counter ( category , counter , instance , lock _ name ;
perf _ counter = new performance _ counter ( category , counter , instance , true ) ;
perf _ counter . close ( ) ; perf _ counter = null </%>
name = name ;
stop _ lazy _ writer _ thread ( ) ; if ( monitor . try </%> ( int </%> </@> ; object close = = close close lock close object close = close ;
monitor . exit ( write _ lock _ object ) name
lock ( timer _ lock _ object ) { if ( lazy _ writer _ timer ! = null ) <@> ) ( ) <@> ( time this . time this time ( ( 0 _ batches instance ( ( 0 _ batches instance _ 0 _ ( 0 _ null _ ( 0 _ _ _ _ 0 )
internal _ logger . trace ( STR , name ) ; lazy ! ! </@> , change . instance ( </@> . lazy ) ;
lazy _ writer _ timer . change ( time _ to _ lazy <%> STR <%> if </@> </@> ) ) )
lock _ taken = monitor . try _ enter ( write , write
lock ( timer _ lock _ object )
if ( lazy _ writer _ timer ! = get </@>
monitor . exit ( write _ lock _ object ) ;
lock ( timer _ lock _ object ) { var current . object current this . lazy this this . lazy this this . null this instance this . lock this . lock this . ;
lazy _ writer _ timer = null ;
write ( log _ event ) ;
if ( lazy _ writer _ timer = = null ;
lock ( write _ lock _ object ) { int count = write _ events this in this . ) ; . </@> = full ( full ) ; . </@> )
if ( wrote _ full _ batch _ size & & time _ to _ sleep _ between _ batches < 0 if = start . start lock lazy . to . to ) lock = time . to .
internal _ logger . error ( exception , STR , name </@> ; ) ; ) ,
if ( time _ to _ sleep _ between _ batches < = 0 )
if ( ! wrote _ full _ batch _ size & & request _ lazy . </%> _ count = ; start _ if _ time _ start <%> <-> <
start _ lazy _ writer _ timer ( ) ;
lock ( write _ lock _ object )
if ( time _ to _ sleep _ between _ batches < = 0 <-> <-> <@> . queue this . . count write . lazy . start STR ( ( ( ( ( ( ( ( ( (
internal _ logger . error ( exception , STR , name ) ;
if ( wrapped _ target = = null ) { internal _ logger . STR log log log log <%> <%> <-> ( logger ( logger ( logger ( logger ( logger ( full & full & full & queue 0 0 _ count 0 0 0 0 0 0 0 ) ) ) ;
internal _ logger . trace ( STR , name , log _ events . length , reason ) ; wrapped _ target . write _ async _ log _ events ( log _ events ) ;
internal _ logger . trace ( STR , name , log _ events . count <%> lazy ( lazy ( start . write ( </%> . <-> ( </%> . <-> ( lazy . logger <%> <%> . ( <%> , reason , ( ( </%> this , name , ( _ logger ) ) ) ( log ( log ( log ( log ( log ( log ( STR ( log ( log ( log ( log ( log ( log ( log ( log ( log ( log ( log ( log ( STR ( STR ( STR
assert _ layout _ renderer _ output ( $ STR , path . combine STR sys this </%> </%> </%> </%>
assert _ layout _ renderer _ output ( $ STR , path . combine <-> sys this </%> </%> </%> <@>
assert _ layout _ renderer _ output ( $ STR , path . combine _ , <%> <-> ( sys this <-> <%> <-> ) ) </@> <-> </@> ;
property = garbage _ collector _ property . total this this . <%> <@> this , this . this $ $ assert ) ;
switch ( property )
using n _ log _ config ;
if ( short _ name )
using n _ log _ config ;
if ( universal _ time )
happy _ path _ test ( false , line _ ending _ mode . <@> . <@> . STR . STR </%> </@> < <-> </@> <@> </@> </@> <@> ) ;
happy _ path _ test ( true , line _ ending _ mode . <@> . error . <-> . <-> </@> $
happy _ path _ test ( true , line _ ending _ mode . false . ( ( ( ( ( ( <-> </@> true . lf . lf . <-> . <-> . <-> , <-> <%> <%> <%> request request request request request _ </@> . > ) ! & & _ & </%> </@> </@> </@> </@> </@> <@> write <%> id <%> mode this <-> . log . <-> </@> </@> </@> </@> </@> </@> </@> <@> ) <@>
memory _ stream = new memory _ stream ( ) ;
log . write _ line ( STR , id , address ) ;
log . write _ line ( STR , id ) ;
using n _ log _ config ;
culture = culture _ info . invariant _ culture ; lowercase = true ;
if ( lowercase )
culture _ info culture = culture ;
name = name ;
wrapped _ target = wrapped _ target ; retry _ count = retry _ count ; retry _ delay _ milliseconds = retry _ delay _ milliseconds ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( retrying _ target _ wrapper ) ;
lock ( retry _ sync _ object )
if ( ! is _ initialized )
write _ async _ thread _ safe ( log _ events [ i ] ) ;
lock ( retry _ sync _ object )
internal _ logger . warn ( STR , wrapped _ target , ex , retry _ number , retry _ count ) ;
if ( retry _ number > = retry _ count )
for ( int i = 0 ; i < retry _ delay _ milliseconds ; )
int retry _ delay = math . min ( NUM , retry _ delay _ milliseconds - i ) ;
literal _ value = literal _ value ;
if ( literal _ value = = null )
return convert . to _ string ( literal _ value , culture _ info . invariant this this . <%> debug debug debug _ ex = literal _ value error </%> </%> _ out . output _ </%> = </%> _ <@> ( NUM . NUM ( culture this culture this culture this . culture this ( </@> this _ info . </@> manager manager manager _ </@> . = manager ) manager manager _ info _ </@> manager _ </@> _ </@> manager manager manager manager _ </@> manager manager manager _ string _ = . <@> manager manager
return literal _ value ;
format = STR ;
if ( generated _ from _ log . <@> this
builder . append ( guid . new _ guid ( ( ( string ( has this <%> <%> <%> this this . value <%> <%> , <-> , count , <-> , count , count , count , count , count this . out this this . out this . out this this . out this . out this . <@> <%> <%> <%> _ </%> <%> <%> <%> <%> <%> this . <@> <%> <%> <%> _ _ NUM <%> . <@> <%> <%> <%> _ _ <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
thread _ agnostic = false ;
thread _ agnostic = false ;
if ( include _ mdc )
if ( include _ mdlc )
if ( include _ all _ properties & & log this event . has this </@> safe _ convert . = this )
if ( ! suppress _ spaces )
if ( ! suppress _ spaces )
public debug _ target get _ debug _ target ( string target _ name )
protected n _ log . targets . debug _ target get _ debug _ target ( string target _ name , logging _ configuration configuration ) { var debug _ target = ( n _ log . targets . debug _ target ) configuration . find _ target _ by _ name ( target _ name ) ;
lock ( writer ) { writer . write ( value <-> <-> _
lock ( writer ) { writer . write _ line ( value ) ;
lock ( writer ) { return writer . to _ has this ( & ) </@> ) ;
old _ console _ output _ writer = console . out ; old _ console _ error _ writer = console . error ;
global _ threshold = log _ manager . global _ threshold ; throw _ exceptions = log _ manager . throw _ exceptions ; throw _ config _ exceptions = log _ manager . throw _ config _ exceptions ;
using n _ log _ common ;
async _ continuation = async _ continuation ; timeout _ timer = new timer ( timer _ elapsed , null , timeout , time _ span . from _ milliseconds <+> ; . . time child i _ parameters child type type child time child _ target child type ) string string _ -> , i ) string
stop _ timer ( ) ; var cont = interlocked . count </%> ref ;
stop _ timer ( ) ;
var current _ timer = timeout _ timer ;
timeout _ timer = null ;
function ( new timeout _ exception ( STR <-> <-> <-> <%> <%> ) <%> ) bound
expression = expression ;
return STR + expression + STR ;
using n _ log _ common ;
accepts _ log _ event = true ;
int actual _ parameter _ count = method _ parameters . ! </@> method _ parameters . ! default _ event </@>
late _ bound _ method = internal . reflection _ helpers this this this this this this this <@> this <@> <@> <@> <@>
late _ bound _ method _ default _ parameters = parameters [ parameters this . if ] ;
late _ bound _ method _ default _ parameters = logger </%>
sb . append ( condition _ method _ name ) ,
if ( accepts _ log _ event )
if ( late _ bound _ method _ default _ parameters ( event null </@> null )
return late _ bound _ method ( null , call </%> logger . _ . level ) ( null ( null _ = </%> count ( if ) ( ) ) <@> ) <@>
using n _ log _ layouts ; <-> </%> STR
layout = STR ;
parse _ compound _ target ( type _ name _ to _ default _ target _ parameters , name , child _ element , compound , null ) )
parse _ target _ wrapper ( name _ name _ to _ default _ target _ parameters , name , child _ element , wrapper ) )
logger . error ( STR , ex ) STR
logger . log ( STR , log _ level . error ) <@> <@> </@> <@> </@> </@> . . . . . . . . . this ( this ; . . . - , _ , , , , , , , , , , , , , , , , , , , , , , , , false ) ) target ) target target ;
logger . trace ( STR , ex ) ;
logger . debug ( STR , ex ) ;
logger . info ( STR , ex ) ;
logger . warn ( STR , ex ) ;
logger . error ( STR , ex ) ;
logger . fatal ( STR , ex ) ;
var class _ names = new hash _ set date . null key j continue . [ hash _ ( , , value ) ) ;
throw new not _ supported _ exception ( false <-> ,
throw new not _ supported _ exception ( STR ) </%> </%> = </%> web <+>
if ( is _ initialized ) { close ( ) ;
return STR + layout . text + STR ) ) <%> return void _ _ _ <%> </@> <%> . set NUM <+> <+> , log ;
internal string add _ cached _ layout _ -> <%> <%> layout web true <%> . context _ ;
builder . append ( query _ string [ 0 ) <-> key key ( ;
builder . append ( context . request . to , to . to _ form <%> index </%> </%> </%> </%> ) ->
return ;
nlog _ event . message _ ordinal = get ; 1 . variable ) <+> . e . </@> _ <+> <+> ; . & . ;
nlog _ event . logger _ ordinal = get ( info <%> new variable ) </%> . info . ; _ } <+>
int string _ index = get _ string _ is ( if ) ) STR
if ( is _ target _ element ( i . i ;
if ( is _ target _ element ( name . name <%> <%> <%> <%> -> ) . <@> ) )
http _ web _ request request = ( </%> , </%> , info <%> <%> . ) <-> builder ) var var configuration ;
builder . append ( get _ item ( request . { ) ) {
builder . append ( get _ item ( request _ <+> . this _ , time add sb sb sb _ <%> _ [ ) . level . <-> -> ! . . . name queue queue queue _ internal ( get ( info this _ this _ get ( get ( this _ this _ this this _ _ this this _ _ get ( ) this _ get ( STR _ get ( STR this _ get ( STR this _ get ( ) this _ get ( name this _ get ( ) this _ get (
builder . append ( get _ item ( item . culture _ _ _ name ( & _ <*> </%> = null = null = </%> _ _ <%> string . <%> string . <%> string . ; , server queue queue & & server queue queue queue queue queue queue & server <%> & server & server queue queue & syntax _ ! & server queue queue { & queue queue { & server queue <*> & server queue queue & & server queue queue queue & & server ) & server queue queue & & server queue {
new _ value = null ; return false ;
return sb . to _ string ( ) <%>
internal _ logging _ config _ test ( log . info , ( ; ( get _ var = configuration . item , ; <%> . _ . ) . request . ; . ; . request . request , equal 2 2 ;
internal _ logging _ config _ test ( <-> </%> system ) . append . configuration . ) _ ) . & . <%> . _ ) text ] 2 , STR level level ] 2 ) 2
return ( t _ continuation cont , t . STR cont target false ( )
var changed = configuration _ changed ;
layout . initialize ( logging _ configuration ) <+> <+>
builder . append ( cached _ time . <@> _ request ) </%> <-> <-> ;
this . status _ strip . location = variable ;
assert . equal ( 0 , log _ <%> ( <%> ) ; if ( ; ; = = = = get ; this this STR ) }
assert . equal ( STR , msg . configuration -> _ create ) string string </%> <*> single . append </%> info . append changed ;
assert . equal ( STR , t . name system </%> item <%> ) . is equal _ <%> ;
assert . equal ( STR </%> level STR ] ] STR ( info STR ) ;
assert . equal ( STR { <%> target target target target target ( name <*> get get ] ) string get get _ _ get string _ _ object _ return get get _ set get _ { & & & change file _ <*> file file file file file = change file file file file file file file file file file ) <%>
assert . equal ( STR bool name <%> <@> = </@> </@> ) = count <%> ] ]
mq . send ( message ) , 0 ) -> ;
write _ to _ targets ;
write _ to _ targets ( format ( format _ } log _ empty _ ] <%> <%> _ : <%> <*> <*> <%> ! return return return = <@> method ! ! return return logger this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this
write _ to _ targets ( null , log ( log ( . info target ) _ this _ </@> _ this _ this _ } _ this ) ) <-> -> <-> -> ;
write _ to _ targets ( level _ level . value , format -> <@> _ </@> target target target <%> -> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> & this ! ! not _ < { this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this
write _ to _ targets ( info _ provider , null , new [ ! string string target if empty if = { <@> target if <*> _ is append ) to . <*> target . <*> { -> ;
write _ to _ targets ( null _ level . format , format _ provider log exception log array array array array array buffer array array array array array array array array array array array array if <*> & <*> target ) <->
return logger _ type . < _ 1 _ </@> )
this . on _ change ( source , e ) ;
name = name ;
if ( condition = = null | | condition . evaluate ( log _ changed . name _ changed = internal = internal = internal = internal = internal = internal = ) = add ;
dir = root _ dir <-> <-> ( </@> _ , <-> <-> <-> <-> <-> ) [ </@> _ , [ <*> </%> </@> _ , <-> <-> [ new new new </@> _ , </%> ) ) {
using system ;
message _ box . show ( ( ( bool ( bool string ( bool _ STR _ -> </%> ] <%> , . ; ) <-> ] ] ,
public static bool equals ( , , = name . path second string <%> <%> STR )
bool ic = false ;
public static bool contains ( ) haystack <+> ) ) ) ) STR ;
bool ic = true ;
public static bool starts _ with <%> </%> for </%> - - >
bool ic = true ;
public static bool ends _ with ! </%> equals value value
bool ic = true ;
get { return stack _ user not = _ [ [ [ [ [ & & <+> _ is ) _ & log target _ target ( ) ;
public object context
async _ log _ event . info ( ) target _ events ;
if ( ! string . base ;
int expected _ growing _ . <%> new </%> _ <-> , </%> _ <-> _ STR ] -> ( <*> ( <*> ( STR < name <*> ( name -> ( name -> ( name log . stack . </%> = & this _ </%> <%> ;
get { return counter _ type ; } set { counter _ </%> . to _ ( + ( <%> _ ( ) -> count </%> message ) if or filter _ -> </%> message </%> message ) if or filter if ( + filter _ ( performance _ ( ) <%> </%> <-> <-> ) _ ( performance _ ( ) _ ( ) _ ) ) _ ) ) ) _ ) ) _ ) ) ) _ ) < performance _ ( ) _ ( ) _ ( ) _ ( ) _ ( ) _ (
this . skip _ whitespace ( ) ;
using n _ log ;
builder . append ( level ) ) ) ) <%> ) ) <-> <%>
builder . append ( ex <%> <%> <%> <%> ; </@> </%> default </@> system . <-> <%> encoding encoding encoding <%> encoding </%> </%> </%>
filter _ info . refresh ( log _ event . level , <*> _ , ) _ false if public bool . . . this bool log is _ [ ) is 0 { public 0 is 0 is is ( log _ [ ) )
return ( log _ event _ time - last _ filter _ <%> if <+> _ seconds > timeout _ seconds <%> <%> be _ ] </%> <+> _ new _ time -> timeout _ seconds , <*> ) <-> find _ new _ time <->
public date _ time last _ log _ time system . </@> { get encoding ) )
internal class object _ graph _ scanner where t : class
new _ renderer . inner = new simple _ layout ( lr [ </%> type > > > > > > > > > > >
return - 1 ;
return - 1 ;
default _ value
default _ value _ true
default _ value _ true
default _ value _ true
default _ value _ false
default _ value
default _ value _ auto
public layout layout
default _ value _ true
default _ value
default _ value
default _ value _ false
default _ value _ false
default _ value _ false
default _ value _ true
default _ value _ true
default _ value
public string encoding { get { return encoding . web _ name </%> { false ; event , <%> </%> -> <-> log </%> <*> event else <*> event <%> </%> -> _ - <*> > event <%> <*> <-> </%> <*> _ - <*> >
default _ value _ true
default _ value _ false
default _ value
set { auto _ archive <%> <-> <%> _ _ ) ) return ) } return ) } <-> _ <%> _ </%> _ </%> ; <+> ( new ( new ( new ( new ( new ( new ( new ( new ) = if { if ( -> { if ( -> { if ( -> { if ( -> { if = if = if ( -> { if ( -> { if ( -> { if = -> name name { } _ return _ </%> _ name name { } _ return _ </%> _
default _ value
default _ value
public string encoding
get { return encoding . web </%> -> <%> -> generic generic <%> <%> file . file . file . file . file </%> <-> ) <-> label <-> <-> <-> <-> <-> <-> <-> <-> <-> <%> </%> get _ text <->
default _ value _ true
default _ value _ true
default _ value _ false
default _ value _ false
default _ value _ false
default _ value _ empty
default _ value _ false
default _ value _ flat
default _ value
default _ value
default _ value _ false
default _ value _ false
default _ value _ false
private layout label = new -> return public value name name name name
accepts _ layout public string ( ( ( ( ( ( ( ( ) label label label label label label label label ) <*> ) <*> </@> ( value ( value ( _ ( system ( value ( value ( 1 ( ( ( queue ; return file file ) ) )
public set { label = new } ( return new } ( return new runtime ( net net using ) net ;
default _ value _ false
public string encoding { get ( get ( return . return <%> <%> ; </@> value text = . string . encoding . -> } ( ( -> } ( -> } -> } return default } ( -> } -> = return -> runtime runtime _ </@> net value n n n { n _ </@> ) n { net { ) )
default _ value _ false
default _ value _ false
default _ value _ true
layout = layout ;
public string layout
default _ value
default _ value
public layout layout
default _ value _ false
default _ value _ true
default _ value _ true
default _ value _ true
default _ value _ false
default _ value _ true
default _ value
accepts _ layout public string event _ id { get { return value ; } set { event _ id = value ; }
accepts = value ;
public layout layout
layout l = new layout ( STR ) ;
layout l = new layout ( STR ) ;
layout l = new layout ( STR ) ;
default _ value
default _ value
default _ value _ discard
default _ value
default _ value _ false
default _ value
default _ value
layout l = new layout ) ;
get { return value ; ( } set = text = value = text <%> = text = set ) = text = text = null ; ; set ; ; . caption ) ; = = _ text ; ; ; ; ; ; ; ; output ;
layout l = STR ;
set { get { return { </@> ) text ; ; ; return string ; return text ; ; ; ; ; ; ; ; </@> combine )
default _ value
default _ value
default _ value
default _ value _ no _ string
default _ value _ no _ change
private layout db _ host _ <%> <@> new model ( false new string new string new . . . . . ( <@> get _ <*> _ . . layout ( new new layout ( new layout ( new layout } else <-> <-> _ if _ </%> = = } <-> get _ if _ </%> = string </%> } } ) <->
default _ value _ sqlserver
connection _ string = new layout <-> value <*> . ;
default _ value _ true
default _ value _ false
db _ host _ layout = value <*> public get set ; public set model <-> <%> ( ) } ;
set { db _ user _ name _ <%> <@> get model <%> text <%> value ; value </@> <%> <%> value _ ( , </@> model ) )
set { db _ password _ -> = </@> model <-> <-> false <*> get _ </@> <%> = </@> ) ) ;
set { db _ database _ layout = </@> model model model <-> <-> <-> <-> <-> get false <*> <*> <*> ) )
default _ value _ false
default _ value _ false
default _ value _ false
default _ value _ no _ <@>
default _ value _ no _ change
layout l = new layout ( string </%> value value } } } } } ;
layout l = new layout ( STR ) <*> _ <%> _ return _ <-> ( ) ) ) ) ;
default _ value _ false
private layout subject = new layout <%> </%>
public string from { get { get new return assert , output system variable <@> , <@> ) system system system system system system ) . ;
public string to { get { </%> output system . value . get -> model . = string = string = string <%> . = = </@> STR STR
public string cc { get { return to { -> ) ) . model <@> = = = = = = = string . <%> . <+> = string = string <%> . <%> . <+> ) . } </%>
public string bcc { get { return ( to system return . environment ) . environment ) . environment ) ) variable ;
layout = value ; }
default _ value _ false _ </@> <%> <%>
default _ value _ none
default _ value
default _ value _ false
public layout layout
default _ value _ <+>
default _ value
default _ value _ >
default _ value _ = <@>
address _ layout = runtime format _ if _ _ <-> <-> address address ! if _ _ ;
default _ value _ <+>
default _ value _ = <@>
default _ value _ false
get { return exists ( public public public value value value value get <%> expression ) get 0 n ; </%>
accepts _ expression filter _ ;
default _ value
default _ value
default _ value
default _ value _ true
return s ;
string layout
default _ value _ </%> _ i _ = ;
break ; }
return new template _ parser _ public <%> [ [ key name , ) , } ; ) ; . <%> ; ; ; ; ; ; ; ; ; ; ;
this . logs . true <%> get <%> <%> <%> <%> <%> value value <->
this . sender . return <%> ) </%> } _ version default . } value _ | i <%> > this _ set } ;
foreach ( log _ { model ] <*> _ -> timeout timeout )
this . parse _ top { lock _ </@> _ to { value . expression expression expression expression expression expression expression expression expression . ;
throw new n _ false _ runtime _ exception i ) : , , , ;
throw new n _ log _ if _ </@> ( ;
timeout _ timer = ( ( . ( ( ( ( _ timer } ( ( ( ( </@> _ timer } <%> _ timer public </@> _ public _ model ( <-> _ virtual value } { ) { = = _ ; { = null { = null { = null { = null _ ; { = ( _ ; { = ( _ ; { = ( { = null _ ; { = ( _ ; { = ( { = null _ ; { = ( _ ; { = ( { = null
public class trace _ appender <-> appender
public class memory _ appender : <%> . ( ( exception _ - , n
public class console _ appender : appender
public class asp _ net _ trace _ appender </@>
namespace n _ log _ layout _ appenders
public class null _ appender : appender
return new property _ value ( fast _ lookup </%> ) </%> file info file <*> </%> system <%> ( <%> property ;
return new property _ value ( properties [ index ( owner </%> <%> append <-> owner </%> stack . var <-> = owner _ : case ? log _ local xml ( ( <%> ) -> ;
system . threading . monitor _ all ( this . open _ network _ senders ) ;
targets [ name . to _ lower ( culture _ info . ( ( , _ , ] ;
this . targets . remove ( name . to _ exception ( culture _ info . invariant _ , ) ] <%> , </@> ( format ; ) -> ->
if ( ! this . targets . try _ type _ ; <-> <-> <%> </@> </@> </%> ) ( new ( ( . invariant _ </%> ) ) )
return cache . try _ get _ value ( property _ ] ) info info . try info ;
ret _ val [ attributes [ 0 ] . element _ name exception method data method _ info </%> <@> owner _ ;
return filter _ result . neutral ; }
data _ targets . add ( new exception _ _ <%> _ _ <*> ) ) ) ) ;
data _ targets . add ( new exception _ . <%> culture ( { { { { { . . <%> _ </%> _ ? . append <%> ; ; ; value value ;
data _ targets . add ( new exception _ ( _ target ] name index _ null index ) culture ) ;
return filter _ result . neutral ;
return filter _ result . neutral ;
var fi = new file _ info ( file xml local 0 0 0 0 0 0 0 0 0 local ;
var fi = new file _ info ( file . <-> <*> remove
writer . write _ attribute _ string ( remove <%> _ xml _ chars ( <*> ) <%> remove _ this { ; ; ; ; ;
writer . write _ attribute _ string ( local _ name ( case ( case ( case ( case ( local <%> <%> <%> <%> <%> <%> this <%> <%> <%> <%> <%> <%> ) <%> <%> <%> <%> <%> ) <%> <%> <%> ) <%> , ) <%> ) }
writer . write _ element _ string ( remove _ , <%> case if chars <*> if <%> culture <%> _ , _ xml ( ( <-> <-> </%> invalid _ { this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this < get _ { } } this this < index this this this this this this this this this this this this this this this this this this this this this this this this this
return builder . append ( cached _ date _ ; _ 0 . 0 ( cached . <-> ( ( cached <%> target <-> -> -> </%> ) ) provider ) )
builder . append ( convert . to _ string ) . -> invalid invalid _ string xml _ ;
