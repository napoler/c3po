{"JavaScriptServices": [{"before_ctx": " ", "before_line": " public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) ", "after_ctx": " <%> <*> logger _ factory -> app </%> <%> <*> add -> use </%> <%> <*> console ( log -> developer _ exception </%> <%> <*> level . warning -> page ( </%> <%> <-> if ( env . is _ development ( ) ) { app . use _ developer _ exception _ page ( ) ; } else { app . use _ exception _ handler ( STR ) ; } app . use _ iis _ platform _ handler ( ) ; </%>", "after_line": "public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env )", "predictions": ["public void configure ( i _ hosting _ environment app , = = = = = = STR var var ( <%> _ <+> ;"]}, {"before_ctx": "<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) ", "after_ctx": " <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } </%> <%> <*> else -> if ( env . is _ development ( ) ) { </%> <%> <*> { -> app . use _ webpack _ dev _ middleware ( new webpack _ dev _ middleware _ options { </%> <%> <-> app . use _ exception _ handler ( STR ) ; </%>", "after_line": "public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env )", "predictions": ["public void configure ( i _ hosting _ environment app , output _ <%> _ ] ! override output _ <%> _ < <*> _ < ( <+> _ lock </%> task > >"]}, {"before_ctx": "<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) ", "after_ctx": " <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } </%> <%> <*> else -> if ( env . is _ development ( ) ) { </%> <%> <*> { -> app . use _ webpack _ dev _ middleware ( new webpack _ dev _ middleware _ options { </%> <%> <-> app . use _ exception _ handler ( STR ) ; </%>", "after_line": "public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env )", "predictions": ["public void configure ( i _ hosting _ environment app , i _ logger _ factory logger _ factory )"]}, {"before_ctx": "<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> <%> <*> services . add _ mvc ( ) . add _ json _ options ( options = > { options . serializer _ settings . contract _ resolver = new camel _ case _ property _ names _ contract _ resolver ( ) ; } ) ; -> services . add _ mvc ( ) ; </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) ", "after_ctx": " <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } </%> <%> <*> else -> if ( env . is _ development ( ) ) { </%> <%> <*> { -> app . use _ webpack _ dev _ middleware ( new webpack _ dev _ middleware _ options { </%> <%> <-> app . use _ exception _ handler ( STR ) ; </%>", "after_line": "public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env )", "predictions": ["public void configure ( i _ hosting _ environment app , i _ logger _ factory env , i _ logger _ factory logger _ factory )"]}, {"before_ctx": "<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) ", "after_ctx": " <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } else { app . use _ exception _ handler ( STR ) ; </%>", "after_line": "public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env )", "predictions": ["public void configure ( i _ hosting _ environment app , ) null if <-> override )"]}, {"before_ctx": "<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) ", "after_ctx": " <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } </%> <%> <*> else -> if ( env . is _ development ( ) ) { </%> <%> <*> { -> app . use _ webpack _ dev _ middleware ( new webpack _ dev _ middleware _ options { </%> <%> <-> app . use _ exception _ handler ( STR ) ; </%>", "after_line": "public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env )", "predictions": ["public void configure ( i _ hosting _ environment app , i _ logger _ factory logger _ factory )"]}, {"before_ctx": "<%> <+> make _ command _ line _ options ( port , watch _ file _ extensions ) ) </%> <%> <*> { var result = STR + port . to _ string ( ) ; if ( watch _ file _ extensions ! -> { var result </%> <%> <*> null & & watch _ file _ extensions . length > 0 ) { -> STR + port ; </%> <%> <+> if ( watch _ file _ extensions ! = null & & watch _ file _ extensions . length > 0 ) { </%> ", "before_line": " public override async task < t > invoke < t > ( node _ invocation _ info invocation _ info ) { await this . ensure _ ready ( ) ; using ( var client = new http _ client ( ) ) { ", "after_ctx": " <%> <-> this . </%> <%> <*> if ( ! response . is _ success _ status _ code ) { -> if ( ! response . is _ success _ status _ code ) </%> <%> <+> { </%>", "after_line": "public override async task < t > invoke < t > ( node _ invocation _ info invocation _ info ) { await ensure _ ready ( ) ; using ( var client = new http _ client ( ) ) {", "predictions": ["public override async task < t > invoke < t > ) . configure _ ready ) . configure _ ready ) ; _ ready ) logger ) . ( is _ client ( ) ( <%> <%> string new _ <%> <%> <%> <%> <%> <%> string STR ) ->"]}, {"before_ctx": "<%> <*> null & & watch _ file _ extensions . length > 0 ) { -> STR + port ; </%> <%> <+> if ( watch _ file _ extensions ! = null & & watch _ file _ extensions . length > 0 ) { </%> <%> <*> public override async task < t > invoke < t > ( node _ invocation _ info invocation _ info ) { await this . ensure _ ready ( ) ; using ( var client = new http _ client ( ) ) { -> public override async task < t > invoke < t > ( node _ invocation _ info invocation _ info ) </%> <%> <+> { await ensure _ ready ( ) ; using ( var client = new http _ client ( ) ) { </%> ", "before_line": " var response = await client . post _ async ( STR + this . port _ number , payload ) ; ", "after_ctx": " <%> <*> if ( ! response . is _ success _ status _ code ) { -> if ( ! response . is _ success _ status _ code ) </%> <%> <+> { </%> <%> <*> if ( response _ is _ json ) { -> if ( response _ is _ json ) </%> <%> <+> { </%>", "after_line": "var response = await client . post _ async ( STR + port _ number , payload ) ;", "predictions": ["var response = await client . post _ async ( STR + port _ number , payload ) ;"]}, {"before_ctx": "<%> <*> protected override void on _ output _ data _ received ( string output _ data ) { var match = this . port _ number ! = 0 ? null : port _ message _ regex . match ( output _ data ) ; if ( match ! = null & & match . success ) { this . port _ number = int . parse ( match . groups [ 1 ] . captures [ 0 ] . value ) ; } else { -> protected override void on _ output _ data _ received ( string output _ data ) </%> <%> <+> { var match = port _ number ! = 0 ? null : port _ message _ regex . match ( output _ data ) ; if ( match ! = null & & match . success ) { port _ number = int . parse ( match . groups [ 1 ] . captures [ 0 ] . value ) ; } else { </%> <%> <*> protected override void on _ before _ launch _ process ( ) { -> protected override void on _ before _ launch _ process ( ) </%> <%> <+> { </%> ", "before_line": " this . port _ number = 0 ; ", "after_ctx": " ", "after_line": "port _ number = 0 ;", "predictions": ["port _ number = 0 ;"]}, {"before_ctx": "<%> <*> namespace microsoft _ asp _ net _ core _ node _ services -> namespace microsoft _ asp _ net _ core _ node _ services </%> ", "before_line": " private semaphore _ slim invocation _ semaphore = new semaphore _ slim ( 1 ) ; private task _ completion _ source < string > current _ invocation _ result ; private readonly static json _ serializer _ settings json _ serializer _ settings = new json _ serializer _ settings { ", "after_ctx": " <%> <+> private task _ completion _ source < string > current _ invocation _ result ; private readonly semaphore _ slim invocation _ semaphore = new semaphore _ slim ( 1 ) ; </%> <%> <*> embedded _ resource _ reader . read ( typeof ( input _ output _ stream _ node _ instance ) , STR ) , project _ path ) -> embedded _ resource _ reader . read ( </%> <%> <+> typeof ( input _ output _ stream _ node _ instance ) , STR ) , project _ path ) </%>", "after_line": "private static readonly json _ serializer _ settings json _ serializer _ settings = new json _ serializer _ settings {", "predictions": ["private static readonly json _ serializer _ settings json _ serializer _ <*> </%>"]}, {"before_ctx": "<%> <-> await this . invocation _ semaphore . wait _ async ( ) ; </%> <%> <*> try -> try </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " } finally { this . invocation _ semaphore . release ( ) ; this . current _ invocation _ result = null ; ", "after_ctx": " <%> <*> protected override void on _ output _ data _ received ( string output _ data ) { if ( this . current _ invocation _ result ! = null ) { this . current _ invocation _ result . set _ result ( output _ data ) ; } else { -> protected override void on _ output _ data _ received ( string output _ data ) </%> <%> <+> { if ( current _ invocation _ result ! = null ) { </%>", "after_line": "} finally { invocation _ semaphore . release ( ) ; current _ invocation _ result = null ;", "predictions": ["} finally { invocation _ semaphore . release ( ) ; <+> _ STR _ : </%> <%> json json json if"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <*> } finally { this . invocation _ semaphore . release ( ) ; this . current _ invocation _ result = null ; -> } </%> <%> <+> finally { invocation _ semaphore . release ( ) ; current _ invocation _ result = null ; </%> ", "before_line": " protected override void on _ output _ data _ received ( string output _ data ) { if ( this . current _ invocation _ result ! = null ) { this . current _ invocation _ result . set _ result ( output _ data ) ; } else { ", "after_ctx": " ", "after_line": "protected override void on _ output _ data _ received ( string output _ data ) { if ( current _ invocation _ result ! = null ) { current _ invocation _ result . set _ result ( output _ data ) ; } else {", "predictions": ["protected override void on _ output _ data _ received ( data index _ STR ( handle <%> this file _ . _ result + if null add _ . ( STR <%> <%> <%> = <*> </%> </%> <*> _ < </%> </%> var </%> </%> </%> </%> </%> var var <%> contract _ if <%> logger contract i _ . _ configuration ( logger <%> _ data <%> <%> contract data <%> <%> contract <%> ) ) contract contract <-> <%> > source <+> _ -> _ arguments <%> set <*> > source ;"]}, {"before_ctx": "<%> <-> private string application _ base _ path ; private i _ node _ services node _ services ; public prerender _ tag _ helper ( i _ service _ provider service _ provider ) { var host _ env = ( i _ hosting _ environment ) service _ provider . get _ service ( typeof ( i _ hosting _ environment ) ) ; this . node _ services = ( i _ node _ services ) service _ provider . get _ service ( typeof ( i _ node _ services ) ) ? ? fallback _ node _ services ; this . application _ base _ path = host _ env . content _ root _ path ; if ( this . node _ services = = null ) { this . node _ services = fallback _ node _ services = configuration . create _ node _ services ( new node _ services _ options { hosting _ model = node _ hosting _ model . http , project _ path = this . application _ base _ path } ) ; } } </%> <%> <-> this . </%> <%> <*> application _ base _ path : this . application _ base _ path , node _ services : this . node _ services , boot _ module : new java _ script _ module _ export ( this . module _ name ) { export _ name = this . export _ name , webpack _ config = this . webpack _ config _ path -> application _ base _ path , </%> <%> <+> node _ services , new java _ script _ module _ export ( module _ name ) { export _ name = export _ name , webpack _ config = webpack _ config _ path </%> ", "before_line": " request _ absolute _ url : uri _ helper . get _ encoded _ url ( request ) , request _ path _ and _ query : request . path + request . query _ string . value ) ; ", "after_ctx": " <%> <*> if ( result . globals ! = null ) { -> if ( result . globals ! = null ) </%> <%> <+> { </%> <%> <*> foreach ( var property in result . globals . properties ( ) ) { -> foreach ( var property in result . globals . properties ( ) ) </%> <%> <+> { </%>", "after_line": "request . get _ encoded _ url ( ) , request . path + request . query _ string . value ) ;", "predictions": ["request _ absolute _ url : get _ encoded _ url ( request ) , request _ path _ and _ query : request . path + request . query _ string . value ;"]}, {"before_ctx": "<%> <*> namespace microsoft _ asp _ net _ core _ node _ services { -> namespace microsoft _ asp _ net _ core _ node _ services </%> <%> <+> { </%> <%> <-> { public string file _ name </%> <%> <-> get ; private set ; } </%> ", "before_line": " public string _ as _ temp _ file ( string content ) { this . file _ name = path . get _ temp _ file _ name ( ) ; file . write _ all _ text ( this . file _ name , content ) ; ", "after_ctx": " <%> <-> private void dispose _ impl ( bool disposing ) { if ( ! disposed _ value ) { if ( disposing ) { } file . delete ( this . file _ name ) ; disposed _ value = true ; } } </%>", "after_line": "public string _ as _ temp _ file ( string content ) { file _ name = path . get _ temp _ file _ name ( ) ; file . write _ all _ text ( file _ name , content ) ;", "predictions": ["public string _ as _ temp _ file ( string content . ( ( ( path _ factory , path _ ( name ) . ( . write . write _ } = path ) code <%> _ services if build _ configuration if = logger . ( logger . ( . <%> _ arguments connection -> -> -> object -> -> -> -> ) -> -> -> -> -> -> -> -> ) private object -> private object -> ->"]}, {"before_ctx": "<%> <-> using microsoft _ asp _ net _ node _ services ; using microsoft _ asp _ net _ node _ services _ react ; </%> ", "before_line": " private i _ node _ services node _ services ; public home _ controller ( i _ node _ services node _ services ) { this . node _ services = node _ services ; } public async task < i _ action _ result > index ( int page _ index ) ", "after_ctx": " <%> <-> view _ data [ STR ] = await react _ renderer . render _ to _ string ( this . node _ services , module _ name : STR , base _ url : request . path ) ; </%>", "after_line": "public i _ action _ result index ( int page _ index )", "predictions": ["private home _ controller ( i _ node _ services node _ _ , control _ write name _ ) . . task < </%> _ public _ configure > STR"]}, {"before_ctx": "<%> <*> private readonly object child _ process _ launcher _ lock ; private string command _ line _ arguments ; -> private const string connection _ established _ message = STR ; </%> <%> <+> private readonly task _ completion _ source < object > connection _ is _ ready _ source = new task _ completion _ source < object > ( ) ; private bool disposed ; </%> ", "before_line": " private process node _ process ; private task _ completion _ source < bool > node _ process _ is _ ready _ source ; private readonly string project _ path ; private bool disposed ; ", "after_ctx": " <%> <-> child _ process _ launcher _ lock = new object ( ) ; </%> <%> <+> node _ process = launch _ node _ process ( entry _ point _ script . file _ name , </%> <%> <*> = project -> , command </%> <%> <*> path -> line _ arguments ) </%> <%> <*> command -> connect </%> <%> <*> line -> to </%> <%> <*> arguments = command -> input </%> <%> <*> line -> output </%> <%> <*> arguments ? ? string . empty -> streams ( ) </%> <%> <*> public -> public async task < t > invoke _ export _ async < t > ( string module _ name , </%> <%> <*> command -> export </%> <%> <*> line -> name </%> <%> <*> arguments -> or _ null , params object [ ] args ) </%> <%> <-> get { return command _ line _ arguments ; } </%>", "after_line": "private readonly process node _ process ;", "predictions": ["private readonly task _ completion _ source < bool > node _ process _ is _ ready _ source ; private readonly string project _ path ;"]}, {"before_ctx": "<%> <-> public startup ( i _ hosting _ environment env ) { var builder = new configuration _ builder ( ) . add _ json _ file ( STR ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; set ; } </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory ) ", "after_ctx": " <%> <-> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> } else { app . use _ exception _ handler ( STR ) ; </%>", "after_line": "public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env )", "predictions": ["public void configure ( i _ hosting _ environment app , i _ logger _ factory logger _ <-> this _ factory )"]}, {"before_ctx": "<%> <+> . add _ json _ file ( $ STR , optional : true ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; } </%> <%> <*> services . add _ mvc ( ) . add _ json _ options ( options = > { options . serializer _ settings . contract _ resolver = new camel _ case _ property _ names _ contract _ resolver ( ) ; } ) ; -> services . add _ mvc ( ) ; </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env ) ", "after_ctx": " <%> <+> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> if ( env . is _ development ( ) ) { </%>", "after_line": "public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory )", "predictions": ["public void configure ( i _ application _ builder app , <-> _ add _ i add _ i , )"]}, {"before_ctx": "<%> <+> . add _ json _ file ( $ STR , optional : true ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; } </%> <%> <*> services . add _ mvc ( ) . add _ json _ options ( options = > { options . serializer _ settings . contract _ resolver = new camel _ case _ property _ names _ contract _ resolver ( ) ; } ) ; -> services . add _ mvc ( ) ; </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env ) ", "after_ctx": " <%> <+> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> if ( env . is _ development ( ) ) { </%>", "after_line": "public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory )", "predictions": ["public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ void <%> ( 0 _ </@> factory builder )"]}, {"before_ctx": "<%> <+> . add _ json _ file ( STR , optional : true , reload _ on _ change : true ) . add _ json _ file ( $ STR , optional : true ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; } </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env ) ", "after_ctx": " <%> <+> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <+> } else { app . use _ exception _ handler ( STR ) ; </%>", "after_line": "public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory )", "predictions": ["public void configure ( i _ application _ builder app , node , node _ result _ <+> + ( ! contract _ $ _ builder logger )"]}, {"before_ctx": "<%> <+> . add _ json _ file ( $ STR , optional : true ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; } </%> <%> <*> services . add _ mvc ( ) . add _ json _ options ( options = > { options . serializer _ settings . contract _ resolver = new camel _ case _ property _ names _ contract _ resolver ( ) ; } ) ; -> services . add _ mvc ( ) ; </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env ) ", "after_ctx": " <%> <+> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> if ( env . is _ development ( ) ) { </%>", "after_line": "public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory )", "predictions": ["public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ <*> logger )"]}, {"before_ctx": "<%> <+> . add _ json _ file ( $ STR , optional : true ) . add _ environment _ variables ( ) ; configuration = builder . build ( ) ; } public i _ configuration _ root configuration { get ; } </%> <%> <*> services . add _ mvc ( ) . add _ json _ options ( options = > { options . serializer _ settings . contract _ resolver = new camel _ case _ property _ names _ contract _ resolver ( ) ; } ) ; -> services . add _ mvc ( ) ; </%> ", "before_line": " public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ environment env ) ", "after_ctx": " <%> <+> logger _ factory . add _ console ( configuration . get _ section ( STR ) ) ; logger _ factory . add _ debug ( ) ; if ( env . is _ development ( ) ) { </%> <%> <-> if ( env . is _ development ( ) ) { </%>", "after_line": "public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory logger _ factory )", "predictions": ["public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ <*> logger )"]}], "CefSharp": [{"before_ctx": "<%> <+> { public interface i _ drag _ handler </%> ", "before_line": " public interface i _ drag _ handler { bool on _ drag _ enter ( i _ web _ browser browser _ control , i _ browser browser , i _ drag _ data drag _ data , drag _ operations _ mask mask ) ; } ", "after_ctx": " <%> <+> } </%>", "after_line": "bool on _ drag _ enter ( i _ web _ browser browser _ control , i _ browser browser , i _ drag _ data drag _ data , drag _ operations _ mask mask ) ;", "predictions": ["bool on _ drag _ enter ( i _ web _ = . . . this browser _ this . _ _ . <%> ; ) ) ->"]}, {"before_ctx": "<%> <*> control control = ( control ) sender ; form old _ form = parent _ form ; form new _ form = control . find _ form ( ) ; if ( old _ form = = null | | new _ form = = null | | old _ form . handle ! = new _ form . handle ) -> var control = ( control ) sender ; </%> <%> <+> var old _ form = parent _ form ; var new _ form = control . find _ form ( ) ; if ( old _ form = = null | | new _ form = = null | | old _ form . handle ! = new _ form . handle ) </%> ", "before_line": " if ( this . handle ! = int _ ptr . zero ) ", "after_ctx": " ", "after_line": "if ( handle ! = int _ ptr . zero )", "predictions": ["if ( handle ! = int _ ptr . zero )"]}, {"before_ctx": "<%> <+> & & ( parent _ form . left ! = x | | parent _ form . top ! = y ) </%> <%> <*> if ( parent _ form . left > = 0 & & parent _ form . right > = 0 ) -> if ( parent _ form . left > = 0 & & parent _ form . right > = 0 ) </%> ", "before_line": " this . def _ wnd _ proc ( ref m ) ; ", "after_ctx": " ", "after_line": "def _ wnd _ proc ( ref m ) ;", "predictions": ["def _ wnd _ proc ( ref m ) ;"]}, {"before_ctx": " ", "before_line": " if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . send _ focus _ event ( true ) ; } ", "after_ctx": " <%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%>", "after_line": "managed _ cef _ browser _ adapter . send _ focus _ event ( true ) ;", "predictions": ["managed _ cef _ browser _ adapter . send _ focus _ event ( true i i i ) logger ;"]}, {"before_ctx": "<%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%> ", "before_line": " if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . send _ focus _ event ( false ) ; } ", "after_ctx": " ", "after_line": "managed _ cef _ browser _ adapter . send _ focus _ event ( false ) ;", "predictions": ["managed _ cef _ browser _ adapter . send _ focus _ event ( false ) ;"]}, {"before_ctx": " ", "before_line": " if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . load _ html ( html , url ) ; } ", "after_ctx": " <%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%>", "after_line": "managed _ cef _ browser _ adapter . load _ html ( html , url ) ;", "predictions": ["managed _ cef _ browser _ adapter . load _ html ( if ; true ) <@>"]}, {"before_ctx": "<%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%> ", "before_line": " if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . go _ back ( ) ; } ", "after_ctx": " <%> <-> if ( is _ offscreen _ browser _ created ) { </%>", "after_line": "managed _ cef _ browser _ adapter . go _ back ( ) ;", "predictions": ["managed _ cef _ browser _ adapter . go _ back ( & &"]}, {"before_ctx": "<%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%> ", "before_line": " if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . go _ forward ( ) ; } ", "after_ctx": " <%> <-> if ( is _ offscreen _ browser _ created ) { </%>", "after_line": "managed _ cef _ browser _ adapter . go _ forward ( ) ;", "predictions": ["managed _ cef _ browser _ adapter . go _ forward ( i i i & & ) data"]}, {"before_ctx": "<%> <-> if ( is _ offscreen _ browser _ created ) { </%> <%> <-> } </%> ", "before_line": " if ( is _ offscreen _ browser _ created ) { managed _ cef _ browser _ adapter . reload ( ) ; } ", "after_ctx": " ", "after_line": "managed _ cef _ browser _ adapter . reload ( ) ;", "predictions": ["managed _ cef _ browser _ adapter </@> </@> <@> ; ; STR"]}, {"before_ctx": "<%> <*> web -> on </%> <%> <*> view . on -> tooltip </%> <%> <-> web _ view . </%> ", "before_line": " web _ view . browser _ core . address = web _ view . address ; if ( web _ view . is _ offscreen _ browser _ created ) { web _ view . cef _ browser _ wrapper . load _ url ( web _ view . address ) ; ", "after_ctx": " <%> <-> web _ view . </%> <%> <-> web _ view . </%>", "after_line": "browser _ core . address = browser _ core . address ; if ( is _ offscreen _ browser _ created ) { cef _ browser _ wrapper . load _ url ( address ) ;", "predictions": ["address = web _ view . address memory _ is _ <-> _ <*> </%> { _ response . x _ <@> : <*> _ ( . int modifiers modifiers modifiers ; ;"]}, {"before_ctx": "<%> <-> web _ view . </%> <%> <-> web _ view . </%> <%> <*> web -> browser </%> <%> <*> view -> core </%> <%> <-> web _ view . </%> <%> <-> web _ view . </%> <%> <-> web _ view . </%> ", "before_line": " if ( web _ view . source ! = null ) ", "after_ctx": " <%> <-> web _ view . </%>", "after_line": "if ( source ! = null )", "predictions": ["if ( source ! = null )"]}, {"before_ctx": "<%> <-> web _ view . </%> <%> <*> web -> browser </%> <%> <*> view -> core </%> <%> <-> web _ view . </%> <%> <-> web _ view . </%> <%> <-> web _ view . </%> <%> <-> web _ view . </%> ", "before_line": " web _ view . create _ offscreen _ browser ( ) ; ", "after_ctx": " ", "after_line": "create _ offscreen _ browser ( ) ;", "predictions": ["create _ offscreen _ browser ( ) ;"]}, {"before_ctx": " ", "before_line": " using system _ collections _ specialized ; using system _ io ; ", "after_ctx": " <%> <*> public interface i _ scheme _ handler _ response -> obsolete _ use _ i _ resource _ handler _ response _ instead </%> <%> <+> public interface i _ scheme _ handler _ response : i _ resource _ handler _ response </%> <%> <-> stream response _ stream { get ; set ; } string mime _ type { get ; set ; } name _ value _ collection response _ headers { get ; set ; } int status _ code { get ; set ; } </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": " ", "before_line": " if ( ! e . handled ) { on _ preview _ key ( e ) ; } base . on _ preview _ key _ down ( e ) ; ", "after_ctx": " <%> <-> if ( ! e . handled ) { </%> <%> <-> } base . on _ preview _ key _ up ( e ) ; </%>", "after_line": "on _ preview _ key ( e ) ;", "predictions": ["on _ preview _ key ( e view view = <%> buffer . create _ <%> _ args _ down . web view _ preview _ <-> _ down . web view </%> ) ;"]}, {"before_ctx": "<%> <-> if ( ! e . handled ) { </%> <%> <-> } base . on _ preview _ key _ down ( e ) ; </%> ", "before_line": " if ( ! e . handled ) { on _ preview _ key ( e ) ; } base . on _ preview _ key _ up ( e ) ; ", "after_ctx": " <%> <*> if -> var modifiers = get _ modifiers </%> <%> <*> . key = = key . tab | | e . key = = key . home | | e . key = = key . end | | e . key = = key . up | | e . key = = key . down ) -> ) ; </%> <%> <-> { </%> <%> <*> var modifiers = get _ modifiers ( e ) ; -> if ( keys _ to _ sendto _ browser . contains ( e . key ) | | modifiers > 0 ) </%> <%> <+> { </%> <%> <*> e . handled = managed _ cef _ browser _ adapter . send _ key _ event ( message , virtual _ key , ( int ) modifiers ) ; -> managed _ cef _ browser _ adapter . send _ key _ event ( message , virtual _ key , modifiers ) ; </%>", "after_line": "on _ preview _ key ( e ) ;", "predictions": ["on _ preview _ key ( e ) ;"]}, {"before_ctx": "<%> <+> obsolete _ this _ method _ will _ be _ removed _ implement _ i _ render _ handler _ and _ assign _ browser _ render _ handler </%> ", "before_line": " var is _ popup = type = = paint _ element _ type . popup ; render _ handler ? . on _ paint ( is _ popup , dirty _ rect , buffer , width , height ) ; ", "after_ctx": " <%> <+> obsolete _ this _ method _ will _ be _ removed _ implement _ i _ render _ handler _ and _ assign _ browser _ render _ handler </%> <%> <+> render _ handler ? . on _ cursor _ change ( cursor , type , custom _ cursor _ info ) ; </%>", "after_line": "render _ handler ? . on _ paint ( type , dirty _ rect , buffer , width , height ) ;", "predictions": ["render _ handler ? . on _ paint ( is . ) ( dirty _ element ( <@> </%> </%> paint <*> buffer . on <*> _ , _ , . modifiers <*> <*> . modifiers . modifiers . modifiers <*> </%> paint _ 0 _ , = </%> paint <*> <*> <*> _ , <*> bool void , ) ( error , on _ can _ error args ) ( error , height _ element _ error bool bool bool _ void bool void _ void , bool bool void void <*> bool void _ can load load load"]}, {"before_ctx": "<%> <*> mouse . capture ( this ) ; mouse _ captured _ in _ on _ mouse _ leave = true ; -> browser . get _ host ( ) . send _ mouse _ click _ event ( ( int ) point . x , ( int ) point . y , mouse _ button _ type . left , mouse _ up : true , click _ count : 1 , modifiers : modifiers ) ; </%> ", "before_line": " else { browser . get _ host ( ) . send _ mouse _ move _ event ( ( int ) point . x , ( int ) point . y , true , modifiers ) ; } ", "after_ctx": " ", "after_line": "browser . get _ host ( ) . send _ mouse _ move _ event ( ( int ) point . x , ( int ) point . y , true , modifiers ) ;", "predictions": ["browser . get _ host ( ) . send _ ; _ index . system . ( . move _ </%> = = & point ( & & point . content . window . left . ;"]}, {"before_ctx": "<%> <+> args </%> ", "before_line": " var wrapper = new cef _ app _ wrapper ( subprocess ) ; result = wrapper . run ( args ) ; ", "after_ctx": " ", "after_line": "result = subprocess . run ( ) ;", "predictions": ["result = new cef _ app _ _ ) ; <-> <%> <%> { </@> . cef ;"]}, {"before_ctx": "<%> <+> this . browser _ split _ container . dock = system . windows . forms . dock _ style . fill ; this . browser _ split _ container . location = new system . drawing . point ( 0 , NUM ) ; this . browser _ split _ container . name = STR ; this . browser _ split _ container . panel . controls . add ( this . browser _ panel ) ; this . browser _ split _ container . panel _ collapsed = true ; this . browser _ split _ container . size = new system . drawing . size ( NUM , NUM ) ; this . browser _ split _ container . splitter _ distance = NUM ; this . browser _ split _ container . tab _ index = 2 ; </%> ", "before_line": " this . browser _ panel . location = new system . drawing . point ( 0 , NUM ) ; ", "after_ctx": " <%> <*> 2 -> NUM </%> <%> <+> _ split </%> <%> <*> panel -> container </%>", "after_line": "this . browser _ panel . location = new system . drawing . point ( 0 , 0 ) ;", "predictions": ["this . browser _ panel . location = new system _ drawing _ point ;"]}, {"before_ctx": " ", "before_line": " using system _ windows ; using cef _ sharp _ wpf _ example _ views _ main ; ", "after_ctx": " <%> <*> var main _ view -> content . content </%>", "after_line": "using cef _ sharp _ wpf _ example _ views _ main ; using system _ windows ;", "predictions": ["using cef _ sharp _ wpf _ <%> _ views <+> <+> ; ; _ if _ wpf <%> _ else <%> <%> ,"]}, {"before_ctx": "<%> <+> { </%> <%> <+> } </%> ", "before_line": " if ( e . old _ items ! = null ) { foreach ( var item in e . old _ items ) ", "after_ctx": " <%> <+> foreach ( var item in e . old _ items ) { </%> <%> <+> { </%> <%> <+> } } </%>", "after_line": "if ( e . old _ items ! = null )", "predictions": ["foreach ( var item in e . <%> on items int null int null ref </@> )"]}, {"before_ctx": "<%> <+> public </%> ", "before_line": " int result = 0 ; using ( var subprocess = cef _ sub _ process . create ( args ) ) ", "after_ctx": " <%> <+> public static cef _ sub _ process create ( i _ enumerable < string > args ) { const string type _ prefix = STR ; var type _ argument = args . single _ or _ default ( arg = > arg . starts _ with ( type _ prefix ) ) ; </%>", "after_line": "int result ; using ( var subprocess = create ( args ) )", "predictions": ["using ( var subprocess = cef _ core _ <@> </%> </%> ) ) _ sub _ </@> handler response response _ collection response get _ or )"]}, {"before_ctx": "<%> <-> popup </%> <%> <*> owner . dispatcher . invoke ( ( ) = > -> var chromium _ web _ browser = ( chromium _ web _ browser ) browser ; </%> <%> <+> chromium _ web _ browser . dispatcher . invoke ( ( ) = > { var owner = window . get _ window ( chromium _ web _ browser ) ; if ( owner ! = null & & owner . content = = browser & & ! ( owner is main _ window ) ) </%> ", "before_line": " if ( owner ! = null & & owner . content = = browser & & ! ( owner is main _ window ) ) { owner . show ( ) ; } } ) ; ", "after_ctx": " <%> <*> owner . dispatcher . invoke ( ( ) = > -> var chromium _ web _ browser = ( chromium _ web _ browser ) browser ; </%> <%> <+> chromium _ web _ browser . dispatcher . invoke ( ( ) = > { var owner = window . get _ window ( chromium _ web _ browser ) ; if ( owner ! = null & & owner . content = = browser ) </%>", "after_line": "owner . show ( ) ; } } ) ;", "predictions": ["owner . show ( ) ; } }"]}, {"before_ctx": "<%> <*> owner . dispatcher . invoke ( ( ) = > -> var chromium _ web _ browser = ( chromium _ web _ browser ) browser ; </%> <%> <+> chromium _ web _ browser . dispatcher . invoke ( ( ) = > { var owner = window . get _ window ( chromium _ web _ browser ) ; if ( owner ! = null & & owner . content = = browser ) </%> <%> <-> owner </%> <%> <*> = null & & -> ( </%> <%> <*> . content = = browser -> is main _ window ) </%> ", "before_line": " if ( ! ( owner is main _ window ) ) { owner . close ( ) ; } } } ) ; ", "after_ctx": " ", "after_line": "owner . close ( ) ; } } } ) ;", "predictions": ["owner . close ( ) ; } }"]}, {"before_ctx": " ", "before_line": " if ( managed _ cef _ browser _ adapter ! = null ) { resize _ browser ( ) ; } ", "after_ctx": " <%> <*> ) -> & & managed _ cef _ browser _ adapter ! = null ) </%>", "after_line": "resize _ browser ( ) ;", "predictions": ["resize _ browser ( ) ;"]}, {"before_ctx": "<%> <*> separate -> main </%> <%> <*> opened -> open </%> <%> <-> _ back _ ground _ popup </%> ", "before_line": " else { return bitmap = = null ? null : new bitmap ( bitmap ) ; } ", "after_ctx": " <%> <+> if ( blend = = popup _ blending . popup ) </%> <%> <*> opened -> open </%> <%> <-> else { return bitmap = = null ? null : new bitmap ( bitmap ) ; </%>", "after_line": "return bitmap = = null ? null : new bitmap ( bitmap ) ;", "predictions": ["return bitmap ;"]}, {"before_ctx": " ", "before_line": " void i _ render _ handler . on _ paint ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image ) ", "after_ctx": " <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%>", "after_line": "void i _ render _ handler . on _ paint ( bool is _ popup , rect dirty _ rect , int _ ptr buffer , int width , int height , image image )", "predictions": ["void i _ render _ handler . create _ <%> else ; size , size , int is _ create )"]}, {"before_ctx": "<%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%> ", "before_line": " create _ or _ update _ bitmap ( is _ popup , buffer , dirty _ rect , width , height , image , ref popup _ size , ref popup _ memory _ mapped _ file , ref popup _ memory _ mapped _ view _ accessor ) ; ", "after_ctx": " <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%>", "after_line": "create _ or _ update _ bitmap ( is _ popup , dirty _ rect , buffer , width , height , image , ref popup _ size , ref popup _ memory _ mapped _ file , ref popup _ memory _ mapped _ view _ accessor ) ;", "predictions": ["create _ or _ update _ bitmap resource resource _ > _ update ( is _ type , buffer _ rect _ STR _ <+> _ <+> _ <*> _ -> _ <*> _ ) _ <@> _ -> _ popup . size _ ) . popup . <%> , ( popup . <%> . ) _ get _ modifiers _ file . ; ;"]}, {"before_ctx": "<%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%> ", "before_line": " private void create _ or _ update _ bitmap ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image , ref size current _ size , ref memory _ mapped _ file mapped _ file , ref memory _ mapped _ view _ accessor view _ accessor ) ", "after_ctx": " ", "after_line": "private void create _ or _ update _ bitmap ( bool is _ popup , rect dirty _ rect , int _ ptr buffer , int width , int height , image image , ref size current _ size , ref memory _ mapped _ file mapped _ file , ref memory _ mapped _ view _ accessor view _ accessor )", "predictions": ["private void create _ or _ update _ 0 public bool update _ width , int or _ ptr or ) , int or , int , <+> width , memory memory ; { { resource _ ; _ true ; int ; int memory _ true . int memory _ modifiers . int memory"]}, {"before_ctx": " ", "before_line": " void i _ render _ handler . on _ paint ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image ) ", "after_ctx": " <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%>", "after_line": "void i _ render _ handler . on _ paint ( bool is _ popup , rect dirty _ rect , int _ ptr buffer , int width , int height , image image )", "predictions": ["void i _ render _ handler . null <+> create </%> paint ( ; null new else = <-> )"]}, {"before_ctx": "<%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%> ", "before_line": " create _ or _ update _ bitmap ( is _ popup , buffer , dirty _ rect , width , height , image , ref popup _ size , ref popup _ memory _ mapped _ file , ref popup _ memory _ mapped _ view _ accessor ) ; ", "after_ctx": " <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%>", "after_line": "create _ or _ update _ bitmap ( is _ popup , dirty _ rect , buffer , width , height , image , ref popup _ size , ref popup _ memory _ mapped _ file , ref popup _ memory _ mapped _ view _ accessor ) ;", "predictions": ["create _ or _ update _ bitmap ( is _ ; . & _ owner , dirty ( method , ref , ref _ size , ref _ type , ref _ type _ mapped _ this _ be ) ? <%> , ref _ type _ mapped _ this _ be _ be ) ?"]}, {"before_ctx": "<%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%> ", "before_line": " private void create _ or _ update _ bitmap ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image , ref size current _ size , ref memory _ mapped _ file mapped _ file , ref memory _ mapped _ view _ accessor view _ accessor ) ", "after_ctx": " ", "after_line": "private void create _ or _ update _ bitmap ( bool is _ popup , rect dirty _ rect , int _ ptr buffer , int width , int height , image image , ref size current _ size , ref memory _ mapped _ file mapped _ file , ref memory _ mapped _ view _ accessor view _ accessor )", "predictions": ["private void create _ or _ update _ bitmap ( is is _ width width , int or _ ptr buffer _ ) , int or , int , int width , memory memory , <+> stream <@> _ set _ interface set _ </%> -> _ </%> -> _ </%> -> _ </%> -> _ ; be , <+> ( = </%> . mapped . view . ( </%> . ( </%> -> . </%> . mapped view . </%> _ ( -> ) ) )"]}, {"before_ctx": " ", "before_line": " void i _ render _ handler . on _ paint ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image ) ", "after_ctx": " <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%>", "after_line": "void i _ render _ handler . on _ paint ( bool is _ popup , rect dirty _ rect , int _ ptr buffer , int width , int height , image image )", "predictions": ["void i _ render _ handler . on _ paint ( core is <%> ! ! _ ptr = int , int , int ) _ ( int ) _ )"]}, {"before_ctx": "<%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%> ", "before_line": " create _ or _ update _ bitmap ( is _ popup , buffer , dirty _ rect , width , height , image , ref popup _ size , ref popup _ memory _ mapped _ file , ref popup _ memory _ mapped _ view _ accessor ) ; ", "after_ctx": " <%> <-> , buffer </%> <%> <+> , buffer </%> <%> <+> , rect dirty _ rect </%> <%> <-> , rect dirty _ rect </%>", "after_line": "create _ or _ update _ bitmap ( is _ popup , dirty _ rect , buffer , width , height , image , ref popup _ size , ref popup _ memory _ mapped _ file , ref popup _ memory _ mapped _ view _ accessor ) ;", "predictions": ["create _ or _ update _ bitmap ( is _ set ; : : : : : : & invoke _ invoke _ owner _ var _ mapped ( ; owner _ web , & owner _ var _ mapped ( <+> dirty ( ) -> mapped ( is ( ; ) ) -> dirty ( image _ <%> . ) <-> _ get ( ; owner owner </%> owner _ window ( = view _ get _ window </%> view _ ! _ window _ view ( ; ( ; ) . ( ( ( ( modifiers _ size"]}, {"before_ctx": "<%> <-> , buffer </%> <%> <+> , buffer </%> <%> <-> , buffer </%> <%> <+> , buffer </%> ", "before_line": " private void create _ or _ update _ bitmap ( bool is _ popup , int _ ptr buffer , rect dirty _ rect , int width , int height , image image , ref size current _ size , ref memory _ mapped _ file mapped _ file , ref memory _ mapped _ view _ accessor view _ accessor ) ", "after_ctx": " ", "after_line": "private void create _ or _ update _ bitmap ( bool is _ popup , rect dirty _ rect , int _ ptr buffer , int width , int height , image image , ref size current _ size , ref memory _ mapped _ file mapped _ file , ref memory _ mapped _ view _ accessor view _ accessor )", "predictions": ["private void create _ or _ update _ bitmap ( < is is . </%> _ ptr view _ ref buffer , ) or or or , int width _ ) , int , memory memory , <+> ; <+> ( ( ( int _ file , <+> _ mapped </@> _ </@> ) ) _ true _ <%> window ) )"]}, {"before_ctx": "<%> <*> void on _ loading _ state _ change ( i _ web _ browser browser _ control , i _ browser browser , bool is _ loading , bool can _ go _ back , bool can _ go _ forward ) ; void on _ status _ message ( i _ web _ browser browser _ control , i _ browser browser , string message ) ; -> void on _ address _ changed ( i _ web _ browser browser _ control , address _ changed _ event _ args address _ changed _ args ) ; </%> <%> <+> void on _ loading _ state _ change ( i _ web _ browser browser _ control , loading _ state _ changed _ event _ args loading _ state _ changed _ args ) ; void on _ status _ message ( i _ web _ browser browser _ control , status _ message _ event _ args status _ message _ args ) ; </%> <%> <*> void on _ load _ error ( i _ web _ browser browser _ control , i _ browser browser , load _ error _ event _ args load _ error _ args ) ; -> void on _ load _ error ( i _ web _ browser browser _ control , load _ error _ event _ args load _ error _ args ) ; </%> ", "before_line": " bool on _ before _ browse ( i _ web _ browser browser _ control , i _ browser browser , i _ request request , bool is _ redirect , i _ frame frame ) ; ", "after_ctx": " ", "after_line": "bool on _ before _ browse ( i _ web _ browser browser _ control , i _ browser browser , i _ frame frame , i _ request request , bool is _ redirect ) ;", "predictions": ["bool on _ before _ browse ( i _ web _ browser browser _ control , i _ browser browser , i _ request request , bool is _ redirect , i _ frame frame ) ;"]}, {"before_ctx": "<%> <-> public event property _ changed _ event _ handler property _ changed ; </%> ", "before_line": " managed _ cef _ browser _ adapter . create _ browser ( browser _ settings ? ? new browser _ settings ( ) , handle , browser _ core . address ) ; ", "after_ctx": " <%> <-> browser _ core . </%>", "after_line": "managed _ cef _ browser _ adapter . create _ browser ( browser _ settings ? ? new browser _ settings ( ) , handle , address ) ;", "predictions": ["managed _ cef _ browser _ adapter </%> ( </%> _ size ? _ size <%> </%> int < address _ settings = . . ( address _ settings = . ; is </%> <%> <%> </%> </%> </%> </%> , , address _ memory . _ adapter . ref , , , , </%> </%> _ true ) ;"]}, {"before_ctx": " ", "before_line": " browser _ core . address = browser _ core . address ; ", "after_ctx": " <%> <-> if ( source ! = null ) { create _ offscreen _ browser ( ) ; } </%>", "after_line": "browser _ core . address = address ;", "predictions": ["browser _ core . address = address <-> int int ,"]}, {"before_ctx": "<%> <+> browser _ settings = browser _ settings ? ? new browser _ settings ( ) ; </%> ", "before_line": " managed _ cef _ browser _ adapter . create _ offscreen _ browser ( int _ ptr . zero , browser _ settings ? ? new browser _ settings ( ) , address ) ; ", "after_ctx": " ", "after_line": "managed _ cef _ browser _ adapter . create _ offscreen _ browser ( int _ ptr . zero , browser _ settings , address ) ;", "predictions": ["managed _ cef _ browser _ adapter . create _ offscreen _ ) </%> int _ process ) ;"]}, {"before_ctx": "<%> <-> set { } </%> ", "before_line": " get { return new int [ ] { 1 , 2 , NUM , NUM , NUM , NUM , NUM , NUM } ; } set { } ", "after_ctx": " <%> <-> set { } </%> <%> <-> set { } </%>", "after_line": "get { return new [ ] { 1 , 2 , NUM , NUM , NUM , NUM , NUM , NUM } ; }", "predictions": ["get { return new [ ] { 1 , 2 , NUM _ NUM _ ) ( ) _ NUM _ ) ( object _ . _ _ settings _ settings ) get ( ) ; )"]}, {"before_ctx": "<%> <*> bool osr , bool multi -> abstract </%> <%> <*> threaded -> cef </%> <%> <*> message _ loop -> settings settings </%> <%> <-> var settings = new cef _ settings ( ) ; </%> <%> <-> settings . multi _ threaded _ message _ loop = multi _ threaded _ message _ loop ; settings . external _ message _ pump = ! multi _ threaded _ message _ loop ; </%> ", "before_line": " if ( osr ) { settings . windowless _ rendering _ enabled = true ;  settings . cef _ command _ line _ args . add ( STR , STR ) ; settings . cef _ command _ line _ args . add ( STR , STR ) ; ", "after_ctx": " ", "after_line": "if ( settings . windowless _ rendering _ enabled ) {", "predictions": ["settings . cef _ command _ line _ args . add ( STR var = get _ var . <+> show ) ) ) ) ;"]}, {"before_ctx": "<%> <+> _ control </%> <%> <+> _ control </%> <%> <+> _ control </%> ", "before_line": " if ( ! ( owner is main _ window ) ) { owner . close ( ) ; } ", "after_ctx": " ", "after_line": "owner . close ( ) ;", "predictions": ["owner . close ( ) ;"]}, {"before_ctx": "<%> <-> if ( debugging _ sub _ process ) { var architecture = environment . is _ bit _ process ? STR : STR ; settings . browser _ subprocess _ path = STR + architecture + STR ; } </%> ", "before_line": " if ( ! cef . initialize ( settings , shutdown _ on _ process _ exit : true , perform _ dependency _ check : ! debugging _ sub _ process ) ) ", "after_ctx": " ", "after_line": "if ( ! cef . initialize ( settings , shutdown _ on _ process _ exit : true , perform _ dependency _ check : true ) )", "predictions": ["if ( ! cef . initialize ( settings , shutdown _ on _ ( _ i = true _ is _ , _ exit message true . </@> , _ null _ ( ) . true _ sub _ void ) ) , text ) ,"]}, {"before_ctx": "<%> <*> if ( context . object . get _ type ( ) = = typeof ( dictionary < string , object > ) ) -> var dictionary = ( i _ dictionary < string , object > ) context . object ; </%> <%> <+> if ( dictionary . contains _ key ( property _ name ) ) </%> ", "before_line": " var dictionary = ( dictionary < string , object > ) context . object ; if ( dictionary . contains _ key ( property _ name ) ) { return dictionary [ property _ name ] ; } ", "after_ctx": " ", "after_line": "return dictionary [ property _ name ] ;", "predictions": ["return dictionary [ property _ name ] ;"]}, {"before_ctx": " ", "before_line": " this . is _ loading = isloading ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "is _ loading = isloading ;", "predictions": ["is _ loading = isloading ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . can _ go _ back = can _ go _ back ; this . can _ go _ forward = can _ go _ forward ; this . can _ reload = can _ reload ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "can _ go _ back = can _ go _ back ; can _ go _ forward = can _ go _ forward ; can _ reload = can _ reload ;", "predictions": ["can _ go _ back = can _ go _ back ; settings ( <%> ( ; , ( _ . -> _ </%> factory . _ null exception ( ( _ source ( ) _ source ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . title = title ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "title = title ;", "predictions": ["title = title ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . tooltip _ text = tooltip _ text ; ", "after_ctx": " ", "after_line": "tooltip _ text = tooltip _ text ;", "predictions": ["tooltip _ text = tooltip _ text <@>"]}, {"before_ctx": "<%> <+> { if ( browser ! = null ) </%> ", "before_line": " if ( browser ! = null ) { browser . get _ host ( ) . was _ hidden ( false ) ; } break ; ", "after_ctx": " <%> <+> break ; } </%> <%> <+> { if ( browser ! = null ) </%> <%> <-> if ( browser ! = null ) { </%>", "after_line": "browser . get _ host ( ) . was _ hidden ( false ) ;", "predictions": ["browser . get _ host ( ) . was _ hidden ( get _ </%> var ) add ) ;"]}, {"before_ctx": "<%> <-> if ( browser ! = null ) { </%> <%> <-> } break ; </%> <%> <+> break ; } </%> <%> <+> { if ( browser ! = null ) </%> ", "before_line": " if ( browser ! = null ) { browser . get _ host ( ) . was _ hidden ( true ) ; } break ; ", "after_ctx": " <%> <+> break ; } </%>", "after_line": "browser . get _ host ( ) . was _ hidden ( true ) ;", "predictions": ["browser . get _ host ( ) . was _ hidden ( ? ) ) ) ( <*> ) ) ;"]}, {"before_ctx": " ", "before_line": " lock ( sync ) { interop _ bitmap = null ; } ", "after_ctx": " <%> <+> var bitmap = interop _ bitmap ; </%> <%> <*> sync ) -> render _ client _ adapter . bitmap _ lock ) </%> <%> <-> interop _ </%>", "after_line": "interop _ bitmap = null ;", "predictions": ["interop _ bitmap = null ;"]}, {"before_ctx": "<%> <*> var notify _ dpi _ changed = ! matrix . equals ( source . composition _ target . transform _ to _ device ) ; matrix = source . composition _ target . transform _ to _ device ; -> var matrix = source . composition _ target . transform _ to _ device ; </%> <%> <+> var notify _ dpi _ changed = dpi _ scale _ factor > 0 & & ! dpi _ scale _ factor . equals ( matrix . ) ; dpi _ scale _ factor = source . composition _ target . transform _ to _ device . ; </%> <%> <*> ) -> & & browser ! = null ) </%> ", "before_line": " if ( browser ! = null ) { browser . get _ host ( ) . notify _ screen _ info _ changed ( ) ; } ", "after_ctx": " ", "after_line": "browser . get _ host ( ) . notify _ screen _ info _ changed ( ) ;", "predictions": ["browser . get _ host ( ) . notify _ screen _ info _ <+> ;"]}, {"before_ctx": "<%> <-> var wcf _ enabled _ argument = args . single _ or _ default ( arg = > arg . starts _ with ( cef _ sharp _ arguments . wcf _ enabled _ argument ) ) ; </%> <%> <-> var wcf _ enabled = wcf _ enabled _ argument ! = default ( string ) ; </%> ", "before_line": " return wcf _ enabled ? new cef _ wcf _ render _ process ( args ) : new cef _ render _ process ( args ) ; ", "after_ctx": " ", "after_line": "return new cef _ render _ process ( args ) ;", "predictions": ["return new cef _ render _ process ( args , new cef _ ) ( args _ null result ) new"]}, {"before_ctx": "<%> <-> set { } </%> ", "before_line": " get { return new int [ ] { 1 , 2 , NUM , NUM , NUM , NUM , NUM , NUM } ; } set { } ", "after_ctx": " <%> <-> set { } </%> <%> <-> set { } </%>", "after_line": "get { return new [ ] { 1 , 2 , NUM , NUM , NUM , NUM , NUM , NUM } ; }", "predictions": ["get { return new [ ] { 1 , 2 , NUM , . . NUM _ ) _ STR _ NUM _ NUM _ object result <*> <*> <*> = <*> ; <%> . <%> [ settings ) ;"]}, {"before_ctx": "<%> <+> ignore _ uri _ change = false ; } </%> ", "before_line": " uri = browser _ core . address ; ", "after_ctx": " ", "after_line": "address = browser _ core . address ;", "predictions": ["uri = browser _ core . address this this ( ;"]}, {"before_ctx": "<%> <+> public static task < double > get _ zoom _ level _ async ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; return host . get _ zoom _ level _ async ( ) ; } </%> ", "before_line": " throw _ exception _ if _ browser _ null ( cef _ browser ) ; var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; return host . get _ zoom _ level _ async ( ) ; ", "after_ctx": " <%> <+> public static void set _ zoom _ level ( this i _ browser cef _ browser , double zoom _ level ) { throw _ exception _ if _ browser _ null ( cef _ browser ) ; var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . set _ zoom _ level ( zoom _ level ) ; } </%>", "after_line": "return cef _ browser . get _ zoom _ level _ async ( ) ;", "predictions": ["throw _ exception _ if _ browser _ null ( cef _ browser ) ;"]}, {"before_ctx": "<%> <+> cef _ browser . find ( identifier , search _ text , forward , match _ case , find _ next ) ; } public static void stop _ finding ( this i _ browser cef _ browser , bool clear _ selection ) { </%> <%> <*> find ( identifier , search _ text , forward , match -> stop </%> <%> <*> case , find -> finding ( clear </%> <%> <*> next -> selection </%> ", "before_line": " var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . stop _ finding ( clear _ selection ) ; ", "after_ctx": " <%> <+> public static void print ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . print ( ) ; } </%>", "after_line": "cef _ browser . stop _ finding ( clear _ selection ) ;", "predictions": ["host . stop _ finding ( cef _ browser ) ;"]}, {"before_ctx": "<%> <+> public static void print ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . print ( ) ; } </%> ", "before_line": " var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . print ( ) ; ", "after_ctx": " <%> <+> public static void show _ dev _ tools ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . show _ dev _ tools ( ) ; } </%>", "after_line": "cef _ browser . print ( ) ;", "predictions": ["host . print ( cef _ browser . get _ host ( ) = ! ! _ browser . = get _ ) ;"]}, {"before_ctx": "<%> <+> public static void show _ dev _ tools ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . show _ dev _ tools ( ) ; } </%> ", "before_line": " var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . show _ dev _ tools ( ) ; ", "after_ctx": " <%> <+> public static void close _ dev _ tools ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . close _ dev _ tools ( ) ; } </%>", "after_line": "cef _ browser . show _ dev _ tools ( ) ;", "predictions": ["throw _ exception _ if _ browser _ host _ null ( cef _ , ) ; _ ) ;"]}, {"before_ctx": "<%> <+> public static void close _ dev _ tools ( this i _ browser cef _ browser ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . close _ dev _ tools ( ) ; } </%> ", "before_line": " var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . close _ dev _ tools ( ) ; ", "after_ctx": " <%> <+> public static void replace _ misspelling ( this i _ browser cef _ browser , string word ) { var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . replace _ misspelling ( word ) ; } </%>", "after_line": "cef _ browser . close _ dev _ tools ( ) ;", "predictions": ["throw _ exception _ if _ browser _ host _ null ( cef _ browser ) ;"]}, {"before_ctx": "<%> <+> cef _ browser . replace _ misspelling ( word ) ; } public static void add _ word _ to _ dictionary ( this i _ browser cef _ browser , string word ) { </%> <%> <*> replace -> add _ word _ to </%> <%> <*> misspelling -> dictionary </%> ", "before_line": " var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ; host . add _ word _ to _ dictionary ( word ) ; ", "after_ctx": " ", "after_line": "cef _ browser . add _ word _ to _ dictionary ( word ) ;", "predictions": ["throw _ exception _ if _ browser _ host _ dictionary ( context callback callback ( ? </%> = = ; ) . get _ . ) . if add . static ) . = host . = _ , _ null _ if ( ; ; ; _ ) ; ; ; ; level _ host ( _ null _ if ( ; ; ; ;"]}, {"before_ctx": "<%> <-> } </%> <%> <*> return is _ browser _ initialized ? managed _ cef _ browser _ adapter . get _ main _ frame ( ) : null ; -> this . throw _ exception _ if _ browser _ not _ initialized ( ) ; </%> <%> <+> return managed _ cef _ browser _ adapter . get _ main _ frame ( ) ; </%> ", "before_line": " return is _ browser _ initialized ? managed _ cef _ browser _ adapter . get _ focused _ frame ( ) : null ; ", "after_ctx": " <%> <*> return is _ browser _ initialized ? -> return </%> <%> <-> : null </%>", "after_line": "return managed _ cef _ browser _ adapter . get _ focused _ frame ( ) ;", "predictions": ["return managed _ cef _ browser _ adapter . get _ focused _ id <%> ) -> ) = </%> & </%>"]}, {"before_ctx": "<%> <*> return is _ browser _ initialized ? managed _ cef _ browser _ adapter . get _ main _ frame ( ) : null ; -> this . throw _ exception _ if _ browser _ not _ initialized ( ) ; </%> <%> <+> return managed _ cef _ browser _ adapter . get _ main _ frame ( ) ; </%> <%> <*> return is _ browser _ initialized ? -> return </%> <%> <-> : null </%> ", "before_line": " return is _ browser _ initialized ? managed _ cef _ browser _ adapter . get _ browser ( ) : null ; ", "after_ctx": " ", "after_line": "return managed _ cef _ browser _ adapter . get _ browser ( ) ;", "predictions": ["return managed _ cef _ browser _ adapter . get _ browser ( return null </%> null ; message message . throw ; _ target _ host _ get ;"]}, {"before_ctx": "<%> <+> var modifiers = e . get _ modifiers ( ) ; </%> ", "before_line": " modifiers : cef _ event _ flags . none ) ; ", "after_ctx": " ", "after_line": "modifiers : modifiers ) ;", "predictions": ["modifiers : modifiers ;"]}, {"before_ctx": "<%> <*> public -> private </%> ", "before_line": " return wcf _ enabled ? new cef _ render _ process ( args ) : new cef _ sub _ process ( ) ; ", "after_ctx": " <%> <+> args </%>", "after_line": "return wcf _ enabled ? new cef _ render _ process ( args ) : new cef _ sub _ process ( args ) ;", "predictions": ["return new cef _ sub _ process ( args ) -> = </%> </@>"]}, {"before_ctx": " ", "before_line": " internal sealed class javascript _ callback _ surrogate : javascript _ callback _ factory , i _ data _ contract _ surrogate ", "after_ctx": " <%> <*> public -> private readonly i _ </%> <%> <*> surrogate ( weak -> factory callback </%> <%> <*> reference browser _ process _ weak _ reference ) : base -> factory ; public javascript _ callback _ surrogate </%> <%> <*> browser -> i </%> <%> <*> process -> javascript </%> <%> <*> weak -> callback _ factory callback </%> <%> <*> reference -> factory </%> <%> <+> this . callback _ factory = callback _ factory ; </%>", "after_line": "internal sealed class javascript _ callback _ surrogate : i _ data _ contract _ surrogate", "predictions": ["internal sealed class javascript _ callback _ surrogate : i _ data _ if _ ;"]}, {"before_ctx": "<%> <*> private task _ factory factory ; public win _ forms _ browser _ process _ handler ( task _ scheduler scheduler ) -> public win _ forms _ browser _ process _ handler ( i _ container components ) </%> <%> <*> factory = new task _ factory ( scheduler ) ; timer = new timer { interval = max _ timer _ delay , auto _ reset = true } ; -> timer = new timer ( components ) { interval = sixty _ times _ per _ second } ; </%> <%> <*> elapsed -> tick </%> ", "before_line": " factory . start _ new ( ( ) = > cef . do _ message _ loop _ work ( ) ) ; ", "after_ctx": " ", "after_line": "cef . do _ message _ loop _ work ( ) ;", "predictions": ["cef . do _ message _ loop _ work ( ) ;"]}, {"before_ctx": "<%> <*> object -> bool </%> <%> <+> , out object result </%> ", "before_line": " object result ; javascript _ object _ repository . try _ call _ method ( object _ id , name , parameters , out result ) ; return result ; ", "after_ctx": " <%> <*> object -> bool </%> <%> <+> , out object result </%> <%> <*> object result ; javascript _ object _ repository . try _ get _ property ( object _ id , name , out result ) ; return result ; -> return javascript _ object _ repository . try _ get _ property ( object _ id , name , out result ) ; </%> <%> <*> void -> bool </%>", "after_line": "return javascript _ object _ repository . try _ call _ method ( object _ id , name , parameters , out result ) ;", "predictions": ["return javascript _ object _ repository . try _ call _ method ( ( _ id . <%> ) ) ; _ host _ var get _ call ( , <*> _ throw , ) ) ) ) ;"]}, {"before_ctx": "<%> <*> object -> bool </%> <%> <+> , out object result </%> <%> <*> object result ; javascript _ object _ repository . try _ call _ method ( object _ id , name , parameters , out result ) ; return result ; -> return javascript _ object _ repository . try _ call _ method ( object _ id , name , parameters , out result ) ; </%> <%> <*> object -> bool </%> <%> <+> , out object result </%> ", "before_line": " object result ; javascript _ object _ repository . try _ get _ property ( object _ id , name , out result ) ; return result ; ", "after_ctx": " <%> <*> void -> bool </%> <%> <+> return </%>", "after_line": "return javascript _ object _ repository . try _ get _ property ( object _ id , name , out result ) ;", "predictions": ["return javascript _ object _ repository . try _ get _ property ( </%> _ if ( get _ if _ open ( ( . if ( get _ exception ( -> _ if ( get _ -> ( <%> _ if ( -> entry entry ) entry ( -> ( -> ( -> ( -> entry ) ) ) ) ) ) ;"]}], "duplicati": [{"before_ctx": "<%> <+> m _ instance . padding = system . security . cryptography . padding _ mode . pkc ; </%> <%> <*> public override void encrypt ( system . io . stream input , system . io . stream output ) -> public override string filename _ extension { get { return STR ; } } </%> <%> <+> public override system . io . stream encrypt ( system . io . stream input ) </%> <%> <*> using ( system . security . cryptography . crypto _ stream cs = new system . security . cryptography . crypto _ stream ( output , ct , system . security . cryptography . crypto _ stream _ mode . write ) ) { core . utility . copy _ stream ( input , cs ) ; cs . flush _ final _ block ( ) ; } -> return new crypto _ stream _ wrapper ( new system . security . cryptography . crypto _ stream ( input , ct , system . security . cryptography . crypto _ stream _ mode . write ) ) ; </%> ", "before_line": " public override void decrypt ( system . io . stream input , system . io . stream output ) ", "after_ctx": " <%> <*> using ( system . security . cryptography . crypto _ stream cs = new system . security . cryptography . crypto _ stream ( input , ct , system . security . cryptography . crypto _ stream _ mode . read ) ) core . utility . copy _ stream ( cs , output ) ; -> return new system . security . cryptography . crypto _ stream ( input , ct , system . security . cryptography . crypto _ stream _ mode . read ) ; </%>", "after_line": "public override system . io . stream decrypt ( system . io . stream input )", "predictions": ["public override void decrypt ( stream input , stream output )"]}, {"before_ctx": "<%> <*> public override void encrypt ( system . io . stream input , system . io . stream output ) -> public override string filename _ extension { get { return STR ; } } </%> <%> <+> public override system . io . stream encrypt ( system . io . stream input ) </%> <%> <+> return </%> <%> <*> output -> true </%> ", "before_line": " public override void decrypt ( system . io . stream input , system . io . stream output ) ", "after_ctx": " <%> <+> return </%> <%> <*> output -> false </%> <%> <*> void -> system . io . stream </%> <%> <*> system . io . stream output -> bool encrypt </%>", "after_line": "public override system . io . stream decrypt ( system . io . stream input )", "predictions": ["public override void decrypt ( stream input , system . io . ; -> < <*> < <*> < <*> < object < > < ) < <*> < <*> < <*> < <*> <%> item > item item item )"]}, {"before_ctx": "<%> <+> . any ( </%> <%> <+> ) </%> ", "before_line": " new _ opts [ STR ] = true ; ", "after_ctx": " ", "after_line": "new _ opts [ STR ] = STR ;", "predictions": ["new _ opts [ STR ] = true <->"]}, {"before_ctx": "<%> <*> ) ) -> , string _ comparison . invariant _ culture _ ignore _ case ) & & s . name . ends _ with ( suffix , string _ comparison . invariant _ culture _ ignore _ case ) ) </%> ", "before_line": " var missing = new list < key _ value _ pair < remote _ volume _ entry , library . interface . i _ file _ entry > > ( ) ; ", "after_ctx": " ", "after_line": "var missing = new list < key _ value _ pair < remote _ volume _ entry , i _ file _ entry > > ( ) ;", "predictions": ["var missing = new list < remote _ volume _ entry private remote _ volume _ entry , ;"]}, {"before_ctx": " ", "before_line": " public void post ( string key , request _ info info ) { patch ( key , info ) ; } public void patch ( string key , request _ info info ) ", "after_ctx": " <%> <+> patch ( key , info ) ; } public void patch ( string key , request _ info info ) { </%>", "after_line": "public void post ( string key , request _ info info )", "predictions": ["public void post ( string key , request </%> , options , _ . patch . <+> STR ( <+> STR <-> ; }"]}, {"before_ctx": "<%> <-> system . io . </%> <%> <+> if ( m _ is _ writing ) </%> <%> <*> if ( m -> throw new invalid </%> <%> <*> zip = = null -> operation _ exception ( STR </%> <%> <+> ; </%> <%> <*> throw new exception ( strings . file -> i </%> <%> <*> zip . attempt _ read _ while -> entry ze = get </%> <%> <*> writing _ error -> entry ( file </%> <%> <*> ic _ sharp _ code . sharp _ zip _ lib . zip . zip _ entry ze = get _ entry ( file ) ; -> return ze = = null ? null : ze . open _ entry _ stream ( ) ; </%> <%> <-> if ( ze = = null ) return null ; else if ( ze . size = = 0 ) return new zerobyte _ stream ( ) ; else return m _ zip . get _ input _ stream ( ze ) ; </%> ", "before_line": " public system . io . stream open _ write ( string file ) ", "after_ctx": " <%> <*> system . io . stream -> var </%>", "after_line": "public stream open _ write ( string file )", "predictions": ["public stream open _ write ( string file )"]}, {"before_ctx": " ", "before_line": " using ( sftp _ con con = create _ managed _ connection ( true ) ) con . put ( get _ full _ path ( remotename ) , stream ) ; ", "after_ctx": " <%> <*> using ( sftp _ con con = create _ managed _ connection ( true ) ) con . get ( get _ full _ path ( remotename ) , stream ) ; -> create _ managed _ connection ( true ) . get ( get _ full _ path ( remotename ) , stream ) ; </%>", "after_line": "create _ managed _ connection ( true ) . put ( get _ full _ path ( remotename ) , stream ) ;", "predictions": ["con . put ( get _ full _ path ( remotename ) system </%> <+> <+> , <+> , . , ) out"]}, {"before_ctx": "<%> <*> using ( sftp _ con con = create _ managed _ connection ( true ) ) con . put ( get _ full _ path ( remotename ) , stream ) ; -> create _ managed _ connection ( true ) . put ( get _ full _ path ( remotename ) , stream ) ; </%> ", "before_line": " using ( sftp _ con con = create _ managed _ connection ( true ) ) con . get ( get _ full _ path ( remotename ) , stream ) ; ", "after_ctx": " ", "after_line": "create _ managed _ connection ( true ) . get ( get _ full _ path ( remotename ) , stream ) ;", "predictions": ["con . get ( get _ full _ path ( remotename ) , stream </%> <*> </%> </%> </%> </%> ) <*>"]}, {"before_ctx": " ", "before_line": " else return run _ from _ most _ recent _ spawn ( method , cmdargs , defaultstrategy ) ; ", "after_ctx": " <%> <-> if ( disable _ update _ domain ) </%>", "after_line": "return run _ from _ most _ recent _ spawn ( method , cmdargs , defaultstrategy ) ;", "predictions": ["return run _ from _ most _ recent , } io ) <+>"]}, {"before_ctx": "<%> <+> , string _ comparer . ordinal _ ignore _ case </%> <%> <+> . key , sc . value </%> ", "before_line": " known _ storage _ classes = ns . to _ array ( ) ; ", "after_ctx": " ", "after_line": "known _ storage _ classes = ns ;", "predictions": ["known _ storage _ classes = ns ;"]}, {"before_ctx": "<%> <+> commandline _ options . contains _ key ( STR ) ? </%> <%> <+> : false </%> ", "before_line": " program . use _ database _ encryption = ! ( commandline _ options . contains _ key ( STR ) ? library . utility . utility . parse _ bool _ option ( commandline _ options , STR ) : true ) ; ", "after_ctx": " ", "after_line": "program . use _ database _ encryption = ! library . utility . utility . parse _ bool _ option ( commandline _ options , STR ) ;", "predictions": ["program . use _ database _ encryption = ! </%> </%> ; _ var , </%> . </%> . new new key _ <@> _ option ) ; ; _ . stream ;"]}, {"before_ctx": " ", "before_line": " var sshfolder = client . list _ directory ( STR ) . where ( x = > x . name = = STR ) . first ( ) ; ", "after_ctx": " <%> <*> where -> any </%> <%> <-> ) . any ( </%>", "after_line": "var sshfolder = client . list _ directory ( STR ) . first ( x = > x . name = = STR ) ;", "predictions": ["var sshfolder = client . list _ directory ( first ( <*> ) keys <%> <%> . new , ( ; , _ ( options . name <-> <-> core ) ) name"]}, {"before_ctx": "<%> <*> where -> first </%> <%> <-> ) . first ( </%> ", "before_line": " var existing _ authorized _ keys = client . list _ directory ( ssh _ folder ) . where ( x = > x . name = = authorized _ keys _ file ) . any ( ) ; ", "after_ctx": " ", "after_line": "var existing _ authorized _ keys = client . list _ directory ( ssh _ folder ) . any ( x = > x . name = = authorized _ keys _ file ) ;", "predictions": ["var existing _ authorized _ keys = client <%> . list . request ) target target target null : client . <@> </@> <-> to <%> ) ) ) ) ;"]}, {"before_ctx": " ", "before_line": " i _ node parent = nodes . where ( x = > x . type = = node _ type . root ) . first ( ) ; ", "after_ctx": " <%> <*> where -> first _ or _ default </%> <%> <*> . first _ or _ default ( ) ; -> ; </%>", "after_line": "i _ node parent = nodes . first ( x = > x . type = = node _ type . root ) ;", "predictions": ["i _ node parent = nodes . first ) ( exception <%> </%> </%> > ( > ) , </%> m . utility ( </%> list _ type ( root <*> < root _ bool = ) get get ;"]}, {"before_ctx": " ", "before_line": " var cur = notifications . where ( x = > x . id = = id ) . first _ or _ default ( ) ; ", "after_ctx": " <%> <*> where -> any </%> <%> <-> ) . any ( </%> <%> <*> where -> any </%> <%> <-> ) . any ( </%>", "after_line": "var cur = notifications . first _ or _ default ( x = > x . id = = id ) ;", "predictions": ["var cur = notifications . first _ or default x <*> <*> ; <%> ] ]"]}, {"before_ctx": "<%> <+> async </%> <%> <-> system . io . </%> <%> <+> await </%> <%> <+> _ async </%> <%> <+> , cancel _ token </%> ", "before_line": " throw new interface . folder _ missing _ exception ( ex ) ; ", "after_ctx": " <%> <-> return task . from _ result ( true ) ; </%>", "after_line": "throw new folder _ missing _ exception ( ex ) ;", "predictions": ["throw new folder _ missing _ exception ( ex _ token _ ) ) ; ,"]}, {"before_ctx": " ", "before_line": " using ( var backend = new fh _ backend ( m _ backendurl , m _ options , restoredb , m _ stat , null ) ) ", "after_ctx": " <%> <-> & & n . encryption _ module = = ( m _ options . no _ encryption ? null : m _ options . encryption _ module ) </%>", "after_line": "using ( var backend = new fh _ backend ( m _ backendurl , m _ options , m _ stat , restoredb ) )", "predictions": ["using ( var backend = new fh _ backend <+> <%> . = . fh </%> </%> . stat </%> <+> , null <*> & <@> = m _ </%> options = </%> _ stat )"]}, {"before_ctx": "<%> <-> } </%> ", "before_line": " lock ( m _ lock ) { using ( var tr = new temporary _ transaction _ wrapper ( m _ connection , transaction ) ) { ", "after_ctx": " <%> <-> } </%>", "after_line": "using ( var tr = new temporary _ transaction _ wrapper ( m _ connection , transaction ) ) {", "predictions": ["using ( var tr = new temporary _ file _ wrapper io m . </@> _ </@> ) async <+> info"]}, {"before_ctx": " ", "before_line": " using ( var backend = new fh _ backend ( m _ backendurl , m _ options , db , m _ stat , null ) ) ", "after_ctx": " <%> <*> var filename = fileset . file . name -> list < string > res </%> <%> <*> filename -> fileset . file . name </%> <%> <*> filename -> fileset . file . name </%> <%> <*> - 1 -> fileset . file . size </%>", "after_line": "using ( var backend = new fh _ backend ( m _ backendurl , m _ options , m _ stat , db ) )", "predictions": ["using ( var backend = new fh _ backend ( culture < io m full . options ( full . options ( null ( extension object object object object object object object object object object ) object </@> . stat object void . ( state . { list </%> </%> </%> . id </%> task . id </%> task . id long task long long null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null"]}, {"before_ctx": "<%> <+> , null </%> ", "before_line": " using ( var backend = new fh _ backend ( m _ backendurl , m _ options , database , m _ stat , null ) ) ", "after_ctx": " ", "after_line": "using ( var backend = new fh _ backend ( m _ backendurl , m _ options , m _ stat , database ) )", "predictions": ["using ( var backend = new fh _ </%> ( , . backendurl . ) . </@> . ( database <%> <@> _ <@> . options _ </@> STR _ core log _ <-> . _ = . true _ backendurl ) stream"]}, {"before_ctx": " ", "before_line": " using ( var tr = db . begin _ transaction ( ) ) using ( var backend = new fh _ backend ( m _ backendurl , m _ options , db , m _ stat , tr ) ) ", "after_ctx": " <%> <-> var extra = tp . item . to _ list ( ) ; var missing = tp . item . to _ list ( ) ; </%>", "after_line": "using ( var backend = new fh _ backend ( m _ backendurl , m _ options , m _ stat , db ) )", "predictions": ["using ( var backend = db . begin _ res , file _ options = db _ level = <+> _ options get get get ) </%> <%> </%> <*> . _ false stream </%>"]}, {"before_ctx": "<%> <*> public runner _ state active _ backup _ state { get { } public long active _ schedule _ id -> public tuple < long , string > active _ task </%> ", "before_line": " if ( t = = null | | t . item ! = duplicati _ operation . backup ) return - 1 ; ", "after_ctx": " <%> <*> return -> return new tuple < long , string > ( t . task _ id , </%> <%> <*> item -> backup . id ) </%> <%> <+> < tuple </%> <%> <+> , string > </%> <%> <*> item = -> backup ! </%> <%> <*> duplicati -> null select new tuple < long , string > ( n . task </%> <%> <*> operation -> id , n </%> <%> <-> select n </%> <%> <*> item -> id </%> <%> <+> ) </%>", "after_line": "if ( t = = null | | t . backup = = null ) return null ;", "predictions": ["if ( t = = null | | t . item ! = ( copy stream , input new input , input new utility new { <*> utility ) ) -> using utility void security void utility new input , override <*> , ) void using utility void security stream"]}, {"before_ctx": " ", "before_line": " using ( system . io . file _ stream fs = system . io . file . open _ read ( filename ) ) ", "after_ctx": " <%> <-> system . io . </%> <%> <-> system . io . </%>", "after_line": "using ( file _ stream fs = file . open _ read ( filename ) )", "predictions": ["using ( file _ stream fs = file . </@> -> <%> ( or = ;"]}, {"before_ctx": "<%> <-> system . io . </%> <%> <-> system . io . </%> ", "before_line": " using ( system . io . file _ stream fs = system . io . file . create ( filename ) ) ", "after_ctx": " ", "after_line": "using ( file _ stream fs = file . create ( filename ) )", "predictions": ["using ( file _ stream fs = file _ create . where . x ( type ) )"]}, {"before_ctx": "<%> <+> private bool m _ has _ enabled _ background _ io _ priority ; </%> <%> <+> private int m _ original _ nice _ level ; private int m _ original _ nice _ class ; private win . io _ priority _ hint m _ original _ win _ priority _ class ; private bool m _ has _ started _ background _ mode = false ; </%> ", "before_line": " m _ options = options ; if ( m _ options = = null ) ", "after_ctx": " <%> <+> options </%>", "after_line": "if ( options = = null )", "predictions": ["if ( options = = null )"]}, {"before_ctx": " ", "before_line": " temp _ file ret _ target , dl _ target = null , decrypt _ target = null ; ", "after_ctx": " <%> <-> dl _ target = new temp _ file ( ) ; </%> <%> <-> { </%> <%> <-> m _ backend . get ( item . remote _ filename , dl _ target ) ; } </%>", "after_line": "temp _ file ret _ target = null , dl _ target = null , decrypt _ target = null ;", "predictions": ["temp _ file = null ;"]}, {"before_ctx": "<%> <+> duplicati . library . </%> <%> <+> . library </%> <%> <+> duplicati . library . </%> <%> <+> . library </%> ", "before_line": " using ( core . temp _ folder ttf = new duplicati . core . temp _ folder ( ) ) ", "after_ctx": " <%> <-> logging . </%> <%> <+> . library </%> <%> <-> logging . </%>", "after_line": "using ( temp _ folder ttf = new temp _ folder ( ) )", "predictions": ["using ( core . temp _ folder ttf = ; key <+> current core m m <%> _ item )"]}, {"before_ctx": "<%> <-> core . </%> <%> <-> duplicati . core . </%> <%> <-> logging . </%> <%> <+> . library </%> ", "before_line": " using ( new logging . timer ( STR + folders [ i ] ) ) ", "after_ctx": " <%> <-> logging . </%> <%> <-> logging . </%> <%> <-> logging . </%> <%> <-> core . </%>", "after_line": "using ( new timer ( STR + folders [ i ] ) )", "predictions": ["using ( new timer ( STR + folders } = <@> temp ) ) temp ) )"]}, {"before_ctx": "<%> <-> logging . </%> <%> <+> . library </%> <%> <-> logging . </%> ", "before_line": " ( logging . log . current _ log as logging . stream _ log ) . dispose ( ) ; logging . log . current _ log = null ; ", "after_ctx": " <%> <-> core . </%> <%> <-> core . </%> <%> <-> core . </%> <%> <-> core . </%>", "after_line": "( log . current _ log as stream _ log ) . dispose ( ) ; log . current _ log = null ;", "predictions": ["( logging . log . current _ log as </@> m m file ) ) case ) _ entry _ entry <+> ( ( -> ; ( <%> ;"]}, {"before_ctx": "<%> <*> backend -> interface </%> <%> <*> backend -> interface </%> ", "before_line": " public static void print _ argument ( list < string > lines , duplicati . library . backend . i _ command _ line _ argument arg ) ", "after_ctx": " <%> <+> if ( arg . deprecated ) lines . add ( STR + strings . command _ line _ argument . deprecation _ marker + STR + arg . deprecation _ message ) ; </%>", "after_line": "public static void print _ argument ( list < string > lines , i _ command _ line _ argument arg )", "predictions": ["public static void print _ argument ( list < string > <%> if static <%> )"]}, {"before_ctx": "<%> <*> var conopts = new dictionary < string , string > ( m _ options . raw _ options ) ; -> var pristinefilter = string . join ( system . io . path . path _ separator . to _ string ( ) , filter _ expression . serialize ( filter ) ) ; m _ options . raw _ options [ STR ] = pristinefilter ; </%> <%> <-> conopts [ ( string ) k ] = qp [ ( string ) k ] ; </%> <%> <*> var pristinefilter = conopts [ STR ] = string . join ( system . io . path . path _ separator . to _ string ( ) , filter _ expression . serialize ( filter ) ) ; -> m _ options . raw _ options [ ( string ) k ] = qp [ ( string ) k ] ; </%> ", "before_line": " if ( mx . value is library . interface . i _ connection _ module ) mx . value . configure ( conopts ) ; else mx . value . configure ( m _ options . raw _ options ) ; ", "after_ctx": " ", "after_line": "mx . value . configure ( m _ options . raw _ options ) ;", "predictions": ["mx . value . configure ( conopts ) ;"]}, {"before_ctx": "<%> <*> fhopts -> m _ options </%> ", "before_line": " var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; forest _ hash . forest _ hash . restore ( m _ backend , fhopts , rs , target [ 0 ] ) ; ", "after_ctx": " <%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , fhopts , rs , target ) ) -> using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , m _ options , rs , target ) ) </%>", "after_line": "forest _ hash . forest _ hash . restore ( m _ backend , m _ options , rs , target [ 0 ] ) ;", "predictions": ["var fhopts = new forest _ hash . fh _ options ( ; = = ;"]}, {"before_ctx": "<%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; forest _ hash . forest _ hash . restore ( m _ backend , fhopts , rs , target [ 0 ] ) ; -> forest _ hash . forest _ hash . restore ( m _ backend , m _ options , rs , target [ 0 ] ) ; </%> ", "before_line": " var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , fhopts , rs , target ) ) ", "after_ctx": " <%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , fhopts , rs ) ) -> using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , m _ options , rs ) ) </%>", "after_line": "using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , m _ options , rs , target ) )", "predictions": ["using ( var handler = new restore _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler active null ( null ( | _ ) . key ( | _ ) . key ( | _ ) ( ] ( rs ( -> , -> , -> , -> , -> , -> , var , -> , -> , -> , rs , -> , -> , -> , rs , -> , var , -> , -> ) , -> , var ( rs ( -> _ options"]}, {"before_ctx": "<%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , fhopts , rs , target ) ) -> using ( var handler = new forest _ hash . operation . restore _ control _ files _ handler ( m _ backend , m _ options , rs , target ) ) </%> ", "before_line": " var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , fhopts , rs ) ) ", "after_ctx": " <%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , fhopts , rs ) ) -> using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , m _ options , rs ) ) </%>", "after_line": "using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , m _ options , rs ) )", "predictions": ["using ( var handler = new delete _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new delete _ handler ( m _ backend . raw _ options ) )"]}, {"before_ctx": "<%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , fhopts , rs ) ) -> using ( var handler = new forest _ hash . operation . delete _ handler ( m _ backend , m _ options , rs ) ) </%> ", "before_line": " var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , fhopts , rs ) ) ", "after_ctx": " <%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . list _ files _ handler ( m _ backend , fhopts , rs ) ) -> using ( var handler = new forest _ hash . operation . list _ files _ handler ( m _ backend , m _ options , rs ) ) </%>", "after_line": "using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , m _ options , rs ) )", "predictions": ["using ( var handler = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( new handler _ handler . repair _ handler , hash _ ; handler m options ( handler _ ; options ( var ( rs ( ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = ] = new = ] = ] ) = new = ] = new"]}, {"before_ctx": "<%> <*> var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , fhopts , rs ) ) -> using ( var handler = new forest _ hash . operation . repair _ handler ( m _ backend , m _ options , rs ) ) </%> ", "before_line": " var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . list _ files _ handler ( m _ backend , fhopts , rs ) ) ", "after_ctx": " ", "after_line": "using ( var handler = new forest _ hash . operation . list _ files _ handler ( m _ backend , m _ options , rs ) )", "predictions": ["using ( var handler = new forest _ hash . fh _ ( , m _ ( m ) , file _ + ;"]}, {"before_ctx": "<%> <+> if ( string . is _ null _ or _ empty ( m _ options . fhdbpath ) ) m _ options . fhdbpath = forest _ hash . database _ locator . get _ database _ path ( m _ backend , m _ options ) ; </%> ", "before_line": " var fhopts = new forest _ hash . fh _ options ( m _ options . raw _ options ) ; using ( var handler = new forest _ hash . operation . find _ last _ file _ version _ handler ( m _ backend , fhopts , rs ) ) ", "after_ctx": " ", "after_line": "using ( var handler = new forest _ hash . operation . find _ last _ file _ version _ handler ( m _ backend , m _ options , rs ) )", "predictions": ["using ( var handler = new forest _ hash . fh _ source ( ref _ source . options _ , ) hash ( using handler ; files 0 = builder . configure . configure _ last ) )"]}, {"before_ctx": " ", "before_line": " var writer _ guids = new guid [ ] { hyper _ v _ writer _ guid } ; ", "after_ctx": " <%> <-> duplicati . library . </%>", "after_line": "var writer _ guids = new [ ] { hyper _ v _ writer _ guid } ;", "predictions": ["var writer _ guids = new guid [ ] { ; </%> full ;"]}, {"before_ctx": " ", "before_line": " if ( operation _ progress ! = null ) operation _ progress ( this , duplicati _ operation . backup , - 1 , - 1 , strings . interface . status _ loading _ filelist , STR ) ; ", "after_ctx": " <%> <+> backend . progress _ event + = new duplicati . library . main . r _ sync . r _ sync _ dir . progress _ event _ delegate ( backup _ transfer _ progress _ event ) ; </%>", "after_line": "operation _ progress ( this , duplicati _ operation . backup , - 1 , - 1 , strings . interface . status _ loading _ filelist , STR ) ;", "predictions": ["operation _ progress ( this , duplicati _ operation . async </%> </%> collections current </%> collections current </%> options . interface . status _ loading _ filelist , control ) ;"]}, {"before_ctx": "<%> <-> fh _ </%> ", "before_line": " n = n . union ( db . delete _ all _ but _ n ( m _ options . delete _ all _ but _ n _ full , m _ options . allow _ full _ removal , m _ stat , m _ options , tr ) ) ; ", "after_ctx": " ", "after_line": "n = n . union ( db . delete _ all _ but _ n ( m _ options . delete _ all _ but _ n , m _ options . allow _ full _ removal , m _ stat , m _ options , tr ) ) ;", "predictions": ["n = n . union ( db . delete _ <%> _ _ _ . get _ _ ) . ) <+> ) STR STR out m _ = _ <@> </%> . </@> </%> . enumerator <%> _ -> . <+> _ , . <*> m m _ , ( new _ . ( , _ . ( , _ . ( , _ . ( , _ . ( , _ . ( , _ . ( new _ . ( new _ . _ string _ n ( , _ . ( , _ . ( new"]}, {"before_ctx": "<%> <*> void -> task </%> <%> <*> ) -> , cancellation _ token cancel _ token ) </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <+> , cancel _ token </%> <%> <+> return task . from _ result ( true ) ; </%> ", "before_line": " using ( system . io . file _ stream fs = system . io . file . create ( filename ) ) ", "after_ctx": " ", "after_line": "using ( file _ stream fs = file . create ( filename ) )", "predictions": ["using ( file _ stream fs = file . create id . key <%> . key . ;"]}, {"before_ctx": "<%> <*> var nonce = request . cookies [ nonce _ cookie _ name ] ; if ( nonce = = null | | string . is _ null _ or _ white _ space ( nonce . value ) | | ! m _ active _ nonces . contains _ key ( nonce . value ) ) -> var nonce _ el = request . cookies [ nonce _ cookie _ name ] ; </%> <%> <+> var nonce = nonce _ el = = null | | string . is _ null _ or _ white _ space ( nonce _ el . value ) ? STR : nonce _ el . value ; var urldecoded = nonce = = null ? STR : duplicati . library . utility . uri . url _ decode ( nonce ) ; if ( m _ active _ nonces . contains _ key ( urldecoded ) ) nonce = urldecoded ; if ( ! m _ active _ nonces . contains _ key ( nonce ) ) </%> ", "before_line": " var pwd = m _ active _ nonces [ nonce . value ] . item ; m _ active _ nonces . remove ( nonce . value ) ; ", "after_ctx": " ", "after_line": "var pwd = m _ active _ nonces [ nonce ] . item ; m _ active _ nonces . remove ( nonce ) ;", "predictions": ["m _ active _ nonces . remove ( m _ active _ nonces [ nonce . value ] . item ) ;"]}, {"before_ctx": " ", "before_line": " else if ( result is system . collections . i _ enumerable ) ", "after_ctx": " <%> <-> system . collections . </%> <%> <*> ie -> result _ enumerable </%> <%> <-> system . collections . </%> <%> <-> system . collections . </%> <%> <*> ien -> result _ enumerator </%> <%> <*> ie -> result _ enumerable </%> <%> <*> ien -> result _ enumerator </%> <%> <*> ien -> result _ enumerator </%> <%> <*> object c = ien . current ; -> object current = result _ enumerator . current ; </%> <%> <+> if ( current = = null ) { </%>", "after_line": "else if ( result is i _ enumerable )", "predictions": ["else if ( result is i _ enumerable )"]}, {"before_ctx": "<%> <-> static </%> <%> <*> m _ last -> string cert </%> <%> <*> certificate -> hash </%> ", "before_line": " string cert _ hash = core . utility . byte _ array _ as _ hex _ string ( cert . get _ cert _ hash ( ) ) ; m _ last _ certificate = cert _ hash ; ", "after_ctx": " <%> <*> m _ last -> cert </%> <%> <*> certificate -> hash </%>", "after_line": "cert _ hash = core . utility . byte _ array _ as _ hex _ string ( cert . get _ cert _ hash ( ) ) ;", "predictions": ["string cert _ hash = cert . byte _ array . </%> _ hex _ = ( _ ( . empty = . <@> . generic _ as ; _ options ;"]}, {"before_ctx": "<%> <*> key -> async </%> <%> <*> value _ pair < i _ remote _ volume , library . utility . temp -> downloaded </%> <%> <-> > ? </%> <%> <*> public key _ value _ pair < -> public </%> <%> <*> remote -> async </%> <%> <*> volume , library . utility . temp -> downloaded </%> <%> <-> > </%> ", "before_line": " get { return m _ current . value ; } ", "after_ctx": " <%> <*> value . value . dispose -> dispose _ temp _ file </%>", "after_line": "get { return m _ current ; }", "predictions": ["get { return m _ current ; }"]}, {"before_ctx": "<%> <+> backend . i _ backend _ interface backend = backend . backend _ loader . get _ backend ( source , options ) ; </%> ", "before_line": " list < backup _ entry > entries = parse _ file _ list ( source , options ) ; backend . i _ backend _ interface backend = backend . backend _ loader . get _ backend ( source , options ) ; ", "after_ctx": " ", "after_line": "list < backup _ entry > entries = parse _ file _ list ( backend , options ) ;", "predictions": ["list < backup _ entry > entries = parse _ file ) get ) ? else _ ( return <*> <*> < < <@> . enumerator -> generic ref generic ref = options options options handler ;"]}, {"before_ctx": " ", "before_line": " var pristinepaths = paths ; foreach ( key _ value _ pair < bool , library . interface . i _ generic _ module > mx in m _ options . loaded _ modules ) ", "after_ctx": " <%> <*> ( ( library . interface . i _ generic _ source _ module ) mx . value ) . parse _ source ( ref paths , ref conopts ) ; -> { </%> <%> <+> var sourceoptions = ( ( library . interface . i _ generic _ source _ module ) mx . value ) . parse _ source ( ref paths , ref pristinefilter ) ; </%>", "after_line": "foreach ( var mx in m _ options . loaded _ modules )", "predictions": ["foreach ( key _ value _ pair < bool , i _ = _ var <@> <@> in in <@> m _ options options options"]}, {"before_ctx": "<%> <-> using system _ text ; </%> ", "before_line": " public class hyper _ v _ options : interface . i _ generic _ module , interface . i _ generic _ source _ module ", "after_ctx": " <%> <*> http -> hyper _ v </%>", "after_line": "public class hyper _ v _ options : interface . i _ generic _ source _ module", "predictions": ["public class hyper _ v _ options : interface . <*> _ . _ null ( m , m _ generic . source _ _ _ , . system )"]}, {"before_ctx": " ", "before_line": " if ( rd . read ( ) ) { var more = false ; do ", "after_ctx": " <%> <+> var more = false ; do { </%>", "after_line": "if ( rd . read ( ) )", "predictions": ["if ( rd . read ( ) ) { do"]}, {"before_ctx": "<%> <*> . -> _ </%> <%> <*> . -> _ </%> <%> <*> . -> _ </%> <%> <-> . create </%> <%> <*> directory -> create </%> ", "before_line": " if ( m _ username ! = null ) m _ username = null ; if ( m _ password ! = null ) m _ password = null ; ", "after_ctx": " ", "after_line": "m _ username = null ;  m _ password = null ;", "predictions": ["m _ username = null ; if ( m _ - last <*> null <*> _ = string _ interface <*> </%> . try ( - <%> > async <%> async null ) , null _ value ) , generic _ operation new hash ) new _ password new"]}, {"before_ctx": "<%> <-> else </%> ", "before_line": " else { return null ; } ", "after_ctx": " ", "after_line": "return null ;", "predictions": ["return null ;"]}, {"before_ctx": "<%> <*> long lid ; if ( long . try _ parse ( id , out lid ) ) return get _ backup ( lid ) ; else return get _ temporary _ backup ( id ) ; -> return long . try _ parse ( id , out long lid ) ? get _ backup ( lid ) : get _ temporary _ backup ( id ) ; </%> ", "before_line": " ( rd ) = > new backup ( ) { ", "after_ctx": " ", "after_line": "( rd ) = > new backup {", "predictions": ["( rd ) = > new backup {"]}, {"before_ctx": "<%> <*> string _ builder filename = new string _ builder ( ) ; int filenamelen = rnd . next ( min _ filename _ size , max _ filename _ size ) ; for ( int j = 0 ; j < filenamelen ; j + + ) filename . append ( allowed _ chars [ rnd . next ( 0 , allowed _ chars . length ) ] ) ; -> string filename = create _ random _ remote _ file _ name ( min _ filename _ size , max _ filename _ size , allowed _ chars , trim _ filename _ spaces , rnd ) ; </%> ", "before_line": " files . add ( new temp _ file ( filename . to _ string ( ) , localfilename , sha . compute _ hash ( fs ) , fs . length ) ) ; ", "after_ctx": " ", "after_line": "files . add ( new temp _ file ( filename , localfilename , sha . compute _ hash ( fs ) , fs . length ) ) ;", "predictions": ["files . add ( new temp _ file ( filename . new . ] _ ( ( ( ( fs ( fs ( fs ( fs ( fs ( fs ( fs ( fs ( fs ( fs ) ( localfilename ( fs ( fs ( fs ( ( ( fs , ) , fs options ) ) , fs options , fs options , fs options , fs options , fs options ) , fs options ) ; options options , 0 , fs options ) ; options . target , fs options , fs options , fs options"]}, {"before_ctx": "<%> <-> var url = new uri ( url ) ; </%> ", "before_line": " remote _ path = url . absolute _ path . ends _ with ( STR ) ? url . absolute _ path . substring ( 0 , url . absolute _ path . length - 1 ) : url . absolute _ path ; ", "after_ctx": " <%> <-> STR + </%>", "after_line": "remote _ path = STR ;", "predictions": ["remote _ path = url . absolute _ path . utility <%> line , _ ) arg ( ( , , , _ -> <%> ( . result <%> ; </%> _ ref = . ) ; 0 . options = )"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " void enumerate _ files _ and _ folders ( string startpath , duplicati . library . core . filename _ filter filter , duplicati . library . core . utility . enumeration _ callback _ delegate callback ) ; ", "after_ctx": " ", "after_line": "void enumerate _ files _ and _ folders ( string startpath , duplicati . library . utility . filename _ filter filter , duplicati . library . utility . utility . enumeration _ callback _ delegate callback ) ;", "predictions": ["void enumerate _ files _ and _ folders ( string startpath core ( length new length . length . filename _ i i hash array ) ) _ callback _ ; return ) ) ;"]}, {"before_ctx": " ", "before_line": " m _ statusmessage = string . format ( strings . backend _ wrapper . status _ message _ uploading , remotename , core . utility . format _ size _ string ( new system . io . file _ info ( filename ) . length ) ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "m _ statusmessage = string . format ( strings . backend _ wrapper . status _ message _ uploading , remotename , utility . utility . format _ size _ string ( new system . io . file _ info ( filename ) . length ) ) ;", "predictions": ["m _ statusmessage = string . format ( strings . <+> <%> wrapper . stream <%> from <%> uploading get > get uploading event ( <%> . <%> _ </%> ( if _ object _ if handler _ -> ) options options ) ; ; ; _ max , next . , , strings _ wrapper _ wrapper _ </@> ) ; ; ; ; _ <%> _ list ( new _ using ( filename ) _ <%> ) ; ; handler ; ; ; _ wrapper _ </@> _ </%> . , . new ( strings _ using ."]}, {"before_ctx": " ", "before_line": " if ( core . utility . is _ client _ linux ) ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "if ( utility . utility . is _ client _ linux )", "predictions": ["if ( is _ client _ linux )"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " m _ path = core . utility . append _ dir _ separator ( path ) ; ", "after_ctx": " ", "after_line": "m _ path = utility . utility . append _ dir _ separator ( path ) ;", "predictions": ["m _ path = path ;"]}, {"before_ctx": " ", "before_line": " public void enumerate _ files _ and _ folders ( string rootpath , duplicati . library . core . filename _ filter filter , duplicati . library . core . utility . enumeration _ callback _ delegate callback ) ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "public void enumerate _ files _ and _ folders ( string rootpath , duplicati . library . utility . filename _ filter filter , duplicati . library . utility . utility . enumeration _ callback _ delegate callback )", "predictions": ["public void enumerate _ files _ and _ folders ( string rootpath <%> ? rootpath <%> <%> ? <-> _ _ _ _ <%> <%> , return ) ) )"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " callback ( rootpath , r . key , duplicati . library . core . utility . enumerated _ file _ status . file ) ; ", "after_ctx": " ", "after_line": "callback ( rootpath , r . key , duplicati . library . utility . utility . enumerated _ file _ status . file ) ;", "predictions": ["callback ( rootpath , r . key , duplicati _ file _ status . file ) ;"]}, {"before_ctx": " ", "before_line": " if ( r . value . usn > = last _ usn & & r . key . starts _ with ( source _ folder , core . utility . client _ filename _ string _ comparision ) ) ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "if ( r . value . usn > = last _ usn & & r . key . starts _ with ( source _ folder , utility . utility . client _ filename _ string _ comparision ) )", "predictions": ["if ( r . value . usn > = last _ = utility utility utility . key . starts _ with ) core -> . key . starts core -> -> last <%> -> . folder . = callback _ if _ string utility utility utility STR"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " if ( r . key . starts _ with ( m _ path , core . utility . client _ filename _ string _ comparision ) ) ", "after_ctx": " ", "after_line": "if ( r . key . starts _ with ( m _ path , utility . utility . client _ filename _ string _ comparision ) )", "predictions": ["if ( r . key . starts _ with ( m . if . </%> core filename core , ) <%> <%> utility _ = . utility . utility ) _ utility _ core . core utility _ with utility <*> . <*> . <*> . starts . <*> . <*> . </@> -> <*> -> -> . <*> core <*> . starts . <*> . <*> . </@> . </@> . <*> </%> ->"]}, {"before_ctx": " ", "before_line": " success = core . utility . compare _ streams ( m _ original _ signature _ stream , m _ signature _ stream , true ) ; ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "success = utility . utility . compare _ streams ( m _ original _ signature _ stream , m _ signature _ stream , true ) ;", "predictions": ["success = m _ original _ signature _ stream , m _ , . ; _ signature status ( dictionary . = . append core -> _ files . </%> ) ;"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " core . utility . copy _ stream ( m _ signature _ stream , , true ) ; ", "after_ctx": " ", "after_line": "utility . utility . copy _ stream ( m _ signature _ stream , , true ) ;", "predictions": ["m _ stream ( m _ signature _ stream , core core utility utility utility ) <*>"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " sourcefolder [ i ] = core . utility . append _ dir _ separator ( sourcefolder [ i ] ) ; ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "sourcefolder [ i ] = utility . utility . append _ dir _ separator ( sourcefolder [ i ] ) ;", "predictions": ["sourcefolder [ i ] = sourcefolder [ i ] ;"]}, {"before_ctx": " ", "before_line": " if ( core . utility . is _ client _ linux & & options . usn _ strategy ! = options . optimization _ strategy . auto ) ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "if ( utility . utility . is _ client _ linux & & options . usn _ strategy ! = options . optimization _ strategy . auto )", "predictions": ["if ( is _ client _ linux & & options . usn utility = = = core . optimization _ utility . = )"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " usn _ helpers = new dictionary < string , duplicati . library . snapshots . usn _ helper > ( core . utility . client _ filename _ string _ comparer ) ; ", "after_ctx": " ", "after_line": "usn _ helpers = new dictionary < string , duplicati . library . snapshots . usn _ helper > ( utility . utility . client _ filename _ string _ comparer ) ;", "predictions": ["usn _ helpers = new dictionary < string , usn _ search > . -> . -> _ m ( _ ( m ) . client _ key _ ( _ comparer ) = new = new . io core return ( ( m <*> ( -> core append . ? . core utility _ helper = default . STR target target target target ) target target -> ) . default . default . default . ( ( ( status </%> status -> , core . ( ( utility _ void callback _ status _ if ,"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " int ix = m _ unproccesed . files . binary _ search ( folder , core . utility . client _ filename _ string _ comparer ) ; ", "after_ctx": " ", "after_line": "int ix = m _ unproccesed . files . binary _ search ( folder , utility . utility . client _ filename _ string _ comparer ) ;", "predictions": ["int ix = m _ unproccesed . files . binary _ system <*> m , client ( m . = . = . client . client . client . client . client . combine . ) ;"]}, {"before_ctx": " ", "before_line": " fs = new core . temp _ file _ stream ( ) ; core . utility . copy _ stream ( ts , fs , false ) ; ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "fs = new utility . temp _ file _ stream ( ) ; utility . utility . copy _ stream ( ts , fs , false ) ;", "predictions": ["fs = new temp _ file _ stream ( ) ;"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " if ( ! core . utility . compare _ streams ( signature , new _ sig , true ) ) ", "after_ctx": " ", "after_line": "if ( ! utility . utility . compare _ streams ( signature , new _ sig , true ) )", "predictions": ["if ( ! compare _ streams ( signature , new _ = core core ) ( new -> file <%> true . utility < _ = , , comparer string string string string utility ) utility )"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " return m _ filter . should _ include ( core . utility . directory _ separator _ string , core . utility . directory _ separator _ string + core . utility . append _ dir _ separator ( element ) ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "return m _ filter . should _ include ( utility . utility . directory _ separator _ string , utility . utility . directory _ separator _ string + utility . utility . append _ dir _ separator ( element ) ) ;", "predictions": ["return m _ filter . should _ include ( core . utility . directory _ separator _ string , core . utility . directory _ separator _ string + element ) ;"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " destination [ i ] = core . utility . append _ dir _ separator ( destination [ i ] ) ; ", "after_ctx": " ", "after_line": "destination [ i ] = utility . utility . append _ dir _ separator ( destination [ i ] ) ;", "predictions": ["destination [ i ] = destination [ i ] ;"]}, {"before_ctx": " ", "before_line": " string contentprefix = core . utility . append _ dir _ separator ( content _ root ) ; ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "string contentprefix = utility . utility . append _ dir _ separator ( content _ root ) ;", "predictions": ["string contentprefix = content _ root ;"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " string deltaprefix = core . utility . append _ dir _ separator ( delta _ root ) ; ", "after_ctx": " ", "after_line": "string deltaprefix = utility . utility . append _ dir _ separator ( delta _ root ) ;", "predictions": ["string deltaprefix = delta _ root ;"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " core . utility . copy _ stream ( , st ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "utility . utility . copy _ stream ( , st ) ;", "predictions": ["copy _ stream ( , st ) ;"]}, {"before_ctx": " ", "before_line": " public void callback ( string rootpath , string path , core . utility . enumerated _ file _ status status ) { if ( status = = core . utility . enumerated _ file _ status . folder ) ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "public void callback ( string rootpath , string path , utility . utility . enumerated _ file _ status status ) { if ( status = = utility . utility . enumerated _ file _ status . folder )", "predictions": ["public void callback ( string rootpath , string path , enumerated _ file _ status status ) { if ( status = = core . utility . enumerated _ file _ status . folder )"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " else if ( status = = core . utility . enumerated _ file _ status . file ) ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "else if ( status = = utility . utility . enumerated _ file _ status . file )", "predictions": ["else if ( status = = enumerated _ file _ status , _ _ utility ( destination ( ) </@> </@> )"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " else if ( status = = core . utility . enumerated _ file _ status . error ) ", "after_ctx": " ", "after_line": "else if ( status = = utility . utility . enumerated _ file _ status . error )", "predictions": ["else if ( status = = enumerated _ file _ status . </%> )"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " if ( ! library . core . utility . is _ client _ linux ) ", "after_ctx": " ", "after_line": "if ( ! library . utility . utility . is _ client _ linux )", "predictions": ["if ( ! is _ client _ linux )"]}, {"before_ctx": " ", "before_line": " dictionary < string , int > duplicates = new dictionary < string , int > ( library . core . utility . client _ filename _ string _ comparer ) ; ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "dictionary < string , int > duplicates = new dictionary < string , int > ( library . utility . utility . client _ filename _ string _ comparer ) ;", "predictions": ["dictionary < string , int > duplicates = new dictionary < -> string string utility ;"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " targets [ index ] = string . is _ null _ or _ empty ( m _ default _ target ) ? STR : library . core . utility . append _ dir _ separator ( m _ default _ target ) + suffix ; ", "after_ctx": " ", "after_line": "targets [ index ] = string . is _ null _ or _ empty ( m _ default _ target ) ? STR : library . utility . utility . append _ dir _ separator ( m _ default _ target ) + suffix ;", "predictions": ["targets [ index ] = string . is _ null _ or _ empty ( m _ default _ target ) ? STR : m _ default _ target + suffix ;"]}, {"before_ctx": " ", "before_line": " public void callback ( string rootpath , string path , core . utility . enumerated _ file _ status status ) { if ( status = = duplicati . library . core . utility . enumerated _ file _ status . file ) ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "public void callback ( string rootpath , string path , utility . utility . enumerated _ file _ status status ) { if ( status = = duplicati . library . utility . utility . enumerated _ file _ status . file )", "predictions": ["public void callback ( string rootpath , string path , enumerated _ file _ status status ) { if ( status = = duplicati . core . utility . enumerated _ file _ utility _ <%> </%>"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " else if ( status = = duplicati . library . core . utility . enumerated _ file _ status . folder ) ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "else if ( status = = duplicati . library . utility . utility . enumerated _ file _ status . folder )", "predictions": ["else if ( status = = enumerated _ file _ status . folder <*> file <*> file )"]}, {"before_ctx": " ", "before_line": " public void enumerate _ files _ and _ folders ( string startpath , duplicati . library . core . filename _ filter filter , duplicati . library . core . utility . enumeration _ callback _ delegate callback ) ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "public void enumerate _ files _ and _ folders ( string startpath , duplicati . library . utility . filename _ filter filter , duplicati . library . utility . utility . enumeration _ callback _ delegate callback )", "predictions": ["public void enumerate _ files _ and _ folders ( string startpath , filename _ filter filter , enumeration _ callback _ delegate callback )"]}, {"before_ctx": " ", "before_line": " parent _ folders . add ( duplicati . library . core . utility . append _ dir _ separator ( folder ) ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "parent _ folders . add ( duplicati . library . utility . utility . append _ dir _ separator ( folder ) ) ;", "predictions": ["parent _ folders . add ( folder ) ;"]}, {"before_ctx": " ", "before_line": " m _ folder = core . utility . append _ dir _ separator ( basefolder ) ; ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "m _ folder = utility . utility . append _ dir _ separator ( basefolder ) ;", "predictions": ["m _ folder = basefolder ;"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " return core . utility . enumerate _ files ( system . io . path . combine ( m _ folder , prefix ) ) . to _ array ( ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "return utility . utility . enumerate _ files ( system . io . path . combine ( m _ folder , prefix ) ) . to _ array ( ) ;", "predictions": ["return core . utility . enumerate _ files ( m _ folder . path . combine ( m _ key ( status <%> ( status <%> <%> <%> <%> <%> <%> utility <%> core core core utility ) , element ( -> ( -> ( -> ( core -> path -> -> callback -> -> ) -> -> -> -> -> -> -> -> -> ) ) -> ) filter -> core . core utility -> -> callback -> -> -> -> ) filter -> filter -> filter callback filter callback filter -> filter callback filter callback filter -> filter"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " return core . utility . enumerate _ folders ( system . io . path . combine ( m _ folder , prefix ) ) . to _ array ( ) ; ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "return utility . utility . enumerate _ folders ( system . io . path . combine ( m _ folder , prefix ) ) . to _ array ( ) ;", "predictions": ["return system . io . enumerate _ folders ( m _ > -> if > . source . source . else . else _ array _ utility _ return ( utility ( m -> folder ; ) utility ( ( default ( ] ( ( ( default ( ( core . folder . path . string _ ( if status _ ( public core core core core . string _ string . string . string _ path core core _ <@> core core _ <@> core core . string _ string . string _ string _ file core core core"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " return core . utility . enumerate _ file _ system _ entries ( system . io . path . combine ( m _ folder , prefix ) ) . to _ array ( ) ; ", "after_ctx": " ", "after_line": "return utility . utility . enumerate _ file _ system _ entries ( system . io . path . combine ( m _ folder , prefix ) ) . to _ array ( ) ;", "predictions": ["return system . io . path . combine ( m _ parent </@> prefix -> -> -> -> core ( ( -> ( -> core . path . combine ( m ( -> core folder -> status status ) status status status status status status core status status utility utility utility utility utility utility utility ) _ to utility utility ) utility utility utility utility ) string to string <%> _ element core core _ <@> core m utility utility utility utility utility utility utility utility utility utility utility utility utility utility utility utility utility STR } to . ;"]}, {"before_ctx": " ", "before_line": " sources [ i ] = core . utility . append _ dir _ separator ( sources [ i ] ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "sources [ i ] = utility . utility . append _ dir _ separator ( sources [ i ] ) ;", "predictions": ["sources [ i ] = sources [ i ] ;"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " if ( sources [ i ] . equals ( sources [ j ] , core . utility . is _ fs _ case _ sensitive ? string _ comparison . current _ culture : string _ comparison . current _ culture _ ignore _ case ) ) ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "if ( sources [ i ] . equals ( sources [ j ] , utility . utility . is _ fs _ case _ sensitive ? string _ comparison . current _ culture : string _ comparison . current _ culture _ ignore _ case ) )", "predictions": ["if ( sources [ i ] . equals ( sources [ j ] , string _ <@> core core _ = find _ ignore core <@> <%> <%> <%> _ ; core _ ; <*> _ ; <*> <*> . if . or . or . <@> ) <*>"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " else if ( sources [ i ] . starts _ with ( sources [ j ] , core . utility . is _ fs _ case _ sensitive ? string _ comparison . current _ culture : string _ comparison . current _ culture _ ignore _ case ) ) ", "after_ctx": " ", "after_line": "else if ( sources [ i ] . starts _ with ( sources [ j ] , utility . utility . is _ fs _ case _ sensitive ? string _ comparison . current _ culture : string _ comparison . current _ culture _ ignore _ case ) )", "predictions": ["else if ( sources [ i ] . starts _ with ( sources [ j ] s s s core core core utility _ </@> files _ my _ sensitive </@> = . , = = . , core . </@> . </@> . ; <*> override null override override n _ </%> . get _ </@> _ <%> ) ) ) ) )"]}, {"before_ctx": " ", "before_line": " manifest . content _ hashes . add ( core . utility . calculate _ hash ( contentfile ) ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "manifest . content _ hashes . add ( utility . utility . calculate _ hash ( contentfile ) ) ;", "predictions": ["manifest . content _ hashes . add ( contentfile ) ;"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " manifest . signature _ hashes . add ( core . utility . calculate _ hash ( signaturefile ) ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "manifest . signature _ hashes . add ( utility . utility . calculate _ hash ( signaturefile ) ) ;", "predictions": ["manifest . signature _ hashes . add ( signaturefile ) ;"]}, {"before_ctx": " ", "before_line": " string prefix = core . utility . append _ dir _ separator ( r _ sync . r _ sync _ dir . control _ root ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "string prefix = utility . utility . append _ dir _ separator ( r _ sync . r _ sync _ dir . control _ root ) ;", "predictions": ["string prefix = r _ sync . r _ sync _ dir . control core m </@> </@> this + <*> _ root ; ; . string _ <*> core s ;"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " system . threading . thread . current _ thread . priority = core . utility . parse _ priority ( m _ options . thread _ priority ) ; ", "after_ctx": " ", "after_line": "system . threading . thread . current _ thread . priority = utility . utility . parse _ priority ( m _ options . thread _ priority ) ;", "predictions": ["thread . thread . current _ thread . priority = parse _ priority <*> m m ; . utility _ <%> core <*> ( <%> core data _ -> _ utility _ -> . <%> utility </%> </%> </%> ) ( ) ( <*> core . ( _ this ) _ options . -> core _ utility _ <*> core _ -> _ utility _ server } ) ) ;"]}, {"before_ctx": " ", "before_line": " string root = duplicati . library . core . utility . append _ dir _ separator ( application . startup _ path ) ; ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "string root = duplicati . library . utility . utility . append _ dir _ separator ( application . startup _ path ) ;", "predictions": ["string root = application . startup _ path ;"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " foreach ( string s in duplicati . library . core . utility . enumerate _ files ( application . startup _ path ) ) ", "after_ctx": " ", "after_line": "foreach ( string s in duplicati . library . utility . utility . enumerate _ files ( application . startup _ path ) )", "predictions": ["foreach ( string s in enumerate _ files ( application . startup _ parse STR STR utility ) utility"]}, {"before_ctx": " ", "before_line": " if ( ! library . core . utility . is _ client _ linux ) ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "if ( ! library . utility . utility . is _ client _ linux )", "predictions": ["if ( ! is _ client _ linux )"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " if ( ! library . core . utility . is _ client _ linux & & string . is _ null _ or _ empty ( environment . get _ environment _ variable ( db _ key _ env _ name ) ) ) ", "after_ctx": " ", "after_line": "if ( ! library . utility . utility . is _ client _ linux & & string . is _ null _ or _ empty ( environment . get _ environment _ variable ( db _ key _ env _ name ) ) )", "predictions": ["if ( ! is _ client _ linux & & string . is _ null _ or _ find utility <*> documents . format _ null core variable core <%> <%> utility utility -> -> -> ) ->"]}, {"before_ctx": " ", "before_line": " entry . folder _ size = library . core . utility . format _ size _ string ( m _ sizes [ path ] ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "entry . folder _ size = library . utility . utility . format _ size _ string ( m _ sizes [ path ] ) ;", "predictions": ["entry . folder _ size = m _ sizes [ path ] ;"]}, {"before_ctx": "<%> <*> core -> utility </%> ", "before_line": " total _ size . text = string . format ( strings . select _ files . final _ size _ calculated , library . core . utility . format _ size _ string ( s ) ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "total _ size . text = string . format ( strings . select _ files . final _ size _ calculated , library . utility . utility . format _ size _ string ( s ) ) ;", "predictions": ["total _ size . text = string . format ( strings . select _ files . final core size core ; string _ ; </%> . empty _ ; -> core ) ; ; ; _ ( </%> _ ( <+> = : : <%> string _ var _ string filter j ( message j ] j filter j ) j j j ( message j j ( message j j ( j j ( message j j ( message j j ( message j ( j j ( message j j } filter j j ( message j j"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " total _ size . text = string . format ( strings . select _ files . partial _ size _ calculated , library . core . utility . format _ size _ string ( s ) ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "total _ size . text = string . format ( strings . select _ files . partial _ size _ calculated , library . utility . utility . format _ size _ string ( s ) ) ;", "predictions": ["total _ size . text = string . format ( strings . select _ files . , } : : : : : -> system ) file x file _ io j out ) bool <%> bool <%> _ ] _ </%> ( message bool"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " my _ music _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( m _ my _ music ) ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "my _ music _ size . text = library . utility . utility . format _ size _ string ( find _ actual _ size ( m _ my _ music ) ) ;", "predictions": ["my _ music _ size . text = find _ actual _ size ( m _ folder . empty destination destination destination destination ) ,"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " my _ pictures _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( m _ my _ pictures ) ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "my _ pictures _ size . text = library . utility . utility . format _ size _ string ( find _ actual _ size ( m _ my _ pictures ) ) ;", "predictions": ["my _ pictures _ size . text = find _ actual _ size ( m _ my ) ;"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " desktop _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( m _ desktop ) ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "desktop _ size . text = library . utility . utility . format _ size _ string ( find _ actual _ size ( m _ desktop ) ) ;", "predictions": ["desktop _ size . text = find _ actual _ size ( m _ desktop ) string string string string </@> string"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " appdata _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( m _ app _ data ) ) ; ", "after_ctx": " <%> <*> core -> utility </%>", "after_line": "appdata _ size . text = library . utility . utility . format _ size _ string ( find _ actual _ size ( m _ app _ data ) ) ;", "predictions": ["appdata _ size . text = find _ actual _ size ( m _ app _ , [ _ sources _ , , text ) ; my _ size . text is <+> . ;"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " my _ documents _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( m _ my _ documents ) ) ; ", "after_ctx": " ", "after_line": "my _ documents _ size . text = library . utility . utility . format _ size _ string ( find _ actual _ size ( m _ my _ documents ) ) ;", "predictions": ["my _ documents _ size . text = find _ actual _ size ( m _ case _ ] [ case [ </@> _ ] [ ) ) </@> ,"]}, {"before_ctx": " ", "before_line": " m _ sourcefolders [ i ] = core . utility . append _ dir _ separator ( folders [ i ] ) ; ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "m _ sourcefolders [ i ] = utility . utility . append _ dir _ separator ( folders [ i ] ) ;", "predictions": ["m _ sourcefolders [ i ] = folders [ i ] ;"]}, {"before_ctx": "<%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> ", "before_line": " if ( s . equals ( startpath , core . utility . client _ filename _ string _ comparision ) ) ", "after_ctx": " <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%> <%> <*> core -> utility </%>", "after_line": "if ( s . equals ( startpath , utility . utility . client _ filename _ string _ comparision ) )", "predictions": ["if ( s . equals ( startpath , client _ filename _ string _ comparision ) ( startpath ) ( ) )"]}, {"before_ctx": "<%> <+> x = special _ folders . expand _ environment _ variables ( x ) ; </%> <%> <*> var n = system . io . path . get _ file _ name ( x ) ; -> var nx = x ; </%> <%> <+> if ( nx . ends _ with ( system . io . path . directory _ separator _ char . to _ string ( ) ) ) nx = nx . substring ( 0 , nx . length - 1 ) ; var n = system _ io . path _ get _ file _ name ( nx ) ; </%> ", "before_line": " return new key _ value _ pair < string , string > ( x , system . io . path . get _ file _ name ( n ) ) ; ", "after_ctx": " ", "after_line": "return new key _ value _ pair < string , string > ( x , n ) ;", "predictions": ["return new key _ value _ pair < string , string > ( x , system . io . path . get _ bool _ out ) ,"]}, {"before_ctx": " ", "before_line": " return STR + this . username + STR + this . host + STR + this . port + STR + this . folder ; ", "after_ctx": " <%> <+> options [ STR ] = this . username ; </%>", "after_line": "return STR + this . host + STR + this . port + STR + this . folder ;", "predictions": ["return STR + username + STR + this . host + STR + -> . hash _ return ;"]}, {"before_ctx": " ", "before_line": " return STR + this . username + STR + this . host + STR + this . folder ; ", "after_ctx": " <%> <+> if ( ! string . is _ null _ or _ empty ( this . username ) ) options [ STR ] = this . username ; </%>", "after_line": "return STR + this . host + STR + this . folder ;", "predictions": ["return STR + username + STR + this . host + STR + folder ;"]}, {"before_ctx": " ", "before_line": " if ( ! string . is _ null _ or _ empty ( this . username ) ) return STR + this . username + STR + this . destination _ folder ; else return STR + this . destination _ folder ; ", "after_ctx": " <%> <+> if ( ! string . is _ null _ or _ empty ( this . username ) ) options [ STR ] = this . username ; </%>", "after_line": "return STR + this . destination _ folder ;", "predictions": ["if ( ! string . is _ null _ or _ empty ( username ) ) = </%> <*> _ _ string size string ( = { { private { = system . system . <%> . io ."]}, {"before_ctx": "<%> <-> result . add _ verbose _ message ( STR , sources [ j ] ) ; sources . remove _ at ( j ) ; j - - ; } else if ( sources [ i ] . starts _ with ( sources [ j ] , library . utility . utility . client _ filename _ string _ comparision ) ) { bool includes ; bool excludes ; filter _ expression . analyze _ filters ( filter , out includes , out excludes ) ; </%> <%> <*> if ( excludes ) -> if ( filter ! = null ) </%> <%> <+> bool includes ; bool excludes ; filter _ expression . analyze _ filters ( filter , out includes , out excludes ) ; if ( excludes ) { </%> <%> <+> } else result . add _ verbose _ message ( STR , sources [ i ] , sources [ j ] ) ; </%> ", "before_line": " { result . add _ verbose _ message ( STR , sources [ i ] , sources [ j ] ) ; } ", "after_ctx": " <%> <-> } </%>", "after_line": "result . add _ verbose _ message ( STR , sources [ i ] , sources [ j ] ) ;", "predictions": ["result . add _ verbose _ message ( STR , sources [ i ] , sources [ j ] ) ;"]}, {"before_ctx": "<%> <+> private static string override _ server = null ; public static string oauth _ server { get { return string . is _ null _ or _ white _ space ( override _ server ) ? duplicati _ oauth _ service : override _ server ; } set { override _ server = value ; } } </%> ", "before_line": " private const string oauth _ login _ url _ template = STR ; public static string oauth _ login _ url ( string modulename ) { return string . format ( STR , modulename ) ; } ", "after_ctx": " ", "after_line": "private const string oauth _ login _ url _ template = STR ; public static string oauth _ login _ url ( string modulename ) { return string . format ( oauth _ login _ url _ template , modulename ) ; }", "predictions": ["private const string oauth _ login _ url _ template = STR ;"]}, {"before_ctx": " ", "before_line": " return this . to _ string ( ) + ", "after_ctx": " <%> <-> . to _ string ( ) </%>", "after_line": "return this +", "predictions": ["return to _ string ( ) +"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> ", "before_line": " ? environment . new _ line + exception . to _ string ( ) ", "after_ctx": " ", "after_line": "? environment . new _ line + exception", "predictions": ["? environment . new _ line + exception </@> )"]}, {"before_ctx": " ", "before_line": " throw new exception ( string . format ( STR , error _ builder . to _ string ( ) ) ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%>", "after_line": "throw new exception ( string . format ( STR , error _ builder ) ) ;", "predictions": ["throw new exception ( string . format ( STR , error _ ; . <%> utility core core core core . append STR ! . . string _ ( <@> core . string core client . </%> utility utility _ </@> core core core core core core core ;"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> ", "before_line": " console . error . write _ line ( error _ builder . to _ string ( ) ) ; ", "after_ctx": " ", "after_line": "console . error . write _ line ( error _ builder ) ;", "predictions": ["console . error . write _ line ( error _ builder ) ;"]}, {"before_ctx": "<%> <+> if ( changed & & m _ options . upload _ verification _ file ) filelist _ processor . upload _ verification _ file ( m _ backendurl , m _ options , m _ result . backend _ writer , db , null ) ; </%> ", "before_line": " internal void do _ compact ( local _ delete _ database db , bool has _ verified _ backend , system . data . i _ db _ transaction transaction ) ", "after_ctx": " ", "after_line": "internal bool do _ compact ( local _ delete _ database db , bool has _ verified _ backend , system . data . i _ db _ transaction transaction )", "predictions": ["internal void do _ compact ( local _ delete _ database db , > > > if if _ verified . -> ( i . format . i new if _ = _ new new ) new if id . STR . STR ;"]}, {"before_ctx": "<%> <-> try { </%> ", "before_line": " if ( old _ id < 0 | | m _ options . disable _ filetime _ check | | local _ database . normalize _ date _ time ( last _ modified ) > = old _ scanned & & ( m _ options . skip _ files _ larger _ than = = long . max _ value | | filestatsize < m _ options . skip _ files _ larger _ than ) ) ", "after_ctx": " ", "after_line": "if ( ( old _ id < 0 | | m _ options . disable _ filetime _ check | | local _ database . normalize _ date _ time ( last _ modified ) > = old _ scanned ) & & ( m _ options . skip _ files _ larger _ than = = long . max _ value | | filestatsize < m _ options . skip _ files _ larger _ than ) )", "predictions": ["if ( old _ id < 0 | | m _ options . run ( invalid ( last _ options . <@> ) ( ; = = none , & _ options _ http ) )"]}, {"before_ctx": " ", "before_line": " assert . are _ equal ( filesets , NUM , STR ) ; ", "after_ctx": " <%> <-> filecount , </%> <%> <+> , filecount </%>", "after_line": "assert . are _ equal ( NUM , filesets , STR ) ;", "predictions": ["assert . are _ equal ( NUM , filesets ) ;"]}, {"before_ctx": "<%> <*> filesets -> NUM </%> <%> <*> NUM -> filesets </%> ", "before_line": " assert . are _ equal ( filecount , filenames . count + 1 , STR ) ; ", "after_ctx": " <%> <+> NUM , </%> <%> <-> , NUM </%> <%> <+> NUM , </%> <%> <-> , NUM </%>", "after_line": "assert . are _ equal ( filenames . count + 1 , filecount , STR ) ;", "predictions": ["assert . are _ equal ( 1 , filecount . count + 1 _ STR _ STR _ ; var var var <@> </@> _ -> ;"]}, {"before_ctx": "<%> <-> filecount , </%> <%> <+> , filecount </%> ", "before_line": " assert . are _ equal ( res . rewritten _ file _ lists , NUM , STR ) ; assert . are _ equal ( res . removed _ file _ count , NUM , STR ) ; ", "after_ctx": " <%> <+> 1 , </%> <%> <-> , 1 </%> <%> <+> 1 , </%> <%> <-> , 1 </%>", "after_line": "assert . are _ equal ( NUM , res . rewritten _ file _ lists , STR ) ; assert . are _ equal ( NUM , res . removed _ file _ count , STR ) ;", "predictions": ["assert . are _ equal ( STR , res . rewritten _ file target run . <-> . log active ( ( ( STR ( STR ( STR ( ; ( ; ( ; ( </@> _ assert _ res _ bool _ STR ) < code target target ) target target command command ( res ) ) command _ new STR _ block _ last _ last _ <+> _ <+> _ <+> s s ;"]}, {"before_ctx": "<%> <+> 1 , </%> <%> <-> , 1 </%> <%> <+> 1 , </%> <%> <-> , 1 </%> ", "before_line": " assert . are _ equal ( res . rewritten _ file _ lists , 2 , STR ) ; assert . are _ equal ( res . removed _ file _ count , NUM , STR ) ; ", "after_ctx": " <%> <+> 1 , </%> <%> <-> , 1 </%> <%> <+> 2 , </%> <%> <-> , 2 </%>", "after_line": "assert . are _ equal ( 2 , res . rewritten _ file _ lists , STR ) ; assert . are _ equal ( NUM , res . removed _ file _ count , STR ) ;", "predictions": ["assert . are _ equal ( STR , res . rewritten _ file . 1 , ; ; ; ; ; ; ; ; ; ; ; ; assert ) ; ; = <-> = <-> = <-> _ <%> _ error . </@> _ ; line ;"]}, {"before_ctx": "<%> <+> 2 , </%> <%> <-> , 2 </%> <%> <+> NUM , </%> <%> <-> , NUM </%> ", "before_line": " assert . are _ equal ( res . rewritten _ file _ lists , 1 , STR ) ; assert . are _ equal ( res . removed _ file _ count , 2 , STR ) ; ", "after_ctx": " <%> <*> filesets -> NUM </%> <%> <*> NUM -> filesets </%> <%> <-> filecount , </%> <%> <+> , filecount </%>", "after_line": "assert . are _ equal ( 1 , res . rewritten _ file _ lists , STR ) ; assert . are _ equal ( 2 , res . removed _ file _ count , STR ) ;", "predictions": ["assert . are _ equal ( STR , res . rewritten _ file m lists _ changed _ ; files files files files ) ; ) < > <*> _ ; <*> error _ </@> </%> code . removed </%> <-> index block STR description STR _ ] = last ;"]}, {"before_ctx": "<%> <+> 1 , </%> <%> <-> , 1 </%> <%> <+> 2 , </%> <%> <-> , 2 </%> ", "before_line": " assert . are _ equal ( filesets , NUM , STR ) ; assert . are _ equal ( filecount , filenames . count - NUM + 1 , STR ) ; ", "after_ctx": " <%> <*> filesets -> NUM </%> <%> <*> NUM -> filesets </%>", "after_line": "assert . are _ equal ( NUM , filesets , STR ) ; assert . are _ equal ( filenames . count - NUM + 1 , filecount , STR ) ;", "predictions": ["assert . are _ equal ( NUM , filesets , NUM ) ; double -> = filecount -> filenames . count count <@> <*> . <+> </@> , filecount ) <->"]}, {"before_ctx": "<%> <-> filecount , </%> <%> <+> , filecount </%> ", "before_line": " assert . are _ equal ( filesets , NUM , STR ) ; assert . are _ equal ( filecount , filenames . count + 1 , STR ) ; ", "after_ctx": " ", "after_line": "assert . are _ equal ( NUM , filesets , STR ) ; assert . are _ equal ( filenames . count + 1 , filecount , STR ) ;", "predictions": ["assert . are _ equal ( NUM , filesets . count + 1 , format ) string ( _ , ( _ set ;"]}, {"before_ctx": "<%> <-> if ( m _ old _ signatures . contains _ key ( s ) ) </%> <%> <+> { </%> <%> <+> m _ last _ verification _ time . remove ( s ) ; } </%> <%> <+> { archive _ wrapper aw = new archive _ wrapper ( z , patch . key . time . to _ universal _ time ( ) , prefix ) ; </%> <%> <*> m _ old _ signatures [ f . substring ( prefix . length ) ] = new archive _ wrapper ( z , prefix ) ; -> { </%> <%> <+> string name = f . substring ( prefix . length ) ; m _ old _ signatures [ name ] = aw ; m _ last _ verification _ time . remove ( name ) ; } } if ( z . file _ exists ( unmodified _ files ) ) foreach ( string s in filenames _ from _ platform _ independant ( z . read _ all _ lines ( unmodified _ files ) ) ) m _ last _ verification _ time [ s ] = patch . key . time . to _ universal _ time ( ) ; </%> ", "before_line": " if ( m _ old _ folders . contains _ key ( s ) ) m _ old _ folders . remove ( s ) ; ", "after_ctx": " ", "after_line": "m _ old _ folders . remove ( s ) ;", "predictions": ["m _ old _ folders . remove ( s ) ;"]}, {"before_ctx": " ", "before_line": " target = new upload _ request ( new block _ volume _ writer ( options ) , options . indexfile _ policy = = options . index _ file _ strategy . none ? null : new index _ volume _ writer ( options ) ) ; ", "after_ctx": " <%> <-> if ( target . index _ volume ! = null ) target . index _ volume . volume _ id = await database . register _ remote _ volume _ async ( target . index _ volume . remote _ filename , remote _ volume _ type . index , remote _ volume _ state . temporary ) ; </%>", "after_line": "target = new upload _ request ( new block _ volume _ writer ( options ) , null ) ;", "predictions": ["target = new upload _ request ( options , options . indexfile _ policy STR STR STR . <@> lock <%> block database block database ;"]}, {"before_ctx": " ", "before_line": " using ( activate _ certificate _ validator ( ) ) { system . net . http _ web _ request req = create _ request ( remotename , STR ) ; req . method = STR ; using ( req . get _ response ( ) ) { } } ", "after_ctx": " <%> <-> new command _ line _ argument ( STR , command _ line _ argument . argument _ type . string , strings . tahoe _ backend . description _ accept _ hash _ short , strings . tahoe _ backend . description _ accept _ hash _ long ) , new command _ line _ argument ( STR , command _ line _ argument . argument _ type . boolean , strings . tahoe _ backend . description _ accept _ any _ certificate _ short , strings . tahoe _ backend . description _ accept _ any _ certificate _ long ) , </%>", "after_line": "system . net . http _ web _ request req = create _ request ( remotename , STR ) ; req . method = STR ; using ( req . get _ response ( ) ) { }", "predictions": ["system . net . http _ web _ request req = create _ lock ( access . m . time ) , req ( req ) , req ( method ( ; ; req ( ; { { { { { { { } ) ; ( STR ; using ( args ; using ( ; ; } } . | . > . _ 0 . } . _ 0 ; } }"]}, {"before_ctx": "<%> <+> channel _ name _ progress _ channel private i _ write _ channel < progress _ event > m _ progresschannel ; </%> ", "before_line": " private i _ write _ channel < file _ splitter _ process . data _ block > m _ blockoutput ; ", "after_ctx": " <%> <-> database . local _ </%> <%> <-> database . local _ </%>", "after_line": "private i _ write _ channel < data _ block > m _ blockoutput ;", "predictions": ["private i _ write _ channel < data _ block > m _ + string ( utility ( utility ( utility ( utility . data ) ) ) system . combine . directory . directory . directory . report . data _ id 2 , file , file _ date _ | . error . error . error . error . <@> _ </%> > ) )"]}, {"before_ctx": " ", "before_line": " private async task < bool > add _ folder _ to _ output ( string filename , date _ time last _ modified , i _ metahash meta ) ", "after_ctx": " <%> <*> long metadataid ; bool r = false ; -> long metadataid = - 1 ; </%> <%> <-> r | = await file _ splitter _ process . data _ block . add _ block _ to _ output _ async ( m _ blockoutput , meta . hash , meta . blob , 0 , ( int ) meta . size , compression _ hint . default , false ) ; lock ( m _ database . access _ lock ) r | = m _ database . add _ metadataset ( meta . hash , meta . size , out metadataid , m _ transaction ) ; m _ database . add _ directory _ entry ( filename , metadataid , last _ modified , m _ transaction ) ; </%>", "after_line": "private async task add _ folder _ to _ output ( string filename , date _ time last _ modified , i _ metahash meta )", "predictions": ["private async task < bool > add _ folder _ to _ output . string filename ( <@> filename ( [ object } [ . ( exception ( exception ( exception ; ( execute . foreach 0 ; }"]}, {"before_ctx": "<%> <*> string query = STR ; var args = new list < object > ( ) ; if ( time . ticks > 0 | | ( versions ! = null & & versions . length > 0 ) ) { query = STR ; if ( time . ticks > 0 ) { if ( time . kind = = date _ time _ kind . unspecified ) throw new exception ( STR ) ; query + = STR ; args . add ( time . to _ universal _ time ( ) ) ; } if ( versions ! = null & & versions . length > 0 ) { var qs = STR ; foreach ( var v in versions ) if ( v > = 0 & & v < m _ filesets . length ) { args . add ( m _ filesets [ v ] . key ) ; qs + = STR ; } if ( qs . length > 0 ) { qs = qs . substring ( 0 , qs . length - 1 ) ; if ( args . count ! = 0 ) query + = STR ; query + = STR + qs + STR ; } } } -> var tmp = owner . get _ filelist _ where _ clause ( time , versions , m _ filesets ) ; </%> <%> <+> string query = tmp . item ; var args = tmp . item ; </%> ", "before_line": " cmd . execute _ non _ query ( string . format ( STR + query , m _ tablename ) , args . to _ array ( ) ) ; ", "after_ctx": " ", "after_line": "cmd . execute _ non _ query ( string . format ( STR + query , m _ tablename ) , args ) ;", "predictions": ["cmd . execute _ non _ query ( STR + query , m _ tablename ) ;"]}, {"before_ctx": " ", "before_line": " void runner _ duplicati _ progress ( duplicati . library . main . duplicati _ operation operation , duplicati _ runner . runner _ state state , string message , string submessage , int progress , int subprogress ) ", "after_ctx": " <%> <-> duplicati _ runner . </%>", "after_line": "void runner _ duplicati _ progress ( duplicati _ operation operation , runner _ state state , string message , string submessage , int progress , int subprogress )", "predictions": ["void runner _ duplicati _ progress ( duplicati _ operation operation , duplicati . <%> ( , _ ( ) . -> message . database size . -> . string size NUM string size size NUM"]}, {"before_ctx": " ", "before_line": " public void set _ current _ icon ( duplicati _ runner . runner _ result icon , string message ) { if ( icon = = duplicati _ runner . runner _ result . error ) ", "after_ctx": " <%> <-> duplicati _ runner . </%> <%> <-> duplicati _ runner . </%> <%> <-> duplicati _ runner . </%>", "after_line": "public void set _ current _ icon ( runner _ result icon , string message ) { if ( icon = = runner _ result . error )", "predictions": ["public void set _ current _ icon ( runner _ result icon , foreach <@> database file database file <-> ) { )"]}, {"before_ctx": " ", "before_line": " void runner _ result _ event ( duplicati _ runner . runner _ result result , string parsed _ message , string message ) ", "after_ctx": " <%> <-> duplicati _ runner . </%>", "after_line": "void runner _ result _ event ( runner _ result result , string parsed _ message , string message )", "predictions": ["void runner _ result _ event ( runner _ result result , string <@> , <+> NUM )"]}, {"before_ctx": " ", "before_line": " var system _ io = system _ io . io _ os ( library . utility . utility . is _ client _ windows ) ; foreach ( var s in system _ io . enumerate _ file _ system _ entries ( entrypath ) ) ", "after_ctx": " <%> <+> . io _ os </%> <%> <+> . io _ os </%>", "after_line": "foreach ( var s in system _ io . io _ os . enumerate _ file _ system _ entries ( entrypath ) )", "predictions": ["foreach ( var s in system _ io . enumerate _ file _ </%> , count 1 1 1 string s string string ( utility string string <%> , is <%> 1 1 ) 1 )"]}, {"before_ctx": "<%> <*> target -> s </%> <%> <*> STR -> destination </%> <%> <+> , destination </%> ", "before_line": " string target = system . io . path . combine ( destination , s . trim ( ) ) ; if ( system . io . directory . exists ( target ) ) ", "after_ctx": " <%> <*> target -> s </%> <%> <*> target -> s </%> <%> <*> target -> s </%>", "after_line": "if ( system . io . directory . exists ( s ) )", "predictions": ["if ( s . io . exists ( target ) )"]}, {"before_ctx": "<%> <*> target -> s </%> <%> <*> STR -> destination </%> <%> <+> , destination </%> ", "before_line": " string target = system . io . path . combine ( destination , s . trim ( ) ) ; if ( ! system . io . directory . exists ( target ) ) ", "after_ctx": " <%> <*> target -> s </%> <%> <*> target -> s </%> <%> <*> target -> s </%>", "after_line": "if ( ! system . io . directory . exists ( s ) )", "predictions": ["if ( ! s . io . exists ( target ) )"]}, {"before_ctx": " ", "before_line": " void connection _ status _ updated ( server . serialization . i _ serializable _ status status ) ", "after_ctx": " <%> <*> if -> switch </%> <%> <*> active -> suggested </%> <%> <*> schedule -> status </%> <%> <*> id < 0 -> icon </%> <%> <+> case suggested _ status _ icon . active : tray _ icon . icon = properties . resources . tray _ working ; break ; </%>", "after_line": "void connection _ status _ updated ( i _ serializable _ status status )", "predictions": ["void connection _ status _ updated ( i _ serializable _ status status are are are are i )"]}, {"before_ctx": "<%> <-> ( string . format </%> <%> <*> , -> ( </%> <%> <-> ( string . format </%> <%> <*> , -> ( </%> ", "before_line": " logging . log . write _ message ( string . format ( strings . run _ script . invalid _ exit _ code _ error , scriptpath , p . exit _ code ) , duplicati . library . logging . log _ message _ type . warning ) ; ", "after_ctx": " <%> <-> ( string . format </%> <%> <*> , -> ( </%> <%> <-> ( string . format </%> <%> <*> , -> ( </%>", "after_line": "logging . log . write _ message ( strings . run _ script . invalid _ exit _ code _ error ( scriptpath , p . exit _ code ) , duplicati . library . logging . log _ message _ type . warning ) ;", "predictions": ["logging . log . write _ message ( strings . format _ script _ ? ( file ) ) = } = type _ exit ) argument ) bool </%> bool </%> ) bool </%> bool - -> _ block database - - , {"]}, {"before_ctx": "<%> <-> ( string . format </%> <%> <*> , -> ( </%> <%> <-> ( string . format </%> <%> <*> , -> ( </%> ", "before_line": " logging . log . write _ message ( string . format ( strings . run _ script . std _ error _ report , scriptpath , stderr ) , duplicati . library . logging . log _ message _ type . warning ) ; ", "after_ctx": " ", "after_line": "logging . log . write _ message ( strings . run _ script . std _ error _ report ( scriptpath , stderr ) , duplicati . library . logging . log _ message _ type . warning ) ;", "predictions": ["logging . log . write _ message ( strings . run _ script _ id i </%> if if 1 1 1 1 , file </%> _ type _ log ) ) <%> </@> ) <%> ) _ library _ skip _ if -> -> ; ! duplicati _ long _ </%> . | = | , false ) async"]}, {"before_ctx": " ", "before_line": " return string . format ( strings . utility . format _ string _ gb , ( double ) size / ( NUM * NUM * NUM ) ) ; ", "after_ctx": " <%> <-> string . format ( </%> <%> <*> , -> ( </%> <%> <-> string . format ( </%> <%> <*> , -> ( </%> <%> <-> string . format ( </%> <%> <*> , -> ( </%>", "after_line": "return strings . utility . format _ string _ gb ( ( double ) size / ( NUM * NUM * NUM ) ) ;", "predictions": ["return string . format ( strings . utility . format _ string _ </@> s s . . -> message message message . NUM ( NUM ( NUM STR <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> ) <+> are NUM , _ ;"]}, {"before_ctx": "<%> <-> string . format ( </%> <%> <*> , -> ( </%> ", "before_line": " return string . format ( strings . utility . format _ string _ mb , ( double ) size / ( NUM * NUM ) ) ; ", "after_ctx": " <%> <-> string . format ( </%> <%> <*> , -> ( </%> <%> <-> string . format ( </%> <%> <*> , -> ( </%>", "after_line": "return strings . utility . format _ string _ mb ( ( double ) size / ( NUM * NUM ) ) ;", "predictions": ["return string . format ( strings . utility . format _ string _ combine <+> <+> , , res ! ; io ! . <-> string string string ) ) ) . connection . status ( NUM . connection . _ STR STR <+> , file & > > . _ . ( ( <-> options <@> writer _ new options ) * . line ) ) ) meta database meta meta false meta _ database meta meta ] <%> <%> ( ] <%> / / NUM <%> <%> <%> <%> NUM <%> <%> <%> <%> <%> <%> <%> <%>"]}, {"before_ctx": "<%> <-> string . format ( </%> <%> <*> , -> ( </%> <%> <-> string . format ( </%> <%> <*> , -> ( </%> ", "before_line": " return string . format ( strings . utility . format _ string _ kb , ( double ) size / NUM ) ; ", "after_ctx": " <%> <-> string . format ( </%> <%> <*> , -> ( </%>", "after_line": "return strings . utility . format _ string _ kb ( ( double ) size / NUM ) ;", "predictions": ["return string . format ( strings . utility . format _ string _ double , ( <@> <-> return system , . = ;"]}, {"before_ctx": " ", "before_line": " throw new exception ( string . format ( strings . google _ docs . folder _ has _ multiple _ owners _ error , cur . title , string . join ( STR , pids ) ) ) ; ", "after_ctx": " <%> <-> ( string . format </%> <%> <*> , -> ( </%>", "after_line": "throw new exception ( strings . google _ docs . folder _ has _ multiple _ owners _ error ( cur . title , pids ) ) ;", "predictions": ["throw new exception ( strings . google _ docs . folder _ has <%> multiple io io io error _ title _ title </%> NUM ( ; </%> . path <%> </@> target -> -> -> -> . join <%> ; ;"]}, {"before_ctx": "<%> <-> string . format ( </%> <%> <*> , -> ( </%> <%> <-> , string . join ( STR </%> <%> <-> ) </%> ", "before_line": " return string . format ( strings . controller . unsupported _ boolean _ value , optionname , value ) ; ", "after_ctx": " <%> <-> string . format ( </%> <%> <*> , -> ( </%>", "after_line": "return strings . controller . unsupported _ boolean _ value ( optionname , value ) ;", "predictions": ["return string . format ( strings . controller . unsupported _ boolean _ m format size format / / <*> ) <+>"]}, {"before_ctx": "<%> <-> string . format ( </%> <%> <*> , -> ( </%> ", "before_line": " return string . format ( strings . controller . unsupported _ integer _ value , optionname , value ) ; ", "after_ctx": " <%> <-> string . format ( </%> <%> <*> , -> ( </%>", "after_line": "return strings . controller . unsupported _ integer _ value ( optionname , value ) ;", "predictions": ["return strings . controller . block ) to ) ;"]}, {"before_ctx": "<%> <-> string . format ( </%> <%> <*> , -> ( </%> ", "before_line": " return string . format ( strings . controller . unsupported _ path _ value , optionname , p ) ; ", "after_ctx": " <%> <-> string . format ( </%> <%> <*> , -> ( </%>", "after_line": "return strings . controller . unsupported _ path _ value ( optionname , p ) ;", "predictions": ["return strings . controller . unsupported _ path _ < < _ _ </@> m task task task task ;"]}, {"before_ctx": "<%> <-> string . format ( </%> <%> <*> , -> ( </%> ", "before_line": " return string . format ( strings . controller . unsupported _ size _ value , optionname , value ) ; ", "after_ctx": " ", "after_line": "return strings . controller . unsupported _ size _ value ( optionname , value ) ;", "predictions": ["return string . format ( strings <%> <+> <%> list ) ) ) ) ;"]}, {"before_ctx": "<%> <*> , i _ enumerable < byte [ ] > data = null ) -> ) </%> <%> <-> if ( data ! = null ) foreach ( var d in data ) add _ hash ( d ) ; </%> <%> <*> byte [ ] -> ulong </%> ", "before_line": " var bit = bit _ converter . to _ u _ int ( data , 0 ) % m _ bits ; ", "after_ctx": " <%> <*> byte [ ] -> ulong </%> <%> <-> bit _ converter . to _ u _ int ( </%> <%> <-> , 0 ) </%>", "after_line": "var bit = data % m _ bits ;", "predictions": ["var bit = bit _ to _ </@> _ 0 . 0 . <@> . <@> ; <-> _ new <*> ; ; _ get _ return ; ;"]}, {"before_ctx": "<%> <-> if ( data ! = null ) foreach ( var d in data ) add _ hash ( d ) ; </%> <%> <*> byte [ ] -> ulong </%> <%> <-> bit _ converter . to _ u _ int ( </%> <%> <-> , 0 ) </%> <%> <*> byte [ ] -> ulong </%> ", "before_line": " var bit = bit _ converter . to _ u _ int ( data , 0 ) % m _ bits ; ", "after_ctx": " ", "after_line": "var bit = data % m _ bits ;", "predictions": ["var bit = bit _ null <%> m } >"]}, {"before_ctx": "<%> <-> backend . </%> <%> <-> backend . </%> <%> <+> m _ </%> <%> <+> m _ </%> ", "before_line": " task = new key _ value _ pair < int , task > ( 1 , backend . upload _ file _ async ( ( ( fileset _ upload _ request ) req ) . fileset ) ) ; ", "after_ctx": " <%> <-> backend . </%>", "after_line": "task = new key _ value _ pair < int , task > ( 1 , upload _ file _ async ( ( ( fileset _ upload _ request ) req ) . fileset ) ) ;", "predictions": ["task = new key _ object _ m <@> . </%> , <-> ( <-> _ async _ > ( ( ( index _ item _ null , method , method , , , file _ upload _ < data ( ( = = = = ] data data <*> <*> <*> <*> <*> <*> _ value <*> 0 <%> <%> <%> <%> <%> _ entry ) <%> <%> ) <%> <*> <%> <%> <%> <%> <%> <%> <%> <%> <%> entry <%> ) <%> <%> <%> entry <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> entry _"]}, {"before_ctx": "<%> <-> backend . </%> <%> <-> backend . </%> <%> <+> m _ </%> <%> <+> m _ </%> <%> <-> backend . </%> ", "before_line": " task = new key _ value _ pair < int , task > ( 1 , backend . upload _ file _ async ( ( ( index _ volume _ upload _ request ) req ) . index _ volume ) ) ; ", "after_ctx": " ", "after_line": "task = new key _ value _ pair < int , task > ( 1 , upload _ file _ async ( ( ( index _ volume _ upload _ request ) req ) . index _ volume ) ) ;", "predictions": ["task = new key _ value _ pair <*> ( ( file _ return _ <+> _ request <%> <%> <%> . <%> <-> <%> . <%> if generic ; if <%> . <%> ; <%> new system _ <*> <%> <%> <%> _ entry <%> <%> <%> _ . options options options options options options contains ;"]}, {"before_ctx": " ", "before_line": " if ( enable _ signing . checked ) m _ task . signaturekey = signkey . text ; else m _ task . signaturekey = null ; ", "after_ctx": " <%> <-> private void generate _ sign _ key _ click ( object sender , event _ args e ) { signkey . text = key _ generator . generate _ sign _ key ( ) ; } </%>", "after_line": "m _ task . signaturekey = null ;", "predictions": ["m _ task . signaturekey _ size _ , . , . , . , , func < else _ with <%> < enable <%> <%> if </%> <%> <%> </%> ( ! _ if -> -> -> -> _ time <%> add . add -> ) ;"]}, {"before_ctx": "<%> <+> private i _ backend m _ backend ; </%> ", "before_line": " private i _ backend m _ backend ; private backend _ handler m _ backend _ handler ; private common . i _ task _ reader m _ taskreader ; ", "after_ctx": " <%> <-> common . backend _ handler backend _ handler , </%> <%> <-> common . </%> <%> <-> common . </%> <%> <-> this . m _ backend _ handler = backend _ handler ; </%>", "after_line": "private i _ task _ reader m _ taskreader ;", "predictions": ["private i _ backend m _ ( ( <+> . _ _ _ m . . . < < < < < < [ <%> _ <%> ) _ </%> . <%> _ - <%> _ taskreader ; _ ] , _ ] , _ ] , _ ] filter _ <%> filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m filter _ m"]}, {"before_ctx": "<%> <-> < bool > </%> <%> <*> , func < string , task < index _ volume _ writer > > create _ index _ file = null ) -> ) </%> <%> <-> return </%> <%> <-> return </%> <%> <-> , false </%> ", "before_line": " private async task < t > do _ with _ retry < t > ( file _ entry _ item item , func < task < t > > method ) ", "after_ctx": " ", "after_line": "private async task do _ with _ retry ( file _ entry _ item item , func < task > method )", "predictions": ["private async task do _ with _ retry ( . <*> [ ! _ <*> = if = ! ! ! ! _ > <%> -> -> -> )"]}, {"before_ctx": " ", "before_line": " private async task < bool > do _ put ( file _ entry _ item item , bool updated _ hash = false ) ", "after_ctx": " <%> <-> true </%>", "after_line": "private async task do _ put ( file _ entry _ item item )", "predictions": ["private async task do _ to )"]}, {"before_ctx": " ", "before_line": " vss _ backup _ components . disable _ writer _ classes ( excluded _ writers . to _ array ( ) ) ; ", "after_ctx": " <%> <+> } if ( included _ writers = = null ) { </%>", "after_line": "vss _ backup _ components . disable _ writer _ classes ( excluded _ writers ) ;", "predictions": ["vss _ backup _ components ) ;"]}, {"before_ctx": "<%> <*> google . documents . document -> tagged _ file _ entry try _ </%> ", "before_line": " return res . doc ; ", "after_ctx": " <%> <-> . doc </%> <%> <*> throw new system . io . file _ not _ found _ exception ( filename ) -> return null </%> <%> <+> } private tagged _ file _ entry get _ file ( string filename ) { tagged _ file _ entry res = try _ get _ file ( filename ) ; if ( res = = null ) throw new system . io . file _ not _ found _ exception ( filename ) ; </%>", "after_line": "return res ;", "predictions": ["return res ;"]}, {"before_ctx": " ", "before_line": " if ( m . value . supported _ commands ! = null ) if ( m . key ) ", "after_ctx": " <%> <+> if ( m . value is library . interface . i _ generic _ source _ module ) module _ options . add _ range ( ( ( library . interface . i _ generic _ source _ module ) m . value ) . hidden _ commands ) ; } </%> <%> <+> if ( m . value . supported _ commands ! = null ) </%>", "after_line": "if ( m . key ) { if ( m . value . supported _ commands ! = null )", "predictions": ["if ( m . key ;"]}, {"before_ctx": " ", "before_line": " using ( var fs = new blockprocessor ( snapshot . open _ read ( path ) , m _ blockbuffer ) ) ", "after_ctx": " <%> <-> int blocklistoffset = 0 ; m _ filehasher . initialize ( ) ; var offset = 0 ; var remaining = fs . readblock ( ) ; do { var size = math . min ( m _ blocksize , remaining ) ; </%>", "after_line": "using ( var fs = snapshot . open _ read ( path ) )", "predictions": ["using ( snapshot . open )"]}, {"before_ctx": "<%> <+> _ int </%> ", "before_line": " m _ block _ hash _ lookup . add ( key , size , new key _ value _ pair < long , long > ( convert . to _ int ( r ) , size ) ) ; ", "after_ctx": " <%> <-> ( convert . to _ int </%> <%> <-> ) </%>", "after_line": "m _ block _ hash _ lookup . add ( key , size , new key _ value _ pair < long , long > ( r , size ) ) ;", "predictions": ["m _ block _ hash _ int ( key ) task task task _ hash ) </%> ( new <-> ( new ; </%> = r = </%> ) = </%> ) ) </%> ) ( </%> ( r ) ; > ) ) > > ) ) > </%> <%> <%> ) <%> ] <%> ) byte"]}, {"before_ctx": "<%> <+> _ int </%> <%> <-> ( convert . to _ int </%> <%> <-> ) </%> ", "before_line": " m _ block _ hash _ lookup . add ( key , size , new key _ value _ pair < long , long > ( convert . to _ int ( r ) , size ) ) ; ", "after_ctx": " <%> <-> object r = null ; </%>", "after_line": "m _ block _ hash _ lookup . add ( key , size , new key _ value _ pair < long , long > ( r , size ) ) ;", "predictions": ["m _ block _ hash _ lookup key . async . async . new _ pair name size = null = size = return </@> handler common </@> handler common private private ) common"]}, {"before_ctx": "<%> <+> new </%> <%> <+> ( 0 , date _ time _ kind </%> <%> <*> _ now -> ) , - 1 </%> <%> <-> convert . to _ int ( </%> <%> <-> ) </%> ", "before_line": " entry . add _ fileset _ id ( blockset _ id , metadata _ id , convert . to _ int ( fileidobj ) ) ; ", "after_ctx": " <%> <*> normalize _ date _ time _ -> lastmodified . </%> <%> <*> epoch -> universal </%> <%> <*> seconds -> time </%> <%> <-> scantime </%> <%> <+> . ticks </%> <%> <*> scantime -> lastmodified </%>", "after_line": "entry . add _ fileset _ id ( blockset _ id , metadata _ id , fileidobj ) ;", "predictions": ["entry . add _ fileset _ res </%> try _ <@> _ res </%> try _ <@> _ res </%> try _ <@> _ = ( _ = ( -> _ = ( </@> ) ) ;"]}, {"before_ctx": "<%> <*> string -> i _ delete _ results </%> ", "before_line": " handler . run ( ) ; return rs . to _ string ( ) ; ", "after_ctx": " <%> <-> operation . </%>", "after_line": "return handler . run ( ) ;", "predictions": ["return run ( ) ; return to </%> ) . ] _ i _ <@> </%> . async <%> </%> <%> <%> <%>"]}, {"before_ctx": "<%> <*> handler . run ( ) ; return rs . to _ string ( ) ; -> return handler . run ( ) ; </%> ", "before_line": " public operation . i _ list _ results list ( string filter = null ) ", "after_ctx": " <%> <-> operation . </%>", "after_line": "public i _ list _ results list ( string filter = null )", "predictions": ["public i _ list _ results <*> . size > ( size > <@> <@> )"]}, {"before_ctx": "<%> <-> operation . </%> ", "before_line": " public operation . i _ list _ results list ( i _ enumerable < string > filter ) ", "after_ctx": " ", "after_line": "public i _ list _ results list ( i _ enumerable < string > filter )", "predictions": ["public i _ list _ results + if ( ( ( [ <*> <@> _ -> filter string ;"]}, {"before_ctx": "<%> <*> NUM -> deleted _ file _ image _ key </%> ", "before_line": " private void add _ tree _ item ( string value , int imagekey ) ", "after_ctx": " ", "after_line": "private void add _ tree _ item ( string value , string imagekey )", "predictions": ["private string add _ tree _ false bool string m ( </@> <*> )"]}, {"before_ctx": "<%> <+> schedule schedule = m _ wrapper . data _ connection . get _ object _ by _ id < schedule > ( m _ wrapper . schedule _ id ) ; if ( ! schedule . exists _ in _ db ) { run _ in _ background . checked = false ; run _ in _ background . visible = false ; } </%> ", "before_line": " schedule s = program . data _ connection . get _ object _ by _ id < schedule > ( m _ wrapper . schedule _ id ) ; ", "after_ctx": " ", "after_line": "schedule s = m _ wrapper . data _ connection . get _ object _ by _ id < schedule > ( m _ wrapper . schedule _ id ) ;", "predictions": ["schedule s = program . 0 _ . ) </%> </%> _ data [ <-> _ = ) </%> ;"]}, {"before_ctx": " ", "before_line": " m _ client = new amazon . . amazon _ client ( aws _ id , aws _ key , cfg ) ; ", "after_ctx": " <%> <*> put _ bucket _ request request = new put _ bucket _ request ( ) ; request . bucket _ name = bucket _ name ; -> put _ bucket _ request request = new put _ bucket _ request </%> <%> <+> { </%>", "after_line": "m _ client = new amazon _ client ( aws _ id , aws _ key , cfg ) ;", "predictions": ["m _ client = new item _ ( </@> _ id private </@> _ key . u -> ; -> ; _ [ module m ) ( ) ;"]}, {"before_ctx": "<%> <*> application _ settings [ default _ eu _ bucket ] = gui _ options . contains _ key ( default _ eu _ bucket ) ? gui _ options [ default _ eu _ bucket ] : STR ; -> application _ settings [ default _ eu _ bucket ] = gui _ options [ default _ eu _ bucket ] ; </%> <%> <+> if ( gui _ options . contains _ key ( default _ rrs ) ) application _ settings [ default _ rrs ] = gui _ options [ default _ eu _ bucket ] ; </%> ", "before_line": " application _ settings [ allow _ saved _ credentials ] = gui _ options . contains _ key ( allow _ saved _ credentials ) ? gui _ options [ allow _ saved _ credentials ] : STR ; ", "after_ctx": " ", "after_line": "application _ settings [ allow _ saved _ credentials ] = gui _ options [ allow _ saved _ credentials ] ;", "predictions": ["application _ settings [ allow _ saved _ credentials ] = gui _ options [ allow _ saved _ credentials ] ;"]}, {"before_ctx": "<%> <+> list < </%> <%> <*> [ ] -> > </%> <%> <+> m _ filter . filter _ list ( STR , </%> <%> <+> ) </%> ", "before_line": " array . sort ( deletedfolders ) ; array . reverse ( deletedfolders ) ; ", "after_ctx": " ", "after_line": "deletedfolders . sort ( ) ; deletedfolders . reverse ( ) ;", "predictions": ["array . reverse ( deletedfolders ; operation _ _ </%> string string <%> string"]}, {"before_ctx": "<%> <+> list < </%> <%> <*> [ ] -> > </%> <%> <+> m _ filter . filter _ list ( STR , </%> <%> <+> ) </%> ", "before_line": " array . sort ( addedfolders ) ; ", "after_ctx": " ", "after_line": "addedfolders . sort ( ) ;", "predictions": ["addedfolders . sort ( ) <@>"]}, {"before_ctx": " ", "before_line": " if ( t . tag = = null ) count + + ; ", "after_ctx": " <%> <-> if ( tn . tag = = null ) </%>", "after_line": "count + + ;", "predictions": ["count + + ;"]}, {"before_ctx": "<%> <-> if ( t . tag = = null ) </%> ", "before_line": " if ( tn . tag = = null ) count + + ; ", "after_ctx": " ", "after_line": "count + + ;", "predictions": ["if ( tn . tag = = <*> , format format . <%> ) . ;"]}, {"before_ctx": "<%> <*> false -> true </%> <%> <*> s -> f . substring ( basefolder . length - 1 ) </%> <%> <-> list < key _ value _ pair < bool , string > > extras = new list < key _ value _ pair < bool , string > > ( ) ; </%> <%> <*> string key = library . core . filename _ filter . convert _ globbing _ to _ reg _ exp -> if </%> <%> <*> m -> has </%> <%> <*> wrapper . source -> common </%> <%> <*> path -> parent </%> <%> <-> ; </%> <%> <*> foreach -> filters . add </%> <%> <+> new </%> <%> <*> tf in -> ( false , </%> <%> <*> decode -> convert </%> <%> <*> filter ( m -> globbing _ to </%> <%> <*> wrapper . encoded _ filters -> reg _ exp ( STR </%> <%> <*> if ( ! tf . value . starts _ with ( key ) ) -> ) ; </%> <%> <-> extras . add ( tf ) ; </%> ", "before_line": " filters . add _ range ( extras ) ; m _ wrapper . encoded _ filters = library . core . filename _ filter . encode _ as _ filter ( filters ) ; ", "after_ctx": " ", "after_line": "extras . add _ range ( filters ) ; m _ wrapper . encoded _ filters = library . core . filename _ filter . encode _ as _ filter ( extras ) ;", "predictions": ["m _ wrapper . add _ range ( extras ) ; m _ wrapper . encoded _ filters = filters . encode _ as _ filter ( ) ;"]}, {"before_ctx": "<%> <+> list < </%> <%> <+> > </%> ", "before_line": " if ( t . checked ) items . enqueue ( t ) ; ", "after_ctx": " <%> <-> if ( tn . checked ) </%> <%> <+> if ( t . checked ) { </%>", "after_line": "items . enqueue ( t ) ;", "predictions": ["if ( t . checked )"]}, {"before_ctx": "<%> <-> if ( directory . exists ( restorefolder ) ) </%> ", "before_line": " if ( directory . exists ( restorefolder ) ) directory . delete ( restorefolder , true ) ; ", "after_ctx": " <%> <-> if ( directory . exists ( restorefolder ) ) </%>", "after_line": "directory . delete ( restorefolder , true ) ;", "predictions": ["directory . delete ( restorefolder , true ) ;"]}, {"before_ctx": "<%> <-> if ( directory . exists ( restorefolder ) ) </%> ", "before_line": " if ( directory . exists ( restorefolder ) ) directory . delete ( restorefolder , true ) ; ", "after_ctx": " ", "after_line": "directory . delete ( restorefolder , true ) ;", "predictions": ["directory . delete ( restorefolder , true , true , </@> ) result ( restorefolder i i i _ <*> ;"]}, {"before_ctx": "<%> <-> . i </%> <%> <*> backend -> wrapper </%> ", "before_line": " backend . delete ( be . filename ) ; delete _ signature _ cache _ copy ( be ) ; ", "after_ctx": " <%> <*> { backend . delete ( bex . filename ) ; delete _ signature _ cache _ copy ( bex ) ; } -> backend . delete ( bex ) ; </%> <%> <-> { backend . delete ( bex . filename ) ; delete _ signature _ cache _ copy ( bex ) ; </%>", "after_line": "backend . delete ( be ) ;", "predictions": ["backend _ signature _ cache _ copy ( be ) ;"]}, {"before_ctx": " ", "before_line": " { backend . delete ( be . signature _ file [ i ] . filename ) ; delete _ signature _ cache _ copy ( be . signature _ file [ i ] ) ; } ", "after_ctx": " <%> <-> { backend . delete ( be . content _ volumes [ i ] . filename ) ; delete _ signature _ cache _ copy ( be . content _ volumes [ i ] ) ; } </%>", "after_line": "backend . delete ( be . signature _ file [ i ] ) ;", "predictions": ["delete . delete ( be . signature _ file [ i </%> ( <-> . cache _ <*> [ [ ( = ; , , <%> ( <%> ( is _ file new </%> = be = be ( be ( be . signature ) ) ) ) ; _ signature _ file _ <%> ( [ . signature _ string <*> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> . signature </%> ) -> >"]}, {"before_ctx": "<%> <*> { backend . delete ( be . signature _ file [ i ] . filename ) ; delete _ signature _ cache _ copy ( be . signature _ file [ i ] ) ; } -> backend . delete ( be . signature _ file [ i ] ) ; </%> ", "before_line": " { backend . delete ( be . content _ volumes [ i ] . filename ) ; delete _ signature _ cache _ copy ( be . content _ volumes [ i ] ) ; } ", "after_ctx": " <%> <-> private list < backup _ entry > parse _ file _ list ( duplicati . library . backend . i _ backend backend ) { </%>", "after_line": "backend . delete ( be . content _ volumes [ i ] ) ;", "predictions": ["{ backend . delete ( be . content _ volumes [ i ] . filename ) ;"]}, {"before_ctx": " ", "before_line": " m _ stderr . write _ line ( entry . to _ string ( ) ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%>", "after_line": "m _ stderr . write _ line ( entry ) ;", "predictions": ["m _ stderr . write _ <@> ) STR"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> ", "before_line": " m _ stdout . write _ line ( entry . to _ string ( ) ) ; ", "after_ctx": " ", "after_line": "m _ stdout . write _ line ( entry ) ;", "predictions": ["m _ stdout . write _ <@> ) STR STR"]}, {"before_ctx": "<%> <+> case log _ message _ type . profiling : if ( log . log _ level = = log _ message _ type . profiling & & verbose _ output ) add _ verbose _ message ( message , new object [ 0 ] ) ; break ; </%> ", "before_line": " if ( log . log _ level = = log _ message _ type . profiling ) add _ message ( message ) ; else add _ verbose _ message ( message , new object [ 0 ] ) ; ", "after_ctx": " ", "after_line": "add _ message ( message ) ;", "predictions": ["add _ verbose _ message ( message , new object [ data if ( _ _ _ . ! ) ;"]}, {"before_ctx": "<%> <*> hashlist -> i </%> <%> <*> collector -> enumerable < string > </%> <%> <*> list -> enumerable </%> ", "before_line": " m _ database . add _ blockset ( filehash , size , m _ blockbuffer . length , hashlist . hashes , blocklisthashes , out blocksetid , m _ transaction ) ; ", "after_ctx": " ", "after_line": "m _ database . add _ blockset ( filehash , size , m _ blockbuffer . length , hashlist , blocklisthashes , out blocksetid , m _ transaction ) ;", "predictions": ["m _ database . add _ blockset ( filehash , size _ result . . . method . <%> . i . folder _ blockbuffer _ length _ <%> _ <%> copy ) ; & </%> _ log STR STR . options _ bool { <%> _ m , m . empty , m _ m , [ . entry ) file . content ) file . entry ) file . entry file file . [ . signature signature signature signature file _ entry _ </@> _ copy signature path signature ) file . = ) ;"]}, {"before_ctx": "<%> <-> } </%> <%> <+> req . headers . add ( STR , api _ version ) ; </%> ", "before_line": " try { system . net . http _ web _ request req = create _ request ( remotename ) ; req . method = system . net . web _ request _ methods . http . put ; req . content _ type = STR ; ", "after_ctx": " ", "after_line": "system . net . http _ web _ request req = create _ request ( remotename ) ; req . method = system . net . web _ request _ methods . http . put ; req . content _ type = STR ; try {", "predictions": ["system . net . http _ web _ request req = </@> . <-> </%> remotename ) ) ; ; ) ( http _ </@> ( <+> . connection _ type <%> ;"]}, {"before_ctx": " ", "before_line": " private readonly forest _ hash . i _ metahash empty _ metadata ; ", "after_ctx": " <%> <*> forest _ hash -> utility </%>", "after_line": "private readonly i _ metahash empty _ metadata ;", "predictions": ["private readonly i _ metahash empty _ line to to to"]}, {"before_ctx": "<%> <*> forest _ hash -> utility </%> ", "before_line": " forest _ hash . i _ metahash metahash ; ", "after_ctx": " ", "after_line": "i _ metahash metahash ;", "predictions": ["i _ metahash metahash ;"]}, {"before_ctx": " ", "before_line": " private bool add _ folder _ to _ output ( string filename , date _ time scantime , forest _ hash . i _ metahash meta ) ", "after_ctx": " <%> <-> forest _ hash . </%>", "after_line": "private bool add _ folder _ to _ output ( string filename , date _ time scantime , i _ metahash meta )", "predictions": ["private bool add _ folder _ to _ private <%> )"]}, {"before_ctx": "<%> <-> forest _ hash . </%> ", "before_line": " private bool add _ symlink _ to _ output ( string filename , date _ time scantime , forest _ hash . i _ metahash meta ) ", "after_ctx": " <%> <-> forest _ hash . </%>", "after_line": "private bool add _ symlink _ to _ output ( string filename , date _ time scantime , i _ metahash meta )", "predictions": ["private bool add _ symlink _ to ( string filename ) </@> , i _ + 1 = i ) ;"]}, {"before_ctx": "<%> <-> forest _ hash . </%> ", "before_line": " private void add _ file _ to _ output ( string filename , long size , date _ time scantime , forest _ hash . i _ metahash metadata , hashlist _ collector hashlist , string filehash , i _ list < string > blocklisthashes ) ", "after_ctx": " ", "after_line": "private void add _ file _ to _ output ( string filename , long size , date _ time scantime , i _ metahash metadata , hashlist _ collector hashlist , string filehash , i _ list < string > blocklisthashes )", "predictions": ["private void add _ file _ to _ output ( string database ; long size <%> stream <%> stream . request . . be ) metadata ( </%> </%> ( ) bool blocklisthashes ( i _ list ; log _ </%> type ! _ ) out <%> display entry </%> </%> </%> </%> </%> ( )"]}, {"before_ctx": "<%> <-> duplicati _ </%> ", "before_line": " public duplicati _ operation _ mode operation _ mode { get { return m _ operation _ mode ; } } ", "after_ctx": " ", "after_line": "public operation _ mode operation _ mode { get { return m _ operation _ mode ; } }", "predictions": ["public duplicati _ operation _ mode ) string _ ( return ; ( <@> ( . ( <+> return </%> ( } hash _ string . <%> ( request . ; request . [ new <-> _ ( } _ ( } _ log ; ) ) . _ <%> ( m . <%> . _ <-> new new new new . ( < < new < new . new < ( . new < < < . . . ( new <+> . entry . _ = ; <%> ) ;"]}, {"before_ctx": "<%> <-> program . </%> <%> <-> duplicati . </%> <%> <-> program . </%> <%> <+> if ( ! commandline _ options . try _ get _ value ( STR , out </%> <%> <*> ; -> ) ) </%> <%> <-> if ( ! commandline _ options . try _ get _ value ( STR , out pts ) ) </%> <%> <+> { </%> ", "before_line": " program . data _ connection . purge _ log _ data ( library . utility . timeparser . parse _ time _ interval ( pts , date _ time . now , true ) ) ; ", "after_ctx": " <%> <-> program . </%>", "after_line": "} data _ connection . purge _ log _ data ( library . utility . timeparser . parse _ time _ interval ( pts , date _ time . now , true ) ) ;", "predictions": ["program . data _ connection . purge _ log _ data ; parse _ bool ( parse _ parse _ return _ interval ( true [ <@> . now [ true [ true i true <*> <*> ) <*> ; <*> <*> name ) ;"]}, {"before_ctx": "<%> <+> if ( entry . parsed _ manifest ! = null ) return entry . parsed _ manifest ; else if ( entry . alternate ! = null & & entry . alternate . parsed _ manifest ! = null ) return entry . alternate . parsed _ manifest ; </%> ", "before_line": " backend . get ( entry , tf , null ) ; ", "after_ctx": " <%> <+> , m _ options . skip _ file _ hash _ checks </%> <%> <+> entry . parsed _ manifest = mf ; if ( string . is _ null _ or _ empty ( mf . self _ filename ) ) mf . self _ filename = entry . filename ; </%>", "after_line": "backend . get ( entry , null , tf , null ) ;", "predictions": ["get ( entry , tf , null ) ;"]}, {"before_ctx": "<%> <-> return task . from _ result ( true ) ; </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <-> system . io . </%> ", "before_line": " public void get ( string remotename , system . io . stream output ) ", "after_ctx": " ", "after_line": "public void get ( string remotename , stream output )", "predictions": ["public void get ( string remotename , stream output )"]}, {"before_ctx": " ", "before_line": " if ( is _ testing ) throw new interface . folder _ missing _ exception ( wex ) ; else return new list < i _ file _ entry > ( ) ; ", "after_ctx": " <%> <-> if ( is _ testing ) </%> <%> <-> else return new list < i _ file _ entry > ( ) ; </%> <%> <-> } public static bool is _ valid _ hostname ( string bucketname ) { </%>", "after_line": "throw new interface . folder _ missing _ exception ( wex ) ;", "predictions": ["return new list < i _ file _ entry > ( ( ( 0 log _ & type log log ) <%> <-> . display < entry entry entry entry entry entry entry ) ) ;"]}, {"before_ctx": "<%> <-> if ( is _ testing ) </%> <%> <-> else return new list < i _ file _ entry > ( ) ; </%> ", "before_line": " if ( is _ testing ) throw new interface . folder _ missing _ exception ( tex ) ; else return new list < i _ file _ entry > ( ) ; ", "after_ctx": " <%> <-> } public static bool is _ valid _ hostname ( string bucketname ) { return ! new system . text . regular _ expressions . regex ( STR ) . match ( bucketname ) . success ; } public string display _ name { get { return strings . backend . display _ name ; } </%>", "after_line": "throw new interface . folder _ missing _ exception ( tex ) ;", "predictions": ["return new list < i _ file _ entry > ( entry entry entry entry entry entry ) )"]}, {"before_ctx": "<%> <+> string versionscript = preparse _ sql ( versions [ i ] , preparser _ vars ) ; </%> <%> <*> versions [ i ] -> versionscript </%> ", "before_line": " cmd . command _ text = preparse _ sql ( c , preparser _ vars ) ; ", "after_ctx": " <%> <+> preparser _ vars [ STR ] = i + 1 ; </%>", "after_line": "cmd . command _ text = c ;", "predictions": ["cmd . command _ text = preparse _ sql ( c _ type cache cache . command _ i cache ( return c _ </%> & <@> ) ) ) ) ) message , preparser . date _ STR { else"]}, {"before_ctx": " ", "before_line": " throw new user _ information _ exception ( string . format ( STR ) , STR ) ; ", "after_ctx": " <%> <-> ( string . format </%> <%> <-> ) </%>", "after_line": "throw new user _ information _ exception ( STR , STR ) ;", "predictions": ["throw new user _ information _ < ( _ result </@> </@> < if ( if ) , STR , </%> _ format ;"]}, {"before_ctx": "<%> <-> ( string . format </%> <%> <-> ) </%> ", "before_line": " throw new user _ information _ exception ( string . format ( STR ) , STR ) ; ", "after_ctx": " ", "after_line": "throw new user _ information _ exception ( STR , STR ) ;", "predictions": ["throw new user _ information _ exception ( if ; _ _ ( _ _ _ _ _ if ) <%> <%> ) ) ) http"]}, {"before_ctx": "<%> <*> snapshot -> options . snap _ shot </%> <%> <*> policy -> strategy </%> <%> <*> snap _ shot -> optimization </%> <%> <*> mode -> strategy </%> <%> <*> snapshot -> options . raw </%> <%> <*> snapshot -> options . snap _ shot </%> <%> <*> policy -> strategy </%> <%> <*> snap _ shot -> optimization </%> <%> <*> mode -> strategy </%> <%> <*> snapshot -> options . snap _ shot </%> <%> <*> policy -> strategy </%> <%> <*> snap _ shot -> optimization </%> <%> <*> mode -> strategy </%> ", "before_line": " m _ stat . log _ warning ( string . format ( strings . r _ sync _ dir . snapshot _ failed _ error , ex . to _ string ( ) ) , null ) ; ", "after_ctx": " <%> <*> m _ snapshot = new duplicati . library . snapshots . no _ snapshot ( m _ sourcefolder ) ; -> { </%> <%> <+> m _ snapshot = new duplicati . library . snapshots . no _ snapshot ( m _ sourcefolder , options . raw _ options ) ; } dictionary < string , snapshots . usn _ helper > usn _ helpers = null ; list < string > unchanged = new list < string > ( ) ; </%>", "after_line": "m _ stat . log _ warning ( string . format ( strings . r _ sync _ dir . snapshot _ failed _ error , ex . to _ string ( ) ) , ex ) ;", "predictions": ["m _ stat . log _ warning ( strings . format ( strings . r _ sync _ dir . snapshot _ failed _ error , ex ) , null ) ;"]}, {"before_ctx": " ", "before_line": " return task . from _ result ( metadata ) ; ", "after_ctx": " <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>", "after_line": "return metadata ;", "predictions": ["return metadata ;"]}, {"before_ctx": "<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> ", "before_line": " return task . from _ result ( new dictionary < string , string > ( ) ) ; ", "after_ctx": " ", "after_line": "return new dictionary < string , string > ( ) ;", "predictions": ["return new dictionary < string , from > <%> < ) ;"]}, {"before_ctx": "<%> <-> task < </%> <%> <-> > </%> ", "before_line": " return task . from _ result ( false ) ; ", "after_ctx": " <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>", "after_line": "return false ;", "predictions": ["return false ;"]}, {"before_ctx": "<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> ", "before_line": " return task . from _ result ( false ) ; ", "after_ctx": " <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>", "after_line": "return false ;", "predictions": ["return false ;"]}, {"before_ctx": "<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> ", "before_line": " return task . from _ result ( true ) ; ", "after_ctx": " ", "after_line": "return true ;", "predictions": ["return true ;"]}, {"before_ctx": " ", "before_line": " return task . from _ result ( false ) ; ", "after_ctx": " <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>", "after_line": "return false ;", "predictions": ["return false ;"]}, {"before_ctx": "<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> ", "before_line": " return task . from _ result ( false ) ; ", "after_ctx": " ", "after_line": "return false ;", "predictions": ["return false ;"]}, {"before_ctx": " ", "before_line": " return task . from _ result ( false ) ; ", "after_ctx": " <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>", "after_line": "return false ;", "predictions": ["return false ;"]}, {"before_ctx": "<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> ", "before_line": " return task . from _ result ( false ) ; ", "after_ctx": " ", "after_line": "return false ;", "predictions": ["return false ;"]}, {"before_ctx": " ", "before_line": " return task . from _ result ( false ) ; ", "after_ctx": " <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>", "after_line": "return false ;", "predictions": ["return false ;"]}, {"before_ctx": "<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> ", "before_line": " return task . from _ result ( false ) ; ", "after_ctx": " <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%>", "after_line": "return false ;", "predictions": ["return false ;"]}, {"before_ctx": "<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> ", "before_line": " return task . from _ result ( true ) ; ", "after_ctx": " ", "after_line": "return true ;", "predictions": ["return true ;"]}, {"before_ctx": " ", "before_line": " s + = http _ utility . url _ encode ( username ? ? STR ) ; ", "after_ctx": " <%> <-> http _ utility . </%>", "after_line": "s + = url _ encode ( username ? ? STR ) ;", "predictions": ["s + = url _ encode ( username ( ( string io io io = = </%> attributes attributes attributes attributes ) -> ( < ) -> arg -> <%> ) arg <-> if _ ! </%> system system ( username ( username ( ( = directory io io <%> <%> copy io io io io <%> <%> io io io <%> <%> copy io io io <%> <%> copy io io io <%> <%> copy io io io <%> <%> copy io io io <%> <%> copy io io <%> <%> <%> io io <%> <%> io io <%>"]}, {"before_ctx": "<%> <-> http _ utility . </%> ", "before_line": " s + = http _ utility . url _ encode ( password ? ? STR ) ; ", "after_ctx": " ", "after_line": "s + = url _ encode ( password ? ? STR ) ;", "predictions": ["s + = url _ encode ( password ) )"]}, {"before_ctx": "<%> <-> = null </%> <%> <*> { get { return -> = > </%> <%> <-> } } </%> ", "before_line": " public const system . io . file _ attributes attribute _ error = ( system . io . file _ attributes ) ( 1 < < NUM ) ; ", "after_ctx": " <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <*> public static void copy _ stream ( system . io . stream source , system . io . stream target , bool try _ rewind _ source , byte [ ] buf = null ) -> public static void copy _ stream ( stream source , stream target , bool try _ rewind _ source , byte [ ] buf = null ) </%>", "after_line": "public const file _ attributes attribute _ error = ( file _ attributes ) ( 1 < < NUM ) ;", "predictions": ["public const file _ attributes attribute _ error = ( file _ attributes ) ( 1 < < NUM ) ;"]}, {"before_ctx": "<%> <-> = null </%> <%> <*> { get { return -> = > </%> <%> <-> } } </%> <%> <-> system . io . </%> <%> <-> system . io . </%> ", "before_line": " public delegate bool enumeration _ filter _ delegate ( string rootpath , string path , system . io . file _ attributes attributes ) ; ", "after_ctx": " <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <*> public static void copy _ stream ( system . io . stream source , system . io . stream target , bool try _ rewind _ source , byte [ ] buf = null ) -> public static void copy _ stream ( stream source , stream target , bool try _ rewind _ source , byte [ ] buf = null ) </%> <%> <-> catch { } </%>", "after_line": "public delegate bool enumeration _ filter _ delegate ( string rootpath , string path , file _ attributes attributes ) ;", "predictions": ["public delegate bool enumeration _ filter _ delegate ( string rootpath , string path , file _ attributes attributes ) ;"]}, {"before_ctx": "<%> <-> = null </%> <%> <*> { get { return -> = > </%> <%> <-> } } </%> <%> <-> system . io . </%> <%> <-> system . io . </%> <%> <-> system . io . </%> ", "before_line": " public static void copy _ stream ( system . io . stream source , system . io . stream target ) ", "after_ctx": " <%> <*> public static void copy _ stream ( system . io . stream source , system . io . stream target , bool try _ rewind _ source , byte [ ] buf = null ) -> public static void copy _ stream ( stream source , stream target , bool try _ rewind _ source , byte [ ] buf = null ) </%> <%> <*> catch { } -> catch </%>", "after_line": "public static void copy _ stream ( stream source , stream target )", "predictions": ["public static void copy _ stream ( stream source , stream target )"]}, {"before_ctx": "<%> <-> i _ filter match ; </%> <%> <*> bool result ; if ( ! filter . matches ( path , out result , out match ) ) -> if ( ! filter . matches ( path , out var result , out ) ) </%> ", "before_line": " public delegate system . io . file _ attributes extract _ file _ attributes ( string path ) ; ", "after_ctx": " <%> <-> new file _ system _ interaction ( system . io . </%> <%> <-> ) </%> <%> <-> new file _ system _ interaction ( system . io . </%> <%> <-> ) </%> <%> <-> , null </%>", "after_line": "public delegate file _ attributes extract _ file _ attributes ( string path ) ;", "predictions": ["public delegate file _ attributes extract _ file _ attributes ( string path ) ;"]}, {"before_ctx": "<%> <*> bool result ; if ( ! filter . matches ( path , out result , out match ) ) -> if ( ! filter . matches ( path , out var result , out ) ) </%> <%> <-> system . io . </%> ", "before_line": " return enumerate _ file _ system _ entries ( rootpath , callback , new file _ system _ interaction ( system . io . directory . get _ directories ) , new file _ system _ interaction ( system . io . directory . get _ files ) ) ; ", "after_ctx": " <%> <-> , null </%>", "after_line": "return enumerate _ file _ system _ entries ( rootpath , callback , directory . get _ directories , directory . get _ files ) ;", "predictions": ["return enumerate _ file _ system _ entries ( rootpath , callback , new file _ </%> ( ; ; ;"]}, {"before_ctx": "<%> <-> , null </%> ", "before_line": " system . io . file _ attributes attr = attribute _ reader = = null ? system . io . file _ attributes . directory : attribute _ reader ( rootpath ) ; ", "after_ctx": " ", "after_line": "file _ attributes attr = attribute _ reader = = null ? file _ attributes . directory : attribute _ reader ( rootpath ) ;", "predictions": ["file _ attributes attr = attribute _ reader = = file ? </%> . . . = </%> path ( > is return ? ? ? ? ? ? ? ? ? </%> _ reader . _ stream <*> ( [ _ io ) ) public"]}, {"before_ctx": "<%> <-> system . io . </%> ", "before_line": " system . io . file _ attributes attr = attribute _ reader = = null ? system . io . file _ attributes . normal : attribute _ reader ( s ) ; ", "after_ctx": " ", "after_line": "file _ attributes attr = attribute _ reader = = null ? file _ attributes . normal : attribute _ reader ( s ) ;", "predictions": ["file _ attributes attr = attribute _ reader </%> </%> null < <*> path _ <-> . <%> is ) mono stream ! path ! ! io _ </%> file ! ! ;"]}, {"before_ctx": " ", "before_line": " return enumerate _ folders ( folder , filter ) . sum ( ( path ) = > new system . io . file _ info ( path ) . length ) ; ", "after_ctx": " <%> <-> system . io . </%> <%> <*> if ( ! path . ends _ with ( directory _ separator _ string , string _ comparison . ordinal ) ) return path + = directory _ separator _ string ; else return path ; -> return ! path . ends _ with ( directory _ separator _ string , string _ comparison . ordinal ) </%> <%> <+> ? path + directory _ separator _ string </%>", "after_line": "return enumerate _ folders ( folder , filter ) . sum ( ( path ) = > new file _ info ( path ) . length ) ;", "predictions": ["return enumerate _ folders ( folder , filter ) . sum ( ( path ) = catch new . <@> stream , , </%> </%> = , <@> </%> </%> . length ) source"]}, {"before_ctx": "<%> <+> ? path + directory _ separator _ string : path ; </%> <%> <*> if ( ! path . ends _ with ( separator , string _ comparison . ordinal ) ) return path + = separator ; else return path ; -> return append _ dir _ separator ( separator ) ; </%> ", "before_line": " public static int force _ stream _ read ( system . io . stream stream , byte [ ] buf , int count ) ", "after_ctx": " ", "after_line": "public static int force _ stream _ read ( stream stream , byte [ ] buf , int count )", "predictions": ["public static int force _ stream _ read ( stream stream , byte [ ] buf <%> ; ; ;"]}, {"before_ctx": "<%> <*> system . io . stream _ reader -> var </%> <%> <-> system . io . </%> ", "before_line": " return utility . parse _ bool ( value , ( ) = > default ) ; ", "after_ctx": " ", "after_line": "return parse _ bool ( value , ( ) = > default ) ;", "predictions": ["return parse _ bool ( value , ( = <%> <%> </@> = ? ? ? default </%> </%> default </%> , } ) bool -> ) bool -> bool <@> _ ; in <*> ( <+> ( ( ( = <%> copy <%> null <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> [ <%> <%> <%> <%> <%> < <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> ["]}, {"before_ctx": "<%> <*> public static bool is _ mono { get { return type . get _ type ( STR ) ! = null ; } } -> public static bool is _ mono = > type . get _ type ( STR ) ! = null ; </%> ", "before_line": " var regex = new system . text . regular _ expressions . regex ( STR ) ; ", "after_ctx": " ", "after_line": "var regex = new regex ( STR ) ;", "predictions": ["var regex = new regex ( STR ) ;"]}, {"before_ctx": "<%> <*> date _ time dt ; if ( ! try _ deserialize _ date _ time ( str , out dt ) ) -> if ( ! try _ deserialize _ date _ time ( str , out var dt ) ) </%> ", "before_line": " return utility . get _ unique _ items ( collection , equality _ comparer < t > . default , out duplicate _ items ) ; ", "after_ctx": " <%> <*> hash _ set < t > -> var </%> <%> <*> foreach ( t item in collection ) -> foreach ( var item in collection ) </%> <%> <+> { </%>", "after_line": "return get _ unique _ items ( collection , equality _ comparer < t > . default , out duplicate _ items ) ;", "predictions": ["return get _ unique _ items ( collection , equality _ comparer < t > . public ) attributes attributes attributes ; ( <%> _ <-> ) ; _ comparer ( </%> ] < ) </%> </%> </%> ( ;"]}, {"before_ctx": " ", "before_line": " using ( var sw = new system . io . string _ writer ( sb ) ) ", "after_ctx": " <%> <-> system . text . </%> <%> <-> system . text . </%>", "after_line": "using ( var sw = new string _ writer ( sb ) )", "predictions": ["using ( var sw = new string _ parse ) <%>"]}, {"before_ctx": " ", "before_line": " this . auth . password _ credentials = new password _ based _ request ( ) ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "this . auth . password _ credentials = new password _ based _ request", "predictions": ["this . auth . password _ credentials = </@> return </@>"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " this . auth . api _ credentials = new api _ key _ based _ request ( ) ", "after_ctx": " ", "after_line": "this . auth . api _ credentials = new api _ key _ based _ request", "predictions": ["auth . api _ credentials = new api return </@> return )"]}, {"before_ctx": " ", "before_line": " options [ STR ] = null ; ", "after_ctx": " <%> <*> null -> STR </%> <%> <+> options [ STR ] = STR ; </%>", "after_line": "options [ STR ] = STR ;", "predictions": ["options [ STR ] = null ;"]}, {"before_ctx": "<%> <*> null -> STR </%> ", "before_line": " options [ STR ] = null ; ", "after_ctx": " <%> <+> options [ STR ] = STR ; </%>", "after_line": "options [ STR ] = STR ;", "predictions": ["options [ STR ] = null ;"]}, {"before_ctx": "<%> <*> path _ arg -> var </%> <%> <+> { path = path } </%> <%> <-> pa . path = path ; </%> ", "before_line": " folder _ metadata fm = post _ and _ get _ json _ data < folder _ metadata > ( url , pa ) ; return fm ; ", "after_ctx": " <%> <*> upload _ session _ start _ arg -> var </%>", "after_line": "return post _ and _ get _ json _ data < folder _ metadata > ( url , pa ) ;", "predictions": ["return post _ and _ get _ json _ data < bool . is . mono _ json _ ] <*> . folder ! url ! ! <+> _ str _ comparer . bool . ( 1 < ( < ( > public byte . delegate > connection connection connection _ ! < connection connection connection _ string options connection _ } connection _ json . . _ using _ <%> _ json _ ! < connection . . . connection _ <%> _ json connection connection _ ! < connection . . connection = . options connection connection _"]}, {"before_ctx": " ", "before_line": " newtonsoft _ json _ json _ property _ tag ", "after_ctx": " <%> <*> u _ int -> ulong </%>", "after_line": "json _ property _ tag", "predictions": ["newtonsoft _ json _ json _ property _ ;"]}, {"before_ctx": "<%> <*> port = database _ connection . application _ settings . last _ webserver _ port = = - 1 ? server _ url . port : database _ connection . application _ settings . last _ webserver _ port , scheme = scheme } ) . uri ; } } string pwd ; if ( options . try _ get _ value ( STR , out pwd ) ) { password = pwd ; saltedpassword = false ; } string url ; if ( options . try _ get _ value ( hosturl _ option , out url ) ) server _ url = new uri ( url ) ; start _ tray ( args , options , toolkit , hosted , password , saltedpassword ) ; } catch ( exception ex ) { file . append _ all _ text ( STR , ex . to _ string ( ) ) ; throw ; } } private static void start _ tray ( string [ ] args , dictionary < string , string > options , string toolkit , hosted _ instance _ keeper hosted , string password , bool saltedpassword ) { try { using ( hosted ) { var re _ spawn = 0 ; do { try { system . net . service _ point _ manager . security _ protocol | = security _ protocol _ type . tls | security _ protocol _ type . tls ; using ( connection = new http _ server _ connection ( server _ url , password , saltedpassword , database _ connection ! = null ? password _ source . database : password _ source . hosted _ server , disable _ tray _ icon _ login , options ) ) -> using ( var tk = run _ tray _ icon ( toolkit ) ) </%> <%> <*> using ( var tk = run _ tray _ icon ( toolkit ) ) -> if ( hosted ! = null & & server . program . application _ instance ! = null ) </%> <%> <+> server . program . application _ instance . second _ instance _ detected + = new server . single _ instance . second _ instance _ delegate ( x = > { tk . show _ url _ in _ window ( server _ url . to _ string ( ) ) ; } ) ; if ( openui ) </%> <%> <-> if ( hosted ! = null & & server . program . application _ instance ! = null ) server . program . application _ instance . second _ instance _ detected + = new server . single _ instance . second _ instance _ delegate ( x = > { tk . show _ url _ in _ window ( server _ url . to _ string ( ) ) ; } ) ; </%> <%> <*> if ( openui ) -> try </%> ", "before_line": " try { tk . show _ url _ in _ window ( connection . status _ window _ url ) ; duplicati . server . program . is _ first _ run = false ; duplicati . server . program . server _ port _ changed = false ; } catch { } ", "after_ctx": " <%> <*> action shutdown _ event = ( ) = > -> catch </%> <%> <*> re _ spawn = NUM ; -> } } action shutdown _ event = ( ) = > { </%> <%> <-> tk . invoke _ exit ( ) ; </%>", "after_line": "tk . show _ url _ in _ window ( connection . status _ window _ url ) ; duplicati . server . program . is _ first _ run = false ; duplicati . server . program . server _ port _ changed = false ;", "predictions": ["using ( second ! = null & & server . program . application _ instance . second _ instance _ detected ( x _ url . to _ string ) )"]}, {"before_ctx": " ", "before_line": " directory . delete ( snapshot _ base . normalize _ path ( path ) ) ; ", "after_ctx": " <%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%>", "after_line": "directory . delete ( normalize _ path ( path ) ) ;", "predictions": ["directory . delete ( normalize _ <%> ( path ) ) ;"]}, {"before_ctx": "<%> <-> snapshot _ base . </%> ", "before_line": " directory . create _ directory ( snapshot _ base . normalize _ path ( path ) ) ; ", "after_ctx": " <%> <-> snapshot _ base . </%>", "after_line": "directory . create _ directory ( normalize _ path ( path ) ) ;", "predictions": ["create _ directory ( snapshot _ base . directory _ time ( <@> <%> <%> <%> <%> <%> <%> <%> <-> ) last _ = ) <*>"]}, {"before_ctx": "<%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%> ", "before_line": " return directory . exists ( snapshot _ base . normalize _ path ( path ) ) ; ", "after_ctx": " ", "after_line": "return directory . exists ( normalize _ path ( path ) ) ;", "predictions": ["return directory . exists ( normalize . normalize . normalize . normalize . directory ) time time _ last time _ directory _ </%> ."]}, {"before_ctx": " ", "before_line": " return unix _ support . file . get _ symlink _ target ( snapshot _ base . normalize _ path ( path ) ) ; ", "after_ctx": " <%> <-> snapshot _ base . </%>", "after_line": "return unix _ support . file . get _ symlink _ target ( normalize _ path ( path ) ) ;", "predictions": ["return file . get _ symlink _ target base get _ time _ target ( foreach _ <%> ( <%> parent ) _ ; </%> ( <-> ( <-> ( <-> ( v file . s ( ; ( ; ( string file file file file file file file file file file file ( string file file _ string ) file file file _ } ( ; . c . callback . system . callback ) . c ) . c ) . c ) attributes c . callback ( ; . system ( ; . system . system _"]}, {"before_ctx": "<%> <-> snapshot _ base . </%> ", "before_line": " return path . get _ directory _ name ( snapshot _ base . normalize _ path ( path ) ) ; ", "after_ctx": " ", "after_line": "return path . get _ directory _ name ( normalize _ path ( path ) ) ;", "predictions": ["return get _ directory _ name STR ( , } _ } ( ( base base base base ( base ( ( . <-> = time . . ) _ </%> . return _ <%> </%> ) name name name name string string ( ) string ) in ) ( ) string all _ ] _ files . all _ ] . foreach string string string ) ) STR"]}, {"before_ctx": " ", "before_line": " directory . set _ last _ write _ time _ utc ( snapshot _ base . normalize _ path ( path ) , time ) ; ", "after_ctx": " <%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%>", "after_line": "directory . set _ last _ write _ time _ utc ( normalize _ path ( path ) , time ) ;", "predictions": ["set _ last _ write _ <@> _ [ _ [ _ utc <%> return return <-> </@> ;"]}, {"before_ctx": "<%> <-> snapshot _ base . </%> ", "before_line": " directory . set _ creation _ time _ utc ( snapshot _ base . normalize _ path ( path ) , time ) ; ", "after_ctx": " <%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%>", "after_line": "directory . set _ creation _ time _ utc ( normalize _ path ( path ) , time ) ;", "predictions": ["set _ creation _ time _ utc </%> </@> _ path </%> date ) <%> time ) <+> <+> ) _ path <*>"]}, {"before_ctx": "<%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%> ", "before_line": " return directory . get _ last _ write _ time _ utc ( snapshot _ base . normalize _ path ( path ) ) ; ", "after_ctx": " <%> <-> snapshot _ base . </%>", "after_line": "return directory . get _ last _ write _ time _ utc ( normalize _ path ( path ) ) ;", "predictions": ["return get _ last _ write _ time _ utc <%> </@> . normalize _ m </%> m command command ; _ = . return _ ! , ! ) ) . </%>"]}, {"before_ctx": "<%> <-> snapshot _ base . </%> <%> <-> snapshot _ base . </%> ", "before_line": " return directory . get _ creation _ time _ utc ( snapshot _ base . normalize _ path ( path ) ) ; ", "after_ctx": " ", "after_line": "return directory . get _ creation _ time _ utc ( normalize _ path ( path ) ) ;", "predictions": ["return get _ creation _ time _ utc -> foreach . from _ path <%> time time time time <-> ;"]}, {"before_ctx": " ", "before_line": " directory . delete ( snapshot _ base . normalize _ path ( path ) , recursive ) ; ", "after_ctx": " <%> <-> snapshot _ base . </%>", "after_line": "directory . delete ( normalize _ path ( path ) , recursive ) ;", "predictions": ["directory . delete ( normalize _ base . normalize _ ) base ) </%> recursive ) </%> ) <%>"]}, {"before_ctx": "<%> <-> snapshot _ base . </%> ", "before_line": " var f = snapshot _ base . normalize _ path ( file ) ; ", "after_ctx": " ", "after_line": "var f = normalize _ path ( file ) ;", "predictions": ["var f = normalize _ path base ; ; ; ( file ) ( binary ) ,"]}, {"before_ctx": "<%> <*> dictionary < string , -> hash _ set < </%> <%> <*> dictionary < string , -> hash _ set < </%> <%> <*> if ( lookup . contains _ key ( v . file . name ) ) doubles [ v . file . name ] = null ; else lookup [ v . file . name ] = null ; -> if ( ! lookup . add ( v . file . name ) ) </%> <%> <+> doubles . add ( v . file . name ) ; </%> ", "before_line": " var s = string . format ( STR , string . join ( STR , doubles . keys ) ) ; ", "after_ctx": " ", "after_line": "var s = string . format ( STR , string . join ( STR , doubles ) ) ;", "predictions": ["var s = string . format ( list </%> <-> ) ; ; _ keys ( list ) ; ; STR ;"]}, {"before_ctx": "<%> <-> program . </%> <%> <-> duplicati . </%> <%> <-> program . </%> <%> <+> if ( ! commandline _ options . try _ get _ value ( STR , out </%> <%> <*> ; -> ) ) </%> <%> <-> if ( ! commandline _ options . try _ get _ value ( STR , out pts ) ) </%> <%> <+> { </%> ", "before_line": " program . data _ connection . purge _ log _ data ( library . utility . timeparser . parse _ time _ interval ( pts , date _ time . now , true ) ) ; ", "after_ctx": " <%> <-> program . </%>", "after_line": "} data _ connection . purge _ log _ data ( library . utility . timeparser . parse _ time _ interval ( pts , date _ time . now , true ) ) ;", "predictions": ["program . data _ connection . purge ( parse . parse . parse . parse ( [ ( [ ( new _ utility . & filter ( & ( ! ( > > filter filter filter filter filter ) ;"]}, {"before_ctx": "<%> <-> long prefixid , </%> ", "before_line": " m _ selectfilelastmodified _ command . set _ parameter _ value ( 0 , prefixid ) ; m _ selectfilelastmodified _ command . set _ parameter _ value ( 1 , path ) ; m _ selectfilelastmodified _ command . set _ parameter _ value ( 2 , filesetid ) ; ", "after_ctx": " <%> <-> long prefixid , </%> <%> <*> lastfilesetid -> filesetid </%>", "after_line": "m _ selectfilelastmodified _ command . set _ parameter _ value ( 0 , path ) ; m _ selectfilelastmodified _ command . set _ parameter _ value ( 1 , filesetid ) ;", "predictions": ["m _ selectfilelastmodified _ command . ) ) . create _ parameter _ temp </%> { = folder _ selectfilelastmodified _ command ( time ( set . ] . <-> _ platform _ public ) file file ( to file ( 1 . c . c _ string _ callback ) ( attributes . <%> . c ) . <%> . c _ string . 2 { filesetid { filesetid { filesetid { filesetid { filesetid { filesetid { filesetid { set _ ( _ data ; set { filesetid { filesetid { filesetid { filesetid { filesetid { filesetid"]}, {"before_ctx": " ", "before_line": " using ( new logging . timer ( STR ) ) tr . commit ( ) ; ", "after_ctx": " <%> <-> using ( new logging . timer ( STR ) ) </%>", "after_line": "tr . commit ( ) ;", "predictions": ["tr . commit ( ) ;"]}, {"before_ctx": " ", "before_line": " if ( ! use _ unmanaged _ ssh . checked & & keyfile . text . trim ( ) . length = = 0 ) ", "after_ctx": " <%> <-> . checked & & ! use _ unmanaged _ ssh </%> <%> <*> sshui -> ss _ hv _ ui </%>", "after_line": "if ( keyfile . text . trim ( ) . length = = 0 )", "predictions": ["if ( ! use _ unmanaged _ ssh _ to time time command </%> </%> = ) <%> ) <%> <+> 0 <%> = . value < dictionary . set )"]}, {"before_ctx": "<%> <-> public system . int keep _ full { get { return m _ keep _ full ; } set { object oldvalue = m _ keep _ full ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ keep _ full = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string keep _ time { get { return m _ keep _ time ; } set { object oldvalue = m _ keep _ time ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ keep _ time = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string full _ after { get { return m _ full _ after ; } set { object oldvalue = m _ full _ after ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ full _ after = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string download _ bandwidth { get { return m _ download _ bandwidth ; } set { object oldvalue = m _ download _ bandwidth ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ download _ bandwidth = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string upload _ bandwidth { get { return m _ upload _ bandwidth ; } set { object oldvalue = m _ upload _ bandwidth ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ upload _ bandwidth = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string volume _ size { get { return m _ volume _ size ; } set { object oldvalue = m _ volume _ size ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ volume _ size = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } public system . string max _ uploadsize { get { return m _ max _ uploadsize ; } set { object oldvalue = m _ max _ uploadsize ; on _ before _ data _ change ( this , STR , oldvalue , value ) ; m _ max _ uploadsize = value ; on _ after _ data _ change ( this , STR , oldvalue , value ) ; } } </%> ", "before_line": " public system . collections . generic . i _ list < task > tasks ", "after_ctx": " <%> <*> get { return ( ( data _ fetcher _ with _ relations ) m _ dataparent ) . get _ related _ objects < task > ( STR , this ) ; } -> get { return ( ( data _ fetcher _ with _ relations ) m _ dataparent ) . get _ related _ object < task > ( STR , this ) ; } </%> <%> <+> set { ( ( data _ fetcher _ with _ relations ) m _ dataparent ) . set _ related _ object ( STR , this , value ) ; } </%>", "after_line": "public task task", "predictions": ["get _ data _ data _ change _ size ( get _ symbol _ declaration , STR ) ;"]}, {"before_ctx": "<%> <-> finally { } </%> ", "before_line": " try { sp . file . save _ binary _ direct ( ctx , fileurl , stream , true ) ; } finally { } ", "after_ctx": " ", "after_line": "sp . file . save _ binary _ direct ( ctx , fileurl , stream , true ) ;", "predictions": ["sp . file . save _ binary base ( _ fileurl _ stream _ true _ time <-> </%> </%> true { . <@> ( ) <+> </@> } <+> <*> } ; _ file file ( files _ files _ STR . new . save . new new new filter . new convert ) = </%> . fileurl . stream . new STR STR"]}, {"before_ctx": "<%> <-> public stream open _ write ( string file ) { return create _ file ( file ) ; } public void write _ all _ bytes ( string file , byte [ ] data ) { using ( var s = create _ file ( file ) ) s . write ( data , 0 , data . length ) ; } public void write _ all _ lines ( string file , string [ ] data ) { using ( var sw = new stream _ writer ( create _ file ( file ) , system . text . encoding . ut ) ) foreach ( var s in data ) sw . write _ line ( s ) ; } </%> ", "before_line": " string path = path _ to _ zip _ filesystem ( file ) ; ", "after_ctx": " <%> <*> string path = path _ to _ os _ filesystem ( file ) ; -> string path = file . replace ( '/' , '\\\\' ) ; </%>", "after_line": "string path = file ;", "predictions": ["string path = file ;"]}, {"before_ctx": "<%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%> ", "before_line": " foreach ( string f in filenames _ from _ platform _ independant ( z . list _ files ( prefix ) ) ) ", "after_ctx": " <%> <-> foreach ( string s in filenames _ from _ platform _ independant ( patch . value . list _ files ( symlinkprefix ) ) ) { string tmp = filenames _ from _ platform _ independant ( new string [ ] { encoding . ut . get _ string ( patch . value . read _ all _ bytes ( s ) ) } ) [ 0 ] ; </%>", "after_line": "foreach ( string f in z . list _ files ( prefix ) )", "predictions": ["foreach ( string f in filenames _ contains . this . list . list . list filter filter filter filter )"]}, {"before_ctx": "<%> <*> library . interface . i -> compression </%> <%> <*> compression -> wrapper </%> <%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%> ", "before_line": " foreach ( string f in filenames _ from _ platform _ independant ( arch . list _ files ( sigentry . value ) ) ) ", "after_ctx": " <%> <-> filenames _ from _ platform _ independant ( </%> <%> <-> ) </%> <%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%>", "after_line": "foreach ( string f in arch . list _ files ( sigentry . value ) )", "predictions": ["foreach ( string f in filenames . list _ files <-> sigentry from value ( sigentry from value ( sigentry ( </@> name string ) ) )"]}, {"before_ctx": "<%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%> <%> <-> filenames _ from _ platform _ independant ( </%> <%> <-> ) </%> ", "before_line": " foreach ( string f in filenames _ from _ platform _ independant ( arch . list _ files ( control _ prefix ) ) ) ", "after_ctx": " <%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%> <%> <-> filenames _ from _ platform _ independant ( </%> <%> <*> all -> path </%> <%> <-> ) </%>", "after_line": "foreach ( string f in arch . list _ files ( control _ prefix ) )", "predictions": ["foreach ( string f in filenames _ , . ! . -> . -> . out . -> . -> . list _ prefix string string )"]}, {"before_ctx": "<%> <*> duplicati . library . interface . i -> compression </%> <%> <*> compression -> wrapper </%> ", "before_line": " foreach ( string f in filenames _ from _ platform _ independant ( signature . list _ files ( prefix ) ) ) ", "after_ctx": " ", "after_line": "foreach ( string f in signature . list _ files ( prefix ) )", "predictions": ["foreach ( string f in signature _ list base . signature ) ) ! ! ! ! ! ! ! ;"]}, {"before_ctx": "<%> <+> time = library . utility . utility . deserialize _ date _ time ( library . utility . utility . serialize _ date _ time ( time ) ) . to _ universal _ time ( ) ; </%> ", "before_line": " args . add ( time . to _ universal _ time ( ) ) ; ", "after_ctx": " ", "after_line": "args . add ( time ) ;", "predictions": ["args . add ( time ) <%> -> -> -> ;"]}, {"before_ctx": "<%> <*> if ( status = = enumerated _ file -> m </%> <%> <*> status . file ) -> filter = filter ; </%> <%> <+> } public bool callback ( string rootpath , string path , system . io . file _ attributes attributes ) { if ( m _ filter ! = null & & ! m _ filter . should _ include ( rootpath , path ) ) return false ; if ( ( attributes & system . io . file _ attributes . directory ) = = 0 ) </%> <%> <+> return true ; </%> ", "before_line": " path _ size _ calculator c = new path _ size _ calculator ( ) ; enumerate _ file _ system _ entries ( folder , filter , new enumeration _ callback _ delegate ( c . callback ) ) ; ", "after_ctx": " <%> <-> } public static list < string > enumerate _ files ( string basepath , filename _ filter filter ) { path _ collector c = new path _ collector ( false , true ) ; enumerate _ file _ system _ entries ( basepath , filter , new enumeration _ callback _ delegate ( c . callback ) ) ; return c . files ; } public static list < string > enumerate _ file _ system _ entries ( string basepath ) { </%>", "after_line": "path _ size _ calculator c = new path _ size _ calculator ( filter ) ; enumerate _ file _ system _ entries ( folder , new enumeration _ callback _ delegate ( c . callback ) ) ;", "predictions": ["enumerate _ file _ system _ entries ( folder , filter , c . callback ) ;"]}, {"before_ctx": "<%> <-> date _ time next _ progress _ event = m _ last _ progress _ event ; </%> <%> <+> } </%> ", "before_line": " m _ last _ progress _ event = date _ time . now ; next _ progress _ event = m _ last _ progress _ event + progress _ timespan ; ", "after_ctx": " ", "after_line": "next _ progress _ event = date _ time . now + progress _ timespan ;", "predictions": ["next _ progress _ event = ;"]}, {"before_ctx": "<%> <-> if ( ! string . is _ null _ or _ white _ space ( tempdir ) ) </%> <%> <+> try </%> <%> <-> try </%> <%> <+> using ( var cmd = con . create _ command ( ) ) </%> <%> <-> using ( var cmd = con . create _ command ( ) ) { </%> <%> <*> tempdir -> library . utility . temp _ folder . system _ temp _ path </%> <%> <-> } </%> ", "before_line": " catch { } ", "after_ctx": " <%> <-> } </%>", "after_line": "} catch {", "predictions": ["catch { }"]}, {"before_ctx": "<%> <-> else if ( filter . contains ( STR ) | | filter . contains ( STR ) ) { this . type = filter _ type . wildcard ; this . filter = filter ; this . regexp = new system . text . regular _ expressions . regex ( library . utility . filename _ filter . convert _ globbing _ to _ reg _ exp ( filter ) , regexp _ options ) ; } </%> <%> <+> ( filter . contains ( STR ) | | filter . contains ( STR ) ) ? filter _ type . wildcard : </%> ", "before_line": " this . regexp = new system . text . regular _ expressions . regex ( library . utility . filename _ filter . convert _ globbing _ to _ reg _ exp ( filter ) , regexp _ options ) ; ", "after_ctx": " ", "after_line": "this . regexp = new system . text . regular _ expressions . regex ( library . utility . utility . convert _ globbing _ to _ reg _ exp ( filter ) , regexp _ options ) ;", "predictions": ["this . regexp = new system . void _ to _ { file ( ) string create ( data . & _ ; _ ; m m m m _ object m ) ; }"]}, {"before_ctx": "<%> <*> prepare -> web _ api . google </%> <%> <+> drive . </%> <%> <*> prepare -> web _ api . google </%> <%> <+> drive . </%> <%> <*> prepare -> web _ api . google </%> <%> <+> drive . </%> <%> <-> ( ) </%> ", "before_line": " parents = new google _ drive _ parent _ reference [ ] { new google _ drive _ parent _ reference ( ) { id = current _ folder _ id } } ", "after_ctx": " ", "after_line": "parents = new google _ drive _ parent _ reference [ ] { new google _ drive _ parent _ reference { id = current _ folder _ id } }", "predictions": ["parents = new [ ] { try <-> _ ) _ <@> _ reference f path = files _ folder _ options time ]"]}, {"before_ctx": "<%> <*> prepare -> web </%> <%> <+> api . google _ drive . </%> ", "before_line": " parents = new google _ drive _ parent _ reference [ ] { new google _ drive _ parent _ reference ( ) { id = parent } } ", "after_ctx": " ", "after_line": "parents = new google _ drive _ parent _ reference [ ] { new google _ drive _ parent _ reference { id = parent } }", "predictions": ["parents = new [ ] { ) ( parent _ . _ ! _ date next } next <%> ;"]}, {"before_ctx": " ", "before_line": " return environment . expand _ environment _ variables ( str . replace ( STR , home _ path ) ) ; ", "after_ctx": " <%> <-> environment _ variable _ matcher _ windows . replace ( str . replace ( STR , regex . escape ( home _ path ) ) , ( m ) = > </%>", "after_line": "return environment . expand _ environment _ variables ( str ) ;", "predictions": ["return environment . expand _ environment _ variables ( str ) ;"]}, {"before_ctx": " ", "before_line": " console . write _ line ( STR , h , environment . new _ line , ex . to _ string ( ) ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%>", "after_line": "console . write _ line ( STR , h , environment . new _ line , ex ) ;", "predictions": ["console . write _ line ( STR , h , environment . new _ </%> <*> block <%> <%> <%> <%> ) ) ) ;"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> ", "before_line": " console . write _ line ( STR , blh , environment . new _ line , ex . to _ string ( ) ) ; ", "after_ctx": " ", "after_line": "console . write _ line ( STR , blh , environment . new _ line , ex ) ;", "predictions": ["console . write _ line ( STR , blh , environment . new _ line , ex ) ;"]}, {"before_ctx": " ", "before_line": " system . diagnostics . trace . write _ line ( STR + ex . to _ string ( ) ) ; console . write _ line ( STR + ex . to _ string ( ) ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%> <%> <-> . to _ string ( ) </%>", "after_line": "system . diagnostics . trace . write _ line ( STR + ex ) ; console . write _ line ( STR + ex ) ;", "predictions": ["trace . write _ line ( STR + ex ) ; console . write _ line ( STR + ex ) ( , -> . = . , ) value value value value value value ; value key"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> <%> <-> . to _ string ( ) </%> ", "before_line": " system . diagnostics . trace . write _ line ( STR + ex . to _ string ( ) ) ; console . write _ line ( STR + ex . to _ string ( ) ) ; ", "after_ctx": " ", "after_line": "system . diagnostics . trace . write _ line ( STR + ex ) ; console . write _ line ( STR + ex ) ;", "predictions": ["system . diagnostics . trace . write _ line ( STR + ex ) ; console . write _ line ( STR + </%> , </%> , , , , , , , , , ) ; ; key key key key key key key key key key key key key key ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) path ) ) ) _ ; ) ) _ ) ) } _ ) } } _ ex ) }"]}, {"before_ctx": " ", "before_line": " console . write _ line ( STR , i , e . to _ string ( ) , remotefilename ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%>", "after_line": "console . write _ line ( STR , i , e , remotefilename ) ;", "predictions": ["console . write _ line ( STR , i , e . , string . <-> , . remotefilename . <-> ) = <@> to to options ( . . . key . key _ environment . . . <*> _ <%> _ <%> _ <%> _ m , / m m m m m m m m m -> / m 0 <%> _ m ) </%>"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> ", "before_line": " console . write _ line ( string . format ( STR , e . to _ string ( ) ) ) ; ", "after_ctx": " ", "after_line": "console . write _ line ( string . format ( STR , e ) ) ;", "predictions": ["console . write _ line ( string . format ( <@> <-> e . <%> options . <%> . . _ environment . , , </@> . , . . . , , ) ) ; ;"]}, {"before_ctx": " ", "before_line": " sw . write _ line ( c . to _ string ( ) ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%>", "after_line": "sw . write _ line ( c ) ;", "predictions": ["sw . write _ line ( c ) ;"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> ", "before_line": " sw . write _ line ( STR , e . to _ string ( ) ) ; ", "after_ctx": " ", "after_line": "sw . write _ line ( STR , e ) ;", "predictions": ["sw . write _ line ( STR , e ) ;"]}, {"before_ctx": " ", "before_line": " log . known _ file _ count = remotelist . count ( ) ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "log . known _ file _ count = remotelist . count ;", "predictions": ["log . known _ file _ count = remotelist . string to <%> to , e string ) string"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " log . unknown _ file _ count = unknownlist . count ( ) ; ", "after_ctx": " ", "after_line": "log . unknown _ file _ count = unknownlist . count ;", "predictions": ["log . unknown _ file _ count = unknownlist . count ;"]}, {"before_ctx": "<%> <*> var path = new utility . url _ path ( web _ api . google _ cloud _ storage . path . bucket ) . append ( m _ bucket ) . append ( web _ api . google _ cloud _ storage . path . object ) ; -> var path = web _ api . google _ cloud _ storage . bucket _ object _ path ( m _ bucket ) ; </%> ", "before_line": " var url = utility . uri . uri _ builder ( web _ api . google _ cloud _ storage . url . api , path . to _ string ( ) , query _ params ) ; ", "after_ctx": " ", "after_line": "var url = utility . uri . uri _ builder ( web _ api . google _ cloud _ storage . url . api , path , query _ params ) ;", "predictions": ["var url = uri _ builder ( web _ api . google _ cloud _ storage . url . api , path , </@> _ <+> . string . <+> _ , . <%> ) info"]}, {"before_ctx": "<%> <*> { m _ hashbuffer = null ; m _ hashbuffer _ length = 0 ; -> { </%> ", "before_line": " m _ hash . transform _ block ( m _ hashbuffer , 0 , m _ hashbuffer . length , m _ hashstore , 0 ) ; ", "after_ctx": " <%> <*> % -> / </%> <%> <*> m _ hashstore -> buffer </%> <%> <*> 0 -> offset </%>", "after_line": "m _ hash . transform _ block ( m _ hashbuffer , 0 , m _ hashbuffer . length , m _ hashbuffer , 0 ) ;", "predictions": ["m _ hash . transform _ block ( m _ hashbuffer , 0 , m _ hashbuffer . length , m _ hashstore ) = ( ! _ <%> command ( , . </%> ( , _ <%> ) ) return . get = ( ( ( ( . _ static return . _ { ( ( ( . _ { ( . _ { ( ( string _ { ) ( return _ { return . get static return . _ static return . return return return _ { ( ( ( ( . _ { ( . _"]}, {"before_ctx": "<%> <*> hashstore -> hashbuffer </%> <%> <*> % -> / </%> ", "before_line": " m _ hash . transform _ block ( buffer , offset , bytes _ to _ use , m _ hashstore , 0 ) ; ", "after_ctx": " ", "after_line": "m _ hash . transform _ block ( buffer , offset , bytes _ to _ use , buffer , offset ) ;", "predictions": ["m _ hash . transform _ block ( buffer , offset , bytes _ to _ use . </%> _ hashstore , </@> <%> , hash _ hashstore ) </%>"]}, {"before_ctx": " ", "before_line": " m _ block _ hash _ lookup . add ( str , new key _ value _ pair < long , long > ( id , size ) ) ; ", "after_ctx": " <%> <*> var id = convert . to _ int ( rd . get _ value ( 1 ) ) ; m _ file _ hash _ lookup . add ( str , id ) ; -> var size = convert . to _ int ( rd . get _ value ( 1 ) ) ; </%>", "after_line": "m _ block _ hash _ lookup . add ( str , size , new key _ value _ pair < long , long > ( id , size ) ) ;", "predictions": ["m _ block _ hash _ lookup . add ( str , new key _ value _ pair < long , long > . url path ( { attribute , attribute ) ) ;"]}, {"before_ctx": " ", "before_line": " m _ block _ hash _ lookup . add ( key , new key _ value _ pair < long , long > ( convert . to _ int ( r ) , size ) ) ; ", "after_ctx": " <%> <+> , size </%>", "after_line": "m _ block _ hash _ lookup . add ( key , size , new key _ value _ pair < long , long > ( convert . to _ int ( r ) , size ) ) ;", "predictions": ["m _ block _ hash _ lookup . add ( key , new key ( m </%> ) ) $ <%> . to <%> _ _ int ) ) ) ) ;"]}, {"before_ctx": "<%> <+> , size </%> ", "before_line": " m _ block _ hash _ lookup . add ( key , new key _ value _ pair < long , long > ( convert . to _ int ( r ) , size ) ) ; ", "after_ctx": " ", "after_line": "m _ block _ hash _ lookup . add ( key , size , new key _ value _ pair < long , long > ( convert . to _ int ( r ) , size ) ) ;", "predictions": ["m _ block _ hash _ lookup . add ( key , new key _ value _ pair < long , string <@> . to , ; ; _ to ( ; ; ; ;"]}, {"before_ctx": "<%> <-> } </%> ", "before_line": " if ( m _ lookup ! = null ) try { m _ lookup . dispose ( ) ; } finally { m _ lookup = null ; } ", "after_ctx": " ", "after_line": "m _ lookup = null ;", "predictions": ["m _ lookup . dispose ( ) ;"]}, {"before_ctx": "<%> <-> filename _ strategy cache _ filename _ strategy = new filename _ strategy ( STR , STR , true ) ; </%> ", "before_line": " backend = new backend _ wrapper ( bs , backend , m _ options . raw _ options ) ; ", "after_ctx": " <%> <-> encryption . </%> <%> <-> _ options . raw </%>", "after_line": "backend = new backend _ wrapper ( bs , backend , m _ options ) ;", "predictions": ["backend = new backend _ wrapper ( bs , backend , m _ options . raw _ options ) ;"]}, {"before_ctx": "<%> <-> filename _ strategy cache _ filename _ strategy = new filename _ strategy ( STR , STR , true ) ; </%> <%> <-> _ options . raw </%> ", "before_line": " backend = encryption . encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , m _ options . raw _ options ) ; ", "after_ctx": " ", "after_line": "backend = encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , m _ options ) ;", "predictions": ["backend = encryption . encrypted _ with _ encryption ( m _ options . raw _ options ) ;"]}, {"before_ctx": " ", "before_line": " backend = new backend _ wrapper ( rs , backend , m _ options . raw _ options ) ; ", "after_ctx": " <%> <-> encryption . </%> <%> <-> _ options . raw </%>", "after_line": "backend = new backend _ wrapper ( rs , backend , m _ options ) ;", "predictions": ["backend = new backend _ wrapper ( rs , backend ( <@> _ } _ ; <-> <-> </%> <-> . raw _ options <%> rs . ; ( add . <%> </%> , ) </%> <%> ( / _ . ( rs , ) add add add add , rs , m _ . add _ . add _ . add _ . add add add add add ) web var <-> web _ ( object ) web _ ( append _ ( object ) web _ ( append _ ( object web _ ( ( append _ ("]}, {"before_ctx": "<%> <-> _ options . raw </%> ", "before_line": " backend = encryption . encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , best _ fit . encryption _ mode , m _ options . raw _ options ) ; ", "after_ctx": " ", "after_line": "backend = encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , best _ fit . encryption _ mode , m _ options ) ;", "predictions": ["backend = encryption . encrypted _ with _ encryption ( backend , best _ convert key key hash _ . , long _ , ) ) . console <%> system . + ) <->"]}, {"before_ctx": " ", "before_line": " backend = new backend _ wrapper ( rs , backend , m _ options . raw _ options ) ; ", "after_ctx": " <%> <-> encryption . </%> <%> <-> _ options . raw </%>", "after_line": "backend = new backend _ wrapper ( rs , backend , m _ options ) ;", "predictions": ["backend = new backend _ wrapper ( rs , backend , m _ options . _ } ! ! <@> ! environment . ) <->"]}, {"before_ctx": "<%> <-> _ options . raw </%> ", "before_line": " backend = encryption . encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , best _ fit . encryption _ mode , m _ options . raw _ options ) ; ", "after_ctx": " ", "after_line": "backend = encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , best _ fit . encryption _ mode , m _ options ) ;", "predictions": ["backend = encryption . encrypted _ with _ encryption ( backend , best _ fit , m _ options . raw _ . $ ( $ _ <-> , raw _ <-> options options options ) &"]}, {"before_ctx": "<%> <*> private static i _ localization _ service default _ service = new mock _ localization _ service ( ) ; -> private static dictionary < culture _ info , i _ localization _ service > services = new dictionary < culture _ info , i _ localization _ service > ( ) ; </%> <%> <+> internal const string logical _ context _ key = STR ; public static readonly regex ci _ matcher = new regex ( STR ) ; public static i _ disposable temporary _ context ( culture _ info ci ) { if ( ci = = null ) return null ; return new localization _ context ( ci ) ; } private static i _ localization _ service invariant _ service = new mock _ localization _ service ( ) ; </%> <%> <*> public static i _ localization _ service default { get { return get ( system . globalization . culture _ info . invariant _ culture ) ; } } -> public static i _ localization _ service invariant { get { return get ( culture _ info . invariant _ culture ) ; } } </%> <%> <+> public static culture _ info parse _ culture ( string culture , bool returninvariant = false ) { var ci = returninvariant ? culture _ info . invariant _ culture : null ; if ( ci _ matcher . match ( culture ) . success ) try { ci = new culture _ info ( culture ) ; } catch { } return ci ; } </%> <%> <*> public static i _ localization _ service current { get { return get ( system . globalization . culture _ info . current _ culture ) ; } } -> public static i _ localization _ service current </%> <%> <+> { get { var lc = system . runtime . remoting . messaging . call _ context . logical _ get _ data ( logical _ context _ key ) as string ; if ( ! string . is _ null _ or _ white _ space ( lc ) ) return get ( new culture _ info ( lc ) ) ; return get ( culture _ info . current _ culture ) ; } } </%> <%> <-> system . globalization . </%> ", "before_line": " public static i _ localization _ service get ( system . globalization . culture _ info ci ) ", "after_ctx": " <%> <*> return default _ service ; -> if ( ci = = culture _ info . invariant _ culture ) </%> <%> <+> return invariant _ service ; i _ localization _ service service ; if ( ! services . try _ get _ value ( ci , out service ) ) service = services [ ci ] = new po _ localization _ service ( ci ) ; return service ; } public static i _ enumerable < string > all _ locales </%>", "after_line": "public static i _ localization _ service get ( culture _ info ci )", "predictions": ["public static i _ localization _ table current _ localization _ verify _ signature ( string [ ] column _ name )"]}, {"before_ctx": "<%> <*> string . format ( -> $ </%> <%> <-> , this . type ) </%> ", "before_line": " if ( m _ filters . where ( x = > x . matches ( path ) ) . any ( ) ) ", "after_ctx": " <%> <+> public string get _ filter _ hash ( ) { </%>", "after_line": "if ( m _ filters . any ( x = > x . matches ( path ) ) )", "predictions": ["if ( m _ filters . any ( x = > x . matches _ > ( windows ( windows ( path , path ( path package package package package package package package package package ) ( > . object . <@> . <@> . query _ utility _ <*> _ <*> . query . <@> . <@> ) . object . object . <@> . <@> . <@> _ line . -> _ line _ string . </@> . . _ -> _ string . any _ any _ ; . </@> . . . -> . -> ."]}, {"before_ctx": "<%> <-> m _ result . add _ warning ( string . format ( STR , p , ex . message ) , ex ) ; } if ( filterhandler . attribute _ filter ( null , p , fa ) ) { try { this . handle _ filesystem _ entry ( p , fa ) ; } catch ( exception ex ) { </%> <%> <-> } </%> ", "before_line": " foreach ( var path in m _ snapshot . enumerate _ files _ and _ folders ( filterhandler . attribute _ filter ) ) ", "after_ctx": " <%> <*> this . handle _ filesystem _ entry ( path , m _ snapshot . get _ attributes ( path ) ) ; -> var fa = file _ attributes . normal ; </%> <%> <+> try { fa = m _ snapshot . get _ attributes ( path ) ; } catch { } </%>", "after_line": "foreach ( var path in filterhandler . enumerate _ files _ and _ folders ( m _ snapshot ) )", "predictions": ["foreach ( var path in m _ snapshot . enumerate _ files _ and _ folders ( filterhandler ) )"]}, {"before_ctx": " ", "before_line": " else return m _ filters . aggregate ( ( a , b ) = > library . utility . joined _ filter _ expression . join ( a , b ) ) ; ", "after_ctx": " <%> <*> return library . utility . command _ line _ parser . extract _ options ( args , ( key , value ) = > { if ( key . equals ( STR , string _ comparison . ordinal _ ignore _ case ) ) -> return library . utility . command _ line _ parser . extract _ options ( args , ( key , value ) = > </%> <%> <+> { if ( ! string . is _ null _ or _ empty ( value ) ) </%>", "after_line": "else return m _ filters . aggregate ( library . utility . joined _ filter _ expression . join ) ;", "predictions": ["return m _ filters . aggregate ( ( a , b ) = > a . join ( b ) ) ;"]}, {"before_ctx": " ", "before_line": " var httpex = wex . response as system . net . http _ web _ response ; ", "after_ctx": " <%> <-> string t = null ; </%>", "after_line": "var httpex = wex . response as http _ web _ response ;", "predictions": ["var httpex = wex . response as http _ web _ string )"]}], "choco": [{"before_ctx": "<%> <*> concurrent -> i </%> <%> <*> dictionary -> enumerable </%> <%> <-> string , </%> ", "before_line": " if ( package _ result . value ! = null & & package _ result . value . package ! = null ) { var pkginfo = package _ info _ service . get _ package _ information ( package _ result . value . package ) ; ", "after_ctx": " ", "after_line": "if ( package _ result ! = null & & package _ result . package ! = null ) { var pkginfo = package _ info _ service . get _ package _ information ( package _ result . package ) ;", "predictions": ["if ( package _ result . value ! = null ) { var pkginfo = package _ result . get _ package _ information . hash append append append append append ;"]}, {"before_ctx": " ", "before_line": " this . log ( ) . error ( chocolatey _ loggers . important , STR . format _ with ( package _ result . name , command _ name . to _ string ( ) ) ) ; ", "after_ctx": " <%> <-> package _ result . name , </%> <%> <+> , package _ result . name </%>", "after_line": "this . log ( ) . error ( chocolatey _ loggers . important , STR . format _ with ( command _ name . to _ string ( ) , package _ result . name ) ) ;", "predictions": ["this . log ( ) . error ( STR . STR ( , . format . with </%> ; ;"]}, {"before_ctx": "<%> <-> package _ result . name , </%> <%> <+> , package _ result . name </%> ", "before_line": " this . log ( ) . info ( chocolatey _ loggers . important , STR . format _ with ( package _ result . name , command _ name . to _ string ( ) ) ) ; ", "after_ctx": " ", "after_line": "this . log ( ) . info ( chocolatey _ loggers . important , STR . format _ with ( command _ name . to _ string ( ) , package _ result . name ) ) ;", "predictions": ["this . log ( ) . info ( chocolatey _ loggers . format , STR . error . with <%> ;"]}, {"before_ctx": "<%> <*> . add ( -> + = STR + </%> <%> <-> ) </%> ", "before_line": " this . log ( ) . debug ( ( ) = > STR . format _ with ( uninstall _ args . join ( STR ) ) ) ; ", "after_ctx": " <%> <*> join -> trim _ safe </%> <%> <-> STR </%>", "after_line": "this . log ( ) . debug ( ( ) = > STR . format _ with ( uninstall _ args ) ) ;", "predictions": ["this . log ( ) . debug ( . _ with . to . name . <-> _ with ( ) . <-> timeout ) out in in . with ( , . . _ ( , . . _ using , _ _ _ with ( , file file file file file ( in file file file , base ( base ) ) property property ) ) base ) property ) ) base ) ) property ) ) ) ) ) ) property ( ) ) property property ( ) property i i base ) base ) property i"]}, {"before_ctx": "<%> <+> using system ; </%> ", "before_line": " public system . operating _ system os _ version ", "after_ctx": " ", "after_line": "public operating _ system os _ version", "predictions": ["public operating _ system os _ version"]}, {"before_ctx": "<%> <-> using chocolatey _ infrastructure ; </%> <%> <+> using i _ log = log _ net . i _ log ; </%> ", "before_line": " private static readonly log _ net . i _ log logger = log _ manager . get _ logger ( typeof ( bootstrap ) ) ; ", "after_ctx": " ", "after_line": "private static readonly i _ log logger = log _ manager . get _ logger ( typeof ( bootstrap ) ) ;", "predictions": ["private static readonly i _ log logger = ) <%> <%> STR <%> typeof <%> <%> ( command . </%> , bootstrap ) ,"]}, {"before_ctx": " ", "before_line": " nuget _ service . install _ noop ( configuration , ( pkg ) = > { powershell _ service . install _ noop ( pkg ) ; } ) ; ", "after_ctx": " <%> <-> _ store </%> <%> <*> path -> info </%> <%> <*> file -> package </%> <%> <*> system . combine _ paths ( application -> info </%> <%> <*> parameters -> service </%> <%> <*> chocolatey -> get </%> <%> <-> _ info _ store _ location , STR . format </%> <%> <*> with -> information </%> <%> <-> . id ) </%> <%> <*> store _ path + = STR -> info </%> <%> <*> format -> is </%> <%> <*> with ( package -> side _ by </%> <%> <*> result . package . version . to _ string ( ) ) ; -> side = true ; </%> <%> <-> file _ system . create _ directory _ if _ not _ exists ( pkg _ store _ path ) ; </%>", "after_line": "nuget _ service . install _ noop ( configuration , ( pkg ) = > powershell _ service . install _ noop ( pkg ) ) ;", "predictions": ["nuget _ service . install _ noop ( configuration , ( pkg ) = > powershell _ service . install _ noop ( pkg ) ) ;"]}, {"before_ctx": " ", "before_line": " public void copy _ file _ unsafe ( string source _ file _ name , string destination _ file _ name , bool overwrite _ the _ existing _ file ) ", "after_ctx": " <%> <+> return success = = 0 ; </%> <%> <+> bool winapi copy _ file ( in lpctstr lp _ existing _ file _ name , in lpctstr lp _ new _ file _ name , in bool b _ fail _ if _ exists ) ; </%>", "after_line": "public bool copy _ file _ unsafe ( string source _ file _ name , string destination _ file _ name , bool overwrite _ the _ existing _ file )", "predictions": ["public string copy _ file _ unsafe ( get _ file _ is property change _ file ( ) )"]}, {"before_ctx": " ", "before_line": " var remote _ source = new uri ( configuration . source ) ; if ( string . is _ null _ or _ white _ space ( configuration . push _ command . key ) & & ! remote _ source . is _ unc & & ! remote _ source . is _ file ) ", "after_ctx": " <%> <+> var remote _ source = new uri ( configuration . source ) ; if ( string . is _ null _ or _ white _ space ( configuration . push _ command . key ) & & ! remote _ source . is _ unc & & ! remote _ source . is _ file ) { </%> <%> <+> } </%>", "after_line": "if ( ! string . is _ null _ or _ white _ space ( configuration . source ) )", "predictions": ["if ( string . is _ null _ < _ property _ cache <%> _ . only <%> , , var </%> _ <%> expression , , -> ( ; _ right expression )"]}, {"before_ctx": "<%> <+> using system _ diagnostics ; </%> ", "before_line": " using chocolatey _ infrastructure _ synchronization ; ", "after_ctx": " ", "after_line": "using synchronization ;", "predictions": ["using synchronization ;"]}, {"before_ctx": "<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> ", "before_line": " this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( xml _ file _ path ) ) ; ", "after_ctx": " <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>", "after_line": "this . log ( ) . trace ( STR . format _ with ( xml _ file _ path ) ) ;", "predictions": ["this . log ( ) . debug ( chocolatey . source ) file . </@> . this ( chocolatey . loggers . trace , , STR , with _ update ( with _ file _ string using </@> using using , STR , STR , in , STR ( ! ( & base base ( -> ( ! base config ) config config config config config config config config config config config config config config config config config ) config config config config config ) config ; config config config config ) config ; config config config config config )"]}, {"before_ctx": "<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> ", "before_line": " this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( temp _ update _ file ) ) ; ", "after_ctx": " <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>", "after_line": "this . log ( ) . trace ( STR . format _ with ( temp _ update _ file ) ) ;", "predictions": ["this . log ( ) . debug ( ( ( string < string using i _ i _ _ <@> ) ) & else"]}, {"before_ctx": "<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> ", "before_line": " this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( temp _ update _ file ) ) ; ", "after_ctx": " <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>", "after_line": "this . log ( ) . trace ( STR . format _ with ( temp _ update _ file ) ) ;", "predictions": ["this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ </@> _ file < <@> , <@> , STR , else & index ( & ( property ) , _ } , file ) db -> db ) ->"]}, {"before_ctx": "<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> ", "before_line": " this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( xml _ file _ path , temp _ update _ file ) ) ; ", "after_ctx": " ", "after_line": "this . log ( ) . trace ( STR . format _ with ( xml _ file _ path , temp _ update _ file ) ) ;", "predictions": ["this . log ( ) . debug ( int _ out timeout _ <%> ;"]}, {"before_ctx": " ", "before_line": " this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( destination _ file _ path , backup _ file _ path ) ) ; ", "after_ctx": " <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>", "after_line": "this . log ( ) . trace ( STR . format _ with ( destination _ file _ path , backup _ file _ path ) ) ;", "predictions": ["this . log ( ) . debug ( chocolatey _ loggers . update , format . temp timeout . this _ ; ( result _ config _ dictionary <%> ) ( file ( path ) _ copy _ path name index _ file _ empty package package _ </%> _ = is new new chocolatey _ </%> is = & & & & & & & context context _ -> _ ; context context _ -> _ ; . & context context _ -> _ ; context context _ -> _ ; context context _ -> _ ; context context"]}, {"before_ctx": "<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> ", "before_line": " this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( backup _ file _ path ) ) ; ", "after_ctx": " <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>", "after_line": "this . log ( ) . trace ( STR . format _ with ( backup _ file _ path ) ) ;", "predictions": ["this . log ( ) . debug ( chocolatey _ loggers . with , STR ) ;"]}, {"before_ctx": "<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> ", "before_line": " this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( destination _ file _ path , backup _ file _ path ) ) ; ", "after_ctx": " <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>", "after_line": "this . log ( ) . trace ( STR . format _ with ( destination _ file _ path , backup _ file _ path ) ) ;", "predictions": ["this . log ( ) . debug ( ( ( ( <@> <%> 0 file file file file base base _ _ ( file ( p ( p ( p ( p ( p ( new configuration configuration configuration . & ; ) ;"]}, {"before_ctx": "<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> ", "before_line": " this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( source _ file _ path , destination _ file _ path ) ) ; ", "after_ctx": " <%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%>", "after_line": "this . log ( ) . trace ( STR . format _ with ( source _ file _ path , destination _ file _ path ) ) ;", "predictions": ["this . log ( ) . debug ( chocolatey _ loggers . trace , STR . destination _ in ) try try ( trace ( trace ( trace _ config _ dictionary , result _ file ( destination ) destination _ ; property _ ; property _ ; _ empty package package _ file _ empty package package package is is ) is = is ) is = is _ with is = is is = key ) command command _ = is new is _ with is = is ( source _ configuration _ = source _ </%> _"]}, {"before_ctx": "<%> <-> . debug ( chocolatey _ loggers </%> <%> <*> , -> ( </%> ", "before_line": " this . log ( ) . debug ( chocolatey _ loggers . trace , STR . format _ with ( source _ file _ path ) ) ; ", "after_ctx": " ", "after_line": "this . log ( ) . trace ( STR . format _ with ( source _ file _ path ) ) ;", "predictions": ["this . log ( ) . debug ( { { { var <%> var <-> var </%> net . this _ command ( chocolatey . <@> , </@> , <@> ) <*> <*> <*> , int timeout int int ;"]}, {"before_ctx": " ", "before_line": " nuget _ service . uninstall _ noop ( config , ( pkg ) = > { powershell _ service . uninstall _ noop ( pkg ) ; } ) ; ", "after_ctx": " <%> <+> foreach ( var package _ config _ file in config . package _ names . split ( new [ ] { application _ parameters . package _ names _ separator } , string _ split _ options . remove _ empty _ entries ) . or _ empty _ list _ if _ null ( ) . where ( p = > p . contains ( STR ) ) . to _ list ( ) ) { throw new application _ exception ( STR ) ; } </%>", "after_line": "nuget _ service . uninstall _ noop ( config , ( pkg ) = > powershell _ service . uninstall _ noop ( pkg ) ) ;", "predictions": ["nuget _ service . uninstall _ noop ( ) ( . null & . uninstall & powershell _ < . cache _ type ( , ) ) <%> <%> <%> var _ < . cache _ t expression ;"]}, {"before_ctx": "<%> <+> { int timeout = 0 ; int . try _ parse ( option , out timeout ) ; if ( timeout > 0 ) </%> ", "before_line": " int timeout = 0 ; int . try _ parse ( option , out timeout ) ; if ( timeout > 0 ) { configuration . push _ command . timeout _ in _ seconds = timeout ; } } ) ", "after_ctx": " ", "after_line": "configuration . push _ command . timeout _ in _ seconds = timeout ; } } )", "predictions": ["configuration . push _ command . timeout _ in <%> seconds _ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( if file name _ command file _ , base base base ) . _ . _ . _ in ) ) p </%> p ( _ ( _ ( _ find <%> visit expression expression ) ) ) expression ) expression expression expression expression )"]}, {"before_ctx": " ", "before_line": " var original _ config = config . deep _ copy ( ) ; ", "after_ctx": " <%> <*> ; -> . deep _ copy ( ) ; </%>", "after_line": "var original _ config = config ;", "predictions": ["var original _ config = config . [ [ ) _ <-> _ <-> _ <-> _ <%> new ( ;"]}, {"before_ctx": " ", "before_line": " var original _ config = config . deep _ copy ( ) ; ", "after_ctx": " <%> <*> ; -> . deep _ copy ( ) ; </%>", "after_line": "var original _ config = config ;", "predictions": ["var original _ config = config . deep new new ( ) _ <-> ( ) _ <%> ( </%> </%> ;"]}, {"before_ctx": " ", "before_line": " using system _ collections _ generic ; ", "after_ctx": " <%> <*> using simple _ injector ; using chocolatey _ infrastructure _ app _ builders ; -> using chocolatey _ infrastructure _ app ; </%> <%> <-> using chocolatey _ infrastructure _ services ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": " ", "before_line": " using chocolatey _ infrastructure _ results ; using configuration ; using system _ collections _ concurrent ; public interface i _ nuget _ service : i _ source _ runner ", "after_ctx": " <%> <+> concurrent _ dictionary < string , package _ result > get _ outdated ( chocolatey _ configuration config ) ; </%> <%> <-> concurrent _ dictionary < string , package _ result > get _ outdated ( chocolatey _ configuration config ) ; </%>", "after_line": "using system _ collections _ concurrent ; using configuration ; using results ; public interface i _ nuget _ service : i _ source _ runner", "predictions": ["public interface i _ nuget _ service : </@> ( </@> ( , . . . </%> ) ) ;"]}], "EntityFrameworkCore": [{"before_ctx": "<%> <*> public virtual i _ read _ only _ list < db _ set _ property > find _ sets ( db _ context context ) = > cache . get _ or _ add ( context . get _ type ( ) , find _ sets ) ; -> public virtual i _ read _ only _ list < db _ set _ property > find _ sets ( db _ context context ) </%> <%> <+> = > cache . get _ or _ add ( context . get _ type ( ) , find _ sets ) ; </%> ", "before_line": " & & ( p . declaring _ type ! = typeof ( db _ context ) ) ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%> <%> <*> . select ( p = > { return -> . select ( p = > </%> <%> <*> ; -> ) </%> <%> <-> } ) </%>", "after_line": "& & p . declaring _ type ! = typeof ( db _ context )", "predictions": ["& & ( p . declaring _ type list -> typeof , ; constant expression )"]}, {"before_ctx": "<%> <*> else -> else if ( property _ base . get _ relationship _ index ( ) ! = - 1 </%> <%> <+> & & property _ base is i _ navigation navigation ) </%> ", "before_line": " if ( property _ base . get _ relationship _ index ( ) ! = - 1 ) { var navigation = property _ base as i _ navigation ; if ( navigation ! = null ) { detect _ navigation _ change ( entry , navigation ) ; } } ", "after_ctx": " ", "after_line": "detect _ navigation _ change ( entry , navigation ) ;", "predictions": ["detect _ navigation _ change ( entry , ( = STR . i _ ( ( i { ! null source ( null null source source source source source source ) source ( null source <%> ! . ! . t _ format <%> -> -> -> -> -> = configuration -> -> } -> -> -> = configuration -> -> -> -> -> _ . store -> _ <%> -> -> -> -> -> -> _ <%> -> -> configuration -> -> -> = configuration -> -> -> <%> -> <*> -> -> -> configuration -> <*> _ ."]}, {"before_ctx": "<%> <*> new -> expression . </%> <%> <*> _ -> ( new </%> <%> <+> ) </%> ", "before_line": " private expression try _ optimize < t _ in _ expression > ( ", "after_ctx": " <%> <*> func < column _ expression , expression [ ] , t _ in _ expression > in _ expression _ factory ) where t _ in _ expression : in _ expression _ base -> func < column _ expression , list < expression > , expression > in _ expression _ factory ) </%> <%> <*> constant _ expression left _ constant _ expression , right _ constant _ expression ; -> var left _ expression = visit _ expression ( binary _ expression . left ) ; </%> <%> <+> var right _ expression = visit _ expression ( binary _ expression . right ) ; expression left _ non _ column _ expression , right _ non _ column _ expression ; </%>", "after_line": "private expression try _ optimize (", "predictions": ["private expression try _ optimize ("]}, {"before_ctx": " ", "before_line": " var persistent _ database = new in _ memory _ database ( new [ ] { new logger _ factory ( ) } ) ; ", "after_ctx": " <%> <-> new [ ] { </%> <%> <-> } </%>", "after_line": "var persistent _ database = new in _ memory _ database ( new logger _ factory ( ) ) ;", "predictions": ["var persistent _ database = new in _ log ( . format ( ) ) <*> <*> ;"]}, {"before_ctx": "<%> <-> new [ ] { </%> <%> <-> } </%> ", "before_line": " var persistent _ database = new in _ memory _ database ( new [ ] { new logger _ factory ( ) } ) ; ", "after_ctx": " <%> <-> new [ ] { </%> <%> <-> } </%>", "after_line": "var persistent _ database = new in _ memory _ database ( new logger _ factory ( ) ) ;", "predictions": ["var persistent _ database = new in _ get i = _ ) using _ <@> using ( . , , . STR <%> </@> ( -> <-> option timeout ( > <%> ( > } </%> -> } -> -> <%> configuration <%> <%> , <%> <%> -> -> -> -> -> ) -> -> ) <->"]}, {"before_ctx": "<%> <-> new [ ] { </%> <%> <-> } </%> ", "before_line": " var persistent _ database = new in _ memory _ database ( new [ ] { new logger _ factory ( ) } ) ; ", "after_ctx": " ", "after_line": "var persistent _ database = new in _ memory _ database ( new logger _ factory ( ) ) ;", "predictions": ["var persistent _ database = new in _ system _ <*> using ;"]}, {"before_ctx": " ", "before_line": " using system _ collections _ generic ; ", "after_ctx": " <%> <*> i _ enumerable < entity _ entry > traverse _ graph ( [ not _ null ] object entity ) ; -> void traverse _ graph < t _ node > ( [ not _ null ] t _ node node , [ not _ null ] func < t _ node , bool > handle _ node ) </%> <%> <+> where t _ node : entity _ graph _ node _ base < t _ node > ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": "<%> <-> . create ( ) </%> ", "before_line": " expression . constant ( query _ sql _ generator _ factory . create ( ) ) , ", "after_ctx": " ", "after_line": "expression . constant ( query _ sql _ generator _ factory ) ,", "predictions": ["expression . constant ( <%> <%> <%> <%> ) value value entity . query _ ( ( type type ( ( </%> [ sql ( <%> value <%> ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( _ _ _ _ _ </%> _ </%> _ </%> _ </%> _ </%> _ new _ _ . . . . . node node ) node node ) node ) node ) node"]}, {"before_ctx": " ", "before_line": " theory _ skip _ query _ issue ", "after_ctx": " <%> <+> . as _ no _ tracking ( ) </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <+> . as _ no _ tracking ( ) </%> ", "before_line": " theory _ skip _ query _ issue ", "after_ctx": " <%> <+> . as _ no _ tracking ( ) </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "theory", "predictions": ["theory _ skip _ query _ issue"]}, {"before_ctx": "<%> <+> . as _ no _ tracking ( ) </%> <%> <-> _ skip _ query _ issue </%> <%> <+> . as _ no _ tracking ( ) </%> ", "before_line": " conditional _ fact _ skip _ query _ issue ", "after_ctx": " <%> <+> ( ) . as _ no _ tracking </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <+> ( ) . as _ no _ tracking </%> ", "before_line": " conditional _ fact _ skip _ query _ issue ", "after_ctx": " <%> <+> . as _ no _ tracking ( ) </%> <%> <-> _ see </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <+> , i _ entity _ type _ removed _ convention </%> <%> <-> ! </%> <%> <+> _ directly </%> <%> <*> any ( ) -> count = = 0 </%> ", "before_line": " var old _ base _ type _ builder = old _ base _ type . builder ; old _ base _ type _ builder ? . relational ( configuration _ source . convention ) . has _ discriminator ( property _ info : null ) ; ", "after_ctx": " ", "after_line": "old _ base _ type . builder ? . relational ( configuration _ source . convention ) . has _ discriminator ( property _ info : null ) ;", "predictions": ["var old _ base _ type _ builder ] node _ i null var var = configuration _ add _ source name entity _ info model model model _ ) typeof property typeof configuration _ add _ ) typeof has _ add _ discriminator . has . has . has entity _ discriminator typeof property _ add _ ) typeof has _ add _ ) typeof has _ add _ ) typeof has . has . has ;"]}, {"before_ctx": " ", "before_line": " select distinct [ ] . [ customer _ id ] ", "after_ctx": " <%> <+> select distinct [ t ] . [ customer _ id ] from ( </%> <%> <+> c </%> <%> <+> c </%> <%> <+> c </%> <%> <+> t </%> <%> <*> order by [ ] . -> ) as </%> <%> <-> customer _ id </%>", "after_line": "select [ ] . [ customer _ id ]", "predictions": ["select distinct [ ] . [ customer _ id ->"]}, {"before_ctx": "<%> <*> generated _ value -> object </%> ", "before_line": " return new generated _ value ( convert . change _ type ( interlocked . increment ( ref current ) , property . property _ type . unwrap _ nullable _ type ( ) ) ) ; ", "after_ctx": " <%> <+> public override bool generates _ temporary _ values = > false ; </%>", "after_line": "return convert . change _ type ( interlocked . increment ( ref current ) , property . property _ type . unwrap _ nullable _ type ( ) ) ;", "predictions": ["return new generated _ value ( convert . change <%> ref ( ref current ) , . property ( ref _ temp _ ; _ unwrap _ nullable _ > node t t t _ > t t _ ; _ unwrap ( ( current ( ref current ( current ( ref ( ref ( ref [ 1 ( ( current ( nullable entity ( ( ( ( current entity ( ( current ( ref <@> type <@> type type ( type type type ( type type type _ ) ( ( ( ( <-> ( ref _ nullable _"]}, {"before_ctx": " ", "before_line": " assert . true ( generated _ value . is _ temporary ) ; values . add ( new guid ( ( byte [ ] ) generated _ value . value ) ) ; ", "after_ctx": " <%> <+> } fact public void generates _ temp _ values ( ) { assert . true ( new temporary _ binary _ value _ generator ( ) . generates _ temporary _ values ) ; </%>", "after_line": "values . add ( new guid ( ( byte [ ] ) generated _ value ) ) ;", "predictions": ["values . add ( new guid ( ( byte entity ( = = builder <%> builder <%> t < > t t t ( add _ <*> ( entity ( entity ( var ( is _ entity ) ( generated _ entity ) ( is _ entity ) ( is _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ entity ) ( generated _ ) ( type type type type type type type"]}, {"before_ctx": " ", "before_line": " return new generated _ value ( convert . change _ type ( new _ value . current , property . property _ type . unwrap _ nullable _ type ( ) ) ) ; ", "after_ctx": " <%> <*> generated _ value -> object </%>", "after_line": "return convert . change _ type ( new _ value . current , property . property _ type . unwrap _ nullable _ type ( ) ) ;", "predictions": ["return new generated _ value ( convert . change . convert , guid ( . property _ as <%> ( ( value _ nullable _ value . is _ value ( . new . assert _ value ( . unwrap entity entity entity entity ( ) ) ) ) ) var ) var var var var </%> </%> . 0 _ type <%> = base . base _ type . ? </%> _ <-> _ > t < <@> entity entity entity _ unwrap entity ) ) var var ;"]}, {"before_ctx": " ", "before_line": " return new generated _ value ( convert . change _ type ( new _ value . current , property . property _ type . unwrap _ nullable _ type ( ) ) ) ; ", "after_ctx": " <%> <+> public virtual bool generates _ temporary _ values = > false ; </%>", "after_line": "return convert . change _ type ( new _ value . current , property . property _ type . unwrap _ nullable _ type ( ) ) ;", "predictions": ["return new generated _ value ( convert . </@> ( </%> ( add _ type </%> [ unwrap _ > </%> . assert _ value ( . { values _ nullable _ value ) ) ) type type ) ( </%> </%> </%> _ type . unwrap _ nullable _ type <%> </%> </%> </%> _ > node < enumerable _ base _ > t < < _ entity > t ) ;"]}, {"before_ctx": " ", "before_line": " assert . true ( generated _ value . is _ temporary ) ; values . add ( guid . parse ( ( string ) generated _ value . value ) ) ; ", "after_ctx": " <%> <+> } fact public void generates _ temp _ values ( ) { assert . true ( new temporary _ string _ value _ generator ( ) . generates _ temporary _ values ) ; </%>", "after_line": "values . add ( guid . parse ( ( string ) generated _ value ) ) ;", "predictions": ["values . add ( guid . parse ( ( new ) generated _ ; ) ( _ ; ) <%> </%> . parse _ > ) type type ( entity type type ( name type type _ ) ( ) type type type type . ) . parse . parse _ = entity type ;"]}, {"before_ctx": "<%> <*> generated _ value -> object </%> ", "before_line": " return new generated _ value ( guid . new _ guid ( ) . to _ byte _ array ( ) , is _ temporary : true ) ; ", "after_ctx": " <%> <+> public override bool generates _ temporary _ values = > true ; </%>", "after_line": "return guid . new _ guid ( ) . to _ byte _ array ( ) ;", "predictions": ["return guid . new _ guid ( ) . public _ byte <%> array <%> -> values value value value value value value value value value value value ;"]}, {"before_ctx": "<%> <-> value . </%> <%> <*> generated _ value -> generator </%> <%> <*> is -> generates </%> <%> <+> _ values </%> <%> <*> generated _ value -> object </%> ", "before_line": " return new generated _ value ( 1 , is _ temporary : true ) ; ", "after_ctx": " <%> <+> public override bool generates _ temporary _ values = > true ; </%>", "after_line": "return 1 ;", "predictions": ["return new generated _ value ( 1 , guid _ temporary fact"]}, {"before_ctx": "<%> <*> generated _ value -> object </%> ", "before_line": " return new generated _ value ( guid . new _ guid ( ) ) ; ", "after_ctx": " <%> <+> public override bool generates _ temporary _ values = > false ; </%>", "after_line": "return guid . new _ guid ( ) ;", "predictions": ["return guid . new _ guid ( ) ) ( ) ; _ new"]}, {"before_ctx": "<%> <*> generated _ value -> object </%> ", "before_line": " return new generated _ value ( guid . new _ guid ( ) . to _ string ( ) , is _ temporary : true ) ; ", "after_ctx": " <%> <+> public override bool generates _ temporary _ values = > true ; </%>", "after_line": "return guid . new _ guid ( ) . to _ string ( ) ;", "predictions": ["return guid . new _ guid ( ) ) entity entity entity type ] ] ) ) ;"]}, {"before_ctx": " ", "before_line": " assert . false ( generated _ value . is _ temporary ) ; values . add ( ( guid ) generated _ value . value ) ; ", "after_ctx": " <%> <+> } fact public void does _ not _ generate _ temp _ values ( ) { assert . false ( new sequential _ guid _ value _ generator ( ) . generates _ temporary _ values ) ; </%>", "after_line": "values . add ( ( guid ) generated _ value ) ;", "predictions": ["values . add ( ( guid ) generated _ value . new _ new ) ; values ) type ) type ) type </%> . add _ > ) type type type ;"]}, {"before_ctx": " ", "before_line": " assert . false ( generated _ value . is _ temporary ) ; values . add ( ( guid ) generated _ value . value ) ; ", "after_ctx": " <%> <+> } fact public void does _ not _ generate _ temp _ values ( ) { assert . false ( new guid _ value _ generator ( ) . generates _ temporary _ values ) ; </%>", "after_line": "values . add ( ( guid ) generated _ value ) ;", "predictions": ["values . add ( ( guid ) generated _ value . is _ string ) ;"]}, {"before_ctx": "<%> <*> new -> model . add _ </%> ", "before_line": " model . add _ entity _ type ( principal _ type ) ; var dependent _ type = new entity _ type ( typeof ( dependent _ entity ) ) ; ", "after_ctx": " <%> <*> model . add _ entity _ type ( dependent _ type ) ; var principal _ type _ with _ composite _ key = new entity _ type ( typeof ( principal _ entity _ with _ composite _ key ) ) ; -> var principal _ type _ with _ composite _ key = model . add _ entity _ type ( typeof ( principal _ entity _ with _ composite _ key ) ) ; </%> <%> <-> model . add _ entity _ type ( principal _ type _ with _ composite _ key ) ; </%>", "after_line": "var dependent _ type = model . add _ entity _ type ( typeof ( dependent _ entity ) ) ;", "predictions": ["var dependent _ type = new entity _ type ( principal _ entity ) ;"]}, {"before_ctx": "<%> <*> new -> model . add _ </%> <%> <*> model . add _ entity _ type ( principal _ type ) ; var dependent _ type = new entity _ type ( typeof ( dependent _ entity ) ) ; -> var dependent _ type = model . add _ entity _ type ( typeof ( dependent _ entity ) ) ; </%> <%> <*> model . add _ entity _ type ( dependent _ type ) ; var principal _ type _ with _ composite _ key = new entity _ type ( typeof ( principal _ entity _ with _ composite _ key ) ) ; -> var principal _ type _ with _ composite _ key = model . add _ entity _ type ( typeof ( principal _ entity _ with _ composite _ key ) ) ; </%> ", "before_line": " model . add _ entity _ type ( principal _ type _ with _ composite _ key ) ; var dependent _ type _ with _ composite _ key = new entity _ type ( typeof ( dependent _ entity _ with _ composite _ key ) ) ; ", "after_ctx": " <%> <-> model . add _ entity _ type ( dependent _ type _ with _ composite _ key ) ; </%>", "after_line": "var dependent _ type _ with _ composite _ key = model . add _ entity _ type ( typeof ( dependent _ entity _ with _ composite _ key ) ) ;", "predictions": ["var dependent _ type _ with _ composite _ key = new entity _ type ( typeof ( dependent _ entity _ with _ composite _ key ) ( new ) ( = type ( = type ( = type ( = type ( = type ( = type ( = type _ add _ model _ add ( _ ( ( = = = = = = = = = = = = = = = = = = = add _ model _ ; _ add ( new ) ( = type ( = type ( = _"]}, {"before_ctx": "<%> <+> model model </%> <%> <*> new -> model . add _ </%> ", "before_line": " public static i _ model model ( ) ", "after_ctx": " <%> <-> model . add _ entity _ type ( </%> <%> <*> ) -> model </%>", "after_line": "public static model model ( )", "predictions": ["public static i _ model model ( )"]}, {"before_ctx": "<%> <*> new -> model . add _ </%> <%> <-> i _ </%> ", "before_line": " model . add _ entity _ type ( entity _ type ( ) ) ; ", "after_ctx": " ", "after_line": "entity _ type ( model ) ;", "predictions": ["model . add _ entity _ type ( new . . </%> </%> ( ( ) ( ) ) <+> [ </%> </%> </%> </%> ) ;"]}, {"before_ctx": "<%> <-> model . add _ entity _ type ( entity _ type ) ; </%> <%> <*> new -> model . add _ </%> ", "before_line": " model . add _ entity _ type ( house _ type ) ; var customer _ type = new entity _ type ( typeof ( customer ) ) ; ", "after_ctx": " ", "after_line": "var customer _ type = model . add _ entity _ type ( typeof ( customer ) ) ;", "predictions": ["model . add _ entity _ type ( <@> <+> [ <@> ( : </%> . customer . fact . values . values . ] ) ) . = <*> _ . <%> ) ) ) ) ;"]}, {"before_ctx": " ", "before_line": " model . add _ entity _ type ( customer _ type ) ; var order _ type = new entity _ type ( typeof ( order ) ) ; ", "after_ctx": " <%> <-> model . add _ entity _ type ( order _ type ) ; </%>", "after_line": "var order _ type = model . add _ entity _ type ( typeof ( order ) ) ;", "predictions": ["model . add _ entity _ type ( > <%> ) ;"]}, {"before_ctx": "<%> <*> model . add _ entity _ type ( entity ) ; var entity = new entity _ type ( STR ) ; -> var entity = model . add _ entity _ type ( STR ) ; </%> ", "before_line": " model . add _ entity _ type ( entity ) ; var entity = new entity _ type ( STR ) ; ", "after_ctx": " <%> <*> model . add _ entity _ type ( entity ) ; var entity = new entity _ type ( STR ) ; -> var entity = model . add _ entity _ type ( STR ) ; </%>", "after_line": "var entity = model . add _ entity _ type ( STR ) ;", "predictions": ["var entity = new entity _ type ( STR ) ;"]}, {"before_ctx": "<%> <*> model . add _ entity _ type ( entity ) ; var entity = new entity _ type ( STR ) ; -> var entity = model . add _ entity _ type ( STR ) ; </%> ", "before_line": " model . add _ entity _ type ( entity ) ; var entity = new entity _ type ( STR ) ; ", "after_ctx": " <%> <-> model . add _ entity _ type ( entity ) ; </%>", "after_line": "var entity = model . add _ entity _ type ( STR ) ;", "predictions": ["var entity = new entity _ type ( STR </%> </%> _ ( _ ; < _ ) ) ;"]}, {"before_ctx": " ", "before_line": " var entity _ type = new entity _ type ( typeof ( some _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ entity ) . full _ name ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( some _ type entity entity entity entity entity entity entity ) . full _ add entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( some _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ entity ) . full _ name ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ;", "predictions": ["model . add _ entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ;"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( full _ notification _ entity ) ) ) ;"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( changed _ only _ entity ) ) ) ;"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " ", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ name ) ;", "predictions": ["model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) . full _ changed ) ;"]}, {"before_ctx": " ", "before_line": " var entity _ type = new entity _ type ( typeof ( some _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( some _ entity ) ) ) ;"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( some _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ entity ) ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( some _ dependent _ entity ) ) ) ;"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( full _ notification _ entity ) ) ) ;"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( changed _ only _ entity ) ) ) ;"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " ", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ) ;"]}, {"before_ctx": " ", "before_line": " var entity _ type = new entity _ type ( typeof ( some _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( some _ entity ) ) ) ;"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( some _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ entity ) ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( some _ dependent _ entity ) ) ) ;"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( full _ notification _ entity ) ) ) ;"]}, {"before_ctx": "<%> <*> var entity _ type = new entity _ type ( typeof ( full _ notification _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ; </%> <%> <*> var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " ", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ) ;"]}, {"before_ctx": "<%> <*> new -> model . add _ </%> ", "before_line": " model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; ", "after_ctx": " <%> <*> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ; </%> <%> <-> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ;", "predictions": ["var entity _ type = new entity _ type ( entity _ type ) ;"]}, {"before_ctx": "<%> <*> new -> model . add _ </%> <%> <*> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ; </%> ", "before_line": " model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; ", "after_ctx": " <%> <*> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ; </%> <%> <+> var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ; var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( kool _ entity ) ) ;", "predictions": ["var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ;"]}, {"before_ctx": "<%> <*> new -> model . add _ </%> ", "before_line": " model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " <%> <*> var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; </%>", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( entity _ type ) ;"]}, {"before_ctx": "<%> <*> model . add _ entity _ type ( entity _ type ) ; var entity _ type = new entity _ type ( typeof ( some _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; -> var entity _ type = model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ; model . add _ entity _ type ( entity _ type ) ; ", "after_ctx": " ", "after_line": "var entity _ type = model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ;", "predictions": ["model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ;"]}, {"before_ctx": " ", "before_line": " using ( sb . indent ( ) ) { sb . append _ line ( ) ; sb . append ( use _ identity _ facet _ config ) ; } ", "after_ctx": " <%> <+> return true ; </%>", "after_line": "sb . append ( use _ identity _ facet _ config ) ;", "predictions": ["sb . append _ line ( ) ; internal internal append _ b < console . <*> = [ <%> </@> change <-> <%> > ) )"]}, {"before_ctx": "<%> <-> system . data . </%> <%> <-> system . data . </%> ", "before_line": " public virtual i _ db _ context _ transaction begin _ transaction ( system . data . isolation _ level isolation _ level ) ", "after_ctx": " ", "after_line": "public virtual i _ db _ context _ transaction begin _ transaction ( isolation _ level isolation _ level )", "predictions": ["public virtual i _ db _ context _ . b > ; : : )"]}, {"before_ctx": "<%> <*> if ( left ! = null & & right ! = null ) -> if ( left ! = null </%> <%> <+> & & right ! = null ) </%> ", "before_line": " new case _ when _ clause [ ] ", "after_ctx": " <%> <-> , </%>", "after_line": "new [ ]", "predictions": ["new case _ when _ clause"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ change _ tracking _ internal ; </%> ", "before_line": " : change _ tracking . internal . identity _ map _ factory _ factory _ base , i _ in _ memory _ table _ factory ", "after_ctx": " ", "after_line": ": identity _ map _ factory _ factory _ base , i _ in _ memory _ table _ factory", "predictions": [": i _ in _ memory _ table ! & <@>"]}, {"before_ctx": " ", "before_line": " console . write _ line ( string . format ( STR , option _ help . long _ name ) ) ; ", "after_ctx": " <%> <-> if ( cmd ! = this & & cmd . arguments . count > 0 ) </%>", "after_line": "console . write _ line ( STR , option _ help . long _ name ) ;", "predictions": ["console . write _ line ( STR , option change memory _ long ! option < t internal core <-> <%> <*> type type ) = string _ </%> entity ;"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ change _ tracking _ internal ; </%> ", "before_line": " private readonly change _ tracking . internal . i _ principal _ key _ value _ factory < t _ key > key _ value _ factory ; ", "after_ctx": " <%> <-> change _ tracking . internal . </%>", "after_line": "private readonly i _ principal _ key _ value _ factory < t _ key > key _ value _ factory ;", "predictions": ["private readonly i _ principal _ key _ value _ factory < t _ key property < t < t _ ) <%> _ value _ = . t ) )"]}, {"before_ctx": "<%> <-> change _ tracking . internal . </%> ", "before_line": " not _ null change _ tracking . internal . i _ principal _ key _ value _ factory < t _ key > key _ value _ factory , ", "after_ctx": " ", "after_line": "not _ null i _ principal _ key _ value _ factory < t _ key > key _ value _ factory ,", "predictions": ["not _ null change _ tracking . internal _ virtual db . console . . ! i < t _ framework < t _ = _ ) <*> _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ = _ ) add _ ="]}, {"before_ctx": "<%> <+> using microsoft _ data _ relational _ model ; </%> ", "before_line": " namespace microsoft _ data _ relational _ model _ tests ", "after_ctx": " ", "after_line": "namespace microsoft _ data _ relational _ tests _ model", "predictions": ["namespace microsoft _ data _ relational _ model < </%> ( </%> ) _ </@>"]}, {"before_ctx": " ", "before_line": " b . property < string > ( STR ) ; b . property < int > ( STR ) ; ", "after_ctx": " <%> <-> < string > </%>", "after_line": "b . property ( STR ) ; b . property ( STR ) ;", "predictions": ["b . property ( STR ) ; b </%> </%> int > data <-> int ; ; ; ; int ( string <-> ; ; ;"]}, {"before_ctx": "<%> <-> < string > </%> <%> <-> < int > </%> ", "before_line": " b . property < string > ( STR ) ; ", "after_ctx": " <%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%>", "after_line": "b . property ( STR ) ;", "predictions": ["b . property ( STR ) ;"]}, {"before_ctx": "<%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%> ", "before_line": " b . property < int > ( STR ) . has _ field ( STR ) ; b . property < string > ( STR ) . has _ field ( STR ) ; ", "after_ctx": " <%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%>", "after_line": "b . property ( STR ) . has _ field ( STR ) ; b . property ( STR ) . has _ field ( STR ) ;", "predictions": ["b . property ( STR ) . has _ field ( STR ) ; b add add . -> . -> . -> _ . <%> new model . </%> entity var . </%>"]}, {"before_ctx": "<%> <-> < int > </%> <%> <-> < string > </%> ", "before_line": " b . property < int > ( STR ) ; ", "after_ctx": " <%> <-> < string > </%> <%> <-> < int > </%> <%> <-> < int > </%> <%> <-> < string > </%>", "after_line": "b . property ( STR ) ;", "predictions": ["b . property ( STR ) ;"]}, {"before_ctx": "<%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%> ", "before_line": " b . property < string > ( STR ) ; b . property < int > ( STR ) ; ", "after_ctx": " <%> <-> < int > </%> <%> <-> < string > </%>", "after_line": "b . property ( STR ) ; b . property ( STR ) ;", "predictions": ["b . property ( STR ) ; b . property ( STR ) ;"]}, {"before_ctx": "<%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%> ", "before_line": " b . property < int > ( STR ) ; ", "after_ctx": " <%> <-> < string > </%>", "after_line": "b . property ( STR ) ;", "predictions": ["b . property ( STR ) ;"]}, {"before_ctx": "<%> <-> < int > </%> <%> <-> < string > </%> <%> <-> < int > </%> <%> <-> < int > </%> ", "before_line": " b . property < string > ( STR ) ; ", "after_ctx": " ", "after_line": "b . property ( STR ) ;", "predictions": ["b . property ( STR ) ;"]}, {"before_ctx": " ", "before_line": " not _ null string name , can _ be _ null object value , can _ be _ null string invariant _ name ) ", "after_ctx": " <%> <+> check . not _ empty ( invariant _ name , nameof ( invariant _ name ) ) ; </%> <%> <-> command _ builder . add _ parameter ( name , value , t = > t . get _ mapping _ for _ value ( value ) , value ? . get _ type ( ) . is _ nullable _ type ( ) , invariant _ name ) ; </%>", "after_line": "not _ null string invariant _ name , not _ null string name )", "predictions": ["not _ null string name , not _ be _ null object value , can _ be string _ name ( assert _ <*> _ null <-> STR , ;"]}, {"before_ctx": " ", "before_line": " public virtual new t _ property current _ value ", "after_ctx": " <%> <*> param _ can _ be _ null set { base . current _ value = value ; } -> param _ can _ be _ null set { base . current _ value = value ; } </%> <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> param _ can _ be _ null </%>", "after_line": "public new virtual t _ property current _ value", "predictions": ["public virtual new t _ property current _ value"]}, {"before_ctx": "<%> <-> current . parent = null ; </%> <%> <+> virtual </%> ", "before_line": " var parameter = ( sqlite _ parameter ) value ; validate ( - 1 , parameter ) ; bound = false ; parameters . add ( parameter ) ; ", "after_ctx": " <%> <*> override void -> sqlite _ parameter </%> <%> <*> _ range ( array values -> ( sqlite _ parameter value </%> <%> <*> foreach ( var value in values ) { add ( value ) ; } -> parameters . add ( value ) ; </%> <%> <+> return value ; </%>", "after_line": "parameters . add ( ( sqlite _ parameter ) value ) ;", "predictions": ["parameters . add ( parameter ) ; parameters . add ( parameter ) ;"]}, {"before_ctx": "<%> <-> int size ; return string _ to _ h _ global _ ut ( s , out size ) ; } public static int _ ptr string _ to _ h _ global _ ut ( string s , out int size ) { </%> <%> <-> size = 0 ; </%> ", "before_line": " size = bytes . length + 1 ; var ptr = marshal . alloc _ h _ global ( size ) ; ", "after_ctx": " <%> <*> error -> rc , sqlite </%> <%> <*> code -> handle db </%> <%> <*> if ( error _ code = = constants . sqlite _ ok ) -> if ( rc = = constants . sqlite _ ok </%> <%> <+> | | rc = = constants . sqlite _ row | | rc = = constants . sqlite _ done ) </%>", "after_line": "var ptr = marshal . alloc _ h _ global ( bytes . length + 1 ) ;", "predictions": ["var ptr = marshal . alloc _ h _ global ( bytes ) ;"]}, {"before_ctx": "<%> <*> return expression . lambda ( expression . block ( typeof ( void ) , expressions ) , entity _ parameter , related _ entity _ parameter ) ; -> return expression . lambda ( expression . block ( typeof ( void ) , expressions ) , entity _ parameter , related _ entity _ parameter ) </%> <%> <+> . compile ( ) ; } private static delegate generate _ initialize ( type entity _ type , i _ navigation navigation ) { if ( ! navigation . is _ collection ( ) ) { return null ; } var entity _ parameter = expression . parameter ( entity _ type ) ; var get _ or _ create _ expression = expression . call ( expression . constant ( navigation . get _ collection _ accessor ( ) ) , collection _ accessor _ get _ or _ create _ method _ info , entity _ parameter , expression . constant ( true ) ) ; return expression . lambda ( expression . block ( typeof ( void ) , get _ or _ create _ expression ) , entity _ parameter ) . compile ( ) ; </%> ", "before_line": " = > entity . make _ member _ access ( navigation . get _ member _ info ( for _ materialization : false , for _ set : true ) ) . assign ( related _ entity ) ; ", "after_ctx": " ", "after_line": "= > entity . make _ member _ access ( navigation . get _ member _ info ( for _ materialization : true , for _ set : true ) ) . assign ( related _ entity ) ;", "predictions": ["= > entity . make _ member _ access ( navigation . get _ member _ info ) ( format . get to _ member to info ) STR"]}, {"before_ctx": " ", "before_line": " var target _ entry = target _ entity _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( related _ entity , target _ entity _ type ) : state _ manager . get _ or _ create _ entry ( related _ entity ) ; ", "after_ctx": " <%> <-> var target _ entry = target _ entity _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( navigation _ value , target _ entity _ type ) : state _ manager . get _ or _ create _ entry ( navigation _ value ) ; </%>", "after_line": "var target _ entry = state _ manager . get _ or _ create _ entry ( related _ entity , target _ entity _ type ) ;", "predictions": ["var target _ entry = get _ or _ create _ entry ( related _ ) ;"]}, {"before_ctx": "<%> <*> var target _ entry = target _ entity _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( related _ entity , target _ entity _ type ) : state _ manager . get _ or _ create _ entry ( related _ entity ) ; -> var target _ entry = state _ manager . get _ or _ create _ entry ( related _ entity , target _ entity _ type ) ; </%> ", "before_line": " var target _ entry = target _ entity _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( navigation _ value , target _ entity _ type ) : state _ manager . get _ or _ create _ entry ( navigation _ value ) ; ", "after_ctx": " ", "after_line": "var target _ entry = state _ manager . get _ or _ create _ entry ( navigation _ value , target _ entity _ type ) ;", "predictions": ["var target _ entry = get _ or _ create _ entry ( navigation _ add key <%> type <%> <-> <+> <%> _ type <-> <+> <%> <%> ( <+> _ ( _ = expression expression ) </%> add _ ; _ create . to _ ; . to _ <%> _ get _ entry ) }"]}, {"before_ctx": " ", "before_line": " var target _ entry = target _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( related _ entity , target _ type ) : state _ manager . get _ or _ create _ entry ( related _ entity ) ; ", "after_ctx": " <%> <-> var target _ entry = target _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( navigation _ value , target _ type ) </%>", "after_line": "var target _ entry = state _ manager . get _ or _ create _ entry ( related _ entity , target _ type ) ;", "predictions": ["var target _ entry = target _ type . has _ defining _ navigation ( - , ( t can ) ( ;"]}, {"before_ctx": "<%> <*> var target _ entry = target _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( related _ entity , target _ type ) : state _ manager . get _ or _ create _ entry ( related _ entity ) ; -> var target _ entry = state _ manager . get _ or _ create _ entry ( related _ entity , target _ type ) ; </%> ", "before_line": " var target _ entry = target _ type . has _ defining _ navigation ( ) ? state _ manager . get _ or _ create _ entry ( navigation _ value , target _ type ) : state _ manager . get _ or _ create _ entry ( navigation _ value ) ; ", "after_ctx": " ", "after_line": "var target _ entry = state _ manager . get _ or _ create _ entry ( navigation _ value , target _ type ) ;", "predictions": ["var target _ entry = get _ or _ create _ entry ( navigation _ if , . -> <%> <+> STR STR , key <%> <+> STR ) ;"]}, {"before_ctx": "<%> <*> key referenced _ key -> property property </%> <%> <*> params property [ ] properties -> key referenced _ key </%> <%> <*> check . not -> return get _ or _ add _ foreign </%> <%> <*> null -> key </%> <%> <+> new [ ] { property } , </%> <%> <-> , STR </%> <%> <+> } public virtual foreign _ key get _ or _ add _ foreign _ key ( not _ null i _ read _ only _ list < property > properties , [ not _ null ] key referenced _ key ) { return try _ get _ foreign _ key ( properties ) ? ? add _ foreign _ key ( properties , referenced _ key ) ; } can _ be _ null public virtual foreign _ key try _ get _ foreign _ key ( [ not _ null ] property property ) { return try _ get _ foreign _ key ( new [ ] { property } ) ; } can _ be _ null public virtual foreign _ key try _ get _ foreign _ key ( [ not _ null ] i _ read _ only _ list < property > properties ) { </%> <%> <*> var foreign _ key = foreign _ keys . value . first _ or _ default ( k = > k . referenced _ key = = referenced _ key & & k . properties . sequence _ equal ( properties ) ) ? ? add _ foreign _ key ( new foreign _ key ( referenced _ key , properties ) ) ; -> return foreign _ keys . has _ value </%> <%> <+> ? foreign _ keys . value . first _ or _ default ( fk = > matches ( fk , properties ) ) : null ; } public virtual foreign _ key get _ foreign _ key ( [ not _ null ] property property ) { return get _ foreign _ key ( new [ ] { property } ) ; } public virtual foreign _ key get _ foreign _ key ( [ not _ null ] i _ read _ only _ list < property > properties ) { var foreign _ key = try _ get _ foreign _ key ( properties ) ; if ( foreign _ key = = null ) { throw new model _ item _ not _ found _ exception ( strings . format _ foreign _ key _ not _ found ( property . format ( properties ) , name ) ) ; } </%> ", "before_line": " public virtual void remove _ foreign _ key ( [ not _ null ] foreign _ key foreign _ key ) ", "after_ctx": " <%> <*> check _ -> var index = foreign _ keys . value . find _ index ( fk = > matches ( fk , foreign _ key . properties ) ) ; if ( index > = 0 ) { var removed _ fk = foreign _ keys . value [ index ] ; check _ foreign _ key _ not _ in _ use ( removed _ fk ) ; </%> <%> <*> key _ not _ in -> keys . value . remove </%> <%> <*> use -> at </%> <%> <*> foreign _ key -> index </%>", "after_line": "public virtual foreign _ key remove _ foreign _ key ( [ not _ null ] foreign _ key foreign _ key )", "predictions": ["if ( foreign _ key get _ foreign _ key ( ) )"]}, {"before_ctx": "<%> <-> get _ or _ </%> ", "before_line": " order _ type . get _ or _ add _ foreign _ key ( customer _ pk , customer _ fk ) ; ", "after_ctx": " <%> <+> STR + customer . id _ property . name + STR , </%> <%> <+> ( property ) </%> <%> <+> _ key </%>", "after_line": "order _ type . get _ or _ add _ foreign _ key ( customer _ fk , customer _ pk ) ;", "predictions": ["get _ or _ add _ foreign _ key ( customer _ pk , </%> , to , can ) set"]}, {"before_ctx": "<%> <+> STR + customer . id _ property . name + STR , </%> <%> <+> ( property ) </%> <%> <+> _ key </%> <%> <-> get _ or _ </%> ", "before_line": " order _ type . get _ or _ add _ foreign _ key ( customer _ pk , customer _ fk ) ; ", "after_ctx": " <%> <+> STR + customer . id _ property . name + STR , </%> <%> <-> get _ or _ </%> <%> <+> _ and _ get </%> <%> <-> _ explicitly </%>", "after_line": "order _ type . get _ or _ add _ foreign _ key ( customer _ fk , customer _ pk ) ;", "predictions": ["customer _ fk . get _ or _ add _ foreign _ key ( order _ pk entity . _ ( _ <*> . add . add _ or . t _ . _ <-> . manager _ or ) ) <%> , , , , , ) <%>"]}, {"before_ctx": "<%> <*> entity _ type . remove _ key ( key ) ; entity _ type . remove _ key ( key ) ; -> assert . same ( key , entity _ type . remove _ key ( new key ( new [ ] { id _ property } ) ) ) ; </%> ", "before_line": " order _ type . get _ or _ add _ foreign _ key ( customer _ key , customer _ fk ) ; ", "after_ctx": " <%> <+> STR + customer . id _ property . name + STR , </%>", "after_line": "order _ type . get _ or _ add _ foreign _ key ( customer _ fk , customer _ key ) ;", "predictions": ["get _ or _ add _ foreign _ key ( customer _ key , customer _ <@> . property ( <-> _ t nullable name _ t nullable name name new new ;"]}, {"before_ctx": "<%> <*> order _ type . remove _ navigation ( customer _ navigation ) ; -> assert . same ( orders _ navigation , customer _ type . remove _ navigation ( new navigation ( STR , customer _ foreign _ key , points _ to _ principal : false ) ) ) ; </%> <%> <+> assert . empty ( customer _ type . navigations ) ; </%> ", "before_line": " var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( customer _ key , foreign _ key _ property ) ; ", "after_ctx": " ", "after_line": "var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( foreign _ key _ property , customer _ key ) ;", "predictions": ["var customer _ foreign _ key = get _ or _ add _ foreign _ ( key STR get _ or _ . create _ property : _ . _ property . s <%> _ property ) get _ or <%> ( STR -> STR ) ( STR -> STR ) ;"]}, {"before_ctx": "<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> ", "before_line": " var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( customer _ key , foreign _ key _ property ) ; var customer _ navigation = order _ type . add _ navigation ( new navigation ( customer _ foreign _ key , STR , points _ to _ principal : true ) ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <*> navigation -> foreign _ key , points _ to _ principal : true </%> <%> <*> STR -> typeof ( customer ) </%>", "after_line": "var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( foreign _ key _ property , customer _ key ) ;", "predictions": ["var customer _ foreign _ key = order _ type . get _ or _ ? _ manager _ ) . get _ </%> , <-> size _ 1 = true <%> ;"]}, {"before_ctx": "<%> <*> ( ) = > order _ type . add _ navigation ( new navigation ( customer _ foreign _ key , STR , points _ to _ principal : true ) ) ) . message ) ; -> ( ) = > order _ type . add _ navigation ( STR , customer _ foreign _ key , points _ to _ principal : true ) ) . message ) ; </%> <%> <+> } fact public void adding _ a _ navigation _ pointing _ to _ a _ shadow _ entity _ type _ throws ( ) { var customer _ type = new entity _ type ( STR ) ; var customer _ key = customer _ type . get _ or _ add _ key ( customer _ type . get _ or _ add _ property ( STR , typeof ( int ) , shadow _ property : true ) ) ; var order _ type = new entity _ type ( typeof ( order ) ) ; var foreign _ key _ property = order _ type . get _ or _ add _ property ( STR , typeof ( int ) , shadow _ property : true ) ; var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( foreign _ key _ property , customer _ key ) ; assert . equal ( strings . format _ navigation _ to _ shadow _ entity ( STR , typeof ( order ) . full _ name , STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > order _ type . add _ navigation ( STR , customer _ foreign _ key , points _ to _ principal : true ) ) . message ) ; </%> ", "before_line": " var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( customer _ key , foreign _ key _ property ) ; ", "after_ctx": " <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>", "after_line": "var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( foreign _ key _ property , customer _ key ) ;", "predictions": ["var customer _ foreign _ key = customer _ key . get _ or _ </%> _ . _ property ( _ property _ } <%> <%> <%> <%> <%> <%> <%> . = entity _ property _ } <%> <%> <%> ;"]}, {"before_ctx": "<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> ", "before_line": " var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( customer _ key , foreign _ key _ property ) ; customer _ type . add _ navigation ( new navigation ( customer _ foreign _ key , STR , points _ to _ principal : false ) ) ; ", "after_ctx": " <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>", "after_line": "var customer _ foreign _ key = order _ type . get _ or _ add _ foreign _ key ( foreign _ key _ property , customer _ key ) ; customer _ type . add _ navigation ( STR , customer _ foreign _ key , points _ to _ principal : false ) ;", "predictions": ["var customer _ foreign _ key = order _ type . get _ or _ t _ <%> _ ] new ) remove or _ principal ( </%> remove type remove , ) = value = if _ to _ <@> [ } new </@> , </@> _ > <+> : value ) ;"]}, {"before_ctx": "<%> <*> category -> product </%> <%> <-> _ primary </%> <%> <*> key -> property </%> <%> <+> STR </%> <%> <*> product -> category </%> <%> <+> _ primary </%> <%> <*> property -> key </%> <%> <-> STR </%> <%> <*> product -> category </%> <%> <-> _ primary </%> <%> <*> key -> property </%> <%> <+> STR </%> <%> <*> category -> product </%> <%> <+> _ primary </%> <%> <*> property -> key </%> <%> <-> STR </%> ", "before_line": " category _ type . add _ navigation ( new navigation ( category _ fk , STR , points _ to _ principal : false ) ) ; ", "after_ctx": " <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>", "after_line": "category _ type . add _ navigation ( STR , category _ fk , points _ to _ principal : false ) ;", "predictions": ["category _ type . add _ navigation ( new navigation ( category _ fk , , , new <-> new </@> <+> -> </%> ) </%> -> </%> </%> </%> </%> or or ) ? ;"]}, {"before_ctx": "<%> <*> category -> product </%> <%> <-> _ primary </%> <%> <*> key -> property </%> <%> <+> STR </%> <%> <*> product -> category </%> <%> <+> _ primary </%> <%> <*> property -> key </%> <%> <-> STR </%> <%> <*> product -> category </%> <%> <-> _ primary </%> <%> <*> key -> property </%> <%> <+> STR </%> <%> <*> category -> product </%> <%> <+> _ primary </%> <%> <*> property -> key </%> <%> <-> STR </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> ", "before_line": " product _ type . add _ navigation ( new navigation ( category _ fk , STR , points _ to _ principal : true ) ) ; ", "after_ctx": " <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>", "after_line": "product _ type . add _ navigation ( STR , category _ fk , points _ to _ principal : true ) ;", "predictions": ["product _ type . add _ navigation ( new navigation ( category _ fk , , , points entity ) get ) typeof typeof points entity , points entity ) typeof get type <%> ;"]}, {"before_ctx": "<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> ", "before_line": " product _ type . add _ navigation ( new navigation ( featured _ product _ fk , STR , points _ to _ principal : false ) ) ; ", "after_ctx": " <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>", "after_line": "product _ type . add _ navigation ( STR , featured _ product _ fk , points _ to _ principal : false ) ;", "predictions": ["product _ type . add _ navigation ( new navigation ( featured _ product _ add </%> </%> ( ; ( ; parameter parameter parameter <@> <+> _ - _ false ) ) key key key create ;"]}, {"before_ctx": "<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> ", "before_line": " category _ type . add _ navigation ( new navigation ( featured _ product _ fk , STR , points _ to _ principal : true ) ) ; ", "after_ctx": " ", "after_line": "category _ type . add _ navigation ( STR , featured _ product _ fk , points _ to _ principal : true ) ;", "predictions": ["category _ type . add _ navigation ( new navigation ( featured _ product , be _ <@> . points . points . add . and ( true ( true ) </%> </%> _ > can <@> </%> ) target create ( <%> create ( <%> create ( : create <%> error _ true _ <%> . points : ) _ to <+> _ <@> _ : entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity"]}, {"before_ctx": " ", "before_line": " var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; ", "after_ctx": " <%> <+> fk _ property , </%> <%> <-> , fk _ property </%>", "after_line": "var fk = dependent _ type . get _ or _ add _ foreign _ key ( fk _ property , principal _ type . get _ primary _ key ( ) ) ;", "predictions": ["var fk = dependent _ type . get _ or _ add _ foreign _ ( get _ primary _ <-> <%> ( ( ) _ , ) ) ) ; _ . state add ( . ( ( key _ primary _ key entity entry entry entry entry entry . or _ error <%> </%> , ( new ) ) ) type ) type"]}, {"before_ctx": "<%> <+> fk _ property , </%> <%> <-> , fk _ property </%> ", "before_line": " var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; ", "after_ctx": " <%> <+> fk _ property , </%> <%> <-> , fk _ property </%>", "after_line": "var fk = dependent _ type . get _ or _ add _ foreign _ key ( fk _ property , principal _ type . get _ primary _ key ( ) ) ;", "predictions": ["var fk = dependent _ type . get _ or _ add _ foreign , ( equal ) ( ( ( type ) </%> ) . <*> ) : </%> STR ;"]}, {"before_ctx": "<%> <+> fk _ property , </%> <%> <-> , fk _ property </%> ", "before_line": " var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; ", "after_ctx": " ", "after_line": "var fk = dependent _ type . get _ or _ add _ foreign _ key ( fk _ property , principal _ type . get _ primary _ key ( ) ) ;", "predictions": ["var fk = dependent _ type . get _ or _ add _ foreign _ get . get _ get <+> <%> _ property . new new new ( ( ) <%> <*> ; <%> _ </%> . ;"]}, {"before_ctx": " ", "before_line": " var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; dependent _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : true ) ) ; ", "after_ctx": " <%> <*> same -> not _ equal </%>", "after_line": "var fk = dependent _ type . get _ or _ add _ foreign _ key ( fk _ property , principal _ type . get _ primary _ key ( ) ) ; dependent _ type . add _ navigation ( STR , fk , points _ to _ principal : true ) ;", "predictions": ["dependent _ type . add _ navigation ( new navigation ( fk , STR </%> fk _ property </%> </%> id </%> ;"]}, {"before_ctx": "<%> <*> same -> not _ equal </%> ", "before_line": " var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; principal _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : false ) ) ; ", "after_ctx": " <%> <*> same -> not _ equal </%>", "after_line": "var fk = dependent _ type . get _ or _ add _ foreign _ key ( fk _ property , principal _ type . get _ primary _ key ( ) ) ; principal _ type . add _ navigation ( STR , fk , points _ to _ principal : false ) ;", "predictions": ["principal _ type . add _ navigation ( new navigation ( fk , STR , points <%> property _ property <+> <+> ( </@> ( points _ to ) <-> <%> <%> to _ [ <+> var ) ) or . navigation = size . STR <%> STR _ <+> <%> <-> ;"]}, {"before_ctx": "<%> <*> same -> not _ equal </%> ", "before_line": " var fk = dependent _ type . get _ or _ add _ foreign _ key ( principal _ type . get _ primary _ key ( ) , fk _ property ) ; ", "after_ctx": " <%> <*> same -> not _ equal </%>", "after_line": "var fk = dependent _ type . get _ or _ add _ foreign _ key ( fk _ property , principal _ type . get _ primary _ key ( ) ) ;", "predictions": ["var fk = dependent _ type . get _ or _ add _ foreign _ get <%> <%> new -> , new get _ property _ ; value _ t </%> new <%> ) <*> fk _ type . <->"]}, {"before_ctx": "<%> <*> principal _ type . get _ or _ set _ primary _ key ( -> principal _ type . get _ or _ set _ primary _ key ( new [ ] </%> <%> <+> { </%> <%> <-> ) ; new foreign _ key ( principal _ type . get _ primary _ key ( ) , new [ ] { dependent _ property , dependent _ property </%> <%> <+> new foreign _ key ( new [ ] { dependent _ property , dependent _ property } , principal _ type . get _ primary _ key ( ) ) ; </%> <%> <+> STR , </%> ", "before_line": " ( ) = > new foreign _ key ( principal _ type . get _ primary _ key ( ) , new [ ] { dependent _ property , dependent _ property } ) ) . message ) ; ", "after_ctx": " ", "after_line": "( ) = > new foreign _ key ( new [ ] { dependent _ property , dependent _ property } , principal _ type . get _ primary _ key ( ) ) ) . message ) ;", "predictions": ["( ) = > new foreign _ key ( principal _ type . get _ type _ target entity ( entry ( entry _ get { _ target entity entry ( -> add STR , , -> , parameter _ = _ . , parameter <%> ) ) ) entity ( ( ( dependent _ type type add _ primary _ , ) ( ( ( null ) _ null > . [ not ) ) _ null > ) ) ) ) , or ) ) _ { > < get _ ] _ ( key ) _ ("]}, {"before_ctx": " ", "before_line": " var foreign _ key = new foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { dependent _ prop } ) ; ", "after_ctx": " <%> <+> new [ ] { dependent _ prop } , </%> <%> <-> , new [ ] { dependent _ prop } </%>", "after_line": "var foreign _ key = new foreign _ key ( new [ ] { dependent _ prop } , entity _ type . get _ primary _ key ( ) ) ;", "predictions": ["var foreign _ key = new foreign _ key ( entity _ type . name , new _ ; key key key ;"]}, {"before_ctx": "<%> <+> new [ ] { dependent _ prop } , </%> <%> <-> , new [ ] { dependent _ prop } </%> ", "before_line": " var foreign _ key = new foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { dependent _ prop } ) ; ", "after_ctx": " <%> <*> entity _ type . get _ or _ set _ primary _ key ( -> entity _ type . get _ or _ set _ primary _ key ( new [ ] </%> <%> <+> { </%> <%> <-> ) ; </%>", "after_line": "var foreign _ key = new foreign _ key ( new [ ] { dependent _ prop } , entity _ type . get _ primary _ key ( ) ) ;", "predictions": ["var foreign _ key = new foreign _ key ( entity _ type . get _ remove _ </%> ( ) , , _ ; ? ? state _ = or _ = . _ prop . <%> </%> type _ = manager state manager manager ) manager manager _ property . <%> <*> get _ create _ . expression get _ create _ . expression ) _ , key to _ : ) </%>"]}, {"before_ctx": "<%> <*> entity _ type . get _ or _ set _ primary _ key ( -> entity _ type . get _ or _ set _ primary _ key ( new [ ] </%> <%> <+> { </%> <%> <*> ) ; -> } ) ; </%> ", "before_line": " var foreign _ key = new foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { dependent _ prop , dependent _ prop } ) ; ", "after_ctx": " <%> <+> new [ ] { </%>", "after_line": "var foreign _ key = new foreign _ key ( new [ ] { dependent _ prop , dependent _ prop } , entity _ type . get _ primary _ key ( ) ) ;", "predictions": ["var foreign _ key = new foreign _ key ( entity _ type . get _ primary _ key ( ) , STR ) <->"]}, {"before_ctx": " ", "before_line": " return property . entity _ type ! = null & & property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ; ", "after_ctx": " <%> <*> return property . entity _ type ! = null & & property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ; -> return property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ; </%>", "after_line": "return property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ;", "predictions": ["return property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . [ > > ( property ) &"]}, {"before_ctx": "<%> <*> return property . entity _ type ! = null & & property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ; -> return property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ; </%> ", "before_line": " return property . entity _ type ! = null & & property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ; ", "after_ctx": " <%> <*> return property . entity _ type ! = null & & property . entity _ type . keys . select _ many ( e = > e . properties ) . contains ( property ) ; -> return property . entity _ type . keys . select _ many ( e = > e . properties ) . contains ( property ) ; </%>", "after_line": "return property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ;", "predictions": ["return property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ;"]}, {"before_ctx": "<%> <*> return property . entity _ type ! = null & & property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ; -> return property . entity _ type . foreign _ keys . select _ many ( k = > k . properties ) . contains ( property ) ; </%> <%> <*> return property . entity _ type ! = null & & property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ; -> return property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ; </%> ", "before_line": " return property . entity _ type ! = null & & property . entity _ type . keys . select _ many ( e = > e . properties ) . contains ( property ) ; ", "after_ctx": " <%> <*> if ( value ! = null | | property . entity _ type = = null ) -> if ( value ! = null ) </%>", "after_line": "return property . entity _ type . keys . select _ many ( e = > e . properties ) . contains ( property ) ;", "predictions": ["return property . entity _ type . keys . select _ many ( e = > e . properties ) ;"]}, {"before_ctx": " ", "before_line": " assert . throws < argument _ null _ exception > ( ( ) = > new navigation ( null , STR , points _ to _ principal : true ) ) . param _ name ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "assert . throws < argument _ null _ exception > ( ( ) = > new navigation ( STR , null , points _ to _ principal : true ) ) . param _ name ) ;", "predictions": ["assert . throws < argument _ null _ exception > ( ( ( ( ( model ) public new navigation builder return get _ or . true < object <%> ) </%> ( points _ = _ </@> ] true , true _ to _ false : true , true _ true _ false : : true _ true _ false : : true _ true _ false : : _ true , true ) , ) _ <@> , true _ true _ false : true ,"]}, {"before_ctx": "<%> <*> null -> STR </%> <%> <*> STR -> null </%> ", "before_line": " assert . throws < argument _ exception > ( ( ) = > new navigation ( new mock < foreign _ key > ( ) . object , STR , points _ to _ principal : true ) ) . message ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "assert . throws < argument _ exception > ( ( ) = > new navigation ( STR , new mock < foreign _ key > ( ) . object , points _ to _ principal : true ) ) . message ) ;", "predictions": ["assert . throws < argument _ exception > ( ( ) = > new navigation ( new mock < foreign _ key entity ( _ _ <-> ) . ) . ) . STR . STR ) <*> false . message ( points type . message get type principal get true . select ( _ principal get to get type . message . message . <*> . _ <*> ;"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " var navigation = new navigation ( foreign _ key , STR , points _ to _ principal : true ) ; ", "after_ctx": " ", "after_line": "var navigation = new navigation ( STR , foreign _ key , points _ to _ principal : true ) ;", "predictions": ["var navigation = new navigation ( foreign _ key , ( _ principal < i -> i -> </%> <%> < i ) [ add ) _ , _ STR ) <+> new ] {"]}, {"before_ctx": " ", "before_line": " var navigation = new navigation ( foreign _ key , STR , points _ to _ principal : false ) ; ", "after_ctx": " <%> <-> fact public void can _ set _ entity _ type ( ) </%>", "after_line": "var navigation = new navigation ( STR , foreign _ key , points _ to _ principal : false ) ;", "predictions": ["var navigation = new navigation ( foreign _ key , , <*> , target ) key key key key key key key </%> <%> <%> <%> ) . var ,"]}, {"before_ctx": " ", "before_line": " var fk = entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ( ) , fk _ property ) ; ", "after_ctx": " <%> <-> navigation ( new </%> <%> <*> fk -> STR </%> <%> <*> STR -> fk </%> <%> <-> ) </%> <%> <-> navigation ( new </%> <%> <*> fk -> STR </%> <%> <*> STR -> fk </%> <%> <-> ) </%>", "after_line": "var fk = entity _ type . get _ or _ add _ foreign _ key ( fk _ property , entity _ type . get _ primary _ key ( ) ) ;", "predictions": ["var fk = entity _ type . get _ or _ add _ foreign _ key ( fk _ property ) ;"]}, {"before_ctx": "<%> <+> fk _ property , </%> <%> <-> , fk _ property </%> ", "before_line": " entity _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : false ) ) ; entity _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : true ) ) ; ", "after_ctx": " ", "after_line": "entity _ type . add _ navigation ( STR , fk , points _ to _ principal : false ) ; entity _ type . add _ navigation ( STR , fk , points _ to _ principal : true ) ;", "predictions": ["entity _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : false ) _ property _ add : : _ id ) ) <-> _ type STR ( ;"]}, {"before_ctx": " ", "before_line": " entity _ type . get _ or _ add _ foreign _ key ( new key ( new [ ] { id _ property } ) , fk _ property ) ; ", "after_ctx": " <%> <+> new [ ] { </%> <%> <+> } </%> <%> <+> new [ ] { fk } , </%> <%> <-> , new [ ] { fk } </%>", "after_line": "entity _ type . get _ or _ add _ foreign _ key ( fk _ property , new key ( new [ ] { id _ property } ) ) ;", "predictions": ["entity _ type . get _ or _ add _ foreign _ key ( new key ( id _ property } , < . ( get </%> STR STR _ ; } . ; . </@> _ type . </@> ) ) add _ or _ add _ type -> , fk _ ; . </@> . </@> _ ; . , } ) add _ false add _ or add properties key key key key key key key key key key key key key key key key key configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration"]}, {"before_ctx": "<%> <+> fk _ property , </%> <%> <-> , fk _ property </%> <%> <+> new [ ] { </%> <%> <+> } </%> ", "before_line": " entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { fk } ) ; ", "after_ctx": " <%> <-> entity _ type . get _ primary _ key ( ) , </%> <%> <+> , entity _ type . get _ primary _ key ( ) </%>", "after_line": "entity _ type . get _ or _ add _ foreign _ key ( new [ ] { fk } , entity _ type . get _ primary _ key ( ) ) ;", "predictions": ["entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key <%> </%> ) to _ -> STR to _ -> STR to . properties return return source ) var var ;"]}, {"before_ctx": "<%> <+> new [ ] { fk } , </%> <%> <-> , new [ ] { fk } </%> ", "before_line": " entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { fk _ a , fk _ b } ) ; ", "after_ctx": " ", "after_line": "entity _ type . get _ or _ add _ foreign _ key ( new [ ] { fk _ a , fk _ b } , entity _ type . get _ primary _ key ( ) ) ;", "predictions": ["entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key > STR STR"]}, {"before_ctx": " ", "before_line": " product _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ principal : false ) ) ; order _ detail _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ principal : true ) ) ; ", "after_ctx": " <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>", "after_line": "product _ type . add _ navigation ( STR , product _ id _ fk , points _ to _ principal : false ) ; order _ detail _ type . add _ navigation ( STR , product _ id _ fk , points _ to _ principal : true ) ;", "predictions": ["product _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ null > > > core > core core _ < cache object . type property <*> . <%> _ type _ <%> _ </%> _ keys ( </%> ( </%> . <*> . > properties properties _ keys _ > properties properties ( null ( ! ( ! . <*> . <%> _ entity _ <%> _ <%> _ </%> properties properties ( key ( key ( get . > ( ) ( entity _ > ("]}, {"before_ctx": "<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> ", "before_line": " customer _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : false ) ) ; order _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : true ) ) ; ", "after_ctx": " ", "after_line": "customer _ type . add _ navigation ( STR , customer _ id _ fk , points _ to _ principal : false ) ; order _ type . add _ navigation ( STR , customer _ id _ fk , points _ to _ principal : true ) ;", "predictions": ["customer _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ <%> ! ! ? ? properties value value value value value value ( ;"]}, {"before_ctx": "<%> <+> new [ ] { </%> <%> <+> } </%> ", "before_line": " entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { fk } ) ; ", "after_ctx": " ", "after_line": "entity _ type . get _ or _ add _ foreign _ key ( new [ ] { fk } , entity _ type . get _ primary _ key ( ) ) ;", "predictions": ["entity _ type . get _ or _ add _ foreign _ ; ) = < </%> </%> <-> <-> </@> , or _ ; , entity } ( new . <-> { new new [ entity <-> _ entity , . [ , . [ ( to _ : ( ( <*> <*> : to _ <@> _ -> , ( ( ( ( ( <*> <*> : <*> ) ) ) ( . [ ( to _ : ) ) ) ( . [ <*> ( to _ <@> ) ) ) ( . [ <*> ( to"]}, {"before_ctx": " ", "before_line": " var customer _ fk = customer _ type . get _ or _ add _ foreign _ key ( house _ type . get _ primary _ key ( ) , customer _ fk _ property ) ; ", "after_ctx": " <%> <+> order _ fk , </%> <%> <-> , order _ fk </%>", "after_line": "var customer _ fk = customer _ type . get _ or _ add _ foreign _ key ( customer _ fk _ property , house _ type . get _ primary _ key ( ) ) ;", "predictions": ["var customer _ fk = customer _ type . get _ or _ add _ foreign _ key ( customer _ type { ) entity entity key ; ; _ key _ set ; ; _ , STR"]}, {"before_ctx": "<%> <+> customer _ fk _ property , </%> <%> <-> , customer _ fk _ property </%> ", "before_line": " order _ type . get _ or _ add _ foreign _ key ( customer _ type . get _ primary _ key ( ) , order _ fk ) ; ", "after_ctx": " ", "after_line": "order _ type . get _ or _ add _ foreign _ key ( order _ fk , customer _ type . get _ primary _ key ( ) ) ;", "predictions": ["order _ type . get _ or _ add _ foreign _ key ( order _ fk _ property , order _ [ ] ] property ) ;"]}, {"before_ctx": " ", "before_line": " order _ detail _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ principal : true ) ) ; product _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ principal : false ) ) ; ", "after_ctx": " <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%>", "after_line": "order _ detail _ type . add _ navigation ( STR , product _ id _ fk , points _ to _ principal : true ) ; product _ type . add _ navigation ( STR , product _ id _ fk , points _ to _ principal : false ) ;", "predictions": ["order _ detail _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points . var _ source > > ( get . contains contains _ select . [ < ) , ) , = = false _ create _ array db > > func > func func func func > func > func func func cache </%> _ < < < < < [ <+> _ reader , ) , = = = false _ create _ array db > func func func func > func > func func func cache"]}, {"before_ctx": "<%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> <%> <*> new navigation ( -> STR , </%> <%> <-> , STR </%> <%> <-> ) </%> ", "before_line": " order _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : true ) ) ; customer _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : false ) ) ; ", "after_ctx": " ", "after_line": "order _ type . add _ navigation ( STR , customer _ id _ fk , points _ to _ principal : true ) ; customer _ type . add _ navigation ( STR , customer _ id _ fk , points _ to _ principal : false ) ;", "predictions": ["order _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : true ! keys ( contains ( contains ( > ( <@> _ id _ fk _ type _ ! ( false . -> . fk _ fk _ type _ ! ! ! ! ! ! . -> . null > ( false ( false . select . fk _ type _ fk . ! ! ! ! ! ! . -> . null > ( false ( contains . select . null _ type"]}, {"before_ctx": "<%> <+> new [ ] { </%> <%> <+> } </%> ", "before_line": " entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ( ) , new [ ] { fk } ) ; ", "after_ctx": " ", "after_line": "entity _ type . get _ or _ add _ foreign _ key ( new [ ] { fk } , entity _ type . get _ primary _ key ( ) ) ;", "predictions": ["entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ , , property _ ( entity _ entity ) ( argument ;"]}, {"before_ctx": "<%> <+> public virtual model _ builder create _ convention _ builder ( ) { return new model _ builder ( create _ convention _ set ( ) ) ; } </%> ", "before_line": " return new model _ builder ( model , create _ convention _ set ( ) ) ; ", "after_ctx": " ", "after_line": "return new model _ builder ( create _ convention _ set ( ) , model ) ;", "predictions": ["return new model _ builder ( model ) ;"]}, {"before_ctx": " ", "before_line": " var dispatch _ args = execute _ command . create _ args ( ", "after_ctx": " <%> <+> dispatcher _ version : this _ assembly _ version , </%>", "after_line": "var dispatch _ args = create _ args (", "predictions": ["var dispatch _ args = execute _ command . create ,"]}, {"before_ctx": "<%> <*> key -> value _ generator </%> ", "before_line": " var property _ builder = property . builder ; property _ builder . value _ generated ( value _ generated . never , configuration _ source . convention ) ; ", "after_ctx": " <%> <*> = > set _ key _ value _ generation ( foreign _ key . properties , entity _ type _ builder . metadata ) ; -> { </%> <%> <+> foreach ( var property in foreign _ key . properties ) { property . builder ? . value _ generated ( get _ value _ generated ( property ) , configuration _ source . convention ) ; } </%>", "after_line": "property . builder . value _ generated ( value _ generated . never , configuration _ source . convention ) ;", "predictions": ["property _ builder . value _ generated ( property . builder , configuration _ source . convention ) ;"]}, {"before_ctx": "<%> <+> dependencies , create _ array _ initializer ( k , dependencies . core _ options . is _ rich _ data _ error _ handing _ enabled ) ) ) ; </%> ", "before_line": " expression . constant ( mi . index = = - 1 ? i : mi . index ) , ", "after_ctx": " <%> <+> dependencies . core _ options . is _ rich _ data _ error _ handing _ enabled , </%> <%> <*> private static func < db _ data _ reader , object [ ] > create _ array _ initializer ( cache _ key cache _ key ) { return expression . lambda < func < db _ data _ reader , object [ ] > > ( -> private static func < db _ data _ reader , object [ ] > create _ array _ initializer ( cache _ key cache _ key , bool rich _ data _ error _ handling ) </%> <%> <+> = > expression . lambda < func < db _ data _ reader , object [ ] > > ( </%>", "after_line": "i ,", "predictions": ["expression . constant ( mi . index = = - 1 ? i : mi . index ) ,"]}, {"before_ctx": " ", "before_line": " new column _ expression ( primary _ key _ property , target _ table _ expression ) , new column _ expression ( foreign _ key _ property , inner _ join _ expression ) ) ; ", "after_ctx": " <%> <+> _ also </%>", "after_line": "new column _ expression ( foreign _ key _ property , target _ table _ expression ) , new column _ expression ( primary _ key _ property , inner _ join _ expression ) ) ;", "predictions": ["primary _ key _ property , target _ table _ expression , [ <+> _ ( , _ </%> _ ] . = public public public , ;"]}, {"before_ctx": "<%> <*> northwind -> sql _ server </%> <%> <-> northwind _ </%> <%> <*> , i -> < sql </%> <%> <*> class -> server </%> <%> <-> fixture < </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " ", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " ", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " ", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " ", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <*> database -> store </%> <%> <*> using ( var validation _ context = create _ context ( test _ database ) ) -> resolver ( resolver _ context , update _ exception ) ; </%> <%> <+> } using ( var validation _ context = create _ context ( test _ store ) ) { if ( validator ! = null ) </%> ", "before_line": " resolver ( resolver _ context , update _ exception ) ; if ( validator ! = null ) { await context . save _ changes _ async ( ) ; validator ( validation _ context ) ; } ", "after_ctx": " ", "after_line": "await context . save _ changes _ async ( ) ; validator ( validation _ context ) ;", "predictions": ["await resolver ( resolver _ context ) ;"]}, {"before_ctx": "<%> <+> using microsoft _ data _ entity _ functional _ tests _ test _ models _ northwind ; </%> <%> <-> using northwind ; </%> <%> <*> protected virtual -> public </%> ", "before_line": " var model = new model ( ) ; var model _ builder = new basic _ model _ builder ( model ) ; ", "after_ctx": " <%> <+> return model _ builder . model ; } public virtual void on _ model _ creating ( basic _ model _ builder model _ builder ) { </%>", "after_line": "var model _ builder = new basic _ model _ builder ( new model ( ) ) ;", "predictions": ["var model _ builder = new basic _ model _ <-> resolver ) ) ;"]}, {"before_ctx": " ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " fixture . sql ) ; ", "after_ctx": " <%> <-> fixture . init _ logger ( ) ; </%>", "after_line": "sql ) ;", "predictions": ["sql ) ;"]}, {"before_ctx": "<%> <*> private version current _ version = > new version ( native _ methods . sqlite _ libversion ( ) ) ; private const string file _ name = STR ; private sqlite _ connection create _ connection ( bool shared = false ) = > new sqlite _ connection ( $ STR shared STR private STR ) ; -> private sqlite _ connection create _ connection ( bool shared = false ) </%> <%> <+> { var builder = new sqlite _ connection _ string _ builder { data _ source = file _ name , cache = shared ? sqlite _ cache _ mode . shared : sqlite _ cache _ mode . private } ; return new sqlite _ connection ( builder . to _ string ( ) ) ; } </%> ", "before_line": " if ( file . exists ( file _ name ) ) { file . delete ( file _ name ) ; } ", "after_ctx": " ", "after_line": "file . delete ( file _ name ) ;", "predictions": ["file . delete ( file _ name ) ;"]}, {"before_ctx": "<%> <-> public override bool is _ fixed _ size = > false ; public override bool is _ read _ only = > false ; public override bool is _ synchronized = > false ; </%> <%> <*> { return -> = > </%> <%> <-> } </%> ", "before_line": " var current = parameters [ index ] ; if ( current = = value ) ", "after_ctx": " <%> <*> { return -> = > </%> <%> <-> } </%> <%> <*> { -> = > </%> <%> <-> } </%>", "after_line": "if ( parameters [ index ] = = value )", "predictions": ["if ( parameters [ index ] = = value )"]}, {"before_ctx": "<%> <*> var string _ value = value as string ; if ( string _ value ! = null ) -> if ( value is string string _ value ) </%> ", "before_line": " t _ enum enum _ value ; if ( value is t _ enum ) ", "after_ctx": " ", "after_line": "if ( value is t _ enum enum _ value )", "predictions": ["if ( value is t _ enum )"]}, {"before_ctx": "<%> <*> var service _ collection = new service _ collection ( ) . add _ scaffolding ( ) ; service _ collection . add _ logging ( ) ; configure _ design _ time _ services ( service _ collection ) ; service _ collection . add _ singleton ( typeof ( i _ file _ service ) , sp = > in _ memory _ files = new in _ memory _ file _ service ( ) ) ; var service _ provider = service _ collection . build _ service _ provider ( ) ; -> var service _ provider = configure _ design _ time _ services ( </%> <%> <+> new service _ collection ( ) . add _ scaffolding ( ) . add _ logging ( ) ) . add _ singleton ( typeof ( i _ file _ service ) , sp = > in _ memory _ files = new in _ memory _ file _ service ( ) ) . build _ service _ provider ( ) ; </%> ", "before_line": " protected abstract void configure _ design _ time _ services ( i _ service _ collection services ) ; ", "after_ctx": " ", "after_line": "protected abstract i _ service _ collection configure _ design _ time _ services ( i _ service _ collection services ) ;", "predictions": ["protected abstract void configure _ design _ time _ services ( i _ service _ collection services ) ;"]}, {"before_ctx": " ", "before_line": " public virtual void configure _ design _ time _ services ( [ not _ null ] i _ service _ collection services ) ", "after_ctx": " <%> <*> public virtual void configure _ design _ time _ services ( [ can _ be _ null ] type type , [ not _ null ] i _ service _ collection services ) = > invoke ( type , new [ ] { STR } , services ) ; -> public virtual i _ service _ collection configure _ design _ time _ services ( [ can _ be _ null ] type type , [ not _ null ] i _ service _ collection services ) </%> <%> <+> { invoke ( type , new [ ] { STR } , services ) ; return services ; } </%>", "after_line": "public virtual i _ service _ collection configure _ design _ time _ services ( [ not _ null ] i _ service _ collection services )", "predictions": ["public virtual void configure _ design _ time _ services ( [ _ & _ = right )"]}, {"before_ctx": "<%> <*> { check . not _ empty ( provider , nameof ( provider ) ) ; var services = new service _ collection ( ) ; configure _ services ( services ) ; configure _ provider _ services ( provider , services , throw _ on _ error : true ) ; configure _ user _ services ( services ) ; return services . build _ service _ provider ( ) ; } protected virtual void configure _ services ( [ not _ null ] i _ service _ collection services ) -> = > configure _ user _ services ( </%> <%> <+> configure _ provider _ services ( check . not _ empty ( provider , nameof ( provider ) ) , configure _ services ( new service _ collection ( ) ) , throw _ on _ error : true ) ) . build _ service _ provider ( ) ; protected virtual i _ service _ collection configure _ services ( [ not _ null ] i _ service _ collection services ) </%> ", "before_line": " private void configure _ provider _ services ( string provider , i _ service _ collection services , bool throw _ on _ error = false ) ", "after_ctx": " <%> <*> void -> i _ service _ collection </%>", "after_line": "private i _ service _ collection configure _ provider _ services ( string provider , i _ service _ collection services , bool throw _ on _ error = false )", "predictions": ["private bool configure _ provider _ services ( string provider , i _ service _ collection services , bool throw _ on _ error = false )"]}, {"before_ctx": "<%> <*> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g . tag ] . [ note ] < > n ' foo ' ) or [ g . tag ] . [ note ] is null ) order by [ g ] . [ nickname ] , [ g ] . [ squad _ id ] STR -> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g . tag ] . [ note ] < > n ' foo ' ) or [ g . tag ] . [ note ] is null ) STR </%> ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g . tag ] . [ note ] < > n ' foo ' ) or [ g . tag ] . [ note ] is null ) order by [ g ] . [ nickname ] , [ g ] . [ squad _ id ] STR ", "after_ctx": " ", "after_line": "where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g . tag ] . [ note ] < > n ' foo ' ) or [ g . tag ] . [ note ] is null ) STR", "predictions": ["where [ g ] . [ discriminator ] in [ nickname ] . [ g ] . [ squad _ id ] STR"]}, {"before_ctx": " ", "before_line": " = > new relational _ database _ dependencies ( check . not _ null ( batch _ preparer , nameof ( batch _ preparer ) ) , batch _ executor , connection ) ; ", "after_ctx": " <%> <-> check . not _ null ( </%> <%> <-> , nameof ( batch _ executor ) ) </%> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( connection ) ) </%>", "after_line": "= > new relational _ database _ dependencies ( batch _ preparer , batch _ executor , connection ) ;", "predictions": ["= > new relational _ database _ dependencies ( check <*> info entity </%> info </%> ( ) ] ) = ;"]}, {"before_ctx": "<%> <-> ( check . not _ null </%> <%> <-> , nameof ( batch _ preparer ) ) </%> ", "before_line": " = > new relational _ database _ dependencies ( batch _ preparer , check . not _ null ( batch _ executor , nameof ( batch _ executor ) ) , connection ) ; ", "after_ctx": " <%> <-> check . not _ null ( </%> <%> <-> , nameof ( connection ) ) </%>", "after_line": "= > new relational _ database _ dependencies ( batch _ preparer , batch _ executor , connection ) ;", "predictions": ["= > new relational _ database _ dependencies ( batch _ } > > ] current ; database </%> public = = ) string ; ; [ and ; result ;"]}, {"before_ctx": "<%> <-> ( check . not _ null </%> <%> <-> , nameof ( batch _ preparer ) ) </%> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( batch _ executor ) ) </%> ", "before_line": " = > new relational _ database _ dependencies ( batch _ preparer , batch _ executor , check . not _ null ( connection , nameof ( connection ) ) ) ; ", "after_ctx": " ", "after_line": "= > new relational _ database _ dependencies ( batch _ preparer , batch _ executor , connection ) ;", "predictions": ["= > new relational _ database _ dependencies ( batch _ var builder ) virtual = bool . <%> ) public } public = private file ) ; + + + -> ) ! } ! result ;"]}, {"before_ctx": " ", "before_line": " = > new relational _ connection _ dependencies ( check . not _ null ( context _ options , nameof ( context _ options ) ) , logger , diagnostic _ source ) ; ", "after_ctx": " <%> <-> check . not _ null ( </%> <%> <-> , nameof ( logger ) ) </%> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( diagnostic _ source ) ) </%>", "after_line": "= > new relational _ connection _ dependencies ( context _ options , logger , diagnostic _ source ) ;", "predictions": ["= > new relational _ connection _ dependencies ( context _ options , check ( null _ } </%> _ create ) context ] , = new false . by [ source ( = ) ) if result if <%> ( <*> ) + result ;"]}, {"before_ctx": "<%> <-> ( check . not _ null </%> <%> <-> , nameof ( context _ options ) ) </%> ", "before_line": " = > new relational _ connection _ dependencies ( context _ options , check . not _ null ( logger , nameof ( logger ) ) , diagnostic _ source ) ; ", "after_ctx": " <%> <-> check . not _ null ( </%> <%> <-> , nameof ( diagnostic _ source ) ) </%>", "after_line": "= > new relational _ connection _ dependencies ( context _ options , logger , diagnostic _ source ) ;", "predictions": ["= > new relational _ connection _ dependencies ( context _ options , connection _ ; , using model </%> _ source _ update _ { ) ) ) i _ source ; ; ; ; ; ; ; if ! in result ( = result ;"]}, {"before_ctx": "<%> <-> ( check . not _ null </%> <%> <-> , nameof ( context _ options ) ) </%> <%> <-> check . not _ null ( </%> <%> <-> , nameof ( logger ) ) </%> ", "before_line": " = > new relational _ connection _ dependencies ( context _ options , logger , check . not _ null ( diagnostic _ source , nameof ( diagnostic _ source ) ) ) ; ", "after_ctx": " ", "after_line": "= > new relational _ connection _ dependencies ( context _ options , logger , diagnostic _ source ) ;", "predictions": ["= > new relational _ connection _ dependencies ( context _ options , logger _ ; check . _ virtual > </%> </%> check context [ ) [ ; builder _ cache service services i _ source i ( STR . STR . and [ source . var ) + logger ) + + ) on ;"]}, {"before_ctx": "<%> <+> { new _ right = right _ join ? . outer _ key _ selector ; navigation _ join . remove _ navigation _ join ( navigation _ joins , right _ navigation _ join ) ; if ( new _ right ! = null & & is _ composite _ key ( new _ right . type ) ) </%> <%> <-> new _ right = right _ join ? . outer _ key _ selector ; navigation _ join . remove _ navigation _ join ( navigation _ joins , right _ navigation _ join ) ; if ( new _ right ! = null & & is _ composite _ key ( new _ right . type ) ) { </%> <%> <-> } </%> ", "before_line": " else { new _ right = right _ join ? . inner _ key _ selector ; } ", "after_ctx": " ", "after_line": "} else { new _ right = right _ join ? . inner _ key _ selector ;", "predictions": ["new _ right = right _ join ? . inner _ key _ cache file ,"]}, {"before_ctx": "<%> <-> included _ </%> <%> <-> _ tracking </%> <%> <*> info -> type </%> <%> <-> included _ </%> <%> <-> _ tracking </%> <%> <*> info -> type </%> <%> <-> included _ </%> <%> <-> _ tracking </%> <%> <*> info -> type </%> <%> <-> included _ </%> <%> <-> _ tracking </%> <%> <*> info -> type </%> <%> <*> included -> i </%> <%> <*> tracking _ info included _ -> type </%> <%> <-> _ tracking </%> <%> <*> info -> type </%> ", "before_line": " included _ entity _ tracking _ info . entity _ type , ", "after_ctx": " ", "after_line": "entity _ type ,", "predictions": ["entity _ type . entity _ type ,"]}, {"before_ctx": "<%> <*> query _ context . query _ buffer . begin _ tracking _ query ( ) ; return results . select ( result = > -> query _ context . begin _ tracking _ query ( ) ; </%> <%> <+> foreach ( var result in results ) { if ( result ! = null ) </%> <%> <*> if -> for </%> <%> <*> result ! -> var i </%> <%> <*> null ) -> 0 ; i < entity _ tracking _ infos . count ; i + + ) </%> <%> <*> for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) -> var entity = entity _ accessors [ i ] ( result as t _ in ) ; </%> <%> <+> if ( entity ! = null ) </%> ", "before_line": " var entity = entity _ accessors [ i ] ( result as t _ in ) ; if ( entity ! = null ) { query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ; } ", "after_ctx": " <%> <*> return result ; } ) ; -> } </%> <%> <+> yield return result ; } </%>", "after_line": "query _ context . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;", "predictions": ["query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;"]}, {"before_ctx": "<%> <*> return grouping . select ( result = > -> query _ context . begin _ tracking _ query ( ) ; </%> <%> <+> foreach ( var result in grouping ) { if ( result ! = null ) </%> <%> <*> if -> for </%> <%> <*> result ! -> var i </%> <%> <*> null ) -> 0 ; i < entity _ tracking _ infos . count ; i + + ) </%> <%> <*> for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) -> var entity = entity _ accessors [ i ] ( result as t _ in ) ; </%> <%> <+> if ( entity ! = null ) </%> ", "before_line": " var entity = entity _ accessors [ i ] ( result as t _ in ) ; if ( entity ! = null ) { query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ; } ", "after_ctx": " <%> <-> return result ; </%> <%> <*> } ) -> } </%> <%> <*> . get _ enumerator ( ) ; -> yield return result ; </%> <%> <+> } </%>", "after_line": "query _ context . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;", "predictions": ["query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;"]}, {"before_ctx": "<%> <+> opened _ count + + ; if ( opened _ count = = 1 ) { </%> <%> <+> } } public override void close ( ) { base . close ( ) ; opened _ count - - ; </%> ", "before_line": " sql _ command _ builder . build ( STR ) . create _ command ( this ) . execute _ non _ query ( ) ; ", "after_ctx": " ", "after_line": "sql _ command _ builder . build ( STR ) . execute _ non _ query ( this ) ;", "predictions": ["sql _ command _ builder . build ( STR ) , this _ <-> . execute _ execute ( ) <%> entity <%> </%> -> , resolver _ ? ) _ ? ) ; _ connection _ bool ; ) . build _ services ( ) . by _ 0 _ as ) <%>"]}, {"before_ctx": " ", "before_line": " using microsoft _ framework _ dependency _ injection _ extensions ; ", "after_ctx": " <%> <*> framework -> extensions </%>", "after_line": "using microsoft _ extensions _ dependency _ injection _ extensions ;", "predictions": ["using microsoft _ framework _ injection _ injection ;"]}, {"before_ctx": " ", "before_line": " using microsoft _ framework _ caching _ memory ; using microsoft _ framework _ dependency _ injection _ extensions ; using microsoft _ framework _ logging ; ", "after_ctx": " <%> <*> framework -> extensions </%>", "after_line": "using microsoft _ extensions _ caching _ memory ; using microsoft _ extensions _ dependency _ injection _ extensions ; using microsoft _ extensions _ logging ;", "predictions": ["using microsoft _ framework _ caching _ memory ; using , <-> _ options ) ) ) )"]}, {"before_ctx": " ", "before_line": " using microsoft _ framework _ dependency _ injection _ extensions ; ", "after_ctx": " <%> <*> framework -> extensions </%>", "after_line": "using microsoft _ extensions _ dependency _ injection _ extensions ;", "predictions": ["using microsoft _ framework _ injection _ injection ;"]}, {"before_ctx": " ", "before_line": " using microsoft _ framework _ dependency _ injection _ extensions ; ", "after_ctx": " <%> <*> framework -> extensions </%>", "after_line": "using microsoft _ extensions _ dependency _ injection _ extensions ;", "predictions": ["using microsoft _ framework _ injection _ injection ;"]}, {"before_ctx": " ", "before_line": " i _ read _ only _ dictionary < string , object > , bool > ; ", "after_ctx": " <%> <-> bool , </%>", "after_line": "i _ read _ only _ dictionary < string , object > > ;", "predictions": ["i _ read _ only _ dictionary <-> & ;"]}, {"before_ctx": "<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> ", "before_line": " var expected _ count = manage _ connection ? 1 : 0 ; ", "after_ctx": " <%> <-> theory inline _ data _ true inline _ data _ false public virtual async task can _ execute _ non _ query _ async ( bool manage _ connection ) </%>", "after_line": "var expected _ count = 1 ;", "predictions": ["var expected _ count = 0 ;"]}, {"before_ctx": "<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> ", "before_line": " var expected _ count = manage _ connection ? 1 : 0 ; ", "after_ctx": " <%> <-> theory inline _ data _ true inline _ data _ false public void can _ execute _ scalar ( bool manage _ connection ) </%>", "after_line": "var expected _ count = 1 ;", "predictions": ["var expected _ count = 0 ;"]}, {"before_ctx": "<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> ", "before_line": " var expected _ count = manage _ connection ? 1 : 0 ; ", "after_ctx": " <%> <-> theory inline _ data _ true inline _ data _ false public async task can _ execute _ scalar _ async ( bool manage _ connection ) </%>", "after_line": "var expected _ count = 1 ;", "predictions": ["var expected _ count = 0 ;"]}, {"before_ctx": "<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> ", "before_line": " var expected _ count = manage _ connection ? 1 : 0 ; ", "after_ctx": " <%> <-> theory inline _ data _ true inline _ data _ false public void can _ execute _ reader ( bool manage _ connection ) </%>", "after_line": "var expected _ count = 1 ;", "predictions": ["var expected _ count = manage _ connection ;"]}, {"before_ctx": "<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> ", "before_line": " var expected _ count = manage _ connection ? 1 : 0 ; ", "after_ctx": " ", "after_line": "var expected _ count = 1 ;", "predictions": ["var expected _ count = manage _ ) ;"]}, {"before_ctx": "<%> <*> new fake _ relational _ connection ( options ) , manage _ connection : manage _ connection ) ; -> new fake _ relational _ connection ( options ) ) ; </%> ", "before_line": " var expected _ count = manage _ connection ? 1 : 0 ; ", "after_ctx": " ", "after_line": "var expected _ count = 1 ;", "predictions": ["var expected _ count = manage _ connection . if ; ; _ connection ; ; _ ( not : _ ; STR"]}, {"before_ctx": "<%> <*> bool open _ connection , bool close _ connection ) -> bool close _ connection = true ) </%> ", "before_line": " object result ; if ( open _ connection ) { connection . open ( ) ; } ", "after_ctx": " <%> <+> object result ; </%>", "after_line": "connection . open ( ) ;", "predictions": ["connection . open ( ) ;"]}, {"before_ctx": " ", "before_line": " if ( open _ connection & & ! close _ connection ) { connection . close ( ) ; } ", "after_ctx": " <%> <-> if ( close _ connection ) { connection . close ( ) ; } </%>", "after_line": "connection . close ( ) ;", "predictions": ["connection . close ( ) ;"]}, {"before_ctx": "<%> <*> bool open _ connection , bool close _ connection , -> bool close _ connection = true , </%> ", "before_line": " object result ; if ( open _ connection ) { await connection . open _ async ( cancellation _ token ) ; } ", "after_ctx": " <%> <+> object result ; </%>", "after_line": "await connection . open _ async ( cancellation _ token ) ;", "predictions": ["await connection . open _ async ( app _ ? <%> <%> <%> ) ; ;"]}, {"before_ctx": " ", "before_line": " if ( open _ connection & & ! close _ connection ) { connection . close ( ) ; } ", "after_ctx": " <%> <*> if ( close _ connection ) { connection . close ( ) ; } -> db _ command . parameters . clear ( ) ; </%>", "after_line": "connection . close ( ) ;", "predictions": ["connection . close ( ) ;"]}, {"before_ctx": " ", "before_line": " var logger = dependencies . logger ; var value _ generation _ strategy _ convention = new sql _ server _ value _ generation _ strategy _ convention ( logger ) ; ", "after_ctx": " <%> <*> convention _ set . model _ initialized _ conventions . add ( new relational _ max _ identifier _ length _ convention ( NUM , logger ) ) ; value _ generator _ convention value _ generator _ convention = new sql _ server _ value _ generator _ convention ( logger ) ; -> convention _ set . model _ initialized _ conventions . add ( </%> <%> <+> new relational _ max _ identifier _ length _ convention ( NUM , dependencies , relational _ dependencies ) ) ; value _ generator _ convention value _ generator _ convention = new sql _ server _ value _ generator _ convention ( dependencies , relational _ dependencies ) ; </%> <%> <*> logger -> dependencies </%>", "after_line": "var value _ generation _ strategy _ convention = new sql _ server _ value _ generation _ strategy _ convention ( dependencies ) ;", "predictions": ["var value _ generation _ strategy _ convention = new sql _ i _ source _ for property property property ( = = = = = entity ) ;"]}, {"before_ctx": "<%> <*> var full _ file _ name = path . combine ( output _ directory _ name , file _ name ) ; if ( file . exists ( full _ file _ name ) ) -> if ( file _ service . is _ file _ read _ only ( output _ directory _ name , file _ name ) ) </%> ", "before_line": " var attributes = file . get _ attributes ( full _ file _ name ) ; if ( attributes . has _ flag ( file _ attributes . read _ only ) ) { read _ only _ files . add ( file _ name ) ; } ", "after_ctx": " <%> <-> } private void output _ file ( string output _ directory _ name , string output _ file _ name , string contents ) </%>", "after_line": "read _ only _ files . add ( file _ name ) ;", "predictions": ["read _ only _ files . add ( file _ ) ( , , file ( , ( query _ query _ ) ( public <+> ( query _ ] ( public _ = property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _ property ( _"]}, {"before_ctx": "<%> <*> if ( ! file . exists ( script _ path ) ) -> if ( file . exists ( STR + script _ path ) ) </%> <%> <+> { script _ path = STR + script _ path ; } else </%> ", "before_line": " script _ path = path . combine ( app _ base , path . get _ file _ name ( script _ path ) ) ; ", "after_ctx": " ", "after_line": "script _ path = path . combine ( app _ base , script _ path ) ;", "predictions": ["script _ path = path . combine ) </%> ;"]}, {"before_ctx": "<%> <*> if ( ! file . exists ( script _ path ) ) -> if ( file . exists ( STR + script _ path ) ) </%> <%> <+> { script _ path = STR + script _ path ; } else </%> ", "before_line": " script _ path = path . combine ( app _ base , path . get _ file _ name ( script _ path ) ) ; ", "after_ctx": " ", "after_line": "script _ path = path . combine ( app _ base , script _ path ) ;", "predictions": ["script _ path = path . combine ( app _ <@> public ( script public script _ expression ( ) ( ) ( ) ( ) ( ) ( ) ) ) attributes _ path ,"]}, {"before_ctx": "<%> <+> = > shaper . get _ accessor _ expression ( query _ source ) ; public override void update _ query _ source ( [ not _ null ] i _ query _ source query _ source ) = > shaper . update _ query _ source ( query _ source ) ; public override bool is _ shaper _ for _ query _ source ( [ not _ null ] i _ query _ source query _ source ) = > shaper . is _ shaper _ for _ query _ source ( query _ source ) ; public override void save _ accessor _ expression ( [ not _ null ] query _ source _ mapping query _ source _ mapping ) = > shaper . save _ accessor _ expression ( query _ source _ mapping ) ; public override i _ query _ source query _ source = > shaper . query _ source ; </%> ", "before_line": " = > selector ( shaper . shape ( query _ context , value _ buffer ) ) ; ", "after_ctx": " <%> <-> query _ source , </%>", "after_line": "= > selector ( query _ context , shaper . shape ( query _ context , value _ buffer ) ) ;", "predictions": ["= > selector ( shaper . shape ( query _ context ) ) type ;"]}, {"before_ctx": "<%> <*> var ordering _ expression = ordering . expression ; if ( ordering . expression . remove _ convert ( ) is null _ conditional _ expression null _ conditional _ expression ) { ordering _ expression = null _ conditional _ expression . access _ operation ; } -> var ordering _ expression = ordering . expression . remove _ convert ( ) . remove _ null _ conditional ( ) . remove _ convert ( ) ; </%> ", "before_line": " if ( ordering _ expression . remove _ convert ( ) is member _ expression member _ expression ", "after_ctx": " <%> <-> . remove _ convert ( ) </%>", "after_line": "if ( ordering _ expression is member _ expression member _ expression", "predictions": ["if ( ordering _ expression . remove _ convert ( ) if is _ expression is is file _ file"]}, {"before_ctx": "<%> <*> var ordering _ expression = ordering . expression ; if ( ordering . expression . remove _ convert ( ) is null _ conditional _ expression null _ conditional _ expression ) { ordering _ expression = null _ conditional _ expression . access _ operation ; } -> var ordering _ expression = ordering . expression . remove _ convert ( ) . remove _ null _ conditional ( ) . remove _ convert ( ) ; </%> <%> <-> . remove _ convert ( ) </%> ", "before_line": " if ( ordering _ expression . remove _ convert ( ) is method _ call _ expression method _ call _ expression ", "after_ctx": " ", "after_line": "if ( ordering _ expression is method _ call _ expression method _ call _ expression", "predictions": ["if ( ordering _ expression . remove _ convert ( name <%> _ read _ file file _ <%> _ expression ) )"]}, {"before_ctx": "<%> <*> var property = new property ( customer . id _ property ) ; var property = new property ( customer . name _ property ) ; assert . same ( property , entity _ type . add _ property ( property ) ) ; assert . same ( property , entity _ type . add _ property ( property ) ) ; -> var property = entity _ type . add _ property ( customer . id _ property ) ; </%> <%> <+> var property = entity _ type . add _ property ( customer . name _ property ) ; </%> ", "before_line": " var entity _ type = new entity _ type ( typeof ( customer ) ) ; var property = new property ( customer . id _ property ) ; entity _ type . add _ property ( property ) ; ", "after_ctx": " <%> <*> entity _ type . add _ property ( property ) ; assert . same ( entity _ type , property . entity _ type ) ; -> entity _ type . remove _ property ( property ) ; </%> <%> <-> entity _ type . remove _ property ( property ) ; assert . empty ( entity _ type . properties ) ; </%>", "after_line": "var property = entity _ type . add _ property ( customer . id _ property ) ;", "predictions": ["var entity _ type = new property _ type ( _ _ = <%> , <*> , <%> , _ _ = _ _ , _ null , _ null , _ null , _ ;"]}, {"before_ctx": "<%> <*> bool -> void </%> <%> <-> return </%> ", "before_line": " public virtual task < bool > detect _ changes _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) ) ", "after_ctx": " ", "after_line": "public virtual task detect _ changes _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) )", "predictions": ["public virtual bool detect _ changes _ <@> ; path path data data data ( connection ( connection _ ) ( ) ) ( ; ; <+> ) _ name ) )"]}, {"before_ctx": " ", "before_line": " return found _ changes ; } public virtual task < bool > detect _ changes _ async ( ", "after_ctx": " <%> <*> return task . from _ result ( detect _ changes ( entry ) ) ; -> detect _ changes ( entry ) ; </%> <%> <+> return task . from _ result ( false ) ; } public virtual bool requires _ detect _ changes ( [ not _ null ] state _ entry entry ) { check . not _ null ( entry , STR ) ; </%>", "after_line": "} public virtual task detect _ changes _ async (", "predictions": ["return found ; }"]}, {"before_ctx": " ", "before_line": " assert . false ( change _ detector . detect _ changes ( state _ manager ) ) ; ", "after_ctx": " <%> <-> assert . true ( </%> <%> <-> ) </%>", "after_line": "change _ detector . detect _ changes ( state _ manager ) ;", "predictions": ["assert . false ( state _ manager ) </%> if , -> ) ;"]}, {"before_ctx": "<%> <-> assert . false ( </%> <%> <-> ) </%> ", "before_line": " assert . true ( change _ detector . detect _ changes ( state _ manager ) ) ; ", "after_ctx": " <%> <*> bool -> void </%>", "after_line": "change _ detector . detect _ changes ( state _ manager ) ;", "predictions": ["change _ detector . detect _ changes _ = open . </@> _ </@> data data"]}, {"before_ctx": " ", "before_line": " context . check _ disposed ( ) ; ", "after_ctx": " <%> <-> context . </%>", "after_line": "check _ disposed ( ) ;", "predictions": ["check _ disposed ( ) ;"]}, {"before_ctx": "<%> <-> context . </%> ", "before_line": " context . check _ disposed ( ) ; ", "after_ctx": " ", "after_line": "check _ disposed ( ) ;", "predictions": ["check _ disposed ( ) ;"]}, {"before_ctx": " ", "before_line": " context . check _ disposed ( ) ; ", "after_ctx": " <%> <-> context . </%>", "after_line": "check _ disposed ( ) ;", "predictions": ["check _ disposed ( ) ;"]}, {"before_ctx": "<%> <-> context . </%> ", "before_line": " context . check _ disposed ( ) ; ", "after_ctx": " <%> <-> context . </%>", "after_line": "check _ disposed ( ) ;", "predictions": ["check _ disposed ( ) ;"]}, {"before_ctx": "<%> <-> context . </%> ", "before_line": " context . check _ disposed ( ) ; ", "after_ctx": " ", "after_line": "check _ disposed ( ) ;", "predictions": ["check _ disposed ( ) ;"]}, {"before_ctx": "<%> <-> assert . equal ( STR , columns . single ( c = > c . name = = STR ) . default _ value _ sql ) ; </%> ", "before_line": " columns . where ( c = > c . name . starts _ with ( STR ) ) , ", "after_ctx": " <%> <*> STR ) ; -> @ STR </%> <%> <+> drop table default _ values ; drop type datetime _ alias ; drop type datetimeoffset _ alias ; drop type decimal _ alias ; drop type numeric _ alias ; drop type time _ alias ; STR </%>", "after_line": "columns ,", "predictions": ["columns . where ( c = > c . name . starts _ with ( ( ( ( call null call ) ) ; starts ) . has ) only , _ alias ;"]}, {"before_ctx": "<%> <*> public oracle _ decimal _ type _ mapping ( [ not _ null ] string store _ type , db _ type ? db _ type = null ) : this ( -> public oracle _ decimal _ type _ mapping ( </%> <%> <+> not _ null string store _ type , db _ type ? db _ type = null , int? precision = null , int? scale = null , store _ type _ postfix store _ type _ postfix = store _ type _ postfix . none ) : base ( </%> <%> <*> new core _ type _ mapping _ parameters ( typeof ( decimal ) ) , -> new core _ type _ mapping _ parameters ( typeof ( decimal ) ) , </%> <%> <-> . precision _ and _ scale </%> ", "before_line": " precision : NUM , scale : NUM ) ) ", "after_ctx": " <%> <-> public override relational _ type _ mapping clone ( string store _ type , int? size ) = > new oracle _ decimal _ type _ mapping ( parameters . with _ store _ type _ and _ size ( store _ type , size ) ) ; public override core _ type _ mapping clone ( value _ converter converter ) = > new oracle _ decimal _ type _ mapping ( parameters . with _ composed _ converter ( converter ) ) ; </%>", "after_line": "precision : precision , scale : scale ) )", "predictions": ["precision : NUM , scale : NUM )"]}, {"before_ctx": "<%> <+> evaluatable _ expression _ filter = evaluatable _ expression _ filter ; </%> ", "before_line": " query = query _ model _ generator . extract _ parameters ( logger , query , query _ context ) ; ", "after_ctx": " ", "after_line": "query = extract _ parameters ( query , query _ context , logger ) ;", "predictions": ["query = query _ model ;"]}, {"before_ctx": " ", "before_line": " query = query _ model _ generator . extract _ parameters ( logger , query , query _ context _ factory . create ( ) , parameterize : false ) ; ", "after_ctx": " <%> <-> query _ model _ generator . </%> <%> <-> logger , </%> <%> <+> , logger </%>", "after_line": "query = extract _ parameters ( query , query _ context _ factory . create ( ) , logger , parameterize : false ) ;", "predictions": ["query = query _ model _ generator . = type _ parameters offset int type _ type _ factory . parameterize date false if if = = false date false if if = = false date false if"]}, {"before_ctx": "<%> <*> query = query _ model _ generator . extract _ parameters ( logger , query , query _ context _ factory . create ( ) , parameterize : false ) ; -> query = extract _ parameters ( query , query _ context _ factory . create ( ) , logger , parameterize : false ) ; </%> ", "before_line": " query = query _ model _ generator . extract _ parameters ( logger , query , query _ context ) ; ", "after_ctx": " ", "after_line": "query = extract _ parameters ( query , query _ context , logger ) ;", "predictions": ["query = query ;"]}, {"before_ctx": " ", "before_line": " assert . equal ( 1 , entity . get _ primary _ key ( ) . properties . count ( ) ) ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "assert . equal ( 1 , entity . get _ primary _ key ( ) . properties . count ) ;", "predictions": ["assert . equal ( 1 , entity . get <%> name ) ( _ properties query entity entity entity _ properties _ key = _ properties type <+> ) <+>"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " assert . equal ( 1 , entity . get _ primary _ key ( ) . properties . count ( ) ) ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "assert . equal ( 1 , entity . get _ primary _ key ( ) . properties . count ) ;", "predictions": ["assert . equal ( 1 , entity ( <@> ( <@> ( = ( ( _ get <+> key = _ type type _ properties type _ _ _ _ type ) _ properties _ int _ _ _ _ _ _ ) _ int _ typeof _ ( _ _ _ query query query query query query ) query , query , query ;"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " assert . equal ( 1 , entity . get _ primary _ key ( ) . properties . count ( ) ) ; ", "after_ctx": " ", "after_line": "assert . equal ( 1 , entity . get _ primary _ key ( ) . properties . count ) ;", "predictions": ["assert . equal ( 1 , entity . get _ primary <%> key . properties ) ) ) ) ( _ _ _ _ _ _ _ _ _ _ _ _ properties _ ) <+> ;"]}, {"before_ctx": " ", "before_line": " using ( var connection = new sql _ server _ connection ( create _ configuration ( ) , new connection _ string _ resolver ( null ) ) ) ", "after_ctx": " <%> <-> , new connection _ string _ resolver ( null </%> <%> <-> ) </%>", "after_line": "using ( var connection = new sql _ server _ connection ( create _ configuration ( ) ) )", "predictions": ["using ( var connection = new sql _ = _ . , <%> type type type type type )"]}, {"before_ctx": "<%> <-> , new connection _ string _ resolver ( null </%> <%> <-> ) </%> ", "before_line": " using ( var connection = new sql _ server _ connection ( create _ configuration ( ) , new connection _ string _ resolver ( null ) ) ) ", "after_ctx": " ", "after_line": "using ( var connection = new sql _ server _ connection ( create _ configuration ( ) ) )", "predictions": ["using ( var connection = new sql _ server _ connection ( <@> ( nullable </%> </%> <%> </%> type type type type type type ) type )"]}, {"before_ctx": " ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > new fake _ connection ( create _ configuration ( null ) , new connection _ string _ resolver ( null ) ) ) . message ) ; ", "after_ctx": " <%> <*> assert . throws < invalid _ operation _ exception > ( ( ) = > new fake _ connection ( create _ configuration ( e = > { } , e = > { } ) , new connection _ string _ resolver ( null ) ) ) . message ) ; -> assert . throws < invalid _ operation _ exception > ( ( ) = > new fake _ connection ( create _ configuration ( e = > { } , e = > { } ) ) ) . message ) ; </%>", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > new fake _ connection ( create _ configuration ( null ) ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation _ exception > ( ( ) = > new fake _ connection ( create _ configuration ( null ) , new connection _ string _ resolver ( null ) ) ) ;"]}, {"before_ctx": " ", "before_line": " new relational _ database _ model _ factory _ test . fake _ database _ model _ factory ( ) , new relational _ database _ model _ factory _ test . fake _ scaffolding _ model _ factory ( new test _ operation _ reporter ( ) ) , ", "after_ctx": " <%> <-> new in _ memory _ file _ service ( ) , </%>", "after_line": "new fake _ database _ model _ factory ( ) , new fake _ scaffolding _ model _ factory ( new test _ operation _ reporter ( ) ) ,", "predictions": ["new fake _ database _ model _ test . nullable ) ) </%> = </%> = </%> = </%> <+> <+>"]}, {"before_ctx": "<%> <-> } } public virtual entity _ type _ code _ generator _ helper entity _ type _ code _ generator _ helper ( entity _ type _ generator _ model model ) { return new entity _ type _ code _ generator _ helper ( model , extensions _ provider ) ; } </%> ", "before_line": " var code _ gen _ model = new entity . metadata . model ( ) ; ", "after_ctx": " ", "after_line": "var code _ gen _ model = new model ( ) ;", "predictions": ["var code _ gen _ model = if type <@> <@> if code <+> = if type ;"]}, {"before_ctx": " ", "before_line": " var level = result . where ( e = > e . name = = STR ) . single ( ) ; ", "after_ctx": " <%> <*> where -> single </%> <%> <-> ) . single ( </%>", "after_line": "var level = result . single ( e = > e . name = = STR ) ;", "predictions": ["var level = result . single ( filter query <@> </%> . sql , , <%> ) _ name _ _ STR ) ) </@>"]}, {"before_ctx": "<%> <*> where -> single </%> <%> <-> ) . single ( </%> ", "before_line": " var level = level . one _ to _ many _ optional . where ( e = > e . name = = STR ) . single ( ) ; ", "after_ctx": " ", "after_line": "var level = level . one _ to _ many _ optional . single ( e = > e . name = = STR ) ;", "predictions": ["var level = level . one _ to <%> many <%> = ) <%>"]}, {"before_ctx": " ", "before_line": " var level = result . where ( e = > e . name = = STR ) . single ( ) ; ", "after_ctx": " <%> <*> where -> single </%> <%> <-> ) . single ( </%>", "after_line": "var level = result . single ( e = > e . name = = STR ) ;", "predictions": ["var level = result . single ( e = > filter _ > _ sql ( _ STR _ _ STR ) = _ STR ) _ STR ) _ STR ) _ STR ) ) </@> _ STR _ <%> ) </@> ;"]}, {"before_ctx": "<%> <*> where -> single </%> <%> <-> ) . single ( </%> ", "before_line": " var level = level . one _ to _ many _ optional . where ( e = > e . name = = STR ) . single ( ) ; ", "after_ctx": " ", "after_line": "var level = level . one _ to _ many _ optional . single ( e = > e . name = = STR ) ;", "predictions": ["var level = level . one _ to _ many _ optional _ </@> type nullable _ STR <%> _ STR = _ STR <%> _ STR = _ STR if </%> date _ STR date _ STR date _ STR date _ STR = . . ,"]}, {"before_ctx": "<%> <-> assert . equal ( min . test _ nullable _ date _ time _ offset , result . test _ nullable _ date _ time _ offset ) ; assert . equal ( min . test _ nullable _ time _ span , result . test _ nullable _ time _ span ) ; </%> ", "before_line": " conditional _ fact _ skip _ issue _ cannot _ eval _ max ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ cannot _ eval _ var"]}, {"before_ctx": "<%> <-> assert . equal ( max . test _ nullable _ date _ time _ offset , result . test _ nullable _ date _ time _ offset ) ; assert . equal ( max . test _ nullable _ time _ span , result . test _ nullable _ time _ span ) ; </%> ", "before_line": " conditional _ fact _ skip _ issue _ cannot _ eval _ average ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ cannot _ cannot _ fact"]}, {"before_ctx": " ", "before_line": " if ( typeof ( string ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( string ) )", "predictions": ["if ( underlying _ type = = connection ( connection <-> _ type , offset <-> <-> = underlying _ type <-> <-> underlying _ type <-> <-> )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( int ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( int ) )", "predictions": ["if ( typeof ( int ) = _ factory . factory . code )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( int ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( int ) )", "predictions": ["if ( typeof ( int ) = = underlying _ type )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( double ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( double ) )", "predictions": ["if ( typeof ( underlying _ type = = ( underlying _ type ) )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( decimal ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( decimal ) )", "predictions": ["if ( underlying _ type = = double )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( date _ time ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( date _ time ) )", "predictions": ["if ( typeof ( date _ time ) = = underlying _ type )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( date _ time _ offset ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( date _ time _ offset ) )", "predictions": ["if ( typeof ( date _ time query factory ) query _ , ) query _ false ) query _ false ) query _ , ) query _ , ) query query ) query _ factory ) query ) query , ( ( : : ; > > > > >"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( single ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( single ) )", "predictions": ["if ( typeof ( single ) = = underlying _ type )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( boolean ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( boolean ) )", "predictions": ["if ( underlying _ type = = ( if ) )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( byte ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( byte ) )", "predictions": ["if ( underlying _ type = = byte _ type )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( u _ int ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( u _ int ) )", "predictions": ["if ( typeof ( u _ int ) = = underlying _ type )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( u _ int ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( u _ int ) )", "predictions": ["if ( typeof ( u _ int ) = = underlying _ type )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( int ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( int ) )", "predictions": ["if ( typeof ( int ) = = underlying _ type )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( u _ int ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( u _ int ) )", "predictions": ["if ( typeof ( u _ int ) = = underlying _ type )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( char ) = = underlying _ type ) ", "after_ctx": " <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%>", "after_line": "if ( underlying _ type = = typeof ( char ) )", "predictions": ["if ( typeof ( char ) = = underlying _ type )"]}, {"before_ctx": "<%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> <%> <+> underlying _ type = = </%> <%> <-> = = underlying _ type </%> ", "before_line": " if ( typeof ( s _ byte ) = = underlying _ type ) ", "after_ctx": " ", "after_line": "if ( underlying _ type = = typeof ( s _ byte ) )", "predictions": ["if ( typeof ( s _ byte ) = = underlying _ type )"]}, {"before_ctx": "<%> <+> property . generate _ </%> <%> <-> generation . </%> <%> <-> = = property . value _ generation </%> ", "before_line": " | | typeof ( uint ) = = property . property _ type | | typeof ( ulong ) = = property . property _ type | | typeof ( ushort ) = = property . property _ type | | typeof ( sbyte ) = = property . property _ type ) ) ", "after_ctx": " ", "after_line": "| | property . property _ type = = typeof ( uint ) | | property . property _ type = = typeof ( ulong ) | | property . property _ type = = typeof ( ushort ) | | property . property _ type = = typeof ( sbyte ) ) )", "predictions": ["| | typeof ( uint ) = = property . property _ type | | typeof ( ulong ) = = property . _ </%> type type ( ushort <%> = = _ <-> . type type <+> sbyte = = _ _ <-> <%> type <+> <+> <%> = _ _ . type . <+> . <%> = _ _ <-> <%> type <+> <+> sbyte = = _ _ <-> . type ( sbyte <%> = = _ <-> . type <%> <+> sbyte </%> = _ _ <-> <%> <%> <+> sbyte <%> = _ _ ."]}, {"before_ctx": " ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <+> } } fact </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> fact _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <+> private </%> ", "before_line": " return date _ time . parse ( date , new system . globalization . culture _ info ( STR ) ) ; ", "after_ctx": " ", "after_line": "return date _ time . parse ( date , new culture _ info ( STR ) ) ;", "predictions": ["return date _ time . parse ( date , new culture _ <@> </%> > <%> <%> command <%> <%> <%> ) <%>"]}, {"before_ctx": "<%> <*> interception _ result ? data _ reader _ disposing ( -> interception _ result data _ reader _ disposing ( </%> ", "before_line": " interception _ result ? result ) ; ", "after_ctx": " ", "after_line": "interception _ result result ) ;", "predictions": ["interception _ result result ;"]}, {"before_ctx": " ", "before_line": " public interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) ", "after_ctx": " <%> <-> ? </%>", "after_line": "public interception _ result < db _ data _ reader > reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > result )", "predictions": ["public interception _ result ? reader _ executing ( db _ command command , command _ data _ ? data _ ? <%> </%> _ db transaction event db _ ? _ > db event db event < < ? _ ? _ > result event command event command _ <%> _ </%> )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " public interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) ", "after_ctx": " <%> <-> ? </%>", "after_line": "public interception _ result < object > scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > result )", "predictions": ["public interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , byte _ ? <%> ? ? ? ? ? ? ? ? ?"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " public interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) ", "after_ctx": " <%> <-> ? </%>", "after_line": "public interception _ result < int > non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > result )", "predictions": ["public interception _ result ? non _ query _ executing ( db _ command command <%> <%> = type <@> <%> = <@> _ event event _ event db db db db db db db db > command _ command reader ( > command ( > command _ </%> data < data _ event _ </@> <@> = if </@> _ if ) ) )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " public async task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result , ", "after_ctx": " ", "after_line": "public async task < interception _ result < int > > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > result ,", "predictions": ["public async task < interception _ result ? > non _ query _ executing _ , ( <@> _ reader reader data data _ < _ < <%> _ < ? </%> _ result data ? db ? db ? db ? db _ virtual db ? db ? db <%>"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result ? result ) ", "after_ctx": " ", "after_line": "interception _ result result )", "predictions": ["interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result < db _ transaction > ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "interception _ result < db _ transaction > result )", "predictions": ["interception _ result < db _ transaction > ? result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public virtual task < interception _ result < db _ transaction > ? > transaction _ starting _ async ( db _ connection connection , transaction _ starting _ event _ data event _ data , interception _ result < db _ transaction > ? result , ", "after_ctx": " ", "after_line": "public virtual task < interception _ result < db _ transaction > > transaction _ starting _ async ( db _ connection connection , transaction _ starting _ event _ data event _ data , interception _ result < db _ transaction > result ,", "predictions": ["public virtual task < interception _ result < db _ transaction > ? > transaction _ ( _ ( command _ <-> <-> ? </%> _ ) ? , ( command _ </%> event ? , typeof = typeof = typeof = type </%> = type , , ="]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "interception _ result result )", "predictions": ["interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "interception _ result result )", "predictions": ["interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> ", "before_line": " interception _ result ? result ) ", "after_ctx": " ", "after_line": "interception _ result result )", "predictions": ["interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result < db _ transaction > ? result ) ", "after_ctx": " <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "interception _ result < db _ transaction > result )", "predictions": ["interception _ result < db _ transaction > ? result )"]}, {"before_ctx": " ", "before_line": " public override interception _ result ? transaction _ committing ( db _ transaction transaction , transaction _ event _ data event _ data , interception _ result ? result ) ", "after_ctx": " <%> <-> new </%> <%> <+> . suppress </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result transaction _ committing ( db _ transaction transaction , transaction _ event _ data event _ data , interception _ result result )", "predictions": ["public override interception _ result ? transaction _ committing ( db _ transaction transaction , ? ? ? event _ data event _ < <%> _ result <%> <%> ) ) ) ) ) )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result < db _ transaction > ? result ) ", "after_ctx": " ", "after_line": "interception _ result < db _ transaction > result )", "predictions": ["interception _ result < db _ transaction > </%> </%> </%> </%> </%> ( <%> </%> ? <-> </%> ? <-> ? <-> result result result result result result"]}, {"before_ctx": " ", "before_line": " public override interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) ", "after_ctx": " <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < db _ data _ reader > reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > result )", "predictions": ["public override interception _ result ? reader _ executing ( db _ command command , command _ event _ data event _ data </%> </@> = </@> <-> _ _ )"]}, {"before_ctx": " ", "before_line": " public override interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) ", "after_ctx": " <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < object > scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > result )", "predictions": ["public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data <-> char = char ? <%> ) ) ) ) ) ) ) ( <@> _ <-> <-> command _ < _ , < > reader ( <+> = <-> <%> <@> = = </%> = interception = ) . ) . ) <@> <@> <@> <@> <@> <@> <@>"]}, {"before_ctx": " ", "before_line": " public override interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) ", "after_ctx": " <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < int > non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > result )", "predictions": ["public override interception _ result ? non _ query _ executing ( db _ command <+> <-> <+> = <@> = <+> <@> _ , command _ , command _ data command _ , command _ </%> typeof )"]}, {"before_ctx": " ", "before_line": " public override interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < db _ data _ reader > reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > result )", "predictions": ["public override interception _ result ? reader _ executing ( db _ command command , , , , interception _ db ? db _ </%> . command . command command . command _ </%> _ <-> int command . command _ </%> _ <-> int command . command int command ) ) )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public override task < interception _ result < db _ data _ reader > ? > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result , ", "after_ctx": " ", "after_line": "public override task < interception _ result < db _ data _ reader > > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > result ,", "predictions": ["public override task < interception _ result < db _ data _ reader > ? <-> _ <@> _ </@> ) <"]}, {"before_ctx": " ", "before_line": " public override interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < object > scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > result )", "predictions": ["public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data transaction ( ( <%> event <%> event ? > > > >"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public override task < interception _ result < object > ? > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result , ", "after_ctx": " ", "after_line": "public override task < interception _ result < object > > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object > result ,", "predictions": ["public override task < interception _ result ? > scalar _ executing _ async ( <@> _ reader reader data data _ <-> _ <%> <-> _ <%> data </%> _ command , event < event result <%> </%>"]}, {"before_ctx": " ", "before_line": " public override interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < int > non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > result )", "predictions": ["public override interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public override task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result , ", "after_ctx": " ", "after_line": "public override task < interception _ result < int > > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > result ,", "predictions": ["public override task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data <%> interception _ , connection </%> </%>"]}, {"before_ctx": " ", "before_line": " public override interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) ", "after_ctx": " <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < db _ data _ reader > reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > result )", "predictions": ["public override interception _ result ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result )"]}, {"before_ctx": " ", "before_line": " public override interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) ", "after_ctx": " <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < object > scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > result )", "predictions": ["public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )"]}, {"before_ctx": " ", "before_line": " public override interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) ", "after_ctx": " <%> <-> new </%> <%> <+> . suppress _ with _ result </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < int > non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > result )", "predictions": ["public override interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )"]}, {"before_ctx": " ", "before_line": " public override interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < db _ data _ reader > reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > result )", "predictions": ["public override interception _ result ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public override task < interception _ result < db _ data _ reader > ? > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result , ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override task < interception _ result < db _ data _ reader > > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > result ,", "predictions": ["public override task < interception _ result < db _ data _ reader > ? > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ result _ < db db _ < db _ result _ < db db <%> <->"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public override interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < object > scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > result )", "predictions": ["public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public override task < interception _ result < object > ? > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result , ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override task < interception _ result < object > > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object > result ,", "predictions": ["public override task < interception _ result ? > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object . object ,"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public override interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override interception _ result < int > non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > result )", "predictions": ["public override interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public override task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result , ", "after_ctx": " ", "after_line": "public override task < interception _ result < int > > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > result ,", "predictions": ["public override task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data <%> interception _ command ? command </%>"]}, {"before_ctx": " ", "before_line": " public virtual interception _ result < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual interception _ result < db _ data _ reader > reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > result )", "predictions": ["public virtual interception _ result ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public virtual interception _ result < object > ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual interception _ result < object > scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < object > result )", "predictions": ["public virtual interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public virtual interception _ result < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual interception _ result < int > non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > result )", "predictions": ["public virtual interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public virtual task < interception _ result < db _ data _ reader > ? > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > ? result , ", "after_ctx": " <%> <-> ? </%>", "after_line": "public virtual task < interception _ result < db _ data _ reader > > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ data _ reader > result ,", "predictions": ["public virtual task < interception _ result < db _ data _ reader > ? > reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ <%> _ reader > ? result <->"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " public virtual task < interception _ result < object > ? > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object > ? result , ", "after_ctx": " <%> <-> ? </%>", "after_line": "public virtual task < interception _ result < object > > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < object > result ,", "predictions": ["public virtual task < interception _ result ? > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < event db ? < object </%> ? <"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " public virtual task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result , ", "after_ctx": " ", "after_line": "public virtual task < interception _ result < int > > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < int > result ,", "predictions": ["public virtual task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data ? data _ result <%> ? result ? command <%> <%> <%>"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result ? result ) ", "after_ctx": " ", "after_line": "interception _ result result )", "predictions": ["interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result ? result ) ; ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "interception _ result result ) ;", "predictions": ["interception _ result result ) ;"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result ? result ) ; ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "interception _ result result ) ;", "predictions": ["interception _ result result ) ;"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> ", "before_line": " interception _ result ? result ) ; ", "after_ctx": " ", "after_line": "interception _ result result ) ;", "predictions": ["interception _ result result ) ;"]}, {"before_ctx": "<%> <*> public virtual interception _ result ? data _ reader _ disposing ( -> public virtual interception _ result data _ reader _ disposing ( </%> ", "before_line": " interception _ result ? result ) ", "after_ctx": " ", "after_line": "interception _ result result )", "predictions": ["interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result ? result ) ", "after_ctx": " <%> <-> ? </%>", "after_line": "interception _ result result )", "predictions": ["interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result ? result ) ", "after_ctx": " <%> <-> ? </%>", "after_line": "interception _ result result )", "predictions": ["interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result ? result ) ", "after_ctx": " ", "after_line": "interception _ result result )", "predictions": ["interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result < db _ transaction > ? result ) ", "after_ctx": " ", "after_line": "interception _ result < db _ transaction > result )", "predictions": ["interception _ result < db _ transaction > </%> </%> </%> </%> </%> </%> </%>"]}, {"before_ctx": " ", "before_line": " public override interception _ result ? connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result ) ", "after_ctx": " <%> <+> ! </%> <%> <*> = = null -> . is _ suppressed </%> <%> <-> new </%> <%> <+> . suppress </%> <%> <-> ? </%>", "after_line": "public override interception _ result connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result result )", "predictions": ["public override interception _ result ? connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result )"]}, {"before_ctx": " ", "before_line": " public virtual interception _ result ? connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual interception _ result connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result result )", "predictions": ["public virtual interception _ result ? connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public virtual task < interception _ result ? > connection _ opening _ async ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result , ", "after_ctx": " ", "after_line": "public virtual task < interception _ result > connection _ opening _ async ( db _ connection connection , connection _ event _ data event _ data , interception _ result result ,", "predictions": ["public virtual task < interception _ result ? > connection _ opening _ async ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? </%> <->"]}, {"before_ctx": " ", "before_line": " public virtual interception _ result ? connection _ closing ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual interception _ result connection _ closing ( db _ connection connection , connection _ event _ data event _ data , interception _ result result )", "predictions": ["public virtual interception _ result ? connection _ closing ( db _ connection connection , connection _ event _ data event _ data , interception _ result result )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public virtual task < interception _ result ? > connection _ closing _ async ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result ) ", "after_ctx": " ", "after_line": "public virtual task < interception _ result > connection _ closing _ async ( db _ connection connection , connection _ event _ data event _ data , interception _ result result )", "predictions": ["public virtual task < interception _ result <%> entity . model ) )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " interception _ result < db _ transaction > ? result ) ; ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "interception _ result < db _ transaction > result ) ;", "predictions": ["interception _ result < db _ transaction </%> </%> type ( </@> _ ) </%> ( ; ) <-> command ) ;"]}, {"before_ctx": "<%> <+> var reader _ open = false ; </%> ", "before_line": " using ( db _ command ) { result = db _ command . execute _ non _ query ( ) ; } ", "after_ctx": " <%> <-> using ( db _ command ) { </%> <%> <-> } </%>", "after_line": "result = db _ command . execute _ non _ query ( ) ;", "predictions": ["result = db _ command . execute _ cancellation _ false ( ) logger ;"]}, {"before_ctx": "<%> <-> using ( db _ command ) { </%> <%> <-> } </%> ", "before_line": " using ( db _ command ) { result = db _ command . execute _ scalar ( ) ; } ", "after_ctx": " <%> <-> try { </%>", "after_line": "result = db _ command . execute _ scalar ( ) ;", "predictions": ["result = db _ command . execute _ scalar ? connection <-> microsoft <->"]}, {"before_ctx": "<%> <+> var reader _ open = false ; </%> ", "before_line": " using ( db _ command ) { result = await db _ command . execute _ non _ query _ async ( cancellation _ token ) ; } ", "after_ctx": " <%> <-> using ( db _ command ) { </%> <%> <-> } </%>", "after_line": "result = await db _ command . execute _ non _ query _ async ( cancellation _ token ) ;", "predictions": ["result = await db _ command . [ _ non _ query _ STR . cancellation </%> ;"]}, {"before_ctx": "<%> <-> using ( db _ command ) { </%> <%> <-> } </%> ", "before_line": " using ( db _ command ) { result = await db _ command . execute _ scalar _ async ( cancellation _ token ) ; } ", "after_ctx": " <%> <-> try { </%>", "after_line": "result = await db _ command . execute _ scalar _ async ( cancellation _ token ) ;", "predictions": ["result = await db _ command . non _ query _ <@> ( await _ non ) } ;"]}, {"before_ctx": "<%> <*> where [ g ] . [ full _ name ] = [ w ] . [ owner _ full _ name ] order by [ w ] . [ id ] ) = cast ( 1 as bit ) ) STR -> where ( [ g ] . [ full _ name ] = [ w ] . [ owner _ full _ name ] ) and [ w ] . [ owner _ full _ name ] is not null </%> <%> <+> order by [ w ] . [ id ] ) = cast ( 1 as bit ) ) STR </%> ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) ) and ( coalesce ( ( ", "after_ctx": " <%> <*> * -> [ id ] , [ w ] . [ ammunition _ type ] , [ w ] . [ is _ automatic ] , [ w ] . [ name ] , [ w ] . [ owner _ full _ name ] , [ w ] . [ synergy _ with _ id ] </%> <%> <+> ( </%> <%> <+> ) and [ w ] . [ owner _ full _ name ] is not null </%> <%> <*> order by [ t ] . [ id ] ) , cast ( 0 as bit ) ) = cast ( 1 as bit ) ) ) STR -> order by [ t ] . [ id ] ) = cast ( 1 as bit ) ) ) STR </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and ( ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) ) and ( (", "predictions": ["where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) = > and [ g ] . [ has _ soul _ patch ] = not null"]}, {"before_ctx": "<%> <+> ( </%> <%> <+> ) and [ w ] . [ owner _ full _ name ] is not null </%> <%> <*> order by [ t ] . [ id ] ) , cast ( 0 as bit ) ) = cast ( 1 as bit ) ) ) STR -> order by [ t ] . [ id ] ) = cast ( 1 as bit ) ) ) STR </%> ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) ) and ( ( ", "after_ctx": " <%> <*> * -> [ id ] , [ w ] . [ ammunition _ type ] , [ w ] . [ is _ automatic ] , [ w ] . [ name ] , [ w ] . [ owner _ full _ name ] , [ w ] . [ synergy _ with _ id ] </%> <%> <+> ( </%> <%> <+> ) and [ w ] . [ owner _ full _ name ] is not null </%> <%> <*> order by [ t ] . [ id ] ) = cast ( 1 as bit ) ) ) STR -> order by [ t ] . [ id ] ) = cast ( 1 as bit ) ) ) STR </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and ( ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) ) and ( (", "predictions": ["where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <+> ) . order _ by ( w = > w . id </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <+> ) . order _ by ( w = > w . id </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <+> ts = > ts . where ( t = > ! ( t . gear . has _ soul _ patch ? true : t . gear . has _ soul _ patch ) ) , ts = > ts . where ( t = > ! ( maybe _ scalar < bool > ( t . gear , ( ) = > t . gear . has _ soul _ patch ) = = true ? ( bool? ) true </%> <%> <*> ts = > ts . where ( t = -> : maybe _ scalar < bool </%> <%> <-> ! </%> <%> <*> . has _ soul _ patch ? true : -> , ( ) = > </%> <%> <+> ) = = true </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ order _ by _ order _ by _ should _ ignore _ inner _ ordering ", "after_ctx": " <%> <*> cs -> cs . where ( c = > c . customer _ id . starts _ with ( STR ) ) </%> <%> <+> . then _ by ( c = > c . city ) </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ order . _ _ not _ <+> _ </@> _ <@>"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> <%> <*> . select ( cv = > cv . orders . where ( cc = > true ) . to _ list ( ) ) ) ; -> . order _ by ( c = > c . customer _ id ) </%> <%> <+> . select ( cv = > cv . orders . where ( cc = > true ) . to _ list ( ) ) , assert _ order : true , element _ asserter : collection _ asserter < order > ( ) , entry _ count : NUM ) ; </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> e = > e . c . customer _ id ) ; </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <*> new relational _ connection _ dependencies ( options , -> new relational _ connection _ dependencies ( </%> <%> <-> new diagnostics _ logger < logger _ category . database . transaction > ( </%> <%> <+> options , </%> <%> <*> intercepting -> diagnostics </%> ", "before_line": " new logging _ options ( ) ) , new diagnostic _ listener ( STR ) ) , new diagnostics _ logger < logger _ category . database . connection > ( new intercepting _ logger < logger _ category . database . connection > ( ", "after_ctx": " <%> <-> ) </%>", "after_line": "new logging _ options ( ) , new diagnostic _ listener ( STR ) ) , new diagnostics _ logger < logger _ category . database . connection > (", "predictions": ["new logging _ options ( ) , ) , ) , . diagnostics _ > true . </%> ( . -> _ > as . [ cast ( . connection [ . as . connection ["]}, {"before_ctx": "<%> <*> new -> ( </%> <%> <-> ( </%> <%> <*> ; -> test _ logger . diagnostic _ source ; </%> ", "before_line": " args [ 0 ] = activator . create _ instance ( typeof ( diagnostics _ logger < > ) . make _ generic _ type ( category ) , test _ logger , test _ diagnostics ) ; ", "after_ctx": " ", "after_line": "args [ 0 ] = test _ logger ;", "predictions": ["args [ 0 ] = activator . should _ instance . not . instance <%> typeof key key = test ( test ) > <%> _ logger > > = <%> _ logger > > > = <%> [ <%> , . make [ </%> [ </%> ) . where [ <+> [ null ] . , ] . where [ as [ ] ) . where ] . where [ category = , </%> [ name < ) . where [ </%> [ null ] . category = , , , , </%> [ </%> ) . where ["]}, {"before_ctx": "<%> <-> internal </%> <%> <+> internal </%> ", "before_line": " internal protected virtual void generate _ sequence _ presence _ check ( schema _ qualified _ name sequence _ name , bool negative ) ", "after_ctx": " ", "after_line": "protected internal virtual void generate _ sequence _ presence _ check ( schema _ qualified _ name sequence _ name , bool negative )", "predictions": ["protected internal virtual void generate _ sequence _ result _ <@> <-> public public . execute _ </%> command _ <*> , database negative </%> </%> {"]}, {"before_ctx": "<%> <-> using system ; </%> ", "before_line": " using system _ text ; namespace microsoft _ data _ entity ", "after_ctx": " ", "after_line": "namespace system _ text", "predictions": ["namespace microsoft _ data _ entity"]}, {"before_ctx": " ", "before_line": " using metadata = microsoft . data . entity . metadata ; ", "after_ctx": " <%> <*> system -> foreign </%> <%> <*> collections -> key = microsoft . data . relational . model . foreign </%> <%> <*> generic -> key </%> <%> <-> metadata . </%>", "after_line": "using microsoft _ data _ entity _ metadata ;", "predictions": ["using metadata = microsoft . data . async _ </%> ."]}, {"before_ctx": "<%> <-> metadata = </%> <%> <*> . -> _ </%> <%> <*> . -> _ </%> <%> <*> . -> _ </%> <%> <*> system -> foreign </%> <%> <*> collections -> key = microsoft . data . relational . model . foreign </%> <%> <*> generic -> key </%> ", "before_line": " public virtual database build ( [ not _ null ] metadata . i _ model model ) ", "after_ctx": " ", "after_line": "public virtual database build ( [ not _ null ] i _ model model )", "predictions": ["public virtual database build ( i _ <%> <%> ) ) c c c ] c )"]}, {"before_ctx": " ", "before_line": " private static void build _ table ( database database , metadata . i _ entity _ type entity _ type ) ", "after_ctx": " <%> <-> metadata . </%>", "after_line": "private static void build _ table ( database database , i _ entity _ type entity _ type )", "predictions": ["private static void build _ table ( <%> <%> ( i _ metadata _ type <%> _ <%> data"]}, {"before_ctx": "<%> <-> metadata . </%> ", "before_line": " private static void build _ column ( table table , metadata . i _ property property ) ", "after_ctx": " <%> <-> metadata . </%>", "after_line": "private static void build _ column ( table table , i _ property property )", "predictions": ["private static void build _ column ( ) ) , i <-> ( i </%> <-> = key using = <-> <%> > model key key key key key"]}, {"before_ctx": "<%> <-> metadata . </%> ", "before_line": " private static void build _ primary _ key ( database database , metadata . i _ key primary _ key ) ", "after_ctx": " <%> <-> metadata . </%>", "after_line": "private static void build _ primary _ key ( database database , i _ key primary _ key )", "predictions": ["private static void build _ primary _ <%> <+> )"]}, {"before_ctx": "<%> <-> metadata . </%> ", "before_line": " private static void build _ foreign _ key ( database database , metadata . i _ foreign _ key foreign _ key ) ", "after_ctx": " ", "after_line": "private static void build _ foreign _ key ( database database , i _ foreign _ key foreign _ key )", "predictions": ["private static void build _ foreign _ <%> ( database database _ ( <-> , collections _ ( ) ( c </%> . new <-> _ ( ( new ( void _ ) </%> _ ) </%> _ . ) ) )"]}, {"before_ctx": " ", "before_line": " using metadata = microsoft . data . entity . metadata ; ", "after_ctx": " <%> <-> using microsoft _ data _ relational ; </%>", "after_line": "using microsoft _ data _ entity _ metadata ;", "predictions": ["using metadata ;"]}, {"before_ctx": " ", "before_line": " using metadata = microsoft . data . entity . metadata ; ", "after_ctx": " <%> <-> using microsoft _ data _ relational ; </%>", "after_line": "using microsoft _ data _ entity _ metadata ;", "predictions": ["using metadata ;"]}, {"before_ctx": " ", "before_line": " private static metadata . i _ model create _ model ( ) ", "after_ctx": " <%> <+> entity . </%> <%> <-> metadata . </%> <%> <-> metadata . </%> <%> <-> metadata . </%> <%> <*> api -> metadata </%>", "after_line": "private static i _ model create _ model ( )", "predictions": ["private static i _ model create _ model ( )"]}, {"before_ctx": " ", "before_line": " = > new bad _ data _ relational _ data _ reader ( base . execute _ reader ( connection , parameter _ values ) , values ) ; ", "after_ctx": " <%> <*> private readonly relational _ data _ reader relational _ data _ reader ; private readonly bad _ data _ data _ reader data _ reader ; public bad _ data _ relational _ data _ reader ( relational _ data _ reader relational _ data _ reader , object [ ] values ) -> public bad _ data _ relational _ data _ reader ( object [ ] values ) </%> <%> <+> : base ( new bad _ data _ data _ reader ( values ) ) </%> <%> <-> relational _ data _ reader = relational _ data _ reader ; data _ reader = new bad _ data _ data _ reader ( values ) ; </%>", "after_line": "= > new bad _ data _ relational _ data _ reader ( values ) ;", "predictions": ["= > new bad _ data _ relational _ data _ reader ( base . execute _ reader ( connection , parameter _ values ) , values ) ;"]}, {"before_ctx": " ", "before_line": " statement _ executor . execute _ non _ query ( connection . db _ connection , connection . db _ transaction , create _ schema _ commands ( model ) ) ; ", "after_ctx": " <%> <-> connection . db _ </%>", "after_line": "statement _ executor . execute _ non _ query ( connection , connection . db _ transaction , create _ schema _ commands ( model ) ) ;", "predictions": ["statement _ executor . execute _ non _ query ( connection . db _ connection , connection entry ! entity _ value ;"]}, {"before_ctx": "<%> <-> connection . db _ </%> ", "before_line": " return ( int ) statement _ executor . execute _ scalar ( connection . db _ connection , connection . db _ transaction , create _ has _ tables _ command ( ) ) ! = 0 ; ", "after_ctx": " <%> <-> connection . db _ </%>", "after_line": "return ( int ) statement _ executor . execute _ scalar ( connection , connection . db _ transaction , create _ has _ tables _ command ( ) ) ! = 0 ;", "predictions": ["return ( int ) statement _ executor . execute _ </@> ( = ( db _ = item , ) ( db int int _ <+> ; db _ span _ <*> _ abstract get _ ) string ? : : <%> <%>"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <+> conditional _ theory </%> ", "before_line": " using ( var transaction = context . database . begin _ transaction ( ) ) ", "after_ctx": " ", "after_line": "using ( context . database . begin _ transaction ( ) )", "predictions": ["using ( context . database . <@> data ;"]}, {"before_ctx": " ", "before_line": " public virtual void propagate _ value ( internal _ entity _ entry entry , i _ property property ) ", "after_ctx": " <%> <*> if ( ! try _ propagate _ value ( entry , property ) -> var principal _ entry = try _ propagate _ value ( entry , property ) ; </%> <%> <+> if ( principal _ entry = = null </%>", "after_line": "public virtual internal _ entity _ entry propagate _ value ( internal _ entity _ entry entry , i _ property property )", "predictions": ["public virtual internal _ entity _ entry propagate _ value > > > > > >"]}, {"before_ctx": "<%> <+> return principal _ entry ; </%> ", "before_line": " private static bool try _ propagate _ value ( internal _ entity _ entry entry , i _ property property ) ", "after_ctx": " ", "after_line": "private static internal _ entity _ entry try _ propagate _ value ( internal _ entity _ entry entry , i _ property property )", "predictions": ["private static bool try _ propagate _ value ( internal _ get _ . . . . info )"]}, {"before_ctx": " ", "before_line": " void propagate _ value ( [ not _ null ] internal _ entity _ entry entry , [ not _ null ] i _ property property ) ; ", "after_ctx": " <%> <*> task -> task < internal _ entity _ entry > </%>", "after_line": "internal _ entity _ entry propagate _ value ( [ not _ null ] internal _ entity _ entry entry , [ not _ null ] i _ property property ) ;", "predictions": ["void propagate _ value ( [ not _ null ] , ( = = = = = ; = > </@> _ property property <%> > <*> _ assert _ < <+> <+> _ assert _ query , </@> item <%> <%> <%> > operation </%> </%> ) operation _ type <-> </%> </%> operation operation _ equal <-> operation operation _ equal <-> operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation operation ( ( not _ new not ( not _ type _ sql sql , , _ not type"]}, {"before_ctx": " ", "before_line": " public virtual void propagate ( internal _ entity _ entry entry ) ", "after_ctx": " <%> <+> internal _ entity _ entry chosen _ principal = null ; </%> <%> <*> key _ propagator . propagate _ value ( entry , property ) ; -> var principal _ entry = key _ propagator . propagate _ value ( entry , property ) ; </%> <%> <+> if ( chosen _ principal = = null ) { chosen _ principal = principal _ entry ; } </%>", "after_line": "public virtual internal _ entity _ entry propagate ( internal _ entity _ entry entry )", "predictions": ["public virtual void propagate ( internal _ entity _ entry ( int ( = ( = = _ sql _ sql sql server server _ operation ) ) )"]}, {"before_ctx": " ", "before_line": " = > is _ db _ null ( ordinal ) ? get _ null < time _ span > ( ) : time _ span . parse ( get _ string ( ordinal ) ) ; ", "after_ctx": " <%> <*> public abstract long get _ int ( int ordinal ) ; public abstract string get _ string ( int ordinal ) ; -> public virtual long get _ int ( int ordinal ) </%> <%> <+> = > is _ db _ null ( ordinal ) ? throw new invalid _ cast _ exception ( ) : get _ int _ core ( ordinal ) ; </%>", "after_line": "= > time _ span . parse ( get _ string ( ordinal ) ) ;", "predictions": ["= > is _ db _ null ( ordinal ) ;"]}, {"before_ctx": "<%> <+> fact </%> ", "before_line": " assert . equal ( NUM , result . count ( ) ) ; ", "after_ctx": " ", "after_line": "assert . equal ( NUM , result . count ) ;", "predictions": ["assert . equal ( NUM , result skip skip ) entry . assembly . . </@> . </@> ) ( ) ( </@> ) entity ;"]}, {"before_ctx": "<%> <-> . full _ name </%> ", "before_line": " typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly . full _ name , ", "after_ctx": " <%> <-> . full _ name </%>", "after_line": "typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly ,", "predictions": ["typeof ( startup _ invoker _ test ) . get _ non _ ; entity entity entry . connection _ property <%>"]}, {"before_ctx": "<%> <-> . full _ name </%> ", "before_line": " typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly . full _ name , ", "after_ctx": " <%> <-> . full _ name </%>", "after_line": "typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly ,", "predictions": ["typeof ( startup _ invoker _ test ) . get . private _ create _ non _ ; entity ( ) . ;"]}, {"before_ctx": "<%> <-> . full _ name </%> ", "before_line": " typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly . full _ name , ", "after_ctx": " <%> <-> . full _ name </%>", "after_line": "typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly ,", "predictions": ["typeof ( startup _ invoker _ test ) . get _ type . info <-> _ </@> <->"]}, {"before_ctx": "<%> <-> . full _ name </%> ", "before_line": " typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly . full _ name , ", "after_ctx": " <%> <-> . full _ name </%>", "after_line": "typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly ,", "predictions": ["typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . </@> <%> _ ] task"]}, {"before_ctx": "<%> <-> . full _ name </%> ", "before_line": " typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly . full _ name , ", "after_ctx": " ", "after_line": "typeof ( startup _ invoker _ test ) . get _ type _ info ( ) . assembly ,", "predictions": ["typeof ( startup _ invoker _ test ) . get _ type _ info full name . ( . <-> _ ) ,"]}, {"before_ctx": "<%> <-> new sql _ server _ migration _ operation _ sql _ generator ( new sql _ server _ type _ mapper ( ) ) . </%> <%> <-> var sql _ generator = new sql _ server _ migration _ operation _ sql _ generator ( new sql _ server _ type _ mapper ( ) ) ; </%> ", "before_line": " assert . equal ( STR , sql _ generator . generate _ data _ type ( column ) ) ; ", "after_ctx": " <%> <-> new sql _ server _ migration _ operation _ sql _ generator ( new sql _ server _ type _ mapper ( ) ) . </%>", "after_line": "assert . equal ( STR , generate _ data _ type ( column ) ) ;", "predictions": ["assert . equal ( STR , sql _ generator . object _ false _ <%> > = <+> ( <+> ( entry ( entry ( entry ( ( ( entry ( ( ( ( ( ( ( entry ( ( ( entry ( ( ) _ : _ ; ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) . <+> _ : _ ; _ = reader ) ) ) ) ) ) ) ) _ : _ ; _ = reader ) ) ) ) )"]}, {"before_ctx": "<%> <*> int -> void </%> ", "before_line": " return assert _ results ( ", "after_ctx": " <%> <*> int -> void </%>", "after_line": "assert _ results (", "predictions": ["return assert _ results ("]}, {"before_ctx": "<%> <*> int -> void </%> ", "before_line": " return assert _ results ( ", "after_ctx": " <%> <*> int -> void </%>", "after_line": "assert _ results (", "predictions": ["return assert _ results ("]}, {"before_ctx": "<%> <*> int -> void </%> ", "before_line": " return assert _ results ( ", "after_ctx": " <%> <*> protected int assert _ query < t _ item > ( func < i _ queryable < t _ item > , i _ queryable < object > > query , bool assert _ order = false ) -> protected void assert _ query < t _ item > ( </%> <%> <+> func < i _ queryable < t _ item > , i _ queryable < object > > query , </%>", "after_line": "assert _ results (", "predictions": ["return assert _ results ("]}, {"before_ctx": "<%> <*> protected int assert _ query < t _ item > ( func < i _ queryable < t _ item > , i _ queryable < object > > query , bool assert _ order = false ) -> protected void assert _ query < t _ item > ( </%> <%> <+> func < i _ queryable < t _ item > , i _ queryable < object > > query , bool assert _ order = false , int state _ entry _ count = 0 ) </%> ", "before_line": " return assert _ results ( ", "after_ctx": " <%> <+> assert . equal ( state _ entry _ count , context . change _ tracker . entries ( ) . count ( ) ) ; </%> <%> <*> int -> void </%>", "after_line": "assert _ results (", "predictions": ["return assert _ results ("]}, {"before_ctx": "<%> <*> int -> void </%> ", "before_line": " return assert _ results ( ", "after_ctx": " <%> <*> int -> void </%>", "after_line": "assert _ results (", "predictions": ["return assert _ results ("]}, {"before_ctx": "<%> <*> int -> void </%> ", "before_line": " return assert _ results ( ", "after_ctx": " <%> <*> int -> void </%>", "after_line": "assert _ results (", "predictions": ["return assert _ results ("]}, {"before_ctx": "<%> <*> int -> void </%> ", "before_line": " return assert _ results ( ", "after_ctx": " <%> <*> int -> void </%>", "after_line": "assert _ results (", "predictions": ["return assert _ results ("]}, {"before_ctx": "<%> <*> int -> void </%> ", "before_line": " return assert _ results ( ", "after_ctx": " <%> <*> int -> void </%>", "after_line": "assert _ results (", "predictions": ["return assert _ results ("]}, {"before_ctx": "<%> <*> public virtual void ignore ( [ not _ null ] string name , configuration _ source configuration _ source = configuration _ source . explicit , bool run _ conventions = true ) -> public virtual void ignore ( [ not _ null ] string name , configuration _ source configuration _ source = configuration _ source . explicit ) </%> <%> <*> configuration _ source = configuration _ source . max ( existing _ ignored _ configuration _ source ) ; -> ignored _ members [ name ] = configuration _ source . max ( existing _ ignored _ configuration _ source ) ; </%> <%> <+> return ; </%> ", "before_line": " if ( run _ conventions ) { on _ type _ member _ ignored ( name ) ; } ", "after_ctx": " ", "after_line": "on _ type _ member _ ignored ( name ) ;", "predictions": ["on _ type _ member _ ignored ( name ) ;"]}, {"before_ctx": "<%> <-> , run _ conventions </%> <%> <-> , bool run _ conventions </%> ", "before_line": " if ( run _ conventions ) { return convention _ dispatcher . on _ entity _ type _ added ( entity _ type . builder ) ? . metadata ; } return entity _ type ; ", "after_ctx": " ", "after_line": "return convention _ dispatcher . on _ entity _ type _ added ( entity _ type . builder ) ? . metadata ;", "predictions": ["return convention _ dispatcher . on _ ) _ = _ <*> builder configuration _ < < </@> _ < configuration name configuration _ , > ;"]}, {"before_ctx": "<%> <*> configuration _ source configuration _ source , bool run _ conventions ) -> configuration _ source configuration _ source ) </%> <%> <*> run _ conventions = false ; -> ignored _ type _ names [ name ] = configuration _ source ; </%> <%> <+> return ; </%> ", "before_line": " if ( run _ conventions ) { convention _ dispatcher . on _ entity _ type _ ignored ( builder , name , type ) ; } ", "after_ctx": " ", "after_line": "convention _ dispatcher . on _ entity _ type _ ignored ( builder , name , type ) ;", "predictions": ["convention _ dispatcher . on _ name [ <-> [ ( from <%> builder ( </%> ( . ) ) ) type ) ( builder , , . . . . . async . async . name ) )"]}, {"before_ctx": " ", "before_line": " configuration _ source configuration _ source = configuration _ source . explicit , bool run _ conventions = true ) = > navigation ( property _ identity . create ( name ) , configuration _ source , run _ conventions , points _ to _ principal : true ) ; ", "after_ctx": " <%> <-> configuration _ source configuration _ source = configuration _ source . explicit , </%> <%> <*> bool run -> configuration _ source configuration </%> <%> <*> conventions -> source </%> <%> <*> true -> configuration _ source . explicit </%> <%> <-> , run _ conventions </%>", "after_line": "configuration _ source configuration _ source = configuration _ source . explicit ) = > navigation ( property _ identity . create ( name ) , configuration _ source , points _ to _ principal : true ) ;", "predictions": ["configuration _ source configuration _ source > > navigation tuple _ <@> </%> true _ </@> _ < : : _ </@> _ void : ( configuration run source run _ <*> <%> ) ;"]}, {"before_ctx": "<%> <-> configuration _ source configuration _ source = configuration _ source . explicit , </%> <%> <*> bool run -> configuration _ source configuration </%> <%> <*> conventions -> source </%> <%> <*> true -> configuration _ source . explicit </%> <%> <-> , run _ conventions </%> ", "before_line": " configuration _ source configuration _ source = configuration _ source . explicit , bool run _ conventions = true ) = > navigation ( property _ identity . create ( name ) , configuration _ source , run _ conventions , points _ to _ principal : false ) ; ", "after_ctx": " <%> <-> configuration _ source configuration _ source = configuration _ source . explicit , </%> <%> <*> bool run -> configuration _ source configuration </%> <%> <*> conventions -> source </%> <%> <*> true -> configuration _ source . explicit </%> <%> <-> , run _ conventions </%>", "after_line": "configuration _ source configuration _ source = configuration _ source . explicit ) = > navigation ( property _ identity . create ( name ) , configuration _ source , points _ to _ principal : false ) ;", "predictions": ["configuration _ source configuration _ source = configuration _ source . explicit , configuration _ source , run _ conventions , points _ to _ principal [ 0 <+> ) ]"]}, {"before_ctx": " ", "before_line": " if ( run _ conventions ) { model . convention _ dispatcher . on _ index _ removed ( builder , index ) ; } ", "after_ctx": " <%> <*> configuration _ source ? type _ configuration _ source = configuration _ source . explicit , bool run _ conventions = true ) -> configuration _ source ? type _ configuration _ source = configuration _ source . explicit ) </%>", "after_line": "model . convention _ dispatcher . on _ index _ removed ( builder , index ) ;", "predictions": ["model . convention _ dispatcher . item _ . _ list > ] , -> _ -> , } _ from ) ( builder _ entity , <-> , }"]}, {"before_ctx": "<%> <-> = > dependent _ entity _ type ( dependent _ entity _ type , configuration _ source , run _ conventions : true ) ; private internal _ relationship _ builder dependent _ entity _ type ( entity _ type dependent _ entity _ type , configuration _ source configuration _ source , bool run _ conventions ) </%> ", "before_line": " if ( run _ conventions ) { builder = model _ builder . metadata . convention _ dispatcher . on _ principal _ end _ set ( builder ) ; } ", "after_ctx": " <%> <-> , run _ conventions </%>", "after_line": "builder = model _ builder . metadata . convention _ dispatcher . on _ principal _ end _ set ( builder ) ;", "predictions": ["builder = model _ builder . metadata _ dispatcher ) { _ principal , </%> <%> ; ; ;"]}, {"before_ctx": "<%> <-> = > principal _ entity _ type ( principal _ entity _ type , configuration _ source , run _ conventions : true ) ; private internal _ relationship _ builder principal _ entity _ type ( entity _ type principal _ entity _ type , configuration _ source configuration _ source , bool run _ conventions ) </%> ", "before_line": " if ( run _ conventions ) { builder = model _ builder . metadata . convention _ dispatcher . on _ principal _ end _ set ( builder ) ; } ", "after_ctx": " <%> <-> , run _ conventions </%>", "after_line": "builder = model _ builder . metadata . convention _ dispatcher . on _ principal _ end _ set ( builder ) ;", "predictions": ["builder = model _ builder . metadata . convention _ dispatcher . on _ , _ name _ set </%> > ; ; ; ;"]}, {"before_ctx": " ", "before_line": " if ( run _ conventions ) { builder = model _ builder . metadata . convention _ dispatcher . on _ principal _ end _ set ( builder ) ; } ", "after_ctx": " <%> <*> dependent _ properties : reset _ dependent ? new property [ 0 ] : null , run _ conventions : run _ conventions ) ; -> dependent _ properties : reset _ dependent ? new property [ 0 ] : null ) ; </%>", "after_line": "builder = model _ builder . metadata . convention _ dispatcher . on _ principal _ end _ set ( builder ) ;", "predictions": ["builder = model _ builder . on ;"]}, {"before_ctx": " ", "before_line": " property . builder ? . attach ( this , property . get _ configuration _ source ( ) ) ; ", "after_ctx": " <%> <-> , detached _ key _ tuple . item </%>", "after_line": "property . builder ? . attach ( this ) ;", "predictions": ["property . builder ? . attach ( create index <*> . builder ( < < < < : this t <%> _ <*> ) ) configuration ) <%>"]}, {"before_ctx": "<%> <*> tuple < -> ( </%> <%> <*> , configuration _ source > -> ) </%> <%> <+> . metadata . get _ configuration _ source ( ) </%> ", "before_line": " list < tuple < internal _ index _ builder , configuration _ source > > detached _ indexes = null ; ", "after_ctx": " <%> <-> < tuple </%> <%> <-> , configuration _ source > </%> <%> <*> item -> metadata . get _ configuration _ source ( ) </%>", "after_line": "list < internal _ index _ builder > detached _ indexes = null ;", "predictions": ["list < internal _ index _ STR > and [ by NUM not * null * id * internal [ model = model _ index _ > bool = in <%> = in <%> _ <+> async builder async . -> _ > -> ) ( ) ( null _ indexes <@> null ( null _ indexes _ > -> <*> ) )"]}, {"before_ctx": "<%> <+> . metadata . get _ configuration _ source ( ) </%> <%> <-> < tuple </%> <%> <-> , configuration _ source > </%> ", "before_line": " detached _ indexes = new list < tuple < internal _ index _ builder , configuration _ source > > ( ) ; ", "after_ctx": " <%> <*> item -> metadata . get _ configuration _ source ( ) </%> <%> <-> list < tuple < string , configuration _ source > > ignored _ members = null ; foreach ( var ignored _ member in entity _ type . get _ ignored _ members ( ) . to _ list ( ) ) </%>", "after_line": "detached _ indexes = new list < internal _ index _ builder > ( ) ;", "predictions": ["detached _ indexes = new list > ( ) ; ; ; ; ;"]}, {"before_ctx": " ", "before_line": " private static tuple < internal _ index _ builder , configuration _ source > detach _ index ( index index _ to _ detach ) ", "after_ctx": " <%> <-> tuple . create ( </%> <%> <*> , removed _ configuration _ source . value ) ; -> ; </%>", "after_line": "private static internal _ index _ builder detach _ index ( index index _ to _ detach )", "predictions": ["private static tuple < internal _ t _ builder > <-> _ configuration )"]}, {"before_ctx": "<%> <-> tuple < </%> <%> <-> , configuration _ source > </%> ", "before_line": " return tuple . create ( index _ builder , removed _ configuration _ source . value ) ; ", "after_ctx": " ", "after_line": "return index _ builder ;", "predictions": ["return removed _ configuration _ source </@> </@> </@> </@> ) </@>"]}, {"before_ctx": " ", "before_line": " internal class tracking _ grouping < t _ key , t _ out , t _ in > : i _ async _ grouping < t _ key , t _ out > , i _ grouping < t _ key , t _ out > ", "after_ctx": " <%> <-> _ async </%> <%> <-> _ async </%>", "after_line": "internal class tracking _ grouping < t _ key , t _ out , t _ in > : i _ grouping < t _ key , t _ out >", "predictions": ["internal class tracking _ grouping < : _ key ) ] [ <*> _ <%> <*> <*> _ , _ </%> . ] . < e _ ) entity"]}, {"before_ctx": "<%> <-> _ async </%> <%> <*> return grouping . select -> foreach </%> <%> <+> var </%> <%> <*> = > -> in grouping ) </%> <%> <+> { for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) </%> <%> <*> for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) -> var entity = entity _ accessors [ i ] ( result as t _ in ) ; </%> <%> <+> if ( entity ! = null ) </%> ", "before_line": " var entity = entity _ accessors [ i ] ( result as t _ in ) ; if ( entity ! = null ) { query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ; } ", "after_ctx": " <%> <*> return result ; } ) ; -> } </%> <%> <+> yield return result ; } </%> <%> <-> _ enumerable ( ) . to </%>", "after_line": "query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;", "predictions": ["query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;"]}, {"before_ctx": "<%> <-> c = > </%> <%> <-> ( c </%> <%> <-> ) </%> ", "before_line": " builder . has _ key ( property _ names . to _ array ( ) ) . has _ name ( index . name ) ; ", "after_ctx": " ", "after_line": "builder . has _ key ( property _ names ) . has _ name ( index . name ) ;", "predictions": ["builder . has _ key ( property entity entity . to . out configuration source <*> source configuration configuration ; </%> </%> <%> <%> <%> ) ) ;"]}, {"before_ctx": "<%> <-> e </%> <%> <*> ( -> [ table ] as [ t ] on [ ] . [ id ] = [ t ] . [ id ] </%> <%> <-> select [ a ] . * from [ table ] as [ a ] where [ a ] . [ name ] is not null ) as [ t ] on [ e ] . [ id ] = [ t ] . [ id ] </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <+> ( </%> <%> <*> not in ( -> < > </%> <%> <*> , -> ) and ( [ c ] . [ customer _ id ] < > </%> <%> <-> t </%> ", "before_line": " ) as [ ] on [ t ] . [ customer _ id ] = [ ] . [ customer _ id ] where [ ] . [ order _ id ] > NUM group by [ ] . [ customer _ id ] STR ", "after_ctx": " ", "after_line": ") as [ t ] on [ ] . [ customer _ id ] = [ t ] . [ customer _ id ] where [ t ] . [ order _ id ] > NUM group by [ t ] . [ customer _ id ] STR", "predictions": [") as [ ] on [ <%> , entity _ , entity <@> _ , entity _ order type run _ configuration source </@> group . > NUM not ( ( _ ; source )"]}, {"before_ctx": "<%> <+> } </%> <%> <-> public virtual task group _ by _ property _ select _ average ( bool is _ async ) { return assert _ query _ scalar < order > ( is _ async , os = > os . group _ by ( o = > o . customer _ id ) . select ( g = > g . average ( o = > o . order _ id ) ) ) ; } conditional _ theory _ skip _ issue member _ data _ nameof _ is _ async _ data </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <*> conditional _ theory _ skip _ issue _ cannot _ eval _ group _ by . customer _ id , [ o ] . order _ id ) ' could not be translated and will be evaluated locally . ' STR -> conditional _ theory </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ group _ by . customer _ id , [ o ] . order _ id ) ' could not be translated and will be evaluated locally . ' STR ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ <@> _ debug _ find _ -> . _ ( ; ' _ property { index var translated )"]}, {"before_ctx": "<%> <*> conditional _ theory _ skip _ issue _ cannot _ eval _ group _ by . customer _ id , [ o ] . order _ id ) ' could not be translated and will be evaluated locally . ' STR -> conditional _ theory </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " = > visit ( apply _ explicit _ cast _ to _ bool _ in _ projection _ optimization ( apply _ optimizations ( projection , search _ condition : false ) ) ) ;     protected virtual expression apply _ explicit _ cast _ to _ bool _ in _ projection _ optimization ( expression expression ) = > expression ; ", "after_ctx": " <%> <-> _ boolean </%> <%> <*> constant -> int </%> <%> <*> boolean -> int </%> <%> <-> _ boolean </%> <%> <*> constant -> int </%> <%> <*> boolean -> int </%> <%> <*> ( binary _ expression . node -> left </%> <%> <*> type = -> int ! </%> <%> <*> expression _ type . equal -> null </%> <%> <*> left -> right </%> <%> <*> boolean _ constant -> int ! </%> <%> <*> = true -> null </%> <%> <*> right -> ( ( binary </%> <%> <*> boolean -> expression . node </%> <%> <*> constant -> type </%> <%> <*> true ) -> expression _ type . equal </%>", "after_line": "= > visit ( apply _ optimizations ( projection , search _ condition : false ) ) ;", "predictions": ["= > visit ( apply _ explicit _ { </@> _ readonly _ var _ if _ ] _ <-> . ] . = = = = = = <*> ) ) get buffer _ { = = = = <*> get _ readonly get _ readonly _ var _ ] _ <-> . = = = = = ) get > _ { = <*> get _ ] get _ readonly _ if _ ] _ <-> . = = = = = ) get > _ { = = <*> ) get buffer get buffer _ {"]}, {"before_ctx": " ", "before_line": " when [ w ] . [ is _ automatic ] = 0 then cast ( 1 as bit ) else cast ( 0 as bit ) ", "after_ctx": " <%> <+> cast ( </%> <%> <+> as bit ) </%>", "after_line": "when [ w ] . [ is _ automatic ] = cast ( 0 as bit ) then cast ( 1 as bit ) else cast ( 0 as bit )", "predictions": ["when [ w ] . [ is _ <@> id = ;"]}, {"before_ctx": " ", "before_line": " ) , 0 ) = 1 then cast ( 1 as bit ) else cast ( 0 as bit ) end = 1 then cast ( 1 as bit ) else cast ( 0 as bit ) end = 1 then cast ( 1 as bit ) else cast ( 0 as bit ) ", "after_ctx": " <%> <+> cast ( </%> <%> <+> as bit </%> <%> <+> ) </%>", "after_line": ") , cast ( 0 as bit ) ) = cast ( 1 as bit ) then cast ( 1 as bit ) else cast ( 0 as bit ) end = cast ( 1 as bit ) then cast ( 1 as bit ) else cast ( 0 as bit ) end = cast ( 1 as bit ) then cast ( 1 as bit ) else cast ( 0 as bit )", "predictions": [") , 0 ) = 1 then cast ( <%> ;"]}, {"before_ctx": "<%> <+> is _ </%> <%> <+> is _ </%> ", "before_line": " private string debugger _ display = > this . get _ primary _ key _ value ( ) + STR + entity _ state ; ", "after_ctx": " ", "after_line": "private string debugger _ display = > get _ primary _ key _ value ( ) + STR + entity _ state ;", "predictions": ["private string debugger _ display = > get _ primary _ [ _ value 0 , entity ( entity ( ! _ ! _ state ( ! = } ) ) + entity _ tree create expression ;"]}, {"before_ctx": "<%> <+> , customer _ key , customer _ type </%> ", "before_line": " assert . same ( fk , order _ type . remove _ foreign _ key ( fk . properties ) ) ; assert . null ( order _ type . remove _ foreign _ key ( fk . properties ) ) ; ", "after_ctx": " <%> <+> , customer _ key , customer _ type </%>", "after_line": "assert . same ( fk , order _ type . remove _ foreign _ key ( fk ) ) ; assert . null ( order _ type . remove _ foreign _ key ( fk ) ) ;", "predictions": ["assert . same ( fk , order _ type . ! _ foreign ( if if if > index ) index ) _ ; . _ ; . _ expression . ( ; tree > > <%> > <%> _ enumerator t _ foreign _ class < -> > > <%> > <%> _ enumerator t _ foreign _ enumerator < object > > <%> > <%> _ enumerator t _ foreign _ enumerator t > <%> <%> enumerable t async i _ enumerator t _ foreign _ class < -> > > <%> > <%> <%> enumerable t async"]}, {"before_ctx": " ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > order _ type . remove _ foreign _ key ( fk . properties ) ) . message ) ; ", "after_ctx": " <%> <-> . properties </%>", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > order _ type . remove _ foreign _ key ( fk ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation _ <-> skip ( ( ) model model _ </@> model = </@> model </%> . throws = -> _ ) expression ;"]}, {"before_ctx": "<%> <-> var model = foreign _ key . declaring _ entity _ type . model ; </%> ", "before_line": " var is _ principal _ key _ referenced = principal _ pk ! = null & & model . find _ referencing _ foreign _ keys ( principal _ pk ) . count ( ) > principal _ pk _ reference _ threshold ; ", "after_ctx": " <%> <*> model -> dependent _ pk </%> <%> <-> dependent _ pk </%>", "after_line": "var is _ principal _ key _ referenced = principal _ pk ! = null & & principal _ pk . find _ referencing _ foreign _ keys ( ) . count ( ) > principal _ pk _ reference _ threshold ;", "predictions": ["var is _ principal _ key _ referenced ;"]}, {"before_ctx": "<%> <-> var model = foreign _ key . declaring _ entity _ type . model ; </%> <%> <*> model -> principal _ pk </%> <%> <-> principal _ pk </%> ", "before_line": " var is _ dependent _ primary _ key _ referenced = dependent _ pk ! = null & & model . find _ referencing _ foreign _ keys ( dependent _ pk ) . any ( ) ; ", "after_ctx": " ", "after_line": "var is _ dependent _ primary _ key _ referenced = dependent _ pk ! = null & & dependent _ pk . find _ referencing _ foreign _ keys ( ) . any ( ) ;", "predictions": ["var is _ dependent _ primary _ key _ referenced expression expression expression expression create _ referencing _ foreign _ keys = expression ;"]}, {"before_ctx": "<%> <*> private class completed _ async _ enumerable < t > : i _ async _ enumerable < t > where t : class -> private sealed class completed _ async _ enumerable : i _ async _ enumerable < object [ ] > </%> <%> <*> t -> object [ ] </%> <%> <*> t -> object [ ] </%> <%> <*> t -> object [ ] </%> ", "before_line": " return new completed _ async _ enumerator < t > ( enumerable . get _ enumerator ( ) ) ; ", "after_ctx": " <%> <*> private class completed _ async _ enumerator < t > : i _ async _ enumerator < t > where t : class -> private sealed class completed _ async _ enumerator : i _ async _ enumerator < object [ ] > </%>", "after_line": "return new completed _ async _ enumerator ( enumerable . get _ enumerator ( ) ) ;", "predictions": ["return enumerable . get _ enumerator ( ) ; ; ; ; ; _ buffer _ enumerator -> ;"]}, {"before_ctx": " ", "before_line": " public virtual book _ detail order _ detail { get ; set ; } ", "after_ctx": " <%> <*> order -> book </%>", "after_line": "public virtual book _ detail book _ detail { get ; set ; }", "predictions": ["public virtual order _ detail order _ <%> = . , book . book . book . book . book"]}, {"before_ctx": "<%> <*> order -> book </%> ", "before_line": " public virtual useless _ book _ details useless _ order _ details { get ; set ; } ", "after_ctx": " ", "after_line": "public virtual useless _ book _ details useless _ book _ details { get ; set ; }", "predictions": ["public virtual useless _ book _ details useless . > , , , useless _ , _ ( , , as ( ( ; public _ ( model & <%> ; ) )"]}, {"before_ctx": " ", "before_line": " = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( join _ clause ) . visit _ expression ( join _ clause . outer _ key _ selector ) ) ; ", "after_ctx": " <%> <*> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( join _ clause ) . visit _ expression ( join _ clause . inner _ sequence ) ) ; -> = replace _ clause _ references ( join _ clause . inner _ sequence , join _ clause ) ; </%>", "after_line": "= replace _ clause _ references ( join _ clause . outer _ key _ selector , join _ clause ) ;", "predictions": ["= replace _ clause _ references ( create _ key _ group _ tree _ group _ group ( _ clause ) expression expression _ group ( _ clause ) expression ;"]}, {"before_ctx": "<%> <*> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( join _ clause ) . visit _ expression ( join _ clause . outer _ key _ selector ) ) ; -> = replace _ clause _ references ( join _ clause . outer _ key _ selector , join _ clause ) ; </%> ", "before_line": " = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( join _ clause ) . visit _ expression ( join _ clause . inner _ sequence ) ) ; ", "after_ctx": " ", "after_line": "= replace _ clause _ references ( join _ clause . inner _ sequence , join _ clause ) ;", "predictions": ["= replace _ clause _ references ( create _ querying _ group _ tree _ visitor ( _ clause ) expression enumerator _ class async > > > > > > 0 _ </%> . in _ sequence get _ querying _ </%> _ <+> _ if _ sequence ) get _ querying _ </%> _ <+> _ if _ sequence get _ if . . . empty get _ if . empty _ <+> . empty . empty _ </%> . empty _ </%> . empty _ </%> . empty _ </%> . empty _ </%> . empty _"]}, {"before_ctx": " ", "before_line": " = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( group _ join _ clause ) . visit _ expression ( group _ join _ clause . join _ clause . outer _ key _ selector ) ) ; ", "after_ctx": " <%> <*> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( group _ join _ clause . join _ clause ) . visit _ expression ( group _ join _ clause . join _ clause . inner _ sequence ) ) ; -> = replace _ clause _ references ( group _ join _ clause . join _ clause . inner _ sequence , group _ join _ clause . join _ clause ) ; </%>", "after_line": "= replace _ clause _ references ( group _ join _ clause . join _ clause . outer _ key _ selector , group _ join _ clause ) ;", "predictions": ["= replace _ clause _ references ( create _ querying _ get _ querying _ get _ if index index _ left _ null expression expression expression expression int ;"]}, {"before_ctx": "<%> <*> = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( group _ join _ clause ) . visit _ expression ( group _ join _ clause . join _ clause . outer _ key _ selector ) ) ; -> = replace _ clause _ references ( group _ join _ clause . join _ clause . outer _ key _ selector , group _ join _ clause ) ; </%> ", "before_line": " = replace _ clause _ references ( create _ querying _ expression _ tree _ visitor ( group _ join _ clause . join _ clause ) . visit _ expression ( group _ join _ clause . join _ clause . inner _ sequence ) ) ; ", "after_ctx": " ", "after_line": "= replace _ clause _ references ( group _ join _ clause . join _ clause . inner _ sequence , group _ join _ clause . join _ clause ) ;", "predictions": ["= replace _ clause _ references ( create _ enumerable _ enumerator _ i _ ( class _ async _ t _ properties <%> <%> _ properties <%> <%> _ . index <%> _ null expression expression expression expression expression ) int ( ( ( ( ( ( ( ( ( ( node _ null expression expression _ null expression expression expression expression expression expression expression expression ) expression . </%> _ expression _ <%> _ null expression expression expression ) expression expression _ expression expression expression expression . <-> _ expression expression expression expression ) int <-> _ expression"]}, {"before_ctx": "<%> <*> private value _ buffer values ; private readonly bool partial _ snapshot ; public original _ values ( value _ buffer values ) { values = values ; partial _ snapshot = false ; } -> private readonly i _ snapshot values ; </%> <%> <*> var entity _ type = entry . entity _ type ; var values = new object [ entity _ type . original _ value _ count ( ) ] ; foreach ( var property in entity _ type . get _ properties ( ) ) { var index = property . get _ original _ value _ index ( ) ; if ( index > = 0 ) { values [ index ] = entry [ property ] ; } } values = new value _ buffer ( values ) ; partial _ snapshot = true ; -> values = entry . entity _ type . get _ original _ values _ factory ( ) ( entry ) ; </%> ", "before_line": " if ( values . is _ empty ) ", "after_ctx": " <%> <-> if ( partial _ snapshot ) { </%> <%> <-> } return values [ property . get _ index ( ) ] ; </%>", "after_line": "if ( is _ empty )", "predictions": ["if ( is _ empty )"]}, {"before_ctx": "<%> <-> if ( partial _ snapshot ) { </%> <%> <-> } return values [ property . get _ index ( ) ] ; </%> ", "before_line": " debug . assert ( ! values . is _ empty ) ; var index = partial _ snapshot ? property . get _ original _ value _ index ( ) : property . get _ index ( ) ; ", "after_ctx": " <%> <-> values . </%>", "after_line": "debug . assert ( ! is _ empty ) ; var index = property . get _ original _ value _ index ( ) ;", "predictions": ["var index = partial _ snapshot ? property ) <%> { { property _ snapshot -> property . property . property . . get . get"]}, {"before_ctx": "<%> <*> debug . assert ( ! values . is _ empty ) ; var index = partial _ snapshot ? property . get _ original _ value _ index ( ) : property . get _ index ( ) ; -> debug . assert ( ! is _ empty ) ; </%> <%> <+> var index = property . get _ original _ value _ index ( ) ; </%> ", "before_line": " if ( values . is _ empty ) ", "after_ctx": " <%> <*> if ( partial -> foreach ( var property in entry . entity _ type . get </%> <%> <*> snapshot -> properties ( </%> <%> <+> ) </%> <%> <*> foreach ( var property in entry . entity _ type . get _ properties ( ) ) -> var index = property . get _ original _ value _ index ( ) ; </%> <%> <+> if ( index > = 0 ) </%> <%> <-> var index = property . get _ original _ value _ index ( ) ; </%>", "after_line": "if ( is _ empty )", "predictions": ["if ( is _ empty )"]}, {"before_ctx": "<%> <+> if ( index > = 0 ) </%> <%> <-> var index = property . get _ original _ value _ index ( ) ; if ( index > = 0 ) { </%> <%> <-> } } } else { foreach ( var property in entry . entity _ type . get _ properties ( ) ) { entry [ property ] = values [ property . get _ index ( ) ] ; </%> ", "before_line": " if ( values . is _ empty ) ", "after_ctx": " <%> <-> if ( partial _ snapshot ) { </%>", "after_line": "if ( is _ empty )", "predictions": ["if ( is _ empty )"]}, {"before_ctx": "<%> <-> , value _ buffer ? values </%> ", "before_line": " if ( values ! = null ) { entry . ensure _ original _ values ( values . value ) ; } else { entry . ensure _ original _ values ( ) ; } ", "after_ctx": " ", "after_line": "entry . ensure _ original _ values ( ) ;", "predictions": ["entry . ensure _ <%> _ values . ( ) </%> ) ) { assert . . . assert . original _ entity ) framework framework framework name ;"]}, {"before_ctx": "<%> <*> public relational _ query _ compilation _ context ( [ not _ null ] i _ model model ) : base ( check . not _ null ( model , STR ) ) -> private readonly i _ enumerable _ method _ provider enumerable _ method _ provider ; </%> <%> <+> private readonly i _ sql _ generating _ expression _ tree _ visitor _ factory sql _ generating _ expression _ tree _ visitor ; public relational _ query _ compilation _ context ( not _ null i _ model model , not _ null i _ linq _ operator _ provider linq _ operator _ provider , not _ null i _ result _ operator _ handler result _ operator _ handler , not _ null i _ enumerable _ method _ provider enumerable _ method _ provider ) : base ( check . not _ null ( model , STR ) , check . not _ null ( linq _ operator _ provider , STR ) , check . not _ null ( result _ operator _ handler , STR ) ) </%> <%> <+> check . not _ null ( enumerable _ method _ provider , STR ) ; enumerable _ method _ provider = enumerable _ method _ provider ; sql _ generating _ expression _ tree _ visitor = new sql _ generating _ expression _ tree _ visitor _ factory ( ) ; </%> ", "before_line": " return new relational _ query _ model _ visitor ( this , new enumerable _ method _ provider ( ) ) ; ", "after_ctx": " <%> <*> override -> virtual </%> <%> <*> result -> enumerable </%> <%> <*> operator -> method </%> <%> <*> handler result -> provider enumerable </%> <%> <*> operator -> method </%> <%> <*> handler -> provider </%> <%> <*> get { return new relational _ result _ operator _ handler ( base . result _ operator _ handler ) ; } -> get { return enumerable _ method _ provider ; } </%> <%> <+> } public virtual i _ sql _ generating _ expression _ tree _ visitor _ factory sql _ generating _ expression _ tree _ visitor { get { return sql _ generating _ expression _ tree _ visitor ; } </%>", "after_line": "return new relational _ query _ model _ visitor ( this ) ;", "predictions": ["return new relational _ query _ model _ visitor ( this ) ;"]}, {"before_ctx": "<%> <-> using microsoft _ framework _ logging ; </%> ", "before_line": " public class db _ set < t _ entity > : db _ set , i _ ordered _ queryable < t _ entity > , i _ async _ enumerable _ accessor < t _ entity > ", "after_ctx": " <%> <*> private readonly entity _ queryable < t _ entity > entity _ queryable ; -> private readonly db _ context context ; </%> <%> <+> private readonly lazy _ ref < entity _ queryable < t _ entity > > entity _ queryable ; </%> <%> <-> : base ( check . not _ null ( context , STR ) ) </%>", "after_line": "public class db _ set < t _ entity > : i _ ordered _ queryable < t _ entity > , i _ async _ enumerable _ accessor < t _ entity >", "predictions": ["public class db _ < </%> _ ( ) STR results _ context & <+> _ <-> _ )"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ orderby _ convert _ p _ nullable _ asc ", "after_ctx": " <%> <+> assert . equal ( core _ strings . translation _ failed ( STR ) , remove _ new _ lines ( ( await assert . throws _ async < invalid _ operation _ exception > ( </%> <%> <*> await -> ( ) = > </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ method _ invalid _ i _ enumerable _ ->"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ where _ ids _ contains _ new _ tuple _ item . order _ id , item = [ o ] . product _ id ) ) } ' STR ", "after_ctx": " <%> <+> assert . equal ( </%> <%> <*> await assert -> core </%> <%> <*> query < order -> strings . translation </%> <%> <*> detail > -> failed </%> <%> <*> is _ async -> STR ) </%> <%> <*> od = > od . where ( o = > ids . contains ( new tuple < int , int > ( o . order -> remove </%> <%> <*> id , o . product -> new </%> <%> <*> id ) ) ) , entry _ count : 1 ) ; -> lines ( </%> <%> <-> ids = new [ ] { tuple . create </%> <%> <*> 1 , 2 ) } ; await -> await assert . throws _ async < invalid _ operation _ exception > ( ( ) = > </%>", "after_line": "conditional _ theory", "predictions": ["conditional STR"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue _ cannot _ eval _ contains _ p ", "after_ctx": " <%> <*> var query -> assert . equal ( </%> <%> <+> STR , </%> <%> <*> = context -> assert </%> <%> <*> order -> throws < invalid </%> <%> <*> details . where -> operation _ exception > </%> <%> <-> o = > o . product _ id = = NUM ) . contains </%> <%> <+> ) = > </%> <%> <*> first -> where </%> <%> <-> o . order _ id = = NUM & & </%> <%> <-> ) ; </%> <%> <*> assert -> . contains ( context . order _ details . first ( o = > o . order _ id = = NUM & & o . product _ id = = NUM ) ) ) </%> <%> <*> true ( query -> message </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ <%> _ ( <%> )"]}, {"before_ctx": "<%> <-> public virtual void last _ without _ order _ by _ issues _ client _ eval _ warning ( ) { using ( var context = create _ context ( ) ) { assert . equal ( core _ strings . warning _ as _ error _ template ( relational _ event _ id . query _ client _ evaluation _ warning , relational _ resources . log _ client _ eval _ warning ( new test _ logger < test _ relational _ logging _ definitions > ( ) ) . generate _ message ( STR ) , STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . last ( ) ) . message ) ; } } conditional _ fact public virtual void last _ with _ order _ by _ issues _ client _ eval _ warning _ in _ subquery ( ) { using ( var context = create _ context ( ) ) { assert . equal ( core _ strings . warning _ as _ error _ template ( relational _ event _ id . query _ client _ evaluation _ warning , relational _ resources . log _ client _ eval _ warning ( new test _ logger < test _ relational _ logging _ definitions > ( ) ) . generate _ message ( STR ) , STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . where ( c = > c . customer _ id = = STR & & c . orders . order _ by ( o = > o . order _ id ) . last ( ) . order _ id > NUM ) . to _ list ( ) ) . message ) ; } } conditional _ fact public virtual void last _ or _ default _ without _ order _ by _ issues _ client _ eval _ warning ( ) { using ( var context = create _ context ( ) ) { assert . equal ( core _ strings . warning _ as _ error _ template ( relational _ event _ id . query _ client _ evaluation _ warning , relational _ resources . log _ client _ eval _ warning ( new test _ logger < test _ relational _ logging _ definitions > ( ) ) . generate _ message ( STR ) , STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . last _ or _ default ( ) ) . message ) ; } } conditional _ fact _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["assert . equal ( core context = create _ context ( ) ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> var results = ( from c in context . customers -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > ( from c in context . customers </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue _ cannot _ eval _ where . is _ london ' STR ", "after_ctx": " <%> <*> var customers -> assert . equal ( core _ strings . translation _ failed ( STR ) , </%> <%> <+> ( await assert . throws _ async < invalid _ operation _ exception > ( ( ) </%> <%> <*> await -> > </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ is _ equal )"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ first </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ first ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ <%> _ skip"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ first ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ first </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ ( )"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ first </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ first ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ cannot _ . )"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue _ cannot _ eval _ where _ from _ order _ in _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ northwind _ order ) where ? = ( property ( [ c ] , \\ STR ) ] ", "after_ctx": " <%> <*> var customers -> assert . equal ( core _ strings . translation _ failed ( STR ) , remove _ new _ lines ( </%> <%> <+> assert . throws < invalid _ operation _ exception > ( ( ) </%> <%> <+> > </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ list . list . operation _ </@> _ eval _ from _ <+> _ order _ ( _ value _ microsoft _ order _ order entity entity entity entity entity entity _ </@> _ </@> _ type _ </@> _ </@> _ </@> _ </@> _ </@> _ </@> _ type _ </@> _ type _ </@> _ f _ microsoft _ order entity entity entity entity . type _ </@> _ type _ </@> _ type _ </@> _ type entity entity entity . type _ </@> _ type entity _ </@> _ </@> _"]}, {"before_ctx": "<%> <+> ( </%> <%> <+> ) </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> core _ strings . warning _ as _ error _ template ( relational _ event _ id . query _ client _ evaluation _ warning , relational _ resources . log _ client _ eval _ warning ( new test _ logger < test _ relational _ logging _ definitions > ( ) ) . generate _ message ( STR ) , STR ) , -> core _ strings . translation _ failed ( STR ) , </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue _ cannot _ eval _ where _ client _ method ) ' STR ", "after_ctx": " <%> <*> assert . equal ( NUM , context . products . to _ list ( ) . count ) ; -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > context . products . to _ list ( ) ) . message ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ cannot _ eval _ new _ client . method . STR _ ; ' STR STR"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue _ cannot _ eval _ where _ client _ method ) ' STR ", "after_ctx": " <%> <*> var results = context . products . include ( p = > p . order _ details ) . to _ list ( ) ; assert . equal ( NUM , results . count ) ; assert . true ( results . all ( p = > ! p . order _ details . any ( ) | | p . order _ details . all ( od = > od . quantity > NUM ) ) ) ; -> assert . equal ( </%> <%> <+> core _ strings . translation _ failed ( STR ) , </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ <@> <%>"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ where . is _ london ' STR ", "after_ctx": " <%> <*> var customers -> assert . equal ( core _ strings . translation _ failed ( STR ) , </%> <%> <+> assert . throws < invalid _ operation _ exception > ( ( ) </%> <%> <+> > </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ operation _ issue _ client )"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ first ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ <@>"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ first </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ ( context"]}, {"before_ctx": "<%> <+> ) ) . message </%> <%> <-> _ skip _ issue _ cannot _ eval _ concat _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model _ gear ) } ) ' STR </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ concat _ from _ gear _ in _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model _ gear ) select [ ] . full _ name } ) ' STR ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ concat _ from _ gear _ in _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model _ gear ) select new < > f _ anonymous _ type ` 2 ( gear = [ ] , name = [ ] . full _ name ) } ) ' STR </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ cannot _ eval _ concat _ from _ <%> _ query _ error _ framework _ . _ core _ framework _ message _ as _ framework _ message _ as _ < _ ) event id _ test context ( last ] context log ] context ( message _ as _ framework _ message _ = ( select _ last ] _ message log _ message _ = ( = id ( as _ ] _ message _ } ( message _ = _ framework ) ( ) ) ( )"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ concat _ from _ gear _ in _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model _ gear ) select [ ] . full _ name } ) ' STR </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ concat _ from _ gear _ in _ value _ microsoft _ entity _ framework _ core _ query _ internal _ entity _ queryable _ microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model _ gear ) select new < > f _ anonymous _ type ` 2 ( gear = [ ] , name = [ ] . full _ name ) } ) ' STR ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ STR _ < _ </%> _ 1 _ where _ skip _ result _ </%> _ } _ <%> _ , ( ) select _ virtual public [ private <@> <@> _ virtual _ override readonly 2 ; select ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ entry _ single _ = in _ </%>"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ > _ </%> _ ( > list _ ("]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ ( -> _ , _ )"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ ( = , <+> _ assert _ )"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ </%> _ 0 model"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ single _ or _ default </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ single _ or _ default ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ = _ <%> _ <+> _ context"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> var query = context . parents . include ( p = > p . children ) . order _ by ( p = > ( ( i _ entity ) p ) . id ) . to _ list ( ) ; assert _ sql ( @ STR from [ parents ] as [ p ] </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue _ cannot _ eval _ where . order _ id > value ( system . random ) . next ( ) ) ' STR ", "after_ctx": " <%> <+> assert . equal ( core _ strings . translation _ failed ( STR ) , remove _ new _ lines ( assert . throws < invalid _ operation _ exception > ( </%> <%> <*> var query -> ( ) </%> <%> <+> > </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ issue _ cannot _ eval _ where . order _ id value ( system . random <%> . set ) <+> 1"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue _ cannot _ eval _ where . customer _ id = = args [ 0 ] ) ' STR ", "after_ctx": " <%> <*> assert . equal -> assert . equal ( STR , assert . throws < invalid _ operation _ exception > ( </%> <%> <*> STR , -> ) = > </%> <%> <+> ) . message </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ issue _ eval . context ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue _ cannot _ eval _ where . customer _ id = = args [ 0 ] ) ' STR ", "after_ctx": " <%> <*> assert . equal -> assert . equal ( STR , ( await assert . throws _ async < invalid _ operation _ exception > ( </%> <%> <*> STR , ( await -> ) = > </%> <%> <-> . first ( </%> <%> <*> customer _ id -> message </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ issue _ eval _ eval _ where . customer _ id = = args ) : <%>"]}, {"before_ctx": "<%> <*> not _ null expression materialization _ context _ expression , can _ be _ null int [ ] index _ map ) -> not _ null expression materialization _ context _ expression ) </%> <%> <-> index _ map = index _ map ; </%> ", "before_line": " public int get _ value _ buffer _ index ( [ not _ null ] i _ property _ base property ) = > index _ map ? [ property . get _ index ( ) ] ? ? property . get _ index ( ) ; ", "after_ctx": " ", "after_line": "public int get _ value _ buffer _ index ( [ not _ null ] i _ property _ base property ) = > property . get _ index ( ) ;", "predictions": ["public int get _ value _ buffer _ index ( i _ property _ base property ) = > index _ -> ? from ] . ? _ . query ;"]}, {"before_ctx": "<%> <+> cast ( </%> <%> <+> ) as int </%> ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ rank ] | 1 ) > 0 ) STR ", "after_ctx": " <%> <*> then cast ( 1 as bit ) -> then cast ( 1 as bit ) </%> <%> <*> end as [ bitwise _ true ] -> end </%> <%> <+> then cast ( 1 as bit ) </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and ( ( [ g ] . [ rank ] | 1 ) > 0 ) STR", "predictions": ["where [ g ] . [ discriminator ] in [ g ] . [ discriminator ] in 1 ) STR"]}, {"before_ctx": "<%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%> ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ rank ] & 1 ) = 1 ) STR ", "after_ctx": " <%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <%> <-> assert _ sql ( @ STR from [ gears ] as [ g ] </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and ( ( [ g ] . [ rank ] & 1 ) = 1 ) STR", "predictions": ["where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) = 1 array expected . . i </%> <*> <*> } ="]}, {"before_ctx": "<%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%> ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( 1 & [ g ] . [ rank ] ) = [ g ] . [ rank ] ) STR ", "after_ctx": " <%> <-> assert _ sql ( @ STR from [ gears ] as [ g ] where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ rank ] & coalesce ( ( select top ( 1 ) [ x ] . [ rank ] from [ gears ] as [ x ] </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and ( ( 1 & [ g ] . [ rank ] ) = [ g ] . [ rank ] ) STR", "predictions": ["where [ g ] . [ discriminator ] in [ g ] . [ rank ] STR STR"]}, {"before_ctx": "<%> <*> * -> [ nickname ] , [ g ] . [ squad _ id ] , [ g ] . [ assigned _ city _ name ] , [ g ] . [ city _ or _ birth _ name ] , [ g ] . [ discriminator ] , [ g ] . [ full _ name ] , [ g ] . [ has _ soul _ patch ] , [ g ] . [ leader _ nickname ] , [ g ] . [ leader _ squad _ id ] , [ g ] . [ rank ] </%> ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) ", "after_ctx": " <%> <+> ( </%> <%> <*> STR -> ) and [ s ] . [ name ] is not null STR </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' )", "predictions": ["where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' )"]}, {"before_ctx": " ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) ) ", "after_ctx": " <%> <+> } public override void order _ by _ then _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) { base . order _ by _ then _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) ; } </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) )", "predictions": ["where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and > full _ ( [ . [ [ 1 <%> </%> [ <%> assert ( _ _ _ _ patch ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) </@> assert ( ) ) ) ) ) ) ) ) </@> assert [ <%> [ [ patch <%> n ) ) ) ) ) ) ) ) = assert ( [ <%> </%> [ ) ) as [ ) ) )"]}, {"before_ctx": " ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( ( [ g ] . [ full _ name ] < > n ' dom ' ) and ( ", "after_ctx": " <%> <-> where ( [ g ] . [ full _ name ] = [ w ] . [ owner _ full _ name ] ) and ( [ w ] . [ is _ automatic ] = cast ( 1 as bit ) ) </%> <%> <*> order by -> where ( ( [ g ] . [ full _ name ] = [ w ] . [ owner _ full _ name ] ) and [ w ] . [ owner _ full _ name ] is not null ) and ( </%> <%> <*> id -> is _ automatic </%> <%> <+> = cast ( 1 as bit ) ) order by [ w ] . [ id ] </%> <%> <*> bool is _ async ) -> bool is _ async ) </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and ( ( [ g ] . [ full _ name ] < > n ' dom ' ) and (", "predictions": ["where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ("]}, {"before_ctx": "<%> <-> i _ model model </%> ", "before_line": " create _ schema _ commands ( check . not _ null ( model , nameof ( model ) ) ) ) ; public override async task create _ tables _ async ( i _ model model , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) ", "after_ctx": " <%> <-> check . not _ null ( model , nameof ( model ) ) </%>", "after_line": "create _ schema _ commands ( ) ) ; public override async task create _ tables _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) )", "predictions": ["create _ schema _ commands ( model , nameof ( model ) ) ) ; public override async task < </%> _ ) _ <-> <%> change . [ dynamic dynamic , null </%> [ _ ] [ <%> ) ;"]}, {"before_ctx": "<%> <-> i _ model model </%> <%> <-> check . not _ null ( model , nameof ( model ) ) </%> <%> <-> i _ model model , </%> ", "before_line": " create _ schema _ commands ( check . not _ null ( model , nameof ( model ) ) ) , ", "after_ctx": " <%> <-> i _ model model </%>", "after_line": "create _ schema _ commands ( ) ,", "predictions": ["create _ schema _ <@> ) ) </%>"]}, {"before_ctx": " ", "before_line": " if ( ! property _ builders . remove ( property , configuration _ source , can _ override _ same _ source : false ) ) ", "after_ctx": " <%> <*> _ -> . </%> <%> <-> foreach ( var index in metadata . indexes . where ( i = > i . properties . contains ( property ) ) . to _ list ( ) ) { var removed = remove _ index ( index , configuration _ source ) ; </%>", "after_line": "if ( ! remove ( property , configuration _ source , can _ override _ same _ source : false ) )", "predictions": ["if ( ! property _ builders . remove ( property , configuration _ source , can _ override _ same _ -> <*> false < <@> dynamic value ) )"]}, {"before_ctx": " ", "before_line": " b . key ( new [ ] { customer . id _ property . name } ) ; ", "after_ctx": " <%> <+> model _ builder . ignore < customer _ details > ( ) ; </%>", "after_line": "b . key ( customer . id _ property . name ) ;", "predictions": ["b . key ( or _ ] or _ > ( 0 ( count ( count . null _ assert . name ) ) ) <%> </%> ;"]}, {"before_ctx": " ", "before_line": " if ( left _ expressions ! = null & & ( right _ constant _ expression ! = null & & right _ constant _ expression . value = = null ) ) ", "after_ctx": " <%> <+> ( </%> <%> <+> ) </%> <%> <+> ) </%> <%> <+> ( </%>", "after_line": "if ( ( left _ expressions ! = null ) & & ( right _ constant _ expression ! = null ) & & ( right _ constant _ expression . value = = null ) )", "predictions": ["if ( left _ expressions <-> skip { ( <%> _ check _ <*> , assert ( > <-> = null ) < < < < STR . <*> ( <%> ( ; </%> > ? ? _ ; >"]}, {"before_ctx": "<%> <+> ( </%> <%> <+> ) </%> <%> <+> ) </%> <%> <+> ( </%> ", "before_line": " if ( right _ expressions ! = null & & ( left _ constant _ expression ! = null & & left _ constant _ expression . value = = null ) ) ", "after_ctx": " <%> <+> ( </%> <%> <+> ) </%> <%> <+> ( </%> <%> <+> ) </%> <%> <+> ( </%> <%> <+> ) </%>", "after_line": "if ( ( right _ expressions ! = null ) & & ( left _ constant _ expression ! = null ) & & ( left _ constant _ expression . value = = null ) )", "predictions": ["if ( right _ expressions ! = null & & ( left _ constant _ expression ! = null <-> <-> -> index t query -> . <+> -> = = = _ ? -> ] -> ] -> ] -> . null ) ) t"]}, {"before_ctx": " ", "before_line": " if ( query _ source _ reference _ expression = = null | | ( in _ projection | | ! query _ model _ visitor . query _ compilation _ context . query _ source _ requires _ materialization ( query _ source _ reference _ expression . referenced _ query _ source ) ) ) ", "after_ctx": " <%> <+> ( </%> <%> <+> ) </%>", "after_line": "if ( ( query _ source _ reference _ expression = = null ) | | in _ projection | | ! query _ model _ visitor . query _ compilation _ context . query _ source _ requires _ materialization ( query _ source _ reference _ expression . referenced _ query _ source ) )", "predictions": ["if ( query _ source _ reference _ <%> ;"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ change _ tracking _ internal ; </%> ", "before_line": " private readonly dictionary < type , func < dynamic , object > > entity _ sorters ; private readonly dictionary < type , action < dynamic , dynamic > > entity _ asserters ; ", "after_ctx": " <%> <*> expected -> set </%> <%> <*> data -> source </%> <%> <-> , func < dynamic </%> <%> <-> > </%> <%> <*> action < dynamic , dynamic > -> object </%>", "after_line": "private readonly dictionary < type , object > entity _ sorters ; private readonly dictionary < type , object > entity _ asserters ;", "predictions": ["private readonly dictionary < type , func < dynamic , dynamic > > entity _ sorters ;"]}, {"before_ctx": "<%> <*> extractor . set < t -> source </%> <%> <*> item > -> creator </%> ", "before_line": " var expected = expected _ query ( expected _ data . set < t _ item > ( ) ) . to _ array ( ) ; ", "after_ctx": " <%> <+> public virtual task assert _ query _ scalar < t _ item > ( func < i _ queryable < t _ item > , i _ queryable < int > > query , </%>", "after_line": "var expected = expected _ query ( expected _ data ) . to _ array ( ) ;", "predictions": ["var expected = expected _ query ( expected _ data . set < t _ item > ( ) dynamic -> as value property not _ <*> ( [ [ <%> ) ]"]}, {"before_ctx": "<%> <-> set _ extractor . set < t _ item > ( context ) ) ; </%> <%> <+> ordering _ settings _ verifier ( assert _ order , query . expression . type ) ; </%> ", "before_line": " var expected = expected _ query ( expected _ data . set < t _ item > ( ) , expected _ data . set < t _ item > ( ) ) . to _ array ( ) ; ", "after_ctx": " <%> <-> public virtual task assert _ query _ scalar < t _ item , t _ item , t _ item > ( func < i _ queryable < t _ item > , i _ queryable < t _ item > , i _ queryable < t _ item > , i _ queryable < int > > query , </%>", "after_line": "var expected = expected _ query ( expected _ data ) . to _ array ( ) ;", "predictions": ["var expected = expected _ query ( expected _ data . set ( ) , expected _ data . set < , ( </%> [ t ( full [ owner _ ( _ ( _ full [ ( _ _ ( _ full _ ( _ full _ ( _ full _ ( _ full name _ full name full name full full [ is [ [ ( full name . > full full bool _ ( _ full _ ( full name name and [ owner name name full owner name name full full [ ) full full bool"]}, {"before_ctx": " ", "before_line": " private readonly dictionary < type , func < dynamic , object > > entity _ sorters ; private readonly dictionary < type , action < dynamic , dynamic > > entity _ asserters ; ", "after_ctx": " <%> <-> , func < dynamic </%> <%> <-> > </%> <%> <*> action < dynamic , dynamic > -> object </%> <%> <-> , func < dynamic </%> <%> <-> > </%> <%> <*> action < dynamic , dynamic > -> object </%>", "after_line": "private readonly dictionary < type , object > entity _ sorters ; private readonly dictionary < type , object > entity _ asserters ;", "predictions": ["private readonly dictionary < type , func < dynamic , dynamic > > entity _ sorters ;"]}, {"before_ctx": "<%> <-> , func < dynamic </%> <%> <-> > </%> <%> <*> action < dynamic , dynamic > -> object </%> <%> <-> , func < dynamic </%> <%> <-> > </%> <%> <*> action < dynamic , dynamic > -> object </%> ", "before_line": " entity _ sorters = entity _ sorters ? ? new dictionary < type , func < dynamic , object > > ( ) ; entity _ asserters = entity _ asserters ? ? new dictionary < type , action < dynamic , dynamic > > ( ) ; ", "after_ctx": " ", "after_line": "entity _ sorters = entity _ sorters ? ? new dictionary < type , object > ( ) ; entity _ asserters = entity _ asserters ? ? new dictionary < type , object > ( ) ;", "predictions": ["entity _ sorters = entity _ sorters ? ? new dictionary < type , func < dynamic , dynamic > > . <@> < 1 & ) ; . , , _ action item <*> ; ; ; ; ; ; ; STR ; STR ; _ [ n <*> ; ; ; ; ; ; ; STR ; STR ; STR ; STR ; STR ;"]}, {"before_ctx": "<%> <+> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " assert . equal ( expected _ message ( default _ options ) , actual _ message ( create _ options _ builder ( ) ) ) ; ", "after_ctx": " <%> <+> s = > </%> <%> <+> s </%>", "after_line": "assert . equal ( expected _ message ( default _ options ) , actual _ message ( create _ options _ builder ) ) ;", "predictions": ["assert . equal ( STR <-> _ i _ builder , expected _ ] ( context . . ( model model < . ) ) ) . <+> > , expected _ 1 , <*> _ base . </@> ) ) ; <%>"]}, {"before_ctx": " ", "before_line": " benchmark _ iterations ", "after_ctx": " <%> <*> var customers = context . customers . to _ list ( ) ; assert . equal ( NUM , customers . count ) ; foreach ( var customer in customers ) -> var orders = new order [ NUM ] ; </%> <%> <+> for ( var i = 0 ; i < orders . length ; i + + ) </%>", "after_line": "benchmark", "predictions": ["benchmark _ iterations"]}, {"before_ctx": "<%> <+> { foreach ( var customer in customers ) </%> <%> <-> assert . same ( customer , customer . orders . single ( ) . customer ) ; </%> <%> <+> assert . all ( customers , c = > assert . equal ( 1 , c . orders . count ) ) ; </%> ", "before_line": " benchmark _ iterations ", "after_ctx": " ", "after_line": "benchmark", "predictions": ["benchmark"]}, {"before_ctx": "<%> <-> private customer [ ] get _ all _ customers _ from _ database ( ) { using ( var context = fixture . create _ context ( ) ) { return context . customers . to _ array ( ) ; } } </%> ", "before_line": " : base ( STR , 0 , NUM , 0 , 0 ) ", "after_ctx": " ", "after_line": ": base ( STR , 0 , 0 , 0 , 0 )", "predictions": [": base ( STR ) )"]}, {"before_ctx": "<%> <-> private customer [ ] get _ all _ customers _ from _ database ( ) { using ( var context = fixture . create _ context ( ) ) { return context . customers . to _ array ( ) ; } } </%> ", "before_line": " : base ( STR , 0 , NUM , 0 , 0 ) ", "after_ctx": " ", "after_line": ": base ( STR , 0 , 0 , 0 , 0 )", "predictions": [": base ( STR , 0 , > > if base . to . <+> )"]}, {"before_ctx": " ", "before_line": " benchmark _ iterations ", "after_ctx": " <%> <*> var customers = context . customers . to _ list ( ) ; assert . equal ( NUM , customers . count ) ; foreach ( var customer in customers ) -> var orders = new order [ NUM ] ; </%> <%> <+> for ( var i = 0 ; i < orders . length ; i + + ) </%>", "after_line": "benchmark", "predictions": ["benchmark _ iterations"]}, {"before_ctx": "<%> <+> { foreach ( var customer in customers ) </%> <%> <-> assert . same ( customer , customer . orders . single ( ) . customer ) ; </%> <%> <+> assert . all ( customers , c = > assert . equal ( 1 , c . orders . count ) ) ; </%> ", "before_line": " benchmark _ iterations ", "after_ctx": " ", "after_line": "benchmark", "predictions": ["benchmark"]}, {"before_ctx": "<%> <-> # nullable enable </%> ", "before_line": " public virtual t _ entity ? find ( [ can _ be _ null ] params object [ ] ? key _ values ) = > throw new not _ implemented _ exception ( ) ; ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual t _ entity find ( [ can _ be _ null ] params object [ ] key _ values ) = > throw new not _ implemented _ exception ( ) ;", "predictions": ["public virtual t ( > async object [ < < </%> </%> key ] public public values ] ( ) ( virtual entity </%> <@> ;"]}, {"before_ctx": "<%> <-> # nullable enable </%> <%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public virtual task < t _ entity ? > find _ async ( [ can _ be _ null ] params object [ ] ? key _ values ) = > throw new not _ implemented _ exception ( ) ; ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual task < t _ entity > find _ async ( [ can _ be _ null ] params object [ ] key _ values ) = > throw new not _ implemented _ exception ( ) ;", "predictions": ["public virtual task < t i . 0 ; for <*> . < . count <%> i + <%> ; length new new NUM <*> <*> <*> ] <*>"]}, {"before_ctx": "<%> <-> # nullable enable </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public virtual task < t _ entity ? > find _ async ( [ can _ be _ null ] object [ ] ? key _ values , cancellation _ token cancellation _ token ) ", "after_ctx": " ", "after_line": "public virtual task < t _ entity > find _ async ( [ can _ be _ null ] object [ ] key _ values , cancellation _ token cancellation _ token )", "predictions": ["public virtual task get <%> ; can key ? key ? ( exception ( nullable ( ) new new equal , , . assert _ [ > < object _ + i . + NUM i . token object object <*> <*> object [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ( [ _ ("]}, {"before_ctx": " ", "before_line": " public virtual value _ converter ? converter = > parameters . converter ; ", "after_ctx": " <%> <-> ? </%>", "after_line": "public virtual value _ converter converter = > parameters . converter ;", "predictions": ["public virtual value <*> -> _ _ parameters . _ _ ? -> ->"]}, {"before_ctx": " ", "before_line": " public static t _ related ? load < t _ related > ( can _ be _ null this i _ lazy _ loader ? loader , ", "after_ctx": " <%> <-> ? </%>", "after_line": "public static t _ related load < t _ related > ( can _ be _ null this i _ lazy _ loader loader ,", "predictions": ["public static t ? load ) object object name ]"]}, {"before_ctx": " ", "before_line": " public virtual t _ entity ? find ( object [ ] ? key _ values ) ", "after_ctx": " <%> <*> object? -> object </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual t _ entity find ( object [ ] key _ values )", "predictions": ["public virtual t . find find )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> <%> <*> object? -> object </%> <%> <-> ? </%> ", "before_line": " public virtual task < t _ entity ? > find _ async ( object [ ] ? key _ values , cancellation _ token cancellation _ token = default ) ", "after_ctx": " <%> <-> ? </%> <%> <-> # nullable disable </%>", "after_line": "public virtual task < t _ entity > find _ async ( object [ ] key _ values , cancellation _ token cancellation _ token = default )", "predictions": ["public virtual task null in ) new new new new new new new can </%> </%> ] ] not t ; ( find </%> object [ can object < async <-> object [ <-> -> )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " public virtual converter _ mapping _ hints with ( [ can _ be _ null ] converter _ mapping _ hints ? hints ) ", "after_ctx": " ", "after_line": "public virtual converter _ mapping _ hints with ( [ can _ be _ null ] converter _ mapping _ hints hints )", "predictions": ["public virtual converter _ t ? <%> values object object [ entity ? _ entity async </%> async <%> token >"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " ? ( action < i _ service _ provider , db _ context _ options _ builder > ? ) null ", "after_ctx": " ", "after_line": "? ( action < i _ service _ provider , db _ context _ options _ builder > ) null", "predictions": ["? ( action type , _ property _ null _ key <@> <-> <->"]}, {"before_ctx": "<%> <-> ? </%> <%> <*> object? -> object </%> <%> <*> object? -> object </%> ", "before_line": " ? ( object? ) null ", "after_ctx": " <%> <*> object? -> object </%> <%> <*> object? -> object </%>", "after_line": "? ( object ) null", "predictions": ["? ( object? -> <%> <@> ( <%> </@> ) )"]}, {"before_ctx": "<%> <-> # nullable enable </%> ", "before_line": " new t _ entity ? find ( [ can _ be _ null ] object [ ] ? key _ values ) ; ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "new t _ entity find ( [ can _ be _ null ] object [ ] key _ values ) ;", "predictions": ["new t _ key ? <@> ] </%> < public <@> _ </@> _ null > object object ) <->"]}, {"before_ctx": "<%> <-> # nullable enable </%> <%> <*> object? -> object </%> <%> <-> ? </%> ", "before_line": " task < object? > find _ async ( [ can _ be _ null ] object [ ] ? key _ values , cancellation _ token cancellation _ token = default ) ; ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "task < object > find _ async ( [ can _ be _ null ] object [ ] key _ values , cancellation _ token cancellation _ token = default ) ;", "predictions": ["task < object? find _ async -> cancellation cancellation object _ t object object cancellation object object public public public [ ? [ ? assert . default = not <%> < object ( ) object ( not . </%> i . </%> ) null null null null null ( object null null ) ( find _ -> object null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null"]}, {"before_ctx": " ", "before_line": " public virtual object? find ( [ not _ null ] type entity _ type , [ can _ be _ null ] params object [ ] ? key _ values ) ", "after_ctx": " <%> <*> object? -> object </%> <%> <-> ? </%> <%> <*> object? -> object </%> <%> <-> ? </%>", "after_line": "public virtual object find ( [ not _ null ] type entity _ type , [ can _ be _ null ] params object [ ] key _ values )", "predictions": ["public virtual object? find )"]}, {"before_ctx": "<%> <*> object? -> object </%> <%> <-> ? </%> ", "before_line": " public virtual task < object? > find _ async ( [ not _ null ] type entity _ type , [ can _ be _ null ] params object [ ] ? key _ values ) ", "after_ctx": " <%> <*> object? -> object </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual task < object > find _ async ( [ not _ null ] type entity _ type , [ can _ be _ null ] params object [ ] key _ values )", "predictions": ["public virtual task < + </@> can </%> <@> null null cancellation </%> type type [ async </%> > entity </%> task"]}, {"before_ctx": "<%> <*> object? -> object </%> <%> <-> ? </%> <%> <*> object? -> object </%> <%> <-> ? </%> ", "before_line": " public virtual task < object? > find _ async ( [ not _ null ] type entity _ type , [ can _ be _ null ] object [ ] ? key _ values , cancellation _ token cancellation _ token ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual task < object > find _ async ( [ not _ null ] type entity _ type , [ can _ be _ null ] object [ ] key _ values , cancellation _ token cancellation _ token )", "predictions": ["public virtual task < ( ( ( > type internal internal internal internal enumerable internal ) <%> ) not entity _ custom _ foreach <%> ] )"]}, {"before_ctx": "<%> <*> object? -> object </%> <%> <-> ? </%> <%> <*> object? -> object </%> <%> <-> ? </%> ", "before_line": " public virtual t _ entity ? find < t _ entity > ( [ can _ be _ null ] params object [ ] ? key _ values ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual t _ entity find < t _ entity > ( [ can _ be _ null ] params object [ ] key _ values )", "predictions": ["public virtual t <-> <@> find : = base , throw type . . key _ values info key"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public virtual task < t _ entity ? > find _ async < t _ entity > ( [ can _ be _ null ] params object [ ] ? key _ values ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public virtual task < t _ entity > find _ async < t _ entity > ( [ can _ be _ null ] params object [ ] key _ values )", "predictions": ["public virtual task ] -> <*> <%> -> [ ( ( ( ( ( ( ( ( ( find field field </%> ] ] key object [ ] . key ? key < key < t < <*> </%> ) ) )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public virtual task < t _ entity ? > find _ async < t _ entity > ( [ can _ be _ null ] object [ ] ? key _ values , cancellation _ token cancellation _ token ) ", "after_ctx": " ", "after_line": "public virtual task < t _ entity > find _ async < t _ entity > ( [ can _ be _ null ] object [ ] key _ values , cancellation _ token cancellation _ token )", "predictions": ["public virtual task <%> object find <%> > ) = cancellation <@> _ </@> _ async object be cancellation token ? key _ values </@> ( ( -> ? </%> . token </@> <+> . <+> </@> find _ < ] <@> <@> -> -> -> -> <%> -> -> -> )"]}, {"before_ctx": " ", "before_line": " public override t _ entity ? find ( params object [ ] ? key _ values ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override t _ entity find ( params object [ ] key _ values )", "predictions": ["public override t <*> object _ </@> name"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public override task < t _ entity ? > find _ async ( params object [ ] ? key _ values ) ", "after_ctx": " <%> <-> ? </%> <%> <-> ? </%>", "after_line": "public override task < t _ entity > find _ async ( params object [ ] key _ values )", "predictions": ["public override task ] , key </%> </%> ] </@> [ not [ type object object object )"]}, {"before_ctx": "<%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> <%> <-> ? </%> ", "before_line": " public override task < t _ entity ? > find _ async ( object [ ] ? key _ values , cancellation _ token cancellation _ token ) ", "after_ctx": " ", "after_line": "public override task < t _ entity > find _ async ( object [ ] key _ values , cancellation _ token cancellation _ token )", "predictions": ["public override task entity _ </@> ( ( can ) <%> </%> </%> ] ] object [ -> object object object token )"]}, {"before_ctx": "<%> <-> ? </%> ", "before_line": " func < type , type ? , i _ enumerable < value _ converter _ info > > ? after _ preferred ) ", "after_ctx": " ", "after_line": "func < type , type , i _ enumerable < value _ converter _ info > > after _ preferred )", "predictions": ["func < type ? , i _ be </%> -> <%> _ info & <@> <-> ? <@> ? ]"]}, {"before_ctx": " ", "before_line": " var field _ info = get _ field _ info ( field _ name , declaring _ type . clr _ type , name , should _ throw : true ) ; ", "after_ctx": " <%> <+> _ base </%> <%> <-> var field _ info = type . get _ field _ info ( field _ name ) ; </%>", "after_line": "var field _ info = get _ field _ info ( field _ name , declaring _ type , name , should _ throw : true ) ;", "predictions": ["var field _ ? <@> 1 = . clr . <%> , , , . equal ;"]}, {"before_ctx": "<%> <+> navigation navigation ) </%> <%> <*> if -> foreach </%> <%> <*> attributes ! = null -> var attribute in attributes </%> <%> <*> foreach ( var attribute in attributes ) -> relationship _ builder = apply ( relationship _ builder , navigation , attribute ) ; </%> <%> <+> if ( relationship _ builder = = null ) </%> ", "before_line": " relationship _ builder = apply ( relationship _ builder , navigation , attribute ) ; if ( relationship _ builder = = null ) { break ; } ", "after_ctx": " <%> <*> public abstract internal _ relationship _ builder apply ( [ not _ null ] internal _ relationship _ builder relationship _ builder , [ not _ null ] navigation navigation , [ not _ null ] t _ attribute attribute ) ; -> public abstract internal _ relationship _ builder apply ( [ not _ null ] internal _ relationship _ builder relationship _ builder , </%> <%> <*> protected static i _ enumerable < t _ custom _ attribute > get _ attributes < t _ custom _ attribute > ( [ not _ null ] entity _ type entity _ type , [ not _ null ] string property _ name ) -> not _ null navigation navigation , [ not _ null ] t _ attribute attribute ) ; </%> <%> <+> protected static i _ enumerable < t _ custom _ attribute > get _ attributes < t _ custom _ attribute > ( not _ null entity _ type entity _ type , [ not _ null ] string property _ name ) </%>", "after_line": "break ;", "predictions": ["break ;"]}, {"before_ctx": " ", "before_line": " & & ! can _ merge _ with ( existing _ navigation , inverse _ property _ info . name , target _ entity _ type _ builder ) ) ", "after_ctx": " <%> <-> . name </%>", "after_line": "& & ! can _ merge _ with ( existing _ navigation , inverse _ property _ info , target _ entity _ type _ builder ) )", "predictions": ["& & ! can ? key ? ? object [ </@> <%> async </%> <%> key _ , _ public _ ( </%> </%> <%> <%> <%> info"]}, {"before_ctx": "<%> <-> . name </%> ", "before_line": " | | ! can _ merge _ with ( existing _ inverse , navigation _ property . name , entity _ type _ builder ) ) ", "after_ctx": " ", "after_line": "| | ! can _ merge _ with ( existing _ inverse , navigation _ property , entity _ type _ builder ) )", "predictions": ["| | ! be ? merge <%> with ? existing _ find <-> navigation ? </%> <%> ] ? , async _ find <%> ) <%>"]}, {"before_ctx": " ", "before_line": " property . format ( dependent _ properties ) , ", "after_ctx": " <%> <*> property -> principal _ properties </%> <%> <-> principal _ properties </%>", "after_line": "dependent _ properties . format ( ) ,", "predictions": ["dependent _ properties </%> <->"]}, {"before_ctx": " ", "before_line": " property . format ( dependent _ properties ) , ", "after_ctx": " <%> <*> property -> principal _ properties </%> <%> <-> principal _ properties </%>", "after_line": "dependent _ properties . format ( ) ,", "predictions": ["dependent _ properties ,"]}, {"before_ctx": " ", "before_line": " property . format ( key . properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "key . properties . format ( ) ,", "predictions": ["property . format ( key ) ,"]}, {"before_ctx": " ", "before_line": " property . format ( key . properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "key . properties . format ( ) ,", "predictions": ["property . format ( key ) ,"]}, {"before_ctx": " ", "before_line": " throw new invalid _ operation _ exception ( core _ strings . keyless _ type _ with _ key ( property . format ( properties ) , this . display _ name ( ) ) ) ; ", "after_ctx": " <%> <*> property -> properties </%> <%> <-> properties </%>", "after_line": "throw new invalid _ operation _ exception ( core _ strings . keyless _ type _ with _ key ( properties . format ( ) , this . display _ name ( ) ) ) ;", "predictions": ["throw new invalid _ operation _ exception ( core . format ( properties ) , display _ name ( ) ) ;"]}, {"before_ctx": "<%> <*> property -> properties </%> <%> <-> properties </%> ", "before_line": " throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ; ", "after_ctx": " <%> <*> property -> properties </%> <%> <-> properties </%>", "after_line": "throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( properties . format ( ) , property . name ) ) ;", "predictions": ["throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ;"]}, {"before_ctx": "<%> <*> property -> properties </%> <%> <-> properties </%> ", "before_line": " throw new invalid _ operation _ exception ( core _ strings . key _ properties _ wrong _ entity ( property . format ( properties ) , this . display _ name ( ) ) ) ; ", "after_ctx": " ", "after_line": "throw new invalid _ operation _ exception ( core _ strings . key _ properties _ wrong _ entity ( properties . format ( ) , this . display _ name ( ) ) ) ;", "predictions": ["throw new invalid _ operation _ exception ( core _ strings . key _ properties _ wrong _ entity ( property . format ( properties ) , display _ name ( ) ) ) ;"]}, {"before_ctx": " ", "before_line": " throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ; ", "after_ctx": " <%> <*> property -> properties </%> <%> <-> properties </%>", "after_line": "throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( properties . format ( ) , property . name ) ) ;", "predictions": ["throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ;"]}, {"before_ctx": "<%> <*> property -> properties </%> <%> <-> properties </%> ", "before_line": " throw new invalid _ operation _ exception ( core _ strings . foreign _ key _ properties _ wrong _ entity ( property . format ( properties ) , this . display _ name ( ) ) ) ; ", "after_ctx": " ", "after_line": "throw new invalid _ operation _ exception ( core _ strings . foreign _ key _ properties _ wrong _ entity ( properties . format ( ) , this . display _ name ( ) ) ) ;", "predictions": ["throw new invalid _ operation _ exception ( core _ strings . foreign _ key _ properties _ wrong _ entity ( property . format ( properties ) , this . display _ name ( ) ( ( ( ( ) ( ( throw ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ( ( ) ( ( ( ("]}, {"before_ctx": " ", "before_line": " property . format ( properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "properties . format ( ) ,", "predictions": ["properties ,"]}, {"before_ctx": " ", "before_line": " throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ; ", "after_ctx": " <%> <*> property -> properties </%> <%> <-> properties </%>", "after_line": "throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( properties . format ( ) , property . name ) ) ;", "predictions": ["throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( property . format ( properties ) , property . name ) ) ;"]}, {"before_ctx": "<%> <*> property -> properties </%> <%> <-> properties </%> ", "before_line": " throw new invalid _ operation _ exception ( core _ strings . index _ properties _ wrong _ entity ( property . format ( properties ) , this . display _ name ( ) ) ) ; ", "after_ctx": " <%> <*> property -> properties </%> <%> <-> properties </%>", "after_line": "throw new invalid _ operation _ exception ( core _ strings . index _ properties _ wrong _ entity ( properties . format ( ) , this . display _ name ( ) ) ) ;", "predictions": ["throw new invalid _ operation _ exception ( core _ strings . index _ properties _ wrong _ entity ( property . format ( properties ) , this . display _ name ( ) ) ) ;"]}, {"before_ctx": "<%> <*> property -> properties </%> <%> <-> properties </%> ", "before_line": " throw new invalid _ operation _ exception ( core _ strings . duplicate _ index ( property . format ( properties ) , this . display _ name ( ) , duplicate _ index . declaring _ entity _ type . display _ name ( ) ) ) ; ", "after_ctx": " ", "after_line": "throw new invalid _ operation _ exception ( core _ strings . duplicate _ index ( properties . format ( ) , this . display _ name ( ) , duplicate _ index . declaring _ entity _ type . display _ name ( ) ) ) ;", "predictions": ["throw new invalid _ operation _ exception ( core _ strings . duplicate _ index ( property . format ( properties ) , this . display _ name ( ) , duplicate _ index . declaring _ entity _ operation ( assembly , , , assembly ) , duplicate _ index ( , , <@> _ language ( , , assembly , duplicate _ index ( , _ STR _ operation ( , assembly , duplicate _ index ( duplicate _ STR _ operation ( , assembly _ namespace _ namespace , assembly , duplicate _ index ( , ."]}, {"before_ctx": " ", "before_line": " core _ strings . property _ in _ use _ key ( property . name , this . display _ name ( ) , property . format ( containing _ key . properties ) ) ) ; ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "core _ strings . property _ in _ use _ key ( property . name , this . display _ name ( ) , containing _ key . properties . format ( ) ) ) ;", "predictions": ["core _ strings . property _ in _ use _ key ( property . name , display _ name ( ) , property . format ( containing _ key . properties ) ) ) ;"]}, {"before_ctx": " ", "before_line": " property . format ( index . properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "index . properties . format ( ) ,", "predictions": ["property . format ( index ) ,"]}, {"before_ctx": " ", "before_line": " property . format ( index . properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "index . properties . format ( ) ,", "predictions": ["property . format ( index ) ,"]}, {"before_ctx": " ", "before_line": " property . format ( foreign _ key . properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "foreign _ key . properties . format ( ) ,", "predictions": ["property . format ( foreign _ key ) ,"]}, {"before_ctx": " ", "before_line": " property . format ( foreign _ key . properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "foreign _ key . properties . format ( ) ,", "predictions": ["property . format ( foreign _ key ) ,"]}, {"before_ctx": " ", "before_line": " property . format ( foreign _ key . properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "foreign _ key . properties . format ( ) ,", "predictions": ["property . format ( foreign _ key ) ,"]}, {"before_ctx": " ", "before_line": " property . format ( foreign _ key . properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "foreign _ key . properties . format ( ) ,", "predictions": ["property . format ( foreign _ key ) ,"]}, {"before_ctx": " ", "before_line": " property . format ( foreign _ key . properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "foreign _ key . properties . format ( ) ,", "predictions": ["property . format ( foreign _ key ) ,"]}, {"before_ctx": " ", "before_line": " = > ( property _ access _ mode ? ) check . not _ null ( type _ base , nameof ( type _ base ) ) [ core _ annotation _ names . property _ access _ mode _ annotation ] ", "after_ctx": " <%> <-> _ annotation </%>", "after_line": "= > ( property _ access _ mode ? ) check . not _ null ( type _ base , nameof ( type _ base ) ) [ core _ annotation _ names . property _ access _ mode ]", "predictions": ["= > ( property _ access _ mode ? ) check . not _ null ( type _ base , nameof ( type _ base ) ) [ . property _ access _ mode _ properties key"]}, {"before_ctx": " ", "before_line": " property . format ( p . first _ property _ collection ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "p . first _ property _ collection . format ( ) ,", "predictions": ["property . format ( p . first _ property _ collection ) ,"]}, {"before_ctx": " ", "before_line": " property . format ( key . properties ) , ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "key . properties . format ( ) ,", "predictions": ["property . format ( key ) ,"]}, {"before_ctx": " ", "before_line": " property . format ( foreign _ key . properties ) ) ) ; ", "after_ctx": " <%> <-> property . format ( </%> <%> <+> . format ( </%>", "after_line": "foreign _ key . properties . format ( ) ) ) ;", "predictions": ["property . format ( foreign _ key . properties ) ) ) ;"]}, {"before_ctx": "<%> <-> property . format ( </%> <%> <+> . format ( </%> ", "before_line": " property . format ( referencing _ foreign _ key . properties ) , ", "after_ctx": " ", "after_line": "referencing _ foreign _ key . properties . format ( ) ,", "predictions": ["property . format ( referencing _ foreign _ key ) ,"]}, {"before_ctx": "<%> <*> root _ namespace ) ; -> root _ namespace , </%> <%> <+> language ) ; </%> ", "before_line": " using ( var executor = new app _ domain _ operation _ executor ( assembly . get _ executing _ assembly ( ) . location , path . combine ( target _ dir , STR ) , target _ dir , null , null ) ) ", "after_ctx": " ", "after_line": "using ( var executor = new app _ domain _ operation _ executor ( assembly . get _ executing _ assembly ( ) . location , path . combine ( target _ dir , STR ) , target _ dir , null , null , null ) )", "predictions": ["using ( var executor = new app _ domain _ operation _ executor ( assembly . get _ executing _ assembly ( ) . location , target _ dir , null , null ) )"]}, {"before_ctx": "<%> <*> sql _ statement -> string </%> ", "before_line": " return new sql _ statement ( STR ) ; ", "after_ctx": " ", "after_line": "return STR ;", "predictions": ["return STR ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ task _ list ", "after_ctx": " <%> <-> _ skip _ task _ list </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ task _ list"]}, {"before_ctx": "<%> <-> _ skip _ task _ list </%> ", "before_line": " conditional _ theory _ skip _ task _ list ", "after_ctx": " <%> <*> task _ list -> issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ task _ list"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <*> cs = > cs . include ( c = > c . orders ) . where ( c = > c . customer _ id ! = STR & & c . customer _ id ! = STR ) . order _ by ( c = > c . city ) . skip ( NUM ) -> cs = > cs . include ( c = > c . orders ) </%> <%> <+> . where ( c = > c . customer _ id ! = STR & & c . customer _ id ! = STR ) . order _ by ( c = > c . city ) . then _ by ( c = > c . customer _ id ) </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ task _ list ", "after_ctx": " <%> <*> assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . min ( o = > o . order _ id ) ) . to _ list ( ) ) ; -> context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . min ( o = > o . order _ id ) ) . to _ list ( ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ list"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ task _ list ", "after_ctx": " <%> <*> assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . max ( o = > o . order _ id ) ) . to _ list ( ) ) ; -> context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . max ( o = > o . order _ id ) ) . to _ list ( ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ list"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ task _ list ", "after_ctx": " <%> <*> assert . throws < invalid _ operation _ exception > ( ( ) = > context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . average ( o = > o . order _ id ) ) . to _ list ( ) ) ; -> context . customers . select ( c = > c . orders . where ( o = > o . order _ id = = - 1 ) . average ( o = > o . order _ id ) ) . to _ list ( ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ list"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> private static readonly method _ info shape _ method _ info = typeof ( in _ memory _ shaped _ query _ compiling _ expression _ visitor ) . get _ type _ info ( ) . get _ declared _ method ( nameof ( shape ) ) ; private static i _ enumerable < t _ result > shape < t _ result > ( i _ enumerable < value _ buffer > inner _ enumerable , query _ context query _ context , func < query _ context , i _ enumerator < value _ buffer > , t _ result > shaper , type context _ type , i _ diagnostics _ logger < db _ logger _ category . query > logger ) { return new querying _ enumerable < t _ result > ( query _ context , inner _ enumerable , shaper , context _ type , logger ) ; } private static readonly method _ info shape _ async _ method _ info = typeof ( in _ memory _ shaped _ query _ compiling _ expression _ visitor ) . get _ type _ info ( ) . get _ declared _ method ( nameof ( shape _ async ) ) ; private static i _ async _ enumerable < t _ result > shape _ async < t _ result > ( i _ enumerable < value _ buffer > inner _ enumerable , query _ context query _ context , func < query _ context , i _ enumerator < value _ buffer > , task < t _ result > > shaper , type context _ type , i _ diagnostics _ logger < db _ logger _ category . query > logger ) { return new async _ querying _ enumerable < t _ result > ( query _ context , inner _ enumerable , shaper , context _ type , logger ) ; } </%> ", "before_line": " private readonly func < query _ context , i _ enumerator < value _ buffer > , t > shaper ; ", "after_ctx": " <%> <-> i _ enumerator < </%> <%> <-> > </%>", "after_line": "private readonly func < query _ context , value _ buffer , t > shaper ;", "predictions": ["private readonly func < i _ enumerator < value _ buffer > , t > shaper ;"]}, {"before_ctx": "<%> <-> i _ enumerator < </%> <%> <-> > </%> ", "before_line": " func < query _ context , i _ enumerator < value _ buffer > , t > shaper , ", "after_ctx": " ", "after_line": "func < query _ context , value _ buffer , t > shaper ,", "predictions": ["func < i _ enumerator < value _ ; expression _ - ( t . query . context . context ( context ( context ( context info info info ) name info info info name )"]}, {"before_ctx": " ", "before_line": " private readonly func < query _ context , i _ enumerator < value _ buffer > , task < t > > shaper ; ", "after_ctx": " <%> <-> i _ enumerator < </%> <%> <-> > </%> <%> <-> task < </%> <%> <-> > </%>", "after_line": "private readonly func < query _ context , value _ buffer , t > shaper ;", "predictions": ["private readonly func < query _ context , id . where _ ; , list list &"]}, {"before_ctx": "<%> <-> i _ enumerator < </%> <%> <-> > </%> <%> <-> task < </%> <%> <-> > </%> ", "before_line": " func < query _ context , i _ enumerator < value _ buffer > , task < t > > shaper , ", "after_ctx": " ", "after_line": "func < query _ context , value _ buffer , t > shaper ,", "predictions": ["func < query _ context , i _ c . select _ ; , , ,"]}, {"before_ctx": "<%> <+> expression . constant ( </%> <%> <+> ) </%> <%> <*> . has _ value -> ! = null </%> ", "before_line": " predicate = expression . greater _ than ( column _ expression , expression . constant ( offset ) ) ; ", "after_ctx": " <%> <+> var offset _ value = ( offset as constant _ expression ) ? . value ; </%> <%> <*> ? ( expression ) expression . constant ( offset + ( int ) constant _ value ) : expression . add ( expression . constant ( offset ) , sub _ query . limit ) ; -> & & offset _ value ! = null </%>", "after_line": "predicate = expression . greater _ than ( column _ expression , offset ) ;", "predictions": ["predicate = greater _ than ( column _ ( , </%> ( ) </%> c c name ) parameter , info name name parameter ;"]}, {"before_ctx": "<%> <*> string -> var </%> ", "before_line": " final _ identifier = proposed _ identifier + suffix . to _ string ( ) ; ", "after_ctx": " ", "after_line": "final _ identifier = proposed _ identifier + suffix ;", "predictions": ["final _ identifier = proposed _ identifier + query i </%> </%> </%> </%> </%>"]}, {"before_ctx": " ", "before_line": " return new default _ expression _ or _ value ( ) ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "return new default _ expression _ or _ value", "predictions": ["return new default _ expression _ or _ value"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " return new default _ expression _ or _ value ( ) ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "return new default _ expression _ or _ value", "predictions": ["return new default _ expression _ or _ context"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " return new default _ expression _ or _ value ( ) ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "return new default _ expression _ or _ value", "predictions": ["return new default _ expression _ or _ func"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " return new default _ expression _ or _ value ( ) ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "return new default _ expression _ or _ value", "predictions": ["return new default _ expression _ or _ value"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " return new default _ expression _ or _ value ( ) ", "after_ctx": " ", "after_line": "return new default _ expression _ or _ value", "predictions": ["return new default _ expression _ or _ value"]}, {"before_ctx": " ", "before_line": " return new compiled _ assembly _ result ( ) ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "return new compiled _ assembly _ result", "predictions": ["return new compiled _ assembly _ result"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " return new compiled _ assembly _ result ( ) ", "after_ctx": " ", "after_line": "return new compiled _ assembly _ result", "predictions": ["return new compiled _ assembly _ result"]}, {"before_ctx": "<%> <+> var member _ expression = ( member _ expression ) expression ; var object = evaluate ( member _ expression . expression , out parameter _ name ) ; var field _ info = member _ expression . member as field _ info ; if ( field _ info ! = null ) </%> <%> <*> var member -> parameter </%> <%> <*> expression -> name </%> <%> <*> ( member -> parameter </%> <%> <*> expression ) expression ; var object = evaluate ( member _ expression . expression , out -> name ! = null ? </%> <%> <*> ) ; var -> + STR + field _ info . name : </%> <%> <-> = member _ expression </%> <%> <*> member as field _ info -> name </%> <%> <-> if ( field _ info ! = null ) </%> <%> <+> try </%> ", "before_line": " parameter _ name = parameter _ name ! = null ? parameter _ name + STR + field _ info . name : field _ info . name ; try { return field _ info . get _ value ( object ) ; } catch {  } ", "after_ctx": " <%> <*> var property _ info = member _ expression . member as property _ info ; if ( property _ info ! = null ) -> catch </%> <%> <-> parameter _ name = parameter _ name ! = null ? parameter _ name + STR + property _ info . name : property _ info . name ; try { </%>", "after_line": "return field _ info . get _ value ( object ) ;", "predictions": ["return field _ info . get _ value ( object ) ;"]}, {"before_ctx": " ", "before_line": " public virtual new string column ", "after_ctx": " <%> <*> param _ can _ be _ null set { property [ sqlite _ name _ annotation ] = value ; } -> param _ can _ be _ null set { property [ sqlite _ name _ annotation ] = value ; } </%> <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> param _ can _ be _ null </%>", "after_line": "public new virtual string column", "predictions": ["public virtual new string column"]}, {"before_ctx": "<%> <-> virtual </%> <%> <+> virtual </%> <%> <*> param _ can _ be _ null set { property [ sqlite _ name _ annotation ] = value ; } -> param _ can _ be _ null set { property [ sqlite _ name _ annotation ] = value ; } </%> ", "before_line": " public virtual new string column _ type ", "after_ctx": " <%> <*> param _ can _ be _ null set { property [ sqlite _ column _ type _ annotation ] = value ; } -> param _ can _ be _ null set { property [ sqlite _ column _ type _ annotation ] = value ; } </%> <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> param _ can _ be _ null </%>", "after_line": "public new virtual string column _ type", "predictions": ["public virtual new string column _ type"]}, {"before_ctx": "<%> <*> razor _ templating _ host -> var </%> <%> <*> razor _ template _ engine -> var </%> ", "before_line": " return new template _ result ( ) ", "after_ctx": " ", "after_line": "return new template _ result", "predictions": ["return new template _ result"]}, {"before_ctx": " ", "before_line": " return new template _ result ( ) ", "after_ctx": " <%> <*> string -> var </%>", "after_line": "return new template _ result", "predictions": ["return new template _ result"]}, {"before_ctx": "<%> <*> string -> var </%> ", "before_line": " return new template _ result ( ) ", "after_ctx": " ", "after_line": "return new template _ result", "predictions": ["return new template _ result"]}, {"before_ctx": " ", "before_line": " private readonly list < i _ member _ translator > sqlite _ translators = new list < i _ member _ translator > ( ) ", "after_ctx": " <%> <-> , </%>", "after_line": "private readonly list < i _ member _ translator > sqlite _ translators = new list < i _ member _ translator >", "predictions": ["private readonly list < i _ member _ translator > sqlite _ _ _ on translators on new"]}, {"before_ctx": "<%> <+> using jet _ brains _ annotations ; </%> <%> <-> using jet _ brains _ annotations ; </%> ", "before_line": " private readonly list < i _ method _ call _ translator > sqlite _ translators = new list < i _ method _ call _ translator > ( ) ", "after_ctx": " <%> <-> , </%>", "after_line": "private readonly list < i _ method _ call _ translator > sqlite _ translators = new list < i _ method _ call _ translator >", "predictions": ["private readonly list < i _ method _ call _ translator <%> . translators . new . list _ translators make new _ translators make new"]}, {"before_ctx": " ", "before_line": " private static event _ id make _ update _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , update _ prefix + id ) ; ", "after_ctx": " <%> <+> new </%> <%> <-> _ factory . create </%>", "after_line": "private static event _ id make _ update _ id ( id id ) = > new event _ id ( ( int ) id , update _ prefix + id ) ;", "predictions": ["private static event _ id make _ update _ id ( ] ] ) left left on STR STR new -> = ( STR = c STR method . prefix -> , , factory _ id int _ <-> _ ( ) to"]}, {"before_ctx": "<%> <+> new </%> <%> <-> _ factory . create </%> ", "before_line": " private static event _ id make _ query _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , query _ prefix + id ) ; ", "after_ctx": " ", "after_line": "private static event _ id make _ query _ id ( id id ) = > new event _ id ( ( int ) id , query _ prefix + id ) ;", "predictions": ["private static event _ id make _ query _ id ( id id ) = > event [ ] [ _ -> -> c </@> <@> ) = i _ new _ call . create <%> event id </%> transaction + id </%> <+> _ </@> static id ) &"]}, {"before_ctx": " ", "before_line": " private static event _ id make _ validation _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , validation _ prefix + id ) ; ", "after_ctx": " <%> <+> new </%> <%> <-> _ factory . create </%>", "after_line": "private static event _ id make _ validation _ id ( id id ) = > new event _ id ( ( int ) id , validation _ prefix + id ) ;", "predictions": ["private static event _ id make _ validation _ id ( id id ) = > event _ id _ factory . create ( id , update [ prefix </@> c -> -> ;"]}, {"before_ctx": "<%> <+> new </%> <%> <-> _ factory . create </%> ", "before_line": " private static event _ id make _ scaffolding _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , scaffolding _ prefix + id ) ; ", "after_ctx": " ", "after_line": "private static event _ id make _ scaffolding _ id ( id id ) = > new event _ id ( ( int ) id , scaffolding _ prefix + id ) ;", "predictions": ["private static event _ id make _ scaffolding _ id ( id id ) = > event _ id _ factory . create ( id , query ) <@> ] <@> <@> ) STR method table </@> , scaffolding . prefix _ prefix new id </%> <+> <-> <-> ) <->"]}, {"before_ctx": " ", "before_line": " private static event _ id make _ connection _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , connection _ prefix + id ) ; ", "after_ctx": " <%> <+> new </%> <%> <-> _ factory . create </%>", "after_line": "private static event _ id make _ connection _ id ( id id ) = > new event _ id ( ( int ) id , connection _ prefix + id ) ;", "predictions": ["private static event _ id make _ connection _ id ( id id ) = > factory _ id _ factory . event ( id , create _ prefix + id ) ;"]}, {"before_ctx": "<%> <+> new </%> <%> <-> _ factory . create </%> ", "before_line": " private static event _ id make _ command _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , sql _ prefix + id ) ; ", "after_ctx": " <%> <+> new </%> <%> <-> _ factory . create </%>", "after_line": "private static event _ id make _ command _ id ( id id ) = > new event _ id ( ( int ) id , sql _ prefix + id ) ;", "predictions": ["private static event _ id make _ command _ id ( ( ( ( first target target , sql _ name to _ ( first target , select first target to ( ( first target ) int id ) ) ) new"]}, {"before_ctx": "<%> <+> new </%> <%> <-> _ factory . create </%> ", "before_line": " private static event _ id make _ transaction _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , transaction _ prefix + id ) ; ", "after_ctx": " <%> <+> new </%> <%> <-> _ factory . create </%>", "after_line": "private static event _ id make _ transaction _ id ( id id ) = > new event _ id ( ( int ) id , transaction _ prefix + id ) ;", "predictions": ["private static event _ id make _ transaction _ id ( id id ) > event _ id _ factory . create ( id ; + + + id ) </@>"]}, {"before_ctx": "<%> <+> new </%> <%> <-> _ factory . create </%> ", "before_line": " private static event _ id make _ migrations _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , migrations _ prefix + id ) ; ", "after_ctx": " <%> <+> new </%> <%> <-> _ factory . create </%>", "after_line": "private static event _ id make _ migrations _ id ( id id ) = > new event _ id ( ( int ) id , migrations _ prefix + id ) ;", "predictions": ["private static event _ id make _ migrations _ id ( id id ) = > event _ id _ factory . create ( id , new int ) id , id ) </@>"]}, {"before_ctx": "<%> <+> new </%> <%> <-> _ factory . create </%> ", "before_line": " private static event _ id make _ query _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , query _ prefix + id ) ; ", "after_ctx": " <%> <+> new </%> <%> <-> _ factory . create </%> <%> <-> private static class event _ id _ factory { public static event _ id create ( int id , string name ) </%>", "after_line": "private static event _ id make _ query _ id ( id id ) = > new event _ id ( ( int ) id , query _ prefix + id ) ;", "predictions": ["private static event _ id make _ query _ id ( id id , private private private private private private event _ STR transaction id & private private <%> _ id = id , private <%> . , id ) int"]}, {"before_ctx": "<%> <+> new </%> <%> <-> _ factory . create </%> ", "before_line": " private static event _ id make _ validation _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , validation _ prefix + id ) ; ", "after_ctx": " <%> <-> private static class event _ id _ factory { public static event _ id create ( int id , string name ) { if ( app _ context . try _ get _ switch ( STR , out var is _ enabled ) & & is _ enabled ) { if ( id > = core _ event _ id . provider _ design _ base _ id ) </%>", "after_line": "private static event _ id make _ validation _ id ( id id ) = > new event _ id ( ( int ) id , validation _ prefix + id ) ;", "predictions": ["private static event _ id make _ validation _ id ( id id ) = > event _ id _ create . </%> ( id { update _ prefix + id ) ;"]}, {"before_ctx": " ", "before_line": " private static event _ id make _ validation _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , validation _ prefix + id ) ; ", "after_ctx": " <%> <+> new </%> <%> <-> _ factory . create </%>", "after_line": "private static event _ id make _ validation _ id ( id id ) = > new event _ id ( ( int ) id , validation _ prefix + id ) ;", "predictions": ["private static event _ id make _ validation _ id ( id id ) = > create _ id _ factory . create ( id , validation _ prefix + id ) ;"]}, {"before_ctx": "<%> <+> new </%> <%> <-> _ factory . create </%> ", "before_line": " private static event _ id make _ scaffolding _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , scaffolding _ prefix + id ) ; ", "after_ctx": " ", "after_line": "private static event _ id make _ scaffolding _ id ( id id ) = > new event _ id ( ( int ) id , scaffolding _ prefix + id ) ;", "predictions": ["private static event _ id make _ scaffolding _ id ( id id ) = > event _ id _ event . connection ( id , factory _ prefix + id ) ;"]}, {"before_ctx": " ", "before_line": " private static event _ id make _ transaction _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , transaction _ prefix + id ) ; ", "after_ctx": " <%> <+> new </%> <%> <-> _ factory . create </%> <%> <-> private static class event _ id _ factory { public static event _ id create ( int id , string name ) { if ( app _ context . try _ get _ switch ( STR , out var is _ enabled ) & & is _ enabled ) </%>", "after_line": "private static event _ id make _ transaction _ id ( id id ) = > new event _ id ( ( int ) id , transaction _ prefix + id ) ;", "predictions": ["private static event _ id make _ transaction _ id ( id id ) <+> </@> event _ id _ factory , ( = ) id private if _ id _ factory , ( = ) id private if ( app is id ) private ;"]}, {"before_ctx": "<%> <+> new </%> <%> <-> _ factory . create </%> ", "before_line": " private static event _ id make _ update _ id ( id id ) = > event _ id _ factory . create ( ( int ) id , update _ prefix + id ) ; ", "after_ctx": " <%> <-> private static class event _ id _ factory { public static event _ id create ( int id , string name ) { if ( app _ context . try _ get _ switch ( STR , out var is _ enabled ) & & is _ enabled ) { if ( id > = core _ event _ id . provider _ design _ base _ id ) { </%>", "after_line": "private static event _ id make _ update _ id ( id id ) = > new event _ id ( ( int ) id , update _ prefix + id ) ;", "predictions": ["private static event _ id make _ update _ id ( <%> <%> be be virtual -> be _ prefix <*> <%> be _ prefix <*> <%> be _ prefix <*> <%> be _ prefix <*> <%> be _ prefix <*> <%> be _ prefix be be <%> be _ prefix <*> <%> be _ prefix be be <+> <+> be _ prefix <*> <%> be _ prefix be be ) <+>"]}, {"before_ctx": " ", "before_line": " fk . name , fk . table . name , fk . referenced _ table . name , ", "after_ctx": " <%> <+> fk . referenced _ table . name , </%> <%> <*> idx . table . name , idx . name , -> idx . table . name , </%> <%> <+> idx . name , </%>", "after_line": "fk . table . name , fk . name ,", "predictions": ["fk . name , fk . table . name ,"]}, {"before_ctx": "<%> <*> c -> o </%> <%> <*> o -> c </%> ", "before_line": " left join STR customers STR as STR c STR on STR c STR . STR customer _ id STR = STR o STR . STR customer _ id STR ", "after_ctx": " <%> <*> c -> o </%> <%> <*> o -> c </%>", "after_line": "left join STR customers STR as STR c STR on STR o STR . STR customer _ id STR = STR c STR . STR customer _ id STR", "predictions": ["left join STR customers STR as STR c STR on STR <%> _ _ _ _ _ . . . . _ id . STR _ id . _ <-> _ </@>"]}, {"before_ctx": " ", "before_line": " left join STR customers STR as STR c STR on STR c STR . STR customer _ id STR = STR o STR . STR customer _ id STR ", "after_ctx": " <%> <*> c -> o </%> <%> <*> o -> c </%>", "after_line": "left join STR customers STR as STR c STR on STR o STR . STR customer _ id STR = STR c STR . STR customer _ id STR", "predictions": ["left join STR customers STR as STR c STR on STR id . _ _ factory"]}, {"before_ctx": " ", "before_line": " left join STR customers STR as STR c STR on STR c STR . STR customer _ id STR = STR o STR . STR customer _ id STR ", "after_ctx": " <%> <*> c -> o </%> <%> <*> o -> c </%>", "after_line": "left join STR customers STR as STR c STR on STR o STR . STR customer _ id STR = STR c STR . STR customer _ id STR", "predictions": ["left join STR customers STR as STR c STR on STR c STR . STR customer _ id _ id ; <@> factory _ id event event factory _ id _ id _ id _ i _ _ _"]}, {"before_ctx": "<%> <*> c -> o </%> <%> <*> o -> c </%> ", "before_line": " left join [ customers ] as [ c ] on [ c ] . [ customer _ id ] = [ o ] . [ customer _ id ] ", "after_ctx": " <%> <*> c -> o </%> <%> <*> o -> c </%>", "after_line": "left join [ customers ] as [ c ] on [ o ] . [ customer _ id ] = [ c ] . [ customer _ id ]", "predictions": ["left join [ customers ] as [ c ] on [ c c _ c _ _ call = = _ id . . )"]}, {"before_ctx": " ", "before_line": " left join [ customers ] as [ c ] on [ c ] . [ customer _ id ] = [ o ] . [ customer _ id ] ", "after_ctx": " <%> <*> c -> o </%> <%> <*> o -> c </%>", "after_line": "left join [ customers ] as [ c ] on [ o ] . [ customer _ id ] = [ c ] . [ customer _ id ]", "predictions": ["left join [ customers ] as [ c ] on [ c _ <%> STR as STR as STR id <+> _ ) <%> _ + id"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <+> o </%> <%> <+> o </%> <%> <+> o </%> <%> <+> o </%> ", "before_line": " ) as [ o ] on [ ] . [ customer _ id ] = [ o ] . [ customer _ id ] ", "after_ctx": " ", "after_line": ") as [ ] on [ o ] . [ customer _ id ] = [ ] . [ customer _ id ]", "predictions": [") as [ o ] on [ ] . [ customer <*> _ _ </%> c <@> c STR = c STR"]}, {"before_ctx": " ", "before_line": " var target _ select _ expression = new select _ expression ( ) ; var target _ table _ alias = create _ unique _ alias ( select _ expression , target _ table _ name . first ( ) . to _ string ( ) . to _ lower ( ) ) ; ", "after_ctx": " <%> <+> var target _ select _ expression = new select _ expression ( ) ; </%>", "after_line": "var target _ table _ alias = target _ table _ name . first ( ) . to _ string ( ) . to _ lower ( ) ;", "predictions": ["var target _ table _ alias = create _ unique _ <-> id ( ( _ </%> int int int </%> int ) create _ , _ > create _ = id <%> <%> <%> _ & . ; ) <%>"]}, {"before_ctx": "<%> <*> protected virtual void set _ base _ type ( entity _ type entity _ type , entity _ type base _ entity _ type ) = > entity _ type . has _ base _ type ( base _ entity _ type ) ; protected key create _ key ( entity _ type entity _ type , int starting _ property _ index = - 1 , int property _ count = 1 ) -> protected virtual void set _ base _ type ( i _ mutable _ entity _ type entity _ type , i _ mutable _ entity _ type base _ entity _ type ) </%> <%> <+> = > entity _ type . base _ type = base _ entity _ type ; protected i _ mutable _ key create _ key ( i _ mutable _ entity _ type entity _ type , int starting _ property _ index = - 1 , int property _ count = 1 ) </%> <%> <+> i _ mutable _ </%> ", "before_line": " var property = entity _ type . get _ or _ add _ property ( STR + ( starting _ property _ index + i ) , typeof ( int? ) ) ; key _ properties [ i ] = property ; ", "after_ctx": " <%> <+> i _ mutable _ </%> <%> <+> i _ mutable _ </%> <%> <+> i _ mutable _ </%> <%> <+> i _ mutable _ </%>", "after_line": "key _ properties [ i ] = entity _ type . get _ or _ add _ property ( STR + ( starting _ property _ index + i ) , typeof ( int? ) ) ;", "predictions": ["key _ properties [ i ] = entity _ type . get _ or _ add _ property ( STR + ( starting _ property _ index + i ) ) ;"]}, {"before_ctx": "<%> <+> i _ mutable _ </%> <%> <+> i _ mutable _ </%> ", "before_line": " var discriminator _ property = base _ entity _ type . get _ or _ add _ property ( STR , typeof ( string ) ) ; base _ entity _ type . relational ( ) . discriminator _ property = discriminator _ property ; ", "after_ctx": " ", "after_line": "base _ entity _ type . relational ( ) . discriminator _ property = base _ entity _ type . get _ or _ add _ property ( STR , typeof ( string ) ) ;", "predictions": ["base _ entity _ type . relational ( ) . discriminator _ property = discriminator _ property ;"]}, {"before_ctx": " ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " <%> <-> _ skip _ roslyn _ assembly _ missmatch </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ roslyn _ assembly _ missmatch </%> ", "before_line": " fact _ skip _ roslyn _ assembly _ missmatch ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " & & is _ compatible _ sequence _ hi _ lo ( property . clr _ type ) ) ", "after_ctx": " <%> <-> . clr _ type </%>", "after_line": "& & is _ compatible _ sequence _ hi _ lo ( property ) )", "predictions": ["& & is _ compatible _ sequence _ hi _ lo ( property )"]}, {"before_ctx": "<%> <-> . clr _ type </%> ", "before_line": " & & is _ compatible _ identity _ column ( property . clr _ type ) ) ", "after_ctx": " ", "after_line": "& & is _ compatible _ identity _ column ( property ) )", "predictions": ["& & is _ compatible _ identity _ column ( property ) )"]}, {"before_ctx": " ", "before_line": " & & is _ compatible _ sequence _ hi _ lo ( property . clr _ type ) ) ", "after_ctx": " <%> <-> . clr _ type </%>", "after_line": "& & is _ compatible _ sequence _ hi _ lo ( property ) )", "predictions": ["& & is _ compatible _ sequence _ hi _ lo ( property )"]}, {"before_ctx": "<%> <-> . clr _ type </%> ", "before_line": " & & is _ compatible _ identity _ column ( property . clr _ type ) ) ", "after_ctx": " ", "after_line": "& & is _ compatible _ identity _ column ( property ) )", "predictions": ["& & is _ compatible _ identity _ column ( property ) )"]}, {"before_ctx": " ", "before_line": " b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; ", "after_ctx": " <%> <-> fake _ service , </%> <%> <-> < fake _ service > </%>", "after_line": "b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;", "predictions": ["b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;"]}, {"before_ctx": "<%> <-> fake _ service , </%> <%> <-> < fake _ service > </%> ", "before_line": " b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; ", "after_ctx": " ", "after_line": "b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;", "predictions": ["b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;"]}, {"before_ctx": " ", "before_line": " b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( new fake _ service ( ) ) ; ", "after_ctx": " <%> <-> fake _ service , </%> <%> <-> < fake _ service > </%>", "after_line": "b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( new fake _ service ( ) ) ;", "predictions": ["b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( new fake _ service ( ) ) </%> </%>"]}, {"before_ctx": "<%> <-> fake _ service , </%> <%> <-> < fake _ service > </%> ", "before_line": " b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( new fake _ service ( ) ) ; ", "after_ctx": " ", "after_line": "b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( new fake _ service ( ) ) ;", "predictions": ["b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( new fake _ service ( ) ) ;"]}, {"before_ctx": " ", "before_line": " b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; ", "after_ctx": " <%> <-> fake _ service , </%> <%> <-> < fake _ service > </%>", "after_line": "b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;", "predictions": ["b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;"]}, {"before_ctx": "<%> <-> fake _ service , </%> <%> <-> < fake _ service > </%> ", "before_line": " b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; ", "after_ctx": " ", "after_line": "b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;", "predictions": ["b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;"]}, {"before_ctx": " ", "before_line": " b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; ", "after_ctx": " <%> <-> fake _ service , </%> <%> <-> < fake _ service > </%>", "after_line": "b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;", "predictions": ["b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;"]}, {"before_ctx": "<%> <-> fake _ service , </%> <%> <-> < fake _ service > </%> ", "before_line": " b . service _ collection . add _ scoped < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; ", "after_ctx": " ", "after_line": "b . service _ collection . add _ scoped < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;", "predictions": ["b . service _ collection . add _ scoped < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;"]}, {"before_ctx": " ", "before_line": " b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; ", "after_ctx": " <%> <-> fake _ service , </%> <%> <-> < fake _ service > </%>", "after_line": "b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;", "predictions": ["b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;"]}, {"before_ctx": "<%> <-> fake _ service , </%> <%> <-> < fake _ service > </%> ", "before_line": " b . service _ collection . add _ singleton < fake _ service , fake _ service > ( ) ; b . service _ collection . add _ instance < fake _ service > ( service _ instance ) ; ", "after_ctx": " ", "after_line": "b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;", "predictions": ["b . service _ collection . add _ singleton < fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;"]}, {"before_ctx": " ", "before_line": " builder . service _ collection . add _ instance < i _ model _ source > ( model _ source ) ; ", "after_ctx": " <%> <-> < db _ set _ initializer > </%>", "after_line": "builder . service _ collection . add _ instance ( model _ source ) ;", "predictions": ["builder . service _ collection . add _ instance ( model _ source ) ;"]}, {"before_ctx": "<%> <-> < i _ model _ source > </%> ", "before_line": " builder . service _ collection . add _ instance < db _ set _ initializer > ( initializer ) ; ", "after_ctx": " <%> <-> < identity _ generator _ factory > </%>", "after_line": "builder . service _ collection . add _ instance ( initializer ) ;", "predictions": ["builder . service _ collection . add _ instance ( initializer ) ;"]}, {"before_ctx": "<%> <-> < db _ set _ initializer > </%> ", "before_line": " builder . service _ collection . add _ instance < identity _ generator _ factory > ( factory ) ; ", "after_ctx": " <%> <-> < active _ identity _ generators > </%>", "after_line": "builder . service _ collection . add _ instance ( factory ) ;", "predictions": ["builder . service _ collection . add _ instance ( factory ) ;"]}, {"before_ctx": "<%> <-> < identity _ generator _ factory > </%> ", "before_line": " builder . service _ collection . add _ instance < active _ identity _ generators > ( generators ) ; ", "after_ctx": " <%> <-> < db _ set _ finder > </%>", "after_line": "builder . service _ collection . add _ instance ( generators ) ;", "predictions": ["builder . service _ collection . add _ instance ( generators ) ;"]}, {"before_ctx": "<%> <-> < active _ identity _ generators > </%> ", "before_line": " builder . service _ collection . add _ instance < db _ set _ finder > ( finder ) ; ", "after_ctx": " <%> <-> < entity _ key _ factory _ source > </%>", "after_line": "builder . service _ collection . add _ instance ( finder ) ;", "predictions": ["builder . service _ collection . add _ instance ( finder ) ;"]}, {"before_ctx": "<%> <-> < db _ set _ finder > </%> ", "before_line": " builder . service _ collection . add _ instance < entity _ key _ factory _ source > ( source ) ; ", "after_ctx": " <%> <-> < clr _ collection _ accessor _ source > </%>", "after_line": "builder . service _ collection . add _ instance ( source ) ;", "predictions": ["builder . service _ collection . add _ instance ( source ) ;"]}, {"before_ctx": "<%> <-> < entity _ key _ factory _ source > </%> ", "before_line": " builder . service _ collection . add _ instance < clr _ collection _ accessor _ source > ( source ) ; ", "after_ctx": " <%> <-> < clr _ property _ getter _ source > </%>", "after_line": "builder . service _ collection . add _ instance ( source ) ;", "predictions": ["builder . service _ collection . add _ instance ( source ) ;"]}, {"before_ctx": "<%> <-> < clr _ collection _ accessor _ source > </%> ", "before_line": " builder . service _ collection . add _ instance < clr _ property _ getter _ source > ( source ) ; ", "after_ctx": " <%> <-> < clr _ property _ setter _ source > </%>", "after_line": "builder . service _ collection . add _ instance ( source ) ;", "predictions": ["builder . service _ collection . add _ instance ( source ) ;"]}, {"before_ctx": "<%> <-> < clr _ property _ getter _ source > </%> ", "before_line": " builder . service _ collection . add _ instance < clr _ property _ setter _ source > ( source ) ; ", "after_ctx": " <%> <-> < entity _ materializer _ source > </%>", "after_line": "builder . service _ collection . add _ instance ( source ) ;", "predictions": ["builder . service _ collection . add _ instance ( source ) ;"]}, {"before_ctx": "<%> <-> < clr _ property _ setter _ source > </%> ", "before_line": " builder . service _ collection . add _ instance < entity _ materializer _ source > ( source ) ; ", "after_ctx": " <%> <-> < i _ logger _ factory > </%>", "after_line": "builder . service _ collection . add _ instance ( source ) ;", "predictions": ["builder . service _ collection . add _ instance ( source ) ;"]}, {"before_ctx": "<%> <-> < entity _ materializer _ source > </%> ", "before_line": " builder . service _ collection . add _ instance < i _ logger _ factory > ( factory ) ; ", "after_ctx": " ", "after_line": "builder . service _ collection . add _ instance ( factory ) ;", "predictions": ["builder . service _ collection . add _ instance ( factory ) ;"]}, {"before_ctx": " ", "before_line": " fact _ skip _ fix _ metadata _ reference _ provider _ add _ reference _ from _ name _ for _ dnxcore ", "after_ctx": " <%> <+> if not exists </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " var logger _ factory = app _ service _ provider . get _ service < i _ logger _ factory > ( ) ; var memory _ cache = app _ service _ provider . get _ service < i _ memory _ cache > ( ) ; ", "after_ctx": " <%> <*> same -> not _ null </%> <%> <*> , -> = </%> <%> <*> same -> not _ null </%> <%> <*> , -> = </%>", "after_line": "i _ logger _ factory logger _ factory ; i _ memory _ cache memory _ cache ;", "predictions": ["var logger _ factory = app _ service _ provider . get _ service < i _ logger _ factory > ( ) ; i _ memory _ cache <-> _ new _ core <%> ) </%> </%> </%> _ response _ core <%> ) </%>"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> system . data . </%> ", "before_line": " system . data . isolation _ level isolation _ level , cancellation _ token cancellation _ token = default ) = > throw new not _ implemented _ exception ( ) ; ", "after_ctx": " ", "after_line": "isolation _ level isolation _ level , cancellation _ token cancellation _ token = default ) = > throw new not _ implemented _ exception ( ) ;", "predictions": ["isolation _ level isolation _ level , cancellation _ token cancellation _ token = default ) > throw new new key _ instance ;"]}, {"before_ctx": "<%> <*> new line _ string [ ] { line _ string , line _ string } ) { srid = NUM } ; -> new [ ] { line _ string , line _ string } ) { srid = NUM } ; </%> ", "before_line": " new polygon [ ] { polygon , polygon } ) { srid = NUM } ; ", "after_ctx": " ", "after_line": "new [ ] { polygon , polygon } ) { srid = NUM } ;", "predictions": ["srid = NUM } ;"]}, {"before_ctx": "<%> <*> new line _ string [ ] { line _ string , line _ string } ) { srid = NUM } ; -> new [ ] { line _ string , line _ string } ) { srid = NUM } ; </%> ", "before_line": " new polygon [ ] { polygon , polygon } ) { srid = NUM } ; ", "after_ctx": " ", "after_line": "new [ ] { polygon , polygon } ) { srid = NUM } ;", "predictions": ["srid = NUM } ;"]}, {"before_ctx": " ", "before_line": " public task < bool > close _ async ( ) = > task . from _ result < bool > ( true ) ; ", "after_ctx": " <%> <-> system . data . </%> <%> <-> system . data . </%>", "after_line": "public task < bool > close _ async ( ) = > task . from _ result ( true ) ;", "predictions": ["public task < bool > close _ async ( ) = > task . factory _ ) token ;"]}, {"before_ctx": "<%> <-> < bool > </%> ", "before_line": " public i _ db _ context _ transaction begin _ transaction ( system . data . isolation _ level isolation _ level ) = > throw new not _ implemented _ exception ( ) ; ", "after_ctx": " <%> <-> system . data . </%>", "after_line": "public i _ db _ context _ transaction begin _ transaction ( isolation _ level isolation _ level ) = > throw new not _ implemented _ exception ( ) ;", "predictions": ["public i _ db _ context _ transaction begin _ transaction ( isolation _ [ NUM { [ [ line line { throw new new new { line new <*> > > >"]}, {"before_ctx": "<%> <-> < bool > </%> <%> <-> system . data . </%> ", "before_line": " system . data . isolation _ level isolation _ level , cancellation _ token cancellation _ token = default ) = > throw new not _ implemented _ exception ( ) ; ", "after_ctx": " ", "after_line": "isolation _ level isolation _ level , cancellation _ token cancellation _ token = default ) = > throw new not _ implemented _ exception ( ) ;", "predictions": ["isolation _ level isolation _ level , cancellation _ token cancellation _ token = instance service default test new test new ,"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ test _ models _ conference _ planner _ conference _ dto ; </%> ", "before_line": " public static conference _ dto . session _ response map _ session _ response ( this session session ) = > new conference _ dto . session _ response ", "after_ctx": " <%> <-> . select ( ss = > new conference _ dto . speaker { id = ss . speaker _ id , name = ss . speaker . name </%>", "after_line": "public static session _ response map _ session _ response ( this session session ) = > new session _ response", "predictions": ["public static session _ response map _ session _ response ( this session session ) = > new conference _ dto . session _ response"]}, {"before_ctx": " ", "before_line": " model _ builder . entity < internal _ clr _ entity _ entry _ test . full _ notification _ entity > ( ", "after_ctx": " <%> <-> internal _ clr _ entity _ entry _ test . </%>", "after_line": "model _ builder . entity < full _ notification _ entity > (", "predictions": ["model _ builder . entity < internal _ clr _ entity > ("]}, {"before_ctx": "<%> <-> internal _ clr _ entity _ entry _ test . </%> ", "before_line": " model _ builder . entity < internal _ clr _ entity _ entry _ test . changed _ only _ entity > ( ", "after_ctx": " <%> <-> internal _ clr _ entity _ entry _ test . </%>", "after_line": "model _ builder . entity < changed _ only _ entity > (", "predictions": ["model _ builder . entity < changed _ clr _ changed _ entry _ , > ["]}, {"before_ctx": "<%> <-> internal _ clr _ entity _ entry _ test . </%> ", "before_line": " model _ builder . entity < internal _ clr _ entity _ entry _ test . owner _ class > ( ", "after_ctx": " ", "after_line": "model _ builder . entity < owner _ class > (", "predictions": ["model _ builder . entity < owner _ clr _ entity _ entry _ </%> . db _ builder >"]}, {"before_ctx": " ", "before_line": " public async task < conference _ dto . attendee _ response > get ( string username ) ", "after_ctx": " <%> <-> conference _ dto . </%>", "after_line": "public async task < attendee _ response > get ( string username )", "predictions": ["public async task < get ( <@> username ) ) ) ) ) ) }"]}, {"before_ctx": "<%> <-> conference _ dto . </%> ", "before_line": " public async task < list < conference _ dto . session _ response > > get _ sessions ( string username ) ", "after_ctx": " <%> <-> conference _ dto . </%> <%> <-> conference _ dto . </%>", "after_line": "public async task < list < session _ response > > get _ sessions ( string username )", "predictions": ["public async task < list < session _ response > > get _ sessions ( factory exception level level _ sessions </%> string username ( <@> username [ </%> { </%> { </%> { </%> { </%> { </%> { </%> { </%> { </%> { <@> _ get logger , memory null . cache ( i . . i _ get ) ) app not logger , cache ( i . i _ get ) ) app not _ logger , memory null . i null )"]}, {"before_ctx": "<%> <-> conference _ dto . </%> ", "before_line": " public async task < conference _ dto . attendee _ response > post ( conference _ dto . attendee input ) ", "after_ctx": " <%> <*> attendee -> test _ models . conference _ planner . attendee </%>", "after_line": "public async task < attendee _ response > post ( attendee input )", "predictions": ["public async task < attendee _ response > post ( conference _ dto . > db ) ) builder ) _ <%> . ( ( . . model model = line {"]}, {"before_ctx": " ", "before_line": " new conference _ dto . search _ term { query = search _ term } ) ; ", "after_ctx": " <%> <-> conference _ dto . </%> <%> <-> conference _ dto . </%>", "after_line": "new search _ term { query = search _ term } ) ;", "predictions": ["new search _ term { query = search _ term } ) ;"]}, {"before_ctx": " ", "before_line": " public async task < list < conference _ dto . session _ response > > get ( ) ", "after_ctx": " <%> <-> conference _ dto . </%>", "after_line": "public async task < list < session _ response > > get ( )", "predictions": ["public async task < metadata _ not <+> <+> <+> add <@> add <@> search </%> < entity _ collection source <%> <%> <-> <-> </%> ( >"]}, {"before_ctx": "<%> <-> conference _ dto . </%> ", "before_line": " public async task < conference _ dto . session _ response > get ( int id ) ", "after_ctx": " <%> <-> conference _ dto . </%> <%> <-> conference _ dto . </%>", "after_line": "public async task < session _ response > get ( int id )", "predictions": ["public async task < session _ response > get ( int id )"]}, {"before_ctx": " ", "before_line": " public async task < list < conference _ dto . speaker _ response > > get _ speakers ( ) ", "after_ctx": " <%> <-> conference _ dto . </%>", "after_line": "public async task < list < speaker _ response > > get _ speakers ( )", "predictions": ["public async task < list < speaker _ response > > get _ speakers context db"]}, {"before_ctx": "<%> <-> conference _ dto . </%> ", "before_line": " public async task < conference _ dto . speaker _ response > get _ speaker ( int id ) ", "after_ctx": " ", "after_line": "public async task < speaker _ response > get _ speaker ( int id )", "predictions": ["public async task < speaker _ response > get _ speaker ( if <@> , ; public )"]}, {"before_ctx": "<%> <+> using system ; using system _ linq ; using system _ threading _ tasks ; using microsoft _ asp _ net _ diagnostics _ views ; </%> <%> <-> using system ; using system _ linq ; </%> ", "before_line": " using system _ globalization   ; using system _ threading _ tasks ; public class database _ error _ page : microsoft . asp _ net . diagnostics . views . base _ view ", "after_ctx": " <%> <*> public microsoft . asp _ net . diagnostics . entity . views . -> public </%> <%> <-> public database _ error _ page ( ) { } </%>", "after_line": "public class database _ error _ page : base _ view", "predictions": ["public class database _ error _ page : base _ view"]}, {"before_ctx": "<%> <+> using microsoft _ asp _ net _ diagnostics _ views ; </%> <%> <-> using system ; using system _ linq ; using system _ globalization </%> <%> <*> ; using system _ threading _ tasks ; public class database _ error _ page : microsoft . asp _ net . diagnostics . views . base _ view -> public class database _ error _ page : base _ view </%> ", "before_line": " public microsoft . asp _ net . diagnostics . entity . views . database _ error _ page _ model model { get ; set ; }    public database _ error _ page ( ) { } ", "after_ctx": " ", "after_line": "public database _ error _ page _ model model { get ; set ; }", "predictions": ["public database _ error _ page _ model model { get ; set = } public } ) if ) if _ ( ) expression if . null if page ( </%> builder _ <*> . = -> ) </%>"]}, {"before_ctx": "<%> <+> } </%> <%> <-> return ; </%> ", "before_line": " var query _ model _ visitor = this . create _ querying _ expression _ tree _ visitor ( query _ source _ mock . object ) ; assert . is _ type < redis _ query _ model _ visitor . redis _ querying _ expression _ tree _ visitor > ( query _ model _ visitor ) ; ", "after_ctx": " ", "after_line": "var query _ model _ visitor = create _ querying _ expression _ tree _ visitor ( query _ source _ mock . object ) ; assert . is _ type < redis _ querying _ expression _ tree _ visitor > ( query _ model _ visitor ) ;", "predictions": ["var query _ model _ visitor = create _ querying _ expression _ name _ ( ( query _ <%> [ source _ and [ = builder _ , _ . view _ . net view _ . view view _ ( _ expression _ > type type type ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = )"]}, {"before_ctx": "<%> <*> ats _ db _ context _ extensions -> options </%> <%> <-> options , </%> ", "before_line": " ats _ db _ context _ extensions . use _ azure _ table _ storage ( options , connection _ string , false ) ; ", "after_ctx": " <%> <*> ats _ db _ context _ extensions -> options </%> <%> <-> options , </%>", "after_line": "options . use _ azure _ table _ storage ( connection _ string , false ) ;", "predictions": ["use _ azure _ table _ storage ( options , connection _ create . use . if _ ; add _ ; ) not"]}, {"before_ctx": "<%> <*> ats _ db _ context _ extensions -> options </%> <%> <-> options , </%> ", "before_line": " ats _ db _ context _ extensions . use _ azure _ table _ storage ( options , STR , true ) ; ", "after_ctx": " ", "after_line": "options . use _ azure _ table _ storage ( STR , true ) ;", "predictions": ["use _ azure _ table _ storage ( options , STR , assert _ = _ assert _ false <*> <*> <*> <*> <*> ) ="]}, {"before_ctx": " ", "before_line": " assert . throws < argument _ exception > ( ( ) = > ats _ db _ context _ extensions . use _ azure _ table _ storage ( options , name , key ) ) . message ", "after_ctx": " <%> <*> ats _ db _ context _ extensions -> options </%> <%> <-> options , </%>", "after_line": "assert . throws < argument _ exception > ( ( ) = > options . use _ azure _ table _ storage ( name , key ) ) . message", "predictions": ["assert . throws < argument _ exception > ( ( ) = factory ( key _ db _ ( _ factory <-> , name , call _ ) _ <+>"]}, {"before_ctx": "<%> <*> ats _ db _ context _ extensions -> options </%> <%> <-> options , </%> ", "before_line": " assert . throws < argument _ exception > ( ( ) = > ats _ db _ context _ extensions . use _ azure _ table _ storage ( options , STR ) ) . message ", "after_ctx": " ", "after_line": "assert . throws < argument _ exception > ( ( ) = > options . use _ azure _ table _ storage ( STR ) ) . message", "predictions": ["assert . throws < argument _ exception > ( ( ) = > ) . { ( . _ is _ is _ return ( <*> expression ) _ create _ = _ if command command <%> ( ( ( ) ; ) ;"]}, {"before_ctx": "<%> <*> it . is _ any < i _ relational _ transaction > ( ) , relational _ type _ mapper , it . is _ any < db _ context > ( ) , -> it . is _ any < i _ relational _ connection > ( ) , </%> ", "before_line": " public batch _ executor _ for _ test ( i _ relational _ type _ mapper type _ mapper ) : base ( type _ mapper , test _ helpers . instance . create _ context ( ) , new logger _ factory ( ) ) ", "after_ctx": " <%> <-> private class concrete _ type _ mapper : relational _ type _ mapper { protected override string get _ column _ type ( i _ property property ) = > property . test _ provider ( ) . column _ type ; protected override i _ read _ only _ dictionary < type , relational _ type _ mapping > simple _ mappings { get ; } = new dictionary < type , relational _ type _ mapping > ( ) ; protected override i _ read _ only _ dictionary < string , relational _ type _ mapping > simple _ name _ mappings { get ; } </%>", "after_line": "public batch _ executor _ for _ test ( ) : base ( new logger _ factory ( ) )", "predictions": ["public batch _ executor _ for _ test ( i _ relational _ type _ mapper type _ mapper ) : base ( type _ mapper , test _ helpers . instance . create _ context ( ) , new logger _ protected size ( ( ( ( ( ( ( ( ( i _ type _ parameters type type _ parameters ( i _ parameters ( ( ( ( i _ type _ parameters ( ( i _ type _ parameters type type _ parameters ( ( logger _ private _ parameters _ parameters > _ parameters ( i"]}, {"before_ctx": "<%> <*> not _ null i _ relational _ connection connection , not _ null i _ relational _ type _ mapper type _ mapper , int? command _ timeout ) -> not _ null i _ relational _ connection connection ) </%> ", "before_line": " var command = command _ builder . build _ relational _ command ( ) . create _ command ( connection ) ; if ( command _ timeout ! = null ) { command . command _ timeout = ( int ) command _ timeout ; } return command ; ", "after_ctx": " ", "after_line": "return command _ builder . build _ relational _ command ( ) . create _ command ( connection ) ;", "predictions": ["return command _ builder . build _ relational _ command ( ) . diagnostics ;"]}, {"before_ctx": "<%> <*> , i _ db _ context _ options options ) -> ) </%> <%> <-> options , annotation _ provider </%> ", "before_line": " if ( ! modification _ command _ batch _ factory . add _ command ( batch , modification _ command ) ) ", "after_ctx": " <%> <-> options , annotation _ provider </%> <%> <-> modification _ command _ </%> <%> <-> _ factory </%> <%> <-> batch , </%>", "after_line": "if ( ! batch . add _ command ( modification _ command ) )", "predictions": ["if ( ! batch _ command _ batch _ factory . add _ null , </%> [ command null null null )"]}, {"before_ctx": "<%> <-> options , annotation _ provider </%> <%> <-> modification _ command _ </%> <%> <-> _ factory </%> <%> <-> batch , </%> ", "before_line": " batch = modification _ command _ batch _ factory . create ( options , annotation _ provider ) ; modification _ command _ batch _ factory . add _ command ( batch , modification _ command ) ; ", "after_ctx": " <%> <+> e = > </%>", "after_line": "batch = modification _ command _ batch _ factory . create ( ) ; batch . add _ command ( modification _ command ) ;", "predictions": ["batch = modification _ command _ batch _ factory . create ( -> ) factory ! nameof source <+> <+> <+> <+>"]}, {"before_ctx": "<%> <*> = > new sequence ( ( i _ mutable _ model ) model , -> = > sequence . get _ or _ add _ sequence ( ( i _ mutable _ model ) model , </%> ", "before_line": " check . not _ empty ( name , nameof ( name ) ) , check . null _ but _ not _ empty ( schema , nameof ( schema ) ) ) ; ", "after_ctx": " ", "after_line": "name , schema ) ;", "predictions": ["check . not _ empty ( name , nameof ( name ) _ and [ in _ microsoft _ <+> _ error . schema using database . schema ; = expression = { memory ( { = expression = = expression ( ! ( ! ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ( schema ("]}, {"before_ctx": "<%> <+> ( </%> <%> <+> ) </%> ", "before_line": " where [ e ] . [ nullable _ string _ a ] not in ( ' foo ' ) and [ e ] . [ nullable _ string _ a ] is not null STR ", "after_ctx": " <%> <+> ( </%> <%> <+> ) </%>", "after_line": "where ( [ e ] . [ nullable _ string _ a ] not in ( ' foo ' ) and [ e ] . [ nullable _ string _ a ] is not null ) STR", "predictions": ["where [ e ] . [ nullable _ string _ a ] ( ' connection db ; </@> [ factory ) ) </@> [ = context model </%> not <->"]}, {"before_ctx": "<%> <+> ( </%> <%> <+> ) </%> ", "before_line": " where [ e ] . [ nullable _ string _ a ] in ( ' foo ' ) or [ e ] . [ nullable _ string _ a ] is null STR ", "after_ctx": " <%> <+> ( </%> <%> <+> ) </%>", "after_line": "where ( [ e ] . [ nullable _ string _ a ] in ( ' foo ' ) or [ e ] . [ nullable _ string _ a ] is null ) STR", "predictions": ["where [ e ] . [ nullable _ string _ a ] <@> <%> <%> </@> -> ; </@> equals _ null _ <%> = = add ."]}, {"before_ctx": "<%> <+> ( </%> <%> <+> ) </%> ", "before_line": " where [ e ] . [ nullable _ string _ a ] in ( ' foo ' ) or [ e ] . [ nullable _ string _ a ] is null STR ", "after_ctx": " <%> <-> where [ e ] . [ nullable _ string _ a ] not in ( ' foo ' , prm ) and [ e ] . [ nullable _ string _ a ] is not null STR </%>", "after_line": "where ( [ e ] . [ nullable _ string _ a ] in ( ' foo ' ) or [ e ] . [ nullable _ string _ a ] is null ) STR", "predictions": ["where [ e ] . [ nullable _ string _ a ] ! ; connection _ </%> database database net net database database . public ;"]}, {"before_ctx": " ", "before_line": " foreach ( var entity _ type in entity _ types . where ( et = > et . base _ type = = null ) ) ", "after_ctx": " <%> <*> var current _ primary _ key = entity _ type . find _ primary _ key ( ) ; if ( ( current _ primary _ key ! = null ) & & ( current _ primary _ key . properties . count > 1 ) ) -> if ( entity _ type . base _ type = = null ) </%> <%> <*> var new _ key = entity _ type . builder . primary _ key ( new list < string > { current _ primary _ key . properties . first ( ) . name } , configuration _ source . data _ annotation ) ; if ( new _ key ! = null ) -> var current _ primary _ key = entity _ type . find _ primary _ key ( ) ; </%>", "after_line": "foreach ( var entity _ type in entity _ types )", "predictions": ["foreach ( var entity _ type in entity _ types . where ( et = > et . base _ type = = null ) )"]}, {"before_ctx": "<%> <-> private static store _ type _ postfix get _ store _ type _ postfix ( bool unicode , int? size ) = > unicode ? size . has _ value & & size < = unicode _ max ? store _ type _ postfix . size : store _ type _ postfix . none : size . has _ value & & size < = ansi _ max ? store _ type _ postfix . size : store _ type _ postfix . none ; </%> ", "before_line": " = > new sql _ server _ string _ type _ mapping ( parameters . with _ store _ type _ and _ size ( store _ type , size , get _ store _ type _ postfix ( is _ unicode , size ) ) ) ; ", "after_ctx": " <%> <*> public override core _ type _ mapping clone ( value _ converter converter ) = > new sql _ server _ string _ type _ mapping ( parameters . with _ composed _ converter ( converter ) ) ; -> protected override relational _ type _ mapping clone ( relational _ type _ mapping _ parameters parameters ) </%> <%> <+> = > new sql _ server _ string _ type _ mapping ( parameters ) ; </%>", "after_line": "= > new sql _ server _ string _ type _ mapping ( parameters . with _ store _ type _ and _ size ( store _ type , size ) ) ;", "predictions": ["= > new sql _ server _ string _ type _ mapping ( store _ type , size , get _ store _ type _ postfix ( is _ unicode , size ) ) ;"]}, {"before_ctx": "<%> <-> private readonly string sql ; </%> ", "before_line": " public virtual string sql { get { return sql ; } } public virtual bool suppress _ transaction { get ; set ; } ", "after_ctx": " ", "after_line": "public virtual string sql { get ; } public virtual bool suppress _ transaction { get ; set ; }", "predictions": ["public virtual string sql { get { return sql ; }"]}, {"before_ctx": " ", "before_line": " connection _ mock . protected ( ) . verify ( STR , times . once ( ) , new object [ ] { true } ) ; ", "after_ctx": " <%> <-> new object [ ] { </%> <%> <-> } </%>", "after_line": "connection _ mock . protected ( ) . verify ( STR , times . once ( ) , true ) ;", "predictions": ["connection _ mock . protected ( ) . verify ( STR , null [ ] </%> . context , new ) -> -> -> ;"]}, {"before_ctx": " ", "before_line": " connection _ mock . protected ( ) . verify ( STR , times . never ( ) , new object [ ] { true } ) ; ", "after_ctx": " <%> <-> new object [ ] { </%> <%> <-> } </%>", "after_line": "connection _ mock . protected ( ) . verify ( STR , times . never ( ) , true ) ;", "predictions": ["connection _ mock . protected ( ) . verify ( STR , where </%> e [ ] . ( ( ( ( ( ( ( options equals factory . <@> } = <%> <+> = ? not . i not . net ) . <*> diagnostics . ) using . diagnostics . ) using . diagnostics . ) using . diagnostics . ) using . diagnostics . ) using ( . . public . . public diagnostics ) microsoft base . ) using . diagnostics . ) microsoft system microsoft system ;"]}, {"before_ctx": "<%> <-> new object [ ] { </%> <%> <-> } </%> ", "before_line": " connection _ mock . protected ( ) . verify ( STR , times . never ( ) , new object [ ] { true } ) ; ", "after_ctx": " ", "after_line": "connection _ mock . protected ( ) . verify ( STR , times . never ( ) , true ) ;", "predictions": ["connection _ mock . protected ( ) . verify ( STR , times ( = = . a [ ] e <+> <+> <+> <+> ( options equals ] <%> <%> } ( ( empty _ ] , ] ] ] command command . i } . <*> } ) . <*> _ STR _ : . ( . . public . microsoft ] net } . ( . public _ ] _ . _ public ) ) <-> . ( . . . . . } . <*> _ mock _ STR _ : . view _ : {"]}, {"before_ctx": "<%> <+> predicate = translate _ lambda _ expression ( source , predicate ) ; if ( predicate = = null ) { return null ; } </%> ", "before_line": " translate _ lambda _ expression ( source , predicate ) ) ; ", "after_ctx": " <%> <*> in _ memory _ query _ expression . server _ query _ expression = predicate = = null ? expression . call ( -> if ( predicate = = null ) </%> <%> <+> { </%>", "after_line": "predicate ) ;", "predictions": ["source ) ;"]}, {"before_ctx": "<%> <*> in _ memory _ query _ expression . server _ query _ expression = predicate = = null ? expression . call ( -> if ( predicate = = null ) </%> <%> <+> { in _ memory _ query _ expression . server _ query _ expression = expression . call ( </%> <%> <*> in _ memory _ query _ expression . server _ query _ expression ) : expression . call ( -> in _ memory _ query _ expression . server _ query _ expression ) ; </%> <%> <+> } else { predicate = translate _ lambda _ expression ( source , predicate ) ; if ( predicate = = null ) { return null ; } in _ memory _ query _ expression . server _ query _ expression = expression . call ( </%> ", "before_line": " translate _ lambda _ expression ( source , predicate ) ) ; ", "after_ctx": " ", "after_line": "predicate ) ; }", "predictions": ["source ) ;"]}, {"before_ctx": "<%> <+> predicate = translate _ lambda _ expression ( source , predicate ) ; if ( predicate = = null ) { return null ; } </%> ", "before_line": " translate _ lambda _ expression ( source , predicate ) ) ; ", "after_ctx": " ", "after_line": "predicate ) ;", "predictions": ["source ) ;"]}, {"before_ctx": "<%> <+> predicate = translate _ lambda _ expression ( source , predicate ) ; if ( predicate = = null ) { return null ; } </%> ", "before_line": " translate _ lambda _ expression ( source , predicate ) ) ; ", "after_ctx": " ", "after_line": "predicate ) ;", "predictions": ["source ) ;"]}, {"before_ctx": "<%> <*> var predicate = expression . lambda ( equals , parameter ) ; -> var predicate = translate _ lambda _ expression ( source , expression . lambda ( equals , parameter ) ) ; </%> <%> <+> if ( predicate = = null ) { return null ; } </%> ", "before_line": " translate _ lambda _ expression ( source , predicate ) ) ; ", "after_ctx": " ", "after_line": "predicate ) ;", "predictions": ["source ) ;"]}, {"before_ctx": "<%> <+> count = translate _ expression ( count ) ; if ( count = = null ) { return null ; } </%> ", "before_line": " translate _ expression ( count ) ) ; ", "after_ctx": " <%> <+> count = translate _ expression ( count ) ; </%>", "after_line": "count ) ;", "predictions": ["count ) ;"]}, {"before_ctx": "<%> <+> count = translate _ expression ( count ) ; if ( count = = null ) { return null ; } </%> ", "before_line": " translate _ expression ( count ) ) ; ", "after_ctx": " <%> <+> if ( key _ selector = = null ) { </%>", "after_line": "count ) ;", "predictions": ["count ) ;"]}, {"before_ctx": "<%> <+> predicate = translate _ lambda _ expression ( source , predicate ) ; if ( predicate = = null ) { return null ; } </%> ", "before_line": " translate _ lambda _ expression ( source , predicate ) ) ; ", "after_ctx": " ", "after_line": "predicate ) ;", "predictions": ["source ) ;"]}, {"before_ctx": " ", "before_line": " public class change _ tracker : i _ infrastructure < i _ state _ manager > , i _ resettable _ service ", "after_ctx": " <%> <+> readonly </%>", "after_line": "public class change _ tracker : i _ resettable _ service", "predictions": ["public class change _ tracker : i _ <-> </%> </%> <%>"]}, {"before_ctx": "<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ inheritance _ relationships ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " public class inheritance _ relationships _ query _ sqlite _ fixture : inheritance _ relationships _ query _ relational _ fixture < sqlite _ test _ store > ", "after_ctx": " <%> <-> private readonly i _ service _ provider service _ provider ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public inheritance _ relationships _ query _ sqlite _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory ) . build _ service _ provider ( validate _ scopes : true ) ; </%>", "after_line": "public class inheritance _ relationships _ query _ sqlite _ fixture : inheritance _ relationships _ query _ relational _ fixture", "predictions": ["public class inheritance _ relationships _ query _ sqlite _ fixture : inheritance _ relationships _ query _ relational _ fixture"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ diagnostics ; </%> <%> <+> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public abstract class inheritance _ relational _ fixture < t _ test _ store > : inheritance _ fixture _ base < t _ test _ store > where t _ test _ store : test _ store ", "after_ctx": " <%> <*> public override void on _ model _ creating ( model _ builder model _ builder ) -> public test _ sql _ logger _ factory test _ sql _ logger _ factory = > ( test _ sql _ logger _ factory ) service _ provider . get _ required _ service < i _ logger _ factory > ( ) ; </%> <%> <+> protected override void on _ model _ creating ( model _ builder model _ builder , db _ context context ) </%> <%> <+> , context </%>", "after_line": "public abstract class inheritance _ relational _ fixture : inheritance _ fixture _ base", "predictions": ["public abstract class inheritance _ relational _ fixture : inheritance _ fixture _ base"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> ", "before_line": " public class funky _ data _ query _ sql _ server _ fixture : funky _ data _ query _ fixture _ base < sql _ server _ test _ store > ", "after_ctx": " <%> <*> public const string database _ name = STR ; private readonly db _ context _ options options ; private readonly string connection _ string = sql _ server _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public funky _ data _ query _ sql _ server _ fixture ( ) -> public test _ sql _ logger _ factory test _ sql _ logger _ factory = > ( test _ sql _ logger _ factory ) service _ provider . get _ required _ service < i _ logger _ factory > ( ) ; </%> <%> <+> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; public override funky _ data _ context create _ context ( ) </%>", "after_line": "public class funky _ data _ query _ sql _ server _ fixture : funky _ data _ query _ fixture _ base", "predictions": ["public class funky _ data _ query _ sql _ server _ fixture : funky _ data _ query _ fixture _ base"]}, {"before_ctx": "<%> <-> _ models _ complex _ navigations </%> <%> <*> model -> utilities </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public class complex _ navigations _ owned _ query _ sql _ server _ fixture : complex _ navigations _ owned _ query _ relational _ fixture _ base < sql _ server _ test _ store > ", "after_ctx": " <%> <-> public static readonly string database _ name = STR ; private readonly db _ context _ options options ; private readonly string connection _ string = sql _ server _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public complex _ navigations _ owned _ query _ sql _ server _ fixture ( ) { var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>", "after_line": "public class complex _ navigations _ owned _ query _ sql _ server _ fixture : complex _ navigations _ owned _ query _ relational _ fixture _ base", "predictions": ["public class complex _ navigations _ owned _ query _ sql _ server _ fixture : complex _ navigations _ owned _ query _ relational _ < _ <-> {"]}, {"before_ctx": "<%> <*> using microsoft _ entity _ framework _ core _ test _ models _ complex _ navigations _ model ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " public class complex _ navigations _ owned _ query _ sqlite _ fixture : complex _ navigations _ owned _ query _ relational _ fixture _ base < sqlite _ test _ store > ", "after_ctx": " <%> <-> public static readonly string database _ name = STR ; private readonly db _ context _ options options ; private readonly string connection _ string = sqlite _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public complex _ navigations _ owned _ query _ sqlite _ fixture ( ) { var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>", "after_line": "public class complex _ navigations _ owned _ query _ sqlite _ fixture : complex _ navigations _ owned _ query _ relational _ fixture _ base", "predictions": ["public class complex _ navigations _ owned _ query _ sqlite _ fixture : complex _ navigations _ owned _ query _ relational _ fixture _ base"]}, {"before_ctx": "<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ inheritance ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " public class inheritance _ sqlite _ fixture : inheritance _ relational _ fixture < sqlite _ test _ store > ", "after_ctx": " <%> <-> protected virtual string database _ name = > STR ; private readonly i _ service _ provider service _ provider ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public inheritance _ sqlite _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory ) </%>", "after_line": "public class inheritance _ sqlite _ fixture : inheritance _ relational _ fixture", "predictions": ["public class inheritance _ sqlite _ fixture : inheritance _ relational _ fixture"]}, {"before_ctx": "<%> <*> using microsoft _ entity _ framework _ core _ diagnostics ; using microsoft _ entity _ framework _ core _ test _ models _ gears _ of _ war _ model ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " public class gears _ of _ war _ query _ sqlite _ fixture : gears _ of _ war _ query _ relational _ fixture < sqlite _ test _ store > ", "after_ctx": " <%> <-> public static readonly string database _ name = STR ; private readonly db _ context _ options options ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public gears _ of _ war _ query _ sqlite _ fixture ( ) { var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory ) </%>", "after_line": "public class gears _ of _ war _ query _ sqlite _ fixture : gears _ of _ war _ query _ relational _ fixture", "predictions": ["public class gears _ of _ war _ query _ sqlite _ fixture : gears _ of _ war _ query _ relational _ fixture"]}, {"before_ctx": "<%> <-> _ models </%> <%> <*> inheritance -> utilities </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public class inheritance _ sql _ server _ fixture : inheritance _ relational _ fixture < sql _ server _ test _ store > ", "after_ctx": " <%> <-> protected virtual string database _ name = > STR ; private readonly db _ context _ options options ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public inheritance _ sql _ server _ fixture ( ) { var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory ) </%>", "after_line": "public class inheritance _ sql _ server _ fixture : inheritance _ relational _ fixture", "predictions": ["public class inheritance _ sql _ server _ fixture : inheritance _ relational _ fixture"]}, {"before_ctx": "<%> <-> using system _ collections _ generic ; </%> ", "before_line": " public abstract class complex _ navigations _ owned _ query _ fixture _ base < t _ test _ store > : complex _ navigations _ query _ fixture _ base < t _ test _ store > where t _ test _ store : test _ store ", "after_ctx": " <%> <*> public complex _ navigations _ owned _ query _ fixture _ base ( ) -> protected override string store _ name { get ; } = STR ; </%> <%> <+> protected complex _ navigations _ owned _ query _ fixture _ base ( ) </%> <%> <+> , db _ context context </%>", "after_line": "public abstract class complex _ navigations _ owned _ query _ fixture _ base : complex _ navigations _ query _ fixture _ base", "predictions": ["public abstract class complex _ navigations _ owned _ query _ fixture _ base : complex _ ; _ <+> _ ) _ )"]}, {"before_ctx": "<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ inheritance _ relationships ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public class inheritance _ relationships _ query _ sql _ server _ fixture : inheritance _ relationships _ query _ relational _ fixture < sql _ server _ test _ store > ", "after_ctx": " <%> <-> public static readonly string database _ name = STR ; private readonly i _ service _ provider service _ provider ; private readonly string connection _ string = sql _ server _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public inheritance _ relationships _ query _ sql _ server _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>", "after_line": "public class inheritance _ relationships _ query _ sql _ server _ fixture : inheritance _ relationships _ query _ relational _ fixture", "predictions": ["public class inheritance _ relationships _ query _ sql _ server _ fixture : sql _ server _ test _ store"]}, {"before_ctx": "<%> <+> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public abstract class inheritance _ relationships _ query _ relational _ fixture < t _ test _ store > : inheritance _ relationships _ query _ fixture _ base < t _ test _ store > where t _ test _ store : test _ store ", "after_ctx": " <%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory = > ( test _ sql _ logger _ factory ) service _ provider . get _ required _ service < i _ logger _ factory > ( ) ; </%>", "after_line": "public abstract class inheritance _ relationships _ query _ relational _ fixture : inheritance _ relationships _ query _ fixture _ base", "predictions": ["public abstract class inheritance _ relationships _ query _ relational _ fixture : inheritance _ , _ -> _ using _ lazy"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ diagnostics ; </%> <%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public class gears _ of _ war _ query _ sql _ server _ fixture : gears _ of _ war _ query _ relational _ fixture < sql _ server _ test _ store > ", "after_ctx": " <%> <*> public const string database _ name = STR ; private readonly db _ context _ options options ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public gears _ of _ war _ query _ sql _ server _ fixture ( ) -> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </%> <%> <+> protected override void on _ model _ creating ( model _ builder model _ builder , db _ context context ) </%> <%> <-> var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) </%>", "after_line": "public class gears _ of _ war _ query _ sql _ server _ fixture : gears _ of _ war _ query _ relational _ fixture", "predictions": ["public class gears _ of _ war _ query _ sql _ server _ fixture : gears _ of _ war _ query _ relational _ fixture"]}, {"before_ctx": "<%> <*> system ; -> microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <*> test _ models _ funky _ data _ model ; -> utilities ; </%> ", "before_line": " public class funky _ data _ query _ sqlite _ fixture : funky _ data _ query _ fixture _ base < sqlite _ test _ store > ", "after_ctx": " <%> <-> public static readonly string database _ name = STR ; private readonly i _ service _ provider service _ provider ; private readonly string connection _ string = sqlite _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public funky _ data _ query _ sqlite _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>", "after_line": "public class funky _ data _ query _ sqlite _ fixture : funky _ data _ query _ fixture _ base", "predictions": ["public class funky _ data _ query _ sqlite _ fixture : funky _ data _ add _ <%> _ base"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ diagnostics ; </%> <%> <+> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public abstract class complex _ navigations _ owned _ query _ relational _ fixture _ base < t _ test _ store > : complex _ navigations _ owned _ query _ fixture _ base < t _ test _ store > where t _ test _ store : test _ store ", "after_ctx": " <%> <*> protected override void on _ model _ creating ( model _ builder model _ builder ) -> public test _ sql _ logger _ factory test _ sql _ logger _ factory = > ( test _ sql _ logger _ factory ) service _ provider . get _ required _ service < i _ logger _ factory > ( ) ; </%> <%> <+> protected override void on _ model _ creating ( model _ builder model _ builder , db _ context context ) </%> <%> <+> , context </%>", "after_line": "public abstract class complex _ navigations _ owned _ query _ relational _ fixture _ base : complex _ navigations _ owned _ query _ fixture _ base", "predictions": ["public abstract class complex _ navigations _ owned _ query _ relational _ fixture _ model microsoft t _ annotations _ check _ fixture _ logger framework </%> _ store"]}, {"before_ctx": " ", "before_line": " public interface i _ identity _ generator < t > ", "after_ctx": " <%> <*> t -> object </%>", "after_line": "public interface i _ identity _ generator", "predictions": ["public interface i _ identity _ generator"]}, {"before_ctx": "<%> <*> runtime -> i </%> ", "before_line": " return new runtime _ model ( model , new entity _ key _ factory _ source ( ) ) ; ", "after_ctx": " <%> <*> runtime -> i </%>", "after_line": "return model ;", "predictions": ["return model ;"]}, {"before_ctx": "<%> <*> runtime -> i </%> ", "before_line": " return new runtime _ model ( model , new entity _ key _ factory _ source ( ) ) ; ", "after_ctx": " ", "after_line": "return model ;", "predictions": ["return model ;"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ internal ; using microsoft _ data _ entity _ metadata ; </%> <%> <-> using microsoft _ framework _ logging ; </%> ", "before_line": " public class database : i _ accessor < i _ data _ store _ creator > , i _ accessor < i _ logger > , i _ accessor < i _ model > , i _ accessor < i _ service _ provider > ", "after_ctx": " <%> <-> private readonly lazy _ ref < i _ logger > logger ; </%> <%> <*> not _ null i _ data _ store _ creator data _ store _ creator , not _ null i _ logger _ factory logger _ factory ) -> not _ null i _ data _ store _ creator data _ store _ creator ) </%>", "after_line": "public class database : i _ accessor < i _ service _ provider >", "predictions": ["public class database : i _ accessor < i _ data _ store _ creator </%> <+> test _ logger <%> <+> ( ; ; sql _ factory test . ; public test _ server factory factory <%>"]}, {"before_ctx": "<%> <-> using system ; using system _ collections _ generic ; using system _ linq ; using jet _ brains _ annotations ; using microsoft _ data _ entity _ metadata ; </%> <%> <-> using microsoft _ data _ entity _ utilities ; </%> ", "before_line": " public class sql _ server _ value _ generation _ strategy _ convention : i _ key _ convention , i _ foreign _ key _ removed _ convention , i _ foreign _ key _ convention , i _ model _ convention ", "after_ctx": " <%> <-> public virtual internal _ key _ builder apply ( internal _ key _ builder key _ builder ) { check . not _ null ( key _ builder , nameof ( key _ builder ) ) ; var key = key _ builder . metadata ; configure _ value _ generation _ strategy ( key _ builder . model _ builder . entity ( key . entity _ type . name , configuration _ source . convention ) , key . properties , true ) ; return key _ builder ; </%>", "after_line": "public class sql _ server _ value _ generation _ strategy _ convention : i _ model _ convention", "predictions": ["public class sql _ server _ value _ generation _ strategy _ convention : i _ foreign _ sql _ removed _ . ) sql _ foreign _ test _ ( </%> _ logger _ factory"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ metadata ; </%> ", "before_line": " namespace microsoft _ data _ entity _ sql _ server _ tests _ metadata _ conventions ", "after_ctx": " ", "after_line": "namespace microsoft _ data _ entity _ metadata _ conventions _ tests", "predictions": ["namespace microsoft _ data _ entity _ sql _ entity _ entity _ ]"]}, {"before_ctx": "<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> ", "before_line": " mapping _ hints . with ( default _ hints ) ) ", "after_ctx": " ", "after_line": "default _ hints . with ( mapping _ hints ) )", "predictions": ["mapping _ hints . with ( default _ hints ) )"]}, {"before_ctx": "<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> ", "before_line": " mapping _ hints . with ( default _ hints ) ) ", "after_ctx": " ", "after_line": "default _ hints . with ( mapping _ hints ) )", "predictions": ["mapping _ hints . with ( default _ hints ) )"]}, {"before_ctx": "<%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> ", "before_line": " mapping _ hints . with ( default _ hints ) ) ", "after_ctx": " <%> <*> store -> provider </%> <%> <*> store -> provider </%>", "after_line": "default _ hints . with ( mapping _ hints ) )", "predictions": ["mapping _ hints . with ( default _ expression = null = null default </%> store ) ) <%> ) ) <%> ."]}, {"before_ctx": "<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> ", "before_line": " mapping _ hints . with ( default _ hints ) ) ", "after_ctx": " ", "after_line": "default _ hints . with ( mapping _ hints ) )", "predictions": ["mapping _ hints . with ( default _ hints ) )"]}, {"before_ctx": "<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> ", "before_line": " mapping _ hints . with ( default _ hints ) ) ", "after_ctx": " ", "after_line": "default _ hints . with ( mapping _ hints ) )", "predictions": ["mapping _ hints . with ( default _ hints ) )"]}, {"before_ctx": "<%> <+> can _ be _ null </%> <%> <*> default -> null </%> ", "before_line": " mapping _ hints . with ( default _ hints ) ) ", "after_ctx": " <%> <-> , default _ hints </%>", "after_line": "mapping _ hints )", "predictions": ["mapping _ hints . with ( default _ <*> ) )"]}, {"before_ctx": "<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> ", "before_line": " mapping _ hints . with ( default _ hints ) ) ", "after_ctx": " ", "after_line": "default _ hints . with ( mapping _ hints ) )", "predictions": ["mapping _ hints . with ( default _ hints ) )"]}, {"before_ctx": "<%> <+> can _ be _ null </%> <%> <*> default -> null </%> ", "before_line": " mapping _ hints . with ( default _ hints ) ) ", "after_ctx": " ", "after_line": "default _ hints . with ( mapping _ hints ) )", "predictions": ["mapping _ hints . with ( default _ ; data data data data )"]}, {"before_ctx": "<%> <+> namespace microsoft _ entity _ framework _ core _ storage _ value _ conversion </%> <%> <+> [ can _ be _ null ] </%> <%> <*> default -> null </%> ", "before_line": " mapping _ hints . with ( default _ hints ) ) ", "after_ctx": " ", "after_line": "default _ hints . with ( mapping _ hints ) )", "predictions": ["mapping _ hints . with ( default _ hints ) )"]}, {"before_ctx": "<%> <*> select -> select [ c ] . [ customer _ id ] , </%> <%> <-> ] , [ c ] . [ customer _ id </%> <%> <*> select -> select [ c ] . [ customer _ id ] , </%> <%> <-> ] , [ c ] . [ customer _ id </%> ", "before_line": " select [ o ] . [ customer _ id ] , [ o ] . [ order _ date ] , [ o ] . [ order _ id ] ", "after_ctx": " <%> <*> select -> select [ c ] . [ customer _ id ] , </%> <%> <-> ] , [ c ] . [ customer _ id </%>", "after_line": "select [ o ] . [ order _ id ] , [ o ] . [ customer _ id ] , [ o ] . [ order _ date ]", "predictions": ["select [ o ] . [ customer _ id ] , [ o ] . _ order database . _ execute ( _ execute ( _ execute ( _ execute ( _ execute ] . _ , . _ , . _ , . ; ,"]}, {"before_ctx": "<%> <+> private readonly byte precision ; </%> ", "before_line": " private readonly byte precision ; public relational _ decimal _ type _ mapping ( byte scale , byte precision ) : base ( STR + scale + STR + precision + STR , db _ type . decimal ) ", "after_ctx": " <%> <+> precision = precision ; </%> <%> <-> precision = precision ; </%>", "after_line": "public relational _ decimal _ type _ mapping ( byte precision , byte scale ) : base ( STR + precision + STR + scale + STR , db _ type . decimal )", "predictions": ["public readonly byte precision ; public relational _ decimal _ type </%> mapping . func ( , ) ( null tests , is _ type ( STR . _ scale STR STR . not _ event )"]}, {"before_ctx": "<%> <*> ) -> & & is _ concurrency _ token ) </%> ", "before_line": " if ( is _ key ) { return key _ byte _ array _ mapping ; } if ( is _ concurrency _ token ) { return row _ version _ mapping ; } return non _ key _ byte _ array _ mapping ; ", "after_ctx": " <%> <-> if ( property _ type = = typeof ( decimal ) ) { return decimal _ mapping ; } </%>", "after_line": "return row _ version _ mapping ;", "predictions": ["return key _ byte _ array _ mapping ;"]}, {"before_ctx": "<%> <*> annotation value ; return annotations . has _ value & & annotations . value . try _ get _ value ( new annotation ( annotation _ name , STR ) , out value ) ? value . value : null ; -> return annotations [ annotation _ name ] ; </%> <%> <*> var annotation = new annotation ( annotation _ name , value ) ; annotations . value = annotations . value . remove ( annotation ) . add ( annotation ) ; -> annotations [ annotation _ name ] = value ; </%> ", "before_line": " public virtual i _ read _ only _ list < annotation > annotations ", "after_ctx": " <%> <*> get { return annotations . has _ value ? ( i _ read _ only _ list < annotation > ) annotations . value : immutable _ list < annotation > . empty ; } -> get { return annotations ; } </%> <%> <-> _ read _ only </%> <%> <*> list -> enumerable </%>", "after_line": "public virtual annotations annotations", "predictions": ["public virtual i _ read _ only _ list < annotation > annotations"]}, {"before_ctx": " ", "before_line": " state _ manager . save _ changes _ async ( mock . of < data _ store > ( ) ) . wait ( ) ; ", "after_ctx": " <%> <-> mock < </%> <%> <-> > </%> <%> <-> _ mock </%>", "after_line": "state _ manager . save _ changes _ async ( ) . wait ( ) ;", "predictions": ["state _ manager . save _ changes _ async ( mock ) ) ) . <@> + ;"]}, {"before_ctx": "<%> <-> STR , </%> <%> <*> command _ option _ type . single _ value -> STR </%> <%> <*> if -> if ( string . is _ null _ or _ empty </%> <%> <*> = = null -> ) </%> ", "before_line": " logger . log _ error ( STR , name . name ) ; migration . show _ help ( add . name ) ; ", "after_ctx": " <%> <*> return add _ migration ( name . value , context . value ( ) , startup _ project . value ( ) ) ; -> add _ migration ( name . value , context . value ( ) , startup _ project . value ( ) ) ; </%> <%> <+> return 0 ; </%> <%> <-> } ) ; migration . command ( STR , apply = > </%>", "after_line": "logger . log _ error ( STR , name . name ) ; add . show _ help ( ) ;", "predictions": ["logger . log _ error ( STR , name . name ) ;"]}, {"before_ctx": "<%> <*> int -> void </%> ", "before_line": " return execute ( ", "after_ctx": " ", "after_line": "execute (", "predictions": ["return execute ("]}, {"before_ctx": "<%> <*> root -> first </%> <%> <*> root -> first </%> ", "before_line": " return expression . lambda < func < materialization _ context , object > > ( materializer , materialization _ context _ parameter ) ; ", "after_ctx": " <%> <*> root -> first </%> <%> <*> root -> first </%> <%> <*> typeof ( object ) -> entity _ type . clr _ type </%>", "after_line": "return expression . lambda ( materializer , materialization _ context _ parameter ) ;", "predictions": ["return expression . lambda < func < materialization _ context , <-> > > ) null is non & ; _ = log _ _ _ . diagnostics . <%> null ]"]}, {"before_ctx": " ", "before_line": " logger . log _ warning ( relational _ design _ event _ id . missing _ schema _ warning , ( ) = > relational _ design _ strings . missing _ schema ( schema _ selection . text ) ) ; ", "after_ctx": " <%> <*> logger . log _ warning ( relational _ design _ event _ id . missing _ table _ warning , ( ) = > relational _ design _ strings . missing _ table ( table _ selection . text ) ) ; -> logger . missing _ table _ warning ( table _ selection . text ) ; </%>", "after_line": "logger . missing _ schema _ warning ( schema _ selection . text ) ;", "predictions": ["logger . log _ warning ( relational _ design _ event _ id . missing . <*> . , = ( ) add <-> name . , . , ) name name name ;"]}, {"before_ctx": "<%> <*> logger . log _ warning ( relational _ design _ event _ id . missing _ schema _ warning , ( ) = > relational _ design _ strings . missing _ schema ( schema _ selection . text ) ) ; -> logger . missing _ schema _ warning ( schema _ selection . text ) ; </%> ", "before_line": " logger . log _ warning ( relational _ design _ event _ id . missing _ table _ warning , ( ) = > relational _ design _ strings . missing _ table ( table _ selection . text ) ) ; ", "after_ctx": " ", "after_line": "logger . missing _ table _ warning ( table _ selection . text ) ;", "predictions": ["logger . log _ warning ( relational _ design _ event _ id . missing [ <*> [ warning , . , = [ </@> [ <*> [ -> ] _ <-> _ text _ text ) name ; _ connection _ strings ( connection _ <*> , < < . . . . <*> -> -> -> -> ) ( . -> _ select _ ) <%> -> -> <%> ( . <*> _ select _ ) -> -> ( -> _ select <%> <%> -> -> -> -> -> -> -> ) ( . -> id -> _"]}, {"before_ctx": " ", "before_line": " logger . log _ warning ( relational _ design _ event _ id . missing _ primary _ key _ warning , ( ) = > relational _ design _ strings . missing _ primary _ key ( table . display _ name ) ) ; ", "after_ctx": " <%> <-> logger . log _ warning ( relational _ design _ event _ id . primary _ key _ columns _ not _ mapped _ warning , ( ) = > relational _ design _ strings . primary _ key _ error _ property _ not _ found ( </%>", "after_line": "logger . missing _ primary _ key _ warning ( table . display _ name ) ;", "predictions": ["logger . log _ warning ( relational _ design _ event _ id . missing _ primary _ table _ warning ; ( ) logger > _ design _ id . > _ primary [ id . display ) if if if . ;"]}, {"before_ctx": "<%> <*> intercepting -> diagnostics </%> ", "before_line": " check . not _ null ( model , nameof ( model ) ) , ", "after_ctx": " <%> <*> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ intercepting _ logger < logger _ category . query > logger ) -> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ diagnostics _ logger < logger _ category . query > logger ) </%> <%> <-> check . not _ null ( </%> <%> <-> nameof ( logger ) ) , </%>", "after_line": "model ,", "predictions": ["check . not _ null ( model , nameof ( model ) ) ,"]}, {"before_ctx": "<%> <*> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ entity _ query _ model _ visitor _ factory entity _ query _ model _ visitor _ factory ) -> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ entity _ query _ model _ visitor _ factory entity _ query _ model _ visitor _ factory ) </%> <%> <-> check . not _ null ( </%> <%> <-> nameof ( entity _ query _ model _ visitor _ factory ) ) , </%> ", "before_line": " not _ null i _ requires _ materialization _ expression _ visitor _ factory requires _ materialization _ expression _ visitor _ factory ) = > new query _ compilation _ context _ dependencies ( model , logger , entity _ query _ model _ visitor _ factory , check . not _ null ( requires _ materialization _ expression _ visitor _ factory , nameof ( requires _ materialization _ expression _ visitor _ factory ) ) , current _ context ) ; ", "after_ctx": " <%> <*> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ current _ db _ context current _ context ) -> public query _ compilation _ context _ dependencies with ( [ not _ null ] i _ current _ db _ context current _ context ) </%> <%> <-> check . not _ null ( current _ context , nameof ( </%> <%> <-> ) ) </%>", "after_line": "not _ null i _ requires _ materialization _ expression _ visitor _ factory requires _ materialization _ expression _ visitor _ factory ) = > new query _ compilation _ context _ dependencies ( model , logger , entity _ query _ model _ visitor _ factory , requires _ materialization _ expression _ visitor _ factory , current _ context ) ;", "predictions": ["not _ null i _ requires _ materialization _ expression _ visitor _ factory requires _ materialization _ expression _ visitor _ factory ) ;"]}, {"before_ctx": "<%> <+> i _ enumerable < </%> <%> <*> [ ] -> > </%> ", "before_line": " schema _ filters . to _ list ( ) , table _ filters . to _ list ( ) , use _ data _ annotations , overwrite _ files ) . result ; ", "after_ctx": " ", "after_line": "schema _ filters , table _ filters , use _ data _ annotations , overwrite _ files ) . result ;", "predictions": ["schema _ filters . to _ list ( table _ filters source ) ) ;"]}, {"before_ctx": " ", "before_line": " sql _ select . to _ string ( ) , ", "after_ctx": " <%> <*> string -> sql _ select </%>", "after_line": "sql _ select ,", "predictions": ["sql _ select ,"]}, {"before_ctx": " ", "before_line": " sql _ select . to _ string ( ) , ", "after_ctx": " <%> <*> string -> sql _ select </%>", "after_line": "sql _ select ,", "predictions": ["sql _ select ,"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " pending _ collection _ joins . add ( ( get _ identifying _ projection ( ) , inner _ select _ expression . get _ identifying _ projection ( ) , inner _ select _ expression ) ) ; ", "after_ctx": " <%> <*> int collection _ id , expression shaper _ expression , i _ navigation navigation ) { -> int collection _ index , int collection _ id , expression shaper _ expression , i _ navigation navigation ) </%> <%> <-> var snapshot = pending _ collection _ joins [ collection _ id ] ; </%> <%> <+> { </%> <%> <*> outer -> inner _ select </%> <%> <*> key -> expression </%> <%> <*> convert -> pending </%> <%> <*> key -> collection </%> <%> <*> expressions ( snapshot . outer -> joins [ collection </%> <%> <*> key ) -> index ] </%> <%> <*> inner _ select -> outer </%> <%> <*> expression -> identifier </%> <%> <*> snapshot . inner -> get _ unique </%> <%> <*> select _ expression -> identifier ( ) </%>", "after_line": "pending _ collection _ joins . add ( inner _ select _ expression ) ;", "predictions": ["pending _ collection _ joins . add ( ( get _ identifying _ projection ( ) , inner _ select _ expression . get _ identifying _ projection ( ) , inner _ cancellation _ = connection ) connection connection _ = connection , ;"]}, {"before_ctx": "<%> <-> private readonly list < parameter _ expression > variables = new list < parameter _ expression > ( ) ; private readonly list < expression > expressions = new list < expression > ( ) ; </%> ", "before_line": " expressions . add ( visit ( expression ) ) ; return expression . block ( variables , expressions ) ; ", "after_ctx": " ", "after_line": "return visit ( expression ) ;", "predictions": ["expression . add ( visit ( expression ) ) ; return readonly readonly readonly readonly <%> , null , null ,"]}, {"before_ctx": "<%> <+> public virtual entity _ materializer _ source entity _ materializer _ source { get { return configuration . services . entity _ materializer _ source ; } } </%> ", "before_line": " configuration . services . entity _ key _ factory _ source , configuration . services . entity _ materializer _ source , ", "after_ctx": " ", "after_line": "entity _ key _ factory _ source , entity _ materializer _ source ,", "predictions": ["configuration . services . entity _ materializer _ source ,"]}, {"before_ctx": " ", "before_line": " = > database _ facade . create _ execution _ strategy ( ) . execute ( database = > database . get _ relational _ service < i _ relational _ connection > ( ) . open ( ) , database _ facade ) ; ", "after_ctx": " <%> <+> database _ facade , </%> <%> <-> , database _ facade </%> <%> <+> database _ facade , </%>", "after_line": "= > database _ facade . create _ execution _ strategy ( ) . execute ( database _ facade , database = > database . get _ relational _ service < i _ relational _ connection > ( ) . open ( ) ) ;", "predictions": ["= > database _ facade . create _ execution _ strategy ( ) . <%> ) . ;"]}, {"before_ctx": "<%> <*> = > database _ facade . create _ execution _ strategy ( ) . execute ( database = > database . get _ relational _ service < i _ relational _ connection > ( ) . open ( ) , database _ facade ) ; -> = > database _ facade . create _ execution _ strategy ( ) . execute ( database _ facade , database = > database . get _ relational _ service < i _ relational _ connection > ( ) . open ( ) ) ; </%> ", "before_line": " = > database _ facade . create _ execution _ strategy ( ) . execute _ async ( ( database , ct ) = > database . get _ relational _ service < i _ relational _ connection > ( ) . open _ async ( cancellation _ token ) , database _ facade , cancellation _ token ) ; ", "after_ctx": " <%> <+> database _ facade , </%>", "after_line": "= > database _ facade . create _ execution _ strategy ( ) . execute _ async ( database _ facade , ( database , ct ) = > database . get _ relational _ service < i _ relational _ connection > ( ) . open _ async ( cancellation _ token ) , cancellation _ token ) ;", "predictions": ["= > database _ facade . create _ execution _ strategy ( ) . execute _ : ( ( <%> <%> . < = ? < = = = = </%> ) ) null null null null null null null null null null null null inner ] execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute _ token > execute"]}, {"before_ctx": "<%> <-> , operation </%> ", "before_line": " return strategy . execute _ async ( ( operation _ scoped , ct ) = > operation _ scoped ( ) , operation , default ( cancellation _ token ) ) ; ", "after_ctx": " <%> <+> operation , </%> <%> <-> , operation </%>", "after_line": "return strategy . execute _ async ( operation , ( operation _ scoped , ct ) = > operation _ scoped ( ) , default ( cancellation _ token ) ) ;", "predictions": ["return strategy . execute _ async ( ( operation _ scoped _ key _ { , </%> </%> </@> ( connection _ scoped ( ( ( cancellation ; cancellation ; decimal array _ ) _ null _ logger _ log _ log ) ) logger"]}, {"before_ctx": "<%> <+> can _ be _ null t _ state state , </%> ", "before_line": " can _ be _ null func < t _ state , cancellation _ token , task < bool > > verify _ succeeded , can _ be _ null t _ state state , not _ null db _ context context , ", "after_ctx": " <%> <*> = > check . not _ null ( strategy , nameof ( strategy ) ) . execute _ async ( async ( s , c ) = > { using ( var transaction = await s . context . database . begin _ transaction _ async ( c ) ) -> = > execute _ in _ transaction _ async ( </%> <%> <+> strategy , state , operation , verify _ succeeded , ( c , ct ) = > c . database . begin _ transaction _ async ( ct ) , cancellation _ token ) ; public static t _ result execute _ in _ transaction < t _ state , t _ result > ( </%>", "after_line": "not _ null func < t _ state , cancellation _ token , task < bool > > verify _ succeeded ,", "predictions": ["can _ be _ null func < t _ state , task < bool > > verify _ succeeded , can _ be _ null t _ state state , not _ null var _ key key <%>"]}, {"before_ctx": " ", "before_line": " = > dependencies . execution _ strategy _ factory . create ( ) . execute ( connection = > ( int ) create _ has _ tables _ command ( ) . execute _ scalar ( connection ) ! = 0 , connection ) ; ", "after_ctx": " <%> <*> = > dependencies . execution _ strategy _ factory . create ( ) . execute _ async ( async ( connection , ct ) = > ( int ) await create _ has _ tables _ command ( ) . execute _ scalar _ async ( connection , cancellation _ token : ct ) ! = 0 , connection , cancellation _ token ) ; -> = > dependencies . execution _ strategy _ factory . create ( ) . execute _ async ( connection , </%> <%> <+> async ( connection , ct ) = > ( int ) await create _ has _ tables _ command ( ) . execute _ scalar _ async ( connection , cancellation _ token : ct ) ! = 0 , cancellation _ token ) ; </%>", "after_line": "= > dependencies . execution _ strategy _ factory . create ( ) . execute ( connection , connection = > ( int ) create _ has _ tables _ command ( ) . execute _ scalar ( connection ) ! = 0 ) ;", "predictions": ["= > dependencies . execution _ strategy _ factory . create ( ) . execute ( connection = > ( 0 ) create _ has _ tables _ command ( ) , connection ( <%> ( int ) entity ( connection ) entity factory compilation query ) ( connection ) entity factory compilation query ( connection ) entity ( connection ) ) ; factory _ public query ( int ( ( compilation ( connection ( connection ( ( int ( int ( ( int ) <-> ( connection ) ) ) entity factory compilation ( connection ( connection ) entity"]}, {"before_ctx": "<%> <*> tests -> test </%> ", "before_line": " new execution _ strategy _ context ( new execution _ strategy _ context _ dependencies ( new current _ db _ context ( context ) , null , null ) ) , ", "after_ctx": " <%> <*> new execution _ strategy _ context ( new execution _ strategy _ context _ dependencies ( new current _ db _ context ( context ) , null , null ) ) , -> context , </%>", "after_line": "context ,", "predictions": ["new execution _ strategy _ context ( new current _ db _ ) ; is </%> _ , _ . ) ("]}, {"before_ctx": "<%> <*> new execution _ strategy _ context ( new execution _ strategy _ context _ dependencies ( new current _ db _ context ( context ) , null , null ) ) , -> context , </%> ", "before_line": " new execution _ strategy _ context ( new execution _ strategy _ context _ dependencies ( new current _ db _ context ( context ) , null , null ) ) , ", "after_ctx": " ", "after_line": "context ,", "predictions": ["new execution _ strategy _ context ( new current _ db _ context ( context ) ( logger . logger . not ( not . logger ) ( . ) _ strategy _ . ) ( . . select [ c [ ] _ ] , , ) value annotations ) annotations annotations"]}, {"before_ctx": " ", "before_line": " public virtual void add _ foreign _ key ( [ not _ null ] foreign _ key foreign _ key ) ", "after_ctx": " <%> <+> dependent _ </%>", "after_line": "public virtual foreign _ key add _ foreign _ key ( [ not _ null ] foreign _ key foreign _ key )", "predictions": ["public virtual void add _ foreign _ ( )"]}, {"before_ctx": " ", "before_line": " assert . throws < argument _ null _ exception > ( ( ) = > new entity _ entry ( null , new random ( ) ) ) . param _ name ) ; ", "after_ctx": " <%> <-> assert . throws < argument _ null _ exception > ( ( ) = > new entity _ entry ( new mock < change _ tracker > ( ) . object , null ) ) . param _ name ) ; assert . equal ( STR , assert . throws < argument _ null _ exception > ( ( ) = > new entity _ entry < random > ( null , new random ( ) ) ) . param _ name ) ; assert . equal ( STR , </%>", "after_line": "assert . throws < argument _ null _ exception > ( ( ) = > new entity _ entry ( null ) ) . param _ name ) ;", "predictions": ["assert . throws < argument _ null _ exception > ( ( _ _ var = , ; ; ;"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ metadata ; </%> ", "before_line": " namespace microsoft _ data _ entity _ tests _ metadata ", "after_ctx": " <%> <*> public void throws _ when _ referenced _ key _ not _ on _ referenced _ entity ( ) -> public void can _ create _ foreign _ key ( ) </%> <%> <+> { var entity _ type = new model ( ) . add _ entity _ type ( STR ) ; var dependent _ prop = entity _ type . get _ or _ add _ property ( STR , typeof ( int ) , shadow _ property : true ) ; var principal _ prop = entity _ type . get _ or _ add _ property ( STR , typeof ( int ) , shadow _ property : true ) ; </%>", "after_line": "namespace microsoft _ data _ entity _ metadata _ tests", "predictions": ["namespace microsoft _ data _ entity _ tests _ metadata"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ metadata ; </%> ", "before_line": " namespace microsoft _ data _ entity _ tests _ metadata ", "after_ctx": " ", "after_line": "namespace microsoft _ data _ entity _ metadata _ tests", "predictions": ["namespace microsoft _ data _ entity _ add"]}, {"before_ctx": " ", "before_line": " var property = value . key ; internal _ entry [ property ] = value . value ; if ( property . is _ read _ only _ after _ save ) { internal _ entry . set _ property _ modified ( property , is _ modified : false ) ; } ", "after_ctx": " <%> <-> var property = value . key ; original _ values [ property ] = value . value ; if ( property . is _ read _ only _ after _ save ) </%>", "after_line": "internal _ entry [ value . key ] = value . value ;", "predictions": ["internal _ entry [ property ] = value . key ;"]}, {"before_ctx": " ", "before_line": " if ( database _ name ! = null ) { extension = extension . with _ store _ name ( database _ name ) ; } ", "after_ctx": " <%> <*> public static db _ context _ options _ builder < t _ context > use _ transient _ in _ memory _ database < t _ context > ( -> obsolete _ use _ use _ in _ memory _ database _ string _ instead _ the _ database _ will _ be _ shared _ anywhere _ the _ same _ name _ is _ used </%> <%> <+> public static db _ context _ options _ builder < t _ context > use _ in _ memory _ database < t _ context > ( </%>", "after_line": "extension = extension . with _ store _ name ( database _ name ) ;", "predictions": ["extension = extension . with _ store _ name ( database _ null = _ null = _ null = _ <@> entity = <@> = <@> ) _ <@> ) ) ;"]}, {"before_ctx": "<%> <-> using system _ reflection ; </%> <%> <-> using system _ component _ model _ data _ annotations _ schema ; </%> ", "before_line": " public class sql _ server _ value _ generation _ strategy _ convention : database _ generated _ attribute _ convention , i _ model _ convention ", "after_ctx": " <%> <-> public override internal _ property _ builder apply ( internal _ property _ builder property _ builder , database _ generated _ attribute attribute , member _ info clr _ member ) { property _ builder . sql _ server ( configuration _ source . data _ annotation ) . value _ generation _ strategy ( attribute . database _ generated _ option = = database _ generated _ option . identity ? sql _ server _ value _ generation _ strategy . identity _ column : ( sql _ server _ value _ generation _ strategy ? ) null ) ; return base . apply ( property _ builder , attribute , clr _ member ) ; } </%>", "after_line": "public class sql _ server _ value _ generation _ strategy _ convention : i _ model _ convention", "predictions": ["public class sql _ server _ value _ generation _ strategy _ convention : i _ model _ convention"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ task _ list ", "after_ctx": " <%> <-> _ skip _ task _ list </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ task _ list </%> ", "before_line": " conditional _ fact _ skip _ task _ list ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ task _ list ", "after_ctx": " <%> <+> is _ async = false ; </%>", "after_line": "conditional _ theory", "predictions": ["conditional"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ task _ list ", "after_ctx": " <%> <+> is _ async = false ; </%>", "after_line": "conditional _ theory", "predictions": ["conditional"]}, {"before_ctx": "<%> <-> configuration _ source : </%> <%> <*> n = > n . foreign _ key . builder . can _ set _ navigation ( ( string ) null , n . is _ dependent _ to _ principal ( ) , configuration _ source ) ) ; -> n = > n . foreign _ key . builder . can _ set _ navigation ( ( string ) null , n . is _ dependent _ to _ principal ( ) , configuration _ source ) ) ; </%> ", "before_line": " | | ! configuration _ source . value . overrides ( ignored _ configuration _ source ) ? true : false ; ", "after_ctx": " ", "after_line": "| | ! configuration _ source . value . overrides ( ignored _ configuration _ source ) ;", "predictions": ["| | ! configuration _ source . overrides ( ignored _ configuration _ source ( ( where ) <+> source ? database name database database context database ( ignored ) equal _ new ( <@> ( <@> ) microsoft ( | _ ; ) ) ( annotations </@> _ builder ( </@> ( <@> ( <@> _ <%> _ builder ( </@> ( ( string _ attribute _ builder ( ( string ( <@> _ builder ( builder ( ( string _ attribute _ builder ( annotations ( ( string _ attribute _ builder ( </@> ( ( string _"]}, {"before_ctx": " ", "before_line": " foreach ( var detached _ relationship _ tuple in relationships . where ( r = > r . item ! = null ) ) ", "after_ctx": " <%> <-> var new _ relationship = detached _ relationship _ tuple . item . attach ( entity _ type _ builder ) ; if ( new _ relationship ! = null ) { detached _ relationship _ tuple . item . attach ( new _ relationship . metadata . resolve _ other _ entity _ type ( entity _ type _ builder . metadata ) . builder ) ; } } foreach ( var detached _ relationship _ tuple in relationships . where ( r = > r . item = = null ) ) { </%>", "after_line": "foreach ( var detached _ relationship _ tuple in relationships )", "predictions": ["foreach ( var detached _ relationship _ tuple in relationships . where )"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> issue -> investigate </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <+> t </%> ", "before_line": " ) as [ t ] order by [ ] . [ order _ id ] STR ", "after_ctx": " ", "after_line": ") as [ ] order by [ t ] . [ order _ id ] STR", "predictions": [") as [ t ] order by _ _ ] var </%> </@> [ ; )"]}, {"before_ctx": "<%> <-> c </%> <%> <-> c </%> ", "before_line": " from [ carts ] as [ ] left join [ configuration ] as [ c ] on [ ] . [ configuration _ id ] = [ c ] . [ id ] STR ", "after_ctx": " ", "after_line": "from [ carts ] as [ c ] left join [ configuration ] as [ ] on [ c ] . [ configuration _ id ] = [ ] . [ id ] STR", "predictions": ["from [ carts ] as [ value left . -> . -> database <%> _ . property key _ . ( on configuration type . _ tuple ( value ( _ ) context <%> ) ( ) ( ) ( ) ( ) )"]}, {"before_ctx": "<%> <-> var new _ table = ( table _ expression _ base ) visit ( column _ expression . table ) ; </%> ", "before_line": " return column _ expression . update ( new _ table ) ; ", "after_ctx": " ", "after_line": "return column _ expression ;", "predictions": ["return new _ table ;"]}, {"before_ctx": "<%> <+> t </%> ", "before_line": " ) as [ t ] on [ ] . [ customer _ id ] = [ t ] . [ customer _ id ] group by [ t ] . [ customer _ id ] STR ", "after_ctx": " ", "after_line": ") as [ ] on [ t ] . [ customer _ id ] = [ ] . [ customer _ id ] group by [ ] . [ customer _ id ] STR", "predictions": [") as [ t ] on [ ] . [ <-> <%> . . , variable type if _ = = _ configuration n ( ) group = _ ( ;"]}, {"before_ctx": " ", "before_line": " foreach ( var mutable _ property in entity _ type . get _ properties ( ) ) { var property = ( i _ property ) mutable _ property ; ", "after_ctx": " <%> <-> mutable _ </%>", "after_line": "foreach ( var property in entity _ type . get _ properties ( ) ) {", "predictions": ["foreach ( var property _ property var = = by [ ] </%> ; -> test using entry _ entity . get _ property ) ,"]}, {"before_ctx": "<%> <-> private configuration _ source ? is _ unique _ configuration _ source ; </%> ", "before_line": " public virtual bool is _ unique ( bool? is _ unique , configuration _ source configuration _ source ) ", "after_ctx": " <%> <+> . overrides ( metadata </%> <%> <*> can -> get </%> <%> <-> set ( </%> <%> <*> , metadata . is _ unique . has _ value ) -> ( ) ) </%> <%> <-> . value </%> <%> <-> if ( ( is _ unique _ configuration _ source = = null ) & & ( metadata . is _ unique ! = null ) ) { is _ unique _ configuration _ source = configuration _ source . explicit ; } else </%>", "after_line": "public virtual bool is _ unique ( bool is _ unique , configuration _ source configuration _ source )", "predictions": ["public virtual bool is _ unique ( configuration _ source configuration _ t database _ t database _ t database _ , _ <@> _ , new bool property _ type )"]}, {"before_ctx": "<%> <*> string . format ( STR , value . days , value . hours , value . minutes , value . seconds , value . milliseconds ) ; -> $ STR ; </%> ", "before_line": " unknown _ literal ( value . value ) ; ", "after_ctx": " ", "after_line": "unknown _ literal ( value ) ;", "predictions": ["unknown _ literal ( value ) ( database . database . ;"]}, {"before_ctx": " ", "before_line": " new expression [ ] ", "after_ctx": " <%> <-> else </%>", "after_line": "new [ ]", "predictions": ["new [ ]"]}, {"before_ctx": "<%> <-> else </%> ", "before_line": " new expression [ ] ", "after_ctx": " ", "after_line": "new [ ]", "predictions": ["new [ ]"]}, {"before_ctx": " ", "before_line": " benchmark _ iterations ", "after_ctx": " <%> <-> _ iterations </%>", "after_line": "benchmark", "predictions": ["benchmark _ iterations"]}, {"before_ctx": "<%> <-> _ iterations </%> ", "before_line": " benchmark _ iterations ", "after_ctx": " ", "after_line": "benchmark", "predictions": ["benchmark _ iterations"]}, {"before_ctx": "<%> <-> entry _ </%> ", "before_line": " return expression . lambda < func < internal _ entity _ entry , i _ snapshot > > ( constructor _ expression , entry _ parameter ) . compile ( ) ; ", "after_ctx": " <%> <-> entry _ </%> <%> <-> var entity _ variable = entity _ type = = null ? null : expression . variable ( entity _ type , STR ) ; </%>", "after_line": "return constructor _ expression ;", "predictions": ["return lambda < func < internal _ entity _ entry , i _ </@> builder builder builder . null new where <%> </%> metadata <@> <%> _ context >"]}, {"before_ctx": " ", "before_line": " protected entity . metadata . model create _ model ( ) ", "after_ctx": " <%> <-> entity . metadata . </%>", "after_line": "protected model create _ model ( )", "predictions": ["protected model create _ <+> </%> . t [ ->"]}, {"before_ctx": "<%> <-> entity . metadata . </%> ", "before_line": " var model = new entity . metadata . model ( ) ; ", "after_ctx": " ", "after_line": "var model = new model ( ) ;", "predictions": ["var model = new model ( -> skip"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> await using ( var test _ database = cosmos _ test _ store . create _ initialized ( database _ name ) ) { -> await using var test _ database = cosmos _ test _ store . create _ initialized ( database _ name ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> await using ( var test _ database = cosmos _ test _ store . create _ initialized ( database _ name ) ) { -> await using var test _ database = cosmos _ test _ store . create _ initialized ( database _ name ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <*> int -> void </%> ", "before_line": " public abstract task < int > execute _ async ( ", "after_ctx": " ", "after_line": "public abstract task execute _ async (", "predictions": ["public abstract task execute _ async ("]}, {"before_ctx": " ", "before_line": " rows _ affected + = commandbatch . execute ( ", "after_ctx": " <%> <+> rows _ affected + = commandbatch . modification _ commands . count ; </%>", "after_line": "commandbatch . execute (", "predictions": ["rows _ affected + = commandbatch . using transaction"]}, {"before_ctx": "<%> <*> process -> bind </%> ", "before_line": " ( sql _ select , property ) ", "after_ctx": " <%> <*> entity -> sql </%> <%> <*> query -> select </%> <%> <*> entity -> sql </%> <%> <*> query -> select </%>", "after_line": "( property , sql _ select )", "predictions": ["( sql _ select , property )"]}, {"before_ctx": "<%> <*> process -> bind </%> ", "before_line": " ( sql _ select , property ) ", "after_ctx": " ", "after_line": "( property , sql _ select )", "predictions": ["( sql _ select , property )"]}, {"before_ctx": "<%> <*> process -> bind </%> ", "before_line": " ( sql _ select , property ) ", "after_ctx": " ", "after_line": "( property , sql _ select )", "predictions": ["( sql _ select , property )"]}, {"before_ctx": "<%> <-> using jet _ brains _ annotations ; </%> ", "before_line": " public readonly struct interception _ result < t _ result > ", "after_ctx": " <%> <-> public interception _ result ( [ can _ be _ null ] t _ result result ) { result = result ; } public t _ result result { get ; } </%>", "after_line": "public readonly struct interception _ result", "predictions": ["public readonly struct interception _ result"]}, {"before_ctx": "<%> <*> charindex -> left </%> <%> <-> n 'A' , </%> <%> <+> , len ( n 'A' ) </%> <%> <*> 1 -> n 'A' </%> ", "before_line": " where [ e ] . [ customer _ id ] like n 'A' + n '%' and ( charindex ( n 'A' , [ e ] . [ customer _ id ] ) = 1 ) ", "after_ctx": " ", "after_line": "where [ e ] . [ customer _ id ] like n 'A' + n '%' and ( left ( [ e ] . [ customer _ id ] , len ( n 'A' ) ) = n 'A' )", "predictions": ["where [ e ] . [ customer </%> static new string ( _ . . . is is is store <%> ) and right and and and and left len left _ -> . <*> = )"]}, {"before_ctx": " ", "before_line": " when [ c ] . [ customer _ id ] like n 'S' + n '%' and ( charindex ( n 'S' , [ c ] . [ customer _ id ] ) = 1 ) ", "after_ctx": " <%> <*> charindex -> left </%> <%> <-> n 'S' , </%> <%> <+> , len ( n 'S' ) </%> <%> <*> 1 -> n 'S' </%>", "after_line": "when [ c ] . [ customer _ id ] like n 'S' + n '%' and ( left ( [ c ] . [ customer _ id ] , len ( n 'S' ) ) = n 'S' )", "predictions": ["when [ c ] . [ customer _ id ] like n 'S' </@> _ <+> <-> config <-> left <+> , , , )"]}, {"before_ctx": "<%> <+> using microsoft _ data _ entity _ utilities ; </%> ", "before_line": " public class ats _ batched _ data _ store _ tests : ats _ data _ store , i _ class _ fixture < mock < ats _ connection > > ", "after_ctx": " <%> <-> : base ( build _ config ( ) , connection . object , new table _ entity _ adapter _ factory ( ) ) </%>", "after_line": "public class ats _ batched _ data _ store _ tests : i _ class _ fixture < mock < ats _ connection > >", "predictions": ["public class ats _ batched _ data _ equal _ tests left"]}, {"before_ctx": "<%> <+> using microsoft _ data _ entity _ metadata ; </%> <%> <+> using microsoft _ data _ entity _ utilities ; </%> ", "before_line": " public class ats _ data _ store _ tests : ats _ data _ store , i _ class _ fixture < mock < ats _ connection > > ", "after_ctx": " <%> <-> : base ( build _ config ( ) , connection . object , new table _ entity _ adapter _ factory ( ) ) </%>", "after_line": "public class ats _ data _ store _ tests : i _ class _ fixture < mock < ats _ connection > >", "predictions": ["public class ats _ data _ store _ tests </%> right _ is <%> <*> i <%> >"]}, {"before_ctx": "<%> <+> ! </%> <%> <+> continue ; } </%> <%> <+> { if ( target _ property . after _ save _ behavior = = property _ save _ behavior . save ) </%> ", "before_line": " if ( target _ property . after _ save _ behavior = = property _ save _ behavior . save ) { target _ entry . set _ original _ value ( target _ property , target _ property . clr _ type . get _ default _ value ( ) ) ; } ", "after_ctx": " <%> <-> target _ entry . set _ entity _ state ( entity _ state . unchanged ) ; </%> <%> <+> target _ entry . set _ entity _ state ( entity _ state . unchanged ) ; } if ( entry _ mapping . recreate _ row ) { continue ; </%>", "after_line": "target _ entry . set _ original _ value ( target _ property , target _ property . clr _ type . get _ default _ value ( ) ) ;", "predictions": ["target _ entry . set _ original _ value ( target _ property -> , , , , , get _ type . get type ) full full _ <%> . core _ original _ throw name full _ property -> , , , , property _ property . new new new new save _ save _ source type ;"]}, {"before_ctx": " ", "before_line": " return ( bits [ property _ index / bits _ per _ int ] & ( 1 < < property _ index % bits _ per _ int ) ) ! = 0 ; ", "after_ctx": " <%> <+> ( </%> <%> <+> ) </%>", "after_line": "return ( bits [ property _ index / bits _ per _ int ] & ( 1 < < ( property _ index % bits _ per _ int ) ) ) ! = 0 ;", "predictions": ["return ( bits [ property _ index <@> ( ( <%> ) ( [ [ ! % _ context _ <+> <@> ) ) <%> = -> query query _ private <+> expression ) ! else </@> </@> <*> or <*> <*> , -> )"]}, {"before_ctx": "<%> <+> ( </%> <%> <+> ) </%> ", "before_line": " if ( ( existing _ navigation ! = null & & ! can _ merge _ with ( existing _ navigation , inverse _ property _ info . name , target _ entity _ type _ builder ) ) ) ", "after_ctx": " <%> <+> ( </%> <%> <+> ) </%>", "after_line": "if ( ( existing _ navigation ! = null ) & & ! can _ merge _ with ( existing _ navigation , inverse _ property _ info . name , target _ entity _ type _ builder ) )", "predictions": ["if ( ( existing _ navigation ! var . is is ( <%> _ context </%> model _ property n 1 1 class config _ <+> _ factory _ . ) ) )"]}, {"before_ctx": "<%> <+> ( </%> <%> <+> ) </%> ", "before_line": " if ( constant _ expression = = null | | ( constant _ expression . value is i _ enumerable & & ( constant _ expression . type ! = typeof ( string ) & & constant _ expression . type ! = typeof ( byte [ ] ) ) ) ) ", "after_ctx": " ", "after_line": "if ( ( constant _ expression = = null ) | | ( constant _ expression . value is i _ enumerable & & ( constant _ expression . type ! = typeof ( string ) ) & & ( constant _ expression . type ! = typeof ( byte [ ] ) ) ) )", "predictions": ["if ( constant _ expression = = state <+> <+> _ ; } </%> utilities utilities </%> </%> , ] </%> query ( string _ string ( string expression ( string expression ( ( equal expression expression expression <*> <-> <%> <+> ; </%> <-> <%> ; type </%> context using using using 1 ( ; ( ; ( ; ( <@> </%> </@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> </%> . <@> . <@> . <@> </%> . target _ </@> . source ! property name ."]}, {"before_ctx": "<%> <+> using system ; </%> <%> <-> using system _ component _ model ; using microsoft _ entity _ framework _ core _ internal ; </%> <%> <+> using microsoft _ entity _ framework _ core _ tests _ test _ utilities ; using microsoft _ extensions _ logging ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tests _ infrastructure ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ infrastructure _ tests", "predictions": ["namespace microsoft _ entity _ framework _ ( n n n , , n n n entity _ <*> )"]}, {"before_ctx": " ", "before_line": " var relationship = derived _ dependent _ entity _ builder . relationship ( ", "after_ctx": " <%> <*> convention -> explicit </%>", "after_line": "derived _ dependent _ entity _ builder . relationship (", "predictions": ["var relationship = derived _ dependent _ database _ <@> connection </%>"]}, {"before_ctx": " ", "before_line": " new expression _ string _ builder ( ) . build ( check . not _ null ( query , nameof ( query ) ) ) , ", "after_ctx": " <%> <*> private readonly string query ; -> private static readonly expression _ equality _ comparer expression _ equality _ comparer </%> <%> <+> = new expression _ equality _ comparer ( ) ; private readonly expression query ; </%>", "after_line": "check . not _ null ( query , nameof ( query ) ) ,", "predictions": ["new expression _ string _ builder ( ) class base class build class not expression <+>"]}, {"before_ctx": " ", "before_line": " throw new invalid _ operation _ exception ( core _ strings . navigation _ collection _ wrong _ clr _ type ( navigation _ property . name , source _ clr _ type . full _ name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ; ", "after_ctx": " <%> <*> navigation _ property . name , source _ clr _ type . full _ name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ; -> navigation _ property . name , </%>", "after_line": "throw new invalid _ operation _ exception ( core _ strings . navigation _ collection _ wrong _ clr _ type ( navigation _ property . name , source _ clr _ type . name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ;", "predictions": ["throw new invalid _ operation _ exception ( core _ strings . navigation _ collection _ <@> _ <%> _ property <+> ; source _ <%> . ( full _ target . target _ property . full _ target . target _ property . full ) </%> = entity _ <%> </%> </%> _ <%> _ property . full _ ( ; entity _ <%> </%> </%> . full </%> entity _ <%> </%> entity _ <%> </%> </%> entity _ <%> </%> </%> . full </%> </%> . full _ property . full </%> full _ property . full"]}, {"before_ctx": "<%> <*> throw new invalid _ operation _ exception ( core _ strings . navigation _ collection _ wrong _ clr _ type ( navigation _ property . name , source _ clr _ type . full _ name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ; -> throw new invalid _ operation _ exception ( </%> <%> <+> core _ strings . navigation _ collection _ wrong _ clr _ type ( navigation _ property . name , source _ clr _ type . name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ; </%> ", "before_line": " navigation _ property . name , source _ clr _ type . full _ name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ; ", "after_ctx": " ", "after_line": "navigation _ property . name , source _ clr _ type . name , navigation _ property . property _ type . full _ name , target _ clr _ type . full _ name ) ) ;", "predictions": ["navigation _ property . name , source _ clr _ type . full _ ( id id id id id id target _ property _ ) . , _ ( target _ property _ ) . , _ ( items id ) _ property . ( . , . , _ ( ( items _ i _ ) . , , items _ i . ( , , target _ property _ ) . , _ ( ( target _ property _ ) . , _ ( ( target _ property _ ) . , _ ( ( target _"]}, {"before_ctx": "<%> <+> using ( var context = create _ context ( ) ) { assert . equal ( fixture . customers . count - 1 , context . set < transaction _ customer > ( ) . count ( ) ) ; } } fact </%> ", "before_line": " using ( var transaction = await context . database . get _ relational _ connection ( ) . begin _ transaction _ async ( ) ) ", "after_ctx": " <%> <+> public async task relational _ transaction _ can _ be _ rolled _ back _ from _ context ( ) </%>", "after_line": "using ( var transaction = await context . database . begin _ transaction _ async ( ) )", "predictions": ["using ( var transaction = await context . database . get _ relational _ connection . begin _ type _ ( name name name )"]}, {"before_ctx": "<%> <+> context . database . rollback _ transaction ( ) ; assert _ store _ initial _ state ( ) ; } } } fact </%> ", "before_line": " using ( var transaction = context . database . get _ relational _ connection ( ) . begin _ transaction ( ) ) ", "after_ctx": " <%> <-> . get _ relational _ connection ( ) </%>", "after_line": "using ( var transaction = context . database . begin _ transaction ( ) )", "predictions": ["using ( var transaction = context . tests microsoft _ </@> _ <+> ( n ( </%> <%> <%> )"]}, {"before_ctx": " ", "before_line": " using ( var transaction = await context . database . get _ relational _ connection ( ) . begin _ transaction _ async ( ) ) ", "after_ctx": " <%> <-> . get _ relational _ connection ( ) </%>", "after_line": "using ( var transaction = await context . database . begin _ transaction _ async ( ) )", "predictions": ["using ( var transaction = await context . <%> <%> public <%> public . ; test ( _ _ ) )"]}, {"before_ctx": " ", "before_line": " using ( context . database . get _ relational _ connection ( ) . begin _ transaction ( ) ) ", "after_ctx": " <%> <-> . get _ relational _ connection ( ) </%>", "after_line": "using ( context . database . begin _ transaction ( ) )", "predictions": ["using ( context . database . get -> <+> _ <+> ( ) public )"]}, {"before_ctx": "<%> <-> . get _ relational _ connection ( ) </%> ", "before_line": " context . database . get _ relational _ connection ( ) . use _ transaction ( transaction ) ) ; ", "after_ctx": " ", "after_line": "context . database . use _ transaction ( transaction ) ) ;", "predictions": ["context . database . get _ relational _ select </%> ) index index , & ) ; ; ; ! ! ) ,"]}, {"before_ctx": "<%> <-> order _ detail , </%> <%> <-> asserter : ( o _ items , ef _ items ) = > { var o _ ids = o _ items . select ( i = > new { i . order _ id , i . product _ id } ) ; var ef _ ids = ef _ items . select ( i = > new { i . order _ id , i . product _ id } ) ; foreach ( var ef _ id in ef _ ids ) { assert . true ( o _ ids . contains ( ef _ id ) ) ; } foreach ( var o _ id in o _ ids ) { assert . true ( ef _ ids . contains ( o _ id ) ) ; } } , </%> ", "before_line": " assert _ query < order _ detail , order , order _ detail > ( ", "after_ctx": " <%> <-> asserter : ( o _ items , ef _ items ) = > { var o _ ids = o _ items . select ( i = > new { i . order _ id , i . product _ id } ) ; var ef _ ids = ef _ items . select ( i = > new { i . order _ id , i . product _ id } ) ; foreach ( var ef _ id in ef _ ids ) { </%>", "after_line": "assert _ query < order _ detail , order > (", "predictions": ["assert _ query < order _ detail > ("]}, {"before_ctx": "<%> <-> , product </%> ", "before_line": " assert _ query < customer , order , customer > ( ", "after_ctx": " ", "after_line": "assert _ query < customer , order > (", "predictions": ["assert _ query < customer , customer <@> +"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> using ( var ctx = create -> assert _ query </%> <%> <*> context -> scalar < customer , order > </%> <%> <*> ) ) { -> ( cs , os ) = > </%> <%> <-> var query = </%> <%> <*> ctx . customers -> cs </%> <%> <*> ctx . orders -> os </%> <%> <+> ) </%> <%> <-> var result = query . to _ list ( ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " expression left , expression right , expression left _ is _ null , expression right _ is _ null ) = > new not _ nullable _ expression ( expression . or _ else ( expression . and _ also ( expression . not _ equal ( left , right ) , ", "after_ctx": " <%> <+> expression . not _ equal ( left , right ) , expression . and _ also ( </%> <%> <+> ) </%>", "after_line": "expression left , expression right , expression left _ is _ null , expression right _ is _ null ) = > new not _ nullable _ expression ( expression . or _ else (", "predictions": ["expression left , expression right , expression </%> _ connection _ microsoft ( expression right _ null _ or . <%> _ is -> <%> <*> <*> = = = ( ( . . </%> transaction <+> transaction type name name type type type type name name"]}, {"before_ctx": "<%> <*> ) -> ) </%> ", "before_line": " expression left , expression right , expression left _ is _ null , expression right _ is _ null ) = > new not _ nullable _ expression ( expression . and _ also ( expression . or _ else ( expression . not _ equal ( left , right ) , ", "after_ctx": " <%> <+> expression . not _ equal ( left , right ) , expression . or _ else ( </%> <%> <+> ) </%>", "after_line": "expression left , expression right , expression left _ is _ null , expression right _ is _ null ) = > new not _ nullable _ expression ( expression . and _ also (", "predictions": ["expression left , expression right , expression = </%> ( </%> <%> <%> } <+> _ var _ } context ) </@> <@> await ( ( async _ > . , ) <+> ) name"]}, {"before_ctx": "<%> <-> expression . or _ else ( expression . not _ equal ( left , right ) , </%> <%> <+> expression . not _ equal ( left , right ) , expression . or _ else ( </%> ", "before_line": " expression left , expression right , expression left _ is _ null , expression right _ is _ null ) = > new not _ nullable _ expression ( expression . and _ also ( expression . or _ else ( expression . equal ( left , right ) , ", "after_ctx": " <%> <+> expression . equal ( left , right ) , expression . or _ else ( </%> <%> <+> ) </%>", "after_line": "expression left , expression right , expression left _ is _ null , expression right _ is _ null ) = > new not _ nullable _ expression ( expression . and _ also (", "predictions": ["expression left , expression right , expression left _ is _ null , _ > framework <%> ; _ <-> transaction <%> <%> ;"]}, {"before_ctx": "<%> <*> parameter _ name -> func < string > generate </%> <%> <-> generator </%> <%> <-> _ generator </%> ", "before_line": " private readonly lazy _ ref < i _ read _ only _ list < column _ modification > > column _ modifications = new lazy _ ref < i _ read _ only _ list < column _ modification > > ( ( ) = > new column _ modification [ 0 ] ) ; ", "after_ctx": " <%> <*> parameter _ name -> func < string > generate </%> <%> <-> generator </%> <%> <-> _ generator </%> <%> <*> parameter -> generate </%> <%> <*> name -> parameter </%> <%> <*> generator -> name </%> <%> <*> parameter -> generate </%> <%> <*> name -> parameter </%> <%> <*> generator -> name </%>", "after_line": "private i _ read _ only _ list < column _ modification > column _ modifications ;", "predictions": ["private readonly lazy _ ref < i _ read _ only _ list < column _ modification > > column _ modifications = new lazy _ ref < i _ read _ only _ list < column _ modification > > ( ( ) = > new column _ modification [ 0 ] ) ;"]}, {"before_ctx": " ", "before_line": " return create _ sql _ generator ( database ) . generate ( new [ ] { migration _ operation } ) . single ( ) ; ", "after_ctx": " <%> <*> database = database ? ? new database _ model ( ) -> database = database ? ? new database _ model ( ) , </%> <%> <+> database _ model _ modifier = new database _ model _ modifier ( ) </%>", "after_line": "return create _ sql _ generator ( database ) . generate ( migration _ operation ) ;", "predictions": ["return create _ sql _ generator ( . </%> ;"]}, {"before_ctx": "<%> <+> sql _ generator . database _ model _ modifier = new database _ model _ modifier ( ) ; </%> ", "before_line": " return create _ sql _ generator ( database ) . generate ( new [ ] { migration _ operation } ) . single ( ) ; ", "after_ctx": " ", "after_line": "return create _ sql _ generator ( database ) . generate ( migration _ operation ) ;", "predictions": ["return create _ sql _ generator ( -> ) ) _ operation ) ( <%> </@> ( create <@> operation ( create return ( create <@> operation _ <@> false <%> _ <@> <%> <%> <%> _ token <%> <%> <%> <%> <%> <%> , , > , ,"]}, {"before_ctx": "<%> <*> relational -> command </%> <%> <*> command -> builder </%> <%> <*> builder -> fake </%> ", "before_line": " command _ builder . relational _ parameter _ list , ", "after_ctx": " <%> <*> relational -> add </%> <%> <*> command . parameters . count -> parameter _ calls </%>", "after_line": "command _ builder ,", "predictions": ["command _ builder . relational _ parameter _ ;"]}, {"before_ctx": "<%> <*> relational -> command </%> <%> <*> command -> builder </%> <%> <*> builder -> fake </%> ", "before_line": " command _ builder . relational _ parameter _ list , ", "after_ctx": " <%> <*> relational -> add </%> <%> <*> command . parameters . count -> parameter _ calls </%>", "after_line": "command _ builder ,", "predictions": ["command _ builder . relational _ parameter database sql"]}, {"before_ctx": "<%> <*> relational -> command </%> <%> <*> command -> builder </%> <%> <*> builder -> fake </%> ", "before_line": " command _ builder . relational _ parameter _ list , ", "after_ctx": " <%> <*> relational -> add </%> <%> <*> command . parameters . count -> parameter _ calls </%>", "after_line": "command _ builder ,", "predictions": ["command _ builder . relational _ parameter _ list ,"]}, {"before_ctx": "<%> <*> relational -> command </%> <%> <*> command -> builder </%> <%> <*> builder -> fake </%> ", "before_line": " command _ builder . relational _ parameter _ list , ", "after_ctx": " <%> <*> relational -> add </%> <%> <*> command . parameters . count -> parameter _ calls </%>", "after_line": "command _ builder ,", "predictions": ["command _ builder . relational _ parameter _ list ,"]}, {"before_ctx": "<%> <-> using system ; </%> ", "before_line": " using system _ diagnostics ; using microsoft _ entity _ framework _ core _ infrastructure ; using microsoft _ entity _ framework _ core _ internal ; ", "after_ctx": " <%> <-> using microsoft _ extensions _ logging ; </%> <%> <+> _ factory </%> <%> <*> db -> relational </%> <%> <*> context -> transaction </%> <%> <*> transaction , i _ infrastructure < db _ transaction > -> factory </%> <%> <*> private readonly i _ db _ context _ transaction real _ transaction ; -> public relational _ transaction create ( </%> <%> <+> i _ relational _ connection connection , db _ transaction transaction , </%>", "after_line": "using microsoft _ entity _ framework _ core _ diagnostics ;", "predictions": ["using system _ core ; using system _ diagnostics ;"]}, {"before_ctx": " ", "before_line": " else { opened _ count + + ; } ", "after_ctx": " <%> <*> + -> = 2 </%>", "after_line": "opened _ count + + ;", "predictions": ["opened _ count + + ;"]}, {"before_ctx": " ", "before_line": " public async virtual task group _ by _ with _ aggregate _ function _ by _ navigation _ property ( ) ", "after_ctx": " <%> <*> await assert _ query _ scalar < order > ( -> await assert _ query _ scalar < order > ( </%>", "after_line": "public virtual async task group _ by _ with _ aggregate _ function _ by _ navigation _ property ( )", "predictions": ["public virtual task group _ by _ with -> function -> ,"]}, {"before_ctx": " ", "before_line": " using ( var context = new db _ context _ test . early _ learning _ center ( in _ memory _ test _ helpers . instance . create _ service _ provider ( ) ) ) { var entity = new db _ context _ test . category { id = 1 , name = STR } ; ", "after_ctx": " <%> <-> db _ context _ test . </%>", "after_line": "using ( var context = new early _ learning _ center ( in _ memory _ test _ helpers . instance . create _ service _ provider ( ) ) ) { var entity = new category { id = 1 , name = STR } ;", "predictions": ["using ( var context = new early _ var _ </@> enumerable . and expression left id , left , <@> } <@> <+> } <+> <+> _ memory _ center using factory _ memory readonly internal </%> factory <+> <+> <+> readonly ( <*> _ transaction _ ; <%> factory <%> <%> </%> factory readonly internal </%> factory readonly factory readonly internal </%> factory readonly <+> readonly factory </%> lazy ; ; ; ; ; _ new _ [ _ <*> _ string <%> ; </%> lazy } ; lazy lazy ; ; ; ; ; ; ) <"]}, {"before_ctx": " ", "before_line": " using ( var context = new db _ context _ test . early _ learning _ center ( service _ provider ) ) ", "after_ctx": " <%> <-> db _ context _ test . </%>", "after_line": "using ( var context = new early _ learning _ center ( service _ provider ) )", "predictions": ["using ( var context = new early ( assert ( invalid ( invalid _ provider </%> </%> _ assert </%> </%> > > > > </%> </%> </%> </%> </%> </%> </%> list . </@> ( var _ </@> _ <+> command > factory context context context context context ) </%> )"]}, {"before_ctx": "<%> <-> db _ context _ test . </%> ", "before_line": " using ( var context = new db _ context _ test . early _ learning _ center ( service _ provider ) ) ", "after_ctx": " ", "after_line": "using ( var context = new early _ learning _ center ( service _ provider ) )", "predictions": ["using ( var context = new early ( assert ( invalid ( invalid ( invalid _ assert </%> </%> _ assert </%> </%> _ assert > > </%> </%> </%> </%> </%> </%> </%> list </%> </%> _ [ . </@> . </@> . properties should properties should properties should ;"]}, {"before_ctx": " ", "before_line": " assert . true ( sqlite _ database _ facade _ extensions . is _ sqlite ( context . database ) ) ; ", "after_ctx": " <%> <*> sqlite _ -> context . </%> <%> <-> _ facade _ extensions </%> <%> <-> context . database </%>", "after_line": "assert . true ( context . database . is _ sqlite ( ) ) ;", "predictions": ["assert . true ( context . database ) ) -> command -> </@> _ type . <@> _ ) db new </@> . STR db _ , _ </%> database ) ->"]}, {"before_ctx": "<%> <*> sqlite _ -> context . </%> <%> <-> _ facade _ extensions </%> <%> <-> context . database </%> ", "before_line": " assert . false ( sqlite _ database _ facade _ extensions . is _ sqlite ( context . database ) ) ; ", "after_ctx": " ", "after_line": "assert . false ( context . database . is _ sqlite ( ) ) ;", "predictions": ["assert . false ( context . database query query query query ) <%> ) <+>"]}, {"before_ctx": " ", "before_line": " ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) ", "after_ctx": " <%> <+> if ( async ) { </%>", "after_line": "( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = >", "predictions": ["( await assert . throws _ async )"]}, {"before_ctx": " ", "before_line": " ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) ", "after_ctx": " <%> <+> if ( async ) { </%>", "after_line": "( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = >", "predictions": ["( await assert . throws _ async <%> connection )"]}, {"before_ctx": " ", "before_line": " ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) ", "after_ctx": " <%> <+> if ( async ) { </%>", "after_line": "( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = >", "predictions": ["( await assert . throws _ async < invalid _ execute </%> assert _ operation . async > </%> > </%> -> ) ) ) ) ) ) . _ _ . = ( database ( <@> <%> <%> </%> . . . . ) _ cancellation ) _ . _ . , _ expression , _ expression , _ expression , _ expression , _ expression )"]}, {"before_ctx": " ", "before_line": " ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) ", "after_ctx": " <%> <+> if ( async ) { </%>", "after_line": "( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = >", "predictions": ["( await assert . throws _ async < invalid _ operation </%> assert _ operation = database database </@> database ) </%> . _ _ get factory out <%> )"]}, {"before_ctx": " ", "before_line": " ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) ", "after_ctx": " <%> <+> if ( async ) { </%>", "after_line": "( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = >", "predictions": ["( await assert . throws _ async < invalid _ operation ) _ list _ list -> _ _ <%>"]}, {"before_ctx": " ", "before_line": " ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) ", "after_ctx": " <%> <+> if ( async ) { </%>", "after_line": "( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = >", "predictions": ["( await assert . throws _ async < invalid _ operation _ exception _ list </%> -> -> -> _ _ <*> <*> <*> -> )"]}, {"before_ctx": " ", "before_line": " ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) ", "after_ctx": " <%> <+> if ( async ) { </%>", "after_line": "( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = >", "predictions": ["( await assert . throws _ async < invalid _ operation _ exception assert _ <%> _ _ _ <*> </%> _ _ <*> </%> _ _ ) </@> database _ . _ _ _ STR"]}, {"before_ctx": " ", "before_line": " ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) ", "after_ctx": " <%> <+> if ( async ) { </%>", "after_line": "( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = >", "predictions": ["( await assert . throws _ async < invalid _ operation _ exception context _ ( <*> = = _ _ <*> = _ _ operation = _ _ _ <*> database command ) properties properties ) = test = test = )"]}, {"before_ctx": " ", "before_line": " ( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = > { if ( async ) ", "after_ctx": " <%> <+> if ( async ) { </%>", "after_line": "( await assert . throws _ async < invalid _ operation _ exception > ( async ( ) = >", "predictions": ["( await assert . throws _ async < invalid _ operation _ exception context _ . < < _ < < parameters </%> _ list _ list _ list _ _ _ [ > > > > properties properties properties properties properties )"]}, {"before_ctx": "<%> <+> sql _ server _ </%> ", "before_line": " var sql _ server _ modification _ command _ batch _ factory = scoped _ provider . get _ service < modification _ command _ batch _ factory > ( ) as sql _ server _ modification _ command _ batch _ factory ; ", "after_ctx": " ", "after_line": "var sql _ server _ modification _ command _ batch _ factory = scoped _ provider . get _ service < sql _ server _ modification _ command _ batch _ factory > ( ) ;", "predictions": ["var sql _ server _ modification _ = _ . </@> </@> create _ command , context _ <%> _ context _ <%> _ . _ </%> ; _ <%> ; _ </%> else else ;"]}, {"before_ctx": "<%> <*> out should _ reset _ to _ dependent -> out </%> <%> <*> out should _ reset _ principal _ properties -> out </%> <%> <*> out should _ reset _ dependent _ properties -> out </%> ", "before_line": " dependent _ entity _ type : should _ invert ? dependent _ entity _ type : principal _ entity _ type ) ) ", "after_ctx": " ", "after_line": "dependent _ entity _ type : dependent _ entity _ type ) )", "predictions": ["dependent _ entity _ type : dependent _ . _ </%> ) _ context _ type , <%> _ command cancellation _ command , enumerable _ command <-> equal equal )"]}, {"before_ctx": " ", "before_line": " using ( var command ", "after_ctx": " <%> <*> . build ( querying _ enumerable . relational _ query _ context . connection , querying _ enumerable . relational _ query _ context . parameter _ values ) ) { -> . build ( querying _ enumerable . relational _ query _ context . parameter _ values ) ; </%> <%> <-> cancellation _ token ) ; </%> <%> <*> command -> relational </%> <%> <*> builder . notify -> query </%> <%> <*> reader _ created ( data _ reader ) ; -> context . connection , </%> <%> <-> } </%> <%> <+> cancellation _ token , </%>", "after_line": "var command", "predictions": ["using ( var command"]}, {"before_ctx": "<%> <-> var executor = services . get _ required _ service < i _ sql _ statement _ executor > ( ) ; </%> ", "before_line": " await executor . execute _ non _ query _ async ( connection , commands ) ; ", "after_ctx": " ", "after_line": "await commands . execute _ non _ query _ async ( connection ) ;", "predictions": ["await connection . execute _ non _ query _ </@> <%> list command ;"]}, {"before_ctx": " ", "before_line": " using ( var command ", "after_ctx": " <%> <*> . build ( querying _ enumerable . relational _ query _ context . connection , querying _ enumerable . relational _ query _ context . parameter _ values ) ) { -> . build ( querying _ enumerable . relational _ query _ context . parameter _ values ) ; </%> <%> <+> querying _ enumerable . relational _ query _ context . connection , false </%> <%> <+> data _ reader . db _ </%> <%> <-> } </%>", "after_line": "var command", "predictions": ["using ( var command"]}, {"before_ctx": "<%> <*> executor -> relational _ commands </%> <%> <-> , relational _ commands </%> ", "before_line": " await executor . execute _ non _ query _ async ( connection , relational _ commands , cancellation _ token ) ; ", "after_ctx": " ", "after_line": "await relational _ commands . execute _ non _ query _ async ( connection , cancellation _ token ) ;", "predictions": ["await executor . execute _ _ _ , query <*> assert _ assert e * execute , : entity <*>"]}, {"before_ctx": "<%> <*> long result _ percentile = 0 ; if ( run _ result . iteration _ counters . first ( ) is threaded _ iteration _ counter ) { result _ percentile = get _ percentile ( run _ result , i , c = > ( ( threaded _ iteration _ counter ) c ) . requests _ per _ second , true ) ; } else if ( run _ result . iteration _ counters . first ( ) is iteration _ counter ) { result _ percentile = get _ percentile ( run _ result , i , c = > ( ( iteration _ counter ) c ) . elapsed _ millis , true ) ; } var metric = string . format ( STR , percentile ) ; -> long result _ percentile = get _ percentile ( run _ result , i , property _ accessor , true ) ; </%> <%> <+> long result _ memory _ percentile = 0 ; result _ memory _ percentile = get _ percentile ( run _ result , i , c = > c . working _ set , true ) ; metric = string . format ( STR , percentile , test _ config . instance . runtime _ flavor ) ; </%> ", "before_line": " scenario = string . format ( STR , run _ result . test _ name , test _ config . instance . runtime _ flavor ) . trim ( ) , ", "after_ctx": " <%> <*> STR -> unit </%>", "after_line": "scenario = run _ result . test _ name ,", "predictions": ["scenario = string . format ( STR , run _ result . test _ name , test _ config . instance . runtime _ get ) key key ( ) _"]}, {"before_ctx": "<%> <-> state _ manager _ </%> ", "before_line": " protected virtual state _ manager _ dependencies state _ manager _ state _ manager _ dependencies { get ; } ", "after_ctx": " ", "after_line": "protected virtual state _ manager _ dependencies state _ manager _ dependencies { get ; }", "predictions": ["protected virtual state _ , _ <*> <%> t _ = , > > a _ count _ ( ( ) ) skip"]}, {"before_ctx": "<%> <*> string -> i _ property </%> ", "before_line": " key _ properties _ map . add ( source _ property . name ) ; ", "after_ctx": " <%> <+> var source _ table _ entry _ mapping _ map = shared _ table _ entry _ map < entry _ mapping > . create _ shared _ table _ entry _ map _ factory ( source . entity _ types , source _ state _ manager , </%>", "after_line": "key _ properties _ map . add ( source _ property ) ;", "predictions": ["key _ properties _ map . int , <%> + integer v * integer + fact"]}, {"before_ctx": "<%> <+> if ( foreign _ key . principal _ key ! = foreign _ key . principal _ entity _ type . get _ primary _ key ( ) ) { string _ builder . append _ line ( ) . append ( STR ) . append ( code . literal ( foreign _ key . principal _ entity _ type . name ) ) . append ( STR ) . append ( string . join ( STR , foreign _ key . principal _ key . properties . select ( p = > code . literal ( p . name ) ) ) ) . append ( STR ) ; } } else { string _ builder . append _ line ( STR ) . append ( STR ) . append ( string . join ( STR , foreign _ key . properties . select ( p = > code . literal ( p . name ) ) ) ) . append ( STR ) ; generate _ foreign _ key _ annotations ( foreign _ key , string _ builder ) ; if ( foreign _ key . principal _ key ! = foreign _ key . principal _ entity _ type . get _ primary _ key ( ) ) { string _ builder . append _ line ( ) . append ( STR ) . append ( string . join ( STR , foreign _ key . principal _ key . properties . select ( p = > code . literal ( p . name ) ) ) ) . append ( STR ) ; } } } </%> ", "before_line": " using ( string _ builder . indent ( ) ) { generate _ annotations ( foreign _ key . annotations . to _ array ( ) , string _ builder ) ; } ", "after_ctx": " ", "after_line": "generate _ annotations ( foreign _ key . annotations . to _ array ( ) , string _ builder ) ;", "predictions": ["generate _ annotations ( foreign _ key . annotations . to _ array ( ) , string _ builder ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip ", "after_ctx": " <%> <*> method -> projection </%> <%> <*> method -> projection </%> <%> <*> private static t client -> conditional </%> <%> <*> method < t > ( t t , object ) = > t ; -> fact </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " cvs = > cvs . as _ no _ tracking ( ) ) ; ", "after_ctx": " <%> <-> . as _ no _ tracking ( ) </%>", "after_line": "cvs = > cvs ) ;", "predictions": ["cvs = > cvs . . = </@> _ <*> -> _ . ,"]}, {"before_ctx": "<%> <-> ( ) . as _ no _ tracking </%> ", "before_line": " var results = context . customer _ queries . as _ no _ tracking ( ) . to _ array ( ) ; ", "after_ctx": " <%> <-> . as _ no _ tracking ( ) </%>", "after_line": "var results = context . customer _ queries . to _ array ( ) ;", "predictions": ["var results = context -> -> . result _ </@> count ) ,"]}, {"before_ctx": "<%> <-> . as _ no _ tracking ( ) </%> ", "before_line": " ovs = > from ov in ovs . as _ no _ tracking ( ) ", "after_ctx": " ", "after_line": "ovs = > from ov in ovs", "predictions": ["ovs = > from ov in in )"]}, {"before_ctx": "<%> <*> var smart _ card = add ( new t _ smart _ card { username = login . username , login = dependent _ navs ? login : null , card _ serial = rsa _ token . serial , issued = rsa _ token . issued } ) ; var smart _ card = add ( new t _ smart _ card { username = login . username , login = dependent _ navs ? login : null , card _ serial = rsa _ token . serial , issued = rsa _ token . issued } ) ; -> var smart _ card = add ( new t _ smart _ card { login = login , card _ serial = rsa _ token . serial , issued = rsa _ token . issued } ) ; </%> <%> <+> var smart _ card = add ( new t _ smart _ card { login = login , card _ serial = rsa _ token . serial , issued = rsa _ token . issued } ) ; </%> ", "before_line": " username = login . username , login = dependent _ navs ? login : null ", "after_ctx": " <%> <-> username = login . username , login = dependent _ navs ? login : null , </%>", "after_line": "login = login", "predictions": ["username = login . username , login = login _ navs ? login : login : login"]}, {"before_ctx": "<%> <*> username = login . username , login = dependent _ navs ? login : null -> login = login </%> ", "before_line": " username = login . username , login = dependent _ navs ? login : null , ", "after_ctx": " ", "after_line": "login = login ,", "predictions": ["username = login . ( ) > , , ) ("]}, {"before_ctx": "<%> <+> . append _ line ( STR ) . append _ line ( STR ) . append _ line ( STR ) </%> ", "before_line": " . append _ line ( STR ) . append ( STR ) ", "after_ctx": " <%> <+> . append _ line ( STR ) . append _ line ( STR ) . append _ line ( STR ) </%>", "after_line": ". append _ line ( STR ) . append _ line ( STR )", "predictions": [". append _ line ( STR . map _ ;"]}, {"before_ctx": "<%> <+> . append _ line ( STR ) . append _ line ( STR ) . append _ line ( STR ) </%> ", "before_line": " . append _ line ( STR ) . append ( STR ) ", "after_ctx": " <%> <*> public override string get _ end _ if _ script ( ) = > STR + environment . new _ line ; -> public override string get _ end _ if _ script ( ) </%> <%> <+> = > new string _ builder ( ) . append _ line ( STR ) . append _ line ( STR ) . to _ string ( ) ; </%>", "after_line": ". append _ line ( STR ) . append _ line ( STR )", "predictions": [". append ( STR )"]}, {"before_ctx": " ", "before_line": " fact _ skip _ tod ", "after_ctx": " <%> <*> STR + eol + -> @ STR v _ count integer ; begin select count ( * ) into v _ count from all _ tab _ identity _ cols t </%> <%> <+> where t . table _ name = n ' people ' </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ tod </%> ", "before_line": " STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol , sql ) ; } fact _ skip _ tod ", "after_ctx": " <%> <+> @ STR v _ count integer ; begin select count ( * ) into v _ count from all _ tab _ identity _ cols t where t . table _ name = n ' people ' </%>", "after_line": "@ STR v _ count integer ; begin select count ( * ) into v _ count from all _ tab _ identity _ cols t where t . table _ name = n ' people ' and t . column _ name = ' lucky _ number ' ; if v _ count > 0 then execute immediate ' alter table STR people STR modify STR lucky _ number STR drop identity ' ; end if ; end ; go alter table STR people STR modify STR lucky _ number STR int not null default NUM STR sql ) ; } fact", "predictions": ["STR + eol + STR + ) _ ) _ . . . = . . table"]}, {"before_ctx": "<%> <*> STR + eol + -> end ; </%> <%> <+> go alter table </%> <%> <*> + eol , -> people STR modify STR lucky _ number STR int not null default NUM STR </%> <%> <-> _ skip _ tod </%> ", "before_line": " STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol , sql ) ; } fact _ skip _ tod ", "after_ctx": " ", "after_line": "@ STR v _ count integer ; begin select count ( * ) into v _ count from all _ tab _ identity _ cols t where t . table _ name = n ' people ' and t . column _ name = ' lucky _ number ' ; if v _ count > 0 then execute immediate ' alter table STR people STR modify STR lucky _ number STR drop identity ' ; end if ; end ; go alter table STR people STR modify STR lucky _ number STR number ( NUM ) not null STR sql ) ; } fact", "predictions": ["STR + eol + STR + STR + STR _ ( ( ( ( ( ( ( ( ( -> </@> ( ( ( </%> _ c STR ( ( ( sql = , _ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ("]}, {"before_ctx": " ", "before_line": " fact _ skip _ tod ", "after_ctx": " <%> <-> STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + STR + eol + </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " query _ model . main _ from _ clause ", "after_ctx": " <%> <-> foreach ( var body _ clause in query _ model . body _ clauses ) { body _ clause . transform _ expressions ( e = > extract _ query _ annotations ( e , query _ annotations ) ) ; } </%>", "after_line": "query _ model", "predictions": ["main _ from _ clause"]}, {"before_ctx": "<%> <+> { if ( check _ possible _ injection ( analysis _ context , assignment _ expression _ syntax . right , identifier , location ) ) </%> ", "before_line": " if ( check _ possible _ injection ( analysis _ context , assignment _ expression _ syntax . right , identifier , location ) ) { return true ; } break ; ", "after_ctx": " <%> <+> break ; } </%> <%> <+> { if ( check _ possible _ injection ( analysis _ context , variable _ declarator _ syntax . initializer , identifier , </%>", "after_line": "return true ;", "predictions": ["return true ;"]}, {"before_ctx": "<%> <+> } </%> <%> <+> { if ( check _ possible _ injection ( analysis _ context , variable _ declarator _ syntax . initializer , identifier , location ) ) </%> ", "before_line": " if ( check _ possible _ injection ( analysis _ context , variable _ declarator _ syntax . initializer , identifier , location ) ) { return true ; } break ; ", "after_ctx": " <%> <+> break ; } </%> <%> <*> private -> protected </%>", "after_line": "return true ;", "predictions": ["return true ;"]}, {"before_ctx": " ", "before_line": " assert . equal ( unchecked ( ( byte? ) 1 ) , create _ and _ use _ factory ( entity _ type . find _ property ( STR ) ) ) ; ", "after_ctx": " <%> <-> ( unchecked </%> <%> <-> ) </%> <%> <-> ( unchecked </%> <%> <-> ) </%> <%> <-> ( unchecked </%> <%> <-> ) </%>", "after_line": "assert . equal ( ( byte? ) 1 , create _ and _ use _ factory ( entity _ type . find _ property ( STR ) ) ) ;", "predictions": ["assert . equal ( 1 , -> <%> <%> < _ < , if if <+> entity entity <+> entity ( assert _ ) , . null = ) = ) token token token = ) token ) token"]}, {"before_ctx": "<%> <+> var ef _ groupings = ef _ results . cast < i _ grouping < string , dynamic > > ( ) . to _ list ( ) ; foreach ( i _ grouping < string , dynamic > o _ grouping in o _ results ) { </%> ", "before_line": " var countries = new string [ ] { STR , STR , STR , STR , STR , STR } ; ", "after_ctx": " <%> <-> { var ef _ groupings = ef _ results . cast < i _ grouping < string , dynamic > > ( ) . to _ list ( ) ; foreach ( i _ grouping < string , dynamic > o _ grouping in o _ results ) </%> <%> <+> var ef _ groupings = ef _ results . cast < i _ grouping < string , dynamic > > ( ) . to _ list ( ) ; </%>", "after_line": "var countries = new [ ] { STR , STR , STR , STR , STR , STR } ;", "predictions": ["var countries = new [ ] { STR , STR , STR , STR , STR , STR } var var t + {"]}, {"before_ctx": " ", "before_line": " { if ( result ! = null ) { for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) ", "after_ctx": " <%> <*> var entity _ or _ collection = entity _ accessors [ i ] ( result as t _ in ) ; if ( entity _ or _ collection ! = null ) -> for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) </%> <%> <*> tracking -> or </%> <%> <*> info -> collection </%> <%> <-> _ tracking </%> <%> <*> infos -> accessors </%> <%> <*> ; -> ( result as t _ in ) ; </%> <%> <*> tracking -> or </%> <%> <*> info . is _ enumerable _ target -> collection ! = null </%> <%> <*> foreach ( var entity in ( i _ enumerable ) entity _ or _ collection ) -> var entity _ tracking _ info = entity _ tracking _ infos [ i ] ; </%>", "after_line": "{ if ( result ! = null )", "predictions": ["for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + ; ) ) ;"]}, {"before_ctx": "<%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a ) , ", "after_ctx": " <%> <-> < order , bool > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ,", "predictions": ["element _ asserter : ( e </%> context <%> = <%> = <%> <%> <%> <%> ) </%>"]}, {"before_ctx": "<%> <*> queryable < t -> set </%> <%> <*> item > -> source </%> <%> <*> predicate -> result </%> <%> <*> queryable < t -> set </%> <%> <*> item > -> source </%> <%> <*> predicate -> result </%> <%> <*> predicate -> result </%> <%> <*> predicate -> result </%> <%> <*> where t -> = > fixture . query </%> <%> <*> item : class -> asserter . assert _ any ( </%> <%> <-> = > fixture . query _ asserter . assert _ any ( </%> ", "before_line": " = > fixture . query _ asserter . assert _ all ( query , query , predicate , predicate , is _ async ) ; ", "after_ctx": " ", "after_line": "= > assert _ all ( is _ async , query , query , predicate , predicate ) ;", "predictions": ["= > assert _ all ( query , query , predicate , predicate , is _ async ) ;"]}, {"before_ctx": "<%> <*> object -> t _ result </%> <%> <*> object -> t _ result </%> ", "before_line": " = > fixture . query _ asserter . assert _ count ( query , query , is _ async ) ; ", "after_ctx": " <%> <-> = > fixture . query _ asserter . assert _ count ( </%>", "after_line": "= > assert _ count ( is _ async , query , query ) ;", "predictions": ["= > assert _ count > query query query equal equal equal ; ) ;"]}, {"before_ctx": "<%> <-> fixture . query _ asserter . </%> <%> <*> query -> is _ async </%> <%> <*> is _ async -> query </%> ", "before_line": " = > fixture . query _ asserter . assert _ count ( query , query , predicate , predicate , is _ async ) ; ", "after_ctx": " ", "after_line": "= > assert _ count ( is _ async , query , query , predicate , predicate ) ;", "predictions": ["= > assert _ assert ( > <@> _ foreach <-> ( ) > <*> > ( ) ; ;"]}, {"before_ctx": " ", "before_line": " = > fixture . query _ asserter . assert _ long _ count ( query , query , is _ async ) ; ", "after_ctx": " <%> <*> action < object , object > asserter = null , -> action < t _ result , t _ result > asserter = null , </%>", "after_line": "= > assert _ long _ count ( is _ async , query , query ) ;", "predictions": ["= > assert _ long . assert count </%> _ = element ; ; ; . STR }"]}, {"before_ctx": " ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a ) ) ; ", "after_ctx": " <%> <-> < owned _ person > </%> <%> <*> ops -> ss </%> <%> <*> ops -> ss . set < owned _ person > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : + t <@> <@> = </@> ( <@> <%> a <%> <%> <%> <%> _ asserter + ) ; ; override"]}, {"before_ctx": " ", "before_line": " element _ asserter : ( e , a ) = > assert _ equal < owned _ person > ( e . p , a . p ) ) ; ", "after_ctx": " <%> <-> < owned _ person > </%> <%> <*> ops -> ss </%> <%> <*> ops -> ss . set < owned _ person > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ equal ( e . p , a . p ) ) ;", "predictions": ["element _ asserter : ( e </@> a ) assert > assert map _ i map -> -> <%> , if STR ( end </%> results i i <%> <%> i <%> <%> <%> i <%> <%> <%> i <%> = ) ) ;"]}, {"before_ctx": "<%> <*> ops -> ss </%> <%> <*> ops -> ss . set < owned _ person > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < moon > ( e , a ) ) ; ", "after_ctx": " ", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) public < to property i cancellation <%> . </@> <%> path ;"]}, {"before_ctx": "<%> <-> public task deletes _ database _ with _ filename ( ) { return delete _ database _ test ( async : false , open : false , file : true ) ; } conditional _ fact public task async _ deletes _ database ( ) { return delete _ database _ test ( async : true , open : false , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach public task async _ deletes _ database _ with _ filename ( ) { return delete _ database _ test ( async : true , open : false , file : true ) ; } conditional _ fact public task deletes _ database _ with _ opened _ connections ( ) { return delete _ database _ test ( async : false , open : true , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach public task deletes _ database _ with _ filename _ with _ opened _ connections ( ) { return delete _ database _ test ( async : false , open : true , file : true ) ; } conditional _ fact public task async _ deletes _ database _ with _ opened _ connections ( ) { return delete _ database _ test ( async : true , open : true , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach public task async _ deletes _ database _ with _ filename _ with _ opened _ connections ( ) { return delete _ database _ test ( async : true , open : true , file : true ) ; } private static async task delete _ database _ test ( bool async , bool open , bool file ) { using ( var test _ database = sql _ server _ test _ store . create _ initialized ( STR + ( file ? STR : STR ) , file ) ) { if ( ! open ) { test _ database . close _ connection ( ) ; } using ( var context = new sql _ server _ database _ creator _ test . blogging _ context ( test _ database ) ) { var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( context ) ; assert . true ( async ? await creator . exists _ async ( ) : creator . exists ( ) ) ; if ( async ) { assert . true ( await context . database . ensure _ deleted _ async ( ) ) ; } else { assert . true ( context . database . ensure _ deleted ( ) ) ; } assert . equal ( connection _ state . closed , context . database . get _ db _ connection ( ) . state ) ; assert . false ( async ? await creator . exists _ async ( ) : creator . exists ( ) ) ; assert . equal ( connection _ state . closed , context . database . get _ db _ connection ( ) . state ) ; } } } conditional _ fact public task noop _ when _ database _ does _ not _ exist ( ) { return noop _ when _ database _ does _ not _ exist _ test ( async : false , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach public task noop _ when _ database _ with _ filename _ does _ not _ exist ( ) { return noop _ when _ database _ does _ not _ exist _ test ( async : false , file : true ) ; } conditional _ fact public task async _ is _ noop _ when _ database _ does _ not _ exist ( ) { return noop _ when _ database _ does _ not _ exist _ test ( async : true , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach </%> <%> <-> async _ is _ </%> <%> <+> bool async </%> <%> <-> : true </%> ", "before_line": " using ( var context = new sql _ server _ database _ creator _ test . blogging _ context ( test _ database ) ) { var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( context ) ; ", "after_ctx": " ", "after_line": "using ( var context = new blogging _ context ( test _ database ) ) { var creator = get _ database _ creator ( context ) ;", "predictions": ["using ( var context = new sql _ server _ database _ creator _ with _ initialized ( STR ) ) ;"]}, {"before_ctx": "<%> <+> , ambient _ transaction </%> <%> <+> , ambient _ transaction </%> <%> <+> , bool ambient _ transaction </%> <%> <+> , bool ambient _ transaction </%> ", "before_line": " using ( var context = new sql _ server _ database _ creator _ test . blogging _ context ( test _ database ) ) ", "after_ctx": " <%> <-> sql _ server _ database _ creator _ test . </%>", "after_line": "using ( var context = new blogging _ context ( test _ database ) )", "predictions": ["using ( var context = new blogging _ context ( test _ database ) )"]}, {"before_ctx": "<%> <-> public task noop _ when _ database _ with _ filename _ exists _ and _ has _ schema ( ) { return noop _ when _ database _ exists _ and _ has _ schema _ test ( async : false , file : true ) ; } conditional _ fact public task async _ is _ noop _ when _ database _ exists _ and _ has _ schema ( ) { return noop _ when _ database _ exists _ and _ has _ schema _ test ( async : true , file : false ) ; } conditional _ fact sql _ server _ condition _ sql _ server _ condition _ supports _ attach </%> <%> <-> async _ is _ </%> <%> <+> bool async </%> <%> <-> : true </%> ", "before_line": " using ( var context = new sql _ server _ database _ creator _ test . blogging _ context ( test _ database ) ) ", "after_ctx": " ", "after_line": "using ( var context = new blogging _ context ( test _ database ) )", "predictions": ["using ( var context = new blogging _ context ( test _ database ) )"]}, {"before_ctx": "<%> <-> public class sql _ server _ database _ creator _ has _ tables _ test { conditional _ fact public task throws _ when _ database _ does _ not _ exist ( ) { return throws _ when _ database _ does _ not _ exist _ test ( async : false ) ; } conditional _ fact </%> <%> <*> task async -> class sql </%> <%> <*> throws -> server </%> <%> <*> when -> database </%> <%> <*> database -> creator </%> <%> <*> does -> has </%> <%> <*> not -> tables </%> <%> <*> exist ( ) -> test : sql _ server _ database _ creator _ test </%> <%> <*> return throws _ when _ database _ does _ not _ exist -> conditional </%> <%> <*> test ( async : true ) ; -> theory </%> <%> <-> } </%> <%> <+> inline _ data _ true </%> <%> <*> private static async task throws _ when _ database _ does _ not -> inline </%> <%> <*> exist -> data </%> <%> <*> test ( bool async ) -> false </%> <%> <+> public async task throws _ when _ database _ does _ not _ exist ( bool async ) </%> ", "before_line": " var database _ creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; ", "after_ctx": " ", "after_line": "var database _ creator = get _ database _ creator ( test _ database ) ;", "predictions": ["var database _ creator = get _ database _ creator ( test _ database ) ;"]}, {"before_ctx": "<%> <*> async task async -> class sql </%> <%> <*> deletes -> server </%> <%> <*> ( ) -> _ creator _ delete _ test : sql _ server _ database _ creator _ test </%> <%> <*> await deletes _ database -> conditional </%> <%> <*> test ( async : true ) ; -> theory </%> <%> <-> } </%> <%> <+> inline _ data _ true _ true </%> <%> <*> private static async task deletes -> inline </%> <%> <*> database -> data </%> <%> <*> test ( bool async ) -> false _ false </%> <%> <+> public static async task deletes _ database ( bool async , bool ambient _ transaction ) </%> ", "before_line": " var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; ", "after_ctx": " <%> <+> using ( create _ transaction _ scope ( ambient _ transaction ) ) { </%>", "after_line": "var creator = get _ database _ creator ( test _ database ) ;", "predictions": ["var creator = get _ database _ creator ( test _ database ) ;"]}, {"before_ctx": "<%> <+> } </%> <%> <*> conditional _ fact public task throws _ when _ database _ does _ not _ exist ( ) { return throws _ when _ database _ does _ not _ exist _ test ( async : false ) ; } conditional _ fact public task async _ throws _ when _ database _ does _ not _ exist ( ) { return throws _ when _ database _ does _ not _ exist _ test ( async : true ) ; } private static async task throws _ when _ database _ does _ not _ exist _ test ( bool async ) -> conditional _ theory </%> <%> <+> inline _ data _ true inline _ data _ false public async task throws _ when _ database _ does _ not _ exist ( bool async ) </%> ", "before_line": " var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; ", "after_ctx": " ", "after_line": "var creator = get _ database _ creator ( test _ database ) ;", "predictions": ["var creator = get _ database _ creator ( test _ database ) ;"]}, {"before_ctx": " ", "before_line": " var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( connection _ string _ builder . to _ string ( ) ) ; ", "after_ctx": " <%> <-> public class sql _ server _ database _ creator _ create _ tables _ test { conditional _ fact public task creates _ schema _ in _ existing _ database ( ) { return creates _ schema _ in _ existing _ database _ test ( async : false ) ; </%>", "after_line": "var creator = get _ database _ creator ( connection _ string _ builder . to _ string ( ) ) ;", "predictions": ["var creator = get _ database _ creator ( connection _ string _ builder . to ) async </%> </%> = </@> not _ string </%> ( database _ string database database database database database database database database database test ( -> _ string -> -> -> -> true -> ) ) ) ) ;"]}, {"before_ctx": "<%> <*> conditional _ fact public task throws _ if _ database _ does _ not _ exist ( ) { return throws _ if _ database _ does _ not _ exist _ test ( async : false ) ; } conditional _ fact public task async _ throws _ if _ database _ does _ not _ exist ( ) { return throws _ if _ database _ does _ not _ exist _ test ( async : true ) ; } private static async task throws _ if _ database _ does _ not _ exist _ test ( bool async ) -> conditional _ theory </%> <%> <+> inline _ data _ true inline _ data _ false public async task throws _ if _ database _ does _ not _ exist ( bool async ) </%> ", "before_line": " var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; ", "after_ctx": " ", "after_line": "var creator = get _ database _ creator ( test _ database ) ;", "predictions": ["var creator = get _ database _ creator ( test _ database ) ;"]}, {"before_ctx": "<%> <-> public class sql _ server _ database _ creator _ create _ test { conditional _ fact public task creates _ physical _ database _ but _ not _ tables ( ) { return creates _ physical _ database _ but _ not _ tables _ test ( async : false ) ; } conditional _ fact </%> <%> <*> task async _ creates -> class sql </%> <%> <*> physical -> server </%> <%> <*> but -> creator </%> <%> <*> not -> create </%> <%> <*> tables ( ) -> test : sql _ server _ database _ creator _ test </%> <%> <*> return creates _ physical _ database _ but _ not _ tables -> conditional </%> <%> <*> test ( async : true ) ; -> theory </%> <%> <-> } </%> <%> <+> inline _ data _ true _ false </%> <%> <*> private static async task creates _ physical _ database _ but -> inline </%> <%> <*> not -> data </%> <%> <*> tables -> false </%> <%> <*> test ( bool async ) -> true </%> <%> <+> public async task creates _ physical _ database _ but _ not _ tables ( bool async , bool ambient _ transaction ) </%> ", "before_line": " var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; ", "after_ctx": " <%> <+> using ( create _ transaction _ scope ( ambient _ transaction ) ) { </%>", "after_line": "var creator = get _ database _ creator ( test _ database ) ;", "predictions": ["var creator = get _ database _ creator ( test _ database ) ;"]}, {"before_ctx": "<%> <*> conditional _ fact public task throws _ if _ database _ already _ exists ( ) { return throws _ if _ database _ already _ exists _ test ( async : false ) ; } conditional _ fact public task async _ throws _ if _ database _ already _ exists ( ) { return throws _ if _ database _ already _ exists _ test ( async : true ) ; } private static async task throws _ if _ database _ already _ exists _ test ( bool async ) -> conditional _ theory </%> <%> <+> inline _ data _ true inline _ data _ false public async task throws _ if _ database _ already _ exists ( bool async ) </%> ", "before_line": " var creator = sql _ server _ database _ creator _ test . get _ database _ creator ( test _ database ) ; ", "after_ctx": " ", "after_line": "var creator = get _ database _ creator ( test _ database ) ;", "predictions": ["var creator = get _ database _ creator ( test _ database ) ;"]}, {"before_ctx": "<%> <+> using xunit ; </%> ", "before_line": " public class in _ memory _ cross _ store _ fixture : cross _ store _ fixture < in _ memory _ test _ store > ", "after_ctx": " <%> <*> i -> shared </%> <%> <*> service -> cross </%> <%> <*> provider service -> store _ fixture shared _ cross _ store </%> <%> <*> provider -> fixture </%> <%> <*> service _ provider = -> shared _ cross _ store _ fixture = new shared _ cross _ store _ fixture ( </%>", "after_line": "public class in _ memory _ cross _ store _ fixture : cross _ store _ fixture", "predictions": ["public class in _ memory _ cross _ store _ fixture : cross _ store _ async _ <%>"]}, {"before_ctx": "<%> <+> using xunit ; </%> ", "before_line": " public class sql _ server _ cross _ store _ fixture : cross _ store _ fixture < sql _ server _ test _ store > ", "after_ctx": " <%> <*> i -> shared </%> <%> <*> service -> cross </%> <%> <*> provider service -> store _ fixture shared _ cross _ store </%> <%> <*> provider -> fixture </%> <%> <*> service _ provider = -> shared _ cross _ store _ fixture = new shared _ cross _ store _ fixture ( </%>", "after_line": "public class sql _ server _ cross _ store _ fixture : cross _ store _ fixture", "predictions": ["public class sql _ server _ cross _ store _ fixture : cross _ store _ ( _ database fact"]}, {"before_ctx": "<%> <+> using system ; </%> ", "before_line": " public abstract class cross _ store _ fixture < t _ test _ store > where t _ test _ store : test _ store ", "after_ctx": " <%> <-> t _ </%> <%> <+> type test _ store _ type </%> <%> <-> t _ </%>", "after_line": "public abstract class cross _ store _ fixture", "predictions": ["public abstract class cross _ store _ fixture"]}, {"before_ctx": " ", "before_line": " public abstract class end _ to _ end _ test < t _ test _ store , t _ fixture > : i _ class _ fixture < t _ fixture > , i _ disposable ", "after_ctx": " <%> <-> < t _ test _ store > </%>", "after_line": "public abstract class end _ to _ end _ test < t _ test _ store , t _ fixture > : i _ disposable", "predictions": ["public abstract class end _ to _ end _ token -> _ <-> _ t set . i -> provider _ <+>"]}, {"before_ctx": "<%> <*> return -> state _ entry [ property ] = </%> ", "before_line": " public virtual async task < object > next _ async ( state _ entry state _ entry , i _ property property , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) ", "after_ctx": " ", "after_line": "public virtual async task next _ async ( state _ entry state _ entry , i _ property property , cancellation _ token cancellation _ token = default ( cancellation _ token ) )", "predictions": ["public virtual async task next _ async ( state _ <%> t _ </%> <*> create . </%> )"]}, {"before_ctx": " ", "before_line": " . properties ( ps = > ps . property ( c = > c . name ) . column _ name ( STR ) ) ; ", "after_ctx": " <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%>", "after_line": ". property ( c = > c . name ) . column _ name ( STR ) ;", "predictions": [". properties ( ps = > ps . property ( _ = -> </%> ) _ properties . key s ( : STR ( : : > ) ( : : task </%> ) </%> </%> </%> ) </%> sql task ) ; ; server <-> ( public ( throws async > ( throws async test async > ( c async test async > </%> </%> _ name </%> </%> </%> _ name </%> </%> </%> ) </%> STR </%> database </%> ) ) ; server"]}, {"before_ctx": " ", "before_line": " . properties ( ps = > ps . property < string > ( STR ) ) ; ", "after_ctx": " <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%>", "after_line": ". property < string > ( STR ) ;", "predictions": [". properties ( ps = > ps . property ( </@> ) ) name name c list properties < builder <+> ) service"]}, {"before_ctx": "<%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> ", "before_line": " . properties ( ps = > ps . property < string > ( STR ) ) ; ", "after_ctx": " ", "after_line": ". property < string > ( STR ) ;", "predictions": [". properties ( ps = > ps . property ( STR ) ) c c name ;"]}, {"before_ctx": "<%> <*> builder . entity < branch > ( ) . key ( s = > s . id ) -> builder </%> <%> <*> properties -> entity < branch > </%> <%> <+> pb . key ( s = > s . id ) ; </%> <%> <*> ; -> ; </%> ", "before_line": " . properties ( pb = > { pb . property ( s = > s . sh ) ; } ) ; ", "after_ctx": " ", "after_line": ". property ( s = > s . sh ) ;", "predictions": [". properties ( pb = > pb . property ( s = > s . = ) ) ( </%> <*> ( ( database async database async database async ( ( throws throws database async database async database async fact async <+> -> ) ) ) -> ) <*> pb _ public database </%> -> -> </%> -> -> -> -> ) <*>"]}, {"before_ctx": " ", "before_line": " . properties ( ps = > ps . property ( c = > c . name ) . annotation ( STR , STR ) ) ; ", "after_ctx": " <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%>", "after_line": ". property ( c = > c . name ) . annotation ( STR , STR ) ;", "predictions": [". properties ( ps = > ps . property ( name ; c . name > STR ) context ( -> <%> <%> ( </%> ( > ) ) ( </%> id ( task ( test async > ( task ( ( </%> <*> ( c </%> async true ) ) ) ) ) ) test _ <%> ( throws async <%> ( test async > ( test _ <*> </%> </%> _ sql </%> </%> _ sql </%> </%> </%> </%> </%> </%> </%> ) </%> </%> _ sql </%> </%> _ sql </%> </%> _ sql </%> </%>"]}, {"before_ctx": "<%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> ", "before_line": " . properties ( ps = > ps . property < string > ( STR ) . annotation ( STR , STR ) ) ; ", "after_ctx": " <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%>", "after_line": ". property < string > ( STR ) . annotation ( STR , STR ) ;", "predictions": [". properties ( ps = > ps . property ( STR , STR ) ) _ ;"]}, {"before_ctx": "<%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> ", "before_line": " . properties ( ps = > ps . property < string > ( STR ) . annotation ( STR , STR ) ) ; ", "after_ctx": " <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%>", "after_line": ". property < string > ( STR ) . annotation ( STR , STR ) ;", "predictions": [". properties ( ps = > ps . property ( STR , STR ) ) ;"]}, {"before_ctx": "<%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> ", "before_line": " . properties ( ps = > ps . property ( c = > c . name ) . use _ store _ sequence ( ) ) ; ", "after_ctx": " ", "after_line": ". property ( c = > c . name ) . use _ store _ sequence ( ) ;", "predictions": [". properties ( ps = > ps . property ( a , store _ </@> _ <@> _ string ( <%> _ < entity _ ( c </%> _ sql _ transaction ) ) ) ; : ) ; ;"]}, {"before_ctx": "<%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> <%> <-> . properties ( ps = > ps </%> <%> <-> ) </%> ", "before_line": " model _ builder . entity < customer > ( ) . properties ( ps = > ps . property < int > ( STR ) . column _ type ( STR ) ) ; ", "after_ctx": " ", "after_line": "model _ builder . entity < customer > ( ) . property < int > ( STR ) . column _ type ( STR ) ;", "predictions": ["model _ builder . entity < customer > ( ) . properties ( ps = <+> ) ( ; ) ; bool property _ task ; ; ;"]}, {"before_ctx": "<%> <*> . key ( e = > e . id ) . properties ( ps = > { -> . key ( e = > e . id ) ; </%> <%> <-> } ) ; </%> ", "before_line": " . properties ( ps = > ps . property ( e = > e . name ) ) ; ", "after_ctx": " <%> <*> . entity < gearbox > ( ) . key ( g = > g . id ) . properties ( ps = > -> . entity < gearbox > ( ps = > </%> <%> <+> ps . key ( g = > g . id ) ; </%>", "after_line": ". property ( e = > e . name ) ;", "predictions": [". properties ( ps = > ps . property ( e = > e . name async e -> -> _ <+> ) -> <*> <*> ) ) ) ) ;"]}, {"before_ctx": "<%> <*> . entity < gearbox > ( ) . key ( g = > g . id ) . properties ( ps = > -> . entity < gearbox > ( ps = > </%> <%> <+> ps . key ( g = > g . id ) ; </%> ", "before_line": " . properties ( ps = > { ps . property ( s = > s . name ) ; } ) ; ", "after_ctx": " <%> <*> . entity < team > ( ) . key ( t = > t . id ) . properties ( ps = > -> . entity < team > ( ps = > </%> <%> <+> ps . key ( t = > t . id ) ; </%>", "after_line": ". property ( s = > s . name ) ;", "predictions": [". properties ( ps = > ps . property ( s = > s . name async ; <*> <*> <*> _ create ) ) async server ( , , , , s _ fact database database _ name ) async server ( , , , , s _ fact database database database ) async server ( , , , , s _ fact database database database"]}, {"before_ctx": "<%> <+> rc = native _ methods . sqlite _ step _ blocking ( connection . db _ handle , stmt , command _ timeout * NUM ) ; </%> ", "before_line": " stmts . enqueue ( tuple . create ( stmt , rc ! = constants . sqlite _ done ) ) ; ", "after_ctx": " ", "after_line": "stmts . enqueue ( tuple . create ( stmt , rc ! = sqlite _ done ) ) ;", "predictions": ["stmts . enqueue ( stmt ) ;"]}, {"before_ctx": "<%> <+> foreign _ key . declaring _ </%> <%> <*> list -> hash _ set </%> ", "before_line": " if ( dependent _ key _ value _ factory . try _ create _ from _ current _ values ( entry , out key ) ) ", "after_ctx": " <%> <*> list -> hash _ set </%>", "after_line": "if ( try _ create _ from _ current _ values ( entry , out key ) )", "predictions": ["if ( try _ create _ from _ current _ native , out _ ) <-> test ) e e ) _ -> async true async file _ server _ context _ <%> _ -> async data ) ) _ ) not ) _ ) )"]}, {"before_ctx": "<%> <-> assert . null ( test _ listener . foreign _ key _ change ) ; </%> <%> <-> principal _ </%> <%> <-> assert _ detect _ changes _ no _ op ( change _ detector , state _ manager , test _ listener ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( build _ model ( ) ) ; ", "after_ctx": " <%> <-> assert . equal ( entity _ state . modified , entry . entity _ state ) ; </%>", "after_line": "var context _ services = create _ context _ services ( build _ model ( ) ) ;", "predictions": ["var context _ services = build _ model ( ) ;"]}, {"before_ctx": "<%> <*> where ( [ p ] . [ discontinued ] = 0 and ( [ p ] . [ product _ id ] > NUM ) ) or ( [ p ] . [ discontinued ] = 1 and ( [ p ] . [ product _ id ] < = NUM ) ) STR -> where case when ( </%> <%> <+> . [ discontinued ] = 1 ) then cast ( 1 as bit ) else cast ( 0 as bit ) end < > case when ( . [ product _ id ] > NUM ) then cast ( 1 as bit ) else cast ( 0 as bit ) end STR </%> ", "before_line": " where ( [ p ] . [ discontinued ] = 0 and [ p ] . [ discontinued ] = 0 ) or ( [ p ] . [ discontinued ] = 1 and [ p ] . [ discontinued ] = 1 ) STR ", "after_ctx": " <%> <*> where ( ( [ p ] . [ product _ id ] < = NUM ) and ( [ p ] . [ product _ id ] < = NUM ) ) or ( ( [ p ] . [ product _ id ] > NUM ) and ( [ p ] . [ product _ id ] > NUM ) ) STR -> where case when ( </%>", "after_line": "where [ p ] . [ discontinued ] = [ p ] . [ discontinued ] STR", "predictions": ["where ( [ p ] . [ discontinued ] = 0 and [ p ] . [ discontinued ] = 0 ) STR"]}, {"before_ctx": " ", "before_line": " public virtual entity _ state state = > state _ entry . entity _ state ; public virtual void set _ state ( entity _ state entity _ state ) ", "after_ctx": " <%> <-> check . is _ defined ( entity _ state , STR ) ; state _ entry . set _ entity _ state ( entity _ state ) ; } </%> <%> <*> public virtual task set _ -> get { return </%> <%> <*> async ( -> entry . entity _ state ; } </%> <%> <-> entity _ state entity _ state , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </%> <%> <+> set </%> <%> <*> entity _ state -> value </%> <%> <-> return </%> <%> <-> _ async </%> <%> <*> entity _ state , false , cancellation _ token -> value </%> <%> <+> } </%>", "after_line": "public virtual entity _ state state", "predictions": ["public virtual void set _ state ( entity _ state entity _ state )"]}, {"before_ctx": "<%> <*> theory inline _ data _ false inline _ data _ true public async task detects _ scalar _ property _ change ( bool async ) -> fact </%> <%> <+> public void detects _ scalar _ property _ change ( ) </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } ", "after_ctx": " <%> <*> theory inline _ data _ false inline _ data _ true public async task skips _ detection _ of _ scalar _ property _ change _ for _ notification _ entities ( bool async ) -> fact </%> <%> <+> public void skips _ detection _ of _ scalar _ property _ change _ for _ notification _ entities ( ) </%>", "after_line": "change _ detector . detect _ changes ( entry ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <*> theory inline _ data _ false inline _ data _ true public async task skips _ detection _ of _ scalar _ property _ change _ for _ notification _ entities ( bool async ) -> fact </%> <%> <+> public void skips _ detection _ of _ scalar _ property _ change _ for _ notification _ entities ( ) </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } ", "after_ctx": " <%> <*> theory inline _ data _ false inline _ data _ true public async task detects _ principal _ key _ change ( bool async ) -> fact </%> <%> <+> public void detects _ principal _ key _ change ( ) </%>", "after_line": "change _ detector . detect _ changes ( entry ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": " ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } ", "after_ctx": " <%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%>", "after_line": "change _ detector . detect _ changes ( entry ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } ", "after_ctx": " ", "after_line": "change _ detector . detect _ changes ( entry ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": " ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } ", "after_ctx": " <%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%>", "after_line": "change _ detector . detect _ changes ( entry ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } ", "after_ctx": " ", "after_line": "change _ detector . detect _ changes ( entry ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": " ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } ", "after_ctx": " <%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%>", "after_line": "change _ detector . detect _ changes ( entry ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( entry ) ; } ", "after_ctx": " ", "after_line": "change _ detector . detect _ changes ( entry ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": " ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } ", "after_ctx": " <%> <-> if ( async ) { </%>", "after_line": "change _ detector . detect _ changes ( state _ manager ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <-> } </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } ", "after_ctx": " <%> <*> theory inline _ data _ false inline _ data _ true public async task brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ navigation ( bool async ) -> fact </%> <%> <+> public void brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ navigation ( ) </%>", "after_line": "change _ detector . detect _ changes ( state _ manager ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <+> public void brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ navigation ( ) </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } ", "after_ctx": " <%> <-> theory inline _ data _ false </%>", "after_line": "change _ detector . detect _ changes ( state _ manager ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <+> public void brings _ in _ new _ entity _ set _ on _ dependent _ of _ one _ to _ one _ navigation ( ) </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } ", "after_ctx": " <%> <-> theory inline _ data _ false </%>", "after_line": "change _ detector . detect _ changes ( state _ manager ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": " ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } ", "after_ctx": " <%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } </%>", "after_line": "change _ detector . detect _ changes ( state _ manager ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <-> if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { </%> <%> <-> } </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } ", "after_ctx": " <%> <*> theory inline _ data _ false inline _ data _ true public async task brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ self _ ref ( bool async ) -> fact </%> <%> <+> public void brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ self _ ref ( ) </%>", "after_line": "change _ detector . detect _ changes ( state _ manager ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <+> public void brings _ in _ new _ entity _ set _ on _ principal _ of _ one _ to _ one _ self _ ref ( ) </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } ", "after_ctx": " ", "after_line": "change _ detector . detect _ changes ( state _ manager ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <+> public void brings _ in _ new _ entity _ set _ on _ dependent _ of _ one _ to _ one _ self _ ref ( ) </%> ", "before_line": " if ( async ) { await change _ detector . detect _ changes _ async ( entry ) ; } else { change _ detector . detect _ changes ( state _ manager ) ; } ", "after_ctx": " ", "after_line": "change _ detector . detect _ changes ( state _ manager ) ;", "predictions": ["await change _ detector . detect _ changes _ async ( entry ) ;"]}, {"before_ctx": "<%> <-> < order _ query > </%> <%> <*> ovs -> ss </%> <%> <*> ovs -> ss . set < order _ query > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a ) , ", "after_ctx": " <%> <*> < customer , order _ query > ( -> ( </%> <%> <*> ( cs , ovs ) -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ,", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , <*> change data <%> change property change ) </%>"]}, {"before_ctx": "<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> ", "before_line": " assert _ equal < customer > ( e . a , a . a ) ; assert _ equal < customer > ( e . b , a . b ) ; ", "after_ctx": " <%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%>", "after_line": "assert _ equal ( e . a , a . a ) ; assert _ equal ( e . b , a . b ) ;", "predictions": ["assert _ equal < customer > ( e . a , a . a ) ; assert _ <%> <%> e _ b <*> property _ b ; ; ; ; _ async ( e [ STR and = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a [ STR = a"]}, {"before_ctx": "<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> ", "before_line": " assert _ equal < customer > ( e . a , a . a ) ; assert _ equal < customer > ( e . b , a . b ) ; ", "after_ctx": " <%> <-> < customer > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%>", "after_line": "assert _ equal ( e . a , a . a ) ; assert _ equal ( e . b , a . b ) ;", "predictions": ["assert _ equal < customer > ( e . a , a . a ) ; assert _ <%> <%> e _ in , public public b </%> . bool </%> . b ) cancellation"]}, {"before_ctx": "<%> <-> < customer > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> ", "before_line": " assert _ collection < order > ( e . orders , a . orders ) ; ", "after_ctx": " <%> <-> < customer > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%>", "after_line": "assert _ collection ( e . orders , a . orders ) ;", "predictions": ["assert _ collection < order > ( e . orders , a . orders ) ;"]}, {"before_ctx": "<%> <-> < customer > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> ", "before_line": " assert _ collection < order > ( e . orders , a . orders ) ; ", "after_ctx": " <%> <-> < order > </%>", "after_line": "assert _ collection ( e . orders , a . orders ) ;", "predictions": ["assert _ collection ( e . orders , a . orders ) ;"]}, {"before_ctx": "<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> ", "before_line": " assert _ collection < order > ( e . orders , a . orders ) ; ", "after_ctx": " <%> <-> < order _ detail > </%> <%> <-> ods = > </%>", "after_line": "assert _ collection ( e . orders , a . orders ) ;", "predictions": ["assert _ collection < order > ( e . orders , a . orders ) ;"]}, {"before_ctx": "<%> <*> cs -> ss . set < customer > ( ) </%> <%> <*> os -> ss . set < order > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < int > ( e , a , ordered : true ) ) ; ", "after_ctx": " ", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < int > </%> </%> : </@> ) a _ element ( true , true -> true -> } _ property _ collection _ true ) await ref entity _ if <%> _ entry _ on ( e async ref _ if ) await ref _ if <%> _ entry _ on _ entry await ref <-> _ entry _ on ( e . ref a { ref _ if _ on ) await ref _ entry _ on change entry _ ( e _ ref"]}, {"before_ctx": "<%> <-> < customer , order > </%> <%> <*> ( cs , os ) -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> <%> <*> select os -> select ss . set < order > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a ) ) ; ", "after_ctx": " <%> <-> < customer , order > </%> <%> <*> ( cs , os ) -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> <%> <*> select os -> select ss . set < order > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , } _ STR _ <+> state ) async </%> state [ ss . ;"]}, {"before_ctx": "<%> <*> = os -> = ss . set < order > ( ) </%> ", "before_line": " assert _ collection < int > ( e . order _ ids , a . order _ ids ) ; assert _ equal < customer > ( e . customer , a . customer ) ; ", "after_ctx": " <%> <-> < employee > </%> <%> <-> es = > </%>", "after_line": "assert _ collection ( e . order _ ids , a . order _ ids ) ; assert _ equal ( e . customer , a . customer ) ;", "predictions": ["assert _ equal < customer > ( e . order _ ids , a . order _ ids , . > ) ;"]}, {"before_ctx": "<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a , ordered : true ) ) ; ", "after_ctx": " <%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < order > , <-> . = <-> . ordered data data data ) ; <*> bool of async </%> async </%> ) else else"]}, {"before_ctx": "<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a , ordered : true ) ) ; ", "after_ctx": " <%> <-> < order > </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < order > ) b _ a b a <%> <%> <%> <%> to _ -> to ;"]}, {"before_ctx": "<%> <-> < order > </%> <%> <*> os -> ss </%> <%> <*> os -> ss . set < order > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < order > ( e , a , ordered : true ) ) ) ) ", "after_ctx": " <%> <-> < customer > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < customer > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ) )", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < order > } _ new of }"]}, {"before_ctx": "<%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> ", "before_line": " assert _ equal < cog _ tag > ( e . tag , a . tag ) ; assert _ equal < cog _ tag > ( e . tag , a . tag ) ; ", "after_ctx": " <%> <-> < cog _ tag > </%> <%> <*> ts -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%>", "after_line": "assert _ equal ( e . tag , a . tag ) ; assert _ equal ( e . tag , a . tag ) ;", "predictions": ["assert _ equal < cog _ tag > ( e . tag , a . tag ) ; assert _ equal ( e . ( set set set > > ;"]}, {"before_ctx": " ", "before_line": " assert _ equal < gear > ( e . a , a . a ) ; ", "after_ctx": " <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%>", "after_line": "assert _ equal ( e . a , a . a ) ;", "predictions": ["assert _ equal < gear > ( e . a , a ) ;"]}, {"before_ctx": "<%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; ", "after_ctx": " <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ;"]}, {"before_ctx": "<%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <%> <-> < gear > </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a ) ) ; ", "after_ctx": " <%> <-> < gear , weapon > </%> <%> <*> ( gs , ws ) -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <%> <*> ws -> ss . set < weapon > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; ", "after_ctx": " ", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a , ordered : true ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < weapon > ( e , a , ordered : collection _ _ _ ordered _ assert </%> </%> ) </%> tag <-> <-> </%> </%> : </%> </%> </%> </%> </%> </%> </%> : assert e </%> = </%> </%>"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < string > ( e , a ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < string > ( e , a ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < bool > ( e , a ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < squad _ mission > ( e , a ) ) ; ", "after_ctx": " <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": " ", "before_line": " assert _ collection < weapon > ( e . first , a . first ) ; assert _ collection < weapon > ( e . second , a . second ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "assert _ collection ( e . first , a . first ) ; assert _ collection ( e . second , a . second ) ;", "predictions": ["assert _ collection < weapon > ( e . first , a . first ) ; assert _ collection < weapon > ( e <%> <%> <%> <%> <%> < ; ) ; ; ; ; ; ( : : : tag > tag > ; ; ; ; ( : > : a > ; . a . a tag + . a ; ; tag tag . a . + . + . e . + . e . + . a . a . a . a . a . a . tag > </%> ; ;"]}, {"before_ctx": " ", "before_line": " assert _ collection < weapon > ( e . first , a . first ) ; assert _ collection < weapon > ( e . second , a . second ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "assert _ collection ( e . first , a . first ) ; assert _ collection ( e . second , a . second ) ;", "predictions": ["assert _ collection < weapon > ( e . first , a . first ) ; assert _ collection < weapon > ( e <%> <%> <%> <%> <%> < ; < <@> ) ; ; ; ; ; <%> <%> , a <%> ; ; ; ; ; ; ; ) ; ; ; a ( : : tag > a > ; ; ( : tag > a > ; > ; ; ( : : tag > > a > ; > ; > ; ; ; ( : : tag > a -> ( e ->"]}, {"before_ctx": " ", "before_line": " assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "assert _ collection ( e . outer _ collection , a . outer _ collection , ordered : true ) ;", "predictions": ["assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ;"]}, {"before_ctx": " ", "before_line": " assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "assert _ collection ( e . outer _ collection , a . outer _ collection , ordered : true ) ;", "predictions": ["assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ;"]}, {"before_ctx": " ", "before_line": " assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "assert _ collection ( e . outer _ collection , a . outer _ collection , ordered : true ) ;", "predictions": ["assert _ collection < weapon > ( e . outer _ collection , a . outer _ collection , ordered : true ) ;"]}, {"before_ctx": " ", "before_line": " assert _ collection < weapon > ( e . collection , a . collection ) ; assert _ collection < gear > ( e . collection , a . collection ) ; ", "after_ctx": " <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%>", "after_line": "assert _ collection ( e . collection , a . collection ) ; assert _ collection ( e . collection , a . collection ) ;", "predictions": ["assert _ collection < weapon > ( e . collection , a . collection ) ; assert _ collection < gear > ( e < <%> -> , , <%> ( , ( <%> ( , , <%> ( , ( <%> ( , ) ( , <%> ( , ( <%> ( , ) , <%> ) ) ) ) ) ) ) </%> </%> <%> ( <-> ) ) ) </%> <-> ) ) ) </%> <%> ) ) ) ) ) ) </%> <%> ) ) -> ) ) ) ) ) ) < tag ( <*>"]}, {"before_ctx": "<%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; ", "after_ctx": " <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%> <%> <-> < gear > </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : element > > > <@> , ( , < > <%> <%> <%> <%> <%> assert _ , assert , assert _ <%> assert <%> <%> <%> , assert <%> <%> <%> : <@> <@> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <@> <%> <%> : : <@> <%> <%> <%> <%> ) <%> <%> ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; ", "after_ctx": " <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%> <%> <-> < gear > </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : element > > > ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; ", "after_ctx": " <%> <-> < squad > </%> <%> <+> . set < squad > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : element > > e > e ; <%> STR </%> STR </%> </%> -> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> -> STR </%> ;"]}, {"before_ctx": "<%> <+> . to _ list ( ) </%> ", "before_line": " assert _ collection < string > ( e . weapon _ names , a . weapon _ names ) ; ", "after_ctx": " <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%>", "after_line": "assert _ collection ( e . weapon _ names , a . weapon _ names ) ;", "predictions": ["assert _ collection < string > ( e . weapon _ names , a . weapon _ names ) ;"]}, {"before_ctx": "<%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%> <%> <+> ) . to _ list ( </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < string > ( e , a ) ) ; ", "after_ctx": " <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection < string > ( e , a ) ;"]}, {"before_ctx": "<%> <+> ) . to _ list ( </%> ", "before_line": " assert _ collection < string > ( e . report _ names , a . report _ names ) ; ", "after_ctx": " <%> <*> < cog _ tag , gear > ( -> ( </%> <%> <*> ( ts , gs ) -> ss </%> <%> <*> ts -> ss . set < cog _ tag > ( ) </%>", "after_line": "assert _ collection ( e . report _ names , a . report _ names ) ;", "predictions": ["assert _ collection < string > ( a . report _ names , a . report _ names ) ;"]}, {"before_ctx": "<%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " assert _ collection < string > ( e . weapons , a . weapons ) ; ", "after_ctx": " <%> <-> < squad > </%>", "after_line": "assert _ collection ( e . weapons , a . weapons ) ;", "predictions": ["assert _ collection < string > ( e . weapons , a . weapons ) ;"]}, {"before_ctx": "<%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " assert _ collection < string > ( e . weapons , a . weapons ) ; ", "after_ctx": " ", "after_line": "assert _ collection ( e . weapons , a . weapons ) ;", "predictions": ["assert _ collection < string > ( e . weapons , a . weapons ) ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a < level </%> ( e ( a < level </%> </%> e ( a ( < -> -> < > -> <*> <*> <*> </%> ) ) ) ) var read read ( output full ; ) ( <+> ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; . <-> </%> . <@> </%> . <@> </%> . >"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a ) ) ; ", "after_ctx": " ", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a <%> <@> </%> _ collection , level _ collection < . </%> </%> ) : </%> assert <-> < -> . gear </%> ) : -> _ assert assert collection a assert <+> equal , <*> _ <@> ( ; <%> <%> <%> <%> <%> <%> ) _ </%> level _ name _ s set ( ; </@> <%> + <%> <%> ) _ . </@> _ STR level ) _ 0 _ collection _ </%> _ . ( ;"]}, {"before_ctx": " ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a ) ) ; ", "after_ctx": " <%> <-> < city > </%> <%> <*> cs -> ss </%> <%> <*> cs -> ss . set < city > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a _ <@> _ . a <@> . a < gear < gear < } </%> </%> </%> <%> ) <%> <%> <@> s _ assert _ <%> : = level <%> : = ( ( gear . <%> <%> _ equal <%> _ equal _ path _ equal _ path _ equal ) _ <%> _ collection </%> </%> _ equal _ collection <%> _ equal _ if <%> ) and and < > <%> </%> + _ equal _ > <*> ;"]}, {"before_ctx": " ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < gear > ( e , a , ordered : true ) ) ; ", "after_ctx": " <%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;", "predictions": ["element _ asserter : ( e , a . </@> . <@> ;"]}, {"before_ctx": "<%> <-> < gear > </%> <%> <*> gs -> ss </%> <%> <*> gs -> ss . set < gear > ( ) </%> ", "before_line": " assert _ collection < string > ( e . weapons , a . weapons ) ; ", "after_ctx": " <%> <-> < weapon > </%> <%> <*> ws -> ss </%> <%> <*> ws -> ss . set < weapon > ( ) </%> <%> <*> ws -> ss </%> <%> <*> ws -> ss . set < weapon > ( ) </%>", "after_line": "assert _ collection ( e . weapons , a . weapons ) ;", "predictions": ["assert _ collection < string > ( e . weapons , a . weapons ) ;"]}, {"before_ctx": "<%> <-> < funky _ customer > </%> <%> <*> fcs -> ss </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> ", "before_line": " assert _ equal < funky _ customer > ( e . , a . ) ; assert _ equal < funky _ customer > ( e . , a . ) ; ", "after_ctx": " <%> <-> < funky _ customer > </%> <%> <*> fcs -> ss </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%>", "after_line": "assert _ equal ( e . , a . ) ; assert _ equal ( e . , a . ) ;", "predictions": ["assert _ equal < funky _ customer > ( e . , a . ) ; assert _ equal ( e . , a . ) ;"]}, {"before_ctx": "<%> <-> < funky _ customer > </%> <%> <*> fcs -> ss </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> <%> <*> fcs -> ss . set < funky _ customer > ( ) </%> ", "before_line": " assert _ equal < funky _ customer > ( e . , a . ) ; assert _ equal < funky _ customer > ( e . , a . ) ; ", "after_ctx": " ", "after_line": "assert _ equal ( e . , a . ) ; assert _ equal ( e . , a . ) ;", "predictions": ["assert _ equal < funky _ customer > ( e . , a . ) ; assert _ a <%> <%> = = + + to _ a </%> <+> <+>"]}, {"before_ctx": "<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < int > ( e , a ) ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , e <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> </%> </%> ) by a a a a a a a a ( ( <+> . ( ) ) ) if if = + if ( ) if = assert . ) if ( assert . ) if ( assert . ) if ( assert . ) if ( assert . ) if ( assert . ) if ( assert . ) if ( assert . ) if ( assert . )"]}, {"before_ctx": "<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ equal < level > ( e , a ) , ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ equal ( e , a ) ,", "predictions": ["element _ asserter : ( e , a ( a ( a ( a ( a ( a -> -> -> -> -> -> ) ) ) ) <*> _ ) ) ) -> ) > empty > empty > empty >"]}, {"before_ctx": "<%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> ", "before_line": " assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; ", "after_ctx": " <%> <-> < level , level > </%> <%> <-> ( s , s ) </%> <%> <+> ss </%>", "after_line": "assert _ equal ( e . , a . ) ; assert _ equal ( e . , a . ) ;", "predictions": ["assert _ equal < level > ( e -> < < > -> -> -> ; , file . ( <%> s . ) < e level </%> > < -> >"]}, {"before_ctx": "<%> <*> s -> ss . set < level > ( ) </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> ", "before_line": " assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; ", "after_ctx": " <%> <-> < level , level > </%> <%> <+> ss = > from in ss . set < level > ( ) . select _ many ( = > . one _ to _ one _ required _ f . one _ to _ one _ optional _ f . one _ to _ many _ required . default _ if _ empty </%> <%> <*> s , s -> ) </%>", "after_line": "assert _ equal ( e . , a . ) ; assert _ equal ( e . , a . ) ;", "predictions": ["assert _ equal < level > ( e . , a . ) ; assert _ equal select _ equal select empty <%> <%> assert assert assert <%> </%>"]}, {"before_ctx": "<%> <*> join in s on maybe _ scalar < int > ( , ( ) = > . id ) equals . id -> join in ss . set < level > ( ) on maybe _ scalar < int > ( , ( ) = > . id ) equals . id into grouping </%> <%> <+> from in grouping . default _ if _ empty ( ) </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> ", "before_line": " assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; ", "after_ctx": " <%> <*> public virtual task select _ many _ with _ nested _ navigations _ explicit _ default _ if _ empty _ and _ additional _ joins _ outside _ of _ select _ many ( -> public virtual task multiple _ select _ many _ with _ nested _ navigations _ and _ explicit _ default _ if _ empty _ joined _ together ( </%> <%> <-> < level , level > </%> <%> <+> ss = > from in ss . set < level > ( ) . select _ many ( = > . one _ to _ one _ required _ f . one _ to _ one _ optional _ f . one _ to _ many _ required . default _ if _ empty </%> <%> <*> s , s -> ) </%>", "after_line": "assert _ equal ( e . , a . ) ; assert _ equal ( e . , a . ) ;", "predictions": ["assert _ equal < level > ( e . , a . ) ; assert _ equal ( e . , a . ) ;"]}, {"before_ctx": "<%> <*> on -> on </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> ", "before_line": " assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; ", "after_ctx": " <%> <*> public virtual task select _ many _ with _ nested _ navigations _ and _ explicit _ default _ if _ empty _ followed _ by _ select _ required _ navigation _ using _ same _ navs ( -> public virtual task select _ many _ with _ nested _ navigations _ and _ explicit _ default _ if _ empty _ followed _ by _ select _ required _ navigation _ using _ same _ navs ( </%> <%> <-> < level > </%>", "after_line": "assert _ equal ( e . , a . ) ; assert _ equal ( e . , a . ) ;", "predictions": ["assert _ equal < level > ( e . , a . ) ; assert _ equal ) read _ <-> ) read read _ . _ is set . , > > <+> > <+> > <+> > <+> </%> >"]}, {"before_ctx": " ", "before_line": " assert _ equal < level > ( e . entity , a . entity ) ; assert _ collection < level > ( e . collection , a . collection ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "assert _ equal ( e . entity , a . entity ) ; assert _ collection ( e . collection , a . collection ) ;", "predictions": ["assert _ equal < level > ( e _ <-> <%> <%> _ <-> </%> </%> </%> e <%> <+> > level . ; level ( e <%> <*> s var _ s < < < < -> -> s _ ( < , <%> . attributes ( . attributes . attributes ( . attributes . attributes . </%> ( . attributes . attributes . </%> ( . attributes . attributes ( . attributes . attributes . attributes . attributes . </%> . </%> . attributes ( . attributes -> -> <%> . s . s . s . s"]}, {"before_ctx": "<%> <-> < level , level > </%> <%> <*> ( s , s ) -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> ", "before_line": " assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; ", "after_ctx": " <%> <-> < level , level > </%> <%> <*> ( s , s ) -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "assert _ equal ( e . , a . ) ; assert _ equal ( e . , a . ) ;", "predictions": ["assert _ equal < level > ( e . , a . ) ; assert _ equal ( e . , a . ) ;"]}, {"before_ctx": "<%> <-> < level , level > </%> <%> <*> ( s , s ) -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <+> ( </%> <%> <*> + STR + -> , </%> <%> <+> ) </%> ", "before_line": " assert _ equal < level > ( e . , a . ) ; assert _ equal < level > ( e . , a . ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "assert _ equal ( e . , a . ) ; assert _ equal ( e . , a . ) ;", "predictions": ["assert _ equal < level > ( e . , a . ) ; assert _ equal ( e . , a . ) ;"]}, {"before_ctx": "<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < level > ( e , a ) ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ;"]}, {"before_ctx": "<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < level > ( e , a ) ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , ; ) <*> ) ) ) <*> set ) ) <*> ,"]}, {"before_ctx": "<%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " element _ asserter : ( e , a ) = > assert _ collection < level > ( e , a ) ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;", "predictions": ["element _ asserter : ( e , a ) = > assert _ collection ( e , _ _ collection ) ) ) ) ) ) ) ) > assert read ) _ > <@> set set <*> ;"]}, {"before_ctx": " ", "before_line": " assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "assert _ collection ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ;", "predictions": ["assert _ collection < level > ( e > > element a > assert . <*> . , ) ;"]}, {"before_ctx": "<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " assert _ collection < level > ( e . collection , a . collection ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "assert _ collection ( e . collection , a . collection ) ;", "predictions": ["assert _ collection < level > ( e file file ! </@> file = </@> = </@> , <@> , s , ;"]}, {"before_ctx": "<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "assert _ collection ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ;", "predictions": ["assert _ collection < level > ( e ) <@> ) <@> collection ) <@> <@> <@> <@> ) <%> ;"]}, {"before_ctx": "<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "assert _ collection ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ;", "predictions": ["assert _ collection < level > ( e . one _ to _ many _ optional , collection ) <@> collection . _ <%> <%> <%> a </@> equal ) level ;"]}, {"before_ctx": "<%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; ", "after_ctx": " ", "after_line": "assert _ collection ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ;", "predictions": ["assert _ collection < level > ( e > > = one ) <-> _ to _ _ ) <-> e s ;"]}, {"before_ctx": "<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; ", "after_ctx": " <%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%>", "after_line": "assert _ collection ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ;", "predictions": ["assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ </%> <%> <%> <%> set set set <%> set ) ) _ = <%> + <%> <+> , s < -> ) ,"]}, {"before_ctx": "<%> <-> < level > </%> <%> <*> s -> ss </%> <%> <*> s -> ss . set < level > ( ) </%> ", "before_line": " assert _ collection < level > ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ; ", "after_ctx": " ", "after_line": "assert _ collection ( e . one _ to _ many _ optional , a . one _ to _ many _ optional ) ;", "predictions": ["assert _ collection < level > ( e . one _ to _ many ) <-> assert _ collection _ <+> ) <@>"]}, {"before_ctx": " ", "before_line": " navigation ? . name , ", "after_ctx": " <%> <+> { var related _ entity _ type = builder . model _ builder . entity ( typeof ( t _ related _ entity ) , configuration _ source . explicit ) . metadata ; var navigation = navigation _ expression ? . get _ property _ access ( ) ; return new collection _ navigation _ builder < t _ entity , t _ related _ entity > ( builder . metadata , </%>", "after_line": "navigation ,", "predictions": ["navigation ? . name ,"]}, {"before_ctx": "<%> <+> else if ( select _ expression . is _ project _ star ) { sql . append ( select _ expression . subquery _ alias ) . append ( STR ) ; } </%> ", "before_line": " sql . append ( select _ expression . is _ project _ star ? STR : STR ) ; ", "after_ctx": " <%> <-> ; </%>", "after_line": "sql . append ( STR ) ;", "predictions": ["sql . append ( STR ) ;"]}, {"before_ctx": "<%> <*> var full _ file _ name = path . combine ( output _ directory _ name , file _ name ) ; if ( file . exists ( full _ file _ name ) ) -> if ( file _ service . is _ file _ read _ only ( output _ directory _ name , file _ name ) ) </%> ", "before_line": " var attributes = file . get _ attributes ( full _ file _ name ) ; if ( attributes . has _ flag ( file _ attributes . read _ only ) ) { read _ only _ files . add ( file _ name ) ; } ", "after_ctx": " <%> <-> } private void output _ file ( string output _ directory _ name , string output _ file _ name , string contents ) </%>", "after_line": "read _ only _ files . add ( file _ name ) ;", "predictions": ["read _ only _ files . add ( file _ name ) ;"]}, {"before_ctx": "<%> <*> if ( ! file . exists ( script _ path ) ) -> if ( file . exists ( STR + script _ path ) ) </%> <%> <+> { script _ path = STR + script _ path ; } else </%> ", "before_line": " script _ path = path . combine ( app _ base , path . get _ file _ name ( script _ path ) ) ; ", "after_ctx": " ", "after_line": "script _ path = path . combine ( app _ base , script _ path ) ;", "predictions": ["script _ path = path . combine ( assert <%> base e e e e < level <%> ( < < > < > < > < > ) ) ; <%> ;"]}, {"before_ctx": "<%> <*> if ( ! file . exists ( script _ path ) ) -> if ( file . exists ( STR + script _ path ) ) </%> <%> <+> { script _ path = STR + script _ path ; } else </%> ", "before_line": " script _ path = path . combine ( app _ base , path . get _ file _ name ( script _ path ) ) ; ", "after_ctx": " ", "after_line": "script _ path = path . combine ( app _ base , script _ path ) ;", "predictions": ["script _ path = path . combine ( app _ bool name name . get _ </%> _ level ( > ) ) ,"]}, {"before_ctx": "<%> <+> < logging </%> <%> <*> factory logger -> model </%> <%> <*> factory -> validator > logger </%> <%> <*> new lazy _ ref < i _ logger > ( logger _ factory . create _ logger < model _ validator > ) ; -> logger ; </%> ", "before_line": " protected virtual lazy _ ref < i _ logger > logger { get ; } protected override void show _ warning ( string message ) = > logger . value . log _ warning ( message ) ; ", "after_ctx": " ", "after_line": "protected virtual i _ logger logger { get ; } protected override void show _ warning ( string message ) = > logger . log _ warning ( message ) ;", "predictions": ["protected virtual void show _ warning ( string message entity entity < i _ logger ( { cache , message ( public ( ; name sql sql _ debug sql { ) ) append </%> <%> sql _ = ( ; name ) ) ) ) ) ) ) ) <-> name ) ) ) ) ) ) ) ) ) <-> name <-> name ) name <-> to <-> <-> name ) _ value sql ) ) <->"]}, {"before_ctx": " ", "before_line": " var string _ type _ mapping = dependencies . type _ mapping _ source . get _ mapping ( typeof ( string ) ) ; builder . append ( STR ) . append ( string _ type _ mapping . generate _ sql _ literal ( name ) ) ; ", "after_ctx": " <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>", "after_line": "builder . append ( STR ) . append ( name ) ;", "predictions": ["builder . append ( STR ) . append ( ; string _ string _ mapping <-> _ type <%> typeof </%> _ ( string builder builder builder ( , builder _ ) _ ) ( attributes builder builder builder builder _ ) builder <*> public ;"]}, {"before_ctx": "<%> <*> var string _ type _ mapping = dependencies . type _ mapping _ source . get _ mapping ( typeof ( string ) ) ; builder . append ( STR ) . append ( string _ type _ mapping . generate _ sql _ literal ( name ) ) ; -> builder . append ( STR ) . append ( name ) ; </%> ", "before_line": " builder . append ( STR ) . append ( string _ type _ mapping . generate _ sql _ literal ( value ) ) ; ", "after_ctx": " <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>", "after_line": "builder . append ( STR ) . append ( value ) ;", "predictions": ["builder . append ( STR ) . append ( value </%> ) <-> <-> <-> <-> <-> _ name <-> <-> ;"]}, {"before_ctx": "<%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> ", "before_line": " . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; ", "after_ctx": " <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>", "after_line": ". append ( level _ name ) ;", "predictions": [". append ( level _ name ) ;"]}, {"before_ctx": "<%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> ", "before_line": " . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; ", "after_ctx": " <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>", "after_line": ". append ( level _ name ) ;", "predictions": [". append ( level _ name ) ;"]}, {"before_ctx": "<%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> ", "before_line": " . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; ", "after_ctx": " ", "after_line": ". append ( level _ name ) ;", "predictions": [". append ( level _ name ) ;"]}, {"before_ctx": " ", "before_line": " var string _ type _ mapping = dependencies . type _ mapping _ source . get _ mapping ( typeof ( string ) ) ; builder . append ( STR ) . append ( string _ type _ mapping . generate _ sql _ literal ( name ) ) ; ", "after_ctx": " <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>", "after_line": "builder . append ( STR ) . append ( name ) ;", "predictions": ["builder . append ( STR ) . append ( dependencies . type _ ; </%> ) ;"]}, {"before_ctx": "<%> <*> var string _ type _ mapping = dependencies . type _ mapping _ source . get _ mapping ( typeof ( string ) ) ; builder . append ( STR ) . append ( string _ type _ mapping . generate _ sql _ literal ( name ) ) ; -> builder . append ( STR ) . append ( name ) ; </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> ", "before_line": " . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; ", "after_ctx": " <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>", "after_line": ". append ( level _ name ) ;", "predictions": [". append ( level _ name ) ;"]}, {"before_ctx": "<%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> ", "before_line": " . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; ", "after_ctx": " <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%>", "after_line": ". append ( level _ name ) ;", "predictions": [". append ( level _ name ) ;"]}, {"before_ctx": "<%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> <%> <+> debug . assert ( level _ name ! = null ) ; </%> <%> <-> ( string _ type _ mapping . generate _ sql _ literal </%> <%> <-> ) </%> ", "before_line": " . append ( string _ type _ mapping . generate _ sql _ literal ( level _ name ) ) ; ", "after_ctx": " ", "after_line": ". append ( level _ name ) ;", "predictions": [". append ( level _ name ) ;"]}, {"before_ctx": " ", "before_line": " var resolvable _ relationships = new list < tuple < internal _ relationship _ builder , bool , resolution > > ( ) ; ", "after_ctx": " <%> <*> var good _ match = true ; -> var same _ configuration _ source = true ; </%> <%> <+> var inverse _ navigation _ removed = false ; </%> <%> <+> var navigation _ to _ dependent _ name = navigation _ to _ dependent ? . name ; </%>", "after_line": "var resolvable _ relationships = new list < tuple < internal _ relationship _ builder , bool , resolution , bool > > ( ) ;", "predictions": ["var resolvable _ relationships = new list < internal _ value _ debug string string . resolution </%> <-> cache cache cache cache <%> ( get string get string get string get string get string internal _ <@> append = </@> _ value _ <@> append = resolution _ append < sql = new _ tuple sql = ! _ relationship _ append sql = ! _ relationship _ append sql = resolution sql sql < _ append < </@> = new _ -> ;"]}, {"before_ctx": " ", "before_line": " : t = > candidate _ naming _ service . generate _ candidate _ identifier ( t . name ) , ", "after_ctx": " <%> <-> . name </%>", "after_line": ": t = > candidate _ naming _ service . generate _ candidate _ identifier ( t ) ,", "predictions": [": t = > candidate _ naming _ service configuration ( attributes attributes properties"]}, {"before_ctx": "<%> <-> . name </%> ", "before_line": " : t = > candidate _ naming _ service . generate _ candidate _ identifier ( t . name ) , ", "after_ctx": " ", "after_line": ": t = > candidate _ naming _ service . generate _ candidate _ identifier ( t ) ,", "predictions": [": t = > candidate _ naming _ service . generate _ entity _ > not </%> model"]}, {"before_ctx": "<%> <-> binary _ </%> <%> <+> member _ </%> ", "before_line": " return expression . assign ( left , right ) ; ", "after_ctx": " ", "after_line": "return left . assign ( right ) ;", "predictions": ["return assign ( left , right ) ;"]}, {"before_ctx": " ", "before_line": " if ( ! ( ( column . table . primary _ key ? . columns . contains ( column ) ) ? ? false ) ) ", "after_ctx": " <%> <+> } if ( ( bool? ) column [ scaffolding _ annotation _ names . concurrency _ token ] = = true ) { property . is _ concurrency _ token ( ) ; </%> <%> <-> column . get _ annotations ( ) . where ( a = > a . name ! = scaffolding _ annotation _ names . underlying _ store _ type ) ) ; </%>", "after_line": "if ( ! ( column . table . primary _ key ? . columns . contains ( column ) ? ? false ) )", "predictions": ["if ( ! ( ( column _ key . primary _ public entity </%> </%> </%> </%> ( . <%> ( <%> ( <%> </%> </@> </%> </%> </%> store _ store _ name <%> <%> ) <%> . false <%> <%> <%> <%> <%> ) property property property property builder property builder property property property builder builder builder property property builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder )"]}, {"before_ctx": " ", "before_line": " var select _ expression = handler _ context . select _ expression ; prepare _ select _ expression _ for _ aggregate ( select _ expression ) ; ", "after_ctx": " <%> <+> handler _ context . </%>", "after_line": "prepare _ select _ expression _ for _ aggregate ( handler _ context ) ;", "predictions": ["prepare _ select _ expression _ for _ aggregate model = _ ( _ ; ) < model </%> _ <%> ) )"]}, {"before_ctx": " ", "before_line": " private internal _ entity _ entry get _ main _ entry ( i _ update _ entry entry ) ", "after_ctx": " <%> <*> return ( internal _ entity _ entry ) -> return </%>", "after_line": "private i _ update _ entry get _ main _ entry ( i _ update _ entry entry )", "predictions": ["private i _ update _ entry get _ main _ expression <%> <*> _ -> _ ; ;"]}, {"before_ctx": "<%> <*> state -> update </%> <%> <*> manager -> adapter </%> <%> <*> get -> find </%> <%> <-> ( internal _ entity _ entry ) </%> ", "before_line": " return ( internal _ entity _ entry ) entry ; }       public virtual i _ read _ only _ list < internal _ entity _ entry > get _ all _ entries ( [ not _ null ] i _ update _ entry entry ) { var entries = new list < internal _ entity _ entry > ( ) ; ", "after_ctx": " <%> <*> internal -> i </%> <%> <*> entity -> update </%> <%> <*> internal -> i </%> <%> <*> entity -> update </%>", "after_line": "return entry ; }       public virtual i _ read _ only _ list < i _ update _ entry > get _ all _ entries ( [ not _ null ] i _ update _ entry entry ) { var entries = new list < i _ update _ entry > ( ) ;", "predictions": ["return ( internal _ entity _ entry > entry type type <+> bool if bool attributes _ <%> _ if ; , internal _ entity < assert _ entity _ </%> ; ; ; assert virtual ; ;"]}, {"before_ctx": "<%> <+> query _ sync _ objects . try _ remove ( cache _ key , out ) ; </%> <%> <*> lock -> if ( ! memory _ cache . try _ get _ value </%> <%> <*> compiled -> cache </%> <%> <*> query _ lock -> key , out compiled </%> <%> <*> object -> query </%> <%> <+> ) </%> ", "before_line": " if ( ! memory _ cache . try _ get _ value ( cache _ key , out compiled _ query ) ) { compiled _ query = compiler ( ) ; memory _ cache . set ( cache _ key , compiled _ query ) ; } ", "after_ctx": " ", "after_line": "compiled _ query = compiler ( ) ; memory _ cache . set ( cache _ key , compiled _ query ) ;", "predictions": ["compiled _ query = compiler ( ) ; memory _ <%> sql sql _ type sql _ type , _ . ;"]}, {"before_ctx": "<%> <-> property _ builder </%> <%> <*> if -> foreach </%> <%> <*> attributes ! = null -> var attribute in attributes </%> <%> <*> foreach ( var attribute in attributes ) -> process _ property _ added ( property _ builder , attribute , member _ info , context ) ; </%> <%> <+> if ( context . should _ stop _ processing ( ) ) </%> ", "before_line": " property _ builder = apply ( property _ builder , attribute , member _ info ) ; if ( property _ builder = = null ) { break ; } ", "after_ctx": " <%> <-> return property _ builder ; </%> <%> <-> public virtual bool apply ( internal _ property _ builder property _ builder , field _ info old _ field _ info ) { apply ( property _ builder ) ; return true ; } public abstract internal _ property _ builder apply ( </%>", "after_line": "break ;", "predictions": ["break ;"]}, {"before_ctx": " ", "before_line": " public static void set _ sql _ server _ include _ properties ( [ not _ null ] this i _ mutable _ index index , i _ read _ only _ list < string > properties ) ", "after_ctx": " <%> <+> [ not _ null ] </%>", "after_line": "public static void set _ sql _ server _ include _ properties ( [ not _ null ] this i _ mutable _ index index , [ not _ null ] i _ read _ only _ list < string > properties )", "predictions": ["public static void set _ sql _ server _ = _ properties ( _ properties _ = = )"]}, {"before_ctx": "<%> <+> [ not _ null ] </%> ", "before_line": " not _ null this i _ convention _ index index , i _ read _ only _ list < string > properties , bool from _ data _ annotation = false ) ", "after_ctx": " ", "after_line": "not _ null this i _ convention _ index index , [ not _ null ] i _ read _ only _ list < string > properties , bool from _ data _ annotation = false )", "predictions": ["bool _ null this i _ convention _ index type . < log _ find _ null _ debug < <%> )"]}, {"before_ctx": "<%> <-> relationship _ builder </%> ", "before_line": " var attributes = get _ attributes < required _ attribute > ( inverse . declaring _ entity _ type , inverse . name ) ; ", "after_ctx": " <%> <-> relationship _ builder </%> <%> <-> relationship _ builder </%>", "after_line": "var attributes = get _ attributes < required _ attribute > ( inverse . declaring _ entity _ type , inverse ) ;", "predictions": ["var attributes = get _ attributes < required _ attribute > ( inverse <-> <-> sql <-> inverse <-> > ; ? </%> ; key key key"]}, {"before_ctx": "<%> <+> list < ( member _ info , i _ convention _ entity _ type ) > referencing _ navigations _ with _ attribute ) </%> <%> <+> i _ convention _ </%> <%> <+> i _ convention _ </%> ", "before_line": " var inverse _ target _ entity _ type = model . find _ actual _ entity _ type ( referencing _ tuple . item ) ; ", "after_ctx": " <%> <*> configuration -> from </%> <%> <-> source . </%> <%> <+> : true </%> <%> <+> i _ convention _ </%>", "after_line": "var inverse _ target _ entity _ type = find _ actual _ entity _ type ( referencing _ tuple . item ) ;", "predictions": ["var inverse _ target _ entity _ type = model . _ target _ , ; _ { }"]}, {"before_ctx": "<%> <+> i _ convention _ </%> ", "before_line": " & & entity _ type . model . find _ actual _ entity _ type ( referencing _ tuple . item ) = = entity _ type ) ", "after_ctx": " <%> <+> i _ convention _ </%>", "after_line": "& & find _ actual _ entity _ type ( referencing _ tuple . item ) = = entity _ type )", "predictions": ["& & find _ actual _ entity _ type ;"]}, {"before_ctx": " ", "before_line": " & & entity _ type . model . find _ actual _ entity _ type ( referencing _ tuple . item ) = = entity _ type ) ", "after_ctx": " <%> <-> entity _ type . model . </%>", "after_line": "& & find _ actual _ entity _ type ( referencing _ tuple . item ) = = entity _ type )", "predictions": ["& & find _ actual _ entity _ type <%> referencing _ . logger </%> )"]}, {"before_ctx": "<%> <-> entity _ type . model . </%> ", "before_line": " var other _ entity _ type = entity _ type . model . find _ actual _ entity _ type ( referencing _ navigations _ with _ attribute [ 0 ] . item ) ; ", "after_ctx": " <%> <*> configuration -> from </%> <%> <-> source . </%> <%> <+> : true </%>", "after_line": "var other _ entity _ type = find _ actual _ entity _ type ( referencing _ navigations _ with _ attribute [ 0 ] . item ) ;", "predictions": ["var other _ entity _ type = entity _ . path ) ; _ columns _ with _ assert </@> </@> sql _ <+> _ read _ [ assert string ;"]}, {"before_ctx": "<%> <+> dependent _ entity _ type : null , configuration _ source : </%> ", "before_line": " same _ configuration _ source = same _ configuration _ source ? ? false ; ", "after_ctx": " ", "after_line": "same _ configuration _ source ? ? = false ;", "predictions": ["same _ configuration _ source = same _ configuration _ ( index _ <%> <-> script file _ = </%> i _ <%> _ ) > > > ; _ cache _ </%> internal <*> get <%> internal entry _ <%> _ </%> ) ;"]}, {"before_ctx": " ", "before_line": " = > foreign _ keys ? . cast < foreign _ key > ( ) ? ? enumerable . empty < foreign _ key > ( ) ; ", "after_ctx": " <%> <-> ? . cast < key > ( ) </%> <%> <-> ? . cast < index > ( ) </%> <%> <*> protected override annotation on _ annotation _ set ( string name , annotation annotation , annotation old _ annotation ) -> protected override i _ convention _ annotation on _ annotation _ set ( </%> <%> <+> string name , i _ convention _ annotation annotation , i _ convention _ annotation old _ annotation ) </%>", "after_line": "= > foreign _ keys ? ? enumerable . empty < foreign _ key > ( ) ;", "predictions": ["= > foreign _ keys ? . cast . empty , ;"]}, {"before_ctx": "<%> <-> ? . cast < foreign _ key > ( ) </%> ", "before_line": " = > keys ? . cast < key > ( ) ? ? enumerable . empty < key > ( ) ; ", "after_ctx": " <%> <-> ? . cast < index > ( ) </%> <%> <*> protected override annotation on _ annotation _ set ( string name , annotation annotation , annotation old _ annotation ) -> protected override i _ convention _ annotation on _ annotation _ set ( </%> <%> <+> string name , i _ convention _ annotation annotation , i _ convention _ annotation old _ annotation ) </%>", "after_line": "= > keys ? ? enumerable . empty < key > ( ) ;", "predictions": ["= > keys ? . empty </%> configuration <@> <@> <@> <%>"]}, {"before_ctx": "<%> <-> ? . cast < foreign _ key > ( ) </%> <%> <-> ? . cast < key > ( ) </%> ", "before_line": " = > indexes ? . cast < index > ( ) ? ? enumerable . empty < index > ( ) ; ", "after_ctx": " <%> <*> protected override annotation on _ annotation _ set ( string name , annotation annotation , annotation old _ annotation ) -> protected override i _ convention _ annotation on _ annotation _ set ( </%> <%> <+> string name , i _ convention _ annotation annotation , i _ convention _ annotation old _ annotation ) </%>", "after_line": "= > indexes ? ? enumerable . empty < index > ( ) ;", "predictions": ["= > indexes ? . cast < <-> > ( ) <*> ? enumerable , <*> try _ , ; _ configuration ) _ <%> ) ;"]}, {"before_ctx": "<%> <*> configuration -> internal </%> <%> <*> source ? remove -> entity _ type _ builder has _ no </%> <%> <*> start -> delay </%> <%> <*> batch -> conventions </%> ", "before_line": " var removed _ key = metadata . remove _ key ( key . properties ) ; debug . assert ( removed _ key = = key ) ; ", "after_ctx": " ", "after_line": "metadata . remove _ key ( key ) ;", "predictions": ["var removed _ key = metadata . _ value null null null ; _ type <*> type string"]}, {"before_ctx": "<%> <-> configuration _ source configuration _ source , </%> <%> <*> bool can _ override -> configuration </%> <%> <*> same -> source configuration </%> <%> <-> = true </%> <%> <-> debug . assert ( foreign _ key . declaring _ entity _ type = = metadata ) ; </%> <%> <*> if ( ! configuration _ source . overrides ( current _ configuration _ source ) | | ! ( can _ override _ same _ source | | ( configuration _ source ! = current _ configuration _ source ) ) ) -> if ( ! configuration _ source . overrides ( current _ configuration _ source ) ) </%> ", "before_line": " var removed _ foreign _ key = metadata . remove _ foreign _ key ( foreign _ key ) ; if ( removed _ foreign _ key = = null ) { return null ; } debug . assert ( removed _ foreign _ key = = foreign _ key ) ; ", "after_ctx": " <%> <*> current _ configuration _ source -> this </%>", "after_line": "metadata . remove _ foreign _ key ( foreign _ key ) ;", "predictions": ["return null ;"]}, {"before_ctx": "<%> <*> public virtual internal _ relationship _ builder apply ( internal _ relationship _ builder relationship _ builder , navigation navigation ) -> public virtual void process _ navigation _ added ( i _ convention _ relationship _ builder relationship _ builder , i _ convention _ navigation navigation , i _ convention _ context < i _ convention _ navigation > context ) </%> ", "before_line": " var attributes = get _ attributes < t _ attribute > ( navigation . declaring _ entity _ type , navigation . name ) ; ", "after_ctx": " <%> <*> relationship -> process </%> <%> <*> builder = apply -> navigation _ added </%> <%> <+> , context </%> <%> <+> ( ( </%> <%> <*> relationship -> i </%> <%> <*> builder = = null -> readable _ convention _ context </%> <%> <+> context ) . should _ stop _ processing ( ) ) </%> <%> <-> return relationship _ builder ; </%>", "after_line": "var attributes = get _ attributes < t _ attribute > ( navigation . declaring _ entity _ type , navigation ) ;", "predictions": ["var attributes = get _ attributes i i i : expression ] ] ;"]}, {"before_ctx": "<%> <*> weak -> defined </%> <%> <*> weak -> defined </%> <%> <*> weak -> defined </%> <%> <*> weak -> defined </%> <%> <-> ; set </%> ", "before_line": " entity _ type _ builder = entity _ type _ builder ? ? relationship . metadata . declaring _ entity _ type . builder ; ", "after_ctx": " <%> <*> weak -> defined </%>", "after_line": "entity _ type _ builder ? ? = relationship . metadata . declaring _ entity _ type . builder ;", "predictions": ["entity _ type _ builder = ) = ) ? = configuration <%> property . . . . key configuration > null cast"]}, {"before_ctx": "<%> <+> var key _ values = get _ load _ values ( navigation , entry ) ; </%> <%> <*> . any ( v = > v = -> ! </%> <%> <-> ) </%> <%> <*> return task . from _ result ( 0 ) ; } -> await query ( navigation , key _ values ) . to _ list _ async ( cancellation _ token ) ; </%> <%> <+> } </%> <%> <*> return set . where ( build _ lambda ( key _ properties , new value _ buffer ( key _ values ) ) ) -> entry </%> <%> <*> to -> set </%> <%> <*> list -> is </%> <%> <*> async -> loaded </%> <%> <*> cancellation _ token -> navigation </%> <%> <*> read -> navigation navigation , internal </%> <%> <*> only -> entity </%> <%> <*> list < i _ property > key _ properties , object [ ] key _ values ) -> entry entry ) </%> <%> <+> var key _ values = get _ load _ values ( navigation , entry ) ; </%> ", "before_line": " if ( key _ values . any ( v = > v = = null ) ) ", "after_ctx": " <%> <*> set . where -> query </%> <%> <*> build _ lambda ( key _ properties -> navigation </%> <%> <-> new value _ buffer ( </%> <%> <-> ) ) </%> <%> <+> private i _ queryable < t _ entity > query ( i _ navigation navigation , object [ ] key _ values ) = > set . where ( build _ lambda ( get _ load _ properties ( navigation ) , new value _ buffer ( key _ values ) ) ) ; </%> <%> <*> read -> navigation navigation , internal </%> <%> <*> only -> entity </%> <%> <*> list < i _ property > key _ properties , object [ ] key _ values ) -> entry entry ) </%> <%> <*> key _ properties -> navigation </%> <%> <*> key _ values -> entry </%> <%> <+> private object [ ] get _ load _ values ( i _ navigation navigation , internal _ entity _ entry entry ) </%>", "after_line": "if ( key _ values = = null )", "predictions": ["if ( key _ values . any ( v = > v = = null ) )"]}, {"before_ctx": " ", "before_line": " add _ provider _ services ( services . add _ entity _ framework ( ) ) ; ", "after_ctx": " <%> <+> _ entity _ framework </%>", "after_line": "add _ provider _ services ( services ) ;", "predictions": ["add _ entity _ for build by configuration configuration . source configuration ? -> _ store _ = ( STR STR"]}, {"before_ctx": " ", "before_line": " public virtual new relational _ query _ compilation _ context query _ compilation _ context ", "after_ctx": " <%> <*> select _ expression try _ get _ select -> void add </%> <%> <*> expression -> query </%> <%> <*> ) -> , [ not _ null ] select _ expression select _ expression ) </%> <%> <+> check . not _ null ( query _ source , STR ) ; check . not _ null ( select _ expression , STR ) ; queries _ by _ source . add ( query _ source , select _ expression ) ; } public virtual select _ expression try _ get _ query ( [ not _ null ] i _ query _ source query _ source ) </%>", "after_line": "public new virtual relational _ query _ compilation _ context query _ compilation _ context", "predictions": ["public virtual new relational _ query _ be _ can ,"]}, {"before_ctx": "<%> <*> not -> can _ be </%> ", "before_line": " = > property ( property _ type , property _ name , configuration _ source , type _ configuration _ source : configuration _ source ) ; ", "after_ctx": " <%> <*> not -> can _ be </%> <%> <+> type _ </%> <%> <-> type _ </%> <%> <*> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : type _ configuration _ source ) ; -> property _ type , property _ name , member _ info : null , </%> <%> <+> type _ configuration _ source : type _ configuration _ source , </%>", "after_line": "= > property ( property _ type , property _ name , type _ configuration _ source : configuration _ source , configuration _ source : configuration _ source ) ;", "predictions": ["= > property ( property _ expression query query _ expression query _ configuration , : type _ , _ builder ( expression _ expression _ . ) ) constant _ : ( ( ( ( ( = _ source -> = assert _ ! configuration -> -> ( ( = _ source configuration _ ) configuration -> -> _ ! -> -> -> ) -> ( ( = _ source configuration _ ) configuration _ ) -> ( ( ( = _ source configuration = assert _ ! configuration -> -> _ ! -> ) -> ( ( ="]}, {"before_ctx": "<%> <*> not -> can _ be </%> <%> <+> type _ </%> <%> <*> , type -> : configuration </%> <%> <+> source , </%> <%> <*> not -> can _ be </%> ", "before_line": " configuration _ source ? configuration _ source , configuration _ source ? type _ configuration _ source ) ", "after_ctx": " <%> <*> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : type _ configuration _ source ) ; -> property _ type , property _ name , member _ info : null , </%> <%> <+> type _ configuration _ source : type _ configuration _ source , configuration _ source : configuration _ source ) ; </%> <%> <+> type _ </%> <%> <*> configuration _ source -> null </%> <%> <-> type _ </%> <%> <*> null -> configuration _ source </%>", "after_line": "configuration _ source ? type _ configuration _ source , configuration _ source ? configuration _ source )", "predictions": ["configuration _ source ? configuration _ </%> _ </%> i _ </%> _ </%> i _ <%> _ </%> ;"]}, {"before_ctx": "<%> <*> not -> can _ be </%> <%> <+> type _ </%> <%> <*> , type -> : configuration </%> <%> <+> source , </%> <%> <*> not -> can _ be </%> <%> <+> type _ </%> <%> <-> type _ </%> ", "before_line": " property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : type _ configuration _ source ) ; ", "after_ctx": " <%> <+> type _ </%> <%> <*> configuration _ source -> null </%> <%> <-> type _ </%> <%> <*> null -> configuration _ source </%>", "after_line": "property _ type , property _ name , member _ info : null , type _ configuration _ source : type _ configuration _ source , configuration _ source : configuration _ source ) ;", "predictions": ["property _ type , member _ protected , > > > > > > source : source _ ) <-> source _ <%> _ </%> <*> info info _ <%> _ source < type _ info ( [ _ convert expression ) i _ parameter _ ( value ] i _ parameter value i _ ( array _ . _ ( ] ] ] i _ parameter _ ( ] ] ] i _ parameter value i _ parameter value ] i _ parameter _ ( value ] i _ parameter value ] ] i _ parameter _ ( value"]}, {"before_ctx": "<%> <*> not -> can _ be </%> <%> <+> type _ </%> <%> <-> type _ </%> <%> <*> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : type _ configuration _ source ) ; -> property _ type , property _ name , member _ info : null , </%> <%> <+> type _ configuration _ source : type _ configuration _ source , configuration _ source : configuration _ source ) ; </%> ", "before_line": " property _ type : null , property _ name : property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : null ) ; ", "after_ctx": " <%> <+> type _ </%> <%> <-> type _ </%>", "after_line": "property _ type : null , property _ name : property _ name , member _ info : null , type _ configuration _ source : null , configuration _ source : configuration _ source ) ;", "predictions": ["property _ type : null , -> _ <+> , ? ? <%> _ <%> _ </%> , . value _ . configuration ! key ! key _ = configuration -> source _ ) _ = ( </%> _ type entity . </%> . </%> entity _ type entity . </%> . </%> _ type . </%> . </%> . </%> _ <*> _ type . </%> . </%> _ ) , </%> _ <*> ( </%> _ get . type _ ) _ type . new </%> . new </%> . </%> . </%> . </%> . </%> _"]}, {"before_ctx": "<%> <+> type _ </%> <%> <*> configuration _ source -> null </%> <%> <-> type _ </%> <%> <*> null -> configuration _ source </%> ", "before_line": " configuration _ source ? configuration _ source , configuration _ source ? type _ configuration _ source ) ", "after_ctx": " ", "after_line": "configuration _ source ? type _ configuration _ source , configuration _ source ? configuration _ source )", "predictions": ["configuration _ source ? configuration _ ) _ ) , . configuration <%> ( ) _ . properties string . type _ </%> _ </%> </%> )"]}, {"before_ctx": "<%> <+> type _ configuration _ source = configuration _ source . explicit ; } </%> ", "before_line": " existing _ property , property _ name , property _ type , member _ info , configuration _ source , type _ configuration _ source ) ; ", "after_ctx": " ", "after_line": "existing _ property , property _ name , property _ type , member _ info , type _ configuration _ source , configuration _ source ) ;", "predictions": ["configuration _ source , member _ info configuration _ <%> configuration _ ;"]}, {"before_ctx": "<%> <*> ) ; -> , from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention ) ; </%> ", "before_line": " void i _ convention _ entity _ type _ builder . remove _ unused _ shadow _ properties ( ", "after_ctx": " ", "after_line": "i _ convention _ entity _ type _ builder i _ convention _ entity _ type _ builder . remove _ unused _ shadow _ properties (", "predictions": ["void i _ convention _ entity <%> <%> <%> entity <%>"]}, {"before_ctx": "<%> <+> _ internal </%> ", "before_line": " = > value _ buffer . with _ offset ( value _ buffer _ offset ) ; ", "after_ctx": " ", "after_line": "= > value _ buffer ;", "predictions": ["= > value _ build name reference reference _ build reference reference _ . . assert _ -> ( ;"]}, {"before_ctx": "<%> <-> using system _ data ; </%> ", "before_line": " private static readonly dictionary < string , db _ type > type _ mapping = new dictionary < string , db _ type > ", "after_ctx": " <%> <*> db _ type . byte -> STR </%> <%> <*> db _ type . decimal -> STR </%> <%> <*> db _ type . double -> STR </%> <%> <*> db _ type . int -> STR </%> <%> <*> db _ type . int -> STR </%> <%> <*> db _ type . int -> STR </%> <%> <*> db _ type . string -> STR </%>", "after_line": "private static readonly dictionary < string , string > type _ mapping = new dictionary < string , string >", "predictions": ["private static dictionary < string , ( : ( = > ( ( ( <+> _ <%> be _ type i _ , ;"]}, {"before_ctx": "<%> <*> schema -> function _ name </%> <%> <*> schema -> function _ name </%> <%> <*> function _ name -> schema </%> <%> <*> function _ name -> schema </%> ", "before_line": " check . not _ empty ( value , nameof ( function _ name ) ) ; ", "after_ctx": " <%> <*> public virtual string schema { get ; [ param : can _ be _ null ] set ; } -> public virtual string schema </%> <%> <+> { get { return schema ; } param _ can _ be _ null set { schema = value ; } } </%>", "after_line": "check . not _ empty ( value , nameof ( value ) ) ;", "predictions": ["check . not _ empty ( nameof _ STR < <*> < <*> ) _ source ) _ <*> ) _ < . . schema _ < ) _ </%> -> -> -> add source ,"]}, {"before_ctx": "<%> <*> var entity _ type = get _ entity _ type ( entity ) ; var entry = try _ get _ entry ( entity _ type , entity ) ; return entry ! = null ? new entity _ entry ( entry ) : new entity _ entry ( this , entity ) ; -> var entry = try _ get _ entry ( entity ) ; </%> <%> <+> return entry ! = null ? new entity _ entry ( entry ) : new entity _ entry ( this , entity ) ; </%> <%> <*> i -> change </%> <%> <*> entity -> tracker </%> <%> <*> type get -> entry try </%> <%> <*> entity -> get </%> <%> <*> type -> entry </%> <%> <-> var entity _ type = model . entity _ type ( entity ) ; if ( entity _ type = = null ) { throw new invalid _ operation _ exception ( strings . type _ not _ in _ model ( entity . get _ type ( ) . name ) ) ; } return entity _ type ; } private change _ tracker _ entry try _ get _ entry ( i _ entity _ type entity _ type , object entity ) { var key = entity _ type . create _ entity _ key ( entity ) ; </%> ", "before_line": " return identity _ map . try _ get _ value ( key , out entry ) & & reference _ equals ( entry . entity , entity ) ? entry : null ; ", "after_ctx": " ", "after_line": "return identity _ map . try _ get _ value ( entity , out entry ) & & reference _ equals ( entry . entity , entity ) ? entry : null ;", "predictions": ["return identity _ map . try _ get _ value ( key , out entity ) & & reference _ where ) load <*> <*> i entry <*> ;"]}, {"before_ctx": "<%> <+> if ( converter ! = null ) { value = converter . convert _ to _ store ( value ) ; } </%> <%> <*> get -> unwrap </%> <%> <-> _ underlying </%> ", "before_line": " parameter . value = ( converter ! = null ? converter . convert _ to _ store ( value ) : value ) ? ? db _ null . value ; ", "after_ctx": " ", "after_line": "parameter . value = value ? ? db _ null . value ;", "predictions": ["parameter . value = value ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> var customer = use _ string ? context . set < customer > ( ) . include ( STR ) </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip"]}, {"before_ctx": "<%> <+> } </%> ", "before_line": " var entry = change _ tracker . entry ( entity ) ; ", "after_ctx": " ", "after_line": "var entry = entry ( entity ) ;", "predictions": ["var entry = change = STR fix </%> fix <@> fix </%> fix <-> ; <*> <-> <*> null ( ;"]}, {"before_ctx": "<%> <+> . node _ type </%> <%> <*> ( -> = expression _ type . </%> <%> <*> expression ) arguments ; -> init : </%> <%> <-> var expression = new _ array _ expression . expressions [ i ] . remove _ convert ( ) ; </%> <%> <+> new _ array _ </%> <%> <+> . expressions [ i ] </%> <%> <*> node -> remove </%> <%> <*> type -> convert ( </%> <%> <+> ) </%> <%> <*> case expression _ type . constant : var value = ( ( constant _ expression ) expression ) . value ; substitutions [ i ] = generate _ sql _ literal ( value ) ; -> case constant _ expression constant : </%> <%> <+> var value = constant . value ; substitutions [ i ] = generate _ sql _ literal ( value ) ; </%> ", "before_line": " case expression _ type . parameter : var parameter = ( parameter _ expression ) expression ; ", "after_ctx": " ", "after_line": "case parameter _ expression parameter :", "predictions": ["case expression _ type . parameter current = </%> = = can _ ( <%> <%> <%> ( can _ ( ; ( ? ( ? ? ? ( ? ? ( ? ? ( ? ? entity _ ) <*> <*> ) <*> ) <*> ) <*> entity <*> <*> ( entity _ ) <*> <*> <*> ) ) ) key ="]}, {"before_ctx": " ", "before_line": " var derived _ properties = metadata . find _ derived _ properties ( property _ name ) ; detached _ properties = detach _ properties ( derived _ properties ) ; ", "after_ctx": " <%> <*> clr -> member </%> <%> <*> property -> info </%> <%> <*> declaring -> member </%> <%> <*> entity _ type . clr _ type . get _ runtime _ properties ( ) . first _ or _ default ( p = > p . name = = property _ name ) -> info </%>", "after_line": "detached _ properties = detach _ properties ( metadata . find _ derived _ properties ( property _ name ) ) ;", "predictions": ["detached _ properties = detach _ properties -> be _ ( ) be ;"]}, {"before_ctx": " ", "before_line": " = > configuration _ source . convention . overrides ( relationship _ builder . metadata . get _ foreign _ key _ properties _ configuration _ source ( ) ) ? discover _ properties ( relationship _ builder ) : relationship _ builder ; ", "after_ctx": " <%> <*> = > configuration _ source . convention . overrides ( relationship _ builder . metadata . get _ foreign _ key _ properties _ configuration _ source ( ) ) ? discover _ properties ( relationship _ builder ) : relationship _ builder ; -> = > discover _ properties ( relationship _ builder ) ; </%>", "after_line": "= > discover _ properties ( relationship _ builder ) ;", "predictions": ["= > configuration _ source . not <%> </%> _ configuration : source _ > <%> <%> <%> -> source _ ) null null null null null null null null <*> </%> _ <%> <*> </%> _ builder -> _ builder -> relationship _ builder -> -> _ builder -> relationship _ builder -> relationship _ builder -> -> -> ->"]}, {"before_ctx": "<%> <*> = > configuration _ source . convention . overrides ( relationship _ builder . metadata . get _ foreign _ key _ properties _ configuration _ source ( ) ) ? discover _ properties ( relationship _ builder ) : relationship _ builder ; -> = > discover _ properties ( relationship _ builder ) ; </%> ", "before_line": " = > configuration _ source . convention . overrides ( relationship _ builder . metadata . get _ foreign _ key _ properties _ configuration _ source ( ) ) ? discover _ properties ( relationship _ builder ) : relationship _ builder ; ", "after_ctx": " ", "after_line": "= > discover _ properties ( relationship _ builder ) ;", "predictions": ["= > configuration _ source . convention . overrides ( relationship _ builder type ) <%> ? ? ? property _ </%> query source _ ) </%> source _ ) null null null null null null null <*> </%> _ type <*> </%> _ <%> <*> </%> _ <%> <*> <*> <*> <*> <*> configuration _ -> <*> </%> _ <%> <*> ;"]}, {"before_ctx": " ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " <%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore </%> ", "before_line": " fact _ skip _ fix _ build _ reference _ by _ name _ for _ dnxcore ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " var lambda _ body = remap _ lambda _ body ( shaped _ query _ expression . shaper _ expression , lambda _ expression ) ; ", "after_ctx": " <%> <+> shaped _ query _ </%> <%> <*> shaper -> shaped _ query </%> <%> <*> body -> expression </%> <%> <*> return -> var lambda _ body = </%> <%> <*> lambda _ expression . parameters . single ( ) , shaper _ body , lambda _ expression . body ) ; -> lambda _ expression . parameters . single ( ) , shaped _ query _ expression . shaper _ expression , lambda _ expression . body ) ; </%> <%> <+> var select _ expression = ( select _ expression ) shaped _ query _ expression . query _ expression ; lambda _ body = weak _ entity _ expanding _ expression _ visitor . expand ( select _ expression , lambda _ body ) ; return lambda _ body ; } </%>", "after_line": "var lambda _ body = remap _ lambda _ body ( shaped _ query _ expression , lambda _ expression ) ;", "predictions": ["lambda _ expression . parameters . single ( ) , shaped _ query _ expression . shaper _ expression , lambda _ expression . body ) ;"]}, {"before_ctx": "<%> <*> = select _ expression . get _ mapped _ projection ( projection _ binding _ expression . projection _ member ) ; -> = entity _ projection _ expression ; </%> ", "before_line": " return include _ expression . navigation . foreign _ key . is _ ownership ? visit ( include _ expression . entity _ expression ) : client _ eval ? base . visit _ extension ( include _ expression ) : null ; ", "after_ctx": " ", "after_line": "return client _ eval ? base . visit _ extension ( include _ expression ) : null ;", "predictions": ["return visit ( include ( string . </%> _ . ) create </@> builder model model model model model model model model . <%> _ 2 = ( ( _ | ) _ ) , entity _ ) > c c c , ;"]}, {"before_ctx": "<%> <-> ( </%> <%> <*> l . leaf _ b _ address . country -> o </%> <%> <*> = -> in ( </%> <%> <*> leaf -> owned </%> <%> <*> b -> person ' , n </%> <%> <*> ) and [ l . -> branch ' , n ' </%> <%> <*> _ address . country ] . [ -> ' , n ' </%> <%> <*> b _ address _ country _ planet _ id ] is not null -> a ' ) STR </%> <%> <-> ) as [ ] on [ t ] . [ id ] = [ ] . [ id ] left join ( select [ l . leaf _ a _ address ] . * from [ owned _ person ] as [ l . leaf _ a _ address ] where [ l . leaf _ a _ address ] . [ discriminator ] = n ' leaf _ a ' ) as [ ] on [ o ] . [ id ] = [ ] . [ id ] left join ( select [ l . leaf _ a _ address . country ] . * from [ owned _ person ] as [ l . leaf _ a _ address . country ] where ( [ l . leaf _ a _ address . country ] . [ discriminator ] = n ' leaf _ a ' ) and [ l . leaf _ a _ address . country ] . [ leaf _ a _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ b . branch _ address ] . * from [ owned _ person ] as [ b . branch _ address ] where [ b . branch _ address ] . [ discriminator ] in ( n ' leaf _ a ' , n ' branch ' ) ) as [ ] on [ o ] . [ id ] = [ ] . [ id ] left join ( select [ b . branch _ address . country ] . * from [ owned _ person ] as [ b . branch _ address . country ] where [ b . branch _ address . country ] . [ discriminator ] in ( n ' leaf _ a ' , n ' branch ' ) and [ b . branch _ address . country ] . [ branch _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ o . person _ address ] . * from [ owned _ person ] as [ o . person _ address ] where [ o . person _ address ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) ) as [ ] on [ o ] . [ id ] = [ ] . [ id ] left join ( select [ o . person _ address . country ] . * from [ owned _ person ] as [ o . person _ address . country ] where [ o . person _ address . country ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) and [ o . person _ address . country ] . [ person _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] where [ o ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) order by [ o ] . [ id ] STR @ STR from [ order ] as [ o . orders ] inner join ( select distinct [ ] . [ id ] from [ owned _ person ] as [ ] left join ( select [ l . leaf _ b _ address ] . * from [ owned _ person ] as [ l . leaf _ b _ address ] where [ l . leaf _ b _ address ] . [ discriminator ] = n ' leaf _ b ' ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ l . leaf _ b _ address . country ] . * from [ owned _ person ] as [ l . leaf _ b _ address . country ] where ( [ l . leaf _ b _ address . country ] . [ discriminator ] = n ' leaf _ b ' ) and [ l . leaf _ b _ address . country ] . [ leaf _ b _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ l . leaf _ a _ address ] . * from [ owned _ person ] as [ l . leaf _ a _ address ] where [ l . leaf _ a _ address ] . [ discriminator ] = n ' leaf _ a ' ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ l . leaf _ a _ address . country ] . * from [ owned _ person ] as [ l . leaf _ a _ address . country ] where ( [ l . leaf _ a _ address . country ] . [ discriminator ] = n ' leaf _ a ' ) and [ l . leaf _ a _ address . country ] . [ leaf _ a _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ b . branch _ address ] . * from [ owned _ person ] as [ b . branch _ address ] where [ b . branch _ address ] . [ discriminator ] in ( n ' leaf _ a ' , n ' branch ' ) ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ b . branch _ address . country ] . * from [ owned _ person ] as [ b . branch _ address . country ] where [ b . branch _ address . country ] . [ discriminator ] in ( n ' leaf _ a ' , n ' branch ' ) and [ b . branch _ address . country ] . [ branch _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ o . person _ address ] . * from [ owned _ person ] as [ o . person _ address ] where [ o . person _ address ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) ) as [ ] on [ ] . [ id ] = [ ] . [ id ] left join ( select [ o . person _ address . country ] . * from [ owned _ person ] as [ o . person _ address . country ] where [ o . person _ address . country ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) and [ o . person _ address . country ] . [ person _ address _ country _ planet _ id ] is not null ) as [ ] on [ ] . [ id ] = [ ] . [ id ] where [ ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) ) as [ ] on [ o . orders ] . [ client _ id ] = [ ] . [ id ] order by [ ] . [ id ] STR </%> ", "before_line": " where [ o ] . [ discriminator ] in ( n ' leaf _ b ' , n ' leaf _ a ' , n ' branch ' , n ' owned _ person ' ) STR ", "after_ctx": " <%> <*> ( select -> [ owned _ person ] as [ ] on [ o ] . [ id ] = [ ] . [ id ] left join [ owned _ person ] as [ ] on </%> <%> <*> l -> ] </%> <%> <*> leaf _ a _ address -> [ id ] = [ </%> <%> <*> * from -> [ id ] left join </%> <%> <*> l -> ] on [ o ] </%> <%> <*> leaf _ a _ address -> [ id ] = [ </%> <%> <+> . [ id ] </%>", "after_line": "where [ o ] . [ discriminator ] in ( n ' owned _ person ' , n ' branch ' , n ' leaf _ b ' , n ' leaf _ a ' ) STR", "predictions": ["n [ ] on [ o ] . [ id ] = [ ] . branch _ address . country ] where [ b . branch _ address . country ] where [ b . branch _ address . country ] where [ b . branch _ address . country ] where [ b . branch _ address . country ] ;"]}, {"before_ctx": "<%> <*> foreach ( var navigation in navigations . skip ( 1 ) ) { select _ clause _ expression = expression . property ( select _ clause _ expression , navigation . name ) ; } -> select _ clause _ expression </%> <%> <+> = navigations . skip ( 1 ) . aggregate ( select _ clause _ expression , ( current , navigation ) = > expression . property ( current , navigation . name ) ) ; </%> ", "before_line": " if ( navigations . count ( ) > 1 ) ", "after_ctx": " <%> <-> { return new navigation _ rewriting _ expression _ visitor ( query _ model _ visitor , entity _ query _ provider ) ; </%>", "after_line": "if ( navigations . count > 1 )", "predictions": ["if ( navigations . count > 1 )"]}, {"before_ctx": " ", "before_line": " var enumerable = value as system . collections . i _ enumerable ; if ( enumerable ! = null & & ! ( value is string ) ) ", "after_ctx": " <%> <-> . to _ string ( ) </%>", "after_line": "var enumerable = value as i _ enumerable ; if ( enumerable ! = null & & ! ( value is string ) )", "predictions": ["var enumerable = value default <-> <-> <%> _ collections <-> name . ( = = = = = = = = . null ) )"]}, {"before_ctx": "<%> <*> var enumerable = value as system . collections . i _ enumerable ; if ( enumerable ! = null & & ! ( value is string ) ) -> var enumerable = value as i _ enumerable ; </%> <%> <+> if ( enumerable ! = null & & ! ( value is string ) ) </%> ", "before_line": " append _ action ( string _ builder , item . to _ string ( ) + STR ) ; ", "after_ctx": " ", "after_line": "append _ action ( string _ builder , item + STR ) ;", "predictions": ["append _ action ( string ( method </%> item <%> STR <%> <+> . skip . by ( . by ( . i , item ) ) ) ( string . if . <-> ) by ,"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <*> . select ( c = > c . orders . order _ by ( o = > o . order _ id ) . first _ or _ default ( ) ) ) ; -> . select ( c = > c . orders . order _ by ( o = > o . order _ id ) . first _ or _ default ( ) ) , </%> <%> <+> entry _ count : 2 ) ; </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ source _ issue"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <+> cs = > cs . order _ by ( c = > c . customer _ id ) . take ( 2 ) . select ( c = > c . orders . order _ by ( o = > o . order _ id ) . first _ or _ default ( ) ) , </%> <%> <*> cs = > cs . order _ by ( c = > c . customer _ id ) . take ( 2 ) . select ( c = > c . orders . order _ by ( o = > o . order _ id ) . first _ or -> entry </%> <%> <*> default ( ) ) -> count : 2 </%> <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <*> o = > o . order _ details . order _ by ( od = > od . product . product _ name ) . take ( 1 ) . first _ or _ default ( ) ) ) ; -> o = > o . order _ details . order _ by ( od = > od . product . product _ name ) . take ( 1 ) . first _ or _ default ( ) ) , </%> <%> <+> entry _ count : 2 ) ; </%>", "after_line": "conditional _ theory", "predictions": ["conditional"]}, {"before_ctx": " ", "before_line": " var ctx = relational _ test _ helpers . instance . create _ context ( target _ model _ builder . model ) ; var model _ differ = create _ model _ differ ( ctx ) ; ", "after_ctx": " <%> <*> ctx = relational _ test _ helpers . instance . create _ context ( source _ model _ builder . model ) ; model _ differ = create _ model _ differ ( ctx ) ; -> model _ differ = create _ model _ differ ( source _ model _ builder . model ) ; </%>", "after_line": "var model _ differ = create _ model _ differ ( target _ model _ builder . model ) ;", "predictions": ["var model _ differ = create _ model _ ( : : ;"]}, {"before_ctx": "<%> <*> var ctx = relational _ test _ helpers . instance . create _ context ( target _ model _ builder . model ) ; var model _ differ = create _ model _ differ ( ctx ) ; -> var model _ differ = create _ model _ differ ( target _ model _ builder . model ) ; </%> ", "before_line": " ctx = relational _ test _ helpers . instance . create _ context ( source _ model _ builder . model ) ; model _ differ = create _ model _ differ ( ctx ) ; ", "after_ctx": " ", "after_line": "model _ differ = create _ model _ differ ( source _ model _ builder . model ) ;", "predictions": ["ctx _ differ = create _ first _ item _ , _ properties | , , _ differ = properties name name _ differ = name name ; ; STR name STR"]}, {"before_ctx": "<%> <*> select -> select </%> <%> <+> value _ </%> <%> <*> parameter -> expression </%> <%> <*> target _ member . type , mapping . item . index ) ) ) ; -> target _ member . type , </%> <%> <+> index _ map ? [ mapping . item . index ] ? ? mapping . item . index ) ) ) ; </%> ", "before_line": " return expression . lambda < func < i _ value _ reader , object > > ( expression . block ( new [ ] { instance _ variable } , block _ expressions ) , reader _ parameter ) . compile ( ) ; ", "after_ctx": " ", "after_line": "return expression . block ( new [ ] { instance _ variable } , block _ expressions ) ;", "predictions": ["return expression . lambda < func < i | object | object name name . skip ( . -> ) _ -> ) 1 1 1 1 ) </%>"]}, {"before_ctx": "<%> <-> } </%> <%> <*> query _ method _ info -> query _ method _ info </%> <%> <*> . make _ generic _ method ( element _ type ) ; -> . make _ generic _ method ( element _ type ) ; </%> <%> <-> var materializer = query _ model _ visitor . query _ compilation _ context . entity _ materializer _ source . get _ materializer ( entity _ type ) ; </%> ", "before_line": " new expression [ ] ", "after_ctx": " <%> <-> expression . constant ( </%> <%> <-> ) </%>", "after_line": "new [ ]", "predictions": ["new [ ]"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ relational _ metadata ; </%> ", "before_line": " using microsoft _ data _ entity _ value _ generation ; namespace microsoft _ data _ entity _ relational _ value _ generation ", "after_ctx": " ", "after_line": "namespace microsoft _ data _ entity _ value _ generation", "predictions": ["namespace microsoft _ data _ ( ) _ <-> _ ,"]}, {"before_ctx": " ", "before_line": " order by [ g ] . [ leader _ nickname ] , [ g ] . [ full _ name ] ", "after_ctx": " <%> <*> inner join -> where exists </%> <%> <*> distinct [ g ] . [ leader _ nickname ] , [ g ] . [ full _ name ] -> 1 </%> <%> <*> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) ) as [ ] on [ w ] . [ owner _ full _ name ] = [ ] . [ full _ name ] order by [ ] . [ leader _ nickname ] , [ ] . [ full _ name ] STR -> where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ w ] . [ owner _ full _ name ] = [ g ] . [ full _ name ] ) ) </%>", "after_line": "order by [ g ] . [ full _ name ]", "predictions": ["order by [ g ] . [ leader _ nickname ] , [ g ] . [ full _ name ]"]}, {"before_ctx": " ", "before_line": " var property = metadata . find _ properties _ in _ hierarchy ( new [ ] { member _ name } ) . single _ or _ default ( ) ; ", "after_ctx": " <%> <-> new [ ] { </%> <%> <-> } </%>", "after_line": "var property = metadata . find _ properties _ in _ hierarchy ( member _ name ) . single _ or _ default ( ) ;", "predictions": ["var property = metadata . build _ properties ( -> _ : type <%> <%> <%> <%> <%> <%> <%> <%> <%> . single ) ;"]}, {"before_ctx": "<%> <-> new [ ] { </%> <%> <-> } </%> ", "before_line": " var navigation = metadata . find _ navigations _ in _ hierarchy ( new [ ] { member _ name } ) . single _ or _ default ( ) ; ", "after_ctx": " ", "after_line": "var navigation = metadata . find _ navigations _ in _ hierarchy ( member _ name ) . single _ or _ default ( ) ;", "predictions": ["var navigation = metadata ( = member _ name enumerable enumerable ( ; -> _ : ) ( <@> _ </@> _ expression . constant <%> <%> . single . <+> _ <*> . <+> _ [ . <+> ) <%>"]}, {"before_ctx": " ", "before_line": " return foreign _ key ( principal _ type . metadata , get _ or _ create _ properties ( property _ names , configuration _ source ) , configuration _ source ) ; ", "after_ctx": " <%> <-> . metadata </%>", "after_line": "return foreign _ key ( principal _ type , get _ or _ create _ properties ( property _ names , configuration _ source ) , configuration _ source ) ;", "predictions": ["return foreign _ key ) ] </@> ) skip </%> _ source _ string ) value value value value value value value ; _ <+> . c . test model target _ = = > get _ : ) -> -> . source , configuration _ <*> ( skip _ source . metadata _ <*> ( skip _ source . metadata . current _ source ) _ source ) <%>"]}, {"before_ctx": "<%> <+> STR , </%> ", "before_line": " ( ) = > new foreign _ key ( new [ ] { dependent _ property , dependent _ property } , principal _ type . get _ primary _ key ( ) , principal _ type , dependent _ type ) ) . message ) ; ", "after_ctx": " ", "after_line": "( ) = > new foreign _ key ( new [ ] { dependent _ property , dependent _ property } , principal _ type . get _ primary _ key ( ) , dependent _ type , principal _ type ) ) . message ) ;", "predictions": ["( ) = > : : value ( new _ property <%> ( ( model . ( <%> . ctx _ builder ; ( model ; ctx _ > ) ) index ) ) ) ) ) ) <%> <%> . _ > ( = [ . skip ( = = = = = = = = = = = = = = body expression expression expression expression expression expression expression . message ] ] . [ full ] ] . [ full . dependent [ full ] ] . [ full . dependent [ full ] ] ] ]"]}, {"before_ctx": "<%> <*> | | aspects _ configured . has _ flag ( foreign _ key _ aspect . principal _ end ) ; -> | | navigation _ to _ principal _ name ! = null </%> <%> <+> | | navigation _ to _ dependent _ name ! = null ; </%> ", "before_line": " get _ existing _ properties ( dependent _ properties , dependent _ entity _ type _ builder . metadata ) , get _ existing _ properties ( principal _ properties , principal _ entity _ type _ builder . metadata ) , ", "after_ctx": " <%> <+> old _ navigation _ to _ principal _ name , old _ navigation _ to _ dependent _ name , </%>", "after_line": "dependent _ properties , principal _ properties ,", "predictions": ["get _ existing _ properties ( dependent _ select ( , _ default . metadata ) . metadata ) . or . or _ type . metadata _ <%> expression ( _ where [ type [ = [ [ type [ where . . [ = [ type [ = where . . [ = [ type [ = where . . [ = [ type [ = in . ( <*> [ <*> [ , [ -> address b [ -> address b [ <*> [ , [ -> address address [ -> address address b b b ["]}, {"before_ctx": "<%> <+> detached _ keys . add ( tuple . create ( key _ builder , removed _ configuration _ source . value ) ) ; } return new key _ builders _ snapshot ( detached _ keys , primary _ key ) ; } </%> <%> <+> clr _ property : null , configuration _ source : configuration _ source ) ; </%> <%> <+> clr _ property : null , configuration _ source : configuration _ source ) ; </%> ", "before_line": " = > property ( clr _ property . name , clr _ property . property _ type , ", "after_ctx": " <%> <*> string property _ name , type property _ type , bool? shadow _ property , configuration _ source ? configuration _ source ) -> not _ null string property _ name , </%> <%> <+> can _ be _ null type property _ type , can _ be _ null property _ info clr _ property , can _ be _ null configuration _ source ? configuration _ source ) </%>", "after_line": "= > property ( clr _ property . name , clr _ property . property _ type , clr _ property : clr _ property , configuration _ source : configuration _ source ) ;", "predictions": ["= > property ( clr _ property . name , clr _ property . property _ type ,"]}, {"before_ctx": "<%> <+> < < 0 </%> ", "before_line": " is _ shadow _ property = NUM < < NUM , store _ generated _ always = NUM < < NUM ", "after_ctx": " ", "after_line": "store _ generated _ always = NUM < < NUM", "predictions": ["is _ shadow _ property = NUM < . ) <%> exception _ async . . . . ;"]}, {"before_ctx": " ", "before_line": " batch . add _ command ( new modification _ command ( STR , new parameter _ name _ generator ( ) ) , null ) ) . param _ name ) ; ", "after_ctx": " <%> <+> , null </%>", "after_line": "batch . add _ command ( new modification _ command ( STR , null , new parameter _ name _ generator ( ) ) , null ) ) . param _ name ) ;", "predictions": ["batch . add _ command ( new modification model _ . builder <%> <-> ) <-> > = > <%> configuration , . equal operation <%> </%> _ type . equals _ _ ;"]}, {"before_ctx": " ", "before_line": " typeof ( alter _ column _ operation ) , typeof ( alter _ sequence _ operation ) , typeof ( create _ index _ operation ) , typeof ( restart _ sequence _ operation ) ", "after_ctx": " <%> <+> typeof ( rename _ column _ operation ) , </%> <%> <+> } ; private static readonly type [ ] column _ operation _ types = { typeof ( add _ column _ operation ) , </%>", "after_line": "typeof ( alter _ sequence _ operation )", "predictions": ["typeof ( alter _ column _ operation )"]}, {"before_ctx": "<%> <-> if ( ( source . is _ unique ! = target . is _ unique ) | | has _ differences ( migrations _ annotations . for ( source ) , migrations _ annotations . for ( target ) ) ) { var operations = remove ( source ) . concat ( add ( target , diff _ context ) ) ; foreach ( var operation in operations ) { yield return operation ; } } </%> ", "before_line": " diff _ context . find _ source ( target . declaring _ entity _ type . root _ type ( ) ) ) ; ", "after_ctx": " <%> <-> . select ( diff _ context . find _ source ) </%>", "after_line": "target . declaring _ entity _ type . root _ type ( ) ) ;", "predictions": ["diff _ context . find _ source ( target </%> _ entity , not , not , _ root , ) null null null operation operation ;"]}, {"before_ctx": "<%> <*> typeof ( random ) . name -> STR </%> <%> <-> _ mutable </%> <%> <-> builder . ignore < random > ( ) ; </%> ", "before_line": " var model = builder . model ; var entity _ type = model . find _ entity _ type ( typeof ( an _ entity ) ) ; entity _ type . add _ property ( STR , typeof ( random ) ) ; ", "after_ctx": " <%> <+> builder . finalize _ </%> <%> <+> ( ) </%>", "after_line": "var entity _ type = builder . model . find _ entity _ type ( typeof ( an _ entity ) ) ;", "predictions": ["var entity _ type = builder . model ; </%> _ be _ if ) , default _ if _ = ) body _ <-> . | ) ;"]}, {"before_ctx": "<%> <-> string underlying _ store _ type ; </%> ", "before_line": " store _ type = data _ type _ name ; underlying _ store _ type = value . store _ type ; ", "after_ctx": " <%> <-> underlying _ store _ type = null ; </%>", "after_line": "store _ type = value . store _ type ;", "predictions": ["store _ type = value . store _ configuration command _ ( null , ;"]}, {"before_ctx": "<%> <-> ( </%> <%> <-> ) </%> ", "before_line": " where ( getutcdate ( ) < > my _ datetime ) STR ", "after_ctx": " ", "after_line": "where getutcdate ( ) < > my _ datetime STR", "predictions": ["where ( getutcdate ( ) < > my </@> <@> ) STR"]}, {"before_ctx": "<%> <-> ( </%> <%> <-> ) </%> ", "before_line": " where ( newid ( ) < > ' 00000000 - 0000 - 0000 - 0000 - 000000000000 ' ) STR ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%>", "after_line": "where newid ( ) < > ' 00000000 - 0000 - 0000 - 0000 - 000000000000 ' STR", "predictions": ["where ( newid ( ) < > ' null ( ( ( ; right & expression ) configuration configuration ( <-> = data = _ column operation ( data typeof ; value ) ) ) annotations"]}, {"before_ctx": " ", "before_line": " op = ( binary _ expression . left . type = = typeof ( string ) & & binary _ expression . right . type = = typeof ( string ) ) ", "after_ctx": " <%> <+> need _ parens = binary _ expression . right is binary _ expression ; if ( need _ parens ) </%>", "after_line": "op = binary _ expression . type = = typeof ( string )", "predictions": ["op = ( binary _ expression . left <%> _ ; . return , , typeof ) ( , , type ) )"]}, {"before_ctx": " ", "before_line": " assert . equal ( ex . param _ name , STR ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "assert . equal ( STR , ex . param _ name ) ;", "predictions": ["assert . equal ( STR , ex . param </@> on <@> param ) <-> <-> ) ) ) <%>"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " assert . equal ( ex . param _ name , STR ) ; ", "after_ctx": " ", "after_line": "assert . equal ( STR , ex . param _ name ) ;", "predictions": ["assert . equal ( STR , ex . param _ ) new"]}, {"before_ctx": "<%> <+> NUM , </%> <%> <-> , NUM </%> <%> <+> STR , </%> <%> <-> , STR </%> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> ", "before_line": " assert . equal ( db _ func _ builder . metadata . return _ type , typeof ( int ) ) ; ", "after_ctx": " <%> <+> typeof ( string ) , </%> <%> <-> , typeof ( string ) </%>", "after_line": "assert . equal ( typeof ( int ) , db _ func _ builder . metadata . return _ type ) ;", "predictions": ["assert . equal ( typeof ( int ) , create model builder builder . int data <%> </%> . <*> <%> ) context ;"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> ", "before_line": " assert . equal ( db _ func _ builder . metadata . return _ type , typeof ( string ) ) ; ", "after_ctx": " ", "after_line": "assert . equal ( typeof ( string ) , db _ func _ builder . metadata . return _ type ) ;", "predictions": ["assert . equal ( typeof ( string ) , <+> _ <%> _ <-> </@> </%> ) typeof typeof ( is ( is ( source ( source ( visit ( string ( ref <%> <%> , ) , can _ ) , ) . ? . string _ , can property , keys . ? . return , ) ,"]}, {"before_ctx": "<%> <+> virtual </%> <%> <-> ; set </%> ", "before_line": " protected entity _ type related _ entity _ type { get ; set ; }    public virtual foreign _ key metadata = > builder . metadata ; ", "after_ctx": " <%> <*> protected virtual -> internal _ relationship _ builder i _ accessor < </%> <%> <+> > . service = > </%> <%> <-> { get </%> <%> <-> } </%> <%> <+> builder . </%> <%> <+> builder . </%> <%> <+> builder . </%>", "after_line": "protected virtual entity _ type related _ entity _ type { get ; }", "predictions": ["protected virtual foreign _ key metadata = > builder . , |"]}, {"before_ctx": "<%> <*> can _ be _ null object value ) -> can _ be _ null object value , </%> <%> <+> can _ be _ null string invariant _ name ) </%> ", "before_line": " return command _ builder . add _ parameter ( ", "after_ctx": " <%> <*> value ? . get _ type ( ) . is _ nullable _ type ( ) ) ; -> value ? . get _ type ( ) . is _ nullable _ type ( ) , </%> <%> <+> invariant _ name ) ; return command _ builder ; </%> <%> <*> add -> append </%>", "after_line": "command _ builder . add _ parameter (", "predictions": ["command _ builder . add _ parameter ("]}, {"before_ctx": " ", "before_line": " return command _ builder . add _ parameter ( ", "after_ctx": " <%> <*> is _ nullable ) ; -> is _ nullable , </%> <%> <+> invariant _ name ) ; command _ builder . command _ text _ builder . append ( name ) ; return command _ builder ; </%>", "after_line": "command _ builder . add _ parameter (", "predictions": ["command _ builder . add _ parameter ("]}, {"before_ctx": " ", "before_line": " return command _ builder . add _ parameter ( ", "after_ctx": " <%> <*> property . is _ nullable ) ; -> property . is _ nullable , </%> <%> <+> invariant _ name : null ) ; return command _ builder ; } private static void add _ parameter ( not _ null this i _ relational _ command _ builder command _ builder , </%>", "after_line": "command _ builder . add _ parameter (", "predictions": ["return command _ builder . add _ parameter ("]}, {"before_ctx": "<%> <*> shaper _ body = new cosmos _ projection _ binding _ removing _ expression _ visitor ( select _ expression ) . visit ( shaper _ body ) ; -> var j _ object _ parameter = expression . parameter ( typeof ( j _ object ) , STR ) ; </%> <%> <+> shaper _ body = new cosmos _ projection _ binding _ removing _ expression _ visitor ( select _ expression , j _ object _ parameter ) . visit ( shaper _ body ) ; </%> ", "before_line": " cosmos _ projection _ binding _ removing _ expression _ visitor . j _ object _ parameter ) ; ", "after_ctx": " ", "after_line": "j _ object _ parameter ) ;", "predictions": ["j _ object _ parameter . j _ object ) target ) target ) target ) target ) target target <%> store _ < . . . _ <+> _ assert . ,"]}, {"before_ctx": " ", "before_line": " protected override void on _ model _ creating ( entity . metadata . model _ builder model _ builder ) ", "after_ctx": " <%> <+> public void include _ on _ optional _ navigation _ one _ to _ many ( ) { </%>", "after_line": "protected override void on _ model _ creating ( model _ builder model _ builder )", "predictions": ["protected override void on _ model _ creating state store = _ _ . ( ( builder _ ( ( <%> _ , operation <%> </%> . . ) ) )"]}, {"before_ctx": " ", "before_line": " get _ sql _ data _ type ( sequence . type ) , ", "after_ctx": " <%> <-> } private static string get _ sql _ data _ type ( type sequence _ type ) { contract . assert ( sequence _ type = = typeof ( long ) | | sequence _ type = = typeof ( int ) | | sequence _ type = = typeof ( short ) | | sequence _ type = = typeof ( byte ) ) ; return sequence _ type = = typeof ( long ) </%>", "after_line": "sequence . type ,", "predictions": ["get _ sql _ data _ type ( sequence <%> <+>"]}, {"before_ctx": "<%> <*> var sequence = new sequence ( STR , STR , 0 , 1 ) ; var create _ sequence _ operation = new create _ sequence _ operation ( sequence ) ; assert . same ( sequence , create _ sequence _ operation . sequence ) ; -> var create _ sequence _ operation = new create _ sequence _ operation ( </%> <%> <+> STR , NUM , NUM , NUM , NUM , typeof ( int ) ) ; assert . equal ( STR , create _ sequence _ operation . sequence _ name ) ; assert . equal ( NUM , create _ sequence _ operation . start _ value ) ; assert . equal ( NUM , create _ sequence _ operation . increment _ by ) ; assert . equal ( NUM , create _ sequence _ operation . min _ value ) ; assert . equal ( NUM , create _ sequence _ operation . max _ value ) ; assert . equal ( typeof ( int ) , create _ sequence _ operation . type ) ; assert . false ( create _ sequence _ operation . is _ destructive _ change ) ; } fact public void create _ and _ initialize _ operation _ with _ defaults ( ) { var create _ sequence _ operation = new create _ sequence _ operation ( STR ) ; assert . equal ( STR , create _ sequence _ operation . sequence _ name ) ; assert . equal ( sequence . default _ start _ value , create _ sequence _ operation . start _ value ) ; assert . equal ( sequence . default _ increment , create _ sequence _ operation . increment _ by ) ; assert . false ( create _ sequence _ operation . min _ value . has _ value ) ; assert . false ( create _ sequence _ operation . max _ value . has _ value ) ; assert . equal ( typeof ( long ) , create _ sequence _ operation . type ) ; </%> ", "before_line": " var create _ sequence _ operation = new create _ sequence _ operation ( new sequence ( STR , STR , 0 , 1 ) ) ; ", "after_ctx": " ", "after_line": "var create _ sequence _ operation = new create _ sequence _ operation ( STR ) ;", "predictions": ["var create _ sequence _ operation = new create _ sequence _ operation ( STR , 0 , 1 ) ;"]}, {"before_ctx": "<%> <+> using microsoft _ data _ entity _ migrations _ utilities ; </%> <%> <+> using microsoft _ data _ entity _ storage ; </%> ", "before_line": " private readonly lazy _ ref < migrator > migrator ; ", "after_ctx": " <%> <*> not _ null db _ context _ configuration configuration , -> not _ null lazy _ ref < i _ model > model , </%> <%> <+> not _ null data _ store _ creator data _ store _ creator , not _ null data _ store _ connection connection , not _ null migrator migrator , </%> <%> <*> configuration -> model , data _ store _ creator , connection </%> <%> <+> check . not _ null ( migrator , STR ) ; </%>", "after_line": "private readonly migrator migrator ;", "predictions": ["private readonly lazy _ ref migrator ;"]}, {"before_ctx": "<%> <+> check . not _ null ( migrator , STR ) ; </%> <%> <-> new lazy _ ref < </%> <%> <*> > ( ( ) = > ( ( migrations _ data _ store _ services ) configuration . data _ store _ services ) . migrator ) ; -> ; </%> ", "before_line": " get { return migrator . value ; } ", "after_ctx": " ", "after_line": "get { return migrator ; }", "predictions": ["get { return migrator ; }"]}, {"before_ctx": "<%> <*> configuration = configuration ; -> model = model ; </%> <%> <+> data _ store _ creator = data _ store _ creator ; connection = connection ; </%> <%> <-> configuration . </%> ", "before_line": " return configuration . data _ store _ creator . ensure _ created ( configuration . model ) ; ", "after_ctx": " <%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%>", "after_line": "return data _ store _ creator . ensure _ created ( model ) ;", "predictions": ["return data _ store _ creator . ensure _ equal metadata <%> </%> </%> </%> </%> ; ;"]}, {"before_ctx": "<%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%> ", "before_line": " return configuration . data _ store _ creator . ensure _ created _ async ( configuration . model , cancellation _ token ) ; ", "after_ctx": " <%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%>", "after_line": "return data _ store _ creator . ensure _ created _ async ( model , cancellation _ token ) ;", "predictions": ["return data _ store _ creator . ensure <%> parameter <-> ( builder <+> </@> , <*> <-> virtual"]}, {"before_ctx": "<%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%> <%> <-> configuration . </%> ", "before_line": " return configuration . data _ store _ creator . ensure _ deleted _ async ( configuration . model , cancellation _ token ) ; ", "after_ctx": " <%> <-> configuration . </%>", "after_line": "return data _ store _ creator . ensure _ deleted _ async ( model , cancellation _ token ) ;", "predictions": ["return data _ store _ creator . ensure . <+> ( builder <+> </@> , ( string typeof string <-> <-> entity entity entity typeof ;"]}, {"before_ctx": "<%> <-> state . </%> ", "before_line": " state . logger . query _ iteration _ failed ( state . context _ type , exception ) ; ", "after_ctx": " <%> <-> state . </%> <%> <*> ) -> , relational _ query _ context . context ) </%>", "after_line": "logger . query _ iteration _ failed ( context _ type , exception ) ;", "predictions": ["state . logger . query _ iteration _ failed </@> ( ( </%> builder builder builder builder <%> <%> </%> _ <*> ) )"]}, {"before_ctx": "<%> <-> state . </%> ", "before_line": " state . relational _ query _ context . connection . semaphore . release ( ) ; } state . relational _ query _ context . dispose ( ) ; ", "after_ctx": " ", "after_line": "relational _ query _ context . connection . semaphore . release ( ) ; } relational _ query _ context . dispose ( ) ;", "predictions": ["state . relational . release ( ) ; } ( = = , builder _ <%> _ expression = </%> _ <+> typeof ,"]}, {"before_ctx": "<%> <*> if ( has _ outers ) -> next _ outer = outer _ shaper . shape ( query _ context , source _ enumerator . current ) ; </%> <%> <+> if ( ! equals ( outer , next _ outer ) ) </%> ", "before_line": " next _ outer = outer _ shaper . shape ( query _ context , source _ enumerator . current ) ; if ( ! equals ( outer , next _ outer ) ) { break ; } next _ outer = default ( t _ outer ) ; ", "after_ctx": " <%> <+> next _ outer = default ( t _ outer ) ; </%>", "after_line": "break ;", "predictions": ["if ( ! equals ( outer , query _ ) expression expression expression _ , j ( ) expression _ is ( _ _ , </%> </%> </%> using _ ; configuration configuration ) ) name create _ . ;"]}, {"before_ctx": "<%> <*> if ( foreign _ key _ properties = = null ) -> if ( ( ! configuration _ source . convention . overrides ( foreign _ key . get _ principal _ end _ configuration _ source ( ) ) | | ! configuration _ source . convention . overrides ( foreign _ key . get _ principal _ key _ configuration _ source ( ) ) ) & & ( foreign _ key _ properties = = null ) ) </%> <%> <*> relationship -> foreign </%> <%> <*> builder . metadata -> key </%> <%> <*> relationship -> foreign </%> <%> <*> builder . metadata -> key </%> <%> <*> relationship -> foreign </%> <%> <*> builder . metadata -> key </%> ", "before_line": " | | ( relationship _ builder . metadata . declaring _ entity _ type . find _ foreign _ key ( foreign _ key _ properties , foreign _ key . principal _ key , foreign _ key . principal _ entity _ type ) ! = null ) ) ", "after_ctx": " <%> <-> } </%>", "after_line": "| | ( foreign _ key . declaring _ entity _ type . find _ foreign _ key ( foreign _ key _ properties , foreign _ key . principal _ key , foreign _ key . principal _ entity _ type ) ! = null ) )", "predictions": ["| | ( relationship _ builder . metadata . declaring _ entity _ type . find _ foreign _ key ( foreign _ key _ <%> assert assert assert assert sql _ ) assert options assert > store > store > . using . )"]}, {"before_ctx": " ", "before_line": " command . command _ text = command _ text + @ STR ", "after_ctx": " <%> <+> var view _ command _ text = @ STR union select schema _ name ( [ v ] . [ schema _ id ] ) as [ schema ] , . [ name ] STR if ( supports _ memory _ optimized _ table ) { view _ command _ text + = @ STR cast ( 0 as bit ) as [ is _ memory _ optimized ] STR </%>", "after_line": "command _ text = command _ text + @ STR", "predictions": ["command _ text = command _ text + @ STR"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ infrastructure ; using microsoft _ data _ entity _ internal ; using moq ; </%> ", "before_line": " assert . equal ( typeof ( in _ memory _ data _ store ) . name , new in _ memory _ data _ store _ source ( mock . of < db _ context _ services > ( ) , new db _ context _ options ( ) ) . name ) ; ", "after_ctx": " <%> <*> i _ db _ context _ options options = new db _ context _ options ( ) ; options . add _ or _ update _ extension < in _ memory _ options _ extension > ( e = > { } ) ; var configuration _ mock = new mock < db _ context _ services > ( ) ; configuration _ mock . setup ( m = > m . context _ options ) . returns ( options ) ; assert . true ( new in _ memory _ data _ store _ source ( configuration _ mock . object , options ) . is _ configured ) ; -> var options _ builder = new db _ context _ options _ builder ( ) ; </%>", "after_line": "assert . equal ( typeof ( in _ memory _ data _ store ) . name , new in _ memory _ data _ store _ source ( ) . name ) ;", "predictions": ["assert . equal ( typeof ( in _ memory _ data _ store ) . name , new in _ memory _ data _ store _ <+> . of . of & source builder _ name builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder . . . . . . . . . . . . . . builder . builder . . ; ; < get _ context _ to _ , builder builder builder builder configuration builder . . . . . . ."]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ infrastructure ; using microsoft _ data _ entity _ internal ; using moq ; </%> ", "before_line": " assert . equal ( typeof ( sql _ server _ data _ store ) . name , new sql _ server _ data _ store _ source ( mock . of < db _ context _ services > ( ) , new db _ context _ options ( ) ) . name ) ; ", "after_ctx": " <%> <*> i _ db _ context _ options options = new db _ context _ options ( ) ; options . add _ or _ update _ extension < sql _ server _ options _ extension > ( e = > { } ) ; var configuration _ mock = new mock < db _ context _ services > ( ) ; configuration _ mock . setup ( m = > m . context _ options ) . returns ( options ) ; assert . true ( new sql _ server _ data _ store _ source ( configuration _ mock . object , options ) . is _ configured ) ; -> var options _ builder = new db _ context _ options _ builder ( ) ; </%>", "after_line": "assert . equal ( typeof ( sql _ server _ data _ store ) . name , new sql _ server _ data _ store _ source ( ) . name ) ;", "predictions": ["assert . equal ( typeof ( sql _ server _ data _ store ) . name , new sql _ server _ data _ store _ source ( ) , new db _ context _ options ( ) ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> using ( var ctx = create -> assert </%> <%> <*> context -> query < level , level > </%> <%> <*> ) ) { -> ( s , s ) = > </%> <%> <-> var query = </%> <%> <*> ctx . level _ one -> s </%> <%> <*> ctx . level _ two -> s </%> <%> <+> orderby . id </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <+> assert _ contains _ sql ( @ STR from ( select [ ] . * from [ level ] as [ ] where [ ] . [ id ] is not null ) as [ ] STR </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <*> detector -> notifier </%> <%> <*> change -> state _ entry </%> <%> <*> detector -> notifier </%> <%> <*> detector -> notifier </%> <%> <*> detector -> notifier </%> <%> <*> detector -> notifier </%> ", "before_line": " return new state _ entry _ subscriber ( new change _ detector ( mock . of < db _ context _ configuration > ( ) , mock . of < state _ entry _ notifier > ( ) ) ) ; ", "after_ctx": " ", "after_line": "return new state _ entry _ subscriber ( mock . of < state _ entry _ notifier > ( ) ) ;", "predictions": ["return new state _ entry _ subscriber ( mock . of < db _ </@> _ </%> + name , name as view < _ <%> ] </%> -> -> -> -> ) -> configuration configuration configuration configuration configuration configuration -> ) table ) string"]}, {"before_ctx": "<%> <+> new _ relationship _ builder . metadata . update _ principal _ to _ dependent _ configuration _ source ( configuration _ source . data _ annotation ) ; } </%> <%> <-> if ( new _ relationship _ builder ! = null ) { var temp = upgrade _ dependent _ to _ principal _ navigation _ source ; upgrade _ dependent _ to _ principal _ navigation _ source = upgrade _ principal _ to _ dependent _ navigation _ source ; upgrade _ principal _ to _ dependent _ navigation _ source = temp ; } } if ( new _ relationship _ builder ! = null & & upgrade _ dependent _ to _ principal _ navigation _ source ) { new _ relationship _ builder = new _ relationship _ builder . dependent _ to _ principal ( new _ relationship _ builder . metadata . dependent _ to _ principal . name , configuration _ source . data _ annotation ) ; } if ( new _ relationship _ builder ! = null & & upgrade _ principal _ to _ dependent _ navigation _ source ) { new _ relationship _ builder = new _ relationship _ builder . principal _ to _ dependent ( new _ relationship _ builder . metadata . principal _ to _ dependent . name , configuration _ source . data _ annotation ) ; </%> ", "before_line": " private bool split _ navigations _ to _ separate _ relationships ( internal _ relationship _ builder relationship _ builder ) ", "after_ctx": " ", "after_line": "private internal _ relationship _ builder split _ navigations _ to _ separate _ relationships ( internal _ relationship _ builder relationship _ builder )", "predictions": ["private bool split _ navigations _ to _ separate _ relationships ( internal _ relationship _ builder relationship _ builder )"]}, {"before_ctx": " ", "before_line": " public virtual i _ read _ only _ list < property > get _ actual _ properties ( [ can _ be _ null ] i _ enumerable < property > properties , configuration _ source ? configuration _ source ) ", "after_ctx": " <%> <*> list < property > ( ) -> property [ properties . count ] </%> <%> <*> foreach -> for </%> <%> <*> property in properties ) -> i = 0 ; i < actual _ properties . length ; i + + ) </%> <%> <+> var property = properties [ i ] ; </%>", "after_line": "public virtual i _ read _ only _ list < property > get _ actual _ properties ( [ can _ be _ null ] i _ read _ only _ list < property > properties , configuration _ source ? configuration _ source )", "predictions": ["public virtual i _ read _ only _ list < property > get _ actual _ properties ( [ can _ be _ null ] . . properties <%> <%> string string string string ( string table <%> table table ( ) builder null ) ) options )"]}, {"before_ctx": " ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " fact _ skip _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " var foreign _ key _ annotations = foreign _ key . relational ( ) ; var foreign _ key _ name = foreign _ key _ annotations . name ; ", "after_ctx": " <%> <-> var principal _ annotations = foreign _ key . principal _ entity _ type . relational ( ) ; var principal _ table = format ( principal _ annotations . schema , principal _ annotations . table _ name ) ; var duplicate _ annotations = duplicate _ foreign _ key . principal _ entity _ type . relational ( ) ; var duplicate _ principal _ table = format ( duplicate _ annotations . schema , duplicate _ annotations . table _ name ) ; if ( ! string . equals ( principal _ table , duplicate _ principal _ table , string _ comparison . ordinal _ ignore _ case ) ) </%>", "after_line": "var foreign _ key _ name = foreign _ key . relational ( ) . name ;", "predictions": ["var foreign _ key _ name = foreign _ key . relational ( ) ; var foreign _ key _ name = name ;"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ change _ tracking ; </%> ", "before_line": " using microsoft _ entity _ framework _ core _ diagnostics _ in _ memory _ internal ; ", "after_ctx": " ", "after_line": "using microsoft _ entity _ framework _ core _ in _ memory _ diagnostics _ internal ;", "predictions": ["using microsoft _ entity _ framework _ core _ in _ <-> _ <%> </%>"]}, {"before_ctx": " ", "before_line": " var other _ navigation = navigations . value . values . first _ or _ default ( n = > n . foreign _ key = = navigation . foreign _ key & & navigation . points _ to _ principal = = n . points _ to _ principal ) ; ", "after_ctx": " <%> <-> . value </%>", "after_line": "var other _ navigation = navigations . values . first _ or _ default ( n = > n . foreign _ key = = navigation . foreign _ key & & n . points _ to _ principal = = navigation . points _ to _ principal ) ;", "predictions": ["var other _ navigation = navigations . value . values . first <%> level <%> </@> <*> -> -> foreign _ ( <*> <%> <%> command STR text STR STR memory command [ ] [ ] + [ ] STR memory _ ; ] ( property = . points _ > _ = server server ( . new new new assert _ entity _ </%> server server _ options ;"]}, {"before_ctx": "<%> <+> element _ sorter : e = > e . order _ id , </%> ", "before_line": " conditional _ fact _ skip ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " node , ( ps , qs ) = > { if ( qs ! = null ) ", "after_ctx": " <%> <+> if ( qs ! = null ) { </%>", "after_line": "node , ( ps , qs ) = >", "predictions": ["node , ( ps , qs ) = > if ( parameter ;"]}, {"before_ctx": " ", "before_line": " using system _ reflection ; ", "after_ctx": " <%> <*> abstract class -> interface i _ property _ </%> <%> <-> public abstract </%> <%> <*> not _ null parameter _ info parameter ) ; -> not _ null type parameter _ type , </%> <%> <+> not _ null string parameter _ name ) ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": " ", "before_line": " ex = assert . throws < argument _ null _ exception > ( ( ) = > new sq _ lite _ command ( STR , null ) ) ; assert . equal ( STR , ex . param _ name ) ; ", "after_ctx": " <%> <*> { ex = assert . throws < argument _ null _ exception > ( ( ) = > new sq _ lite _ command ( STR , connection , null ) ) ; assert . equal ( STR , ex . param _ name ) ; } -> assert . throws < argument _ null _ exception > ( </%> <%> <+> STR , ( ) = > new sq _ lite _ command ( STR , connection , null ) ) ; </%>", "after_line": "assert . throws < argument _ null _ exception > ( STR , ( ) = > new sq _ lite _ command ( STR , null ) ) ;", "predictions": ["ex = new sq _ lite _ command ( STR , null ) ; assert . equal ( STR ) connection connection get _ set connection connection builder } ) }"]}, {"before_ctx": " ", "before_line": " using ( var batch = model . convention _ dispatcher . start _ batch ( ) ) ", "after_ctx": " <%> <+> ! = null </%> <%> <-> ( </%> <%> <-> ) </%>", "after_line": "using ( model . convention _ dispatcher . start _ batch ( ) )", "predictions": ["using ( var batch = model . convention , start value , _ . _ _ . start . property <-> _ update metadata configuration configuration ! = get _ get _ ; ( string . STR string <%> { string string string string string string string string string string string string string string string string string string string string string string string string {"]}, {"before_ctx": "<%> <-> . value </%> <%> <-> . value </%> ", "before_line": " if ( metadata . get _ properties _ configuration _ source ( ) = = configuration _ source . value ) ", "after_ctx": " <%> <-> . value </%>", "after_line": "if ( metadata . get _ properties _ configuration _ source ( ) = = configuration _ source )", "predictions": ["if ( metadata . get _ properties _ -> . ; , type _ ) <-> type _ )"]}, {"before_ctx": "<%> <-> . value </%> ", "before_line": " if ( metadata . get _ principal _ key _ configuration _ source ( ) = = configuration _ source . value ) ", "after_ctx": " ", "after_line": "if ( metadata . get _ principal _ key _ configuration _ source ( ) = = configuration _ source )", "predictions": ["if ( metadata . get _ principal _ key <%> has <%> <%> <%> <+> _ ) </%> value . ( to _ principal . assert _ ) . <%> source source source source )"]}, {"before_ctx": " ", "before_line": " metadata . update _ configuration _ source ( configuration _ source . value ) ; ", "after_ctx": " <%> <-> . value </%> <%> <-> . value </%>", "after_line": "metadata . update _ configuration _ source ( configuration _ source ) ;", "predictions": ["metadata . update _ configuration _ source ( configuration _ ( , = = = </%> ! ;"]}, {"before_ctx": "<%> <-> . value </%> ", "before_line": " is _ unique ( should _ be _ unique . value , configuration _ source . value ) ; ", "after_ctx": " <%> <-> . value </%>", "after_line": "is _ unique ( should _ be _ unique . value , configuration _ source ) ;", "predictions": ["is _ unique ( should _ be _ ) <%> <%> . source -> <*> . <%> = if . is , <@> configuration configuration ( </@> configuration properties properties . source get string ( format . configuration . type builder builder . type builder builder . type builder builder string } } } string } invalid string } object } object } ;"]}, {"before_ctx": "<%> <-> . value </%> <%> <-> . value </%> ", "before_line": " metadata . has _ principal _ to _ dependent ( ( string ) null , configuration _ source . value ) ; ", "after_ctx": " <%> <*> unignore -> remove _ ignored </%>", "after_line": "metadata . has _ principal _ to _ dependent ( ( string ) null , configuration _ source ) ;", "predictions": ["metadata . has _ principal _ to _ assert builder builder _ return update update _ return configuration properties = ( default _ <@> value _ </@> ) static ( _ <-> ) metadata"]}, {"before_ctx": "<%> <*> unignore -> remove _ ignored </%> ", "before_line": " metadata . has _ dependent _ to _ principal ( navigation _ property , configuration _ source . value ) ; ", "after_ctx": " <%> <-> . value </%>", "after_line": "metadata . has _ dependent _ to _ principal ( navigation _ property , configuration _ source ) ;", "predictions": ["metadata . has _ dependent _ to _ metadata to _ metadata ; ;"]}, {"before_ctx": "<%> <-> . value </%> ", "before_line": " metadata . has _ dependent _ to _ principal ( navigation _ to _ principal _ name , configuration _ source . value ) ; ", "after_ctx": " <%> <*> unignore -> remove _ ignored </%>", "after_line": "metadata . has _ dependent _ to _ principal ( navigation _ to _ principal _ name , configuration _ source ) ;", "predictions": ["metadata . has _ dependent _ to _ ) <-> <-> property _ <%> _ metadata ! <@> _ { </%> _ has _ null > ;"]}, {"before_ctx": "<%> <*> unignore -> remove _ ignored </%> ", "before_line": " metadata . has _ principal _ to _ dependent ( navigation _ property , configuration _ source . value ) ; ", "after_ctx": " <%> <-> . value </%>", "after_line": "metadata . has _ principal _ to _ dependent ( navigation _ property , configuration _ source ) ;", "predictions": ["metadata . has _ principal _ to _ metadata </%> </%> . has _ principal _ to _ dependent builder _ metadata metadata <-> properties <-> ( <*> _ open STR STR static"]}, {"before_ctx": "<%> <-> . value </%> ", "before_line": " metadata . has _ principal _ to _ dependent ( navigation _ to _ dependent _ name , configuration _ source . value ) ; ", "after_ctx": " ", "after_line": "metadata . has _ principal _ to _ dependent ( navigation _ to _ dependent _ name , configuration _ source ) ;", "predictions": ["metadata . has _ principal _ to _ . <+> <+> _ </%> _ <%> . name ( </@> _ find _ source _ <@> metadata ;"]}, {"before_ctx": "<%> <*> related -> has </%> <%> <-> ? </%> <%> <*> related -> has </%> <%> <*> related -> has </%> ", "before_line": " configuration _ source ? configuration _ source ) ", "after_ctx": " ", "after_line": "configuration _ source configuration _ source )", "predictions": ["configuration _ source configuration _ source )"]}, {"before_ctx": "<%> <-> use _ default _ type : </%> <%> <-> ? </%> ", "before_line": " configuration _ source ? configuration _ source ) ", "after_ctx": " <%> <*> return ! configuration _ source . has _ value | | ! configuration _ source . value . overrides ( metadata . get _ properties _ configuration _ source ( ) ) -> return ! configuration _ source . overrides ( metadata . get _ properties _ configuration _ source ( ) ) </%>", "after_line": "configuration _ source configuration _ source )", "predictions": ["configuration _ source configuration _ source )"]}, {"before_ctx": "<%> <*> return ! configuration _ source . has _ value | | ! configuration _ source . value . overrides ( metadata . get _ properties _ configuration _ source ( ) ) -> return ! configuration _ source . overrides ( metadata . get _ properties _ configuration _ source ( ) ) </%> ", "before_line": " if ( ! configuration _ source . has _ value ) { return this ; } metadata . update _ properties _ configuration _ source ( configuration _ source . value ) ; ", "after_ctx": " <%> <-> . value </%>", "after_line": "metadata . update _ properties _ configuration _ source ( configuration _ source ) ;", "predictions": ["return this ;"]}, {"before_ctx": "<%> <*> if ( ! configuration _ source . has _ value ) { return this ; } metadata . update _ properties _ configuration _ source ( configuration _ source . value ) ; -> metadata . update _ properties _ configuration _ source ( configuration _ source ) ; </%> ", "before_line": " metadata . update _ principal _ end _ configuration _ source ( configuration _ source . value ) ; ", "after_ctx": " ", "after_line": "metadata . update _ principal _ end _ configuration _ source ( configuration _ source ) ;", "predictions": ["metadata . update _ principal _ end _ configuration _ source ) = , , , , , properties ) value value value value value value ; STR ;"]}, {"before_ctx": " ", "before_line": " principal _ end _ configuration _ source : properties = = null ? null : configuration _ source , ", "after_ctx": " <%> <+> public virtual bool can _ set _ foreign _ key ( [ can _ be _ null ] i _ read _ only _ list < property > properties , configuration _ source ? configuration _ source ) = > can _ set _ foreign _ key ( properties , dependent _ entity _ type : null , configuration _ source , out ) ; </%>", "after_line": "principal _ end _ configuration _ source : configuration _ source ,", "predictions": ["principal _ end _ configuration _ source : principal _ update _ configuration . source . principal _ update _ ) ("]}, {"before_ctx": "<%> <*> property -> member </%> <%> <-> ? </%> ", "before_line": " configuration _ source ? configuration _ source ) ", "after_ctx": " <%> <-> ? </%> <%> <-> return ! configuration _ source . has _ value | | ! configuration _ source . value . overrides ( metadata . get _ principal _ key _ configuration _ source ( ) ) </%>", "after_line": "configuration _ source configuration _ source )", "predictions": ["configuration _ source configuration _ source )"]}, {"before_ctx": "<%> <*> return ! configuration _ source . has _ value | | ! configuration _ source . value . overrides ( metadata . get _ principal _ key _ configuration _ source ( ) ) -> return ! configuration _ source . overrides ( metadata . get _ principal _ key _ configuration _ source ( ) ) </%> ", "before_line": " if ( configuration _ source = = null ) { return this ; } metadata . update _ principal _ key _ configuration _ source ( configuration _ source . value ) ; ", "after_ctx": " <%> <-> . value </%>", "after_line": "metadata . update _ principal _ key _ configuration _ source ( configuration _ source ) ;", "predictions": ["return this ;"]}, {"before_ctx": "<%> <*> if ( configuration _ source = = null ) { return this ; } metadata . update _ principal _ key _ configuration _ source ( configuration _ source . value ) ; -> metadata . update _ principal _ key _ configuration _ source ( configuration _ source ) ; </%> ", "before_line": " metadata . update _ principal _ end _ configuration _ source ( configuration _ source . value ) ; ", "after_ctx": " ", "after_line": "metadata . update _ principal _ end _ configuration _ source ( configuration _ source ) ;", "predictions": ["metadata . update _ principal _ end _ , _ configuration null value value value value value value value value ; call _ string call _ ( string static string static string static static static static static static static static static static static static static static static static static static static static static static static static static ;"]}, {"before_ctx": "<%> <*> var fk _ property = dependent _ type . property ( dependent _ entity . principal _ entity _ pe _ e _ ka _ y _ property , configuration _ source . convention ) . metadata ; var relationship _ builder = principal _ type . relationship ( dependent _ type , configuration _ source . convention ) -> var fk _ property = dependent _ type . builder . property ( </%> <%> <+> dependent _ entity . principal _ entity _ pe _ e _ ka _ y _ property , configuration _ source . convention ) . metadata ; var relationship _ builder = principal _ type . builder . has _ relationship ( dependent _ type , configuration _ source . convention ) </%> ", "before_line": " assert . same ( dependent _ type . metadata , new _ relationship _ builder . metadata . declaring _ entity _ type ) ; ", "after_ctx": " <%> <-> . metadata </%>", "after_line": "assert . same ( dependent _ type , new _ relationship _ builder . metadata . declaring _ entity _ type ) ;", "predictions": ["assert . same ( dependent _ type . metadata , new _ relationship _ builder . metadata . declaring _ entity _ ( get _ ( _ command _ cache _ data _ internal invalid , ) get _ object string get _ object static ) format format ;"]}, {"before_ctx": "<%> <+> . builder </%> <%> <+> builder . has _ </%> ", "before_line": " assert . same ( dependent _ type . metadata , new _ relationship _ builder . metadata . declaring _ entity _ type ) ; ", "after_ctx": " <%> <-> . metadata </%> <%> <-> . metadata </%>", "after_line": "assert . same ( dependent _ type , new _ relationship _ builder . metadata . declaring _ entity _ type ) ;", "predictions": ["assert . same ( dependent _ type . ( ! </@> ! <*> configuration configuration ? ) metadata <*> ) <%>"]}, {"before_ctx": " ", "before_line": " property = model . convention _ dispatcher . on _ property _ added ( property . builder ) ? . metadata ; return property ; ", "after_ctx": " <%> <-> public virtual property find _ declared _ property ( [ not _ null ] string property _ name ) </%>", "after_line": "return model . convention _ dispatcher . on _ property _ added ( property . builder ) ? . metadata ;", "predictions": ["property = model . convention _ dispatcher . on _ configuration _ <*> . null ) value key )"]}, {"before_ctx": "<%> <+> { </%> <%> <+> new relational _ type _ mapper _ dependencies ( ) </%> <%> <+> annotations _ provider , new sql _ server _ migrations _ annotation _ provider ( new migrations _ annotation _ provider _ dependencies ( ) ) ) , new sql _ server _ migrations _ sql _ generator ( new migrations _ sql _ generator _ dependencies ( command _ builder _ factory , new sql _ server _ sql _ generation _ helper ( new relational _ sql _ generation _ helper _ dependencies ( ) ) , type _ mapper , annotations _ provider ) , new sql _ server _ migrations _ annotation _ provider ( new migrations _ annotation _ provider _ dependencies ( ) ) ) , </%> ", "before_line": " new sql _ server _ migrations _ annotation _ provider ( ) ) , new sql _ server _ migrations _ sql _ generator ( command _ builder _ factory , new sql _ server _ sql _ generation _ helper ( ) , type _ mapper , annotations _ provider , new sql _ server _ migrations _ annotation _ provider ( ) ) , annotations _ provider , sql _ generator ) ; ", "after_ctx": " ", "after_line": "sql _ generator ) ) ;", "predictions": ["new sql _ server _ migrations _ annotation _ provider ( ) , new sql _ server _ migrations _ sql _ generator ( command _ builder _ factory , new sql _ server _ sql _ generation _ helper ( ) , type _ mapper , annotations _ provider , new sql _ server _ migrations _ annotation _ provider ( ) ) , annotations _ provider , sql _ generator ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ test _ does _ not _ pass ", "after_ctx": " <%> <+> . id < NUM & & </%> <%> <+> . id < NUM & & ! </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ test _ does _ not _ <@>"]}, {"before_ctx": "<%> <+> using system _ diagnostics ; </%> ", "before_line": " internal static string call _ requires _ open _ connection { get { return get _ string ( STR ) ; } }    internal static string format _ call _ requires _ open _ connection ( object method _ name ) ", "after_ctx": " <%> <*> internal static string call _ requires _ set _ command _ text { get { return get _ string ( STR ) ; } } internal static string format _ call _ requires _ set _ command _ text ( object method _ name ) -> internal static string call _ requires _ set _ command _ text ( object method _ name ) </%>", "after_line": "internal static string call _ requires _ open _ connection ( object method _ name )", "predictions": ["internal static string format _ call _ requires _ open _ connection ( object method _ name )"]}, {"before_ctx": "<%> <-> internal static string call _ requires _ open _ connection { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ call _ requires _ open _ connection ( object method _ name ) -> internal static string call _ requires _ open _ connection ( object method _ name ) </%> ", "before_line": " internal static string call _ requires _ set _ command _ text { get { return get _ string ( STR ) ; } }    internal static string format _ call _ requires _ set _ command _ text ( object method _ name ) ", "after_ctx": " <%> <-> internal static string format _ connection _ string _ requires _ closed _ connection ( ) { return get _ string ( STR ) ; </%>", "after_line": "internal static string call _ requires _ set _ command _ text ( object method _ name )", "predictions": ["internal static string format _ call _ requires _ set _ command _ text ( object method _ name ) ) ) ) ) ) )"]}, {"before_ctx": "<%> <-> internal static string call _ requires _ set _ command _ text { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ call _ requires _ set _ command _ text ( object method _ name ) -> internal static string call _ requires _ set _ command _ text ( object method _ name ) </%> <%> <-> internal static string format _ connection _ string _ requires _ closed _ connection ( ) { return get _ string ( STR ) ; } </%> ", "before_line": " internal static string data _ reader _ closed { get { return get _ string ( STR ) ; } }    internal static string format _ data _ reader _ closed ( object operation ) ", "after_ctx": " <%> <*> internal static string invalid _ cache _ mode { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ cache _ mode ( object mode ) -> internal static string invalid _ cache _ mode ( object mode ) </%>", "after_line": "internal static string data _ reader _ closed ( object operation )", "predictions": ["internal static string data _ reader _ closed { get { return get _ string ( STR ) ; { { { { { { { { { { { { operation ( object operation )"]}, {"before_ctx": "<%> <-> internal static string format _ connection _ string _ requires _ closed _ connection ( ) { return get _ string ( STR ) ; } internal static string data _ reader _ closed { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ data _ reader _ closed ( object operation ) -> internal static string data _ reader _ closed ( object operation ) </%> ", "before_line": " internal static string invalid _ cache _ mode { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ cache _ mode ( object mode ) ", "after_ctx": " <%> <*> internal static string invalid _ command _ behavior { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ command _ behavior ( object behavior ) -> internal static string invalid _ command _ behavior ( object behavior ) </%>", "after_line": "internal static string invalid _ cache _ mode ( object mode )", "predictions": ["return get { return get _ string ( STR ) ; } } internal static object format _ invalid _ -> _ command ( ;"]}, {"before_ctx": "<%> <-> internal static string data _ reader _ closed { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ data _ reader _ closed ( object operation ) -> internal static string data _ reader _ closed ( object operation ) </%> <%> <-> internal static string invalid _ cache _ mode { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ cache _ mode ( object mode ) -> internal static string invalid _ cache _ mode ( object mode ) </%> ", "before_line": " internal static string invalid _ command _ behavior { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ command _ behavior ( object behavior ) ", "after_ctx": " <%> <*> internal static string invalid _ command _ type { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ command _ type ( object command _ type ) -> internal static string invalid _ command _ type ( object command _ type ) </%>", "after_line": "internal static string invalid _ command _ behavior ( object behavior )", "predictions": ["get { return get _ string ( STR ) ; } } internal static string format _ invalid _ object _ -> ( command -> )"]}, {"before_ctx": "<%> <-> internal static string invalid _ cache _ mode { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ cache _ mode ( object mode ) -> internal static string invalid _ cache _ mode ( object mode ) </%> <%> <-> internal static string invalid _ command _ behavior { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ command _ behavior ( object behavior ) -> internal static string invalid _ command _ behavior ( object behavior ) </%> ", "before_line": " internal static string invalid _ command _ type { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ command _ type ( object command _ type ) ", "after_ctx": " <%> <*> internal static string invalid _ isolation _ level { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ isolation _ level ( object isolation _ level ) -> internal static string invalid _ isolation _ level ( object isolation _ level ) </%>", "after_line": "internal static string invalid _ command _ type ( object command _ type )", "predictions": ["internal static string format _ invalid _ command _ type ( object command _ type )"]}, {"before_ctx": "<%> <-> internal static string invalid _ command _ behavior { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ command _ behavior ( object behavior ) -> internal static string invalid _ command _ behavior ( object behavior ) </%> <%> <-> internal static string invalid _ command _ type { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ command _ type ( object command _ type ) -> internal static string invalid _ command _ type ( object command _ type ) </%> ", "before_line": " internal static string invalid _ isolation _ level { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ isolation _ level ( object isolation _ level ) ", "after_ctx": " <%> <*> internal static string invalid _ isolation _ level _ for _ unshared _ cache { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) -> internal static string invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) </%>", "after_line": "internal static string invalid _ isolation _ level ( object isolation _ level )", "predictions": ["internal static string invalid _ invalid _ isolation _ level { get { return get _ string ( STR ) ; } } internal static object format _ invalid _ isolation _ level ( object isolation _ level )"]}, {"before_ctx": "<%> <-> internal static string invalid _ command _ type { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ command _ type ( object command _ type ) -> internal static string invalid _ command _ type ( object command _ type ) </%> <%> <-> internal static string invalid _ isolation _ level { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ isolation _ level ( object isolation _ level ) -> internal static string invalid _ isolation _ level ( object isolation _ level ) </%> ", "before_line": " internal static string invalid _ isolation _ level _ for _ unshared _ cache { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) ", "after_ctx": " <%> <*> internal static string invalid _ parameter _ direction { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ parameter _ direction ( object direction ) -> internal static string invalid _ parameter _ direction ( object direction ) </%>", "after_line": "internal static string invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level )", "predictions": ["internal static string format _ invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level )"]}, {"before_ctx": "<%> <-> internal static string invalid _ isolation _ level { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ isolation _ level ( object isolation _ level ) -> internal static string invalid _ isolation _ level ( object isolation _ level ) </%> <%> <-> internal static string invalid _ isolation _ level _ for _ unshared _ cache { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) -> internal static string invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) </%> ", "before_line": " internal static string invalid _ parameter _ direction { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ parameter _ direction ( object direction ) ", "after_ctx": " <%> <*> internal static string keyword _ not _ supported { get { return get _ string ( STR ) ; } } internal static string format _ keyword _ not _ supported ( object keyword ) -> internal static string keyword _ not _ supported ( object keyword ) </%>", "after_line": "internal static string invalid _ parameter _ direction ( object direction )", "predictions": ["get { return get _ string ( STR ) ; } } internal string format _ invalid _ parameter _ direction ( object direction )"]}, {"before_ctx": "<%> <-> internal static string invalid _ isolation _ level _ for _ unshared _ cache { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) -> internal static string invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level ) </%> <%> <-> internal static string invalid _ parameter _ direction { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ parameter _ direction ( object direction ) -> internal static string invalid _ parameter _ direction ( object direction ) </%> ", "before_line": " internal static string keyword _ not _ supported { get { return get _ string ( STR ) ; } }    internal static string format _ keyword _ not _ supported ( object keyword ) ", "after_ctx": " <%> <*> internal static string missing _ parameters { get { return get _ string ( STR ) ; } } internal static string format _ missing _ parameters ( object parameters ) -> internal static string missing _ parameters ( object parameters ) </%>", "after_line": "internal static string keyword _ not _ supported ( object keyword )", "predictions": ["internal static string format _ keyword _ not _ supported ( object keyword )"]}, {"before_ctx": "<%> <-> internal static string invalid _ parameter _ direction { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ invalid _ parameter _ direction ( object direction ) -> internal static string invalid _ parameter _ direction ( object direction ) </%> <%> <-> internal static string keyword _ not _ supported { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ keyword _ not _ supported ( object keyword ) -> internal static string keyword _ not _ supported ( object keyword ) </%> ", "before_line": " internal static string missing _ parameters { get { return get _ string ( STR ) ; } }    internal static string format _ missing _ parameters ( object parameters ) ", "after_ctx": " <%> <-> internal static string format _ no _ data ( ) { return get _ string ( STR ) ; </%>", "after_line": "internal static string missing _ parameters ( object parameters )", "predictions": ["internal static string missing _ parameters { get { return get _ string ( STR ) ; internal <%> return string return _ name _ get ( object )"]}, {"before_ctx": "<%> <-> internal static string format _ open _ requires _ set _ connection _ string ( ) { return get _ string ( STR ) ; } </%> <%> <-> internal static string format _ parallel _ transactions _ not _ supported ( ) { return get _ string ( STR ) ; } </%> ", "before_line": " internal static string parameter _ not _ found { get { return get _ string ( STR ) ; } }    internal static string format _ parameter _ not _ found ( object parameter _ name ) ", "after_ctx": " <%> <*> internal static string requires _ set { get { return get _ string ( STR ) ; } } internal static string format _ requires _ set ( object property _ name ) -> internal static string requires _ set ( object property _ name ) </%>", "after_line": "internal static string parameter _ not _ found ( object parameter _ name )", "predictions": ["internal static string format _ parameter _ not _ found ( object parameter _ name )"]}, {"before_ctx": "<%> <-> internal static string format _ parallel _ transactions _ not _ supported ( ) { return get _ string ( STR ) ; } internal static string parameter _ not _ found { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ parameter _ not _ found ( object parameter _ name ) -> internal static string parameter _ not _ found ( object parameter _ name ) </%> ", "before_line": " internal static string requires _ set { get { return get _ string ( STR ) ; } }    internal static string format _ requires _ set ( object property _ name ) ", "after_ctx": " <%> <-> internal static string format _ transaction _ completed ( ) { return get _ string ( STR ) ; </%>", "after_line": "internal static string requires _ set ( object property _ name )", "predictions": ["internal static string format _ requires _ set ( object property _ name )"]}, {"before_ctx": "<%> <-> internal static string format _ transaction _ connection _ mismatch ( ) { return get _ string ( STR ) ; } </%> <%> <-> internal static string format _ transaction _ required ( ) { return get _ string ( STR ) ; } </%> ", "before_line": " internal static string unknown _ data _ type { get { return get _ string ( STR ) ; } }    internal static string format _ unknown _ data _ type ( object type _ name ) ", "after_ctx": " <%> <*> internal static string sqlite _ native _ error { get { return get _ string ( STR ) ; } } internal static string format _ sqlite _ native _ error ( object error _ code , object message ) -> internal static string sqlite _ native _ error ( object error _ code , object message ) </%>", "after_line": "internal static string unknown _ data _ type ( object type _ name )", "predictions": ["internal static string format _ unknown _ data _ type ( string type _ name )"]}, {"before_ctx": "<%> <-> internal static string format _ transaction _ required ( ) { return get _ string ( STR ) ; } internal static string unknown _ data _ type { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ unknown _ data _ type ( object type _ name ) -> internal static string unknown _ data _ type ( object type _ name ) </%> ", "before_line": " internal static string sqlite _ native _ error { get { return get _ string ( STR ) ; } }    internal static string format _ sqlite _ native _ error ( object error _ code , object message ) ", "after_ctx": " <%> <-> internal static string format _ default _ native _ error ( ) { return get _ string ( STR ) ; </%>", "after_line": "internal static string sqlite _ native _ error ( object error _ code , object message )", "predictions": ["internal static string format _ sqlite _ native _ error ( object error _ code , object supported )"]}, {"before_ctx": "<%> <-> internal static string sqlite _ native _ error { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ sqlite _ native _ error ( object error _ code , object message ) -> internal static string sqlite _ native _ error ( object error _ code , object message ) </%> <%> <-> internal static string format _ default _ native _ error ( ) { return get _ string ( STR ) ; } </%> ", "before_line": " internal static string ambiguous _ parameter _ name { get { return get _ string ( STR ) ; } }    internal static string format _ ambiguous _ parameter _ name ( object parameter _ name ) ", "after_ctx": " <%> <-> internal static string format _ already _ loaded ( ) { return get _ string ( STR ) ; </%>", "after_line": "internal static string ambiguous _ parameter _ name ( object parameter _ name )", "predictions": ["internal static string format _ ambiguous _ parameter _ name ( object parameter _ name )"]}, {"before_ctx": "<%> <-> internal static string ambiguous _ parameter _ name { get { return get _ string ( STR ) ; } } </%> <%> <*> internal static string format _ ambiguous _ parameter _ name ( object parameter _ name ) -> internal static string ambiguous _ parameter _ name ( object parameter _ name ) </%> <%> <-> internal static string format _ already _ loaded ( ) { return get _ string ( STR ) ; } </%> ", "before_line": " internal static string invalid _ enum _ value { get { return get _ string ( STR ) ; } }    internal static string format _ invalid _ enum _ value ( object enum _ type , object value ) ", "after_ctx": " <%> <+> ( object source _ type , object target _ type ) </%> <%> <*> get { return -> return string . format ( culture _ info . current _ culture , </%> <%> <+> , STR , STR ) , source _ type , target _ type </%> <%> <-> } </%>", "after_line": "internal static string invalid _ enum _ value ( object enum _ type , object value )", "predictions": ["internal string invalid _ enum _ value { get { return get _ string ( STR ) = <-> , configuration if _ return _ foreach _ <*> ( level cache _ STR internal invalid _ cache ( invalid _ cache ) internal invalid } )"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <+> assert _ sql ( @ STR from ( select distinct [ ] . * from [ level ] as [ ] left join ( select [ t ] . * </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <+> math . min ( </%> <%> <*> ; -> ? ? int . max _ value , max _ row _ count ) ; </%> ", "before_line": " if ( max _ batch _ size . has _ value & & max _ batch _ size . value < = modification _ commands . count ) ", "after_ctx": " ", "after_line": "if ( max _ batch _ size < = modification _ commands . count )", "predictions": ["if ( max _ batch _ size . value < = modification <%> string -> </%> </%> ( ( modification _ , string </%> </%> </%> _ , <%> ) )"]}, {"before_ctx": "<%> <*> using ( -> foreach ( var entity _ type _ with _ defining _ navigation in </%> <%> <*> convention -> get </%> <%> <*> dispatcher -> entity _ types ( type . name ) </%> <%> <*> start -> to </%> <%> <*> batch -> list </%> <%> <*> foreach -> if </%> <%> <-> var </%> <%> <-> in metadata </%> <%> <*> entity -> configuration </%> <%> <*> types -> source </%> <%> <-> type . name </%> <%> <*> . to -> ! = configuration </%> <%> <*> list ( ) -> source . explicit </%> ", "before_line": " if ( entity _ type _ with _ defining _ navigation . get _ configuration _ source ( ) ! = configuration _ source . explicit ) { remove _ entity _ type ( entity _ type _ with _ defining _ navigation , configuration _ source ) ; } ", "after_ctx": " <%> <-> return entity ( type , configuration _ source , throw _ on _ query ) ; </%> <%> <+> return entity ( type , configuration _ source , throw _ on _ query ) ; </%>", "after_line": "remove _ entity _ type ( entity _ type _ with _ defining _ navigation , configuration _ source ) ;", "predictions": ["remove _ entity _ type ( entity _ type _ with _ defining _ navigation , configuration _ source ) ;"]}, {"before_ctx": "<%> <*> using ( -> foreach ( var entity _ type _ with _ defining _ navigation in </%> <%> <*> convention -> get </%> <%> <*> dispatcher -> entity _ types ( clr _ type ) </%> <%> <*> start -> to </%> <%> <*> batch -> list </%> <%> <*> foreach -> if </%> <%> <-> var </%> <%> <-> in metadata </%> <%> <*> entity -> configuration </%> <%> <*> types -> source </%> <%> <-> clr _ type </%> <%> <*> . to -> ! = configuration </%> <%> <*> list ( ) -> source . explicit </%> ", "before_line": " if ( entity _ type _ with _ defining _ navigation . get _ configuration _ source ( ) ! = configuration _ source . explicit ) { remove _ entity _ type ( entity _ type _ with _ defining _ navigation , configuration _ source ) ; } ", "after_ctx": " <%> <-> return entity ( type , configuration _ source , throw _ on _ query ) ; </%> <%> <+> return entity ( type , configuration _ source , throw _ on _ query ) ; </%> <%> <-> else </%>", "after_line": "remove _ entity _ type ( entity _ type _ with _ defining _ navigation , configuration _ source ) ;", "predictions": ["remove _ entity _ type ( entity _ type _ with _ defining _ navigation , configuration _ invalid } ; }"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ internal ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tools _ core _ tests _ migrations _ design ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ design _ tests _ migrations _ design", "predictions": ["namespace microsoft _ entity _ framework _ core _ tools _ ->"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ design ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tools _ tests _ design ", "after_ctx": " <%> <*> log -> report </%>", "after_line": "namespace microsoft _ entity _ framework _ core _ design _ tests _ design", "predictions": ["namespace microsoft _ entity _ framework _ core _ tools _ n"]}, {"before_ctx": "<%> <*> command -> operation </%> <%> <*> logger -> reporter </%> <%> <*> command -> i </%> <%> <*> logger -> operation _ reporter </%> <%> <*> public in _ memory _ command _ logger ( string name , i _ test _ output _ helper output ) : base ( name ) -> public in _ memory _ operation _ reporter ( i _ test _ output _ helper output ) </%> ", "before_line": " public override bool is _ enabled ( log _ level log _ level ) = > true ; protected override void write _ error ( string message ) ", "after_ctx": " <%> <*> protected override -> public </%>", "after_line": "public void write _ error ( string message )", "predictions": ["public override bool write _ error ( string message )"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ design ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tools _ tests _ design ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ design _ tests _ design", "predictions": ["namespace microsoft _ entity _ framework _ core _ tools _ tests"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ query _ expression _ visitors _ internal ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tools _ core _ tests _ migrations _ design ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ design _ tests _ migrations _ design", "predictions": ["namespace microsoft _ entity _ framework _ migrations _ design"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ design _ test _ utilities ; </%> <%> <-> using microsoft _ extensions _ logging ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tools _ core _ tests _ design _ internal ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ design _ tests _ design _ internal", "predictions": ["namespace microsoft _ entity _ framework _ design _ internal"]}, {"before_ctx": "<%> <*> transaction -> resolver _ context </%> <%> <*> begin -> create </%> <%> <-> transaction ( </%> <%> <*> , -> ( </%> <%> <-> , store _ change </%> <%> <*> resolver -> validation </%> <%> <*> using ( var validation _ context = create _ context ( test _ database ) ) -> resolver ( resolver _ context , update _ exception ) ; if ( validator ! = null ) </%> ", "before_line": " resolver ( resolver _ context , update _ exception ) ; if ( validator ! = null ) { await context . save _ changes _ async ( ) ; validator ( validation _ context ) ; } transaction . rollback ( ) ; ", "after_ctx": " ", "after_line": "await context . save _ changes _ async ( ) ; validator ( validation _ context ) ;", "predictions": ["resolver ( resolver _ context , update _ exception ) ;"]}, {"before_ctx": " ", "before_line": " var last _ model = model _ snapshot ? . model ; var up _ operations = model _ differ . get _ differences ( last _ model , model ) ; ", "after_ctx": " <%> <*> last -> model </%> <%> <*> model -> snapshot </%>", "after_line": "var up _ operations = model _ differ . get _ differences ( model _ snapshot , model ) ;", "predictions": ["var up _ operations = model _ differ . get _ differences </@> count . <@> ( _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ </%> </%> </%> <%> string <%> <%> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ , string <%> string internal"]}, {"before_ctx": "<%> <+> _ line </%> <%> <*> curve -> string </%> <%> <*> i -> multi </%> <%> <*> multi -> line </%> <%> <*> curve -> string </%> <%> <*> i -> multi </%> <%> <*> multi -> line </%> <%> <*> curve -> string </%> <%> <+> _ line </%> <%> <*> curve -> string </%> ", "before_line": " if ( equals ( member . on _ interface ( typeof ( i _ multi _ curve ) ) , is _ closed ) ) ", "after_ctx": " ", "after_line": "if ( equals ( member , is _ closed ) )", "predictions": ["if ( equals ( typeof ( i _ multi _ curve ) public null , ;"]}, {"before_ctx": "<%> <-> i _ </%> ", "before_line": " if ( equals ( method . on _ interface ( typeof ( i _ geometry _ collection ) ) , item ) ) ", "after_ctx": " ", "after_line": "if ( equals ( method , item ) )", "predictions": ["if ( equals ( item ) , method . on _ _ using _ internal model _ _ ; core ( . name string string string string string string string string string string string string string string string string string <%> <*> with </%> with _ interface string string string string string string string string string string string string string string string string string string string string _ </%> internal </%> string string string string string string string string string string string string string string </%> </%> STR string string string string string string </%> internal _ geometry ( format"]}, {"before_ctx": "<%> <-> i _ </%> <%> <-> i _ </%> ", "before_line": " if ( equals ( method . on _ interface ( typeof ( i _ line _ string ) ) , get _ point _ n ) ) ", "after_ctx": " ", "after_line": "if ( equals ( method , get _ point _ n ) )", "predictions": ["if ( equals ( get _ interface ( typeof ( framework _ </@> _ string microsoft _ if <%> n string ( ) ( ) ( ) ( get ( ) ( foreach <%> -> line </%> typeof </%> </%> ( -> _ level _ ; ( return string ( ) _ format ( ) ( return string ( ) _ format ( ) ( return string ( ) _ format ( return string ( command _ command _ format ( ) ( ) ( ) ( object ( ) ( return string ( ) ( ( string ) ("]}, {"before_ctx": "<%> <-> using geo _ ap _ geometries ; </%> ", "before_line": " public i _ geometry geometry { get ; set ; } public i _ point point { get ; set ; } public point concrete _ point { get ; set ; } ", "after_ctx": " ", "after_line": "public geometry geometry { get ; set ; } public point point { get ; set ; }", "predictions": ["public i _ point point { get ; set ; }"]}, {"before_ctx": "<%> <*> geo -> net _ topology </%> <%> <*> ap -> suite </%> ", "before_line": " public i _ polygon polygon { get ; set ; } ", "after_ctx": " ", "after_line": "public polygon polygon { get ; set ; }", "predictions": ["public polygon polygon { get ; set ; }"]}, {"before_ctx": " ", "before_line": " get _ geometry _ type ( ) . get _ runtime _ method ( STR , new [ ] { typeof ( t _ geometry ) } ) , ", "after_ctx": " <%> <-> var geometry _ type = get _ geometry _ type ( ) ; </%>", "after_line": "typeof ( t _ geometry ) . get _ runtime _ method ( STR , new [ ] { typeof ( t _ geometry ) } ) ,", "predictions": ["get _ geometry _ type ( ) . get _ runtime _ <+> </%> </@> , , resolver resolver resolver get _ ) get _ ) entity </%> _ STR entity ) get _ runtime ;"]}, {"before_ctx": "<%> <*> geo -> net _ topology </%> <%> <*> ap -> suite </%> ", "before_line": " public i _ multi _ line _ string multi _ line _ string { get ; set ; } ", "after_ctx": " ", "after_line": "public multi _ line _ string multi _ line _ string { get ; set ; }", "predictions": ["public multi _ line _ string _ string multi _ framework _ <%> get last runtime ) <@> size max set _ get _ } parameter ( <-> ( get ( return name ) ) <-> ( ! ;"]}, {"before_ctx": "<%> <-> i _ </%> <%> <*> i -> nts </%> ", "before_line": " public override i _ geometry _ factory geometry _ factory ", "after_ctx": " ", "after_line": "public override geometry _ factory geometry _ factory", "predictions": ["public override i _ geometry _ ) ;"]}, {"before_ctx": "<%> <*> geo -> net _ topology </%> <%> <*> ap -> suite </%> ", "before_line": " public i _ line _ string line _ string { get ; set ; } ", "after_ctx": " ", "after_line": "public line _ string line _ string { get ; set ; }", "predictions": ["public line _ string line _ , { get ) { ) { _ configuration async = </@> . table ( <@> ( create . line <%> <%> return -> ( -> ( -> ( suite ( , service _ db ( <@> ( <@> ( <*> </%> <*> </%> _ operation <*> _ operation <-> _ operation <*> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation <-> _ operation"]}, {"before_ctx": "<%> <-> i _ </%> <%> <-> i _ </%> ", "before_line": " if ( equals ( method . on _ interface ( typeof ( i _ polygon ) ) , get _ interior _ ring _ n ) ) ", "after_ctx": " ", "after_line": "if ( equals ( method , get _ interior _ ring _ n ) )", "predictions": ["if ( equals ( get connection </@> _ ring connection ( typeof _ polygon using using , ) ( get . </@> ( create table return ) ( < ( _ null operation operation operation ( instance . on ( not _ public </%> <%> <%> _ <-> </%> </%> <%> i </%> _ <-> </%> ( core . ) ( core . ) ( ) ( core . ) ( core . ) ( core . ) ( core . ) ( core . ) ( core . ) ( core . ) ( core . ) ( core"]}, {"before_ctx": "<%> <+> _ line </%> <%> <*> curve -> string </%> <%> <*> i -> multi </%> <%> <*> multi -> line </%> <%> <*> curve -> string </%> <%> <*> i -> multi </%> <%> <*> multi -> line </%> <%> <*> curve -> string </%> <%> <+> _ line </%> <%> <*> curve -> string </%> ", "before_line": " if ( equals ( member . on _ interface ( typeof ( i _ multi _ curve ) ) , is _ closed ) ) ", "after_ctx": " ", "after_line": "if ( equals ( member , is _ closed ) )", "predictions": ["if ( equals ( typeof ( i _ multi _ curve ) ) , <+> type type type type type . return name"]}, {"before_ctx": " ", "before_line": " where 1 = 0 ", "after_ctx": " <%> <*> 1 -> 0 </%> <%> <*> 0 -> 1 </%>", "after_line": "where 0 = 1", "predictions": ["where 1 = 0"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> ( ( check _ constraint ) constraint ) . update _ configuration _ source ( configuration _ source . explicit ) ; </%> <%> <-> . model </%> <%> <-> , table _ name , schema </%> ", "before_line": " entity _ type . model . add _ check _ constraint ( sql , name , table _ name , schema ) ; ", "after_ctx": " ", "after_line": "entity _ type . add _ check _ constraint ( name , sql ) ;", "predictions": ["add _ check _ constraint ( sql , name , table _ name , . if </%> _ sql _ < ) </%>"]}, {"before_ctx": " ", "before_line": " using system _ collections ; ", "after_ctx": " <%> <-> using system _ collections _ immutable ; using system _ diagnostics ; </%> <%> <+> using system _ threading ; using system _ threading _ tasks ; </%> <%> <*> using microsoft _ data _ entity _ in _ memory _ metadata ; -> using microsoft _ data _ entity _ infrastructure ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ utilities ; </%> <%> <+> using microsoft _ data _ relational ; </%> ", "before_line": " public class add _ primary _ key _ operation : migration _ operation < primary _ key , drop _ primary _ key _ operation > ", "after_ctx": " <%> <+> schema _ qualified _ name </%> <%> <*> table -> _ name </%> <%> <*> public add _ primary _ key _ operation ( [ not _ null ] -> private readonly </%> <%> <*> , [ not _ null ] table table ) : base ( check . -> ; public add _ primary _ key _ operation ( schema _ qualified _ name table _ name , [ </%> <%> <*> ( -> ] </%> <%> <*> , STR ) -> primary _ key </%> <%> <*> check . not _ null ( table , STR ) ; table = table ; -> check . not _ null ( primary _ key , STR ) ; </%> <%> <+> table _ name = table _ name ; primary _ key = primary _ key ; </%>", "after_line": "public class add _ primary _ key _ operation : migration _ operation", "predictions": ["public class add _ primary _ key _ operation : migration _ operation < primary _ key , drop _ , _ type _ db func , , , , , , , , , } )"]}, {"before_ctx": "<%> <-> _ model </%> ", "before_line": " public class drop _ sequence _ operation : migration _ operation < sequence , create _ sequence _ operation > ", "after_ctx": " <%> <*> public drop -> private readonly schema _ qualified </%> <%> <+> name </%> <%> <*> operation ( [ not _ null ] sequence sequence ) : base -> name ; public drop _ sequence _ operation </%> <%> <*> check . not -> schema _ qualified </%> <%> <*> null ( -> name </%> <%> <*> , STR -> _ name </%> <%> <-> ) </%> <%> <+> sequence _ name = sequence _ name ; </%> <%> <*> override create -> virtual schema </%> <%> <+> qualified _ name </%> <%> <*> operation inverse -> name </%> <%> <*> get { return new create _ sequence _ operation ( target ) ; } -> get { return sequence _ name ; } </%>", "after_line": "public class drop _ sequence _ operation : migration _ operation", "predictions": ["public class drop _ sequence _ operation : migration _ operation"]}, {"before_ctx": "<%> <-> _ model </%> ", "before_line": " public class drop _ primary _ key _ operation : migration _ operation < primary _ key , add _ primary _ key _ operation > ", "after_ctx": " <%> <+> schema _ qualified _ name </%> <%> <*> table -> _ name </%> <%> <*> public drop _ -> private readonly string </%> <%> <*> operation ( [ not _ null ] primary _ key primary _ key , [ not _ null ] table table ) : base ( check . -> name ; public drop _ primary _ key _ operation ( schema _ qualified _ name table _ name , [ </%> <%> <*> ( -> ] string </%> <%> <*> , STR -> _ name </%> <%> <-> ) </%> <%> <*> check . not _ null ( table , STR ) ; table = table ; -> check . not _ empty ( primary _ key _ name , STR ) ; </%> <%> <+> table _ name = table _ name ; primary _ key _ name = primary _ key _ name ; </%>", "after_line": "public class drop _ primary _ key _ operation : migration _ operation", "predictions": ["public class drop _ primary _ key _ operation : migration _ operation < primary _ key , add _ table _ key _ operation </@> )"]}, {"before_ctx": " ", "before_line": " public class create _ table _ operation : migration _ operation < table , drop _ table _ operation > ", "after_ctx": " <%> <+> private readonly table table ; </%> <%> <-> : base ( check . not _ null ( table , STR ) ) </%> <%> <+> check . not _ null ( table , STR ) ; table = table ; </%> <%> <*> override drop _ -> virtual table </%> <%> <-> _ operation inverse </%>", "after_line": "public class create _ table _ operation : migration _ operation", "predictions": ["public class create _ table _ operation : migration _ operation"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ utilities ; </%> ", "before_line": " public class create _ sequence _ operation : migration _ operation < sequence , drop _ sequence _ operation > ", "after_ctx": " <%> <+> private readonly sequence sequence ; </%> <%> <-> : base ( check . not _ null ( sequence , STR ) ) </%> <%> <+> check . not _ null ( sequence , STR ) ; sequence = sequence ; </%> <%> <-> public override void generate _ operation _ sql ( migration _ operation _ sql _ generator migration _ operation _ sql _ generator , </%>", "after_line": "public class create _ sequence _ operation : migration _ operation", "predictions": ["public class create _ sequence _ operation : migration _ operation"]}, {"before_ctx": "<%> <-> _ model </%> ", "before_line": " public class drop _ table _ operation : migration _ operation < table , create _ table _ operation > ", "after_ctx": " <%> <*> public drop -> private readonly schema _ qualified </%> <%> <+> name </%> <%> <*> operation ( [ not _ null ] table table ) : base -> name ; public drop _ table _ operation </%> <%> <*> check . not -> schema _ qualified </%> <%> <*> null ( -> name </%> <%> <*> , STR -> _ name </%> <%> <-> ) </%> <%> <+> table _ name = table _ name ; </%> <%> <*> override create -> virtual schema </%> <%> <+> qualified _ name </%> <%> <*> operation inverse -> name </%> <%> <*> get { return new create _ table _ operation ( target ) ; } -> get { return table _ name ; } </%>", "after_line": "public class drop _ table _ operation : migration _ operation", "predictions": ["public class drop _ table _ operation : migration _ operation"]}, {"before_ctx": "<%> <+> get { return ( redis _ connection ) base . connection ; } } </%> <%> <-> ( ( redis _ connection ) configuration . </%> <%> <-> ) </%> ", "before_line": " . get _ server ( ( ( redis _ connection ) configuration . connection ) . connection _ string ) ; ", "after_ctx": " ", "after_line": ". get _ server ( connection . connection _ string ) ;", "predictions": [". get _ server ( _ _ configuration connection connection connection connection connection connection . ( table </%> </%> </%> ) value ) name"]}, {"before_ctx": " ", "before_line": " var connection = ( redis _ connection ) configuration . connection ; get _ underlying _ server ( ) . flush _ database ( connection . database ) ; ", "after_ctx": " <%> <-> var connection = ( redis _ connection ) configuration . connection ; </%>", "after_line": "get _ underlying _ server ( ) . flush _ database ( connection . database ) ;", "predictions": ["var connection = ( redis ( logger value _ . . . . . value ; <-> value ;"]}, {"before_ctx": "<%> <-> var connection = ( redis _ connection ) configuration . connection ; </%> ", "before_line": " var connection = ( redis _ connection ) configuration . connection ; await get _ underlying _ server ( ) . flush _ database _ async ( connection . database ) . with _ current _ culture ( ) ; ", "after_ctx": " ", "after_line": "await get _ underlying _ server ( ) . flush _ database _ async ( connection . database ) . with _ current _ culture ( ) ;", "predictions": ["await get _ underlying _ metadata using system <%> </%> </%> <%> </%> </%> . connection <%> . 0 ( <%> </%> ) ( <%> <%> ) </%> </%> <%> </%> </%> ) </%>"]}, {"before_ctx": " ", "before_line": " relational _ data _ store _ creator . create _ tables ( configuration . model ) ; ", "after_ctx": " <%> <-> configuration . </%>", "after_line": "relational _ data _ store _ creator . create _ tables ( model ) ;", "predictions": ["create _ tables ( configuration ) ,"]}, {"before_ctx": "<%> <-> configuration . </%> ", "before_line": " return relational _ data _ store _ creator . create _ tables _ async ( configuration . model , cancellation _ token ) ; ", "after_ctx": " ", "after_line": "return relational _ data _ store _ creator . create _ tables _ async ( model , cancellation _ token ) ;", "predictions": ["return relational _ data _ } _ public -> net _ tables _ get . </@> </%> , 0 . sql ) <->"]}, {"before_ctx": " ", "before_line": " = ' ' ( size = NUM ) = ' ' ( size = NUM ) = ' ' ( size = NUM ) ( db _ type = string ) = ' ' ( size = NUM ) ( db _ type = string ) ", "after_ctx": " <%> <+> ( db _ type = string ) </%> <%> <+> ( db _ type = string ) </%> <%> <*> db _ type -> size </%> <%> <*> string -> NUM </%> <%> <*> db _ type -> size </%> <%> <*> int -> NUM </%> <%> <*> int -> string </%> <%> <+> = ' ' ( db _ type = int ) </%>", "after_line": "= ' ' ( db _ type = string ) = ' ' ( db _ type = string ) = ' ' ( size = NUM ) = ' ' ( size = NUM )", "predictions": ["= ' ' ( size = NUM ) = ' ' ( size = ( ( ( ( ( ( ) ) ( create _ < instance ) ) ) _ . _ service _ name _ ; ;"]}, {"before_ctx": "<%> <+> STR ) ; var verbose = scaffold . option ( STR , STR ) ; </%> ", "before_line": " logger . value . log _ error ( STR , connection . name ) ; ", "after_ctx": " <%> <-> logger . value . </%> <%> <*> await -> return await create _ executor ( environment . value ( ) , verbose . has _ value ( ) ) . </%>", "after_line": "log _ error ( STR , connection . name ) ;", "predictions": ["logger . value . log _ error ( STR , connection ) ;"]}, {"before_ctx": "<%> <-> logger . value . </%> ", "before_line": " logger . value . log _ error ( STR , provider . name ) ; ", "after_ctx": " <%> <*> await -> return await create _ executor ( environment . value ( ) , verbose . has _ value ( ) ) . </%>", "after_line": "log _ error ( STR , provider . name ) ;", "predictions": ["logger . value . log _ string ) get _ string ) get _ add , error <%> <+> <+> -> -> _ <*> </%> operation operation _ ) _ ) factory _ ) _ log = name _ table <+> <+> </%> <+> return <*> ( STR ( STR _ core ( provider ( STR <%> table ) ) <%> public public <%> ) _ </%> _ -> _ public <%> table <%> public <%> <%> <%> <%> <%> <%> <%> <%> -> <%> <%> <%> <%> table <%> <%> <%> <%> public public table key -> <%> <%>"]}, {"before_ctx": "<%> <+> STR ) ; var verbose = add . option ( STR , STR ) ; </%> ", "before_line": " logger . value . log _ error ( STR , name . name ) ; ", "after_ctx": " <%> <*> add _ migration ( name . value , context . value ( ) ) ; return 0 ; -> return create _ executor ( environment . value ( ) , verbose . has _ value ( ) ) . add _ migration ( </%> <%> <+> name . value , context . value ( ) ) ; </%>", "after_line": "log _ error ( STR , name . name ) ;", "predictions": ["logger . value . log _ error ( STR , name ) ;"]}, {"before_ctx": "<%> <+> STR ) ; var verbose = script . option ( STR , STR ) ; </%> ", "before_line": " logger . value . log _ error ( STR , from . name ) ; ", "after_ctx": " <%> <+> return create _ executor ( environment . value ( ) , verbose . has _ value ( ) ) . </%> <%> <-> return 0 ; </%>", "after_line": "log _ error ( STR , from . name ) ;", "predictions": ["logger . value . log _ error ( STR , from . name ) </%>"]}, {"before_ctx": "<%> <-> using system _ component _ model _ data _ annotations _ schema ; using system _ data _ common ; using system _ linq ; using system _ reflection ; </%> <%> <-> using microsoft _ entity _ framework _ core _ storage _ converters ; </%> ", "before_line": " public abstract class relational _ type _ mapper : core _ type _ mapper , i _ relational _ type _ mapper ", "after_ctx": " <%> <-> private static readonly i _ read _ only _ dictionary < string , func < type , relational _ type _ mapping > > empty _ named _ mappings = new dictionary < string , func < type , relational _ type _ mapping > > ( ) ; private static readonly method _ info get _ field _ value _ method = typeof ( db _ data _ reader ) . get _ type _ info ( ) . get _ declared _ method ( nameof ( db _ data _ reader . get _ field _ value ) ) ; private static readonly i _ dictionary < type , method _ info > get _ x _ methods = new dictionary < type , method _ info > { { typeof ( bool ) , typeof ( db _ data _ reader ) . get _ type _ info ( ) . get _ declared _ method ( nameof ( db _ data _ reader . get _ boolean ) ) } , { typeof ( byte ) , typeof ( db _ data _ reader ) . get _ type _ info ( ) . get _ declared _ method ( nameof ( db _ data _ reader . get _ byte ) ) } , </%>", "after_line": "public abstract class relational _ type _ mapper : i _ relational _ type _ mapper", "predictions": ["public abstract class relational _ type _ mapper : i _ relational _ type _ mapper"]}, {"before_ctx": "<%> <+> = > new fallback _ relational _ core _ type _ mapper ( test _ service _ factory . instance . create < core _ type _ mapper _ dependencies > ( ) , test _ service _ factory . instance . create < relational _ type _ mapper _ dependencies > ( ) , test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) ) ; public static relational _ type _ mapping get _ mapping ( type type ) = > create _ type _ mapper ( ) . find _ mapping ( type ) ; </%> ", "before_line": " var literal = test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; ", "after_ctx": " <%> <-> test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . </%>", "after_line": "var literal = get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ;", "predictions": ["var literal = test _ service _ factory . instance . create < sqlite _ type _ mapper > ( </%> _ <*> _ -> name name name name </%> model <%> model name not _ ) not _ ) reader reader reader reader ;"]}, {"before_ctx": "<%> <+> = > create _ type _ mapper ( ) . find _ mapping ( type ) ; </%> <%> <-> test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . </%> ", "before_line": " var literal = test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time _ offset ) ) . generate _ sql _ literal ( value ) ; ", "after_ctx": " <%> <-> test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . </%>", "after_line": "var literal = get _ mapping ( typeof ( date _ time _ offset ) ) . generate _ sql _ literal ( value ) ;", "predictions": ["var literal = test _ service _ factory . instance . create < sqlite _ name _ operation -> -> < < public _ name -> > ) _ <@> _ <-> </%> STR ; _ date _ <%> ( <@> </%> </%> </%> </%> </%> ) . data <%> <%> _ STR . ;"]}, {"before_ctx": "<%> <-> test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . </%> ", "before_line": " var literal = test _ service _ factory . instance . create < sqlite _ type _ mapper > ( ) . get _ mapping ( typeof ( guid ) ) . generate _ sql _ literal ( value ) ; ", "after_ctx": " ", "after_line": "var literal = get _ mapping ( typeof ( guid ) ) . generate _ sql _ literal ( value ) ;", "predictions": ["var literal = test _ service _ factory . instance . create < sqlite . type _ </%> > ( ) . . = typeof </%> <%> <%> </@> <%> </@> operation <%> ; ; ; ; ; ; ; = <@> . < create type operation _ not _ ; > _ not _ <+> </%> microsoft </%> : value key null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null"]}, {"before_ctx": " ", "before_line": " private readonly dictionary < string , i _ list < relational _ type _ mapping > > store _ type _ mappings ; ", "after_ctx": " <%> <-> core _ type _ mapper _ dependencies core _ dependencies , </%> <%> <-> core _ dependencies , </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%>", "after_line": "private readonly dictionary < string , relational _ type _ mapping > store _ type _ mappings ;", "predictions": ["private readonly dictionary < string , relational _ type _ 0 + store i i i < _ <*> _ mapping if ] -> _ <*> _ mappings <%>"]}, {"before_ctx": "<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> core _ type _ mapper _ dependencies core _ dependencies , </%> <%> <-> core _ dependencies , </%> ", "before_line": " = new dictionary < string , i _ list < relational _ type _ mapping > > ( string _ comparer . ordinal _ ignore _ case ) ", "after_ctx": " <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%>", "after_line": "= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case )", "predictions": ["= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case )"]}, {"before_ctx": " ", "before_line": " private readonly dictionary < string , i _ list < relational _ type _ mapping > > store _ type _ mappings ; ", "after_ctx": " <%> <*> public sqlite _ type _ mapper ( not _ null core _ type _ mapper _ dependencies core _ dependencies , not _ null relational _ type _ mapper _ dependencies dependencies ) : base ( core _ dependencies , dependencies ) -> public sqlite _ type _ mapper ( [ not _ null ] relational _ type _ mapper _ dependencies dependencies ) </%> <%> <+> : base ( dependencies ) </%> <%> <-> i _ list < </%> <%> <-> > </%>", "after_line": "private readonly dictionary < string , relational _ type _ mapping > store _ type _ mappings ;", "predictions": ["private readonly dictionary < string , i _ list < relational _ type _ mapping > > store _ type _ mappings ;"]}, {"before_ctx": "<%> <-> i _ list < </%> <%> <-> > </%> <%> <*> public sqlite _ type _ mapper ( not _ null core _ type _ mapper _ dependencies core _ dependencies , not _ null relational _ type _ mapper _ dependencies dependencies ) : base ( core _ dependencies , dependencies ) -> public sqlite _ type _ mapper ( [ not _ null ] relational _ type _ mapper _ dependencies dependencies ) </%> <%> <+> : base ( dependencies ) </%> ", "before_line": " = new dictionary < string , i _ list < relational _ type _ mapping > > ( string _ comparer . ordinal _ ignore _ case ) ; ", "after_ctx": " ", "after_line": "= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case ) ;", "predictions": ["= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case ) ;"]}, {"before_ctx": "<%> <*> short -> long </%> ", "before_line": " private readonly i _ read _ only _ dictionary < string , i _ list < relational _ type _ mapping > > simple _ name _ mappings = new dictionary < string , i _ list < relational _ type _ mapping > > ", "after_ctx": " <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> _ multiple </%>", "after_line": "private readonly i _ read _ only _ dictionary < string , relational _ type _ mapping > simple _ name _ mappings = new dictionary < string , relational _ type _ mapping >", "predictions": ["private readonly i _ read _ only _ dictionary < string , i _ list < [ [ [ [ [ [ -> _ ] new new new string _ type _ mapping builder builder readonly _ name _ create STR STR"]}, {"before_ctx": " ", "before_line": " private readonly dictionary < string , i _ list < relational _ type _ mapping > > store _ type _ mappings ; ", "after_ctx": " <%> <-> core _ type _ mapper _ dependencies core _ dependencies , </%> <%> <-> core _ dependencies , </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> { </%>", "after_line": "private readonly dictionary < string , relational _ type _ mapping > store _ type _ mappings ;", "predictions": ["private readonly dictionary < string , i _ list < <@> = <@> > = <@> _ </@> > _ type _ </@> > type _ { _ <*> ,"]}, {"before_ctx": "<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> core _ type _ mapper _ dependencies core _ dependencies , </%> <%> <-> core _ dependencies , </%> ", "before_line": " = new dictionary < string , i _ list < relational _ type _ mapping > > ( string _ comparer . ordinal _ ignore _ case ) ", "after_ctx": " <%> <-> { STR , new list < relational _ type _ mapping > { variable _ length _ unicode _ string } } , { STR , new list < relational _ type _ mapping > { </%>", "after_line": "= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case )", "predictions": ["= new dictionary < string , relational _ type _ mapping > ( string _ comparer = { { { { { { { { : : : <@> name _ </@> _ not public public public <+> type , : : : ;"]}, {"before_ctx": "<%> <-> core _ dependencies , </%> ", "before_line": " private readonly i _ read _ only _ dictionary < string , i _ list < relational _ type _ mapping > > simple _ name _ mappings = new dictionary < string , i _ list < relational _ type _ mapping > > ", "after_ctx": " <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> new list < relational _ type _ mapping > { </%> <%> <-> } </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> _ multiple </%>", "after_line": "private readonly i _ read _ only _ dictionary < string , relational _ type _ mapping > simple _ name _ mappings = new dictionary < string , relational _ type _ mapping >", "predictions": ["private readonly i _ read _ only _ dictionary < string , i _ list < relational _ type _ mapping > > simple _ </@> _ <*> -> context . model model type"]}, {"before_ctx": "<%> <+> public static relational _ type _ mapping get _ mapping ( type type ) = > ( relational _ type _ mapping ) new fallback _ relational _ core _ type _ mapper ( test _ service _ factory . instance . create < core _ type _ mapper _ dependencies > ( ) , test _ service _ factory . instance . create < relational _ type _ mapper _ dependencies > ( ) , test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) ) . find _ mapping ( type ) ; </%> ", "before_line": " var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( byte [ ] ) ) . generate _ sql _ literal ( value ) ; ", "after_ctx": " <%> <*> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; -> var literal = get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; </%>", "after_line": "var literal = get _ mapping ( typeof ( byte [ ] ) ) . generate _ sql _ literal ( value ) ;", "predictions": ["var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ < , typeof , binary <-> base > string literal _ } _ literal , ;"]}, {"before_ctx": "<%> <+> . find _ mapping ( type ) ; </%> <%> <*> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( byte [ ] ) ) . generate _ sql _ literal ( value ) ; -> var literal = get _ mapping ( typeof ( byte [ ] ) ) . generate _ sql _ literal ( value ) ; </%> ", "before_line": " var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; ", "after_ctx": " <%> <*> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time _ offset ) ) . generate _ sql _ literal ( value ) ; -> var literal = get _ mapping ( typeof ( date _ time _ offset ) ) . generate _ sql _ literal ( value ) ; </%>", "after_line": "var literal = get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ;", "predictions": ["var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ type ( create ( get _ value . = . </%> . create _ server _ type ( factory ) ) . sql . sql _ sql _ type ( factory ) ) >"]}, {"before_ctx": "<%> <*> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; -> var literal = get _ mapping ( typeof ( date _ time ) ) . generate _ sql _ literal ( value ) ; </%> ", "before_line": " var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( typeof ( date _ time _ offset ) ) . generate _ sql _ literal ( value ) ; ", "after_ctx": " <%> <*> var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ mapping ( STR ) . generate _ sql _ literal ( STR ) ; -> var mapping = new fallback _ relational _ core _ type _ mapper ( </%> <%> <+> test _ service _ factory . instance . create < core _ type _ mapper _ dependencies > ( ) , test _ service _ factory . instance . create < relational _ type _ mapper _ dependencies > ( ) , </%>", "after_line": "var literal = get _ mapping ( typeof ( date _ time _ offset ) ) . generate _ sql _ literal ( value ) ;", "predictions": ["var literal = test _ service _ factory . instance . create < sql _ server _ type _ mapper > ( ) . get _ service ( <%> ( value _ , _ offset . instance . create < . generate _ var _ literal _ { core > , core > core > _ < _ literal , core > server server _ list _ literal , core > server _ list _ literal , core > server _ list _ literal , core > server _ list _ literal , core > server _ list _ literal"]}, {"before_ctx": "<%> <-> private readonly relational _ type _ mapping sql _ variant = new sql _ server _ sql _ variant _ type _ mapping ( STR ) ; </%> <%> <*> private readonly i _ read _ only _ dictionary < string , func < type , relational _ type _ mapping > > named _ clr _ mappings = new dictionary < string , func < type , relational _ type _ mapping > > ( string _ comparer . ordinal ) { { STR , t = > new sql _ server _ udt _ type _ mapping ( STR , t ) } , { STR , t = > new sql _ server _ udt _ type _ mapping ( STR , t ) } , { STR , t = > new sql _ server _ udt _ type _ mapping ( STR , t ) } } ; private readonly dictionary < string , i _ list < relational _ type _ mapping > > store _ type _ mappings ; -> private readonly dictionary < string , relational _ type _ mapping > store _ type _ mappings ; </%> <%> <*> public sql _ server _ type _ mapper ( not _ null core _ type _ mapper _ dependencies core _ dependencies , not _ null relational _ type _ mapper _ dependencies dependencies ) : base ( core _ dependencies , dependencies ) -> public sql _ server _ type _ mapper ( [ not _ null ] relational _ type _ mapper _ dependencies dependencies ) </%> <%> <+> : base ( dependencies ) </%> ", "before_line": " = new dictionary < string , i _ list < relational _ type _ mapping > > ( string _ comparer . ordinal _ ignore _ case ) ", "after_ctx": " <%> <-> { STR , new list < relational _ type _ mapping > { long } } , { STR , new list < relational _ type _ mapping > { variable _ length _ binary } } , { STR , new list < relational _ type _ mapping > { fixed _ length _ binary } } , { STR , new list < relational _ type _ mapping > { bool } } , { STR , new list < relational _ type _ mapping > { variable _ length _ ansi _ string } } , { STR , new list < relational _ type _ mapping > { fixed _ length _ ansi _ string } } , { STR , new list < relational _ type _ mapping > { variable _ length _ ansi _ string } } , { STR , new list < relational _ type _ mapping > { fixed _ length _ ansi _ string } } , { STR , new list < relational _ type _ mapping > { date } } , </%>", "after_line": "= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case )", "predictions": ["= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case )"]}, {"before_ctx": " ", "before_line": " new point _ entity ( ) ", "after_ctx": " <%> <-> , </%> <%> <-> ( ) </%>", "after_line": "new point _ entity", "predictions": ["new point _ entity"]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> , </%> ", "before_line": " new polygon _ entity ( ) ", "after_ctx": " ", "after_line": "new polygon _ entity", "predictions": ["new polygon _ entity"]}, {"before_ctx": " ", "before_line": " new a _ few _ bytes ( ) ", "after_ctx": " <%> <-> , </%> <%> <-> ( ) </%> <%> <-> , </%>", "after_line": "new a _ few _ bytes", "predictions": ["new a _ few _ bytes"]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> , </%> ", "before_line": " new a _ few _ bytes ( ) ", "after_ctx": " <%> <-> , </%>", "after_line": "new a _ few _ bytes", "predictions": ["new a _ few _ bytes"]}, {"before_ctx": "<%> <*> benchmark sql _ server _ required public void run ( i _ metric _ collector collector ) -> public void run ( ) </%> <%> <*> using -> for </%> <%> <*> collector . start _ collection ( ) -> var i = 0 ; i < NUM ; i + + </%> ", "before_line": " for ( var i = 0 ; i < NUM ; i + + ) { query . load ( ) ; } ", "after_ctx": " ", "after_line": "query . load ( ) ;", "predictions": ["query . load ( ) ;"]}, {"before_ctx": " ", "before_line": " public virtual bool on _ foreign _ key _ uniqueness _ changed ( [ not _ null ] internal _ relationship _ builder relationship _ builder ) ", "after_ctx": " <%> <+> relationship _ builder = uniqueness _ convention . apply ( relationship _ builder ) ; </%> <%> <*> if ( ! uniqueness _ convention . apply -> if </%> <%> <*> ) -> = = null </%> <%> <*> return false -> break </%> <%> <*> true -> relationship _ builder </%>", "after_line": "public virtual internal _ relationship _ builder on _ foreign _ key _ uniqueness _ changed ( [ not _ null ] internal _ relationship _ builder relationship _ builder )", "predictions": ["public virtual bool on _ foreign _ key _ uniqueness _ changed ( internal _ relationship _ <%> <-> _ <%> type type _ <%> ) _ new dictionary _ b _ entity _ set _ </@> core create _ b nameof nameof = , b _ ) _ ( core _ core ) _ new ) _ </%> ) _ entry </%> </%> _ ) </%>"]}, {"before_ctx": "<%> <*> var convention _ set = new core _ convention _ set _ builder ( context . get _ service < core _ convention _ set _ builder _ dependencies > ( ) ) . create _ convention _ set ( loggers ) ; convention _ set = convention _ set _ builder = = null ? convention _ set : convention _ set _ builder . add _ conventions ( convention _ set ) ; -> var convention _ set = convention _ set _ builder . create _ convention _ set ( ) ; </%> ", "before_line": " = > new composite _ convention _ set _ builder ( context . get _ service < i _ enumerable < i _ convention _ set _ builder > > ( ) . to _ list ( ) ) ; ", "after_ctx": " ", "after_line": "= > context . get _ service < i _ convention _ set _ builder > ( ) ;", "predictions": ["= > new composite _ convention _ set _ builder ( context . get _ service < i _ enumerable < i _ convention _ <-> _ > new new -> _ ? entry ) . add _ ? entry ) </%>"]}, {"before_ctx": " ", "before_line": " var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; ", "after_ctx": " <%> <+> ) . has _ column _ name ( nameof ( a . ) </%> <%> <+> model _ builder . entity < b > ( ) . property ( a = > a . ) . has _ column _ name ( nameof ( a . ) ) ; </%>", "after_line": "var model _ builder = new model _ builder ( create _ convention _ set ( ) ) ;", "predictions": ["var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ core _ <@> <%> ) ) column _ <%> name column column ) column column ) column context context {"]}, {"before_ctx": " ", "before_line": " var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; ", "after_ctx": " <%> <-> new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . </%>", "after_line": "var model _ builder = new model _ builder ( create _ convention _ set ( ) ) ;", "predictions": ["var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( <-> < <-> _ i _ type _ dependencies <%> <-> <-> <-> <+> _ dependencies ( ) ) ) <-> <-> <-> <-> _ type _ type ( entry collection , ( ) , ( ) , ) ) var ) var var create _ ; _ set ( ) var var var var var var var var var var create ( ) var ) var date _ sql"]}, {"before_ctx": "<%> <-> new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . </%> ", "before_line": " var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; ", "after_ctx": " <%> <-> new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . </%>", "after_line": "var model _ builder = new model _ builder ( create _ convention _ set ( ) ) ;", "predictions": ["var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ , _ </%> ( , ( ) , ( ) , ( ) , ( ) , , ) ) <%> typeof date _ sql _ set ( ) ) <%>"]}, {"before_ctx": "<%> <-> new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . </%> ", "before_line": " var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; ", "after_ctx": " <%> <+> ) . has _ column _ name ( STR </%>", "after_line": "var model _ builder = new model _ builder ( create _ convention _ set ( ) ) ;", "predictions": ["var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ new _ <%> ( set set _ < _ > ( set ( ( set set set ) ) collection = entry collection = entry ( entry _ <*> _ -> _ dependencies ( , . create _ = _ mapper _ < < . . > _ = _ < ( . core _ < ( . core _ < ( . core _ < ( . core _ < ( . core"]}, {"before_ctx": " ", "before_line": " var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; ", "after_ctx": " <%> <+> ) . has _ column _ name ( STR </%>", "after_line": "var model _ builder = new model _ builder ( create _ convention _ set ( ) ) ;", "predictions": ["var model _ builder = new model _ builder ( </%> > _ < _ type i ; load i i i i i i _ , _ ] <%> new -> _ not _ > ( new ( type type type type ) . create <%> . nameof _ . _ = ( : ( builder _ <%> _ type _ mapper <%> <-> <%> <-> > collection collection collection collection collection collection </%> entry , entry , entry , , , , , , , , , , ( collection _ ) _ ; _ . ( ,"]}, {"before_ctx": "<%> <+> ) . has _ column _ name ( STR </%> ", "before_line": " var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ mapper ( new core _ type _ mapper _ dependencies ( ) ) ) ) . create _ convention _ set ( ) ) ; ", "after_ctx": " <%> <+> ) . has _ column _ name ( nameof ( a . ) </%> <%> <+> model _ builder . entity < b > ( ) . property ( a = > a . ) . has _ column _ name ( nameof ( a . ) ) ; </%>", "after_line": "var model _ builder = new model _ builder ( create _ convention _ set ( ) ) ;", "predictions": ["var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ convention _ set _ core _ create _ . _ . <%> _ = _ </@> <%> > <-> <-> <-> _ = , collection ( collection ( , to _ or _ if _ = ( ) ) . -> _ factory _ test ( ) ) ) = date _ factory = </%> ) = ;"]}, {"before_ctx": "<%> <*> completed _ async _ enumerator -> enumerator < t > </%> <%> <*> object [ ] -> t </%> <%> <*> object [ ] -> t </%> <%> <-> completed _ async _ </%> <%> <*> object [ ] -> t </%> ", "before_line": " return task . from _ result ( enumerator . move _ next ( ) ) ; ", "after_ctx": " <%> <*> public object [ ] current -> public bool move _ next ( ) </%> <%> <+> { return enumerator . move _ next ( ) ; } public void reset ( ) { enumerator . reset ( ) ; } </%>", "after_line": "return task . from _ result ( move _ next ( ) ) ;", "predictions": ["return enumerator . move _ next ( ) ;"]}, {"before_ctx": "<%> <-> if ( value = = null ) { var removed = metadata . remove _ annotation ( name ) ; debug . assert ( removed = = existing _ annotation ) ; } else { </%> <%> <-> } </%> ", "before_line": " if ( value ! = null ) { metadata . add _ annotation ( name , value , configuration _ source ) ; } ", "after_ctx": " ", "after_line": "metadata . add _ annotation ( name , value , configuration _ source ) ;", "predictions": ["metadata . add _ annotation ( name , value , name new name ) core builder"]}, {"before_ctx": "<%> <-> var collection _ accessor = inverse . is _ collection ( ) ? inverse . get _ collection _ accessor ( ) : null ; </%> ", "before_line": " set _ reference _ or _ add _ to _ collection ( new _ target _ entry , inverse , collection _ accessor , entry . entity ) ; ", "after_ctx": " <%> <*> if ( old _ target _ entry ! = null ) { if ( collection _ accessor ! = null ) { remove _ from _ collection ( old _ target _ entry , inverse , collection _ accessor , entry . entity ) ; } else if ( reference _ equals ( -> if ( old _ target _ entry ! = null & & </%> <%> <*> [ inverse ] , entry . -> . entity _ state ! = </%> <%> <*> ) -> _ state . deleted </%> <%> <*> set -> reset _ reference _ or _ remove </%> <%> <*> navigation -> collection </%> <%> <*> null -> entry </%>", "after_line": "set _ reference _ or _ add _ to _ collection ( new _ target _ entry , inverse , entry ) ;", "predictions": ["set _ reference _ or _ add _ to _ collection ( new _ target _ entry , inverse , collection _ accessor , entry ) <%>"]}, {"before_ctx": "<%> <*> collection -> new </%> <%> <*> accessor , new -> target </%> <%> <*> value -> entry </%> ", "before_line": " set _ navigation ( new _ target _ entry , inverse , entry . entity ) ; ", "after_ctx": " ", "after_line": "set _ navigation ( new _ target _ entry , inverse , entry ) ;", "predictions": ["set _ navigation ( new _ target _ entry , inverse _ > > ;"]}, {"before_ctx": "<%> <-> var collection _ accessor = principal _ to _ dependent . is _ collection ( ) & & ! principal _ to _ dependent . is _ shadow _ property ? principal _ to _ dependent . get _ collection _ accessor ( ) : null ; </%> <%> <*> if ( collection _ accessor ! = null ) { remove _ from _ collection ( old _ principal _ entry , principal _ to _ dependent , collection _ accessor , entry . entity ) ; } else if ( reference _ equals ( old _ principal _ entry [ principal _ to _ dependent ] , entry . entity ) ) { set _ navigation ( old _ principal _ entry , principal _ to _ dependent , null ) ; } -> reset _ reference _ or _ remove _ collection ( old _ principal _ entry , principal _ to _ dependent , entry ) ; </%> ", "before_line": " set _ reference _ or _ add _ to _ collection ( new _ principal _ entry , principal _ to _ dependent , collection _ accessor , entry . entity ) ; ", "after_ctx": " ", "after_line": "set _ reference _ or _ add _ to _ collection ( new _ principal _ entry , principal _ to _ dependent , entry ) ;", "predictions": ["set _ reference _ or _ add _ to _ collection ( new _ principal _ entry , principal _ to _ dependent , entry . _ to ) get _ < _ or . var ) get _ < _ to . var ) _ assembly ) >"]}, {"before_ctx": "<%> <-> var collection _ accessor = principal _ to _ dependent . is _ collection ( ) ? principal _ to _ dependent . get _ collection _ accessor ( ) : null ; </%> ", "before_line": " set _ reference _ or _ add _ to _ collection ( entry , principal _ to _ dependent , collection _ accessor , dependent _ entry . entity ) ; ", "after_ctx": " <%> <-> . entity </%>", "after_line": "set _ reference _ or _ add _ to _ collection ( entry , principal _ to _ dependent , dependent _ entry ) ;", "predictions": ["set _ reference _ or _ <-> _ ) _ size ) <+> _ . member -> , ( ( call _ ; expression ( ( ( ( expression expression ( ( ] [ <%> ) ) [ to ) ) [ to ) ) [ to ) ) [ ) </%> </%> </%> </%> ( ) </%> , <-> ( ) </%> </%> </%> </%> ) </%> ) = ) </%> ) = ) = ) = ) = ) = ) = ) = ) = ) = ) ="]}, {"before_ctx": "<%> <-> , collection _ accessor </%> <%> <-> . entity </%> ", "before_line": " set _ navigation ( dependent _ entry , dependent _ to _ principal , entry . entity ) ; ", "after_ctx": " ", "after_line": "set _ navigation ( dependent _ entry , dependent _ to _ principal , entry ) ;", "predictions": ["set _ navigation ( dependent _ </%> ( microsoft _ principal <%> collection [ </@> data <%> <*> <+> <+> <-> <+> ) expression expression ) expression"]}, {"before_ctx": " ", "before_line": " set _ navigation ( entry , principal _ to _ dependent , dependent _ entry . entity ) ; set _ navigation ( dependent _ entry , dependent _ to _ principal , entry . entity ) ; ", "after_ctx": " <%> <-> var collection _ accessor = principal _ to _ dependent ? . is _ shadow _ property ? ? true ? null : principal _ to _ dependent . get _ collection _ accessor ( ) ; </%> <%> <-> var dependent _ entity = dependent _ entry . entity ; if ( collection _ accessor ! = null ) </%>", "after_line": "set _ navigation ( entry , principal _ to _ dependent , dependent _ entry ) ; set _ navigation ( dependent _ entry , dependent _ to _ principal , entry ) ;", "predictions": ["set _ navigation ( entry , <+> ; ( <%> . [ _ expression , , [ id , , [ STR , ) . </%> , ) ( ] , ) >"]}, {"before_ctx": "<%> <-> ( </%> <%> <*> = = -> . equals ( </%> ", "before_line": " & & ( ( ( method _ call _ expression . arguments [ 0 ] as constant _ expression ) ? . value as array ) ? . length = = 0 ) ) ", "after_ctx": " ", "after_line": "& & ( ( method _ call _ expression . arguments [ 0 ] as constant _ expression ) ? . value as array ) ? . length = = 0 )", "predictions": ["& & ( ( ( method ) method type . reference max ) entity </%> </%> <-> <%> ( call ) expression expression method ( call expression expression ( expression ( expression expression -> ) call ) ( ) ( . expression ( . expression ( microsoft method query method . and ; 0 ] </%> . from _ 0 ] . length ] . length ] . length ] . length ] . length _ length ] . length ) ] . length = _ 0 ] ]"]}, {"before_ctx": "<%> <+> public virtual void concat _ with _ scalar _ projection ( ) { using ( var context = create _ context ( ) ) { var query = context . gears . concat ( context . gears ) . select ( g = > g . nickname ) ; var result = query . to _ list ( ) ; assert . equal ( NUM , result . count ) ; } } conditional _ fact public virtual void concat _ with _ groupings ( ) { using ( var context = create _ context ( ) ) { var query = context . gears . group _ by ( g = > g . leader _ nickname ) . concat ( context . gears . group _ by ( g = > g . leader _ nickname ) ) ; var result = query . to _ list ( ) ; assert . equal ( NUM , result . count ) ; } } conditional _ fact public virtual void select _ navigation _ with _ concat _ and _ count ( ) { using ( var context = create _ context ( ) ) { var query = context . gears . where ( g = > ! g . has _ soul _ patch ) . select ( g = > g . weapons . concat ( g . weapons ) . count ( ) ) . to _ list ( ) ; var result = query . to _ list ( ) ; assert . equal ( NUM , result . count ) ; } } conditional _ fact </%> ", "before_line": " conditional _ fact _ skip _ issues ", "after_ctx": " <%> <-> _ skip _ issues </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issues </%> ", "before_line": " conditional _ fact _ skip _ issues ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> using system _ linq ; </%> <%> <-> using jet _ brains _ annotations ; </%> ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators ", "after_ctx": " <%> <-> [ not _ null ] </%> <%> <*> if -> switch </%> <%> <*> = = nameof ( date _ time . now ) ) -> ) </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity _ collection _ base"]}, {"before_ctx": "<%> <-> using jet _ brains _ annotations ; </%> ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators ", "after_ctx": " <%> <-> private static readonly method _ info method _ info = typeof ( string ) . get _ type _ info ( ) . get _ declared _ methods ( nameof ( string . substring ) ) . where ( m = > m . get _ parameters ( ) . count ( ) = = 2 ) . single ( ) ; public virtual expression translate ( [ not _ null ] method _ call _ expression method _ call _ expression ) { if ( method _ call _ expression . method = = method _ info ) { </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity _ entity _ expression _ microsoft _ expression"]}, {"before_ctx": "<%> <-> using jet _ brains _ annotations ; </%> ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators ", "after_ctx": " <%> <+> readonly </%> <%> <-> [ not _ null ] </%> <%> <-> { </%> <%> <+> = > method _ infos . contains ( method _ call _ expression . method ) </%> <%> <*> if ( method _ infos . contains ( method -> ? new sql </%> <%> <*> call -> function </%> <%> <*> . method ) ) -> ( </%> <%> <-> { </%> <%> <+> STR , </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity _ entity _ <%> _ using"]}, {"before_ctx": "<%> <-> using jet _ brains _ annotations ; </%> ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators ", "after_ctx": " <%> <-> public virtual expression translate ( [ not _ null ] method _ call _ expression method _ call _ expression ) { if ( method _ infos . contains ( method _ call _ expression . method ) ) { var arguments = new [ ] { method _ call _ expression . arguments [ 0 ] , expression . constant ( 0 ) , expression . constant ( 1 ) } ; return new sql _ function _ expression ( STR , method _ call _ expression . type , arguments ) ; </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity _ { _ translators"]}, {"before_ctx": "<%> <-> _ sql _ server </%> <%> <*> metadata -> storage </%> ", "before_line": " using microsoft _ data _ entity _ value _ generation ; namespace microsoft _ data _ entity _ sql _ server _ value _ generation ", "after_ctx": " ", "after_line": "namespace microsoft _ data _ entity _ value _ generation", "predictions": ["namespace microsoft _ data _ entity ( if enumerable ; 1 . ( ;"]}, {"before_ctx": "<%> <-> using jet _ brains _ annotations ; </%> ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators ", "after_ctx": " <%> <*> public virtual expression translate ( [ not _ null ] member _ expression member _ expression ) { if ( -> public virtual expression translate ( member _ expression member _ expression ) = > </%> <%> <*> ) -> ? new sql _ function _ expression ( STR , member _ expression . type , new [ ] </%> <%> <+> member _ expression . expression } ) </%> <%> <*> return new sql _ function _ expression ( STR , member _ expression . type , new [ ] { member _ expression . expression } ) -> : null </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity _ type _ ] [ from [ id ( null > ( < cancellation <-> not <-> ( _ server , _ < ) entity > ( range _ not _ ( _ server range _ <+> ) ) ) , namespace )"]}, {"before_ctx": "<%> <-> using jet _ brains _ annotations ; </%> ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ expression _ translators ", "after_ctx": " <%> <-> private static readonly method _ info method _ info = typeof ( string ) . get _ type _ info ( ) . get _ declared _ methods ( nameof ( string . replace ) ) . where ( m = > m . get _ parameters ( ) [ 0 ] . parameter _ type = = typeof ( string ) ) . single ( ) ; public virtual expression translate ( [ not _ null ] method _ call _ expression method _ call _ expression ) { if ( method _ call _ expression . method = = method _ info ) { </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity [ assert [ as [ ;"]}, {"before_ctx": "<%> <+> _ type </%> <%> <+> _ type </%> <%> <+> . name </%> ", "before_line": " public entity _ builder < t _ entity > annotation ( [ not _ null ] string annotation , [ not _ null ] object value ) ", "after_ctx": " <%> <*> null -> empty </%> <%> <+> _ type </%> <%> <+> _ type </%>", "after_line": "public entity _ builder < t _ entity > annotation ( [ not _ null ] string annotation , [ not _ null ] string value )", "predictions": ["public entity _ builder < t ; annotation <%> <-> . data - <-> ] <-> expression <-> [ -> _ <%> , object </%> [ -> _ <%> , object _ get _ , ( name [ STR [ STR ( t [ STR [ , as t as in ) )"]}, {"before_ctx": " ", "before_line": " public property _ builder annotation ( [ not _ null ] string annotation , [ not _ null ] object value ) ", "after_ctx": " <%> <*> null -> empty </%>", "after_line": "public property _ builder annotation ( [ not _ null ] string annotation , [ not _ null ] string value )", "predictions": ["public property _ builder annotation ( . . & array </%> only count , ( <%> <%> _ ( _ <%> _ -> false ) ) ) ) )"]}, {"before_ctx": "<%> <+> _ read _ only </%> <%> <*> enumerable -> list </%> ", "before_line": " dependent _ properties = immutable _ list . create _ range ( dependent _ properties ) ; ", "after_ctx": " <%> <+> _ read _ only </%> <%> <*> enumerable -> list </%> <%> <+> _ read _ only </%> <%> <*> enumerable -> list </%>", "after_line": "dependent _ properties = dependent _ properties ;", "predictions": ["dependent _ properties = dependent _ ( . <*> . -> max _ = 0 0 <->"]}, {"before_ctx": "<%> <+> _ read _ only </%> <%> <*> enumerable -> list </%> <%> <*> enumerable . empty -> immutable _ list </%> <%> <*> ( ) -> . empty </%> ", "before_line": " key _ properties = value . to _ list ( ) ; ", "after_ctx": " <%> <-> if ( foreign _ keys = = null ) </%>", "after_line": "key _ properties = value ;", "predictions": ["key _ properties = value ;"]}, {"before_ctx": " ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g . tag ] . [ id ] is not null and [ g . tag ] . [ id ] in ( ' STR sql ) ; assert . ends _ with ( STR , sql ) ; ", "after_ctx": " <%> <-> . starts </%> <%> <*> with -> sql </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g . tag ] . [ id ] is not null and [ g . tag ] . [ id ] in ( STR test _ sql _ logger _ factory . sql _ statements [ 1 ] ) ;", "predictions": ["where [ g ] . [ <@> , ( ( ( _ ( officer . data = info _ _ _ g , _ not n , ( _ _ g tag , _ . . ) <%> <%> entity <%> > < . check check _ null <%> > , , , . <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>"]}, {"before_ctx": " ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g . city _ of _ birth ] . [ location ] is not null and [ g . tag ] . [ id ] in ( ' STR sql ) ; assert . ends _ with ( STR , sql ) ; ", "after_ctx": " <%> <-> . starts </%> <%> <*> with -> sql </%> <%> <*> from [ cog _ tag ] as [ t ] select [ g ] . [ nickname ] , [ g ] . [ squad _ id ] , [ g ] . [ assigned _ city _ name ] , [ g ] . [ city _ or _ birth _ name ] , [ g ] . [ discriminator ] , [ g ] . [ full _ name ] , [ g ] . [ has _ soul _ patch ] , [ g ] . [ leader _ nickname ] , [ g ] . [ leader _ squad _ id ] , [ g ] . [ rank ] -> from [ cog _ tag ] as [ t ] STR </%> <%> <+> assert . contains ( </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g . city _ of _ birth ] . [ location ] is not null and [ g . tag ] . [ id ] in ( STR test _ sql _ logger _ factory . sql _ statements [ 1 ] ) ;", "predictions": ["where [ g ] . [ < < < </%> add . t ( </%> _ </%> ( 1 = </%> </%> gear , task = g = </%> </%> gear = <-> ' query query query assert ( ' result count query query query _ = ( ' result count query query query _ = ( count query query _ = ( ' result count query query query query _ = ( ' result count query query query _ = ( ' result count query query query query _ = ( ' result count query query query query _"]}, {"before_ctx": "<%> <-> . starts </%> <%> <*> with -> sql </%> <%> <*> from [ cog _ tag ] as [ t ] select [ g ] . [ nickname ] , [ g ] . [ squad _ id ] , [ g ] . [ assigned _ city _ name ] , [ g ] . [ city _ or _ birth _ name ] , [ g ] . [ discriminator ] , [ g ] . [ full _ name ] , [ g ] . [ has _ soul _ patch ] , [ g ] . [ leader _ nickname ] , [ g ] . [ leader _ squad _ id ] , [ g ] . [ rank ] -> from [ cog _ tag ] as [ t ] STR </%> <%> <+> assert . contains ( @ STR </%> ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g . tag ] . [ id ] is not null and [ g . tag ] . [ id ] in ( ' STR sql ) ; assert . ends _ with ( STR , sql ) ; ", "after_ctx": " ", "after_line": "where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) and ( [ g . tag ] . [ id ] is not null and [ g . tag ] . [ id ] in ( STR test _ sql _ logger _ factory . sql _ statements [ 1 ] ) ;", "predictions": ["where [ g ] . [ discriminator ] from ( override override override override override override override entity </%> officer check , range _ entity ) not ( ( </%> = sql = context range range range ( ' _ null range range ( ' nameof > > > > > override enumerable range -> _ <@> <-> range range entity ( <-> range <%> officer ' </%> </%> ' range range ) _ ( <-> range range ( ' nameof null range range <%> _ null range ( ' nameof ' nameof range range ) _ ( ' range"]}, {"before_ctx": " ", "before_line": " & & ( t . get _ custom _ attribute < db _ context _ attribute > ( ) ? . context _ type = = context _ type ) ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%>", "after_line": "& & t . get _ custom _ attribute < db _ context _ attribute > ( ) ? . context _ type = = context _ type", "predictions": ["& & ( t . get _ [ _ not ) collection ;"]}, {"before_ctx": "<%> <-> ( </%> <%> <-> ) </%> ", "before_line": " & & ( t . get _ custom _ attribute < db _ context _ attribute > ( ) ? . context _ type = = context _ type ) ", "after_ctx": " ", "after_line": "& & t . get _ custom _ attribute < db _ context _ attribute > ( ) ? . context _ type = = context _ type", "predictions": ["& & ( t . get _ namespace ( attribute </@> </%> ) ;"]}, {"before_ctx": "<%> <*> size , has _ non _ default _ unicode , has _ non _ default _ size : size ! = size ) ; -> size ) ; </%> <%> <-> ( </%> <%> <+> max _ specific _ </%> <%> <-> . value ) </%> <%> <+> max _ specific _ </%> <%> <-> . value </%> ", "before_line": " = > ( is _ unicode ? $ STR : $ STR ) ; ", "after_ctx": " ", "after_line": "= > is _ unicode ? $ STR : $ STR ;", "predictions": ["= > $ STR ;"]}, {"before_ctx": "<%> <+> private readonly int max _ specific _ size ; </%> ", "before_line": " int? size = null , bool has _ non _ default _ size = false ) : base ( store _ type , db _ type , calculate _ size ( size ) , has _ non _ default _ size ) ", "after_ctx": " <%> <+> max _ specific _ size = calculate _ size ( size ) ; </%> <%> <-> size , </%>", "after_line": "int? size = null ) : base ( store _ type , db _ type , size )", "predictions": ["int? size = null , bool expression ;"]}, {"before_ctx": "<%> <*> void -> bool </%> ", "before_line": " base . open ( ) ; opened _ count + + ; if ( opened _ count = = 1 ) ", "after_ctx": " <%> <+> return true ; </%> <%> <+> return false ; </%> <%> <+> < bool > </%> <%> <-> await base . open _ async ( cancellation _ token ) ; opened _ count + + ; </%>", "after_line": "if ( base . open ( ) )", "predictions": ["if ( base = = 1 )"]}, {"before_ctx": "<%> <*> base . open ( ) ; opened _ count + + ; if ( opened _ count = = 1 ) -> if ( base . open ( ) ) </%> <%> <+> return true ; </%> <%> <+> return false ; </%> <%> <+> < bool > </%> ", "before_line": " await base . open _ async ( cancellation _ token ) ; opened _ count + + ; if ( opened _ count = = 1 ) ", "after_ctx": " <%> <+> return true ; </%> <%> <*> } public override void close ( ) { base . close ( ) ; opened _ count - - ; -> return false ; </%>", "after_line": "if ( await base . open _ async ( cancellation _ token ) )", "predictions": ["if ( + + = 1 </%> )"]}, {"before_ctx": "<%> <*> = > context . add ( check . not _ null ( entity , nameof ( entity ) ) ) ; -> = > context . add ( entity ) ; </%> <%> <+> public override task < entity _ entry < t _ entity > > add _ async ( t _ entity entity , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) = > context . add _ async ( entity , cancellation _ token ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> ", "before_line": " = > context . remove ( check . not _ null ( entity , nameof ( entity ) ) ) ; ", "after_ctx": " <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( params t _ entity [ ] entities ) = > context . add _ range _ async ( entities ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%>", "after_line": "= > context . remove ( entity ) ;", "predictions": ["= > context . remove ( context ) add ) >"]}, {"before_ctx": "<%> <*> = > context . add ( check . not _ null ( entity , nameof ( entity ) ) ) ; -> = > context . add ( entity ) ; </%> <%> <+> public override task < entity _ entry < t _ entity > > add _ async ( t _ entity entity , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) = > context . add _ async ( entity , cancellation _ token ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> ", "before_line": " = > context . update ( check . not _ null ( entity , nameof ( entity ) ) ) ; ", "after_ctx": " <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( params t _ entity [ ] entities ) = > context . add _ range _ async ( entities ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%>", "after_line": "= > context . update ( entity ) ;", "predictions": ["= > context . update ( ;"]}, {"before_ctx": "<%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( params t _ entity [ ] entities ) = > context . add _ range _ async ( entities ) ; </%> ", "before_line": " = > context . attach _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; ", "after_ctx": " <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( i _ enumerable < t _ entity > entities , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </%>", "after_line": "= > context . attach _ range ( entities ) ;", "predictions": ["= > check . not _ { _ by _ result _ by _ result _ by _ list _ { > check var ; ; ; ; ; ;"]}, {"before_ctx": "<%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( params t _ entity [ ] entities ) = > context . add _ range _ async ( entities ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> ", "before_line": " = > context . remove _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; ", "after_ctx": " <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( i _ enumerable < t _ entity > entities , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) = > context . add _ range _ async ( entities , cancellation _ token ) ; </%>", "after_line": "= > context . remove _ range ( entities ) ;", "predictions": ["= > context . remove _ , ) range . ; <-> . remove <-> range ( <%> ) range not ( <%> ) range ( <%> ) range . ;"]}, {"before_ctx": "<%> <-> ( check . not _ null </%> <%> <-> , nameof ( entity ) ) </%> <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( params t _ entity [ ] entities ) = > context . add _ range _ async ( entities ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%> ", "before_line": " = > context . update _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; ", "after_ctx": " <%> <*> = > context . add _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ; -> = > context . add _ range ( entities ) ; </%> <%> <+> public override task add _ range _ async ( i _ enumerable < t _ entity > entities , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) = > context . add _ range _ async ( entities , cancellation _ token ) ; </%> <%> <-> ( check . not _ null </%> <%> <-> , nameof ( entities ) ) </%>", "after_line": "= > context . update _ range ( entities ) ;", "predictions": ["= > context . update _ range ( check . not _ null ( entities , nameof ( entities ) ) ) ;"]}, {"before_ctx": "<%> <*> assert . null ( string _ property . is _ nullable ) ; assert . true ( ( ( i _ property ) string _ property ) . is _ nullable ) ; assert . null ( string _ property . is _ nullable ) ; assert . true ( ( ( i _ property ) nullable _ int _ property ) . is _ nullable ) ; assert . null ( int _ property . is _ nullable ) ; assert . false ( ( ( i _ property ) int _ property ) . is _ nullable ) ; -> assert . true ( string _ property . is _ nullable ) ; </%> <%> <+> assert . true ( nullable _ int _ property . is _ nullable ) ; assert . false ( int _ property . is _ nullable ) ; </%> ", "before_line": " assert . null ( string _ property . is _ nullable ) ; assert . false ( ( ( i _ property ) string _ property ) . is _ nullable ) ; ", "after_ctx": " <%> <-> . value </%> <%> <*> null -> false </%>", "after_line": "assert . false ( string _ property . is _ nullable ) ;", "predictions": ["assert . null ( string _ property . is _ nullable ) ; assert . false ( ( ( i _ property ) string _ property ) ( <-> _ . ) ) _ . ) ) ( <-> _ . ) ) _ . ) ) ( ) ) ) _ . . range _ <%> ) ) _ . . range _ <%> ) ) ) ( ) ) ( <-> _ . ( range _ <%> ) ) _ range ) ) ) ( ) ) ) _ . ) ) ) _ . ) ) ("]}, {"before_ctx": "<%> <*> assert . null ( string _ property . is _ nullable ) ; assert . false ( ( ( i _ property ) string _ property ) . is _ nullable ) ; -> assert . false ( string _ property . is _ nullable ) ; </%> ", "before_line": " assert . false ( string _ property . is _ nullable . value ) ; assert . null ( int _ property . is _ nullable ) ; ", "after_ctx": " <%> <*> assert . true ( string _ property . is _ nullable . value ) ; assert . false ( int _ property . is _ nullable . value ) ; string _ property . is _ nullable = null ; int _ property . is _ nullable = null ; assert . null ( string _ property . is _ nullable ) ; assert . null ( int _ property . is _ nullable ) ; -> assert . true ( string _ property . is _ nullable ) ; </%> <%> <+> assert . false ( int _ property . is _ nullable ) ; </%>", "after_line": "assert . false ( string _ property . is _ nullable ) ; assert . false ( int _ property . is _ nullable ) ;", "predictions": ["assert . false ( int _ property . is _ nullable . value ) ;"]}, {"before_ctx": "<%> <+> assert . false ( int _ property . is _ nullable ) ; </%> <%> <-> . value </%> ", "before_line": " assert . null ( string _ property . is _ nullable ) ; assert . false ( ( ( i _ property ) string _ property ) . is _ nullable ) ; ", "after_ctx": " ", "after_line": "assert . false ( string _ property . is _ nullable ) ;", "predictions": ["assert . null ( string _ property . is _ nullable ) ; assert . false ( ( ( = , = , </@> . is ) token _ property ) _ assert . is ( ) . > > ) test _ property _ > test ( ) test ( ) test test ( ) test ( ) test ( ) test ( ) test ( ) test ( int ( property ( get ( = . > . > . > . > . > . > . > . > . > . > . > ."]}, {"before_ctx": " ", "before_line": " assert . null ( property . value _ generated ) ; assert . equal ( value _ generated . never , ( ( i _ property ) property ) . value _ generated ) ; ", "after_ctx": " <%> <-> . value </%>", "after_line": "assert . equal ( value _ generated . never , property . value _ generated ) ;", "predictions": ["assert . null ( property . value _ generated , value _ generated . never , ( ( i ) assert ( assert source . context is property ; read ; . ; ) assert property ( ) ; . get . get > >"]}, {"before_ctx": "<%> <-> . value </%> ", "before_line": " assert . equal ( value _ generated . never , property . value _ generated . value ) ; property . value _ generated = null ; assert . null ( property . value _ generated ) ; ", "after_ctx": " <%> <*> assert . null ( property . is _ concurrency _ token ) ; assert . false ( ( ( i _ property ) property ) . is _ concurrency _ token ) ; -> assert . false ( property . is _ concurrency _ token ) ; </%>", "after_line": "assert . equal ( value _ generated . never , property . value _ generated ) ;", "predictions": ["assert . equal ( value _ generated . never , property . value _ generated . value ) ; ; ; ; ; ; property _ ; _ assert property property test test _ generated test test test test ( property ( property ( property . . can database with with with with with with with with with with with with with with with with ] with _ ) ) . < < = < < ( < ( context ( context _ context ) ( . < < ( < context ) ) ( . _ < ) )"]}, {"before_ctx": "<%> <-> . value </%> <%> <*> assert . equal ( value _ generated . never , property . value _ generated . value ) ; property . value _ generated = null ; assert . null ( property . value _ generated ) ; -> assert . equal ( value _ generated . never , property . value _ generated ) ; </%> ", "before_line": " assert . null ( property . is _ concurrency _ token ) ; assert . false ( ( ( i _ property ) property ) . is _ concurrency _ token ) ; ", "after_ctx": " <%> <-> . value </%>", "after_line": "assert . false ( property . is _ concurrency _ token ) ;", "predictions": ["assert . null ( property . is _ concurrency _ token ) ; assert . false ( ( ( add ( test ( add ( add ( add ( add ( add ( add ( add ( add ( add ( token ( token ( token . get ( get ( </@> . get ( ( , </@> ( </@> ( </@> ( </@> ( </@> ( get _ </%> ) ) ) . -> _ </%> _ = ) ) ) ) ) ) ) is -> ) is -> ) is = ( i _ ; ) ;"]}, {"before_ctx": "<%> <-> . value </%> ", "before_line": " assert . false ( property . is _ concurrency _ token . value ) ; property . is _ concurrency _ token = null ; assert . null ( property . is _ concurrency _ token ) ; ", "after_ctx": " <%> <*> assert . null ( property . is _ store _ generated _ always ) ; assert . false ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ; -> assert . false ( property . is _ store _ generated _ always ) ; </%>", "after_line": "assert . false ( property . is _ concurrency _ token ) ;", "predictions": ["assert . false ( property . is _ concurrency _ token . value ) ; property . is _ <%> . token = , property ( property ( property . < _ context _ service . get _ context _ service ) ) ) ) ( ( . . _ concurrency _ : with with _ concurrency _ : with with _ concurrency _ : with _ concurrency _ var ) ) ) ( . > > > > > > . > ( . > > > . > ) < > > > ) < > > ."]}, {"before_ctx": "<%> <-> . value </%> <%> <*> assert . false ( property . is _ concurrency _ token . value ) ; property . is _ concurrency _ token = null ; assert . null ( property . is _ concurrency _ token ) ; -> assert . false ( property . is _ concurrency _ token ) ; </%> ", "before_line": " assert . null ( property . is _ store _ generated _ always ) ; assert . false ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ; ", "after_ctx": " <%> <*> assert . true ( property . is _ store _ generated _ always . value ) ; assert . true ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ; -> assert . true ( property . is _ store _ generated _ always ) ; </%> <%> <-> assert . false ( property . is _ store _ generated _ always . value ) ; assert . false ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ; property . is _ store _ generated _ always = null ; assert . null ( property . is _ store _ generated _ always ) ; assert . false ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ; </%>", "after_line": "assert . false ( property . is _ store _ generated _ always ) ;", "predictions": ["assert . false ( ( ( i _ property ) property ) . is _ store _ generated _ always ) ;"]}, {"before_ctx": "<%> <-> . value </%> ", "before_line": " assert . false ( property . is _ read _ only _ before _ save . value ) ; property . is _ read _ only _ before _ save = null ; assert . null ( property . is _ read _ only _ before _ save ) ; ", "after_ctx": " <%> <-> . value </%>", "after_line": "assert . false ( property . is _ read _ only _ before _ save ) ;", "predictions": ["assert . false ( property . is _ read _ only _ before _ save . value ) ; services ( services ) ; false ( e . ; ;"]}, {"before_ctx": "<%> <-> . value </%> ", "before_line": " assert . false ( property . is _ read _ only _ after _ save . value ) ; property . is _ read _ only _ after _ save = null ; assert . null ( property . is _ read _ only _ after _ save ) ; ", "after_ctx": " <%> <+> assert . false ( property . is _ read _ only _ before _ save ) ; assert . false ( property . is _ read _ only _ after _ save ) ; </%>", "after_line": "assert . false ( property . is _ read _ only _ after _ save ) ;", "predictions": ["assert . false ( property . is _ read _ only _ after _ save . value ) ;"]}, {"before_ctx": "<%> <*> use -> requires </%> ", "before_line": " assert . false ( key _ properties [ 0 ] . requires _ value _ generator . value ) ; ", "after_ctx": " ", "after_line": "assert . false ( key _ properties [ 0 ] . requires _ value _ generator ) ;", "predictions": ["assert . false ( key _ properties [ 0 ] . requires _ value _ generator ) ;"]}, {"before_ctx": "<%> <+> check . not _ null ( content , nameof ( content ) ) ; check . not _ null ( template _ model , nameof ( template _ model ) ) ; </%> ", "before_line": " var messages = generator _ results . parser _ errors . select ( e = > strings . error _ message _ with _ line _ number ( e . location . line _ index , e . message ) ) ; ", "after_ctx": " <%> <-> provider . add _ references _ for _ templates ( metadata _ references _ provider ) ; </%>", "after_line": "var messages = generator _ results . parser _ errors . select ( e = > e . message ) ;", "predictions": ["var messages = generator _ results . parser _ errors . select ( e = > strings . error _ store _ with _ , . number ) ; ( < model ( = _ instance test test ( < i _ > can _ token test ( < ; ( < var index test ( ; ; instance ( < instance _ index test < ; ) _ : can = <@> ) with with with _ number can > with with with ) with ( . > can _ <@> ) with with _ = ( with results"]}, {"before_ctx": " ", "before_line": " = > property ( property _ name , property _ type : null , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : configuration _ source ) ; ", "after_ctx": " <%> <-> if ( is _ ignored ( property _ name , configuration _ source ) ) </%>", "after_line": "= > property ( property _ name , property _ type : null , member _ info : null , configuration _ source , type _ configuration _ source : null ) ;", "predictions": ["= > property ( property _ name , property _ type : null , member _ info : null . ; ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " = > database _ creator is i _ database _ creator _ with _ can _ connect with _ can _ connect ? with _ can _ connect . can _ connect ( ) : throw new not _ implemented _ exception ( core _ strings . can _ connect _ not _ implemented ) ; ", "after_ctx": " <%> <*> = > database _ creator is i _ database _ creator _ with _ can _ connect with _ can _ connect ? with _ can _ connect . can _ connect _ async ( cancellation _ token ) : throw new not _ implemented _ exception ( core _ strings . can _ connect _ not _ implemented ) ; -> = > database _ creator . can _ connect _ async ( cancellation _ token ) ; </%>", "after_line": "= > database _ creator . can _ connect ( ) ;", "predictions": ["= > database _ creator is i _ database _ creator _ with _ can _ connect with _ ( _ ) services services false"]}, {"before_ctx": "<%> <*> = > database _ creator is i _ database _ creator _ with _ can _ connect with _ can _ connect ? with _ can _ connect . can _ connect ( ) : throw new not _ implemented _ exception ( core _ strings . can _ connect _ not _ implemented ) ; -> = > database _ creator . can _ connect ( ) ; </%> ", "before_line": " = > database _ creator is i _ database _ creator _ with _ can _ connect with _ can _ connect ? with _ can _ connect . can _ connect _ async ( cancellation _ token ) : throw new not _ implemented _ exception ( core _ strings . can _ connect _ not _ implemented ) ; ", "after_ctx": " ", "after_line": "= > database _ creator . can _ connect _ async ( cancellation _ token ) ;", "predictions": ["= > database _ creator is i _ database _ creator _ with _ can _ connect with _ ( _ ) i _ can _ ) services var var _ property </%> </%> <+> <+> . null . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . int _ ( cancellation ) null null null null null null null"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , </%> _ model ( ) ) ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ instance can ) ) = model _ </@> . . . ) services"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ instance ( ) ) ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; ", "after_ctx": " <%> <-> var test _ listener = context _ services </%>", "after_line": "var context _ services = create _ context _ services ( ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ with async : _ context _ ( nullable . string nullable _ string true ;"]}, {"before_ctx": " ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; ", "after_ctx": " <%> <-> var test _ listener = context _ services </%>", "after_line": "var context _ services = create _ context _ services ( ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ property ( test . <%> _ false ( ( ( false . <*> -> enumerable i _ services _ test -> ) , ) , ) , _ < ( ) ) = > > ( ) , _ < context ( ) . <%> . </@> . -> with _ ( > can _ not can can is test _ ) is test can ) _ ) with can ) _ . = ) _ . can can )"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ instance ( ) ) ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model ( ) ) ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model _ with _ changed ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( build _ model _ with _ changed ( ) ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ ( core _ database _ . async ) async ) ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model _ with _ changed ( ) ) ; ", "after_ctx": " <%> <-> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) </%>", "after_line": "var context _ services = create _ context _ services ( build _ model _ with _ changed ( ) ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship . ( = nullable . is _ scoped ; assert _ relationship _ ) is assert _ model _ ) ; _ false ; _ false null ; _ false null ; _ false null ; property _ helpers property _ false null , build _ <*> ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model _ with _ changed ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( build _ model _ with _ changed ( ) ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ database _ . _ build ( ) ) ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ model _ with _ changed ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( build _ model _ with _ changed ( ) ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ ( > > ) ) ) , add _ model _ type ) false"]}, {"before_ctx": " ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; ", "after_ctx": " <%> <-> var test _ listener = context _ services </%>", "after_line": "var context _ services = create _ context _ services ( build _ notifying _ model ( ) ) ;", "predictions": ["var context _ services = new service _ add ( ) . </@> _ model = var <%> -> _ notifying _ model , field _ helpers property _ ;"]}, {"before_ctx": " ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; ", "after_ctx": " <%> <-> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) </%>", "after_line": "var context _ services = create _ context _ services ( build _ notifying _ model ( ) ) ;", "predictions": ["var context _ services = new service _ <@> <%> configuration configuration configuration configuration configuration configuration - <@> _ notifying _ model , access _ notifying _ ( , access _ test _ ( ; access _ test _ ( ; access _ test _ ( ; access _ test _ ( , property _ test field _ . field property property _ helpers _ ( ;"]}, {"before_ctx": " ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; ", "after_ctx": " <%> <-> var test _ listener = context _ services </%>", "after_line": "var context _ services = create _ context _ services ( build _ notifying _ model ( ) ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < create _ & _ ) , info _ . _ ) mode _ ; mode mode mode _ ; test _ helpers field _ ) mode mode mode mode mode _ ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; ", "after_ctx": " <%> <-> var test _ listener = context _ services </%>", "after_line": "var context _ services = create _ context _ services ( build _ notifying _ model ( ) ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ test _ field > , </@> _ test _ field , property _ helpers _ field info , ) no _ notifying _ model , property _ helpers ( property _ helpers property property _ helpers _ field info , ) no . ) no _ member _ model , property _ test _ field ( property _ helpers ( property _ helpers _ field info , </@> _ test _ model info property _ helpers _ field info , </@> _"]}, {"before_ctx": " ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; ", "after_ctx": " <%> <-> var test _ listener = context _ services </%>", "after_line": "var context _ services = create _ context _ services ( build _ notifying _ model ( ) ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ services _ ) member _ ; field _ ) mode mode test _ ; test _ helpers field _ ) mode mode test _ ; test _ helpers property field member test _ helpers property field _ helpers ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( build _ notifying _ model ( ) ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < <%> _ member _ i property properties property _ < , buffer key _ < ( ( ( , _ , _ i > properties _ < , _ i > > ( properties _ , _ i > > > > _ i > ( ( ( , _ helpers _ i > _ < _ , > > _ , _ i > > ( ( ( properties _ helpers > ( properties _ , _ i > > ( properties _"]}, {"before_ctx": " ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; ", "after_ctx": " <%> <-> var test _ listener = context _ services </%>", "after_line": "var context _ services = create _ context _ services ( build _ notifying _ model ( ) ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ services _ ( member _ test _ ) member _ ; member _ ; , </@> _ notifying field property _ helpers test _ ;"]}, {"before_ctx": "<%> <*> var test _ listener = context _ services . get _ required _ service < i _ enumerable < i _ relationship _ listener > > ( ) . of _ type < test _ relationship _ listener > ( ) . single ( ) ; -> var test _ listener = context _ services . get _ required _ service < test _ relationship _ listener > ( ) ; </%> ", "before_line": " var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ notifying _ model ( ) ) ; ", "after_ctx": " ", "after_line": "var context _ services = create _ context _ services ( build _ notifying _ model ( ) ) ;", "predictions": ["var context _ services = new service _ collection ( ) . add _ scoped < i _ info _ ( </%> ) </%> build </%> build field _ scoped field property _ . mode access _ test ;"]}, {"before_ctx": "<%> <*> autoincrement -> identity _ metadata </%> <%> <+> _ is _ ignored </%> ", "before_line": " var ex = assert . throws < sqlite _ exception > ( ( ) = > context . database . ensure _ created ( ) ) ; assert . contains ( STR , ex . message ) ; ", "after_ctx": " ", "after_line": "context . database . ensure _ created ( ) ;", "predictions": ["context . database . ensure _ created ( . . service ) context _ create _ model var ) ;"]}, {"before_ctx": "<%> <*> i _ read _ only _ list < i _ property > key _ properties ; return find _ tracked ( key _ values , out key _ properties ) ? ? set . first _ or _ default ( build _ lambda ( key _ properties , new value _ buffer ( key _ values ) ) ) ; -> return find _ tracked ( key _ values , out i _ read _ only _ list < i _ property > key _ properties ) </%> <%> <+> ? ? query _ root . first _ or _ default ( build _ lambda ( key _ properties , new value _ buffer ( key _ values ) ) ) ; </%> ", "before_line": " i _ read _ only _ list < i _ property > key _ properties ; var tracked = find _ tracked ( key _ values , out key _ properties ) ; ", "after_ctx": " <%> <*> set -> query _ root </%> <%> <*> i _ read _ only _ list < i _ property > key _ properties ; var tracked = find _ tracked ( key _ values , out key _ properties ) ; -> var tracked = find _ tracked ( key _ values , out i _ read _ only _ list < i _ property > key _ properties ) ; </%>", "after_line": "var tracked = find _ tracked ( key _ values , out i _ read _ only _ list < i _ property > key _ properties ) ;", "predictions": ["var tracked = find _ tracked ( key _ values , out i _ read _ only _ list < ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ("]}, {"before_ctx": "<%> <*> i _ read _ only _ list < i _ property > key _ properties ; var tracked = find _ tracked ( key _ values , out key _ properties ) ; -> var tracked = find _ tracked ( key _ values , out i _ read _ only _ list < i _ property > key _ properties ) ; </%> <%> <*> set -> query _ root </%> ", "before_line": " i _ read _ only _ list < i _ property > key _ properties ; var tracked = find _ tracked ( key _ values , out key _ properties ) ; ", "after_ctx": " <%> <*> set -> query _ root </%>", "after_line": "var tracked = find _ tracked ( key _ values , out i _ read _ only _ list < i _ property > key _ properties ) ;", "predictions": ["var tracked = find _ tracked ( key _ values , out i _ property _ only ) reference"]}, {"before_ctx": "<%> <*> if ( method _ call _ expression . method . is _ generic _ method ) -> if ( method _ call _ expression . method . is _ generic _ method </%> <%> <+> & & reference _ equals ( method _ call _ expression . method . get _ generic _ method _ definition ( ) , entity _ query _ model _ visitor . property _ method _ info ) ) </%> ", "before_line": " var method _ info = method _ call _ expression . method . get _ generic _ method _ definition ( ) ; if ( reference _ equals ( method _ info , entity _ query _ model _ visitor . property _ method _ info ) ) { return method _ call _ expression ; } ", "after_ctx": " ", "after_line": "return method _ call _ expression ;", "predictions": ["return method _ call _ expression ;"]}, {"before_ctx": "<%> <*> property . requires _ relationship _ snapshot ( ) ? relationship _ index + + : - 1 ) ; -> property . is _ key _ or _ foreign _ key ( ) ? relationship _ index + + : - 1 , </%> <%> <+> may _ be _ store _ generated ( property ) ? store _ generation _ index + + : - 1 ) ; </%> ", "before_line": " var indexes = new property _ indexes ( index + + , - 1 , - 1 , relationship _ index + + ) ; ", "after_ctx": " ", "after_line": "var indexes = new property _ indexes ( index + + , - 1 , - 1 , relationship _ index + + , - 1 ) ;", "predictions": ["var indexes = new property _ indexes ( index + + , - 1 , - ( info _ ) info , test property info property property property ) access"]}, {"before_ctx": "<%> <+> using microsoft _ data _ entity _ storage ; </%> ", "before_line": " public abstract partial class internal _ entity _ entry : i _ property _ accessor , i _ update _ entry ", "after_ctx": " <%> <*> private sidecar [ ] sidecars ; -> private original _ values original _ values ; </%> <%> <+> private relationships _ snapshot relationships _ snapshot ; private store _ generated _ values store _ generated _ values ; </%> <%> <-> not _ null i _ entity _ type entity _ type , not _ null i _ entity _ entry _ metadata _ services metadata _ services ) </%>", "after_line": "public abstract partial class internal _ entity _ entry : i _ update _ entry", "predictions": ["public abstract partial class internal _ entity _ entry : i _ update _ entry"]}, {"before_ctx": "<%> <+> var configuration _ source = annotations . configuration _ source ; </%> <%> <+> | | property _ type ! = null ) </%> <%> <*> | | -> & & ! configuration _ source . overrides ( get _ discriminator _ </%> <%> <*> type ! = null -> configuration _ source ( </%> <%> <+> ) </%> ", "before_line": " if ( ! set _ discriminator _ property ( null ) ) { return null ; } ", "after_ctx": " <%> <-> var configuration _ source = annotations . configuration _ source ; </%>", "after_line": "return null ;", "predictions": ["return null ;"]}, {"before_ctx": " ", "before_line": " member _ info _ test ( property , null , field , property , property ) ; ", "after_ctx": " <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%>", "after_line": "member _ info _ test ( property , null , field , field , field ) ;", "predictions": ["member _ info _ test ( property , null , field , property , property ) private"]}, {"before_ctx": "<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%> ", "before_line": " member _ info _ test ( property , null , field , property , property ) ; ", "after_ctx": " <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%>", "after_line": "member _ info _ test ( property , null , field , field , field ) ;", "predictions": ["member _ info _ test ( property , null , field , property , property ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%> ", "before_line": " member _ info _ test ( property , null , field , field , property ) ; ", "after_ctx": " <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%>", "after_line": "member _ info _ test ( property , null , field , field , field ) ;", "predictions": ["member _ info _ test ( property , null , field , field ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%> ", "before_line": " member _ info _ test ( property , null , field , field , property ) ; ", "after_ctx": " <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%>", "after_line": "member _ info _ test ( property , null , field , field , field ) ;", "predictions": ["member _ info _ test ( property , null , field , field ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%> ", "before_line": " member _ info _ test ( property , null , field , field , property ) ; ", "after_ctx": " <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%>", "after_line": "member _ info _ test ( property , null , field , field , field ) ;", "predictions": ["member _ info _ test ( property , null , field , field ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , field , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , field , field , property ) ; </%> ", "before_line": " member _ info _ test ( property , null , field , property , field ) ; ", "after_ctx": " <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , field ) ; </%>", "after_line": "member _ info _ test ( property , null , field , field , field ) ;", "predictions": ["member _ info _ test ( property , null , field , field ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , property , property , no _ field _ or _ getter < write _ only _ prop _ no _ field > ( ) ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , property , property , no _ field _ or _ getter < write _ only _ prop _ no _ field > ( ) ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , no _ field _ or _ getter < write _ only _ prop _ no _ field > ( ) ) ; </%> ", "before_line": " member _ info _ test ( property , null , field , property , property ) ; ", "after_ctx": " <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%>", "after_line": "member _ info _ test ( property , null , field , field , field ) ;", "predictions": ["member _ info _ test ( property , null , field , property , property ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%> ", "before_line": " member _ info _ test ( property , null , field , property , property ) ; ", "after_ctx": " <%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%>", "after_line": "member _ info _ test ( property , null , field , field , field ) ;", "predictions": ["member _ info _ test ( property , null , field , property , property ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( property , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( property , property _ access _ mode . prefer _ field _ during _ construction , field , property , property ) ; member _ info _ test ( property , property _ access _ mode . prefer _ property , property , property , property ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , reference , reference ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , reference , reference ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , reference , reference ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , reference , reference ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , field , reference ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , reference ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , field , reference ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , reference ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , field , reference ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , reference ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , reference ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , reference , field ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , field ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , reference , field ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , reference , reference , no _ field _ or _ getter _ ref < write _ only _ prop _ no _ field > ( ) ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , reference , reference , no _ field _ or _ getter _ ref < write _ only _ prop _ no _ field > ( ) ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , no _ field _ or _ getter _ ref < write _ only _ prop _ no _ field > ( ) ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , reference , reference ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , reference , reference ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , reference , reference ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , reference , reference ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , reference , reference ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , reference , reference , reference ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , collection , collection ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , collection , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , collection , collection ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , collection , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , collection , collection ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , collection , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , collection , collection ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , collection , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , field , collection ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , field ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , field , collection ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , field ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , field , collection ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , field ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , field , collection ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , field , field , collection ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , collection , field ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ field _ during _ construction , field , collection , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , field ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , collection , field ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , collection , collection , no _ field _ or _ getter _ coll < write _ only _ prop _ no _ field > ( ) ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , no _ field _ or _ getter _ coll < write _ only _ prop _ no _ field > ( ) ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , collection , collection ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , collection , collection ) ;"]}, {"before_ctx": "<%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%> ", "before_line": " member _ info _ test ( navigation , null , field , collection , collection ) ; ", "after_ctx": " <%> <+> member _ info _ test ( navigation , property _ access _ mode . prefer _ field , field , field , field ) ; member _ info _ test ( navigation , property _ access _ mode . prefer _ property , collection , collection , collection ) ; </%>", "after_line": "member _ info _ test ( navigation , null , field , field , field ) ;", "predictions": ["member _ info _ test ( navigation , null , field , collection , collection ) ;"]}, {"before_ctx": "<%> <*> if ( ! use _ query _ composition ) -> if ( ! use _ query _ composition </%> <%> <+> & & relational _ query _ compilation _ context . is _ include _ query ) </%> ", "before_line": " if ( relational _ query _ compilation _ context . is _ include _ query ) { throw new invalid _ operation _ exception ( relational _ strings . stored _ procedure _ include _ not _ supported ) ; } ", "after_ctx": " ", "after_line": "throw new invalid _ operation _ exception ( relational _ strings . stored _ procedure _ include _ not _ supported ) ;", "predictions": ["throw new invalid _ operation _ exception ( reader _ virtual source _ procedure _ context _ not _ ) _ not </%> info new _ , _ . _ mode property property _ ) </%> </%>"]}, {"before_ctx": "<%> <-> protected override void track _ entities _ in _ results < t _ result > ( [ not _ null ] query _ model query _ model ) { </%> <%> <*> } -> public bool all _ members _ bound _ to _ j _ object { get ; set ; } = true ; </%> ", "before_line": " debug . assert ( expression is query _ shaper _ expression , STR ) ; var query _ shaper _ expression = ( query _ shaper _ expression ) expression ; if ( query _ shaper _ expression . query _ expression is document _ query _ expression document _ query _ expression ) ", "after_ctx": " <%> <*> var select _ expression = document _ query _ expression . select _ expression ; var sql _ translating _ expression _ visitor = new sql _ translating _ expression _ visitor ( select _ expression , query _ compilation _ context ) ; var sql _ predicate = sql _ translating _ expression _ visitor . visit ( where _ clause . predicate ) ; if ( sql _ predicate ! = null ) -> if ( query _ shaper _ expression . query _ expression is document _ query _ expression document _ query _ expression ) </%> <%> <+> var select _ expression = document _ query _ expression . select _ expression ; var sql _ translating _ expression _ visitor = new sql _ translating _ expression _ visitor ( </%>", "after_line": "if ( expression is query _ shaper _ expression query _ shaper _ expression )", "predictions": ["debug . assert ( expression is query _ shaper _ expression , STR ) ;"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ infrastructure ; </%> ", "before_line": " private readonly db _ context _ service < i _ model > model ; ", "after_ctx": " <%> <-> db _ context _ service < </%> <%> <-> > </%>", "after_line": "private readonly i _ model model ;", "predictions": ["private readonly i _ model model ;"]}, {"before_ctx": "<%> <-> db _ context _ service < </%> <%> <-> > </%> ", "before_line": " not _ null db _ context _ service < i _ model > model ) ", "after_ctx": " ", "after_line": "not _ null i _ model model )", "predictions": ["not _ null db _ context _ service context </@> </@> entity . null"]}, {"before_ctx": "<%> <*> public migration _ assembly ( not _ null db _ context _ service < db _ context > context , not _ null db _ context _ service < i _ db _ context _ options > options ) -> public migration _ assembly ( [ not _ null ] db _ context context , [ not _ null ] i _ db _ context _ options options ) </%> ", "before_line": " var context _ type = context . service . get _ type ( ) ; var assembly _ name = relational _ options _ extension . extract ( options . service ) ? . migrations _ assembly ; ", "after_ctx": " ", "after_line": "var context _ type = context . get _ type ( ) ; var assembly _ name = relational _ options _ extension . extract ( options ) ? . migrations _ assembly ;", "predictions": ["var assembly _ name = relational _ options _ extension . extract ( options . service . get _ i ( ) ) ? property _ name . extract _ collection . extract ) . migrations _ ; . migrations _ ; . get ( reference property _ name property property property property property property property _ name _ ; . service _ ; . get ( reference property ) ? property . service _ ; . get ( reference property ) ? property . service _ ; . extract ( reference property ) ? property . service _ ;"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ internal ; </%> ", "before_line": " private readonly db _ context _ service < db _ context > context ; ", "after_ctx": " <%> <-> _ service < db _ context > </%>", "after_line": "private readonly db _ context context ;", "predictions": ["private readonly db _ context _ service context </%> </%>"]}, {"before_ctx": "<%> <-> _ service < db _ context > </%> ", "before_line": " not _ null db _ context _ service < db _ context > context , ", "after_ctx": " ", "after_line": "not _ null db _ context context ,", "predictions": ["not _ null db _ context _ service <-> context context ,"]}, {"before_ctx": "<%> <*> not _ null state _ manager state _ manager , not _ null db _ context _ service < i _ model > model , -> not _ null i _ model model , </%> <%> <-> not _ null clr _ collection _ accessor _ source collection _ accessor _ source , not _ null clr _ property _ setter _ source property _ setter _ source , </%> ", "before_line": " not _ null db _ context _ service < i _ db _ context _ options > options , ", "after_ctx": " <%> <-> check . not _ null ( state _ manager , nameof ( state _ manager ) ) , </%> <%> <-> check . not _ null ( collection _ accessor _ source , nameof ( collection _ accessor _ source ) ) , check . not _ null ( property _ setter _ source , nameof ( property _ setter _ source ) ) , </%>", "after_line": "not _ null i _ db _ context _ options options ,", "predictions": ["not _ null db _ context _ service < i _ db _ context _ options > options ,"]}, {"before_ctx": "<%> <-> check . not _ null ( collection _ accessor _ source , nameof ( collection _ accessor _ source ) ) , check . not _ null ( property _ setter _ source , nameof ( property _ setter _ source ) ) , </%> ", "before_line": " options = options . service ; ", "after_ctx": " <%> <-> protected virtual relational _ value _ reader _ factory value _ reader _ factory = > new relational _ typed _ value _ reader _ factory ( ) ; </%>", "after_line": "options = options ;", "predictions": ["options = options . service ;"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ infrastructure ; </%> ", "before_line": " not _ null db _ context _ service < db _ context > context , ", "after_ctx": " ", "after_line": "not _ null db _ context context ,", "predictions": ["not _ null db _ context _ service <-> service"]}, {"before_ctx": " ", "before_line": " private readonly db _ context _ service < i _ history _ repository > history _ repository ; private readonly lazy _ ref < relational _ data _ store _ creator > data _ store _ creator ; private readonly db _ context _ service < migration _ sql _ generator > sql _ generator ; ", "after_ctx": " <%> <-> lazy _ ref < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%>", "after_line": "private readonly i _ history _ repository history _ repository ; private readonly relational _ data _ store _ creator data _ store _ creator ; private readonly migration _ sql _ generator sql _ generator ;", "predictions": ["private readonly db _ context _ service history _ repository ;"]}, {"before_ctx": "<%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> lazy _ ref < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> ", "before_line": " private readonly lazy _ ref < relational _ connection > connection ; private readonly db _ context _ service < model _ differ > model _ differ ; private readonly db _ context _ service < i _ model > model ; ", "after_ctx": " <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%>", "after_line": "private readonly relational _ connection connection ; private readonly model _ differ model _ differ ; private readonly i _ model model ;", "predictions": ["private readonly lazy _ ref < relational _ connection > connection ; private readonly db _ context _ info ( member _ member ) ; ; ; ;"]}, {"before_ctx": "<%> <-> lazy _ ref < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> ", "before_line": " not _ null db _ context _ service < i _ history _ repository > history _ repository , not _ null db _ context _ service < data _ store _ creator > data _ store _ creator , not _ null db _ context _ service < migration _ sql _ generator > sql _ generator , ", "after_ctx": " <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%>", "after_line": "not _ null i _ history _ repository history _ repository , not _ null data _ store _ creator data _ store _ creator , not _ null migration _ sql _ generator sql _ generator ,", "predictions": ["not _ null db _ context _ service < i _ history _ repository > history _ repository , , _ <%> member _ ) _ sql ; data _ if _ creator document _ is _ creator document _ generator document _ generator document _ generator document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document _ generator document document"]}, {"before_ctx": " ", "before_line": " data _ store _ creator = new lazy _ ref < relational _ data _ store _ creator > ( ( ) = > ( relational _ data _ store _ creator ) data _ store _ creator . service ) ; ", "after_ctx": " <%> <-> connection = new lazy _ ref < relational _ </%> <%> <-> > ( ( ) </%> <%> <-> > </%> <%> <-> . service ) </%>", "after_line": "data _ store _ creator = ( relational _ data _ store _ creator ) data _ store _ creator ;", "predictions": ["data _ store _ creator = relational _ ! _ & _ creator ) not _ ;"]}, {"before_ctx": "<%> <*> data _ store _ creator = new lazy _ ref < relational _ data _ store _ creator > ( ( ) = > ( relational _ data _ store _ creator ) data _ store _ creator . service ) ; -> data _ store _ creator = ( relational _ data _ store _ creator ) data _ store _ creator ; </%> ", "before_line": " connection = new lazy _ ref < relational _ connection > ( ( ) = > ( relational _ connection ) connection . service ) ; ", "after_ctx": " <%> <-> . service </%>", "after_line": "connection = ( relational _ connection ) connection ;", "predictions": ["connection = new lazy _ ref < relational _ connection > ( ( ) = > ( relational _ , field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field"]}, {"before_ctx": "<%> <-> . service </%> ", "before_line": " model _ differ . service . has _ differences ( migration _ assembly . model _ snapshot ? . model , model . service ) ; ", "after_ctx": " <%> <-> . service </%>", "after_line": "model _ differ . has _ differences ( migration _ assembly . model _ snapshot ? . model , model ) ;", "predictions": ["model _ differ . service . has _ execute transaction . has <%> _ snapshot </@> _ db ;"]}, {"before_ctx": "<%> <-> . value </%> <%> <-> . value </%> <%> <-> . value </%> ", "before_line": " executor . execute _ non _ query ( connection . value , transaction . db _ transaction , sql _ batches ) ; ", "after_ctx": " ", "after_line": "executor . execute _ non _ query ( connection , transaction . db _ transaction , sql _ batches ) ;", "predictions": ["executor . execute _ non _ query ( entity _ <-> </%> </%> transaction ( <@> ( transaction = <*> , sql , sql ) ) ) ) ) ) _ mode ;"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ infrastructure ; </%> ", "before_line": " private readonly db _ context _ service < i _ model > model ; ", "after_ctx": " <%> <-> db _ context _ service < </%> <%> <-> > </%>", "after_line": "private readonly i _ model model ;", "predictions": ["private readonly i _ model model ;"]}, {"before_ctx": " ", "before_line": " not _ null db _ context _ service < db _ context > context , not _ null db _ context _ service < i _ model > model , ", "after_ctx": " <%> <-> db _ context _ service < </%> <%> <-> > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%>", "after_line": "not _ null db _ context context , not _ null i _ model model ,", "predictions": ["not _ null db _ context _ service <%> store store store store & </%> _ <%> ( > options , , , , STR"]}, {"before_ctx": "<%> <-> _ service < db _ context > </%> <%> <-> db _ context _ service < </%> <%> <-> > </%> ", "before_line": " not _ null db _ context _ service < model _ differ > model _ differ , ", "after_ctx": " <%> <-> db _ context _ service < </%> <%> <-> > </%>", "after_line": "not _ null model _ differ model _ differ ,", "predictions": ["model _ differ model _ differ ,"]}, {"before_ctx": " ", "before_line": " context _ type = context . service . get _ type ( ) ; model = model . service ; ", "after_ctx": " <%> <-> . service </%> <%> <-> . service </%> <%> <-> ( ) = > </%> <%> <-> ( ) </%>", "after_line": "context _ type = context . get _ type ( ) ; model = model ;", "predictions": ["model = context . service ;"]}, {"before_ctx": "<%> <-> . service </%> <%> <-> . service </%> <%> <-> . service </%> ", "before_line": " history _ repository = history _ repository . service ; logger = new lazy _ ref < i _ logger > ( ( ) = > logger _ factory . create < migration _ scaffolder > ( ) ) ; ", "after_ctx": " ", "after_line": "history _ repository = history _ repository ; logger = new lazy _ ref < i _ logger > ( logger _ factory . create < migration _ scaffolder > ) ;", "predictions": ["logger = history _ repository . service ; logger <*> execute . < <-> _ > </%> ( _ db name ; ; ; ; . -> ; ) ) . check , collection _ check , i _ > null collection collection collection collection collection collection collection collection ; _ scaffolder <%> </%> <*> ; _ factory <%> <*> <*>"]}, {"before_ctx": "<%> <-> db _ context _ service < </%> <%> <-> > </%> ", "before_line": " not _ null db _ context _ service < i _ model > model , not _ null db _ context _ service < data _ store > data _ store ) ", "after_ctx": " ", "after_line": "not _ null i _ model model , not _ null data _ store data _ store )", "predictions": ["not _ null db _ context _ service < = = </%> service logger </@> _ store _ <%> . context _ virtual void </%> _ < <+> _ < <+> . not . not"]}, {"before_ctx": " ", "before_line": " not _ null db _ context _ service < db _ context > context ) ", "after_ctx": " <%> <-> . service </%>", "after_line": "not _ null db _ context context )", "predictions": ["not _ null db _ context _ service ; null db _ context _ _ ;"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ infrastructure ; </%> ", "before_line": " private readonly db _ context _ service < db _ context > context ; ", "after_ctx": " <%> <-> _ service < db _ context > </%>", "after_line": "private readonly db _ context context ;", "predictions": ["private readonly db _ context _ service context ;"]}, {"before_ctx": "<%> <-> _ service < db _ context > </%> ", "before_line": " not _ null db _ context _ service < db _ context > context , ", "after_ctx": " <%> <-> protected virtual i _ logger logger </%>", "after_line": "not _ null db _ context context ,", "predictions": ["not _ null db _ context _ service _ ) ("]}, {"before_ctx": " ", "before_line": " context . service , ", "after_ctx": " <%> <*> if ( started _ transaction ! = null ) { started _ transaction . commit ( ) ; } -> started _ transaction ? . commit ( ) ; </%>", "after_line": "context ,", "predictions": ["context ,"]}, {"before_ctx": " ", "before_line": " context . service , ", "after_ctx": " <%> <*> if ( started _ transaction ! = null ) { started _ transaction . commit ( ) ; } -> started _ transaction ? . commit ( ) ; </%>", "after_line": "context ,", "predictions": ["context ,"]}, {"before_ctx": " ", "before_line": " not _ null db _ context _ service < db _ context > context , ", "after_ctx": " <%> <*> context -> migrator </%> <%> <-> public virtual void apply _ migrations ( ) </%>", "after_line": "not _ null db _ context context ,", "predictions": ["context db _ context _ service < db _ context <@> , , <*>"]}, {"before_ctx": "<%> <-> _ service < db _ context > </%> ", "before_line": " check . not _ null ( migrator , nameof ( context ) ) ; ", "after_ctx": " <%> <*> public virtual void apply _ migrations ( ) { migrator . apply _ migrations ( ) ; } -> public virtual void apply _ migrations ( ) = > migrator . apply _ migrations ( ) ; </%>", "after_line": "check . not _ null ( migrator , nameof ( migrator ) ) ;", "predictions": ["check . not _ null ( nameof ( context ; <-> logger ( context ( context ( context ( context not , manager not not _ service ) not ) not source ) source ) manager < not ) >"]}, {"before_ctx": " ", "before_line": " return new db _ context _ service < i _ db _ context _ options > ( context _ options ) ; ", "after_ctx": " <%> <-> db _ context _ service < </%> <%> <-> > </%>", "after_line": "return context _ options ;", "predictions": ["return new db _ context _ service ( ) data data"]}, {"before_ctx": "<%> <*> not _ null state _ manager state _ manager , not _ null db _ context _ service < i _ model > model , -> not _ null i _ model model , </%> <%> <-> not _ null clr _ collection _ accessor _ source collection _ accessor _ source , not _ null clr _ property _ setter _ source property _ setter _ source , </%> ", "before_line": " not _ null db _ context _ service < i _ db _ context _ options > options , ", "after_ctx": " <%> <-> check . not _ null ( state _ manager , nameof ( state _ manager ) ) , </%> <%> <-> check . not _ null ( collection _ accessor _ source , nameof ( collection _ accessor _ source ) ) , check . not _ null ( property _ setter _ source , nameof ( property _ setter _ source ) ) , </%>", "after_line": "not _ null i _ db _ context _ options options ,", "predictions": ["not _ null db _ context _ service < -> _ ) _ ( _ base <*> ,"]}, {"before_ctx": "<%> <-> db _ context _ service < </%> <%> <-> > </%> ", "before_line": " var store _ config = relational _ options _ extension . extract ( options . service ) ; ", "after_ctx": " ", "after_line": "var store _ config = relational _ options _ extension . extract ( options ) ;", "predictions": ["var store _ config = relational _ options . extract > > ) </%> </%> </%> _ namespace <@> get _ </@> _ <->"]}, {"before_ctx": "<%> <*> state _ manager state _ manager , db _ context _ service < i _ model > model , -> i _ model model , </%> <%> <-> clr _ collection _ accessor _ source collection _ accessor _ source , clr _ property _ setter _ source property _ setter _ source , </%> ", "before_line": " db _ context _ service < i _ db _ context _ options > options , ", "after_ctx": " <%> <*> : base ( state _ manager , model , entity _ key _ factory _ source , entity _ materializer _ source , collection _ accessor _ source , property _ setter _ source , connection , batch _ preparer , batch _ executor , options , logger _ factory ) -> : base ( model , entity _ key _ factory _ source , entity _ materializer _ source , connection , batch _ preparer , batch _ executor , options , logger _ factory ) </%>", "after_line": "i _ db _ context _ options options ,", "predictions": ["db _ context _ service options ,"]}, {"before_ctx": "<%> <*> not _ null state _ manager state _ manager , not _ null db _ context _ service < i _ model > model , -> not _ null i _ model model , </%> <%> <-> not _ null clr _ collection _ accessor _ source collection _ accessor _ source , not _ null clr _ property _ setter _ source property _ setter _ source , </%> ", "before_line": " not _ null db _ context _ service < i _ db _ context _ options > options , ", "after_ctx": " <%> <-> check . not _ null ( state _ manager , nameof ( state _ manager ) ) , </%> <%> <-> check . not _ null ( collection _ accessor _ source , nameof ( collection _ accessor _ source ) ) , check . not _ null ( property _ setter _ source , nameof ( property _ setter _ source ) ) , </%>", "after_line": "not _ null i _ db _ context _ options options ,", "predictions": ["not _ null db _ context _ service < i _ db _ context _ options > options ,"]}, {"before_ctx": "<%> <-> . service </%> <%> <-> . service </%> <%> <*> data -> query </%> <%> <*> store . service -> context _ factory </%> <%> <-> . service </%> ", "before_line": " . execute _ async < t _ result > ( expression , data _ store . service , query _ context , cancellation _ token ) ; ", "after_ctx": " ", "after_line": ". execute _ async < t _ result > ( expression , data _ store , query _ context , cancellation _ token ) ;", "predictions": [". execute _ async ( expression , data _ public _ service <%> sql logger <%> static logger <+> <+> name , i , service , i , service , i , context , i , token _ <*>"]}, {"before_ctx": " ", "before_line": " private readonly db _ context _ service < db _ context > context ; ", "after_ctx": " <%> <-> _ service < db _ context > </%>", "after_line": "private readonly db _ context context ;", "predictions": ["private readonly db _ context _ service context ,"]}, {"before_ctx": "<%> <-> _ service < db _ context > </%> ", "before_line": " not _ null db _ context _ service < db _ context > context , ", "after_ctx": " <%> <-> . service </%>", "after_line": "not _ null db _ context context ,", "predictions": ["not _ null db _ context _ service db e e service"]}, {"before_ctx": "<%> <-> _ service < db _ context > </%> ", "before_line": " var entry = new entity _ entry ( context . service , state _ manager . get _ or _ create _ entry ( entity ) ) ; ", "after_ctx": " ", "after_line": "var entry = new entity _ entry ( context , state _ manager . get _ or _ create _ entry ( entity ) ) ;", "predictions": ["var entry = new entity _ entry ( context db </%> <%> _ public ) </%> </%> </%> </%> static <-> . _ . async _ ( . </@> ) ) name name name name name assert . [ . db ; ; ; STR ; ; STR"]}, {"before_ctx": " ", "before_line": " private readonly db _ context _ service < db _ context > context ; ", "after_ctx": " <%> <-> _ service < db _ context > </%>", "after_line": "private readonly db _ context context ;", "predictions": ["private readonly db _ context _ service context ) ,"]}, {"before_ctx": "<%> <-> _ service < db _ context > </%> ", "before_line": " not _ null db _ context _ service < db _ context > context ) ", "after_ctx": " ", "after_line": "not _ null db _ context context )", "predictions": ["not _ null db _ context _ service service <-> _ context"]}, {"before_ctx": " ", "before_line": " return state _ manager . entries . select ( e = > new entity _ entry ( context . service , e ) ) ; ", "after_ctx": " <%> <-> . service </%>", "after_line": "return state _ manager . entries . select ( e = > new entity _ entry ( context , e ) ) ;", "predictions": ["return state _ manager . entries . select . context <@> </@> new ; </%> </%> state context <%> <*>"]}, {"before_ctx": "<%> <-> . service </%> ", "before_line": " . select ( e = > new entity _ entry < t _ entity > ( context . service , e ) ) ; ", "after_ctx": " <%> <-> . service </%>", "after_line": ". select ( e = > new entity _ entry < t _ entity > ( context , e ) ) ;", "predictions": [". select ( e = > new entity options . -> ! readonly > entry ) <->"]}, {"before_ctx": "<%> <-> . service </%> ", "before_line": " public virtual db _ context context = > context . service ; ", "after_ctx": " ", "after_line": "public virtual db _ context context = > context ;", "predictions": ["public virtual db _ context context = > _ db < ) <->"]}, {"before_ctx": " ", "before_line": " public static db _ context _ service < i _ db _ context _ options > create _ options ( ) ", "after_ctx": " <%> <*> return new db _ context _ service < i _ db _ context _ options > ( ( ) = > -> return </%> <%> <-> ) </%>", "after_line": "public static i _ db _ context _ options create _ options ( )", "predictions": ["public static i _ db _ context _ options i _ <-> </%> </%> service service . data . data _ </%> <%>"]}, {"before_ctx": "<%> <-> db _ context _ service < </%> <%> <-> > </%> ", "before_line": " return new db _ context _ service < i _ db _ context _ options > ( ( ) = > options ) ; ", "after_ctx": " ", "after_line": "return options ;", "predictions": ["return new db _ context _ service < i _ microsoft _ ( _ model < </@> < </@> < </@> . service _ logger _ data . data _ data ( . . . ( create _ ( ; . collection , . , , . ( ( ( ( . ( . ( . . . . . . . property _ model _ options _ options , options entity entity entity entity entity entity entity , options entity , options entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity , options"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ entity _ internal ; using microsoft _ data _ entity _ utilities ; namespace microsoft _ data _ entity _ storage ", "after_ctx": " <%> <*> sources -> providers </%> <%> <*> sources -> providers </%>", "after_line": "using microsoft _ data _ entity _ storage ; namespace microsoft _ data _ entity _ internal", "predictions": ["namespace microsoft _ data _ entity _ internal ; <@> )"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ utilities ; </%> ", "before_line": " private readonly static async _ local < sql _ logger > logger = new async _ local < sql _ logger > ( ) ;  private const string context _ name = STR ; ", "after_ctx": " <%> <*> public i _ logger create _ logger ( string name ) { return logger ; } -> public i _ logger create _ logger ( string name ) = > logger ; </%> <%> <+> private static sql _ logger logger = > lazy _ initializer . ensure _ initialized ( ref logger ) ; </%> <%> <+> throw new not _ implemented _ exception ( ) ; </%>", "after_line": "private static sql _ logger logger ;", "predictions": ["private static readonly async _ local < sql _ _ ] _ name not <%> <%> context not _ check property options source _ , manager key _ </%> options"]}, {"before_ctx": "<%> <*> get _ candidate _ foreign _ key _ properties ( principal _ type , dependent _ type , navigation _ to -> immutable </%> <%> <*> principal , is _ unqiue ) -> list < property > . empty </%> <%> <*> new -> immutable _ list < </%> <%> <*> [ 0 ] -> > . empty </%> ", "before_line": " not _ null i _ read _ only _ list < i _ read _ only _ list < property > > foreign _ key _ properties , ", "after_ctx": " <%> <*> if ( ! foreign _ key _ properties . any ( ) ) -> i _ read _ only _ list < i _ read _ only _ list < property > > foreign _ key _ candidates ; </%> <%> <+> if ( foreign _ key _ properties . any ( ) ) </%> <%> <*> properties -> candidates </%> <%> <*> get -> new list < i </%> <%> <*> candidate -> read </%> <%> <+> only _ list < property > > { </%> <%> <*> ( principal _ type , dependent _ type , navigation _ to _ principal , is _ unqiue ) ; -> } ; </%>", "after_line": "not _ null i _ read _ only _ list < property > foreign _ key _ properties ,", "predictions": ["not _ null i _ read _ only _ list < i _ read _ only _ list < property > > foreign _ key _ properties ,"]}, {"before_ctx": "<%> <*> int -> int? </%> ", "before_line": " new [ ] { new [ ] { fk _ property , fk _ property } } , ", "after_ctx": " <%> <*> assert . same ( primary _ key , fk . referenced _ properties . single ( ) ) ; -> assert . equal ( 2 , fk . referenced _ properties . count ) ; </%> <%> <+> assert . equal ( STR , fk . referenced _ properties [ 0 ] . name ) ; assert . same ( typeof ( int ) , fk . referenced _ properties [ 0 ] . property _ type ) ; assert . true ( fk . referenced _ properties [ 0 ] . is _ shadow _ property ) ; assert . equal ( STR , fk . referenced _ properties [ 1 ] . name ) ; </%>", "after_line": "new [ ] { fk _ property , fk _ property } ,", "predictions": ["new [ ] { fk _ property , fk ,"]}, {"before_ctx": "<%> <+> _ internal </%> ", "before_line": " var model = new entity . metadata . internal . model ( ) ; ", "after_ctx": " ", "after_line": "var model = new model ( ) ;", "predictions": ["var model = new model ( ) ;"]}, {"before_ctx": " ", "before_line": " var model = new entity . metadata . internal . model ( ) ; ", "after_ctx": " <%> <-> create _ model _ validator ( ) . </%>", "after_line": "var model = new model ( ) ;", "predictions": ["var model = new ; reader reader ) )"]}, {"before_ctx": "<%> <-> create _ model _ validator ( ) . </%> ", "before_line": " var model = new entity . metadata . internal . model ( ) ; ", "after_ctx": " <%> <*> entity _ c . has _ base _ type ( entity _ a ) ; var discriminator _ property = entity _ a . add _ property ( STR , typeof ( int ) ) ; entity _ a . relational ( ) . discriminator _ property = discriminator _ property ; entity _ a . relational ( ) . discriminator _ value = 0 ; entity _ c . relational ( ) . discriminator _ value = 1 ; create _ model _ validator ( ) . validate ( model ) ; -> set _ base _ type ( entity _ c , entity _ a ) ; </%>", "after_line": "var model = new model ( ) ;", "predictions": ["var model = new model ( ) ;"]}, {"before_ctx": " ", "before_line": " var model = new entity . metadata . internal . model ( ) ; ", "after_ctx": " <%> <-> create _ model _ validator ( ) . </%> <%> <-> entity . metadata . internal . </%>", "after_line": "var model = new model ( ) ;", "predictions": ["var model = new ( ( . ( . </%> type . ) ;"]}, {"before_ctx": "<%> <-> entity . metadata . internal . </%> <%> <-> create _ model _ validator ( ) . </%> ", "before_line": " var model = new entity . metadata . internal . model ( ) ; ", "after_ctx": " <%> <-> create _ model _ validator ( ) . </%> <%> <-> entity . metadata . internal . </%>", "after_line": "var model = new model ( ) ;", "predictions": ["var model = new <-> ( result <%>"]}, {"before_ctx": "<%> <-> entity . metadata . internal . </%> <%> <-> create _ model _ validator ( ) . </%> ", "before_line": " var model = new entity . metadata . internal . model ( ) ; ", "after_ctx": " <%> <-> entity . metadata . internal . </%>", "after_line": "var model = new model ( ) ;", "predictions": ["var model = new model ,"]}, {"before_ctx": "<%> <-> entity . metadata . internal . </%> ", "before_line": " var model = new entity . metadata . internal . model ( ) ; ", "after_ctx": " ", "after_line": "var model = new model ( ) ;", "predictions": ["var model = new <-> </%> ] <->"]}, {"before_ctx": " ", "before_line": " var model = new entity . metadata . internal . model ( ) ; ", "after_ctx": " <%> <+> } protected override void set _ base _ type ( entity _ type entity _ type , entity _ type base _ entity _ type ) </%>", "after_line": "var model = new model ( ) ;", "predictions": ["var model = new model entity entity ;"]}, {"before_ctx": "<%> <-> , orphan . name </%> ", "before_line": " var current _ configuration _ source = entity _ type _ builders . get _ configuration _ source ( entity _ type ) ; ", "after_ctx": " <%> <+> metadata . </%> <%> <+> metadata . </%>", "after_line": "var current _ configuration _ source = entity _ type . get _ configuration _ source ( ) ;", "predictions": ["var current _ configuration _ , metadata get <%> _ ! _ query <@> entity _ fact int expression int _ , _ i ) = <@> _ ( . equals _ x bool bool _ ; _ source . value _ source . value property _ ; _ source . value _ source . value current = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ="]}, {"before_ctx": "<%> <-> ( </%> ", "before_line": " & & ! query _ model . result _ operators . any ( ) ) | | ( ! query _ model . body _ clauses . any ( ) & & ! sub _ query _ model . result _ operators . any ( ro = > ro is group _ result _ operator ) ) ) ", "after_ctx": " ", "after_line": "& & ! query _ model . result _ operators . any ( ) | | ! query _ model . body _ clauses . any ( ) & & ! sub _ query _ model . result _ operators . any ( ro = > ro is group _ result _ operator ) )", "predictions": ["& & ! query ( append ( ) ) = ) )"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <+> validate _ transaction ( ) ; </%> ", "before_line": " open _ reader = new sq _ lite _ data _ reader ( this ) ; return open _ reader ; ", "after_ctx": " ", "after_line": "return open _ reader = new sq _ lite _ data _ reader ( this ) ;", "predictions": ["return new sq _ <@> . </@> . ( sql _ ) <+> . <@> . <-> expression ;"]}, {"before_ctx": " ", "before_line": " private static readonly constructor _ info composite _ key _ ctor = typeof ( composite _ key ) . get _ type _ info ( ) . declared _ constructors . single ( ) ; public static bool is _ composite _ key ( [ not _ null ] type type ) ", "after_ctx": " <%> <-> } private struct composite _ key { public static bool operator = = ( composite _ key x , composite _ key y ) = > x . equals ( y ) ; public static bool operator ! = ( composite _ key x , composite _ key y ) = > ! x . equals ( y ) ; private readonly object [ ] values ; used _ implicitly </%>", "after_line": "private static bool is _ composite _ key ( [ not _ null ] type type )", "predictions": ["private static readonly constructor _ info composite _ key _ has ;"]}, {"before_ctx": " ", "before_line": " fact _ skip _ issue ", "after_ctx": " <%> <+> { var context = new test _ context ( ) ; func < i _ queryable < test _ entity > , int > func = queryable . count ; i _ queryable q = context . test _ entities ; var expr = expression . call ( null , func . get _ method _ info ( ) , q . expression ) ; assert . equal ( 0 , q . provider . execute < int > ( expr ) ) ; assert . equal ( 0 , ( int ) q . provider . execute ( expr ) ) ; } fact </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " new [ ] { STR + environment + STR , STR } , ", "after_ctx": " <%> <-> new [ ] { </%> <%> <-> } </%>", "after_line": "STR ,", "predictions": ["STR + environment + . . <%> </@> _ . ;"]}, {"before_ctx": "<%> <-> new [ ] { STR + environment + </%> <%> <-> STR } , </%> ", "before_line": " invoke ( type , new [ ] { STR } , services ) ; ", "after_ctx": " <%> <-> [ ] </%> <%> <*> names -> name </%> <%> <-> method _ info method = null ; for ( var i = 0 ; i < method _ names . length ; i + + ) </%>", "after_line": "invoke ( type , STR , services ) ;", "predictions": ["invoke ( type , = = = = = = builder , services . services ) ) ) ) ) ) ;"]}, {"before_ctx": "<%> <-> lambda _ </%> <%> <-> return _ </%> ", "before_line": " return expression . lambda ( expression . block ( variables , expressions ) , lambda _ expression . parameters ) ; ", "after_ctx": " ", "after_line": "return expression . block ( variables , expressions ) ;", "predictions": ["return lambda ( expression <%> variables </%> expression _ key configuration configuration ) <+>"]}, {"before_ctx": "<%> <-> lambda _ </%> ", "before_line": " inner _ shaper = expression . lambda ( new entity _ shaper _ nullable _ marking _ expression _ visitor ( ) . visit ( inner _ shaper . body ) , inner _ shaper . parameters ) ; ", "after_ctx": " ", "after_line": "inner _ shaper = new entity _ shaper _ nullable _ marking _ expression _ visitor ( ) . visit ( inner _ shaper ) ;", "predictions": ["inner _ shaper = ( model <%> expression . lambda </%> _ string ( _ entity _ entity ) i _ ) ( = = = ) key _ ( . var entity entity _ ( inner ( > > inner _ argument _ ) > , _ ) ( inner _ ) ( inner > > inner _ ) ( inner > inner _ ) ( inner > inner _ ) ( inner _ ) ( inner > inner _ ) ( inner > inner _ ) ( inner > inner _ ) ( inner _ ) ( inner"]}, {"before_ctx": "<%> <*> result -> outer . shaper </%> <%> <*> body -> expression </%> ", "before_line": " shaper _ expression . body , ", "after_ctx": " <%> <-> outer . shaper _ expression = expression . lambda ( result _ body , shaper _ expression . parameters ) ; </%> <%> <-> lambda _ </%> <%> <-> lambda _ </%> <%> <-> lambda _ </%>", "after_line": "shaper _ expression ,", "predictions": ["shaper _ expression ,"]}, {"before_ctx": "<%> <*> get -> store </%> <%> <*> base -> type </%> <%> <-> ( store </%> <%> <*> type ) -> base </%> ", "before_line": " var old _ behavior = ! parameters . precision _ and _ scale _ overriden ; ", "after_ctx": " ", "after_line": "var old _ behavior = ! precision _ and _ scale _ overriden ;", "predictions": ["var old _ behavior reference reference old <%> var type create <-> = parameters <->"]}, {"before_ctx": "<%> <-> _ switch </%> <%> <+> pickle _ builder . has _ one ( e = > e . big _ mak ) . with _ many ( e = > e . pickles ) ; </%> <%> <*> var big _ mak _ builder = model _ builder . entity < big _ mak > ( ) ; -> model _ builder . entity < big _ mak > ( ) . ignore ( b = > b . bun ) ; </%> ", "before_line": " var model _ clone = model _ builder . model . clone ( ) ; var pickle _ clone = model _ clone . get _ entity _ type ( pickle . name ) ; ", "after_ctx": " <%> <+> var initial _ keys = pickle _ clone . get _ keys ( ) ; </%> <%> <*> var initial _ foreign _ key = pickle _ clone . get _ foreign _ keys ( ) ; var initial _ referencing _ foreign _ key = pickle _ clone . find _ referencing _ foreign _ keys ( ) ; var initial _ keys = pickle _ clone . get _ keys ( ) ; pickle _ builder . base _ type < ingredient > ( ) ; assert . same ( pickle . base _ type . clr _ type , typeof ( ingredient ) ) ; -> var initial _ foreign _ keys = pickle _ clone . get _ foreign _ keys ( ) ; </%> <%> <+> var initial _ referencing _ foreign _ keys = pickle _ clone . find _ referencing _ foreign _ keys ( ) ; </%>", "after_line": "var pickle _ clone = model _ builder . model . clone ( ) . get _ entity _ type ( pickle . name ) ;", "predictions": ["var model _ clone = model _ builder . model . clone ( ) ; var pickle _ clone = model _ clone . get _ entity _ type ( pickle . name ) ;"]}, {"before_ctx": " ", "before_line": " public class relationship _ discovery _ convention : i _ entity _ type _ convention , i _ entity _ type _ member _ ignored _ convention , i _ navigation _ removed _ convention , i _ base _ type _ convention ", "after_ctx": " <%> <+> if ( ! entity _ type _ builder . metadata . has _ clr _ type ) { return entity _ type _ builder ; } var relationship _ candidates = find _ relationship _ candidates ( entity _ type _ builder ) ; relationship _ candidates = remove _ incompatible _ with _ existing _ relationships ( relationship _ candidates , entity _ type _ builder ) ; </%>", "after_line": "public class relationship _ discovery _ convention : i _ entity _ type _ convention , i _ base _ type _ convention , i _ navigation _ removed _ convention , i _ entity _ type _ member _ ignored _ convention", "predictions": ["public class relationship _ discovery _ convention : i _ ) _ ( _ member , _ = i , , , _ base _ ( _ ="]}, {"before_ctx": " ", "before_line": " sql _ builder . append ( value . to _ string ( ) ) ; ", "after_ctx": " <%> <*> . get _ type ( -> is bool bool _ value </%> <%> <-> = = typeof ( bool ) ) </%> <%> <-> ( ( </%> <%> <*> ) -> _ </%> <%> <-> ) </%> <%> <*> $ -> STR ) . append ( value ) . append ( </%>", "after_line": "sql _ builder . append ( value ) ;", "predictions": ["sql _ builder . i <%> <%> </%> _ } ; ; ; ; ;"]}, {"before_ctx": "<%> <-> STR </%> ", "before_line": " sql _ builder . append ( root _ reference _ expression . to _ string ( ) ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%> <%> <-> . to _ string ( ) </%>", "after_line": "sql _ builder . append ( root _ reference _ expression ) ;", "predictions": ["sql _ builder . ; . ; new , root _ ; </%> </%> ,"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> ", "before_line": " sql _ builder . append ( key _ access _ expression . to _ string ( ) ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%>", "after_line": "sql _ builder . append ( key _ access _ expression ) ;", "predictions": ["sql _ builder . <-> </%> </%> reference ;"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> <%> <-> . to _ string ( ) </%> ", "before_line": " sql _ builder . append ( entity _ projection _ expression . to _ string ( ) ) ; ", "after_ctx": " ", "after_line": "sql _ builder . append ( entity _ projection _ expression ) ;", "predictions": ["sql _ builder . access ( builder _ = _ new . inner _ body ) result result result result >"]}, {"before_ctx": "<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . should _ retry _ on ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception ) ; </%> ", "before_line": " execution _ strategy _ mock . object , ( ) = > ", "after_ctx": " ", "after_line": "execution _ strategy _ mock , ( ) = >", "predictions": ["execution _ strategy _ mock . object , ( ) = >"]}, {"before_ctx": "<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . get _ next _ delay ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > time _ span . from _ ticks ( 0 ) ) ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception , get _ next _ delay : e = > time _ span . from _ ticks ( 0 ) ) ; </%> ", "before_line": " execution _ strategy _ mock . object , ( ) = > ", "after_ctx": " ", "after_line": "execution _ strategy _ mock , ( ) = >", "predictions": ["execution _ strategy _ mock . object , execution _ strategy _ mock . object ,"]}, {"before_ctx": "<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . get _ next _ delay ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > time _ span . from _ ticks ( 0 ) ) ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception , get _ next _ delay : e = > time _ span . from _ ticks ( 0 ) ) ; </%> ", "before_line": " execution _ strategy _ mock . object , ( ) = > ", "after_ctx": " ", "after_line": "execution _ strategy _ mock , ( ) = >", "predictions": ["execution _ strategy _ mock . object , execution _ strategy _ mock . object ,"]}, {"before_ctx": "<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) , 2 ) { call _ base = true } ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , retry _ count : 2 , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception ) ; </%> ", "before_line": " execution _ strategy _ mock . object , ( ) = > ", "after_ctx": " ", "after_line": "execution _ strategy _ mock , ( ) = >", "predictions": ["execution _ strategy _ mock . object , ( ) = >"]}, {"before_ctx": "<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . should _ retry _ on ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception ) ; </%> ", "before_line": " execution _ strategy _ mock . object , ct = > ", "after_ctx": " ", "after_line": "execution _ strategy _ mock , ct = >", "predictions": ["ct = >"]}, {"before_ctx": "<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . get _ next _ delay ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > time _ span . from _ ticks ( 0 ) ) ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception , get _ next _ delay : e = > time _ span . from _ ticks ( 0 ) ) ; </%> ", "before_line": " execution _ strategy _ mock . object , ct = > ", "after_ctx": " ", "after_line": "execution _ strategy _ mock , ct = >", "predictions": ["execution = >"]}, {"before_ctx": "<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) ) { call _ base = true } ; execution _ strategy _ mock . setup ( m = > m . get _ next _ delay ( it . is _ any < exception > ( ) ) ) . returns < exception > ( e = > time _ span . from _ ticks ( 0 ) ) ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception , get _ next _ delay : e = > time _ span . from _ ticks ( 0 ) ) ; </%> ", "before_line": " execution _ strategy _ mock . object , ct = > ", "after_ctx": " ", "after_line": "execution _ strategy _ mock , ct = >", "predictions": ["execution = >"]}, {"before_ctx": "<%> <*> var execution _ strategy _ mock = new mock < test _ execution _ strategy > ( create _ context ( ) , 2 ) { call _ base = true } ; execution _ strategy _ mock . protected ( ) . setup < bool > ( STR , it _ expr . is _ any < exception > ( ) ) . returns < exception > ( e = > e is argument _ out _ of _ range _ exception ) ; -> var execution _ strategy _ mock = new test _ execution _ strategy ( </%> <%> <+> create _ context ( ) , retry _ count : 2 , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception ) ; </%> ", "before_line": " execution _ strategy _ mock . object , ct = > ", "after_ctx": " ", "after_line": "execution _ strategy _ mock , ct = >", "predictions": ["ct = >"]}, {"before_ctx": "<%> <*> = new column _ expression ( relational _ annotation _ provider . for ( discriminator _ property ) . column _ name , -> = select _ expression . bind _ property _ to _ select _ expression ( </%> ", "before_line": " select _ expression . get _ table _ for _ query _ source ( query _ source ) ) ; ", "after_ctx": " ", "after_line": "query _ source ) ;", "predictions": ["select _ expression . get _ table _ for _ query _ property expression = hash ( hash ( string ) ) ) ) command ;"]}, {"before_ctx": "<%> <*> alias -> expression bind </%> <%> <*> expression create -> property _ to </%> <%> <*> alias -> select </%> <%> <*> = > new alias _ expression ( new column _ expression ( relational _ annotation _ provider . for ( property ) . column _ name , -> = > select _ expression . bind _ property _ to _ select _ expression ( </%> ", "before_line": " select _ expression . get _ table _ for _ query _ source ( query _ source ) ) ) ; ", "after_ctx": " <%> <*> create -> bind _ property _ to </%> <%> <*> alias -> select </%>", "after_line": "query _ source ) ;", "predictions": ["select _ expression . get _ table _ for _ query _ sql ( reference ) on _ new _ context e e"]}, {"before_ctx": "<%> <+> { check . not _ null ( column _ reference _ expression , nameof ( column _ reference _ expression ) ) ; relational _ command _ builder . append ( sql _ generator . delimit _ identifier ( column _ reference _ expression . table . alias ) ) . append ( STR ) . append ( sql _ generator . delimit _ identifier ( column _ reference _ expression . name ) ) ; return column _ reference _ expression ; } </%> ", "before_line": " if ( ! alias _ expression . is _ projected ) { visit ( alias _ expression . expression ) ; if ( alias _ expression . alias ! = null ) { relational _ command _ builder . append ( STR ) ; } ", "after_ctx": " ", "after_line": "visit ( alias _ expression . expression ) ; if ( alias _ expression . alias ! = null ) { relational _ command _ builder . append ( STR ) ;", "predictions": ["visit ( alias _ expression . expression ) ; if ( alias _ . ( alias ! next null > ! _ is _ ; ( , > > , alias _ is _ ; ( , > > , , out out out out out out out out out out out out out out out out out out out out out , , out out is _ is _ span >"]}, {"before_ctx": "<%> <*> node -> binary _ expression </%> <%> <*> node -> binary _ expression </%> ", "before_line": " func < column _ expression , list < expression > , expression > in _ expression _ factory ) ", "after_ctx": " <%> <-> expression left _ non _ column _ expression , right _ non _ column _ expression ; </%>", "after_line": "func < expression , list < expression > , expression > in _ expression _ factory )", "predictions": ["func < expression > in _ expression _ factory )"]}, {"before_ctx": " ", "before_line": " select top ( p ) [ c ] . [ customer _ id ] , [ c ] . [ company _ name ] , coalesce ( [ c ] . [ region ] , n ' zz ' ) as [ coalesce ] ", "after_ctx": " <%> <*> coalesce -> c </%> <%> <*> coalesce -> c </%>", "after_line": "select top ( p ) [ c ] . [ customer _ id ] , [ c ] . [ company _ name ] , coalesce ( [ c ] . [ region ] , n ' zz ' ) as [ c ]", "predictions": ["select top ( p ) . [ customer _ id ] ] <%> </%> <-> </%> _ create expression <*> <%> select -> ( context context ) expression n column _ create ( _ of ( _ of ( context = context ' = context ' zz . _ ' . ' . . ' . ' . . ' . ' . ' . ' < ) < argument < > . _ region ( argument < > . _ region ( argument < > . > ' ( argument < > = _ region ( argument < >"]}, {"before_ctx": "<%> <*> projection -> condition </%> <%> <*> conditional -> as </%> <%> <*> expression -> projection </%> ", "before_line": " expression . condition ( new exists _ expression ( inner _ select _ expression ) , expression . constant ( true ) , expression . constant ( false ) , typeof ( bool ) ) ) ; ", "after_ctx": " ", "after_line": "new exists _ expression ( inner _ select _ expression ) ) ;", "predictions": ["expression . condition ( new exists _ expression ( inner _ async ( inner <%> [ select ( true <%> [ <%> <%> return false <%> expression _ execute _ . _ < <%> _ _ _ ( _ of _ ( _ _ ( <%> _ _ _ ( <%> _ _ of _ _ exception _ ( exception _ of _ ( _ <%> _ ( _ of _ ( _ of _ ( _ of _ ( argument _ ( _ ( _ select _ , _ ( _ select _ ( , <%> _ select _"]}, {"before_ctx": "<%> <+> item _ property . lift _ expression _ from _ subquery ( item _ select _ expression ) ) ; </%> <%> <*> projection -> condition </%> <%> <*> conditional -> as </%> <%> <*> expression -> projection </%> ", "before_line": " expression . condition ( new exists _ expression ( outer _ select _ expression ) , expression . constant ( true ) , expression . constant ( false ) , typeof ( bool ) ) ) ; ", "after_ctx": " <%> <*> projection -> condition </%> <%> <*> conditional -> as </%> <%> <*> expression -> projection </%> <%> <-> expression . condition ( </%> <%> <*> , -> ) ; </%> <%> <-> expression . constant ( true ) , </%>", "after_line": "new exists _ expression ( outer _ select _ expression ) ) ;", "predictions": ["expression . condition ( new exists _ expression ( outer _ </%> = _ _ _ ( ( _ <*> ( -> ( bool . </%> ( next . bool ( 1 ( bool ) ) e = ; ( bool = get = get = range ( bool . bool . bool . bool ( bool . bool ( get . ] ( range ( bool ( bool . bool ( bool . bool ( 1 ( bool . </%> ( 1 ) e ) e ) e ) e ) e ) e = range ( bool ("]}, {"before_ctx": " ", "before_line": " = > equals ( expression , other . expression ) & & string . equals ( alias , other . alias ) ; ", "after_ctx": " <%> <*> return ( expression . get _ hash _ code ( ) * NUM ) ^ ( alias ? . get _ hash _ code ( ) ? ? 0 ) ; -> return ( expression . get _ hash _ code ( ) * NUM ) ^ alias . get _ hash _ code ( ) ; </%> <%> <+> public override string to _ string ( ) = > alias ! = null ? STR + expression + STR + alias : expression . to _ string ( ) ; </%>", "after_line": "= > string . equals ( alias , other . alias ) & & equals ( expression , other . expression ) ;", "predictions": ["= > equals ( expression , other . expression ) & , > > > = out = out = out ( out from ) ; ; ; >"]}, {"before_ctx": " ", "before_line": " context . add _ range ( new [ ] { entity } ) ; context . add _ range ( new object [ ] { entity } ) ; ", "after_ctx": " <%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%>", "after_line": "context . add _ range ( entity ) ; context . add _ range ( entity ) ;", "predictions": ["context . add _ range ( new [ ] { entity ( property column property table <-> <-> table <-> <-> result <-> ( column . column . , ? <*> table </%> { append append append append { append append append { append append append append { append column append append { append column append e ) e e e e e e e ) ) ) ) ) e ) ) e e ) e ) e e e e e e e e e e e e e e e e e e e e e e"]}, {"before_ctx": "<%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%> ", "before_line": " context . attach _ range ( new [ ] { entity } ) ; context . attach _ range ( new object [ ] { entity } ) ; ", "after_ctx": " <%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%>", "after_line": "context . attach _ range ( entity ) ; context . attach _ range ( entity ) ;", "predictions": ["context . attach _ range ( new [ ] { entity table result execute request ! command builder STR STR ) STR"]}, {"before_ctx": "<%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%> ", "before_line": " context . update _ range ( new [ ] { entity } ) ; context . update _ range ( new object [ ] { entity } ) ; ", "after_ctx": " <%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%>", "after_line": "context . update _ range ( entity ) ; context . update _ range ( entity ) ;", "predictions": ["context . update _ range ( new [ ] { entity <*> ) ) ) result result result > <-> > <-> i is : { { exception < new < < > > { exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception ) ,"]}, {"before_ctx": "<%> <-> new [ ] { </%> <%> <-> } </%> <%> <-> new object [ ] { </%> <%> <-> } </%> ", "before_line": " context . remove _ range ( new [ ] { entity } ) ; context . remove _ range ( new object [ ] { entity } ) ; ", "after_ctx": " ", "after_line": "context . remove _ range ( entity ) ; context . remove _ range ( entity ) ;", "predictions": ["context . remove _ range ( new [ ] { entity < <@> { -> column property property query <*> for for = new context [ ] ( = select ] -> <-> table </%> </%> </%> </%> </%> </%> </%> </%> </%> operation </%> </%> </%> > table </%> </%> </%> ) > > > command ! command column ! ! append append range ;"]}, {"before_ctx": "<%> <-> i _ </%> ", "before_line": " return new table _ result _ wrapper ( table . execute ( operation , null , request _ context . operation _ context ) ) ; ", "after_ctx": " <%> <-> i _ </%> <%> <*> return task . run < i _ table _ result > ( ( ) = > new table _ result _ wrapper ( table . execute _ async ( operation , null , request _ context . operation _ context , cancellation _ token ) . result ) -> return task . run ( </%> <%> <+> ( ) = > table . execute _ async ( operation , null , request _ context . operation _ context , cancellation _ token ) </%>", "after_line": "return table . execute ( operation , null , request _ context . operation _ context ) ;", "predictions": ["return new table _ result _ wrapper ( table . execute ( operation > is is _ = ) . operation _ = . operation _ = . operation . , argument _ table _ get > ( table ) m m ) m _ = . operation ( table ) m _ = ) m m table ) m _ = from . operation _ = > ( table ) m _ = ) m m table ) m"]}, {"before_ctx": "<%> <-> i _ </%> <%> <*> return new table _ result _ wrapper ( -> return </%> <%> <-> ) </%> <%> <-> i _ </%> ", "before_line": " return task . run < i _ table _ result > ( ( ) = > new table _ result _ wrapper ( table . execute _ async ( operation , null , request _ context . operation _ context , cancellation _ token ) . result ) ", "after_ctx": " ", "after_line": "return task . run ( ( ) = > table . execute _ async ( operation , null , request _ context . operation _ context , cancellation _ token )", "predictions": ["return new table _ result _ wrapper ( table . execute ( * ) * from . request </%> expression . as expression reference out out out out out )"]}, {"before_ctx": " ", "before_line": " var results = setup _ results < i _ table _ result > ( new [ ] { test _ table _ result . ok ( ) , test _ table _ result . ok ( ) } ) ; ", "after_ctx": " <%> <-> i _ </%>", "after_line": "var results = setup _ results ( new [ ] { test _ table _ result . ok ( ) , test _ table _ result . ok ( ) } ) ;", "predictions": ["var results = setup _ results < i _ table _ , func expression expression ] = [ name <%> -> [ , _ [ new } } </%> </%> -> ( _ _ _ expression ( <%> from expression expression ( <*> expression <%> expression ( <%> expression <%> expression ( <%> expression <%> expression context . table ( . table ( . table . column </%> ( ( ( ( ( ) create ) ) ) ) ;"]}, {"before_ctx": " ", "before_line": " var results = setup _ results < i _ table _ result > ( new [ ] { test _ table _ result . ok ( ) , test _ table _ result . ok ( ) } ) ; ", "after_ctx": " <%> <-> i _ </%>", "after_line": "var results = setup _ results ( new [ ] { test _ table _ result . ok ( ) , test _ table _ result . ok ( ) } ) ;", "predictions": ["var results = setup _ results < i _ table _ operation > expression expression expression factory list non left { column , property _ <%> _ [ new } } -> -> _ table expression _ ? ) string string ) string string ) string _ table + new ( _ NUM ) string string ; <%> <%> from ) ; ; expression"]}, {"before_ctx": "<%> <*> object -> i _ operation _ report _ handler </%> ", "before_line": " var unwrapped _ report _ handler = forwarding _ proxy . unwrap < i _ operation _ report _ handler > ( report _ handler ) ; reporter = new operation _ reporter ( unwrapped _ report _ handler ) ; ", "after_ctx": " ", "after_line": "reporter = new operation _ reporter ( report _ handler ) ;", "predictions": ["reporter = new operation _ reporter ( forwarding _ report _ ( </%> </%> _ proxy new object new object <@> <%> </%> _ ) expression expression ( unwrapped expression result ;"]}, {"before_ctx": "<%> <*> object -> i _ operation _ result _ handler </%> ", "before_line": " result _ handler = forwarding _ proxy . unwrap < i _ operation _ result _ handler > ( result _ handler ) ; ", "after_ctx": " ", "after_line": "result _ handler = result _ handler ;", "predictions": ["result _ handler = forwarding _ proxy . unwrap ( result <%> handler ;"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ scaffolding _ internal ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ scaffolding _ internal _ configuration ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ scaffolding _ configuration _ internal", "predictions": ["namespace microsoft _ entity _ framework _ internal _ configuration"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ scaffolding _ internal ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ scaffolding _ internal _ configuration ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ scaffolding _ configuration _ internal", "predictions": ["namespace microsoft _ entity _ framework _ internal _ configuration"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ scaffolding _ internal ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ scaffolding _ internal _ configuration ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ scaffolding _ configuration _ internal", "predictions": ["namespace microsoft _ entity _ framework _ internal _ configuration"]}, {"before_ctx": " ", "before_line": " using ( var context = fixture . create _ context ( ) ) ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "using ( var context = create _ context ( ) )", "predictions": ["using ( var context = create _ context ( ) )"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " using ( var context = fixture . create _ context ( ) ) ", "after_ctx": " ", "after_line": "using ( var context = create _ context ( ) )", "predictions": ["using ( var context = create _ context ( ) )"]}, {"before_ctx": " ", "before_line": " using ( var context = fixture . create _ context ( ) ) ", "after_ctx": " <%> <+> protected adventure _ works _ context create _ context ( ) = > fixture . create _ context ( ) ; </%>", "after_line": "using ( var context = create _ context ( ) )", "predictions": ["using ( var context = fixture . create _ context )"]}, {"before_ctx": " ", "before_line": " using ( var context = fixture . create _ context ( ) ) ", "after_ctx": " <%> <*> public class command _ configuration _ test _ fixture : shared _ store _ fixture _ base < db _ context > -> protected db _ context create _ context ( ) = > fixture . create _ context ( ) ; </%> <%> <+> public class command _ configuration _ test _ fixture : shared _ store _ fixture _ base < poolable _ db _ context > </%>", "after_line": "using ( var context = create _ context ( ) )", "predictions": ["using ( var context = fixture . create _ context )"]}, {"before_ctx": " ", "before_line": " public override void apply ( internal _ property _ builder property _ builder , key _ attribute attribute ) ", "after_ctx": " <%> <+> property _ builder </%>", "after_line": "public override internal _ property _ builder apply ( internal _ property _ builder property _ builder , key _ attribute attribute )", "predictions": ["public override internal _ property _ builder apply ( internal _ property _ builder property _ builder , database _ attribute attribute )"]}, {"before_ctx": " ", "before_line": " public override void apply ( internal _ property _ builder property _ builder , concurrency _ check _ attribute attribute ) ", "after_ctx": " <%> <+> return property _ builder ; </%>", "after_line": "public override internal _ property _ builder apply ( internal _ property _ builder property _ builder , concurrency _ check _ attribute attribute )", "predictions": ["public override concurrency _ check _ attribute apply ( internal _ property _ . ( _ . = <+> _ . = <+> _ builder ) )"]}, {"before_ctx": "<%> <*> apply ( entity _ type _ builder , attribute ) ; -> entity _ type _ builder = apply ( entity _ type _ builder , attribute ) ; </%> <%> <+> if ( entity _ type _ builder = = null ) { break ; } </%> ", "before_line": " public abstract void apply ( [ not _ null ] internal _ entity _ type _ builder entity _ type _ builder , [ not _ null ] t _ attribute attribute ) ; ", "after_ctx": " ", "after_line": "public abstract internal _ entity _ type _ builder apply ( [ not _ null ] internal _ entity _ type _ builder entity _ type _ builder , [ not _ null ] t _ attribute attribute ) ;", "predictions": ["public abstract void apply ( [ not _ null ] internal _ entity _ ( _ context entity _ ( entity _ entity _ ( _ ( ) ) < -> < not is not _ ) ) > ;"]}, {"before_ctx": " ", "before_line": " public override void apply ( internal _ property _ builder property _ builder , required _ attribute attribute ) ", "after_ctx": " <%> <+> return property _ builder ; </%>", "after_line": "public override internal _ property _ builder apply ( internal _ property _ builder property _ builder , required _ attribute attribute )", "predictions": ["public override required _ attribute apply ( internal _ property _ builder property _ builder , override override override override override override override _ ( </@> _ . _ . ( _ . _ . ( _ . = </@> . <*> ; <*> _ builder type > > > > base _ context >"]}, {"before_ctx": " ", "before_line": " public override void apply ( internal _ property _ builder property _ builder , database _ generated _ attribute attribute ) ", "after_ctx": " <%> <+> return property _ builder ; </%>", "after_line": "public override internal _ property _ builder apply ( internal _ property _ builder property _ builder , database _ generated _ attribute attribute )", "predictions": ["public override database _ generated _ attribute apply ( internal _ property _ context ( _ context = > ( > ( > ( property _ not _ builder property _ builder attribute ; ] ( <@> _ not _ builder entity ) )"]}, {"before_ctx": "<%> <*> apply ( property _ builder , attribute ) ; -> property _ builder = apply ( property _ builder , attribute ) ; </%> <%> <+> if ( property _ builder = = null ) { break ; } </%> ", "before_line": " public abstract void apply ( [ not _ null ] internal _ property _ builder property _ builder , [ not _ null ] t _ attribute attribute ) ; ", "after_ctx": " ", "after_line": "public abstract internal _ property _ builder apply ( [ not _ null ] internal _ property _ builder property _ builder , [ not _ null ] t _ attribute attribute ) ;", "predictions": ["public abstract void apply ( [ not _ null ] internal _ entity _ builder entity _ builder attribute _ builder attribute _ builder db _ context db _ context db _ context db _ context db _ context db _ context db _ context ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%> <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> <%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <+> conditional _ fact public virtual void project _ reference _ that _ itself _ has _ query _ filter _ with _ another _ reference ( ) { var results = context . order _ details . select ( od = > od . order ) . to _ list ( ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> var exception = record . exception ( ( ) = > context . set < list _ filter > ( ) . to _ list ( ) ) ; assert . true ( exception is invalid _ operation _ exception | | exception is argument _ null _ exception ) ; -> assert . throws < null _ reference _ exception > ( ( ) = > context . set < list _ filter > ( ) . to _ list ( ) ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >", "predictions": ["where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ <+> _ , >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >", "predictions": ["where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >", "predictions": ["where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >", "predictions": ["where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >", "predictions": ["where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ entity _ builder > ", "after_ctx": " ", "after_line": "where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >", "predictions": ["where t _ entity _ builder : model _ builder . entity _ builder _ base < t _ metadata _ builder <@> t _ -> _ builder >"]}, {"before_ctx": " ", "before_line": " public static model _ builder . entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder , ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "public static entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this entity _ builder _ base < t _ metadata _ builder > builder ,", "predictions": ["public static model _ builder . entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder ,"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ metadata _ builder : metadata _ builder < entity _ type , t _ metadata _ builder >", "predictions": ["where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " public static model _ builder . entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder , ", "after_ctx": " <%> <-> model _ builder . </%>", "after_line": "public static entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this entity _ builder _ base < t _ metadata _ builder > builder ,", "predictions": ["public static model _ builder . entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder ,"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ metadata _ builder : metadata _ builder < entity _ type , t _ metadata _ builder >", "predictions": ["where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ metadata _ builder : metadata _ builder < entity _ type , t _ metadata _ builder >", "predictions": ["where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ metadata _ builder : metadata _ builder < entity _ type , t _ metadata _ builder >", "predictions": ["where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > ", "after_ctx": " ", "after_line": "where t _ metadata _ builder : metadata _ builder < entity _ type , t _ metadata _ builder >", "predictions": ["where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type add _ type <@> <*> _ <+> _ builder >"]}, {"before_ctx": " ", "before_line": " public static model _ builder . entity _ builder _ base < t _ metadata _ builder > table _ name < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder , ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "public static entity _ builder _ base < t _ metadata _ builder > table _ name < t _ metadata _ builder > ( not _ null this entity _ builder _ base < t _ metadata _ builder > builder ,", "predictions": ["public static model _ builder . entity _ builder _ base < t _ metadata _ builder > table _ name < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder ,"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ metadata _ builder : metadata _ builder < entity _ type , t _ metadata _ builder >", "predictions": ["where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " where t _ metadata _ builder : model _ builder . metadata _ builder < entity _ type , t _ metadata _ builder > ", "after_ctx": " <%> <-> model _ builder . </%> <%> <-> model _ builder . </%>", "after_line": "where t _ metadata _ builder : metadata _ builder < entity _ type , t _ metadata _ builder >", "predictions": ["where t _ metadata _ builder : metadata _ builder . metadata _ builder < entity _ type , t _ metadata _ builder >"]}, {"before_ctx": "<%> <-> model _ builder . </%> <%> <-> model _ builder . </%> ", "before_line": " public static model _ builder . entity _ builder < t _ entity > timestamp < t _ entity > ( [ not _ null ] this model _ builder . entity _ builder < t _ entity > builder , [ not _ null ] string name , bool shadow _ property = false ) ", "after_ctx": " ", "after_line": "public static entity _ builder < t _ entity > timestamp < t _ entity > ( [ not _ null ] this entity _ builder < t _ entity > builder , [ not _ null ] string name , bool shadow _ property = false )", "predictions": ["public static model _ builder . entity _ builder < t _ entity > timestamp < t _ entity > ( [ not _ null ] this model _ builder . entity _ builder < t _ entity > builder , [ not _ null ] string name , bool shadow _ property = this not not not ( this not _ . </%> builder > builder _ builder model > to static this not shadow _ property static this not shadow _ property static this not shadow _ property static this not shadow _ property static this not shadow"]}, {"before_ctx": "<%> <*> guid -> random </%> <%> <*> _ -> . </%> <%> <-> . server </%> ", "before_line": " strings . format _ no _ value _ generator ( STR , STR , STR , STR ) , ", "after_ctx": " <%> <-> _ on _ add </%> <%> <-> _ on _ add </%>", "after_line": "strings . format _ no _ value _ generator ( STR , STR , STR ) ,", "predictions": ["random . format _ no _ value _ generator ( STR , STR , STR ) ,"]}, {"before_ctx": "<%> <+> validate _ mapping ( resolved _ mapping , property ) ; return resolved _ mapping ; </%> ", "before_line": " ? ? find _ mapping _ with _ conversion ( new concrete _ type _ mapping _ info ( property ) ) ; ", "after_ctx": " <%> <+> , null </%> <%> <+> , null </%>", "after_line": "? ? find _ mapping _ with _ conversion ( new concrete _ type _ mapping _ info ( property ) , property ) ;", "predictions": ["? find _ mapping _ with _ conversion ( property ) ;"]}, {"before_ctx": " ", "before_line": " ? ? find _ mapping _ with _ conversion ( new concrete _ relational _ type _ mapping _ info ( property ) ) ; ", "after_ctx": " <%> <+> , null </%> <%> <+> , null </%> <%> <+> , null </%>", "after_line": "? ? find _ mapping _ with _ conversion ( new concrete _ relational _ type _ mapping _ info ( property ) , property ) ;", "predictions": ["? ? find _ mapping _ with _ conversion ( new concrete _ relational _ type _ mapping _ info </%> property builder builder builder builder builder builder builder entity builder builder builder builder new _ relational _ type _ , > entity metadata metadata entity metadata metadata <@> _ , ) type"]}, {"before_ctx": "<%> <*> collection -> enumerable </%> ", "before_line": " navigation . name , navigation . declaring _ entity _ type . name , property . property _ type . full _ name , navigation . get _ target _ type ( ) . name ) ) ; ", "after_ctx": " <%> <+> display _ </%> <%> <+> ( ) </%> <%> <-> full _ </%> <%> <+> display _ </%> <%> <+> ( ) </%>", "after_line": "navigation . name , navigation . declaring _ entity _ type . name , property . property _ type . name , navigation . get _ target _ type ( ) . name ) ) ;", "predictions": ["navigation . name , navigation . declaring _ entity _ type . name , property . property _ type . full _ name , navigation . get _ target _ type ( ) . name ) ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ issue"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ issue"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ where _ max _ od . order _ id , [ od ] . product _ id ) = = [ od ] . order _ id ) ' STR ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ where _ min _ od . order _ id , [ od ] . product _ id ) = = [ od ] . product _ id ) ' STR </%>", "after_line": "conditional _ theory", "predictions": ["conditional STR"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ where _ max _ od . order _ id , [ od ] . product _ id ) = = [ od ] . order _ id ) ' STR </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ where _ min _ od . order _ id , [ od ] . product _ id ) = = [ od ] . product _ id ) ' STR ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ </%> ( var ( var ( var ; ) = <%> , ) = <%> var ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ start ( o ) = = \\ STR ) ] ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ start ( value ( system . char [ ] ) ) = = \\ STR ) ] </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ </%> _ <*> , conditional _ theory id = = . trim [ start . trim _ start ) = = _ list . foreach ( list ) ;"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ start ( o ) = = \\ STR ) ] </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ start ( value ( system . char [ ] ) ) = = \\ STR ) ] ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ name _ <%> ( value ) = = id = = [ = = value [ = ] . char <@> ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ end ( r ) = = \\ STR ) ] ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ end ( value ( system . char [ ] ) ) = = \\ STR ) ] </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ start _ where . contact _ cannot model ) >"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ end ( r ) = = \\ STR ) ] </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim _ end ( value ( system . char [ ] ) ) = = \\ STR ) ] ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ cannot _ <*> _ where model _ = </%> -> type model type model type <%>"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim ( o ) = = \\ STR ) ] ", "after_ctx": " <%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim ( value ( system . char [ ] ) ) = = \\ STR ) ] </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ cannot _ eval _ ; , try base base base base base base property property _ <%> _ , id"]}, {"before_ctx": "<%> <-> _ skip _ issue _ cannot _ eval _ where . contact _ title . trim ( o ) = = \\ STR ) ] </%> ", "before_line": " conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ title . trim ( value ( system . char [ ] ) ) = = \\ STR ) ] ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue _ cannot _ eval _ where . contact _ start . trim ( value ( system <@> ] property ) . ) = . var STR ) context"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ name _ builder"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ <%> _ t _ </%>"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ metadata"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ issue"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ entity"]}, {"before_ctx": " ", "before_line": " public class model _ builder : i _ model _ change _ listener , i _ model _ builder < model _ builder > ", "after_ctx": " <%> <+> : this ( model , new conventions _ dispatcher ( ) ) </%>", "after_line": "public class model _ builder : i _ model _ builder < model _ builder >", "predictions": ["public class model _ <%> change _ builder _ where _ </%> ]"]}, {"before_ctx": " ", "before_line": " private void entity _ type _ added ( internal _ entity _ builder builder ) ", "after_ctx": " <%> <*> model _ change _ listener -> conventions </%> <%> <*> model _ change _ listener -> builder = conventions </%> <%> <+> return builder ; </%>", "after_line": "private internal _ entity _ builder entity _ type _ added ( internal _ entity _ builder builder )", "predictions": ["private internal _ entity _ ) entity ( ( ( ( ("]}, {"before_ctx": " ", "before_line": " public virtual void apply ( internal _ entity _ builder entity _ builder ) ", "after_ctx": " <%> <-> var name = entity _ type . name ; </%>", "after_line": "public virtual internal _ entity _ builder apply ( internal _ entity _ builder entity _ builder )", "predictions": ["public virtual void apply <%> internal _ entity _ query metadata _ . ]"]}, {"before_ctx": "<%> <-> task < </%> <%> <-> > </%> <%> <-> _ async </%> <%> <*> database -> store </%> ", "before_line": " return task . from _ result ( new context ( service _ provider , options ) ) ; ", "after_ctx": " ", "after_line": "return new context ( service _ provider , options ) ;", "predictions": ["return new context ( service ( service ( return </%> ] ] ] ] ] ] ] ] ] ] ] ] ) ;"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " public abstract class internal _ metadata _ builder < t _ metadata > where t _ metadata : annotatable ", "after_ctx": " <%> <-> private readonly t _ metadata metadata ; </%> <%> <*> t _ metadata -> annotatable </%>", "after_line": "public abstract class internal _ metadata _ builder", "predictions": ["public abstract class internal <%> </%> <%> async , _ )"]}, {"before_ctx": " ", "before_line": " var field _ info = try _ match _ field _ name ( property _ base . declaring _ type . model , type , property _ base . clr _ type , property _ base . name ) ; ", "after_ctx": " <%> <*> model model -> property _ base property _ base </%> <%> <*> , type property _ type , string property _ name ) -> ) </%>", "after_line": "var field _ info = try _ match _ field _ name ( property _ base , type ) ;", "predictions": ["var field _ info </@> try _ -> _ builder _ name ( ( ) foreach foreach foreach ( ) foreach ) foreach ( ) foreach foreach ( ) . foreach foreach foreach ( ) foreach foreach foreach foreach foreach foreach ( ) foreach foreach foreach ( ) foreach foreach foreach ( ) foreach foreach foreach foreach <-> } <-> <-> source & <-> _ ( & item _ ( & & ;"]}, {"before_ctx": "<%> <*> int records ; var customers = context . customers . to _ list ( ) ; using ( collector . start ( ) ) -> foreach ( var customer in context . customers ) </%> ", "before_line": " foreach ( var customer in customers ) { customer . name + = STR ; } records = context . save _ changes ( ) ; ", "after_ctx": " <%> <+> collector . start ( ) ; var records = context . save _ changes ( ) ; collector . stop ( ) ; </%>", "after_line": "customer . name + = STR ;", "predictions": ["customer . name + = STR ;"]}, {"before_ctx": "<%> <*> int records ; var customers = context . customers . to _ list ( ) ; using ( collector . start ( ) ) -> foreach ( var customer in context . customers ) </%> ", "before_line": " foreach ( var customer in customers ) { context . customers . remove ( customer ) ; } records = context . save _ changes ( ) ; ", "after_ctx": " <%> <+> collector . start ( ) ; var records = context . save _ changes ( ) ; collector . stop ( ) ; </%>", "after_line": "context . customers . remove ( customer ) ;", "predictions": ["context . customers . remove ( customer ) ( </%> configuration = & & ? ? ? source configuration configuration ( source source configuration source ) ( ) ( ) entity entity entity entity entity entity ) ) ) ) ) ) ) entity ) ) ) entity ;"]}, {"before_ctx": "<%> <*> int records ; var customers = context . customers . to _ list ( ) ; using ( collector . start ( ) ) -> foreach ( var customer in context . customers ) </%> ", "before_line": " foreach ( var customer in customers ) { customer . name + = STR ; } records = context . save _ changes ( ) ; ", "after_ctx": " <%> <+> collector . start ( ) ; var records = context . save _ changes ( ) ; collector . stop ( ) ; </%>", "after_line": "customer . name + = STR ;", "predictions": ["customer . name + = STR ;"]}, {"before_ctx": "<%> <*> int records ; var customers = context . customers . to _ list ( ) ; using ( collector . start ( ) ) -> foreach ( var customer in context . customers ) </%> ", "before_line": " foreach ( var customer in customers ) { context . customers . remove ( customer ) ; } records = context . save _ changes ( ) ; ", "after_ctx": " <%> <+> collector . start ( ) ; var records = context . save _ changes ( ) ; collector . stop ( ) ; </%>", "after_line": "context . customers . remove ( customer ) ;", "predictions": ["context . customers . remove ( customer ) ;"]}, {"before_ctx": " ", "before_line": " var underlying _ model _ type = model _ clr _ type . unwrap _ nullable _ type ( ) ; var underlying _ provider _ type = provider _ clr _ type ? . unwrap _ nullable _ type ( ) ; if ( underlying _ model _ type . is _ enum ) ", "after_ctx": " <%> <*> underlying -> model </%> <%> <*> model -> clr </%> <%> <*> underlying -> provider </%> <%> <*> provider -> clr </%>", "after_line": "if ( model _ clr _ type . is _ enum )", "predictions": ["if ( model _ clr _ . . _ nullable ( ) ( ) ( ) ) ( ) ( ) ( ) ( ) ( ) ( ) _ <-> _ source </%> default , configuration _ ; _ source null default ) _ <%> _ source default ) _ source null ) ) )"]}, {"before_ctx": "<%> <-> model _ builder . entity < one _ to _ one _ dependent _ entity > ( b = > { b . ignore ( e = > e . one _ to _ one _ principal _ entity _ id ) ; b . ignore ( e = > e . nav _ one _ to _ one _ principal _ entity _ id ) ; } ) ; </%> ", "before_line": " typeof ( one _ to _ one _ dependent _ entity ) . name + STR + one _ to _ one _ dependent _ entity . navigation _ property . name , typeof ( one _ to _ one _ principal _ entity ) . name + STR + one _ to _ one _ principal _ entity . navigation _ property . name ) , ", "after_ctx": " ", "after_line": "typeof ( one _ to _ one _ principal _ entity ) . name + STR + one _ to _ one _ principal _ entity . navigation _ property . name , typeof ( one _ to _ one _ dependent _ entity ) . name + STR + one _ to _ one _ dependent _ entity . navigation _ property . name ) ,", "predictions": ["typeof ( one _ to _ one _ item _ ( . default . } return override source return source _ ) , <+> ;"]}, {"before_ctx": " ", "before_line": " . ignore ( o = > o . details ) . on _ delete ( delete _ behavior . set _ null ) ; ", "after_ctx": " <%> <*> entity _ builder . has _ principal _ key ( c = > c . alternate _ key ) ; -> entity _ builder . with _ owner ( o = > o . customer ) </%> <%> <+> . has _ principal _ key ( c = > c . alternate _ key ) ; </%>", "after_line": ". ignore ( o = > o . details ) ;", "predictions": [". ignore ( o ) . on ; delete _ </@> ) ; ; ( _ <@> ) ; ; ( _ <@> ;"]}, {"before_ctx": "<%> <+> } </%> <%> <+> if ( ! can _ remove ( key , configuration _ source , can _ override _ same _ source ) ) { return null ; } </%> ", "before_line": " if ( configuration _ source . overrides ( tuple . item ) & & ( tuple . item ! = configuration _ source | | can _ override _ same _ source ) ) { values . remove ( key ) ; return tuple . item ; } return null ; ", "after_ctx": " <%> <*> return configuration _ source . overrides ( default _ configuration _ source ) & & ( default _ configuration _ source ! = configuration _ source | | can _ override _ same _ source ) ? default _ configuration _ source : ( configuration _ source ? ) null ; -> return default _ configuration _ source ; </%>", "after_line": "values . remove ( key ) ; return tuple . item ;", "predictions": ["return null ;"]}, {"before_ctx": "<%> <+> return null ; } </%> <%> <-> if ( configuration _ source . overrides ( tuple . item ) & & ( tuple . item ! = configuration _ source | | can _ override _ same _ source ) ) { </%> <%> <-> } return null ; </%> ", "before_line": " return configuration _ source . overrides ( default _ configuration _ source ) & & ( default _ configuration _ source ! = configuration _ source | | can _ override _ same _ source ) ? default _ configuration _ source : ( configuration _ source ? ) null ; ", "after_ctx": " ", "after_line": "return default _ configuration _ source ;", "predictions": ["return configuration _ source . overrides ( default _ . _ source to _ . _ source to _ . _ source to source to source + + id return configuration _ source return return can _ source ) override | ( configuration _ source override null ) & | ( configuration _ source override ) ! null _ source return return ! configuration _ source override return ! _ } ;"]}, {"before_ctx": "<%> <+> using microsoft _ data _ entity _ functional _ tests _ test _ utilities ; </%> ", "before_line": " protected void assert _ equal ( i _ read _ only _ list < string > expected _ names , i _ enumerable < string > actual _ names ) ", "after_ctx": " <%> <*> new sorted _ set < string > ( actual _ names , -> new sorted _ set < string > ( actual _ names , string _ comparer . ordinal ) , </%> <%> <-> ) </%> <%> <*> read _ only -> enumerable < i </%> <%> <-> list < </%> <%> <+> i _ </%> <%> <*> string -> i _ property </%> <%> <-> . select ( p = > p . name ) </%> <%> <*> string -> property </%> <%> <*> ordinal -> instance </%>", "after_line": "protected void assert _ equal ( i _ enumerable < string > expected _ names , i _ enumerable < string > actual _ names )", "predictions": ["protected void assert _ equal ( i _ enumerable < string > expected _ names , i _ enumerable < model ; model ;"]}, {"before_ctx": " ", "before_line": " model _ builder . entity ( typeof ( customer ) , configuration _ source . explicit ) . key ( new [ ] { customer . id _ property , customer . unique _ property } ) ; ", "after_ctx": " <%> <*> explicit -> convention </%> <%> <+> model _ builder </%>", "after_line": "model _ builder . entity ( typeof ( customer ) , configuration _ source . explicit ) . key ( new [ ] { customer . id _ property , customer . unique _ property } , configuration _ source . explicit ) ;", "predictions": ["model _ builder . entity ( typeof ( customer ) , configuration _ tree _ tree _ -> _ -> default ( be ( key ( customer _ property ( customer _ property . builder </%> ) _ builder entity ) _ can data entity } entity entity </%> </%> _ </@> _ public class </%> </%> annotations , annotations _ source string string string string string string string string string . ;"]}, {"before_ctx": " ", "before_line": " value = tuple . item ; return true ; ", "after_ctx": " <%> <*> value = default ( t _ value ) ; return false ; -> return default ( t _ value ) ; </%>", "after_line": "return tuple . item ;", "predictions": ["return tuple . item ;"]}, {"before_ctx": "<%> <*> value = tuple . item ; return true ; -> return tuple . item ; </%> ", "before_line": " value = default ( t _ value ) ; return false ; ", "after_ctx": " ", "after_line": "return default ( t _ value ) ;", "predictions": ["return default ( t _ value ) ;"]}, {"before_ctx": " ", "before_line": " private cosmos _ result _ set _ iterator < t > create _ query < t > ( ", "after_ctx": " <%> <*> < t > -> _ as _ stream </%> <%> <*> max _ concurrency : NUM -> STR </%>", "after_line": "private cosmos _ result _ set _ iterator create _ query (", "predictions": ["private cosmos _ result _ set _ iterator < t ) ="]}, {"before_ctx": "<%> <-> public void dispose ( ) = > underlying _ enumerator ? . dispose ( ) ; </%> <%> <*> underlying -> json </%> <%> <*> enumerator -> reader </%> ", "before_line": " query = cosmos _ client . create _ query < j _ object > ( container _ id , cosmos _ sql _ query ) ; ", "after_ctx": " <%> <*> underlying _ enumerator = query . fetch _ next _ set _ async ( ) . get _ awaiter ( ) . get _ result ( ) . get _ enumerator ( ) ; -> response _ stream = query . fetch _ next _ set _ async ( ) . get _ awaiter ( ) . get _ result ( ) . content ; </%> <%> <+> reader = new stream _ reader ( response _ stream ) ; json _ reader = new json _ text _ reader ( reader ) ; </%>", "after_line": "query = cosmos _ client . create _ query ( container _ id , cosmos _ sql _ query ) ;", "predictions": ["query = cosmos _ client . create _ query ( container _ id , cosmos _ sql _ query ) ;"]}, {"before_ctx": "<%> <-> public void dispose ( ) = > underlying _ enumerator ? . dispose ( ) ; </%> <%> <*> underlying -> json </%> <%> <*> enumerator -> reader </%> ", "before_line": " query = cosmos _ client . create _ query < j _ object > ( container _ id , cosmos _ sql _ query ) ; ", "after_ctx": " <%> <*> underlying _ enumerator = ( await query . fetch _ next _ set _ async ( cancellation _ token ) ) . get _ enumerator ( ) ; -> response _ stream = ( await query . fetch _ next _ set _ async ( cancellation _ token ) ) . content ; </%> <%> <+> reader = new stream _ reader ( response _ stream ) ; json _ reader = new json _ text _ reader ( reader ) ; </%>", "after_line": "query = cosmos _ client . create _ query ( container _ id , cosmos _ sql _ query ) ;", "predictions": ["query = cosmos _ client . create _ query ( container _ id , cosmos _ sql _ query ) ;"]}, {"before_ctx": "<%> <-> i _ service _ provider provider </%> <%> <-> provider </%> <%> <*> entity -> i _ service </%> <%> <*> configuration -> provider </%> <%> <*> entity -> service </%> <%> <*> configuration -> provider </%> <%> <-> i _ model model </%> ", "before_line": " return create _ entity _ configuration ( new service _ collection ( ) . add _ entity _ framework ( s = > s . add _ in _ memory _ store ( ) ) . build _ service _ provider ( ) , model ) ; ", "after_ctx": " <%> <*> entity -> context </%> <%> <*> entity -> context </%> <%> <*> ) -> i _ service _ provider service _ provider , i _ model model ) </%> <%> <*> return create _ entity _ configuration ( new service _ collection ( ) . add _ entity _ framework ( s = > s . add _ in _ memory _ store ( ) ) . build _ service _ provider ( ) ) ; -> return new entity _ context ( service _ provider , create _ entity _ configuration ( model ) ) . configuration ; </%> <%> <*> provider , i -> service </%> <%> <*> model model -> provider </%>", "after_line": "return new service _ collection ( ) . add _ entity _ framework ( s = > s . add _ in _ memory _ store ( ) ) . build _ service _ provider ( ) ;", "predictions": ["return create _ entity _ configuration ( new service _ collection ( ) . add _ entity _ framework ( s = > s . add _ in _ memory _ store ( ) ) . build _ service _ provider ( ) , model ) ;"]}, {"before_ctx": " ", "before_line": " var sets = new context _ entity _ sets ( new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; ", "after_ctx": " <%> <+> . configuration </%> <%> <*> context -> configuration </%> <%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%>", "after_line": "var sets = new context _ entity _ sets ( ) ;", "predictions": ["var sets = new context _ entity _ sets ( mock . of internal entity ( , , entity ( entity : entity source , , , , , </%> _ annotations _ <+> <-> <%> ( ( ( model . . _ ; _ async stream ( ( ( . _ ; ; . . . . . . . ; ( ( ( . json _ ; json _ ( ) ) ) ) ) ) service ) service ) service ) service entity ) service ) service"]}, {"before_ctx": "<%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%> <%> <+> . configuration </%> <%> <*> context -> configuration </%> ", "before_line": " var sets = new context _ entity _ sets ( new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; ", "after_ctx": " <%> <+> . configuration </%> <%> <*> context -> configuration </%> <%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%>", "after_line": "var sets = new context _ entity _ sets ( ) ;", "predictions": ["var sets = new context _ entity _ sets ( mock . of < entity _ set _ initializer > <%> , list > i ) </%> </%> </%> ( ( . _ reader _ > ) ( ( enumerator json _ reader _ source stream ( ( . . . . . . . . . . . stream stream add _ service add add ) ) ) ) <*> ( ( ( . . . _ set _ server ) ) ( ( ( . . . _ _ set _ server size ( ( ( . ."]}, {"before_ctx": "<%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%> <%> <+> . configuration </%> <%> <*> context -> configuration </%> ", "before_line": " var sets = new context _ entity _ sets ( new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; ", "after_ctx": " <%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%>", "after_line": "var sets = new context _ entity _ sets ( ) ;", "predictions": ["var sets = new context _ entity _ sets ( mock . of expression , new . . . . entity source ) entity entity . . . model _ model ) ."]}, {"before_ctx": "<%> <*> new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; -> ) ; </%> ", "before_line": " var sets = new context _ entity _ sets ( new entity _ set _ source ( ) , mock . of < entity _ set _ initializer > ( ) ) ; ", "after_ctx": " ", "after_line": "var sets = new context _ entity _ sets ( ) ;", "predictions": ["var sets = new context _ entity _ sets ( mock . of </%> entry <-> entry ) state state is configuration & ( ( entity _ entity _ : _ <%> _ builder base , mock ) , , , entity _ <%> _ base ) entity -> -> <%> <%> <%> <%> <%> <%> ) -> -> ->"]}, {"before_ctx": " ", "before_line": " visit _ default _ value ( column , property _ builder ) ; ", "after_ctx": " <%> <+> relational _ </%> <%> <+> _ mapping </%>", "after_line": "visit _ default _ value ( property _ builder , column ) ;", "predictions": ["visit _ default _ value ( property _ <%> _ </@> <*> <*> ;"]}, {"before_ctx": "<%> <+> var bool _ mapping = ( relational _ type _ mapping ) context . get _ service < i _ type _ mapping _ source > ( ) . find _ mapping ( typeof ( bool ) ) ; </%> ", "before_line": " where STR discontinued STR < > 1 ", "after_ctx": " ", "after_line": "where STR discontinued STR < > STR", "predictions": ["where STR discontinued STR < > 1"]}, {"before_ctx": " ", "before_line": " if ( ( entry . entity _ state ! = entity _ state . added ) & & ( entry . entity _ state ! = entity _ state . modified ) & & ( entry . entity _ state ! = entity _ state . deleted ) ) ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%> <%> <-> ( </%> <%> <-> ) </%>", "after_line": "if ( entry . entity _ state ! = entity _ state . added & & entry . entity _ state ! = entity _ state . modified & & entry . entity _ state ! = entity _ state . deleted )", "predictions": ["if ( entry . entity _ state ! = entity _ state . where . where or ; or ) . . _ <%> _ index index annotations index annotations builder builder builder annotations entry , new <%> entity entity <*> base base , names </%> <%> <%> ( , get model </%> factory , model ( get model ( get . = ) ( ; ; <*> ) ("]}, {"before_ctx": " ", "before_line": " var test _ type _ alias = db _ model . sql _ server ( ) . type _ aliases . where ( kvp = > kvp . key . contains ( STR ) ) . single _ or _ default ( ) ; ", "after_ctx": " <%> <*> where -> single _ or _ default </%> <%> <*> . single _ or _ default ( ) ; -> ; </%>", "after_line": "var test _ type _ alias = db _ model . sql _ server ( ) . type _ aliases . single _ or _ default ( kvp = > kvp . key . contains ( STR ) ) ;", "predictions": ["var test _ type _ alias = db _ model . single _ ; ( <*> < <*> < of ) public provider , public entity entity entity entity entity entity entity entity entity </%> </%> ) < > new > ) ,"]}, {"before_ctx": "<%> <*> where -> single _ or _ default </%> <%> <*> . single _ or _ default ( ) ; -> ; </%> ", "before_line": " var test _ type _ alias = db _ model . sql _ server ( ) . type _ aliases . where ( kvp = > kvp . key . contains ( STR ) ) . single _ or _ default ( ) ; ", "after_ctx": " ", "after_line": "var test _ type _ alias = db _ model . sql _ server ( ) . type _ aliases . single _ or _ default ( kvp = > kvp . key . contains ( STR ) ) ;", "predictions": ["var test _ type _ alias = db _ model . sql _ server ( ) . type _ aliases ( is _ internal _ </%> ) ) , key , provider ) ) ) <%> internal _ or ,"]}, {"before_ctx": " ", "before_line": " var matching _ candidate = navigation _ tree _ node _ candidates . where ( m = > m . path . count = = 0 ) . single _ or _ default ( ) ; ", "after_ctx": " <%> <*> where -> single _ or _ default </%> <%> <*> . single _ or _ default ( ) ; -> ; </%>", "after_line": "var matching _ candidate = navigation _ tree _ node _ candidates . single _ or _ default ( m = > m . path . count = = 0 ) ;", "predictions": ["var matching _ candidate = navigation _ tree _ node _ candidates . . . . . . . <@> annotations"]}, {"before_ctx": "<%> <*> where -> single _ or _ default </%> <%> <*> . single _ or _ default ( ) ; -> ; </%> ", "before_line": " var matching _ candidate = navigation _ tree _ node _ candidates . where ( m = > m . path . count = = 0 ) . single _ or _ default ( ) ; ", "after_ctx": " ", "after_line": "var matching _ candidate = navigation _ tree _ node _ candidates . single _ or _ default ( m = > m . path . count = = 0 ) ;", "predictions": ["var matching _ candidate = navigation _ tree _ node _ candidates . single _ or _ default ( m ( > ! metadata configuration , source , source , source , ; ) </%>"]}, {"before_ctx": " ", "before_line": " else { return member _ expression . update ( new _ expression ) ; } ", "after_ctx": " <%> <*> colection -> collection </%>", "after_line": "return member _ expression . update ( new _ expression ) ;", "predictions": ["return member _ expression . update ( new _ return ( false ( new t ) ) ) <%> ) or"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ metadata _ internal ; </%> ", "before_line": " public class relational _ index _ annotations : relational _ annotations _ base , i _ relational _ index _ annotations ", "after_ctx": " <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ index _ annotations ( not _ null internal _ index _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>", "after_line": "public class relational _ index _ annotations : i _ relational _ index _ annotations", "predictions": ["public class relational _ index _ annotations : i _ relational _ index _ annotations"]}, {"before_ctx": "<%> <+> using system _ reflection ; </%> <%> <-> using microsoft _ data _ entity _ metadata _ internal ; </%> ", "before_line": " public class relational _ entity _ type _ annotations : relational _ annotations _ base , i _ relational _ entity _ type _ annotations ", "after_ctx": " <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ entity _ type _ annotations ( not _ null internal _ entity _ type _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>", "after_line": "public class relational _ entity _ type _ annotations : i _ relational _ entity _ type _ annotations", "predictions": ["public class relational _ entity _ type _ annotations : i _ relational _ entity _ type _ annotations"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ metadata _ internal ; </%> ", "before_line": " public class relational _ model _ annotations : relational _ annotations _ base , i _ relational _ model _ annotations ", "after_ctx": " <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ model _ annotations ( not _ null internal _ model _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>", "after_line": "public class relational _ model _ annotations : i _ relational _ model _ annotations", "predictions": ["public class relational _ model _ annotations : i _ relational _ model _ annotations"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ metadata _ internal ; </%> ", "before_line": " public class relational _ foreign _ key _ annotations : relational _ annotations _ base , i _ relational _ foreign _ key _ annotations ", "after_ctx": " <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ foreign _ key _ annotations ( not _ null internal _ relationship _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>", "after_line": "public class relational _ foreign _ key _ annotations : i _ relational _ foreign _ key _ annotations", "predictions": ["public class relational _ foreign _ key _ annotations : i _ relational _ foreign _ key _ annotations"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ metadata _ internal ; </%> ", "before_line": " public class relational _ property _ annotations : relational _ annotations _ base , i _ relational _ property _ annotations ", "after_ctx": " <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ property _ annotations ( not _ null internal _ property _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>", "after_line": "public class relational _ property _ annotations : i _ relational _ property _ annotations", "predictions": ["public class relational _ property _ annotations : i _ relational _ property _ annotations"]}, {"before_ctx": "<%> <+> annotations . </%> <%> <-> annotation ( sql _ server _ annotation _ names . </%> <%> <-> , check . null _ but _ not _ empty </%> <%> <-> , nameof ( value ) ) </%> <%> <+> protected virtual bool set _ hi _ lo _ sequence _ schema ( string value ) = > annotations . set _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ schema , check . null _ but _ not _ empty ( value , nameof ( value ) ) ) ; </%> <%> <*> get { return ( int? ) get _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ pool _ size ) ; } param _ can _ be _ null set -> get { return ( int? ) annotations . get _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ pool _ size ) ; } </%> <%> <+> param _ can _ be _ null set { set _ hi _ lo _ sequence _ pool _ size ( value ) ; } } protected virtual bool set _ hi _ lo _ sequence _ pool _ size ( int? value ) { if ( value < = 0 ) </%> ", "before_line": " if ( value < = 0 ) { throw new argument _ out _ of _ range _ exception ( nameof ( value ) , entity . internal . strings . hi _ lo _ bad _ pool _ size ) ; } set _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ pool _ size , value ) ; ", "after_ctx": " <%> <+> return annotations . set _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ pool _ size , value ) ; </%>", "after_line": "throw new argument _ out _ of _ range _ exception ( nameof ( value ) , entity . internal . strings . hi _ lo _ bad _ pool _ size ) ;", "predictions": ["throw new argument _ out _ of _ range _ exception ( nameof ( value ) , entity . internal . strings . hi _ lo _ bad _ pool _ size ) ; } set _ annotation ( sql _ server _ annotation _ names . hi _ lo _ sequence _ pool _ size , value ) ;"]}, {"before_ctx": " ", "before_line": " public class relational _ key _ annotations : relational _ annotations _ base , i _ relational _ key _ annotations ", "after_ctx": " <%> <*> base -> this ( new relational _ annotations </%> <%> <+> ) </%> <%> <-> public relational _ key _ annotations ( not _ null internal _ key _ builder internal _ builder , configuration _ source configuration _ source , can _ be _ null string provider _ prefix ) : base ( internal _ builder , configuration _ source , provider _ prefix ) </%>", "after_line": "public class relational _ key _ annotations : i _ relational _ key _ annotations", "predictions": ["public class relational _ key _ annotations : i _ relational _ key _ source"]}, {"before_ctx": " ", "before_line": " var selector = expression . make _ member _ access ( ", "after_ctx": " <%> <+> if ( is _ first _ single _ last _ or _ default ( final _ result _ operator ) & & ! selector . type . is _ nullable _ type ( ) ) { var old _ type = selector . type ; selector = expression . convert ( selector , selector . type . make _ nullable ( ) ) ; var subquery _ model = new query _ model ( main _ from _ clause , new select _ clause ( selector ) ) ; </%>", "after_line": "expression selector = expression . make _ member _ access (", "predictions": ["var selector = make _ member _ access ("]}, {"before_ctx": "<%> <+> if ( metadata . value _ generated ! = null ) { value _ generated _ configuration _ source = configuration _ source . explicit ; } } </%> ", "before_line": " if ( is _ required _ configuration _ source = = null & & metadata . is _ nullable ! = null ) { is _ required _ configuration _ source = configuration _ source . explicit ; } else { is _ required _ configuration _ source = configuration _ source . max ( is _ required _ configuration _ source ) ; } ", "after_ctx": " ", "after_line": "is _ required _ configuration _ source = configuration _ source . max ( is _ required _ configuration _ source ) ;", "predictions": ["is _ required _ configuration _ source = configuration _ source . max </%> > </%> _ . _ ) _ annotations entity <*> _ </%> < explicit i _ <*> _ <%> _ ) </%> enumerator"]}, {"before_ctx": "<%> <+> i _ </%> <%> <-> { </%> <%> <*> check . not _ null ( context , nameof ( context ) ) ; -> = > models . get _ or _ add ( context . get _ type ( ) , k = > create _ model ( context , model _ builder _ factory ) ) ; </%> <%> <-> check . not _ null ( model _ builder _ factory , nameof ( model _ builder _ factory ) ) ; return models . get _ or _ add ( context . get _ type ( ) , k = > create _ model ( context , model _ builder _ factory ) ) ; } </%> ", "before_line": " model _ source _ helpers . on _ model _ creating ( context , model _ builder ) ; ", "after_ctx": " ", "after_line": "on _ model _ creating ( context , model _ builder ) ;", "predictions": ["on _ model _ creating ( context _ builder , model _ builder ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ see _ issue ", "after_ctx": " <%> <-> @ </%> <%> <+> STR </%> <%> <-> _ skip _ see _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ ! . set"]}, {"before_ctx": "<%> <-> _ skip _ see _ issue </%> <%> <-> @ </%> <%> <+> STR </%> ", "before_line": " conditional _ theory _ skip _ see _ issue ", "after_ctx": " <%> <-> @ </%> <%> <+> STR </%> <%> <+> ( </%> <%> <+> and ( c [ </%> <%> <+> city STR ] = STR london STR ) ) STR </%> <%> <-> _ skip _ see _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ skip _ set"]}, {"before_ctx": "<%> <-> _ skip _ see _ issue </%> <%> <-> @ </%> <%> <+> STR </%> <%> <+> ( </%> <%> <+> and ( c [ </%> <%> <+> city STR ] = STR london STR ) ) STR </%> ", "before_line": " conditional _ fact _ skip _ see _ issue ", "after_ctx": " <%> <-> @ </%> <%> <+> STR </%> <%> <+> conditional _ fact _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ see"]}, {"before_ctx": " ", "before_line": " using system _ collections _ generic ; ", "after_ctx": " <%> <-> using microsoft _ entity _ framework _ core _ test _ utilities ; using microsoft _ entity _ framework _ core _ test _ utilities _ xunit ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <+> async </%> <%> <*> return assert _ include _ query < order _ query > ( is _ async , ovs = > from ov in ovs . include ( ov = > ov . customer ) where ov . customer _ id = = STR select ov , new list < i _ expected _ include > -> using ( var ctx = create _ context ( ) ) </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <*> @ STR from [ customers ] as [ c ] STR -> STR ) ; </%> <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> <%> <*> @ STR from [ customers ] as [ c ] STR -> STR ) ; </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <*> from [ customers ] as [ c ] -> from ( </%> <%> <+> select [ c ] . [ customer _ id ] + n ' ' as [ customer _ id ] , [ c ] . [ address ] , [ c ] . [ city ] , [ c ] . [ company _ name ] , [ c ] . [ contact _ name ] , [ c ] . [ contact _ title ] , [ c ] . [ country ] , [ c ] . [ fax ] , [ c ] . [ phone ] , [ c ] . [ postal _ code ] , [ c ] . [ region ] from [ customers ] as [ c ] ) as [ c ] </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> select [ o ] . [ customer _ id ] from ( </%> <%> <*> ) -> left join [ customers ] </%> <%> <*> t -> c </%> <%> <*> left join [ customers ] as [ ov . customer ] on [ t ] . [ customer _ id ] = [ ov . customer ] . [ customer _ id ] -> on [ o ] . [ customer _ id ] = [ c ] . [ customer _ id ] </%> <%> <*> [ ov . customer -> ( ( [ c </%> <%> <*> STR -> and ( [ c ] . [ customer _ id ] is not null and [ ] . [ customer _ id ] is not null ) ) or ( [ c ] . [ customer _ id ] is null and [ ] . [ customer _ id ] is null ) ) STR </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <*> = > base . auto _ initialized _ view _ set ( ) ; -> { </%> <%> <+> base . auto _ initialized _ view _ set ( ) ; assert _ sql ( STR ) ; } </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ see _ issue ", "after_ctx": " <%> <-> _ skip _ see _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ see _ STR"]}, {"before_ctx": "<%> <-> _ skip _ see _ issue </%> ", "before_line": " conditional _ fact _ skip _ see _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ see _ <%>"]}, {"before_ctx": " ", "before_line": " assert . true ( sqlite _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR ) ) ; ", "after_ctx": " <%> <-> sqlite _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%>", "after_line": "assert . true ( table _ selection _ set . allows ( STR ) ) ;", "predictions": ["assert . true ( table _ ; _ > ( </@> _ </%> _ set , STR ) skip skip skip ) ( ) ( table _ table _ set server ) ) , -> _ > ) ; _ . </@> ( . await {"]}, {"before_ctx": "<%> <-> sqlite _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%> ", "before_line": " assert . true ( sqlite _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR ) ) ; ", "after_ctx": " <%> <-> sqlite _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%>", "after_line": "assert . true ( table _ selection _ set . allows ( STR ) ) ;", "predictions": ["assert . true ( table _ { fact"]}, {"before_ctx": "<%> <-> sqlite _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%> ", "before_line": " assert . false ( sqlite _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR ) ) ; ", "after_ctx": " ", "after_line": "assert . false ( table _ selection _ set . allows ( STR ) ) ;", "predictions": ["assert . false ( table _ ; _ > <%> ( </@> _ </%> _ ; <%> 0 ) ) _ <-> . use } ) . use . and ) . <@> table set _ , sql _ , ) ."]}, {"before_ctx": " ", "before_line": " assert . true ( sql _ server _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR , STR ) ) ; ", "after_ctx": " <%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%>", "after_line": "assert . true ( table _ selection _ set . allows ( STR , STR ) ) ;", "predictions": ["assert . true ( sql _ ; _ table _ <-> _ set . <%> <%> ( ( ) < . = </%> < </%> < </%> = </%> </%> <-> </%> ) , <-> ) </%> if } <%>"]}, {"before_ctx": "<%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%> ", "before_line": " assert . true ( sql _ server _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR , STR ) ) ; ", "after_ctx": " <%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%>", "after_line": "assert . true ( table _ selection _ set . allows ( STR , STR ) ) ;", "predictions": ["assert . true ( STR , } . </%> [ , [ as _ , _ as _ </%> ) ) ) ) ) [ as , -> [ id [ ( , [ ( , [ ( , [ ( , [ ( , [ ( , c ) ) ) c , ) c ) ;"]}, {"before_ctx": "<%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%> ", "before_line": " assert . false ( sql _ server _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR , STR ) ) ; ", "after_ctx": " <%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%>", "after_line": "assert . false ( table _ selection _ set . allows ( STR , STR ) ) ;", "predictions": ["assert . false ( sql _ < _ table . context ; STR ;"]}, {"before_ctx": "<%> <-> sql _ server _ </%> <%> <-> _ extensions </%> <%> <-> table _ selection _ set , </%> ", "before_line": " assert . true ( sql _ server _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR , STR ) ) ; ", "after_ctx": " ", "after_line": "assert . true ( table _ selection _ set . allows ( STR , STR ) ) ;", "predictions": ["assert . true ( STR , ] _ ; _ database . ; . context ( server _ . _ table _ selection _ set _ ) sql"]}, {"before_ctx": "<%> <-> , </%> ", "before_line": " assert . true ( sql _ server _ table _ selection _ set _ extensions . allows ( table _ selection _ set , STR , STR ) ) ; ", "after_ctx": " ", "after_line": "assert . true ( table _ selection _ set . allows ( STR , STR ) ) ;", "predictions": ["assert . true ( sql _ NUM _ ) _ . _ < _ i </%> </%> STR <%> <-> STR index _ , . set </%> extensions . </%> <-> ;"]}, {"before_ctx": "<%> <*> t = > candidate _ naming _ service . generate _ candidate _ identifier ( t . name ) , c _ sharp _ utilities ) ; -> use _ database _ names </%> <%> <+> ? ( func < database _ table , string > ) ( t = > t . name ) : t = > candidate _ naming _ service . generate _ candidate _ identifier ( t . name ) , c _ sharp _ utilities , use _ database _ names ? ( func < string , string > ) null : pluralizer . singularize ) ; db _ set _ namer = new c _ sharp _ unique _ namer < database _ table > ( use _ database _ names ? ( func < database _ table , string > ) ( t = > t . name ) : t = > candidate _ naming _ service . generate _ candidate _ identifier ( t . name ) , c _ sharp _ utilities , use _ database _ names ? ( func < string , string > ) null : pluralizer . pluralize ) ; </%> ", "before_line": " = > pluralizer . singularize ( table _ namer . get _ name ( check . not _ null ( table , nameof ( table ) ) ) ) ; ", "after_ctx": " <%> <*> pluralizer . pluralize ( table -> db _ set </%> <%> <-> ) </%> <%> <*> table -> get </%> <%> <*> namer . get -> entity _ type </%>", "after_line": "= > table _ namer . get _ name ( check . not _ null ( table , nameof ( table ) ) ) ;", "predictions": ["= > pluralizer . singularize ( table _ namer . get _ name ( nameof ( table ) ) ) ;"]}, {"before_ctx": " ", "before_line": " private readonly static string [ ] valid _ keywords = new [ ] ", "after_ctx": " <%> <-> readonly </%> <%> <+> readonly </%>", "after_line": "private static readonly string [ ] valid _ keywords = new [ ]", "predictions": ["private static readonly string [ ] assert <-> dictionary , new </%> new ;"]}, {"before_ctx": "<%> <-> readonly </%> <%> <+> readonly </%> ", "before_line": " private readonly static i _ dictionary < string , keywords > keywords = new dictionary < string , keywords > ( NUM , string _ comparer . ordinal _ ignore _ case ) ", "after_ctx": " ", "after_line": "private static readonly i _ dictionary < string , keywords > keywords = new dictionary < string , keywords > ( NUM , string _ comparer . ordinal _ ignore _ case )", "predictions": ["private static readonly i _ dictionary set > test i i i i > </%> . ) . <%> _ { . ordinal _ ignore _ case ) case _ use <-> fact"]}, {"before_ctx": " ", "before_line": " if ( use _ ensure _ method ) { assert . true ( await context . database . ensure _ deleted _ async ( ) ) ; } else { await context . database . delete _ async ( ) ; } ", "after_ctx": " <%> <-> if ( use _ ensure _ method ) { </%> <%> <-> } else { context . database . delete ( ) ; </%>", "after_line": "assert . true ( await context . database . ensure _ deleted _ async ( ) ) ;", "predictions": ["assert . true ( await context _ table _ , = deleted = async ( ( ( ( { _ <+> ( async _ <%> _ _ _ _ . . . . . use ) . <%> . <*> ] . <%> . <*> ] . id . . as ] c ) ,"]}, {"before_ctx": "<%> <-> if ( use _ ensure _ method ) { </%> <%> <-> } else { await context . database . delete _ async ( ) ; } </%> ", "before_line": " if ( use _ ensure _ method ) { assert . true ( context . database . ensure _ deleted ( ) ) ; } else { context . database . delete ( ) ; } ", "after_ctx": " <%> <-> assert . true ( context . database . exists ( ) ) ; assert . true ( await context . database . exists _ async ( ) ) ; </%> <%> <+> if ( async ) { </%>", "after_line": "assert . true ( context . database . ensure _ deleted ( ) ) ;", "predictions": ["assert . true ( context . ( [ null [ null _ _ _ _ _ _ _ _ _ _ _ _ _ id _ id _ id ( ( ( func . string ( ( ) ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ( func . string ( ( ("]}, {"before_ctx": "<%> <+> { var index = property . get _ original _ value _ index ( ) ; if ( index > = 0 ) </%> ", "before_line": " var index = property . get _ original _ value _ index ( ) ; if ( index > = 0 ) { values [ index ] = entry [ property ] ; } ", "after_ctx": " <%> <+> } </%>", "after_line": "values [ index ] = entry [ property ] ;", "predictions": ["values [ index ] = entry <@> context ;"]}, {"before_ctx": "<%> <-> order by [ ] . [ customer _ id ] </%> ", "before_line": " if ( ! use _ string ) { assert _ sql ( @ STR ", "after_ctx": " <%> <-> } </%> <%> <-> if ( ! use _ string ) </%>", "after_line": "assert _ sql ( @ STR", "predictions": ["assert _ sql ( @ STR"]}, {"before_ctx": "<%> <-> } </%> ", "before_line": " if ( ! use _ string ) { assert _ sql ( @ STR ", "after_ctx": " <%> <-> } </%>", "after_line": "assert _ sql ( @ STR", "predictions": ["assert _ sql ( @ STR"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ , index index _ <%> _ STR <@> <-> . _ server _ <-> _ <%> _ </%> set _ <%> _ </@> ,"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ , _ <-> . <-> _ <%> _ </%> async ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ <-> table index index index index index <%> _ STR async ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = t </%> _ store _ store factory ;"]}, {"before_ctx": " ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; ", "after_ctx": " <%> <-> < test _ store > </%>", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = create _ or _ test _ store _ ; . framework < framework < test _ store factory factory _ store factory . framework <-> <->"]}, {"before_ctx": "<%> <-> < test _ store > </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " <%> <-> < test _ store > </%>", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ sql <-> _ <%> _ </%> _ <%> _ sql create create _ </%> _ <%> _ sql <-> _ <%> _ </%> _ <%> _ sql create create <%>"]}, {"before_ctx": "<%> <-> < test _ store > </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " <%> <-> < test _ store > </%>", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . core </%> _ store _ store _ > <-> _ test _ store _ > <-> _ store _ > _ > <-> _ test _ store _ > <-> _ store _ store _ factory . in ;"]}, {"before_ctx": "<%> <-> < test _ store > </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; ", "after_ctx": " <%> <-> < test _ store > </%>", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . override ;"]}, {"before_ctx": "<%> <-> < test _ store > </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ -> <*> _ public _ test _ store _ ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ > <%> _ store _ factory ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance < test _ store factory < instance _ store > ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . in ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . microsoft ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> _ test </%> ", "before_line": " public class sql _ server _ test _ store _ factory : i _ test _ store _ factory < sql _ server _ test _ store > ", "after_ctx": " <%> <-> sql _ server _ </%> <%> <*> create -> get _ or </%> <%> <*> shared -> create </%>", "after_line": "public class sql _ server _ test _ store _ factory : i _ test _ store _ factory", "predictions": ["public class sql _ server _ test _ store _ factory : i _ test _ store _ store"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . in ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . microsoft ;"]}, {"before_ctx": " ", "before_line": " public test _ store create _ test _ store ( i _ test _ store _ factory < test _ store > test _ store _ factory ) ", "after_ctx": " <%> <*> create -> get _ or </%> <%> <*> shared -> create </%>", "after_line": "public test _ store create _ test _ store ( i _ test _ store _ factory test _ store _ factory )", "predictions": ["public test _ store create _ test _ store ( test _ store _ store _ factory test _ store _ <%> </%>"]}, {"before_ctx": "<%> <+> protected override bool use _ pooling = > false ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ ; <-> _ microsoft _ test _ store _ ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . in ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ northwind _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ northwind _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ northwind _ test _ store _ factory . instance ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ <%> -> _ test _ store _ factory . in ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;"]}, {"before_ctx": " ", "before_line": " public interface i _ test _ store _ factory < out t _ test _ store > where t _ test _ store : test _ store ", "after_ctx": " <%> <-> t _ </%> <%> <*> create -> get _ or </%> <%> <*> shared -> create </%>", "after_line": "public interface i _ test _ store _ factory", "predictions": ["public interface i _ test _ store _ factory < out t _ test _ store >"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ northwind _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ northwind _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ northwind _ test _ store _ > <%> _ server _ northwind _ test _ store _ > <%> _ store _ northwind _ test _ store _ > <%> _ store _ northwind _ test _ store _ test store _ <%> _ core server server server _ get _ core _ test _ <%> _ test store _ <%> _ test server _ <%> _ core server _ <%> _ core server _"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > private _ cache _ sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > private _ cache _ sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > private _ cache _ sql _ test _ store _ factory <%> _ store _ > <%> <%> < test _ store factory < test _ store factory factory <%> factory"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . microsoft ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . in ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ , _ </%> false"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > default _ </%> _ context provider _ ) _ <%> _ test db _ <%> _ ( await ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ , < test _ cancellation <*> _ cancellation _ token bool <*> _ context _ null & connection . null ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > new async <%> ; _ </%> _ <%> _ <%> provider"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ adventure _ works _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ adventure _ works _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ -> <*> _ <%> _ <%> <*> options i _ get _ < . create ( value _ set _ <%> _ ( ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ </%> < _ ( _ factory = > task _ public _ token _ context _ null db _ type _ , . item )"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> _ test </%> ", "before_line": " public class sqlite _ test _ store _ factory : i _ test _ store _ factory < sqlite _ test _ store > ", "after_ctx": " <%> <-> sqlite _ </%> <%> <*> create -> get _ or </%> <%> <*> shared -> create </%>", "after_line": "public class sqlite _ test _ store _ factory : i _ test _ store _ factory", "predictions": ["public class sqlite _ test _ store _ create public bool _ ( var . current _ = _ )"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory ( <%> _ ( ) ) ) _ store _ factory _ cancellation _ <%> store _ <%> _ test in : <@> string ) ;"]}, {"before_ctx": "<%> <+> { get ; } </%> <%> <-> > </%> ", "before_line": " protected abstract i _ test _ store _ factory < test _ store > test _ store _ factory { get ; } ", "after_ctx": " <%> <+> protected virtual bool use _ pooling = > true ; private i _ db _ context _ pool context _ pool ; private i _ db _ context _ pool context _ pool = > context _ pool ? ? ( context _ pool = ( i _ db _ context _ pool ) service _ provider . get _ required _ service ( typeof ( db _ context _ pool < > ) . make _ generic _ type ( context _ type ) ) ) ; </%> <%> <+> test _ store = test _ store _ factory . get _ or _ create ( store _ name ) ; var services = add _ services ( test _ store _ factory . add _ provider _ services ( new service _ collection ( ) ) ) ; </%>", "after_line": "protected abstract i _ test _ store _ factory test _ store _ factory { get ; }", "predictions": ["protected abstract i _ test _ store _ factory < test _ store > test _ store _ factory { get ; }"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > override protected public <%> <%> _ token _ cancellation _ test ->"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ , > _ , _ , false false"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> _ test </%> ", "before_line": " public class in _ memory _ test _ store _ factory : i _ test _ store _ factory < in _ memory _ test _ store > ", "after_ctx": " <%> <-> in _ memory _ </%> <%> <*> create -> get _ or </%> <%> <*> shared -> create </%>", "after_line": "public class in _ memory _ test _ store _ factory : i _ test _ store _ factory", "predictions": ["public class in _ memory _ test . ; _ ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; ", "after_ctx": " ", "after_line": "protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;", "predictions": ["protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > server _ store _ -> _ -> </%> _ token _ cancellation _ null db _ <%> _ <%> _ ( ;"]}, {"before_ctx": "<%> <+> var command _ batches = parameters . item ; var connection = parameters . item ; </%> <%> <-> connection . open ( ) ; </%> <%> <*> if ( connection . current _ transaction = = null ) -> if ( connection . current _ transaction = = null </%> <%> <+> & & current _ context . context . database . auto _ transactions _ enabled ) </%> ", "before_line": " if ( current _ context . context . database . auto _ transactions _ enabled ) { started _ transaction = connection . begin _ transaction ( ) ; } else { connection . open ( ) ; } ", "after_ctx": " ", "after_line": "started _ transaction = connection . begin _ transaction ( ) ; } else { connection . open ( ) ;", "predictions": ["connection . open ( ) ;"]}, {"before_ctx": "<%> <+> var command _ batches = parameters . item ; var connection = parameters . item ; </%> <%> <-> await connection . open _ async ( cancellation _ token ) ; </%> <%> <*> if ( connection . current _ transaction = = null ) -> if ( connection . current _ transaction = = null </%> <%> <+> & & current _ context . context . database . auto _ transactions _ enabled ) </%> ", "before_line": " if ( current _ context . context . database . auto _ transactions _ enabled ) { started _ transaction = await connection . begin _ transaction _ async ( cancellation _ token ) ; } else { await connection . open _ async ( cancellation _ token ) ; } ", "after_ctx": " ", "after_line": "started _ transaction = await connection . begin _ transaction _ async ( cancellation _ token ) ; } else { await connection . open _ async ( cancellation _ token ) ;", "predictions": ["started _ transaction = await connection . change _ , <%> > test _ entity test test ;"]}, {"before_ctx": "<%> <+> ( ! </%> <%> <+> ) </%> <%> <+> return null ; } </%> <%> <+> { entity _ type = entity _ type . root _ type ( ) . get _ derived _ types _ inclusive ( ) . first _ or _ default ( et = > et . clr _ type = = converted _ type ) ; if ( entity _ type = = null ) </%> ", "before_line": " entity _ type = entity _ type . root _ type ( ) . get _ derived _ types _ inclusive ( ) . first _ or _ default ( et = > et . clr _ type = = converted _ type ) ; if ( entity _ type = = null ) { return null ; } ", "after_ctx": " <%> <+> } </%> <%> <+> if ( navigation = = null ) { return null ; } var target _ entity _ type = navigation . get _ target _ type ( ) ; </%>", "after_line": "return null ;", "predictions": ["return null ;"]}, {"before_ctx": " ", "before_line": " public override async task < bool > open _ async ( bool errors _ expected = false , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) ", "after_ctx": " <%> <*> errors -> cancellation </%> <%> <*> expected -> token </%> <%> <*> cancellation -> errors </%> <%> <*> token -> expected </%>", "after_line": "public override async task < bool > open _ async ( cancellation _ token cancellation _ token , bool errors _ expected = false )", "predictions": ["public override async task < bool > open _ : <-> ; bool errors _ ( open . _ . open _ , entity _ using > ) entity entity </%> = = = = = = = = = = = = = = = = </%> </%> )"]}, {"before_ctx": "<%> <-> bool errors _ expected = false , </%> <%> <*> = default ( cancellation -> , bool errors </%> <%> <*> token ) -> expected = false </%> ", "before_line": " if ( await base . open _ async ( errors _ expected , cancellation _ token ) ) ", "after_ctx": " ", "after_line": "if ( await base . open _ async ( cancellation _ token , errors _ expected ) )", "predictions": ["if ( await base . open _ false cancellation cancellation cancellation cancellation <%> test test test <%> -> _ </@> ) ,"]}, {"before_ctx": " ", "before_line": " public class byte _ array _ type _ mapping : relational _ type _ mapping < byte [ ] > ", "after_ctx": " <%> <+> , typeof ( byte [ ] ) </%> <%> <-> , unicode : false </%> <%> <*> create _ copy -> clone </%>", "after_line": "public class byte _ array _ type _ mapping : relational _ type _ mapping", "predictions": ["public class byte _ array _ type _ <%> > >"]}, {"before_ctx": " ", "before_line": " public class string _ type _ mapping : relational _ type _ mapping < string > ", "after_ctx": " <%> <-> public string _ type _ mapping ( not _ null string store _ type , can _ be _ null db _ type ? db _ type = null , bool unicode = false ) : this ( store _ type , db _ type , unicode , size : null ) { } </%>", "after_line": "public class string _ type _ mapping : relational _ type _ mapping", "predictions": ["public class string _ type _ mapping )"]}, {"before_ctx": " ", "before_line": " public virtual task < bool > open _ async ( bool errors _ expected = false , cancellation _ token cancellation _ token = new cancellation _ token ( ) ) ", "after_ctx": " <%> <*> errors -> cancellation </%> <%> <*> expected -> token </%> <%> <*> cancellation -> errors </%> <%> <*> token -> expected </%>", "after_line": "public virtual task < bool > open _ async ( cancellation _ token cancellation _ token , bool errors _ expected = false )", "predictions": ["public virtual task < bool > open _ class ; -> service _ <*> factory class , _ ( type , = database _ = . . . . . ; ;"]}, {"before_ctx": "<%> <-> bool errors _ expected = false , </%> <%> <*> = new cancellation -> , bool errors </%> <%> <*> token ( ) -> expected = false </%> ", "before_line": " return real _ connection . open _ async ( errors _ expected , cancellation _ token ) ; ", "after_ctx": " ", "after_line": "return real _ connection . open _ async ( cancellation _ token , errors _ expected ) ;", "predictions": ["return open _ async ( errors _ . store cancellation _ < expected cancellation _ , <-> <-> <-> ) <@>"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> using system _ collections _ generic ; using system _ linq ; </%> ", "before_line": " using microsoft _ data _ entity _ change _ tracking ; using microsoft _ data _ entity _ metadata ; using microsoft _ data _ entity _ relational _ update ; using microsoft _ data _ entity _ sql _ server _ functional _ tests _ test _ models _ concurrency _ model ; ", "after_ctx": " <%> <-> using microsoft _ framework _ dependency _ injection _ advanced ; </%> <%> <-> using xunit ; </%> <%> <*> internal static class test _ extensions -> public class optimistic _ concurrency _ test : optimistic _ concurrency _ relational _ test _ base < sql _ server _ test _ database > </%> <%> <-> public static void set _ values ( this i _ property _ bag _ entry property _ bag _ entry , dictionary < i _ property , object > values ) </%>", "after_line": "using concurrency _ model ; using microsoft _ data _ entity _ relational _ functional _ tests ;", "predictions": ["using microsoft _ data _ entity _ first _ tracking = update _ tests _ entity _ models _ </%> = dictionary _ tests _ </%> _ models _ </%> ( store _ models _ . _ models _ . _ models _ . _ model _ update _ model ( store _ models _ . _ store _ models _ update _ update factory } ) ;"]}, {"before_ctx": "<%> <*> system -> microsoft _ data </%> <%> <*> linq -> entity </%> ", "before_line": " namespace microsoft _ data _ entity _ sql _ server _ functional _ tests _ test _ models _ concurrency _ model ", "after_ctx": " ", "after_line": "namespace concurrency _ model", "predictions": ["namespace microsoft _ data _ entity _ > virtual > > > _ microsoft _ >"]}, {"before_ctx": "<%> <-> using system ; </%> ", "before_line": " namespace microsoft _ data _ entity _ sql _ server _ functional _ tests _ test _ models _ concurrency _ model ", "after_ctx": " <%> <*> i _ service _ provider service _ provider , db _ context _ options options ) -> context context ) </%> <%> <-> var context = new context ( service _ provider , options ) ; </%>", "after_line": "namespace concurrency _ model", "predictions": ["namespace microsoft _ data _ entity _ size _ <-> . parameters _ ! _ lazy _ <*>"]}, {"before_ctx": "<%> <*> goto retry ; } -> if ( ! cache . </%> <%> <+> _ get _ value ( cache _ key , out model ) ) </%> <%> <-> model = new lazy < i _ model > ( ( ) = > create _ model ( context , convention _ set _ builder ) , </%> <%> <*> lazy _ thread -> model = create </%> <%> <*> safety _ mode . execution -> model ( context , convention </%> <%> <*> and -> set </%> <%> <*> publication -> builder </%> <%> <+> model = </%> <%> <-> finally { model _ sync _ objects . try _ remove ( cache _ key , out ) ; </%> ", "before_line": " return model . value ; ", "after_ctx": " ", "after_line": "return model ;", "predictions": ["return model ;"]}, {"before_ctx": " ", "before_line": " public virtual new sqlite _ command create _ command ( ) = > new sqlite _ command { connection = this , transaction = transaction } ; ", "after_ctx": " <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> virtual </%> <%> <+> virtual </%>", "after_line": "public new virtual sqlite _ command create _ command ( ) = > new sqlite _ command { connection = this , transaction = transaction } ;", "predictions": ["public virtual new sqlite _ command create ; <@> factory i ; override </%> ; instance factory protected = </%> using </%> open token ; ; ; STR ;"]}, {"before_ctx": "<%> <-> virtual </%> <%> <+> virtual </%> ", "before_line": " public virtual new sqlite _ transaction begin _ transaction ( ) = > begin _ transaction ( isolation _ level . unspecified ) ; ", "after_ctx": " <%> <-> virtual </%> <%> <+> virtual </%>", "after_line": "public new virtual sqlite _ transaction begin _ transaction ( ) = > begin _ transaction ( isolation _ level . unspecified ) ;", "predictions": ["public virtual new sqlite _ transaction begin byte , . <-> core <-> factory ;"]}, {"before_ctx": "<%> <-> virtual </%> <%> <+> virtual </%> ", "before_line": " public virtual new sqlite _ parameter _ collection parameters = > parameters . value ; ", "after_ctx": " <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> virtual </%> <%> <+> virtual </%>", "after_line": "public new virtual sqlite _ parameter _ collection parameters = > parameters . value ;", "predictions": ["public virtual new sqlite _ parameter _ collection parameters = > parameters ( <@> columns columns columns columns columns columns columns columns columns columns . ; ) ,"]}, {"before_ctx": "<%> <-> virtual </%> <%> <+> virtual </%> ", "before_line": " public virtual new sqlite _ parameter create _ parameter ( ) = > new sqlite _ parameter ( ) ; ", "after_ctx": " <%> <-> virtual </%> <%> <+> virtual </%> <%> <-> virtual </%> <%> <+> virtual </%>", "after_line": "public new virtual sqlite _ parameter create _ parameter ( ) = > new sqlite _ parameter ( ) ;", "predictions": ["public virtual new sqlite _ parameter create _ parameter ( ) = ) [ ] . 1 model"]}, {"before_ctx": "<%> <-> virtual </%> <%> <+> virtual </%> <%> <-> virtual </%> <%> <+> virtual </%> ", "before_line": " public virtual new sqlite _ data _ reader execute _ reader ( ) = > execute _ reader ( command _ behavior . default ) ; public virtual new sqlite _ data _ reader execute _ reader ( command _ behavior behavior ) ", "after_ctx": " <%> <*> if ( connection = = null | | connection . state ! = connection _ state . open ) -> if ( connection = = null </%> <%> <+> | | connection . state ! = connection _ state . open ) </%>", "after_line": "public new virtual sqlite _ data _ reader execute _ reader ( ) = > execute _ reader ( command _ behavior . default ) ; public new virtual sqlite _ data _ reader execute _ reader ( command _ behavior behavior )", "predictions": ["public virtual new sqlite _ data _ reader execute _ reader ( ) = > execute _ reader ( command _ behavior . default <+> <+> properties <+> is properties _ -> )"]}, {"before_ctx": "<%> <+> when ( execution _ strategy . call _ on _ wrapped _ exception ( ex , sql _ server _ transient _ exception _ detector . should _ retry _ on ) ) </%> ", "before_line": " if ( execution _ strategy . call _ on _ wrapped _ exception ( ex , sql _ server _ transient _ exception _ detector . should _ retry _ on ) ) { throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ; } throw ; ", "after_ctx": " ", "after_line": "throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ;", "predictions": ["throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ;"]}, {"before_ctx": "<%> <+> when ( execution _ strategy . call _ on _ wrapped _ exception ( ex , sql _ server _ transient _ exception _ detector . should _ retry _ on ) ) </%> ", "before_line": " if ( execution _ strategy . call _ on _ wrapped _ exception ( ex , sql _ server _ transient _ exception _ detector . should _ retry _ on ) ) { throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ; } throw ; ", "after_ctx": " ", "after_line": "throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ;", "predictions": ["throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ;"]}, {"before_ctx": " ", "before_line": " public bool has _ tables _ base ( ) = > base . has _ tables ( ) ; ", "after_ctx": " <%> <-> base . </%>", "after_line": "public bool has _ tables _ base ( ) = > has _ tables ( ) ;", "predictions": ["public bool has _ tables _ base ( ) = > has virtual [ [ tables </%> [ </%> has ) columns"]}, {"before_ctx": "<%> <-> base . </%> ", "before_line": " = > base . has _ tables _ async ( cancellation _ token ) ; ", "after_ctx": " ", "after_line": "= > has _ tables _ async ( cancellation _ token ) ;", "predictions": ["= > has _ tables _ async ( cancellation _ token ) entity _ display </%> </%>"]}, {"before_ctx": "<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> ", "before_line": " from = { children _ table . columns [ 1 ] } , ", "after_ctx": " <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>", "after_line": "columns = { children _ table . columns [ 1 ] } ,", "predictions": ["from = children _ table . columns [ 1 ] ,"]}, {"before_ctx": "<%> <+> _ model </%> <%> <+> _ model </%> ", "before_line": " from = { children _ table . columns [ 0 ] } , ", "after_ctx": " <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>", "after_line": "columns = { children _ table . columns [ 0 ] } ,", "predictions": ["from = children _ table . columns [ 0 ] ,"]}, {"before_ctx": "<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> ", "before_line": " from = { children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } , ", "after_ctx": " <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>", "after_line": "columns = { children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } ,", "predictions": ["from = { children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } ,"]}, {"before_ctx": "<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> ", "before_line": " from = { table . columns [ 1 ] } , ", "after_ctx": " <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>", "after_line": "columns = { table . columns [ 1 ] } ,", "predictions": ["from = table . columns [ 1 ] ,"]}, {"before_ctx": "<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> ", "before_line": " from = { children _ table . columns [ 1 ] } , ", "after_ctx": " <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%> <%> <-> ( ) </%> <%> <+> _ model </%>", "after_line": "columns = { children _ table . columns [ 1 ] } ,", "predictions": ["from = children _ table . columns [ 1 ] ,"]}, {"before_ctx": "<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> ", "before_line": " from = { table . columns [ 1 ] } , ", "after_ctx": " <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>", "after_line": "columns = { table . columns [ 1 ] } ,", "predictions": ["table = table . columns [ 1 ] ,"]}, {"before_ctx": "<%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> <%> <+> _ model </%> ", "before_line": " from = { children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } , ", "after_ctx": " <%> <*> to -> principal _ columns </%> <%> <*> provider -> factory </%> <%> <*> get _ model -> create </%> <%> <*> schema -> database </%> <%> <*> info -> model </%>", "after_line": "columns = { children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } ,", "predictions": ["from = { children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } ,"]}, {"before_ctx": "<%> <*> add _ sql _ server -> visit </%> <%> <-> column column , </%> <%> <+> , column _ model column </%> ", "before_line": " column . display _ name ( ) , column . data _ type ) ) ; ", "after_ctx": " ", "after_line": "column . display _ name , column . data _ type ) ) ;", "predictions": ["column _ model column , column . data _ type ) ) ->"]}, {"before_ctx": " ", "before_line": " using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { build _ action . invoke ( owns _ one _ builder ( new type _ identity ( owned _ type _ name ) , navigation _ name ) ) ; return this ; } ", "after_ctx": " <%> <-> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) </%>", "after_line": "build _ action . invoke ( owns _ one _ builder ( new type _ identity ( owned _ type _ name ) , navigation _ name ) ) ; return this ;", "predictions": ["build _ action . invoke ( owns _ one _ builder ( new type _ identity ( owned _ type _ name ) . name 0 name [ navigation _ n [ n _ [ is type ) , _ ; ) on _ <+> exception on on , navigation _ ; ) on on _ , on this virtual"]}, {"before_ctx": " ", "before_line": " using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { build _ action . invoke ( owns _ many _ builder ( new type _ identity ( owned _ type _ name ) , navigation _ name ) ) ; return this ; } ", "after_ctx": " <%> <-> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) </%>", "after_line": "build _ action . invoke ( owns _ many _ builder ( new type _ identity ( owned _ type _ name ) , navigation _ name ) ) ; return this ;", "predictions": ["build _ action . invoke ( owns _ many _ builder ( new type _ identity ( owned _ type _ name ) , provider <%> ] model model model model model model model model </%> [ on _ , ( ) ) on _ <+> exception ) on this on on _ this ;"]}, {"before_ctx": "<%> <*> index -> filter </%> <%> <+> [ entity _ with _ two _ properties _ entity _ with _ string _ key _ </%> <%> <+> ] is not null </%> <%> <+> ; </%> <%> <*> is -> has </%> <%> <*> unique -> index </%> <%> <+> STR id STR </%> ", "before_line": " . has _ foreign _ key ( STR microsoft . entity _ framework _ core . migrations . model _ snapshot _ sql _ server _ test + entity _ with _ two _ properties STR , STR entity _ with _ string _ key _ id STR ) . on _ delete ( delete _ behavior . cascade ) ; ", "after_ctx": " <%> <-> , entity _ with _ string _ key _ id = STR 1 STR </%>", "after_line": ". has _ foreign _ key ( STR microsoft . entity _ framework _ core . migrations . model _ snapshot _ sql _ server _ test + entity _ with _ two _ properties STR , STR entity _ with _ string _ key _ id STR ) ;", "predictions": [". has _ foreign _ key ( STR microsoft . model _ snapshot _ sql _ server _ test + entity _ with _ builder _ attribute type if type , type , delete _ behavior ) is <@> is var is delete is behavior ) is <@> is var null is delete ) is <@>"]}, {"before_ctx": " ", "before_line": " using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { build _ action . invoke ( owns _ one _ builder < t _ related _ entity > ( new property _ identity ( navigation _ name ) ) ) ; return this ; } ", "after_ctx": " <%> <-> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { </%>", "after_line": "build _ action . invoke ( owns _ one _ builder < t _ related _ entity > ( new property _ identity ( navigation _ name ) ) ) ; return this ;", "predictions": ["build _ action . invoke ( owns _ one _ builder < t _ related _ entity > ( new property _ identity ( navigation _ c ) ) ) on _ <+> exception on _ ( </%> _ 1 STR STR STR entity entity entity entity entity STR ) entity entity entity entity entity entity entity entity"]}, {"before_ctx": " ", "before_line": " using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { build _ action . invoke ( owns _ many _ builder < t _ related _ entity > ( new property _ identity ( navigation _ name ) ) ) ; return this ; } ", "after_ctx": " <%> <-> using ( builder . metadata . model . convention _ dispatcher . start _ batch ( ) ) { </%>", "after_line": "build _ action . invoke ( owns _ many _ builder < t _ related _ entity > ( new property _ identity ( navigation _ name ) ) ) ; return this ;", "predictions": ["build _ action . invoke ( owns _ many _ builder < t _ related _ entity > ( new property _ identity ( to <%> name ) ) ) on this on _ <+> on ( operation virtual <@> _ identity <%> </@> _ <*> </%> </%> </%> virtual <@> default _ identity <%> </@> _ <*> </%> STR ) ,"]}, {"before_ctx": "<%> <*> if ( is _ ambiguous _ inverse ( navigation _ member _ info , entity _ type . clr _ type , entity _ type . model , referencing _ navigations _ with _ attribute ) ) -> var ambiguous _ inverse = find _ ambiguous _ inverse ( </%> <%> <+> navigation _ member _ info , entity _ type , entity _ type . model , referencing _ navigations _ with _ attribute ) ; if ( ambiguous _ inverse ! = null ) </%> ", "before_line": " var existing _ inverse _ type = existing _ inverse ? . declaring _ entity _ type . clr _ type ; ", "after_ctx": " <%> <+> if ( fk . is _ ownership | | fk . declaring _ entity _ type . builder . remove _ foreign _ key ( fk , configuration _ source . data _ annotation ) = = null ) { fk . builder . navigations ( existing _ inverse . is _ dependent _ to _ principal ( ) ? property _ identity . none : ( property _ identity ? ) null , </%>", "after_line": "var existing _ inverse _ type = existing _ inverse ? . declaring _ entity _ type ;", "predictions": ["var existing _ inverse _ type = existing _ inverse ? . declaring _ entity _ type . clr _ type ;"]}, {"before_ctx": " ", "before_line": " & & is _ ambiguous _ inverse ( navigation , entity _ type . clr _ type , entity _ type . model , inverse _ navigation . value ) ) ", "after_ctx": " <%> <+> entity _ </%>", "after_line": "& & is _ ambiguous _ inverse ( navigation , entity _ type , entity _ type . model , inverse _ navigation . value ) )", "predictions": ["& & is _ ambiguous _ inverse ( navigation , entity _ <%> <*> <%> -> -> type </%> </%> <+> <+> <+> <+> ] ]"]}, {"before_ctx": " ", "before_line": " entity _ type = entity _ type . root _ type ( ) ; ", "after_ctx": " <%> <-> . root _ type ( ) </%>", "after_line": "entity _ type = entity _ type ;", "predictions": ["entity _ type = entity _ type . root _ type ( entity virtual _ <%> virtual ) ( [ _ -> </%> <%> . root _ . ( ) ; ) ;"]}, {"before_ctx": "<%> <-> . root _ type ( ) </%> ", "before_line": " entity _ type = entity _ type . root _ type ( ) ; ", "after_ctx": " ", "after_line": "entity _ type = entity _ type ;", "predictions": ["entity _ type = entity _ type . root _ type ;"]}, {"before_ctx": "<%> <*> tea -> drink </%> <%> <*> lilt -> coke </%> <%> <*> coke -> lilt </%> <%> <*> drink -> tea </%> ", "before_line": " where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) ", "after_ctx": " <%> <*> kiwi -> eagle </%> <%> <*> eagle -> kiwi </%>", "after_line": "where [ a ] . [ discriminator ] in ( n ' eagle ' , n ' kiwi ' )", "predictions": ["where [ a ] . [ discriminator ] in ( n ' <+> -> -> -> <*> <*> <@> <@> <@> )"]}, {"before_ctx": "<%> <*> where -> where [ p ] . [ genus ] in ( 1 , 0 ) and ( </%> <%> <+> ) </%> ", "before_line": " where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) ", "after_ctx": " <%> <*> av -> a </%> <%> <*> av -> a </%> <%> <*> kiwi -> eagle </%> <%> <*> eagle -> kiwi </%> <%> <*> av -> a </%>", "after_line": "where [ a ] . [ discriminator ] in ( n ' eagle ' , n ' kiwi ' )", "predictions": ["where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' )"]}, {"before_ctx": "<%> <*> a -> p </%> <%> <*> a -> p </%> <%> <*> 0 -> 1 </%> <%> <*> 1 -> 0 </%> <%> <*> a -> p </%> ", "before_line": " where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) and ( [ a ] . [ name ] = n ' great spotted kiwi ' ) ", "after_ctx": " <%> <*> kiwi -> eagle </%> <%> <*> eagle -> kiwi </%>", "after_line": "where [ a ] . [ discriminator ] in ( n ' eagle ' , n ' kiwi ' ) and ( ( [ a ] . [ name ] = n ' great spotted kiwi ' ) and [ a ] . [ name ] is not null )", "predictions": ["where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) and ( [ a ex . ) ) ) ) ) ) ) ) )"]}, {"before_ctx": "<%> <*> kiwi -> eagle </%> <%> <*> eagle -> kiwi </%> <%> <+> ( </%> <%> <+> and [ a ] . [ name ] is not null ) </%> ", "before_line": " where [ a ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) ", "after_ctx": " ", "after_line": "where [ a ] . [ discriminator ] in ( n ' eagle ' , n ' kiwi ' )", "predictions": ["where [ a ] . [ discriminator ] in ( n ' <+> <%> ] <*> <%> <*> , [ provider , <%> ( < < < . ) ) ) ) ) ) ) ) )"]}, {"before_ctx": " ", "before_line": " where [ c . animals ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' ) ", "after_ctx": " <%> <*> x -> a </%> <%> <*> where -> where ( [ a ] . [ discriminator ] in ( n ' eagle ' , n ' kiwi ' ) and </%> <%> <*> x -> a </%> <%> <+> ) </%> <%> <+> ( </%> <%> <*> x -> a </%> <%> <*> STR -> and [ a ] . [ found _ on ] is not null ) STR </%>", "after_line": "where [ c . animals ] . [ discriminator ] in ( n ' eagle ' , n ' kiwi ' )", "predictions": ["where [ c . animals ] . [ discriminator ] in ( n ' kiwi ' , n ' eagle ' )"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> operator . vehicle _ </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " var customer = customers . where ( c = > c . customer _ id = = order . customer _ id ) . first ( ) ; ", "after_ctx": " <%> <*> where -> first </%> <%> <-> ) . first ( </%> <%> <*> where -> first </%> <%> <-> ) . first ( </%>", "after_line": "var customer = customers . first ( c = > c . customer _ id = = order . customer _ id ) ;", "predictions": ["var customer = customers . first ( c ) id id id id id id id id id id id id logger logger logger"]}, {"before_ctx": "<%> <*> where -> first </%> <%> <-> ) . first ( </%> ", "before_line": " var order = orders . where ( o = > o . order _ id = = order _ detail . order _ id ) . first ( ) ; ", "after_ctx": " <%> <*> where -> first </%> <%> <-> ) . first ( </%> <%> <*> where -> first _ or _ default </%> <%> <*> . first _ or _ default ( ) ; -> ; </%>", "after_line": "var order = orders . first ( o = > o . order _ id = = order _ detail . order _ id ) ;", "predictions": ["var order = orders . first ( o query <-> i _ { { { { { { { { { ( equals ) equals ;"]}, {"before_ctx": "<%> <*> where -> first </%> <%> <-> ) . first ( </%> <%> <*> where -> first </%> <%> <-> ) . first ( </%> ", "before_line": " var product = products . where ( p = > p . product _ id = = order _ detail . product _ id ) . first ( ) ; ", "after_ctx": " <%> <*> where -> first _ or _ default </%> <%> <*> . first _ or _ default ( ) ; -> ; </%>", "after_line": "var product = products . first ( p = > p . product _ id = = order _ detail . product _ id ) ;", "predictions": ["var product = products . first ( p = <+> string _ < < <@> _ > query query <@> ( logger _ id _ <*> . property STR STR STR STR STR STR ) >"]}, {"before_ctx": "<%> <*> where -> first </%> <%> <-> ) . first ( </%> <%> <*> where -> first </%> <%> <-> ) . first ( </%> ", "before_line": " var manager = employees . where ( e = > employee . reports _ to = = e . employee _ id ) . first _ or _ default ( ) ; ", "after_ctx": " ", "after_line": "var manager = employees . first _ or _ default ( e = > employee . reports _ to = = e . employee _ id ) ;", "predictions": ["var manager = employees . first _ or -> </@> first = </@> logger logger logger logger"]}, {"before_ctx": " ", "before_line": " assert . true ( await connection . open _ async ( cancellation _ token ) ) ; ", "after_ctx": " <%> <+> cancellation _ token : </%> <%> <+> cancellation _ token : </%>", "after_line": "assert . true ( await connection . open _ async ( cancellation _ token : cancellation _ token ) ) ;", "predictions": ["assert . true ( await connection . open _ <%> ) ; ; _ async ;"]}, {"before_ctx": "<%> <+> cancellation _ token : </%> ", "before_line": " assert . false ( await connection . open _ async ( cancellation _ token ) ) ; assert . false ( await connection . open _ async ( cancellation _ token ) ) ; ", "after_ctx": " <%> <+> cancellation _ token : </%>", "after_line": "assert . false ( await connection . open _ async ( cancellation _ token : cancellation _ token ) ) ; assert . false ( await connection . open _ async ( cancellation _ token : cancellation _ token ) ) ;", "predictions": ["assert . false ( await connection . open _ </@> reader <%> . </%> ( <%> . <@> ( <%> . ( first . ( first _ cache ) ) ) ) collection . > ( <%> _ ; . { . . _ <*> ) | |"]}, {"before_ctx": "<%> <+> cancellation _ token : </%> <%> <+> cancellation _ token : </%> ", "before_line": " assert . true ( await connection . open _ async ( cancellation _ token ) ) ; ", "after_ctx": " ", "after_line": "assert . true ( await connection . open _ async ( cancellation _ token : cancellation _ token ) ) ;", "predictions": ["assert . true ( await connection . open ( ) </%> . <@> ) ; _ connection </%> reader ) <->"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " var redis _ value _ generator _ factory = new redis _ value _ generator _ factory ( mock . of < redis _ database > ( ) ) ; ", "after_ctx": " <%> <-> mock . of < redis _ database > ( ) </%>", "after_line": "var redis _ value _ generator _ factory = new redis _ value _ generator _ factory ( ) ;", "predictions": ["var redis _ value _ generator _ factory = _ async = _ ;"]}, {"before_ctx": "<%> <-> mock . of < redis _ database > ( ) </%> ", "before_line": " var redis _ value _ generator _ factory = new redis _ value _ generator _ factory ( mock . of < redis _ database > ( ) ) ; ", "after_ctx": " ", "after_line": "var redis _ value _ generator _ factory = new redis _ value _ generator _ factory ( ) ;", "predictions": ["var redis _ value _ generator _ factory create create create _ <+> = _ async factory <-> ) <@>"]}, {"before_ctx": "<%> <*> basic -> convention </%> <%> <*> new basic -> create </%> ", "before_line": " assert . is _ type < basic _ model _ builder . entity _ type _ builder . key _ builder > ( returned _ builder ) ; ", "after_ctx": " <%> <*> key -> property </%>", "after_line": "assert . is _ type < key _ builder > ( returned _ builder ) ;", "predictions": ["assert . is _ type < key _ reader _ reader ( ; _ ; _ reader ) _ first . var _ , ;"]}, {"before_ctx": "<%> <*> key -> property </%> <%> <-> var returned _ builder = builder . entity < gunter > ( ) . key ( e = > e . id ) . shared _ name _ extension ( STR ) . shared _ name _ extension ( STR ) ; assert . is _ type < key _ builder > ( returned _ builder ) ; var model = builder . model ; var key = model . get _ entity _ type ( typeof ( gunter ) ) . get _ primary _ key ( ) ; assert . equal ( STR , key [ STR ] ) ; assert . equal ( STR , key [ STR ] ) ; assert . equal ( STR , model [ STR ] ) ; } fact public void can _ write _ basic _ property _ builder _ extension _ with _ common _ name ( ) { var builder = new basic _ model _ builder ( ) ; </%> ", "before_line": " assert . is _ type < basic _ model _ builder . entity _ type _ builder . property _ builder > ( returned _ builder ) ; ", "after_ctx": " <%> <*> property -> index </%>", "after_line": "assert . is _ type < property _ builder > ( returned _ builder ) ;", "predictions": ["assert . is _ type < property _ type _ builder . property _ builder > ( returned _ builder ) ) ) ;"]}, {"before_ctx": "<%> <*> property -> index </%> <%> <-> var returned _ builder = builder . entity < gunter > ( ) . property ( e = > e . id ) . shared _ name _ extension ( STR ) . shared _ name _ extension ( STR ) ; assert . is _ type < property _ builder > ( returned _ builder ) ; var model = builder . model ; var property = model . get _ entity _ type ( typeof ( gunter ) ) . get _ property ( STR ) ; assert . equal ( STR , property [ STR ] ) ; assert . equal ( STR , property [ STR ] ) ; assert . equal ( STR , model [ STR ] ) ; } fact public void can _ write _ basic _ foreign _ key _ builder _ extension _ with _ common _ name ( ) { var builder = new basic _ model _ builder ( ) ; builder . entity < gunter > ( ) . key ( e = > e . id ) ; var returned _ builder = builder . entity < gate > ( ) . foreign _ key < gunter > ( e = > e . gunter _ id ) . shared _ name _ extension ( STR ) . shared _ name _ extension ( STR ) ; assert . is _ type < basic _ model _ builder . entity _ type _ builder . foreign _ key _ builder > ( returned _ builder ) ; var model = builder . model ; var foreign _ key = model . get _ entity _ type ( typeof ( gate ) ) . foreign _ keys . single ( ) ; assert . equal ( STR , foreign _ key [ STR ] ) ; assert . equal ( STR , foreign _ key [ STR ] ) ; assert . equal ( STR , model [ STR ] ) ; } fact public void can _ write _ basic _ index _ builder _ extension _ with _ common _ name ( ) { var builder = new basic _ model _ builder ( ) ; </%> ", "before_line": " assert . is _ type < basic _ model _ builder . entity _ type _ builder . index _ builder > ( returned _ builder ) ; ", "after_ctx": " <%> <-> public void can _ write _ convention _ index _ builder _ extension _ with _ common _ name ( ) { var builder = create _ model _ builder ( ) ; </%>", "after_line": "assert . is _ type < index _ builder > ( returned _ builder ) ;", "predictions": ["assert . is _ type < basic _ model _ builder . index _ type _ builder . index _ type _ builder . index _ type , STR _ builder _ builder . index _ type _ builder . index _ type , STR _ builder ) ;"]}, {"before_ctx": " ", "before_line": " service _ collection . add _ options ( ) ; service _ collection . add _ logging ( ) ; return new entity _ framework _ services _ builder ( service _ collection ) ; ", "after_ctx": " <%> <+> service _ collection . add _ caching ( ) ; </%> <%> <-> . add _ singleton < i _ memory _ cache , memory _ cache > ( ) . add _ singleton < i _ compiled _ query _ cache , compiled _ query _ cache > ( ) </%> <%> <+> . add _ scoped < i _ compiled _ query _ cache , compiled _ query _ cache > ( ) </%>", "after_line": "return service _ collection ;", "predictions": ["return service _ collection . add _ logging connection command command </%> command _ | = command _ | </%> </%> STR ;"]}, {"before_ctx": " ", "before_line": " throw new invalid _ operation _ exception ( STR + reference . to _ string ( ) ) ; ", "after_ctx": " <%> <+> , overwrite : true </%>", "after_line": "throw new invalid _ operation _ exception ( STR + reference ) ;", "predictions": ["throw new invalid _ operation _ exception ( <@> <-> write ( <%> ( ( ( -> _ string <%> overwrite , > ( ( service first _ <+> . . . . . . ) ) , <%> ;"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ internal ; </%> <%> <-> using microsoft _ extensions _ platform _ abstractions ; </%> ", "before_line": " private readonly static string project _ command ", "after_ctx": " <%> <*> configure -> create </%> <%> <*> [ not _ null ] string [ ] args ) -> ) </%> <%> <*> ef _ command _ line _ application app ; var help = false ; if ( args . length = = 0 | | args . first _ or _ default ( a = > a . equals ( STR ) | | a . equals ( STR ) | | a . equals ( STR ) ) ! = null ) -> var app = new command _ line _ application ( throw _ on _ unexpected _ arg : false ) </%> <%> <-> app = execute _ command . configure ( ) ; </%>", "after_line": "private static readonly string project _ command", "predictions": ["private static readonly string project _ command"]}, {"before_ctx": "<%> <-> var connection _ was _ open = connection . db _ connection . state = = connection _ state . open ; if ( ! connection _ was _ open ) { logger . opening _ connection ( connection . connection _ string ) ; </%> <%> <-> } </%> ", "before_line": " if ( ! connection _ was _ open ) { logger . closing _ connection ( connection . connection _ string ) ; connection . close ( ) ; } ", "after_ctx": " ", "after_line": "connection . close ( ) ;", "predictions": ["connection . close ( ) ;"]}, {"before_ctx": "<%> <+> new sql _ batch ( sql ) . </%> <%> <-> , sql </%> ", "before_line": " var connection _ was _ open = connection . db _ connection . state = = connection _ state . open ; if ( ! connection _ was _ open ) { logger . opening _ connection ( connection . connection _ string ) ; connection . open ( ) ; } ", "after_ctx": " <%> <-> if ( ! connection _ was _ open ) { logger . closing _ connection ( connection . connection _ string ) ; </%>", "after_line": "connection . open ( ) ;", "predictions": ["connection . open ( ) ;"]}, {"before_ctx": "<%> <-> var connection _ was _ open = connection . db _ connection . state = = connection _ state . open ; if ( ! connection _ was _ open ) { logger . opening _ connection ( connection . connection _ string ) ; </%> <%> <-> } </%> ", "before_line": " if ( ! connection _ was _ open ) { logger . closing _ connection ( connection . connection _ string ) ; connection . close ( ) ; } ", "after_ctx": " <%> <-> } protected virtual db _ command create _ command ( i _ relational _ connection connection , db _ transaction transaction , string sql ) { var command = connection . db _ connection . create _ command ( ) ; command . command _ text = sql ; command . transaction = transaction ; </%>", "after_line": "connection . close ( ) ;", "predictions": ["connection . close ( ) ;"]}, {"before_ctx": "<%> <*> test -> table </%> <%> <*> model -> query </%> <%> <*> fixture fixture ; -> generator generator = new table _ query _ generator ( ) ; </%> <%> <-> test _ model _ fixture fixture </%> <%> <-> ( fixture ) , new table _ filter _ factory </%> <%> <-> fixture = fixture ; } private static i _ model setup _ model ( test _ model _ fixture fixture ) { var model = fixture . create _ test _ model ( STR ) ; model . add _ entity _ type ( poco _ test _ type . entity _ type ( ) ) ; return model ; } private static expression make _ predicate < t _ source > ( expression < func < t _ source , bool > > where _ predicate ) { return expression . quote ( where _ predicate ) ; </%> ", "before_line": " var query _ source = fixture . create _ with _ entity _ queryable < poco _ test _ type > ( ) ; ", "after_ctx": " <%> <*> ats _ table -> select </%> <%> <*> query -> expression </%> <%> <*> table -> select </%> <%> <*> query -> expression </%> <%> <*> is _ type < ats -> equal ( typeof ( poco </%> <%> <*> table -> test </%> <%> <*> query > ( -> type ) , </%> <%> <+> . type </%> <%> <+> } theory member _ data _ simple _ where _ expressions member _ data _ data _ type _ where _ expressions </%>", "after_line": "var query _ source = create _ with _ entity _ queryable < poco _ test _ type > ( ) ;", "predictions": ["var query _ source = fixture . create _ with _ entity _ queryable ( ) ;"]}, {"before_ctx": "<%> <+> ( </%> <%> <+> _ type , implementation _ type ) </%> <%> <-> service . </%> ", "before_line": " service _ collection . add _ singleton ( service . service _ type , implementation ) ; ", "after_ctx": " <%> <-> service . </%> <%> <-> service . </%> <%> <-> service . </%>", "after_line": "service _ collection . add _ singleton ( service _ type , implementation ) ;", "predictions": ["service _ collection . add _ singleton ( . . . . -> -> <-> where where ) <%> ( _ ) <*> </%> )"]}, {"before_ctx": "<%> <+> ( </%> <%> <+> _ type , implementation _ type ) </%> <%> <-> service . </%> <%> <-> service . </%> ", "before_line": " service _ collection . add _ singleton ( service . service _ type , service . implementation _ type ) ; var constructors = service . implementation _ type . get _ constructors ( ) ; ", "after_ctx": " ", "after_line": "service _ collection . add _ singleton ( service _ type , implementation _ type ) ; var constructors = implementation _ type . get _ constructors ( ) ;", "predictions": ["service _ collection . add _ singleton ( . . . . = . </%> _ ( <%> connection connection <%> ) collection i i _ = ) command equals _ STR </%> | ( ( ( model . model = model <%> model _ ( <*> <*> <*> <%> model <*> _ = <*> <*> _ ( <*> <*> <*> _ ( model <%> model <*> <*> <*> ) <*> <*> <%> model <%> _ ( <%> ) ) type ) type"]}, {"before_ctx": "<%> <-> reader _ offset = reader _ offset ; </%> ", "before_line": " new offset _ value _ reader _ decorator ( value _ reader _ factory . create _ value _ reader ( query _ context . get _ data _ reader ( reader _ index ) ) , reader _ offset ) , ", "after_ctx": " ", "after_line": "value _ reader _ factory . create _ value _ reader ( query _ context . get _ data _ reader ( reader _ index ) ) ,", "predictions": ["new offset _ value _ reader _ decorator type ( query . > -> . or . or . or . connection connection ( _ </@> ) command _ . = connection _ . command _ ; = <%> _ configure key builder STR builder ."]}, {"before_ctx": "<%> <-> reader _ offset = reader _ offset ; </%> ", "before_line": " new offset _ value _ reader _ decorator ( value _ reader _ factory . create _ value _ reader ( query _ context . get _ data _ reader ( reader _ index ) ) , reader _ offset ) , ", "after_ctx": " ", "after_line": "value _ reader _ factory . create _ value _ reader ( query _ context . get _ data _ reader ( reader _ index ) ) ,", "predictions": ["new offset _ value _ reader _ decorator ) = </%> _ service ) ("]}, {"before_ctx": "<%> <-> , bool delimited </%> ", "before_line": " if ( delimited ) { console . write _ line ( STR ) ; } ", "after_ctx": " <%> <-> if ( delimited ) { </%> <%> <-> } </%>", "after_line": "console . write _ line ( STR ) ;", "predictions": ["console . write _ line ( STR ) by STR ] ;"]}, {"before_ctx": "<%> <-> , bool delimited </%> <%> <-> if ( delimited ) { </%> <%> <-> } </%> ", "before_line": " if ( delimited ) { console . write _ line ( STR ) ; } ", "after_ctx": " ", "after_line": "console . write _ line ( STR ) ;", "predictions": ["console . write _ line ( STR ) of factory"]}, {"before_ctx": "<%> <-> ] , [ ] . [ city </%> <%> <-> , [ ] . [ city ] </%> ", "before_line": " order by [ ] . [ city ] , [ ] . [ customer _ id ] ", "after_ctx": " <%> <-> [ ] . [ city ] , </%>", "after_line": "order by [ ] . [ customer _ id ]", "predictions": ["order by [ ] . [ city ] </%> service service _ </@> reader"]}, {"before_ctx": "<%> <-> ] , [ ] . [ city </%> <%> <-> , [ ] . [ city ] </%> <%> <-> [ ] . [ city ] , </%> ", "before_line": " order by [ ] . [ city ] , [ ] . [ customer _ id ] , [ ] . [ order _ id ] STR ", "after_ctx": " ", "after_line": "order by [ ] . [ customer _ id ] , [ ] . [ order _ id ] STR", "predictions": ["order by [ ] . [ city ] , _ ( _ model ( _ model model ) )"]}, {"before_ctx": " ", "before_line": " results = results ? ? new list < object [ ] > ", "after_ctx": " <%> <-> column _ names = </%> <%> <+> = </%>", "after_line": "results ? ? = new list < object [ ] >", "predictions": ["results ? ? = new list < object <@> <@> <@> </%>"]}, {"before_ctx": "<%> <-> results = </%> <%> <+> = </%> ", "before_line": " column _ names = column _ names ? ? new [ ] { STR } ; ", "after_ctx": " ", "after_line": "column _ names ? ? = new [ ] { STR } ;", "predictions": ["column _ names = column _ names ? <*> enumerable enumerable enumerable enumerable & &"]}, {"before_ctx": " ", "before_line": " assert . null ( foreign _ key . delete _ behavior ) ; assert . equal ( delete _ behavior . restrict , ( ( i _ foreign _ key ) foreign _ key ) . delete _ behavior ) ; ", "after_ctx": " <%> <-> assert . equal ( delete _ behavior . cascade , ( ( i _ foreign _ key ) foreign _ key ) . delete _ behavior ) ; </%> <%> <-> assert . equal ( delete _ behavior . restrict , ( ( i _ foreign _ key ) foreign _ key ) . delete _ behavior ) ; foreign _ key . delete _ behavior = null ; assert . null ( foreign _ key . delete _ behavior ) ; assert . equal ( delete _ behavior . restrict , ( ( i _ foreign _ key ) foreign _ key ) . delete _ behavior ) ; </%>", "after_line": "assert . equal ( delete _ behavior . restrict , foreign _ key . delete _ behavior ) ;", "predictions": ["assert . equal ( foreign _ key . delete _ next . ( exception = ) . _ ? . _ next ( ) <%> ; = ) context context context context . -> . <+> } {"]}, {"before_ctx": " ", "before_line": " new bool? is _ unique { get ; set ; } ", "after_ctx": " <%> <*> bool? -> bool </%> <%> <-> ? </%>", "after_line": "new bool is _ unique { get ; set ; }", "predictions": ["new bool? is _ unique { get ; list -> } ) ;"]}, {"before_ctx": "<%> <*> bool? -> bool </%> ", "before_line": " new bool? is _ required { get ; set ; } ", "after_ctx": " <%> <-> ? </%>", "after_line": "new bool is _ required { get ; set ; }", "predictions": ["new bool? is _ required { get ; }"]}, {"before_ctx": "<%> <*> bool? -> bool </%> <%> <*> bool? -> bool </%> ", "before_line": " new delete _ behavior ? delete _ behavior { get ; set ; } ", "after_ctx": " ", "after_line": "new delete _ behavior delete _ behavior { get ; set ; }", "predictions": ["new delete _ behavior { get ; set _ < context"]}, {"before_ctx": " ", "before_line": " assert . null ( relationship _ builder . metadata . is _ required ) ; assert . true ( ( ( i _ foreign _ key ) relationship _ builder . metadata ) . is _ required ) ; ", "after_ctx": " <%> <-> ( ( i _ foreign _ key ) </%> <%> <-> ) </%> <%> <-> ( ( i _ foreign _ key ) </%> <%> <-> ) </%>", "after_line": "assert . true ( relationship _ builder . metadata . is _ required ) ;", "predictions": ["assert . null ( ( ( i _ foreign _ object </%> tree . node ) ) ) ? . <@> . ( ( < < < < < _ required ) relationship _ base ; . cache ( . null ( ( . ; ( <%> get _ time exception exception exception ) exception exception exception ) get ) exception ) exception ) . <%> _ time exception exception ) . <%> _ time ( exception ;"]}, {"before_ctx": " ", "before_line": " var existing _ child = parent . children . where ( c = > c . navigation = = navigation ) . single _ or _ default ( ) ; ", "after_ctx": " <%> <*> existing _ child . include _ state = navigation . is _ collection ( ) ? navigation _ state . collection _ pending : navigation _ state . reference _ pending ; -> existing _ child . include _ state = navigation _ state . pending ; </%>", "after_line": "var existing _ child = parent . children . single _ or _ default ( c = > c . navigation = = navigation ) ;", "predictions": ["var existing _ child = parent . children . database > > database query query < database _ <@> _ <+> > key key key key key key key key key key key key key key ? ) ? bool _ private _ default -> _ context ( class ( class ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ( unit ("]}, {"before_ctx": " ", "before_line": " & & ( left _ binding . navigation _ tree _ node . navigation ? . is _ collection ( ) = = true | | right _ binding . navigation _ tree _ node . navigation ? . is _ collection ( ) = = true ) ) ", "after_ctx": " <%> <-> . navigation </%> <%> <-> ( </%> <%> <-> ) </%> <%> <-> . navigation </%> <%> <-> ( </%> <%> <-> ) </%>", "after_line": "& & ( left _ binding . navigation _ tree _ node . is _ collection | | right _ binding . navigation _ tree _ node . is _ collection ) )", "predictions": ["& & left _ binding . navigation _ tree ( e _ builder _ builder _ builder </%> < -> ( ) <%> <%> = = ( : , , : <-> query . . , navigation , _ time exception exception exception ) exception )"]}, {"before_ctx": "<%> <-> definition . log ( diagnostics , method _ call _ expression . object , </%> <%> <*> argument -> definition . log ( diagnostics , method _ call _ expression </%> <%> <-> binary _ </%> ", "before_line": " method _ call _ expression . object , argument ) ) ; ", "after_ctx": " <%> <-> object , </%> <%> <-> binary _ </%> <%> <-> p . left , </%> <%> <*> right -> expression </%>", "after_line": "method _ call _ expression ) ) ;", "predictions": ["method _ call _ expression . object , argument c c c , -> c c"]}, {"before_ctx": "<%> <+> static </%> ", "before_line": " | | ( ( relationship _ candidate . navigation _ properties . count > 1 ) & & ( relationship _ candidate . inverse _ properties . count > 0 ) ) | | ( relationship _ candidate . inverse _ properties . count > 1 ) ) ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%>", "after_line": "| | relationship _ candidate . navigation _ properties . count > 1 & & relationship _ candidate . inverse _ properties . count > 0 | | relationship _ candidate . inverse _ properties . count > 1 )", "predictions": ["| | ( ( relationship _ candidate . navigation ( <+> entity _ object call _ _ _ _ . is <%> _ child ; : ( = child . : = <%> . count ; 0 _ </%> query _ _ _ cache _ async _ equal key _ _ _ assert _ equal key _ _ _ _ _ _ key _ assert _ count ) _ | _ , . assert _ , _ assert key _ _ _ _ _ _ _ base _ . get _ 1 ) _ next _ type"]}, {"before_ctx": "<%> <+> < in _ memory _ test _ store > </%> <%> <*> private readonly object sync = new object ( ) ; private bool seeded ; public override inheritance _ context create _ context ( bool enable _ filters = false ) { enable _ filters = enable _ filters ; if ( ! seeded ) { lock ( sync ) { if ( ! seeded ) -> private const string database _ name = STR ; </%> <%> <+> public override in _ memory _ test _ store create _ test _ store ( ) = > in _ memory _ test _ store . create _ scratch ( ( ) = > </%> <%> <-> _ core </%> ", "before_line": " if ( context . database . ensure _ created ( ) ) { seed _ data ( context ) ; } ", "after_ctx": " <%> <-> clear _ log ( ) ; </%> <%> <+> } , </%> <%> <*> seeded -> ( ) </%> <%> <*> true ; -> > </%> <%> <-> } </%> <%> <*> } -> { </%> <%> <*> } -> using ( var context = create _ context ( ) ) </%> <%> <+> { </%> <%> <*> return create -> context . get _ service < i _ in _ memory _ store _ cache > ( ) . get </%> <%> <*> context -> store ( database </%> <%> <*> core -> name ) . clear </%> <%> <+> } ) ; </%>", "after_line": "seed _ data ( context ) ;", "predictions": ["seed _ data ( context ) ;"]}, {"before_ctx": "<%> <*> public new virtual time _ span ? get _ next _ delay ( exception last _ exception ) -> protected override time _ span ? get _ next _ delay ( exception last _ exception ) </%> <%> <+> { var base _ delay = base . get _ next _ delay ( last _ exception ) ; return base _ delay ! = null & & get _ next _ delay ! = null ? get _ next _ delay . invoke ( last _ exception ) : base _ delay ; } public time _ span ? get _ next _ delay _ base ( exception last _ exception ) </%> ", "before_line": " return get _ next _ delay ? . invoke ( last _ exception ) ? ? base . get _ next _ delay ( last _ exception ) ; ", "after_ctx": " <%> <-> get = > execution _ strategy . suspended ; </%>", "after_line": "return base . get _ next _ delay ( last _ exception ) ;", "predictions": ["return get _ next _ delay ? . invoke -> . <%> -> context . <%> _ </%> _ ( context . ) class entity class } ;"]}, {"before_ctx": " ", "before_line": " if ( save _ changes ) { save _ changes ( ) ; } ", "after_ctx": " <%> <*> , bool save _ changes = true ) -> ) </%>", "after_line": "save _ changes ( ) ;", "predictions": ["save _ changes ( ) ;"]}, {"before_ctx": " ", "before_line": " if ( save _ changes ) { save _ changes ( ) ; } ", "after_ctx": " <%> <-> bool save _ changes = true </%>", "after_line": "save _ changes ( ) ;", "predictions": ["save _ changes ( ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> select new { c , o } ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> select new { c , o } ) ; </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> } </%> ", "before_line": " if ( foreign _ key . declaring _ entity _ type . find _ primary _ key ( ) ! = null & & handled _ foreign _ keys ? . contains ( foreign _ key ) ! = true ) ", "after_ctx": " ", "after_line": "if ( foreign _ key . declaring _ entity _ type . find _ primary _ key ( ) ! = null )", "predictions": ["if ( foreign _ key . declaring _ entity [ type , </@> true )"]}, {"before_ctx": " ", "before_line": " i _ async _ enumerable < t _ result > execute _ async < t _ result > ( [ not _ null ] expression query ) ; ", "after_ctx": " <%> <-> i _ async _ enumerable < </%> <%> <-> > </%> <%> <-> _ enumerable </%> <%> <*> task -> singleton </%>", "after_line": "t _ result execute _ async < t _ result > ( [ not _ null ] expression query ) ;", "predictions": ["i _ async _ enumerable < t _ result <%> ) execute _ </%> . ;"]}, {"before_ctx": " ", "before_line": " public virtual i _ async _ enumerable < t _ result > execute _ async < t _ result > ( expression query ) ", "after_ctx": " <%> <+> var compiled _ query = compiled _ query _ cache . get _ or _ add _ async _ query ( compiled _ query _ cache _ key _ generator . generate _ cache _ key ( query , async : true ) , ( ) = > compile _ async _ query _ core < t _ result > ( query , query _ model _ generator , database ) ) ; </%> <%> <*> compile -> compiled </%> <%> <-> async _ query < t _ result > ( </%> <%> <-> ) </%>", "after_line": "public virtual t _ result execute _ async < t _ result > ( expression query )", "predictions": ["public virtual i _ async _ enumerable < t _ equal > _ async > _ . equal ( expression _ . _ > query get _ next _ <-> _ next _ query )"]}, {"before_ctx": " ", "before_line": " func < query _ context , i _ async _ enumerable < t _ result > > get _ or _ add _ async _ query < t _ result > ( ", "after_ctx": " <%> <-> i _ async _ enumerable < </%> <%> <-> > </%>", "after_line": "func < query _ context , t _ result > get _ or _ add _ async _ query < t _ result > (", "predictions": ["func < query _ context , i _ async _ enumerable </%> [ [ [ [ [ t _ > ("]}, {"before_ctx": "<%> <-> i _ async _ enumerable < </%> <%> <-> > </%> ", "before_line": " not _ null func < func < query _ context , i _ async _ enumerable < t _ result > > > compiler ) ; ", "after_ctx": " ", "after_line": "not _ null func < func < query _ context , t _ result > > compiler ) ;", "predictions": ["not _ null func < func < query _ context ) ) ) ) ) ) ) ;"]}, {"before_ctx": " ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " <%> <-> . model </%>", "after_line": "validate ( model _ builder ) ;", "predictions": ["validate ( model _ builder . model ;"]}, {"before_ctx": "<%> <-> . model </%> ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " ", "after_line": "validate ( model _ builder ) ;", "predictions": ["validate ( model _ builder . model ;"]}, {"before_ctx": " ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " <%> <-> key </%>", "after_line": "validate ( model _ builder ) ;", "predictions": ["model _ builder . model ) ;"]}, {"before_ctx": " ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " <%> <+> fact public virtual void not _ mapped _ on _ overriden _ mapped _ base _ class _ property _ throws ( ) { var model _ builder = create _ model _ builder ( ) ; model _ builder . entity < unit > ( ) ; model _ builder . entity < base _ entity > ( ) ; </%>", "after_line": "validate ( model _ builder ) ;", "predictions": ["validate ( model _ builder . model ) ;"]}, {"before_ctx": "<%> <*> ; -> . ignore ( e = > e . virtual _ base _ class _ property ) ; </%> ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " <%> <-> public virtual void not _ mapped _ on _ overriden _ mapped _ base _ class _ property _ throws ( ) { var model _ builder = create _ model _ builder ( ) ; model _ builder . ignore < different _ unit > ( ) ; model _ builder . entity < unit > ( ) ; </%>", "after_line": "validate ( model _ builder ) ;", "predictions": ["model _ builder . model ) ;"]}, {"before_ctx": "<%> <-> public virtual void not _ mapped _ on _ overriden _ mapped _ base _ class _ property _ throws ( ) { var model _ builder = create _ model _ builder ( ) ; model _ builder . ignore < different _ unit > ( ) ; model _ builder . entity < unit > ( ) ; model _ builder . entity < base _ entity > ( ) ; validate ( model _ builder . model ) ; assert . null ( model _ builder . model . find _ entity _ type ( typeof ( abstract _ base _ entity ) ) . find _ property ( STR ) ) ; assert . not _ null ( model _ builder . model . find _ entity _ type ( typeof ( base _ entity ) ) . find _ property ( STR ) ) ; assert . not _ null ( model _ builder . model . find _ entity _ type ( typeof ( unit ) ) . find _ property ( STR ) ) ; } protected abstract class abstract _ base _ entity { public long id { get ; set ; } public abstract string abstract _ base _ class _ property { get ; set ; } } protected class base _ entity : abstract _ base _ entity { public string base _ class _ property { get ; set ; } public virtual string virtual _ base _ class _ property { get ; set ; } public override string abstract _ base _ class _ property { get ; set ; } } protected class unit : base _ entity { not _ mapped public override string virtual _ base _ class _ property { get ; set ; } public virtual abstract _ base _ entity related { get ; set ; } } protected class different _ unit : base _ entity { public new string virtual _ base _ class _ property { get ; set ; } } fact public virtual void not _ mapped _ on _ unmapped _ derived _ property _ ignores _ it ( ) { var model _ builder = create _ model _ builder ( ) ; model _ builder . ignore < abstract _ base _ entity > ( ) ; model _ builder . ignore < base _ entity > ( ) ; model _ builder . entity < unit > ( ) ; validate ( model _ builder . model ) ; assert . null ( model _ builder . model . find _ entity _ type ( typeof ( abstract _ base _ entity ) ) ) ; assert . null ( model _ builder . model . find _ entity _ type ( typeof ( base _ entity ) ) ) ; assert . null ( model _ builder . model . find _ entity _ type ( typeof ( unit ) ) . find _ property ( STR ) ) ; } fact </%> ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " ", "after_line": "validate ( model _ builder ) ;", "predictions": ["assert . not _ null ( model _ builder . model . find _ entity > ( ) ;"]}, {"before_ctx": " ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " <%> <-> . model </%>", "after_line": "validate ( model _ builder ) ;", "predictions": ["validate ( model _ builder . model ) <%>"]}, {"before_ctx": "<%> <-> . model </%> ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " ", "after_line": "validate ( model _ builder ) ;", "predictions": ["validate ( model _ internal , _ _ _ _ _ _ _ _ ) ;"]}, {"before_ctx": " ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " <%> <-> . model </%>", "after_line": "validate ( model _ builder ) ;", "predictions": ["validate ( model _ builder ;"]}, {"before_ctx": "<%> <-> . model </%> ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " <%> <+> model _ </%> <%> <+> model _ </%> <%> <*> builder . model -> model _ builder </%> <%> <+> model _ </%>", "after_line": "validate ( model _ builder ) ;", "predictions": ["validate ( model _ builder . model ) ;"]}, {"before_ctx": " ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " <%> <-> . model </%>", "after_line": "validate ( model _ builder ) ;", "predictions": ["validate ( model _ builder . model <%> ) ) ) . _ ) }"]}, {"before_ctx": "<%> <-> . model </%> ", "before_line": " validate ( model _ builder . model ) ; ", "after_ctx": " ", "after_line": "validate ( model _ builder ) ;", "predictions": ["validate ( model _ builder . model ) <+>"]}, {"before_ctx": " ", "before_line": " using system _ diagnostics ; ", "after_ctx": " <%> <+> using microsoft _ data _ entity _ internal ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": " ", "before_line": " var dependent _ entity _ type _ builder = dependent _ type _ with _ composite _ key ; var relationship _ builder = dependent _ entity _ type _ builder . relationship ( ", "after_ctx": " <%> <-> dependent _ entity _ type _ builder , </%> <%> <*> null , null , configuration _ source . convention , is _ unique : false ) ; -> configuration _ source . convention ) ; </%>", "after_line": "var relationship _ builder = dependent _ type _ with _ composite _ key . relationship (", "predictions": ["var relationship _ builder = dependent _ entity _ type _ builder <*>"]}, {"before_ctx": " ", "before_line": " principal _ type _ with _ composite _ key , dependent _ type _ with _ composite _ key , STR , null , null , null , configuration _ source . convention , false ) ; ", "after_ctx": " <%> <-> assert . false ( fk . is _ unique ) ; assert . false ( fk . is _ required ) ; </%>", "after_line": "principal _ type _ with _ composite _ key , STR , null , configuration _ source . convention ) ;", "predictions": ["principal _ type _ with _ composite _ key , dependent _ ( _ -> _ <%> _ configuration , : ( new -> property property property property property property property property ( test _ connection ( . convention string = -> . assert , ( type type ( </%> _ source ( . configure options ) ( command _ source ) ( command ( command _ source options ) ( command options . configure options ( comparer ( comparer _ source options ( comparer ( case options ) ) ( command options . configure options ( comparer ( comparer"]}, {"before_ctx": "<%> <*> var relationship _ builder = dependent _ type . relationship ( principal _ type , dependent _ type , null , null , new [ ] { fk _ property } , principal _ type . metadata . get _ primary _ key ( ) . properties , configuration _ source . convention , false ) ; -> var relationship _ builder = dependent _ type . has _ foreign _ key ( </%> <%> <+> principal _ type , new [ ] { fk _ property } , configuration _ source . convention ) ; </%> ", "before_line": " principal _ type , dependent _ type , STR , null , null , null , configuration _ source . convention , false ) ; ", "after_ctx": " <%> <-> assert . false ( new _ fk . is _ unique ) ; assert . false ( new _ fk . is _ required ) ; </%>", "after_line": "principal _ type , STR , null , configuration _ source . convention ) ;", "predictions": ["principal _ type , STR , null , null , null , configuration _ source . new + <%> ) configuration configuration configuration configuration configuration configuration configuration configuration configuration + ;"]}, {"before_ctx": "<%> <+> get _ or _ </%> <%> <*> string -> int </%> ", "before_line": " strings . format _ bad _ backing _ field _ type ( STR , typeof ( int? ) . name , typeof ( the _ dark _ side ) . full _ name , STR , typeof ( string ) . name ) , ", "after_ctx": " <%> <+> get _ or _ </%>", "after_line": "strings . format _ bad _ backing _ field _ type ( STR , typeof ( string ) . name , typeof ( the _ dark _ side ) . full _ name , STR , typeof ( int ) . name ) ,", "predictions": ["strings . format _ bad _ backing _ field _ type ( . . int? ) options ) ) ) ) property"]}, {"before_ctx": "<%> <-> using core _ strings = microsoft . data . entity . internal . strings ; </%> <%> <-> private const string connection _ string _ key = STR ; private const string command _ timeout _ key = STR ; private const string max _ batch _ size _ key = STR ; </%> ", "before_line": " var options _ extension = new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) ; ", "after_ctx": " <%> <-> create _ options ( new dictionary < string , string > ( ) ) </%>", "after_line": "var options _ extension = new test _ relational _ options _ extension ( ) ;", "predictions": ["var options _ extension = new test _ relational _ options _ extension ( . < <+> , ) ) ) ) ) ) ) _ size ) ) ) ) ) ) ) ) ) ) ) ) ;"]}, {"before_ctx": "<%> <-> create _ options ( new dictionary < string , string > ( ) ) </%> ", "before_line": " assert . throws < argument _ null _ exception > ( ( ) = > { new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) . connection = null ; } ) ; ", "after_ctx": " <%> <-> create _ options ( new dictionary < string , string > ( ) ) </%>", "after_line": "assert . throws < argument _ null _ exception > ( ( ) = > { new test _ relational _ options _ extension ( ) . connection = null ; } ) ;", "predictions": ["assert . throws < argument _ null _ exception > ( ( ) = </%> -> </%> </%> </%> </%> </%> _ argument _ ; new = > _ </@> options </%> string < < dictionary ( . ) <%> ) >"]}, {"before_ctx": "<%> <-> create _ options ( new dictionary < string , string > ( ) ) </%> ", "before_line": " var options _ extension = new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) ; ", "after_ctx": " <%> <-> assert . throws < argument _ null _ exception > ( ( ) = > { new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) . connection _ string = null ; } ) ; } fact </%>", "after_line": "var options _ extension = new test _ relational _ options _ extension ( ) ;", "predictions": ["var options _ extension = create _ options ( new dictionary < string , ) ( </%> , . , , </%> , </@> ) </%> ( ) ( </%> </%> </%> ) ) not not null = false false"]}, {"before_ctx": "<%> <*> assert . throws < argument _ null _ exception > ( ( ) = > { new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) . connection _ string = null ; } ) ; } fact public void configure _ sets _ connection _ string _ to _ value _ specified _ in _ raw _ options ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) { { connection _ string _ key , connection _ string } } ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) ; assert . equal ( connection _ string , options _ extension . connection _ string ) ; } fact public void configure _ does _ not _ set _ connection _ string _ if _ value _ already _ set ( ) { const string original _ connection _ string = STR ; var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) { { connection _ string _ key , connection _ string } } ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) { connection _ string = original _ connection _ string } ; assert . equal ( original _ connection _ string , options _ extension . connection _ string ) ; } fact public void configure _ does _ not _ set _ connection _ string _ if _ not _ specified _ in _ raw _ options ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) ; assert . null ( options _ extension . connection _ string ) ; -> assert . throws < argument _ null _ exception > ( ( ) = > { new test _ relational _ options _ extension ( ) . connection _ string = null ; } ) ; </%> ", "before_line": " var options _ extension = new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) ; ", "after_ctx": " ", "after_line": "var options _ extension = new test _ relational _ options _ extension ( ) ;", "predictions": ["assert . throws < argument _ null _ exception > ( ( ) = > new test _ relational _ options _ extension ( ( ) = > new test _ relational _ options _ extension ( ( ) = > new _ connection _ name ) ) ;"]}, {"before_ctx": "<%> <*> ( ) = > { new test _ relational _ options _ extension ( create _ options ( new dictionary < string , string > ( ) ) ) . command _ timeout = - 1 ; } ) . message ) ; } fact public void configure _ sets _ command _ timeout _ to _ value _ specified _ in _ raw _ options ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) { { command _ timeout _ key , STR } } ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) ; assert . equal ( 1 , options _ extension . command _ timeout ) ; } fact public void configure _ does _ not _ set _ command _ timeout _ if _ value _ already _ set ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) { { command _ timeout _ key , STR } } ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) { command _ timeout = NUM } ; assert . equal ( NUM , options _ extension . command _ timeout ) ; } fact public void configure _ does _ not _ set _ command _ timeout _ if _ not _ specified _ in _ raw _ options ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) ; var options _ extension = new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) ; assert . null ( options _ extension . command _ timeout ) ; } fact public void configure _ throws _ if _ command _ timeout _ specified _ in _ raw _ options _ is _ invalid ( ) { var raw _ options = new dictionary < string , string > ( string _ comparer . ordinal _ ignore _ case ) { { command _ timeout _ key , STR } } ; assert . equal ( core _ strings . integer _ configuration _ value _ format _ error ( command _ timeout _ key , STR ) , assert . throws < invalid _ operation _ exception > ( ( ) = > new test _ relational _ options _ extension ( create _ options ( raw _ options ) ) ) . message ) ; -> ( ) = > { new test _ relational _ options _ extension ( ) . command _ timeout = - 1 ; } ) . message ) ; </%> ", "before_line": " var options _ extension = new test _ relational _ options _ extension ( ( create _ options ( new dictionary < string , string > ( ) ) ) ) ; ", "after_ctx": " ", "after_line": "var options _ extension = new test _ relational _ options _ extension ( ) ;", "predictions": ["assert . contains ( ( object < string > . ordinal _ ignore , string _ options : NUM ) ) ;"]}, {"before_ctx": "<%> <+> include _ navigations ( query _ model , include _ specifications ) ; } protected virtual void include _ navigations ( not _ null query _ model query _ model , not _ null i _ read _ only _ collection < include _ specification > include _ specifications ) { check . not _ null ( query _ model , nameof ( query _ model ) ) ; check . not _ null ( include _ specifications , nameof ( include _ specifications ) ) ; </%> ", "before_line": " foreach ( var include _ specification in include _ specifications . order _ by ( a = > a . navigation _ path . first ( ) . points _ to _ principal ( ) ) ) ", "after_ctx": " ", "after_line": "foreach ( var include _ specification in include _ specifications )", "predictions": ["foreach ( var include _ specification in include _ specifications )"]}, {"before_ctx": " ", "before_line": " include _ specification . query _ source , ", "after_ctx": " <%> <-> include _ specification . navigation _ path , </%>", "after_line": "include _ specification ,", "predictions": ["query _ source ,"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <+> select g . full _ name , assert _ order : true ) ; } </%>", "after_line": "conditional _ theory", "predictions": ["conditional"]}, {"before_ctx": "<%> <+> } ) . to _ list _ async ( ) ; assert . equal ( 1 , results . count ) ; } } conditional _ fact </%> ", "before_line": " using ( var context = fixture . create _ context ( ) ) ", "after_ctx": " ", "after_line": "using ( var context = create _ context ( ) )", "predictions": ["using ( var context = fixture . create _ context )"]}, {"before_ctx": "<%> <*> new internal -> create _ conventionless </%> <%> <*> new model -> ) . get _ infrastructure </%> <%> <-> ) </%> ", "before_line": " var validator = test _ helpers . create _ model _ validator ( ) ; ", "after_ctx": " ", "after_line": "var validator = create _ model _ validator ( ) ;", "predictions": ["var validator = create _ model _ validator ( ) ;"]}, {"before_ctx": " ", "before_line": " db _ function _ schema _ dbo ", "after_ctx": " <%> <-> _ schema _ dbo </%>", "after_line": "db _ function", "predictions": ["db _ function _ ( model model"]}, {"before_ctx": "<%> <-> _ schema _ dbo </%> ", "before_line": " db _ function _ schema _ dbo ", "after_ctx": " ", "after_line": "db _ function", "predictions": ["db _ function _ dbo model model"]}, {"before_ctx": " ", "before_line": " var db _ context _ generator _ model = new db _ context _ generator _ model ( ) ", "after_ctx": " <%> <-> filters = ( configuration . filters ? ? string . empty ) , </%>", "after_line": "var db _ context _ generator _ model = new db _ context _ generator _ model", "predictions": ["var db _ context _ generator _ model = new db _ builder model _ access"]}, {"before_ctx": "<%> <-> , configuration . filters </%> <%> <*> throw new invalid _ program _ exception ( STR + provider . get _ type ( ) + STR + configuration . connection _ string + STR + configuration . filters ) ; } if ( metadata _ model . entity _ types . count ( ) = = 0 ) { throw new invalid _ program _ exception ( STR + provider . get _ type ( ) + STR + configuration . connection _ string + STR + configuration . filters ) ; -> throw new invalid _ operation _ exception ( STR + provider . get _ type ( ) </%> <%> <+> + STR + configuration . connection _ string ) ; </%> ", "before_line": " if ( ! directory . exists ( output _ directory _ name ) ) { directory . create _ directory ( output _ directory _ name ) ; } ", "after_ctx": " ", "after_line": "directory . create _ directory ( output _ directory _ name ) ;", "predictions": ["directory . create _ directory ( output _ directory _ name ) ;"]}, {"before_ctx": "<%> <-> ( ( entity _ type ) entity _ type ) </%> <%> <*> . try _ get -> entity </%> <%> <*> annotation ( -> type [ </%> <%> <*> ) -> ] </%> <%> <-> sb , </%> <%> <*> . value -> , sb </%> ", "before_line": " + STR + error _ message _ annotation . value ) ; ", "after_ctx": " <%> <*> . cast < foreign _ key > ( ) ) -> ) </%>", "after_line": "+ STR + error _ message _ annotation ) ;", "predictions": ["+ STR + error _ message _ annotation ) ;"]}, {"before_ctx": " ", "before_line": " c _ sharp _ code _ generator _ helper . instance . single _ line _ comment ( sb , STR ) ; ", "after_ctx": " <%> <+> i _ property property , </%> <%> <-> , i _ property property </%> <%> <*> sb -> access _ modifier . public </%> <%> <-> access _ modifier . public , </%> <%> <+> , sb </%>", "after_line": "c _ sharp _ code _ generator _ helper . instance . single _ line _ comment ( STR , sb ) ;", "predictions": ["single _ line _ comment . instance . single _ line _ full string STR <-> ( > > > ;"]}, {"before_ctx": "<%> <*> sb -> STR </%> <%> <*> STR -> sb </%> ", "before_line": " public override void generate _ entity _ property ( indented _ string _ builder sb , i _ property property ) ", "after_ctx": " <%> <*> sb -> access _ modifier . public </%> <%> <-> access _ modifier . public , </%> <%> <+> , sb </%> <%> <*> sb -> STR </%> <%> <*> STR -> sb </%>", "after_line": "public override void generate _ entity _ property ( i _ property property , indented _ string _ builder sb )", "predictions": ["public override void generate _ entity _ property ( indented _ string builder entity . [ <@> <*> <*> ;"]}, {"before_ctx": "<%> <*> sb -> STR </%> <%> <*> STR -> sb </%> <%> <+> i _ property property , </%> <%> <-> , i _ property property </%> ", "before_line": " c _ sharp _ code _ generator _ helper . instance . add _ property ( sb , access _ modifier . public , virtual _ modifier . none , property . property _ type , property . name ) ; ", "after_ctx": " <%> <*> sb -> STR </%> <%> <*> STR -> sb </%> <%> <*> . cast < foreign _ key > ( ) ) -> ) </%>", "after_line": "c _ sharp _ code _ generator _ helper . instance . add _ property ( access _ modifier . public , virtual _ modifier . none , property . property _ type , property . name , sb ) ;", "predictions": ["c _ generator _ helper . instance . add _ property ( sb , ] ( } _ extension ) ( string ( string _ size = string ( string _ size , <%> </%> name ( ( ( ( collection [ , options ; options ;"]}, {"before_ctx": "<%> <+> i _ property property , </%> <%> <-> , i _ property property </%> <%> <*> sb -> access _ modifier . public </%> <%> <-> access _ modifier . public , </%> <%> <+> , sb </%> ", "before_line": " c _ sharp _ code _ generator _ helper . instance . single _ line _ comment ( sb , STR ) ; ", "after_ctx": " <%> <*> . cast < foreign _ key > ( ) ) -> ) </%> <%> <-> foreign _ key </%> <%> <*> . get -> foreign </%> <%> <*> annotation ( -> key [ </%> <%> <*> ) . value -> ] </%>", "after_line": "c _ sharp _ code _ generator _ helper . instance . single _ line _ comment ( STR , sb ) ;", "predictions": ["single _ line _ comment . instance . single _ line _ comment ( a model is is new new new new new new _ key builder ( ) ) = is _ provider ) throw"]}, {"before_ctx": "<%> <*> . cast < foreign _ key > ( ) ) -> ) </%> <%> <-> foreign _ key </%> <%> <*> . get -> foreign </%> <%> <*> annotation ( -> key [ </%> <%> <*> ) . value -> ] </%> ", "before_line": " c _ sharp _ code _ generator _ helper . instance . single _ line _ comment ( sb , STR + other _ entity _ type . name + STR ) ; ", "after_ctx": " <%> <-> ( ( i _ foreign _ key ) </%> <%> <-> ) </%> <%> <-> sb , </%>", "after_line": "c _ sharp _ code _ generator _ helper . instance . single _ line _ comment ( STR + other _ entity _ type . name + STR , sb ) ;", "predictions": ["single _ line _ comment ( sb , STR + other _ entity _ type options STR ) private"]}, {"before_ctx": " ", "before_line": " public virtual void single _ line _ comment ( indented _ string _ builder sb , string comment ) ", "after_ctx": " <%> <+> string namespace , </%> <%> <-> , string namespace </%>", "after_line": "public virtual void single _ line _ comment ( string comment , indented _ string _ builder sb )", "predictions": ["public virtual void single _ line _ comment ( string _ string _ <@> public , string key -> )"]}, {"before_ctx": "<%> <+> string comment , </%> <%> <-> , string comment </%> ", "before_line": " public virtual void add _ using _ statement ( indented _ string _ builder sb , string namespace ) ", "after_ctx": " <%> <+> string class _ namespace , </%> <%> <-> , string class _ namespace </%>", "after_line": "public virtual void add _ using _ statement ( string namespace , indented _ string _ builder sb )", "predictions": ["public virtual void add _ using _ statement ( string append <%> sb key . <@> . indented )"]}, {"before_ctx": "<%> <+> string namespace , </%> <%> <-> , string namespace </%> ", "before_line": " public virtual void begin _ namespace ( indented _ string _ builder sb , string class _ namespace ) ", "after_ctx": " ", "after_line": "public virtual void begin _ namespace ( string class _ namespace , indented _ string _ builder sb )", "predictions": ["public virtual void begin _ namespace ( indented _ , -> <@> entity </%> <*> class -> <-> <-> <-> </%> <%> c . . . protected )"]}, {"before_ctx": "<%> <*> public virtual string class _ namespace { get { return namespace _ name ; } } -> public virtual string class _ namespace { get ; } </%> ", "before_line": " c _ sharp _ code _ generator _ helper . instance . begin _ namespace ( sb , class _ namespace ) ; c _ sharp _ code _ generator _ helper . instance . begin _ class ( sb , access _ modifier . public , class _ name , is _ partial : true ) ; ", "after_ctx": " <%> <-> sb , </%> <%> <+> , sb </%> <%> <*> sb -> STR </%> <%> <*> STR -> sb </%> <%> <-> sb , </%> <%> <+> , sb </%>", "after_line": "c _ sharp _ code _ generator _ helper . instance . begin _ namespace ( class _ namespace , sb ) ; c _ sharp _ code _ generator _ helper . instance . begin _ class ( access _ modifier . public , class _ name , is _ partial : true , sb : sb ) ;", "predictions": ["begin _ namespace ( sb , class _ namespace ) var var _ to _ , properties properties properties properties properties ( . <-> ( . ( ; . public entity entity entity entity ; if _ metadata </@> if _ metadata </@> return return ;"]}, {"before_ctx": "<%> <-> sb , </%> <%> <+> , sb </%> <%> <-> var original _ namespaces = new list < string > ( used _ namespaces ) ; </%> <%> <*> where -> except </%> <%> <*> ns = > ! original -> used </%> <%> <-> . contains ( ns ) </%> ", "before_line": " c _ sharp _ code _ generator _ helper . instance . add _ using _ statement ( sb , namespace ) ; ", "after_ctx": " ", "after_line": "c _ sharp _ code _ generator _ helper . instance . add _ using _ statement ( namespace , sb ) ;", "predictions": ["instance . add _ using _ statement ( sb , namespace key key ) ( ) ( operation ) return operation return operation return ;"]}, {"before_ctx": " ", "before_line": " generate _ entity _ property ( sb , property ) ; ", "after_ctx": " <%> <+> i _ property property , </%> <%> <-> , i _ property property </%> <%> <-> var primary _ key _ properties = entity _ type . get _ primary _ key ( ) . properties . to _ list ( ) ; foreach ( var property in primary _ key _ properties ) { yield return property ; </%>", "after_line": "generate _ entity _ property ( property , sb ) ;", "predictions": ["generate _ entity _ property ( property , generate _ > ( <%> ( <%> ( ) </%> </%> ) ) ) ) ) ) ) ) ;"]}, {"before_ctx": "<%> <*> sb -> property </%> <%> <*> property -> sb </%> ", "before_line": " public abstract void generate _ entity _ property ( indented _ string _ builder sb , i _ property property ) ; ", "after_ctx": " <%> <-> var primary _ key _ properties = entity _ type . get _ primary _ key ( ) . properties . to _ list ( ) ; foreach ( var property in primary _ key _ properties ) { yield return property ; } var foreign _ key _ properties = entity _ type . foreign _ keys . select _ many ( fk = > fk . properties ) . distinct ( ) . to _ list ( ) ; foreach ( var property in </%>", "after_line": "public abstract void generate _ entity _ property ( i _ property property , indented _ string _ builder sb ) ;", "predictions": ["public abstract void generate _ entity _ property ( indented _ string _ </@> , if <+> <%> </%> </%> </%> </%> </%> ) ."]}, {"before_ctx": "<%> <-> sb , </%> <%> <+> , sb </%> <%> <-> sb , </%> <%> <+> , sb </%> <%> <-> sb , </%> <%> <+> , sb </%> ", "before_line": " c _ sharp _ code _ generator _ helper . instance . add _ using _ statement ( sb , namespace ) ; ", "after_ctx": " ", "after_line": "c _ sharp _ code _ generator _ helper . instance . add _ using _ statement ( namespace , sb ) ;", "predictions": ["instance . add _ using _ statement ( sb , <@> STR method STR ) method"]}, {"before_ctx": " ", "before_line": " c _ sharp _ code _ generator _ helper . instance . begin _ method ( sb , access _ modifier . protected , virtual _ modifier . override , STR , STR , on _ configuring _ method _ parameters ) ; ", "after_ctx": " <%> <*> sb -> access _ modifier . protected </%> <%> <-> access _ modifier . protected , </%> <%> <+> , sb </%>", "after_line": "c _ sharp _ code _ generator _ helper . instance . begin _ method ( access _ modifier . protected , virtual _ modifier . override , STR , STR , sb , on _ configuring _ method _ parameters ) ;", "predictions": ["begin _ method ( sb , access _ modifier . protected , sharp _ modifier . on property _ parameters <-> key property <-> to _ in _ ( _ invalid <%> <%> sharp sharp -> , sharp _ get _ <*> _ virtual { -> _ : { sharp , -> , sharp , sharp , sharp _ : sharp sharp _ <*> { sharp , -> , sharp , sharp _ helper { sharp , -> , sharp _ get _ get _ virtual { sharp , -> , sharp _ get _ get _ virtual { sharp"]}, {"before_ctx": "<%> <*> sb -> access _ modifier . protected </%> <%> <-> access _ modifier . protected , </%> <%> <+> , sb </%> ", "before_line": " c _ sharp _ code _ generator _ helper . instance . begin _ method ( sb , access _ modifier . protected , virtual _ modifier . override , STR , STR , on _ model _ creating _ method _ parameters ) ; ", "after_ctx": " ", "after_line": "c _ sharp _ code _ generator _ helper . instance . begin _ method ( access _ modifier . protected , virtual _ modifier . override , STR , STR , sb , on _ model _ creating _ method _ parameters ) ;", "predictions": ["begin _ method ( sb , access _ modifier . <%> property virtual ( override property property _ add _ ; _ add _ instance = on _ return _ : { string entity entity entity _ <@> _ type entity entity _ sharp . </@> entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity"]}, {"before_ctx": "<%> <-> sb , </%> <%> <+> , sb </%> ", "before_line": " generate _ navigations _ configuration ( navigations _ string _ builder , entity _ type ) ; ", "after_ctx": " ", "after_line": "generate _ navigations _ configuration ( entity _ type , navigations _ string _ builder ) ;", "predictions": ["generate _ navigations _ configuration ( navigations _ string _ builder , , . entity . </%> <%> entity -> public _ <+> sb -> , _ instance protected . . ,"]}, {"before_ctx": "<%> <-> indented _ string _ builder sb , </%> <%> <*> ) -> , indented _ string _ builder sb ) </%> ", "before_line": " generate _ entity _ key _ configuration ( sb , key ) ; } generate _ entity _ facets _ configuration ( sb , entity _ type ) ; ", "after_ctx": " <%> <*> sb -> property </%> <%> <*> property -> sb </%> <%> <+> i _ key key , </%> <%> <-> , i _ key key </%>", "after_line": "generate _ entity _ key _ configuration ( key , sb ) ; } generate _ entity _ facets _ configuration ( entity _ type , sb ) ;", "predictions": ["generate _ entity _ key _ configuration ( sb , ) { bool false { ! if _ helper , </%> class class class class ) public"]}, {"before_ctx": "<%> <-> sb , </%> <%> <+> , sb </%> <%> <*> sb -> property </%> <%> <*> property -> sb </%> ", "before_line": " public virtual void generate _ entity _ key _ configuration ( indented _ string _ builder sb , i _ key key ) { sb . append ( STR ) ; ", "after_ctx": " ", "after_line": "public virtual void generate _ entity _ key _ configuration ( i _ key key , indented _ string _ builder sb ) { sb . append ( STR ) ;", "predictions": ["public virtual void generate _ entity _ key _ configuration <-> <-> , i , <+> <+> protected </@> access access _ </%> _ configuration access <-> protected ! STR _ </@> _ . _ -> ;"]}, {"before_ctx": "<%> <*> ! can -> is </%> <%> <*> add -> ignored </%> ", "before_line": " convention _ dispatcher . on _ entity _ type _ added , ", "after_ctx": " <%> <*> ! can -> is </%> <%> <*> add -> ignored </%>", "after_line": "on _ entity _ type _ added ,", "predictions": ["on _ entity _ type _ added ,"]}, {"before_ctx": "<%> <*> ! can -> is </%> <%> <*> add -> ignored </%> ", "before_line": " convention _ dispatcher . on _ entity _ type _ added , ", "after_ctx": " <%> <*> private bool can -> private internal _ entity _ type _ builder on _ entity _ type </%> <%> <*> add -> added </%> <%> <*> string name , configuration -> internal _ entity _ type </%> <%> <*> source configuration -> builder entity _ type </%> <%> <*> source -> builder </%> <%> <+> if ( ignored _ entity _ type _ names . has _ value ) { ignored _ entity _ type _ names . value . remove ( entity _ type _ builder . metadata . name ) ; } return convention _ dispatcher . on _ entity _ type _ added ( entity _ type _ builder ) ; } </%>", "after_line": "on _ entity _ type _ added ,", "predictions": ["on _ entity _ type _ added ,"]}, {"before_ctx": "<%> <+> private bool is _ ignored ( string name , configuration _ source configuration _ source ) { if ( configuration _ source = = configuration _ source . explicit ) { return false ; } </%> ", "before_line": " if ( ! configuration _ source . overrides ( ignored _ configuration _ source ) ) ", "after_ctx": " <%> <*> return false ; } if ( ignored _ configuration _ source = = configuration _ source . explicit ) { throw new invalid _ operation _ exception ( strings . entity _ ignored _ explicitly ( name ) ) ; -> return true ; </%>", "after_line": "if ( ignored _ configuration _ source . overrides ( configuration _ source ) )", "predictions": ["if ( ! overrides _ configuration _ source )"]}, {"before_ctx": " ", "before_line": " case constants . sqlite _ integer : ", "after_ctx": " <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>", "after_line": "case sqlite _ integer :", "predictions": ["case sqlite _ integer :"]}, {"before_ctx": "<%> <-> constants . </%> ", "before_line": " case constants . sqlite _ float : ", "after_ctx": " <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>", "after_line": "case sqlite _ float :", "predictions": ["case sqlite _ float :"]}, {"before_ctx": "<%> <-> constants . </%> <%> <-> constants . </%> ", "before_line": " case constants . sqlite _ text : ", "after_ctx": " <%> <-> constants . </%> <%> <-> constants . </%>", "after_line": "case sqlite _ text :", "predictions": ["case sqlite _ text :"]}, {"before_ctx": "<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> ", "before_line": " case constants . sqlite _ blob : ", "after_ctx": " <%> <-> constants . </%>", "after_line": "case sqlite _ blob :", "predictions": ["case sqlite _ blob :"]}, {"before_ctx": "<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> ", "before_line": " case constants . sqlite _ null : ", "after_ctx": " ", "after_line": "case sqlite _ null :", "predictions": ["case sqlite _ null :"]}, {"before_ctx": " ", "before_line": " case constants . sqlite _ integer : ", "after_ctx": " <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>", "after_line": "case sqlite _ integer :", "predictions": ["case sqlite _ integer :"]}, {"before_ctx": "<%> <-> constants . </%> ", "before_line": " case constants . sqlite _ float : ", "after_ctx": " <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>", "after_line": "case sqlite _ float :", "predictions": ["case sqlite _ float :"]}, {"before_ctx": "<%> <-> constants . </%> <%> <-> constants . </%> ", "before_line": " case constants . sqlite _ text : ", "after_ctx": " <%> <-> constants . </%> <%> <-> constants . </%>", "after_line": "case sqlite _ text :", "predictions": ["case sqlite _ text :"]}, {"before_ctx": "<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> ", "before_line": " case constants . sqlite _ blob : ", "after_ctx": " <%> <-> constants . </%>", "after_line": "case sqlite _ blob :", "predictions": ["case sqlite _ blob :"]}, {"before_ctx": "<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> ", "before_line": " case constants . sqlite _ null : ", "after_ctx": " <%> <-> constants . </%>", "after_line": "case sqlite _ null :", "predictions": ["case sqlite _ null :"]}, {"before_ctx": "<%> <-> constants . </%> ", "before_line": " if ( type = = constants . sqlite _ null ", "after_ctx": " ", "after_line": "if ( type = = sqlite _ null", "predictions": ["if ( type = = sqlite _ null"]}, {"before_ctx": " ", "before_line": " case constants . sqlite _ integer : ", "after_ctx": " <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>", "after_line": "case sqlite _ integer :", "predictions": ["case sqlite _ integer :"]}, {"before_ctx": "<%> <-> constants . </%> ", "before_line": " case constants . sqlite _ float : ", "after_ctx": " <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%>", "after_line": "case sqlite _ float :", "predictions": ["case sqlite _ float :"]}, {"before_ctx": "<%> <-> constants . </%> <%> <-> constants . </%> ", "before_line": " case constants . sqlite _ text : ", "after_ctx": " <%> <-> constants . </%> <%> <-> constants . </%>", "after_line": "case sqlite _ text :", "predictions": ["case sqlite _ text :"]}, {"before_ctx": "<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> ", "before_line": " case constants . sqlite _ blob : ", "after_ctx": " <%> <-> constants . </%>", "after_line": "case sqlite _ blob :", "predictions": ["case sqlite _ blob :"]}, {"before_ctx": "<%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> <%> <-> constants . </%> ", "before_line": " case constants . sqlite _ null : ", "after_ctx": " ", "after_line": "case sqlite _ null :", "predictions": ["case sqlite _ null :"]}, {"before_ctx": " ", "before_line": " var strategy = property . sql _ server ( ) . identity _ strategy ; return property . clr _ type . is _ integer ( ) & & strategy = = sql _ server _ identity _ strategy . sequence _ hi _ lo ", "after_ctx": " <%> <*> return property . clr _ type = = typeof ( guid ) ? sequential _ guid _ factory . create ( property ) -> return property . clr _ type . unwrap _ nullable _ type ( ) = = typeof ( guid ) </%>", "after_line": "return property . sql _ server ( ) . identity _ strategy = = sql _ server _ identity _ strategy . sequence _ hi _ lo", "predictions": ["var strategy = property . sql _ server > ) = ) = t . <%> _ <*> . out _ of execute execute not of execute _ of , execute _ not _ range"]}, {"before_ctx": "<%> <*> migrations -> history _ rows </%> <%> <*> migrations -> rows </%> <%> <*> migrations -> history _ rows </%> <%> <*> migrations -> history _ rows </%> <%> <*> migrations -> history _ rows </%> <%> <*> i _ migration -> history </%> <%> <*> metadata -> row </%> ", "before_line": " return new i _ migration _ metadata [ ] ", "after_ctx": " <%> <+> history _ row { </%> <%> <*> metadata ( -> id = </%> <%> <*> ) -> } </%> <%> <+> history _ row { </%> <%> <*> metadata ( -> id = </%> <%> <*> ) -> } </%>", "after_line": "return new [ ]", "predictions": ["return new [ ]"]}, {"before_ctx": " ", "before_line": " linq _ operator _ provider . intercept _ exceptions < t > ( null , null , null ) ; ", "after_ctx": " <%> <+> null , </%>", "after_line": "linq _ operator _ provider . intercept _ exceptions < t > ( null , null , null , null ) ;", "predictions": ["linq _ operator _ provider . intercept <%> exceptions < = _ sql -> <%> = _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ null ; ;"]}, {"before_ctx": "<%> <+> null , </%> ", "before_line": " async _ linq _ operator _ provider . intercept _ exceptions < t > ( null , null , null ) ; ", "after_ctx": " ", "after_line": "async _ linq _ operator _ provider . intercept _ exceptions < t > ( null , null , null , null ) ;", "predictions": ["async _ linq _ operator _ provider ( ( . equals > ( = = query ( query ( null t t t t t t t t t t t t t t t t <%> ( ( ( ( ( <%> argument ) ( ( ( ( exception . ( ( ( ( t exception ( ( exception exception . ( ( ( ( t exception ) ) ) ) ) . ( ( ( ( ( t ) inner ) ) ) ) ,"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <+> = > assert _ query < customer > ( is _ async , cs = > cs . where ( c = > new [ ] { STR , STR , STR } . any ( li = > li . equals ( c . customer _ id ) ) ) , entry _ count : 2 ) ; conditional _ theory member _ data _ nameof _ is _ async _ data public virtual task where _ subquery _ any _ equals _ static ( bool is _ async ) </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue"]}, {"before_ctx": "<%> <-> tuple . create ( typeof ( int ) , new relational _ type _ mapping ( STR , db _ type . int ) ) , tuple . create ( typeof ( date _ time ) , new relational _ type _ mapping ( STR , db _ type . date _ time ) ) , tuple . create ( typeof ( bool ) , new relational _ type _ mapping ( STR , db _ type . boolean ) ) , tuple . create ( typeof ( double ) , new relational _ type _ mapping ( STR , db _ type . double ) ) , tuple . create ( typeof ( long ) , new relational _ type _ mapping ( STR , db _ type . int ) ) , tuple . create ( typeof ( date _ time _ offset ) , new relational _ type _ mapping ( STR , db _ type . date _ time _ offset ) ) , tuple . create ( typeof ( short ) , new relational _ type _ mapping ( STR , db _ type . int ) ) , tuple . create ( typeof ( float ) , new relational _ type _ mapping ( STR , db _ type . single ) ) } ; private readonly relational _ sized _ type _ mapping string _ mapping = new relational _ sized _ type _ mapping ( STR , db _ type . ansi _ string , NUM ) ; private readonly relational _ decimal _ type _ mapping decimal _ mapping = new relational _ decimal _ type _ mapping ( NUM , 2 ) ; public virtual relational _ type _ mapping get _ type _ mapping ( i _ property property ) = > get _ type _ mapping ( property . relational ( ) . column _ type , property . relational ( ) . column , property . clr _ type . unwrap _ nullable _ type ( ) , property . is _ key ( ) | | property . is _ foreign _ key ( ) , property . is _ concurrency _ token ) ; public virtual relational _ type _ mapping get _ type _ mapping ( i _ sequence sequence ) = > get _ type _ mapping ( sequence . name , sequence . type , is _ key : false , is _ concurrency _ token : false ) ; </%> <%> <*> public virtual relational _ type _ mapping get _ type _ mapping ( string specified _ type , string storage _ name , type property _ type , bool is _ key , bool is _ concurrency _ token ) -> mapping = get _ or _ add _ name _ mapping ( type _ name . to _ lower _ invariant ( ) ) ; </%> <%> <+> } return mapping ? ? ( simple _ mappings . try _ get _ value ( property . clr _ type . unwrap _ enum _ type ( ) . unwrap _ nullable _ type ( ) , out mapping ) ? mapping : map _ custom ( property ) ) ; } public virtual relational _ type _ mapping map _ sequence _ type ( i _ sequence sequence ) </%> <%> <-> check . not _ null ( storage _ name , nameof ( storage _ name ) ) ; check . not _ null ( property _ type , nameof ( property _ type ) ) ; </%> <%> <*> property _ type = property _ type . unwrap _ nullable _ type ( ) ; var mapping = simple _ mappings . first _ or _ default ( m = > m . item = = property _ type ) ; if ( mapping ! = null ) -> check . not _ null ( sequence , nameof ( sequence ) ) ; </%> <%> <+> relational _ type _ mapping mapping ; if ( simple _ mappings . try _ get _ value ( sequence . type . unwrap _ enum _ type ( ) , out mapping ) ) </%> ", "before_line": " return mapping . item ; ", "after_ctx": " <%> <*> if ( property _ type . get _ type _ info ( ) . is _ enum ) -> throw new not _ supported _ exception ( strings . unsupported _ type ( sequence . type . name ) ) ; </%> <%> <+> } protected virtual relational _ type _ mapping try _ map _ from _ name ( not _ null string type _ name , not _ null string type _ name _ prefix , int? first _ qualifier , int? second _ qualifier ) { </%>", "after_line": "return mapping ;", "predictions": ["private virtual relational _ type _ mapping get _ type _ mapping ( property _ time ) , tuple . input ( ) , return tuple , new relational _ type _ mapping ( STR , db _ type , NUM ) ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ skip"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ ( null"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ ,"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ issue"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ &"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ issue"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": "<%> <+> context , should _ retry _ on : e = > e is argument _ out _ of _ range _ exception , get _ next _ delay : e = > time _ span . from _ ticks ( 0 ) ) ; var execution _ count = 0 ; await assert . throws _ async < argument _ null _ exception > ( ( ) = > execute _ async ( execution _ strategy _ mock , ct = > </%> ", "before_line": " throw new db _ update _ exception ( STR , new argument _ out _ of _ range _ exception ( ) ) ; ", "after_ctx": " <%> <-> return task . from _ result ( execution _ count ) ; } ) ; assert . equal ( NUM , execution _ count ) ; } fact public task execute _ async _ action _ retries _ until _ not _ retrieable _ exception _ is _ thrown ( ) { return execute _ async _ retries _ until _ not _ retrieable _ exception _ is _ thrown ( ( e , f ) = > e . execute _ async ( ct = > ( task ) f ( ct ) , cancellation _ token . none ) ) ; </%>", "after_line": "throw new argument _ out _ of _ range _ exception ( ) ;", "predictions": ["throw new db _ update _ exception ( STR , ) ;"]}, {"before_ctx": "<%> <+> using ( var transaction = context . database . begin _ transaction ( ) ) </%> <%> <-> using ( var transaction = context . database . begin _ transaction ( ) ) { </%> <%> <+> { use _ transaction ( inner _ context . database , transaction ) ; store _ change ( inner _ context ) ; await inner _ context . save _ changes _ async ( ) ; var update _ exception = await assert . throws _ any _ async < db _ update _ exception > ( ( ) = > context . save _ changes _ async ( ) ) ; resolver ( context , update _ exception ) ; using ( var validation _ context = create _ context ( ) ) </%> <%> <*> use _ transaction ( inner _ context . database , transaction ) ; store _ change ( inner _ context ) ; await inner _ context . save _ changes _ async ( ) ; var update _ exception = await assert . throws _ any _ async < db _ update _ exception > ( ( ) = > context . save _ changes _ async ( ) ) ; resolver ( context , update _ exception ) ; using ( var validation _ context = create _ context ( ) ) -> use _ transaction ( validation _ context . database , transaction ) ; </%> <%> <+> if ( validator ! = null ) </%> ", "before_line": " use _ transaction ( validation _ context . database , transaction ) ; if ( validator ! = null ) { await context . save _ changes _ async ( ) ; validator ( validation _ context ) ; } ", "after_ctx": " <%> <+> } </%>", "after_line": "await context . save _ changes _ async ( ) ; validator ( validation _ context ) ;", "predictions": ["await context . save _ changes _ async ( ) ; validator ( validation _ context ) ;"]}, {"before_ctx": "<%> <+> { posts = new list < post > </%> ", "before_line": " posts = new list < post > ", "after_ctx": " <%> <+> comments = </%> <%> <*> post -> list < comment > </%> <%> <-> comments = new list < comment > { </%> <%> <-> } , new post ( ) </%>", "after_line": "new post", "predictions": ["posts = new list < post )"]}, {"before_ctx": "<%> <+> { configuration = new configuration </%> ", "before_line": " configuration = new configuration { processed = true } } , new cart { configuration = new configuration ( ) ", "after_ctx": " <%> <+> } , new cart { configuration = new configuration ( ) } </%>", "after_line": "processed = true", "predictions": ["configuration = new cart ( )"]}, {"before_ctx": "<%> <+> { using ( var context = create _ context ( ) ) </%> ", "before_line": " using ( var context = create _ context ( ) ) { var query = context . gears . include ( STR ) . to _ list ( ) ; } } ) . message ) ; ", "after_ctx": " ", "after_line": "var query = context . gears . include ( STR ) . to _ list ( ) ; } } ) . message ) ;", "predictions": ["var query = context . gears = -> </%> > <*> _ ; entity = _ context in i _ <%> . <@> _ </@> <*> ( test </%> ( _ int _ </@> _ _ _ list _ _ ; ) = async ;"]}, {"before_ctx": " ", "before_line": " & & ! entity _ type . is _ query _ type ( ) , ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "& & ! entity _ type . is _ query _ type ,", "predictions": ["& & ! entity _ <-> < is . </%> new"]}, {"before_ctx": "<%> <+> } </%> ", "before_line": " if ( entity _ type . is _ query _ type ( ) ) ", "after_ctx": " <%> <*> var annotation = entity _ type . find _ annotation ( core _ annotation _ names . defining _ query ) ; if ( annotation ! = null ) -> var query = entity _ type . defining _ query ; </%> <%> <+> if ( query ! = null & & entity _ query _ model _ visitor . should _ apply _ defining _ query ( entity _ type , query _ source ) ) </%> <%> <-> var query = ( lambda _ expression ) annotation . value ; </%>", "after_line": "if ( entity _ type . is _ query _ type )", "predictions": ["if ( is _ query _ type )"]}, {"before_ctx": "<%> <*> public abstract class built _ in _ data _ types _ test _ base -> public abstract class built _ in _ data _ types _ test _ base < t _ test _ store , t _ fixture > : i _ class _ fixture < t _ fixture > , i _ disposable </%> <%> <+> where t _ test _ store : test _ store where t _ fixture : built _ in _ data _ types _ fixture _ base < t _ test _ store > , new ( ) </%> <%> <-> protected built _ in _ data _ types _ fixture _ base fixture ; </%> ", "before_line": " using ( var context = fixture . create _ context ( ) ) ", "after_ctx": " ", "after_line": "using ( var context = create _ context ( ) )", "predictions": ["using ( var context = fixture . create _ context )"]}, {"before_ctx": " ", "before_line": " using ( var context = fixture . create _ context ( ) ) ", "after_ctx": " <%> <*> test _ insert _ and _ read _ back _ all _ nullable _ data _ types _ with _ values _ set _ to _ null ( context ) ; -> context . set < built _ in _ nullable _ data _ types > ( ) . add ( </%> <%> <+> new built _ in _ nullable _ data _ types { id = NUM , id = NUM , test _ string = null , test _ nullable _ int = null , test _ nullable _ int = null , </%>", "after_line": "using ( var context = create _ context ( ) )", "predictions": ["using ( var context = fixture . create _ context = = = )"]}, {"before_ctx": "<%> <+> _ unsigned </%> <%> <+> assert . null ( dt . test _ nullable _ unsigned _ int ) ; assert . null ( dt . test _ nullable _ unsigned _ int ) ; assert . null ( dt . test _ nullable _ character ) ; assert . null ( dt . test _ nullable _ signed _ byte ) ; } </%> ", "before_line": " using ( var context = fixture . create _ context ( ) ) ", "after_ctx": " <%> <*> public void test _ insert _ and _ read _ back _ all -> protected built </%> <%> <*> nullable -> in </%> <%> <-> _ with _ values _ set _ to </%> <%> <*> non -> test </%> <%> <*> null -> base </%> <%> <*> db -> t </%> <%> <*> context context -> fixture fixture </%>", "after_line": "using ( var context = create _ context ( ) )", "predictions": ["using ( var context = fixture . create _ context )"]}, {"before_ctx": "<%> <-> var hints = mapping _ info . value _ converter _ info ? . mapping _ hints ; </%> ", "before_line": " ? ? mapping . size ? ? hints ? . size ; ", "after_ctx": " ", "after_line": "? ? mapping . size ;", "predictions": ["? ? mapping . size ;"]}, {"before_ctx": "<%> <-> _ entity </%> <%> <-> this . get _ </%> <%> <-> ( ) </%> ", "before_line": " declaring _ entity _ type . property _ metadata _ changed ( ) ; ", "after_ctx": " <%> <+> protected abstract void property _ metadata _ changed ( ) ; </%>", "after_line": "property _ metadata _ changed ( ) ;", "predictions": ["property _ metadata _ changed ( ) < t _ </%> . ; ,"]}, {"before_ctx": "<%> <-> system . </%> ", "before_line": " var login = new login ( ) { customer = customer , customer _ id = customer . customer _ id , username = customer . name + customer . customer _ id , } ; ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ) . to _ string ( </%>", "after_line": "var login = new login { customer = customer , customer _ id = customer . customer _ id , username = customer . name + customer . customer _ id , } ;", "predictions": ["var login = new login { customer , _ date , _ : </%> _ _ _ + , ( -> : end , _ _ _ source names names <%> names <%> abstract abstract _ _ id ( _ _ id = id ( _ id = id ( _ compilation -> } ) ) ) )"]}, {"before_ctx": "<%> <-> ) . to _ string ( </%> <%> <-> system . </%> ", "before_line": " var photo = new product _ photo ( ) { photo _ id = ( photos _ per _ product * product . product _ id ) + k , photo = new byte [ ] { 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 } , } ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "var photo = new product _ photo { photo _ id = ( photos _ per _ product * product . product _ id ) + k , photo = new byte [ ] { 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 } , } ;", "predictions": ["var photo = new product _ photo <%> ) <%> . ; ) . . ; ) get ; . abstract _ <@> </@> > entry _ true _ 0 <@> 0 _ ? t ( null _ names { _ ( <%> _ ( <%> _ names { _ try _ <%> _ <%> _ <%> value _ <%> _ <%> _ ( ( <%> _ names _ names _ <%> value _ value ) _ ( <%> _ <%> value _ ( <%> value _ try _ names value _ value value _ ( ( ( & &"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " var line = new order _ line ( ) { order _ id = order . order _ id , product _ id = ( product _ per _ customer _ count * customer . customer _ id ) + m , concurrency _ token = i . to _ string ( ) , } ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "var line = new order _ line { order _ id = order . order _ id , product _ id = ( product _ per _ customer _ count * customer . customer _ id ) + m , concurrency _ token = i . to _ string ( ) , } ;", "predictions": ["var line = new order _ line } id _ = ) } id }"]}, {"before_ctx": " ", "before_line": " var order = new order ( ) { order _ id = ( ( 2 * orders _ per _ customer ) * customer . customer _ id ) + l + orders _ per _ customer , customer _ id = customer . customer _ id , concurrency _ token = i . to _ string ( ) , } ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "var order = new order { order _ id = ( ( 2 * orders _ per _ customer ) * customer . customer _ id ) + l + orders _ per _ customer , customer _ id = customer . customer _ id , concurrency _ token = i . to _ string ( ) , } ;", "predictions": ["var order = new order { order , . 0 0 key , l _ null = _ <-> ) source entity source [ <%> _ names t . ( . . = <%> <*> <%> -> expression null value value null value value value null expression expression null value expression expression null value null value ) null null null null null null null null null null null null expression null null expression null null null null null expression null null null null null null null expression expression null null null null null null expression null null expression null null"]}, {"before_ctx": " ", "before_line": " public override system . threading . tasks . task group _ by _ distinct ( ) ", "after_ctx": " <%> <*> return system . threading . tasks . -> return </%>", "after_line": "public override task group _ by _ distinct ( )", "predictions": ["public override task group _ by _ value info size"]}, {"before_ctx": " ", "before_line": " var product _ model = new product _ model ( ) { catalog _ description = STR + product _ iterator , instructions = STR , modified _ date = date _ time . now , name = STR , row _ guid = run _ guid } ; ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( ) </%>", "after_line": "var product _ model = new product _ model { catalog _ description = STR + product _ iterator , instructions = STR , modified _ date = date _ time . now , name = STR , row _ guid = run _ guid } ;", "predictions": ["var product _ model = new product _ < { { } <@> _ description = instructions _ ( > > > > > </@> _ time </%> <+> = store t _ create ) {"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " var product _ category = new product _ category ( ) { name = STR , row _ guid = run _ guid , modified _ date = date _ time . now } ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "var product _ category = new product _ category { name = STR , row _ guid = run _ guid , modified _ date = date _ time . now } ;", "predictions": ["var product _ category = new product _ changed { { utilities { ; int _ id <%> m _ query <%> await await command _ time with _ </@> , ;"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " var product _ sub _ category = new product _ sub _ category ( ) { name = STR , row _ guid = run _ guid , modified _ date = date _ time . now , category = product _ category } ; ", "after_ctx": " ", "after_line": "var product _ sub _ category = new product _ sub _ category { name = STR , row _ guid = run _ guid , modified _ date = date _ time . now , category = product _ category } ;", "predictions": ["var product _ sub _ category = to _ _ { row = row _ guid <%> new new _ </%> { <+> value value value = . builder virtual </%> <%> null null [ </%> null new t new </%> new t new </%> new t new > new t contains context contains <%> _ ) contains contains contains contains } } context <%> product _ </%> } context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context"]}, {"before_ctx": "<%> <*> int -> var </%> ", "before_line": " get { return this . value ; } set { this . value = value ; } ", "after_ctx": " <%> <-> get { return this . first _ level _ property ; } set { this . second _ level _ property = value ; </%>", "after_line": "get { return value ; } set { this . value = value ; }", "predictions": ["get { return value ; } set ( value = value . , , ,"]}, {"before_ctx": "<%> <*> get { return this . value ; } set { this . value = value ; } -> get { return value ; } </%> <%> <+> set { this . value = value ; } </%> ", "before_line": " get { return this . first _ level _ property ; } set { this . second _ level _ property = value ; } ", "after_ctx": " <%> <*> funcletization _ with _ properties -> var </%> <%> <*> int -> var </%>", "after_line": "get { return first _ level _ property ; } set { second _ level _ property = value ; }", "predictions": ["get { return first _ level _ end : null : new key virtual new new new new builder , context ( _ { second ) ;"]}, {"before_ctx": " ", "before_line": " var query = context . customers . where ( c = > c . customer _ id = = STR ) . first _ or _ default ( ) ; ", "after_ctx": " <%> <*> where -> single </%> <%> <-> ) . single ( </%>", "after_line": "var query = context . customers . first _ or _ default ( c = > c . customer _ id = = STR ) ;", "predictions": ["var query = context . customers . run , </%> _ public test _ core this ;"]}, {"before_ctx": "<%> <*> where -> single </%> <%> <-> ) . single ( </%> ", "before_line": " var query = context . customers . where ( c = > c . customer _ id = = STR ) . single _ or _ default ( ) ; ", "after_ctx": " ", "after_line": "var query = context . customers . single _ or _ default ( c = > c . customer _ id = = STR ) ;", "predictions": ["var query = context . customers . <%> ( single = > <%> _ public in ; <-> _ name . ( . <@> _ _ _ . </@> } { . . null null <+> virtual _ > _ > </%> virtual </@> _ > _ builder </%> <%> virtual store _ <@> > store _ protected > ,"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> ", "before_line": " public class in _ memory _ fixture : fixture _ base < in _ memory _ test _ store > ", "after_ctx": " <%> <+> i _ </%> <%> <-> in _ memory _ </%>", "after_line": "public class in _ memory _ fixture : fixture _ base", "predictions": ["public class in _ memory _ fixture </%> }"]}, {"before_ctx": " ", "before_line": " public abstract class property _ entry _ test _ base < t _ test _ store , t _ fixture > : i _ class _ fixture < t _ fixture > where t _ test _ store : test _ store where t _ fixture : fixture _ base < t _ test _ store > , new ( ) ", "after_ctx": " <%> <+> protected property _ entry _ test _ base ( t _ fixture fixture ) = > fixture = fixture ; protected t _ fixture fixture { get ; } </%>", "after_line": "public abstract class property _ entry _ test _ base < t _ fixture > : i _ class _ fixture < t _ fixture > where t _ fixture : fixture _ base , new ( )", "predictions": ["public abstract class property _ entry _ . _ bool async ) = i _ var _ ( <*> </%> _ <%> = type = )"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> ", "before_line": " public class sql _ server _ fixture : relational _ fixture < sql _ server _ test _ store > ", "after_ctx": " <%> <+> i _ </%> <%> <-> sql _ server _ </%> <%> <+> , db _ context context </%> <%> <+> , context </%>", "after_line": "public class sql _ server _ fixture : relational _ fixture", "predictions": ["public class sql _ server _ fixture <-> <-> _ fixture"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> ", "before_line": " public class sqlite _ fixture : relational _ fixture < sqlite _ test _ store > ", "after_ctx": " <%> <+> i _ </%> <%> <-> sqlite _ </%>", "after_line": "public class sqlite _ fixture : relational _ fixture", "predictions": ["public class sqlite _ fixture : relational . single"]}, {"before_ctx": " ", "before_line": " public abstract class relational _ fixture < t _ test _ store > : fixture _ base < t _ test _ store > where t _ test _ store : test _ store ", "after_ctx": " <%> <+> , db _ context context </%> <%> <+> , context </%>", "after_line": "public abstract class relational _ fixture : fixture _ base", "predictions": ["public abstract class relational _ fixture : </@> _ class"]}, {"before_ctx": "<%> <-> querying _ enumerable . </%> ", "before_line": " = querying _ enumerable . shaper _ command _ context . get _ relational _ command ( querying _ enumerable . relational _ query _ context . parameter _ values ) ; await querying _ enumerable . relational _ query _ context ", "after_ctx": " <%> <-> querying _ enumerable . </%> <%> <-> querying _ enumerable . </%> <%> <-> querying _ enumerable . </%> <%> <-> querying _ enumerable . </%>", "after_line": "= shaper _ command _ context . get _ relational _ command ( relational _ query _ context . parameter _ values ) ; await relational _ query _ context", "predictions": ["= querying _ command _ context . <+> <+> <+> value ; await _ properties _ ."]}, {"before_ctx": " ", "before_line": " lock ( querying _ enumerable . relational _ query _ context ) ", "after_ctx": " <%> <-> querying _ enumerable . </%> <%> <-> querying _ enumerable . </%>", "after_line": "lock ( relational _ query _ context )", "predictions": ["lock ( relational _ query _ context -> -> </@> size _ </@> ) _ </@> _ level guid"]}, {"before_ctx": " ", "before_line": " using ( var context = create _ context ( ) ) { context . database . use _ relational _ nulls ( use _ relational _ nulls ) ; ", "after_ctx": " <%> <*> int -> var </%>", "after_line": "using ( var context = create _ context ( use _ relational _ nulls ) ) {", "predictions": ["using ( var context = create _ context <%> </%> </%> ( </%> _ . test class ( = _ , use ( use , use ( = _ </%> enumerable enumerable enumerable property property end = </%> </%> </%> <-> <+> ] _ , </%> ) </%> ) </%>"]}, {"before_ctx": "<%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%> ", "before_line": " public virtual new one _ to _ many _ builder < t _ related _ entity > foreign _ key ( [ not _ null ] params string [ ] foreign _ key _ property _ names ) ", "after_ctx": " <%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%> <%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%>", "after_line": "public new virtual one _ to _ many _ builder < t _ related _ entity > foreign _ key ( [ not _ null ] params string [ ] foreign _ key _ property _ names )", "predictions": ["public virtual new one _ to _ <@> _ </%> protected t _ class entry , , , not false"]}, {"before_ctx": "<%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%> ", "before_line": " public virtual new many _ to _ one _ builder < t _ related _ entity > foreign _ key ( [ not _ null ] params string [ ] foreign _ key _ property _ names ) ", "after_ctx": " <%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%> <%> <+> , configuration _ source . explicit </%> <%> <-> virtual </%> <%> <+> virtual </%>", "after_line": "public new virtual many _ to _ one _ builder < t _ related _ entity > foreign _ key ( [ not _ null ] params string [ ] foreign _ key _ property _ names )", "predictions": ["public virtual new many _ to _ one _ builder < t _ related _ entity > foreign _ class create create create ( context string _ null _ property _ new value )"]}, {"before_ctx": "<%> <+> ( ) = > metadata . try _ get _ entity _ type ( type ) , ( ) = > entity _ type _ added ( new entity _ type ( type ) ) , entity _ type = > new internal _ entity _ builder ( entity _ type , model _ builder ) , configuration _ source ) ; } private bool can _ add ( string name , configuration _ source configuration _ source ) { configuration _ source ignored _ configuration _ source ; if ( ignored _ entity _ type _ names . has _ value & & ignored _ entity _ type _ names . value . try _ get _ value ( name , out ignored _ configuration _ source ) ) </%> <%> <*> entity -> ! configuration </%> <%> <*> builders -> source </%> <%> <*> try _ get _ value -> overrides </%> <%> <*> entity -> ignored </%> <%> <*> type , out entity -> configuration </%> <%> <*> builder -> source </%> <%> <*> entity _ builder -> false </%> <%> <+> ignored _ entity _ type _ names . value . remove ( name ) ; </%> <%> <*> entity _ builder = new internal _ entity _ builder ( entity _ type , model _ builder ) ; entity _ builders . add ( entity _ type , entity _ builder ) ; return entity _ builder ; -> return true ; </%> ", "before_line": " private void entity _ type _ added ( entity _ type entity _ type ) ", "after_ctx": " <%> <+> metadata . add _ entity _ type ( entity _ type ) ; </%> <%> <+> return entity _ type ; } public virtual bool ignore _ entity ( [ not _ null ] string name , configuration _ source configuration _ source ) { </%>", "after_line": "private entity _ type entity _ type _ added ( entity _ type entity _ type )", "predictions": ["private entity _ type entity _ type _ added ( entity _ type entity _ type )"]}, {"before_ctx": "<%> <*> { var compiled = convert _ expression . compile ( ) ; return typeof ( t _ in ) . is _ nullable _ type ( ) ? ( func < object , object > ) ( v = > compiled ( sanitize _ nullable < t _ in > ( v ) ) ) : ( v = > v = = null ? ( object ) null : compiled ( sanitize _ non _ nullable < t _ in > ( v ) ) ) ; } private static t sanitize _ nullable < t > ( object value ) -> = > v = > v = = null </%> <%> <+> ? ( object ) null : convert _ expression . compile ( ) ( sanitize < t _ in > ( v ) ) ; private static t sanitize < t > ( object value ) </%> ", "before_line": " return value = = null ? ( t ) value : ( t ) ( unwrapped _ type ! = value . get _ type ( ) ", "after_ctx": " <%> <-> private static t sanitize _ non _ nullable < t > ( object value ) = > ( t ) ( typeof ( t ) ! = value . get _ type ( ) ? convert . change _ type ( value , typeof ( t ) ) : value ) ; </%>", "after_line": "return ( t ) ( unwrapped _ type ! = value . get _ type ( )", "predictions": ["return ( t ) value : ( t ) value : ( t ) value ;"]}, {"before_ctx": " ", "before_line": " var removed _ foreign _ key = metadata . remove _ foreign _ key ( foreign _ key . properties , foreign _ key . principal _ key , foreign _ key . principal _ entity _ type ) ; ", "after_ctx": " <%> <*> . where ( p = > p . declaring _ entity _ type . find _ declared _ property ( p . name ) ! = null ) ) ; -> ) ; </%>", "after_line": "var removed _ foreign _ key = metadata . remove _ foreign _ key ( foreign _ key ) ;", "predictions": ["var removed _ foreign _ key = metadata _ enumerable . properties value value this this ;"]}, {"before_ctx": "<%> <+> _ foreign _ key </%> ", "before_line": " return builder . replace _ foreign _ key ( ", "after_ctx": " <%> <*> principal _ end _ configuration _ source : properties = = null ? null : configuration _ source ) ; -> principal _ end _ configuration _ source : properties = = null ? null : configuration _ source , </%> <%> <+> remove _ current : ! property . are _ compatible ( properties , metadata . declaring _ entity _ type ) ) ; </%>", "after_line": "return replace _ foreign _ key (", "predictions": ["return builder . replace _ foreign _ </@> ["]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <+> inline _ data _ false _ true inline _ data _ true _ true public virtual async task include _ is _ not _ ignored _ when _ projection _ contains _ client _ method _ and _ complex _ expression ( bool use _ string , bool async ) { using ( var context = create _ context ( ) ) { var query = from e in ( use _ string ? context . employees . include ( nameof ( employee . manager ) ) </%>", "after_line": "conditional _ theory", "predictions": ["conditional"]}, {"before_ctx": "<%> <+> entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor </%> <%> <+> entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor </%> <%> <+> entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor </%> <%> <+> entity _ query _ model _ visitor . </%> ", "before_line": " var query _ model _ visitor = query _ compilation _ context . create _ query _ model _ visitor ( ) ; ", "after_ctx": " <%> <+> protected entity _ query _ model _ visitor create _ query _ model _ visitor ( ) { return query _ compilation _ context . create _ query _ model _ visitor ( entity _ query _ model _ visitor ) ; } </%>", "after_line": "var query _ model _ visitor = create _ query _ model _ visitor ( ) ;", "predictions": ["var query _ model _ visitor = create _ query _ model _ visitor ( ) ;"]}, {"before_ctx": "<%> <+> entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor </%> <%> <+> entity _ </%> <%> <*> compilation -> model </%> <%> <*> context -> visitor </%> ", "before_line": " var query _ model _ visitor = query _ compilation _ context . create _ query _ model _ visitor ( ) ; ", "after_ctx": " ", "after_line": "var query _ model _ visitor = create _ query _ model _ visitor ( ) ;", "predictions": ["var query _ model _ visitor = create _ query _ model _ visitor ( <+> <+> private private _ = _ data database </%> ) entity _ ;"]}, {"before_ctx": "<%> <-> private readonly lazy _ ref < i _ model > model ; </%> <%> <*> protected model _ snapshot ( ) -> private i _ model model ; </%> <%> <+> private i _ mutable _ model create _ model ( ) </%> ", "before_line": " model = new lazy _ ref < i _ model > ( ( ) = > { var model _ builder = new model _ builder ( new convention _ set ( ) ) ; build _ model ( model _ builder ) ; return model _ builder . model ; } ) ; ", "after_ctx": " <%> <*> . value ; -> ? ? = create _ model ( ) ; </%>", "after_line": "var model _ builder = new model _ builder ( new convention _ set ( ) ) ; build _ model ( model _ builder ) ; return model _ builder . model ;", "predictions": ["model = new lazy _ ref < i _ model > ( ( ) = > var model _ builder var : : . key _ source ( : key _ set ) , build _ source . ) ,"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ internal ; </%> ", "before_line": " private readonly lazy _ ref < i _ model > target _ model ; private readonly lazy _ ref < list < migration _ operation > > up _ operations ; private readonly lazy _ ref < list < migration _ operation > > down _ operations ; ", "after_ctx": " <%> <-> protected migration ( ) </%> <%> <+> public virtual i _ model target _ model </%> <%> <*> target _ model = new lazy _ ref < i _ model > ( ( ) = > -> get </%> <%> <+> { i _ model create ( ) </%>", "after_line": "private i _ model target _ model ; private list < migration _ operation > up _ operations ; private list < migration _ operation > down _ operations ;", "predictions": ["private readonly lazy _ ref < i _ model > target _ model ;"]}, {"before_ctx": " ", "before_line": " private readonly lazy _ ref < i _ model > model ; private readonly lazy _ ref < string > migration _ id _ column _ name ; private readonly lazy _ ref < string > product _ version _ column _ name ; ", "after_ctx": " <%> <-> model = new lazy _ ref < i _ model > ( ( ) = > { </%>", "after_line": "private i _ model model ; private string migration _ id _ column _ name ; private string product _ version _ column _ name ;", "predictions": ["private readonly lazy _ ref < i _ model > model ;"]}, {"before_ctx": " ", "before_line": " connection = new lazy _ ref < db _ connection > ( ( ) = > relational _ options . connection ) ; ", "after_ctx": " <%> <-> connection = new lazy _ ref < db _ connection > ( create _ db _ connection ) ; </%>", "after_line": "connection = relational _ options . connection ;", "predictions": ["connection = new lazy _ ref < db _ connection > ( relational _ options . server = table = ref var -> -> ( var ) ) lazy < model _ using . model _ model <%> ) = > context _ connection <%> ( = = ;"]}, {"before_ctx": "<%> <-> debug . assert ( foreign _ key . is _ required = = is _ required ) ; debug . assert ( ( ( i _ foreign _ key ) foreign _ key ) . is _ required = = is _ required ) ; </%> <%> <*> . navigation ( navigation _ to _ principal _ name , builder . metadata , points _ to _ principal : true , configuration _ source : configuration _ source ) ? ? relationship _ builders . value . try _ get _ value ( builder . metadata , configuration _ source ) ; -> . navigation ( navigation _ to _ principal _ name , builder . metadata , points _ to _ principal : true , configuration _ source : configuration _ source ) ; </%> ", "before_line": " . navigation ( navigation _ to _ dependent _ name , builder . metadata , points _ to _ principal : builder . metadata . declaring _ entity _ type ! = metadata , configuration _ source : configuration _ source ) ? ? relationship _ builders . value . try _ get _ value ( builder . metadata , configuration _ source ) ; ", "after_ctx": " <%> <-> debug . assert ( builder ! = null ) ; if ( on _ relationship _ adding ! = null ) { builder = on _ relationship _ adding ( builder ) ; } else </%>", "after_line": ". navigation ( navigation _ to _ dependent _ name , builder . metadata , points _ to _ principal : builder . metadata . declaring _ entity _ type ! = metadata , configuration _ source : configuration _ source ) ;", "predictions": [". navigation ( navigation _ to _ dependent _ name , builder . metadata , points _ to _ principal : ( ( t _ ) < t _ ) < check _ ) < to _ ) < check _ ) < to _ expression < to _ ) < check _ ) < t > < check _ get < ( > to _ get < t _ get < ( builder builder < t _ ) < t _ ) < ( to _ ) < t _ ) < ( to _ ) < t _"]}, {"before_ctx": " ", "before_line": " is _ required ? ? false ? typeof ( int ) : typeof ( int? ) , ", "after_ctx": " <%> <+> : true </%>", "after_line": "typeof ( int ) ,", "predictions": ["int _ required ? ? : typeof ( int ) ,"]}, {"before_ctx": "<%> <+> _ user _ profile </%> <%> <+> server _ path = get _ ci _ machine _ server _ path ( ) ; if ( ! file . exists ( server _ path ) ) { </%> <%> <+> } </%> ", "before_line": " else { return run _ server ( server _ path ) ; } ", "after_ctx": " ", "after_line": "return run _ server ( server _ path ) ;", "predictions": ["return run _ server ( server _ path ) ;"]}, {"before_ctx": " ", "before_line": " private readonly lazy _ ref < i _ model > model ; private readonly lazy _ ref < state _ manager > state _ manager ; private readonly lazy _ ref < context _ entity _ sets > sets ; ", "after_ctx": " <%> <+> configuration = entity _ configuration _ cache . instance . get _ or _ add _ configuration ( this ) ; initialize ( ) ; </%> <%> <+> initialize ( ) ; </%>", "after_line": "private lazy _ ref < i _ model > model ; private lazy _ ref < state _ manager > state _ manager ; private context _ entity _ sets sets ;", "predictions": ["private readonly lazy _ ref < i _ model > model ;"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ query ; </%> <%> <-> using microsoft _ data _ entity ; using system _ collections _ generic ; using system _ threading ; </%> ", "before_line": " var model = create _ northwind _ model ( ) ; using ( var test _ database = await test _ database . northwind ( ) ) ", "after_ctx": " <%> <*> var config = new entity _ configuration { data _ store = new sql _ server _ data _ store ( test _ database . connection . connection _ string ) , model = create _ northwind _ model ( ) } ; using ( var db = new northwind _ context ( config ) ) -> using ( var db = new northwind _ context ( ) ) </%>", "after_line": "using ( await test _ database . northwind ( ) )", "predictions": ["using ( var test _ database = await test _ database . northwind ( ) )"]}, {"before_ctx": " ", "before_line": " var model = create _ northwind _ model ( ) ; using ( var test _ database = await test _ database . northwind ( ) ) ", "after_ctx": " <%> <*> var config = new entity _ configuration { data _ store = new sql _ server _ data _ store ( test _ database . connection . connection _ string ) , model = create _ northwind _ model ( ) } ; using ( var db = new northwind _ context ( config ) ) -> using ( var db = new northwind _ context ( ) ) </%>", "after_line": "using ( await test _ database . northwind ( ) )", "predictions": ["using ( var test _ database = await test _ database . northwind )"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sqlite _ query _ expression _ translators ", "after_ctx": " <%> <+> sqlite _ </%> <%> <+> sqlite _ </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity _ query _ expression _ translators"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sql _ server _ query _ methods ", "after_ctx": " <%> <+> sqlite _ </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity _ query _ expression _ translators"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sqlite _ query _ expression _ translators ", "after_ctx": " <%> <+> sqlite _ </%> <%> <+> sqlite _ </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity _ query _ expression _ translators"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; namespace microsoft _ data _ entity _ sqlite _ query _ expression _ translators ", "after_ctx": " <%> <+> sqlite _ </%> <%> <+> sqlite _ </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity _ query _ expression _ translators"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ entity _ query _ expression _ translators ; using microsoft _ data _ entity _ sql _ server _ query _ methods ; namespace microsoft _ data _ entity _ sqlite _ query _ expression _ translators ", "after_ctx": " <%> <+> sqlite _ </%>", "after_line": "namespace microsoft _ data _ entity _ query _ expression _ translators", "predictions": ["namespace microsoft _ data _ entity _ query _ expression _ translators"]}, {"before_ctx": " ", "before_line": " else { return new i _ xunit _ test _ case [ ] { new skipped _ test _ case ( diagnostic _ message _ sink , discovery _ options . method _ display _ or _ default ( ) , test _ method ) } ; } ", "after_ctx": " <%> <-> xunit . sdk . </%>", "after_line": "return new i _ xunit _ test _ case [ ] { new skipped _ test _ case ( diagnostic _ message _ sink , discovery _ options . method _ display _ or _ default ( ) , test _ method ) } ;", "predictions": ["return new i _ xunit _ test _ case [ ] { ; skipped _ test _ case -> diagnostic _ await _ sql var var = <%> _ new <%> ) ; ;"]}, {"before_ctx": " ", "before_line": " start _ with = target . start _ value , ", "after_ctx": " <%> <*> cycle -> is _ cyclic </%>", "after_line": "start _ value = target . start _ value ,", "predictions": ["start _ with = target ,"]}, {"before_ctx": "<%> <*> with -> value </%> ", "before_line": " cycle = target . is _ cyclic ", "after_ctx": " ", "after_line": "is _ cyclic = target . is _ cyclic", "predictions": ["cycle = target . is _ cyclic"]}, {"before_ctx": "<%> <+> using microsoft _ data _ entity _ migrations _ operations _ builders ; </%> <%> <-> _ builders </%> ", "before_line": " public virtual i _ list < migration _ operation > operations { get ; } = new list < migration _ operation > ( ) ; ", "after_ctx": " <%> <+> is _ </%>", "after_line": "public virtual list < migration _ operation > operations { get ; } = new list < migration _ operation > ( ) ;", "predictions": ["public virtual i _ list < migration _ operation > operations { default . } _ ( name name name <%> ) ;"]}, {"before_ctx": " ", "before_line": " public one _ to _ one _ builder < t _ related _ entity > one _ to _ one < t _ related _ entity > ( ", "after_ctx": " <%> <-> < t _ related _ entity > </%>", "after_line": "public one _ to _ one _ builder one _ to _ one < t _ related _ entity > (", "predictions": ["public one _ to _ one _ builder < t _ related _ <%> ) . method _ . ("]}, {"before_ctx": "<%> <+> public many _ to _ one _ builder < t _ related _ entity > referenced _ key ( not _ null expression < func < t _ related _ entity , object > > key _ expression ) { check . not _ null ( key _ expression , STR ) ; return new many _ to _ one _ builder < t _ related _ entity > ( builder . referenced _ key ( key _ expression . get _ property _ access _ list ( ) ) ) ; </%> <%> <-> public class one _ to _ one _ builder < t _ related _ entity > : metadata _ builder < foreign _ key , one _ to _ one _ builder < t _ related _ entity > > </%> <%> <+> } public class one _ to _ one _ builder : metadata _ builder < foreign _ key , one _ to _ one _ builder > </%> ", "before_line": " public one _ to _ one _ builder < t _ dependent _ entity > foreign _ key < t _ dependent _ entity > ( ", "after_ctx": " <%> <+> var inverting = model _ builder . entity < t _ dependent _ entity > ( ) . metadata ! = builder . dependent _ type ; if ( inverting ) { builder . invert ( ) ; } </%> <%> <-> return new one _ to _ one _ builder < t _ dependent _ entity > ( </%>", "after_line": "public one _ to _ one _ builder foreign _ key < t _ dependent _ entity > (", "predictions": ["public one _ to _ one _ builder < t _ dependent _ entity > foreign _ key ("]}, {"before_ctx": "<%> <+> ( </%> <%> <*> _ -> , </%> <%> <+> ) </%> ", "before_line": " t = > ! string . is _ null _ or _ empty ( schema _ table . schema ) & & t . schema = = schema _ table . schema | | t . name = = schema _ table . table ) ) ", "after_ctx": " ", "after_line": "t = > ! string . is _ null _ or _ empty ( schema ) & & t . schema = = schema | | t . name = = table ) )", "predictions": ["t = > ! string . is _ null _ or _ empty ( schema _ model ( ) database lazy i model ) )"]}, {"before_ctx": "<%> <*> item -> ( level , id , message ) </%> ", "before_line": " item . message ) ; ", "after_ctx": " ", "after_line": "message ) ;", "predictions": ["item . message ;"]}, {"before_ctx": "<%> <*> item -> ( level , id , message ) </%> ", "before_line": " item . message ) ; ", "after_ctx": " ", "after_line": "message ) ;", "predictions": ["item . message ;"]}, {"before_ctx": "<%> <*> tuple -> ( state , force ) </%> ", "before_line": " ? tuple . state ", "after_ctx": " <%> <-> tuple . </%>", "after_line": "? state", "predictions": ["? state . state"]}, {"before_ctx": "<%> <*> tuple -> ( state , force ) </%> <%> <-> tuple . </%> ", "before_line": " force _ state _ when _ unknown _ key : tuple . force ) ; ", "after_ctx": " <%> <*> tuple -> ( state , force ) </%>", "after_line": "force _ state _ when _ unknown _ key : force ) ;", "predictions": ["force _ state _ when _ unknown _ key : force ;"]}, {"before_ctx": "<%> <*> tuple -> ( state , force ) </%> ", "before_line": " ? tuple . state ", "after_ctx": " <%> <-> tuple . </%>", "after_line": "? state", "predictions": ["? state . state"]}, {"before_ctx": "<%> <*> tuple -> ( state , force ) </%> <%> <-> tuple . </%> ", "before_line": " force _ state _ when _ unknown _ key : tuple . force , ", "after_ctx": " ", "after_line": "force _ state _ when _ unknown _ key : force ,", "predictions": ["force _ state _ when _ unknown _ key : force ,"]}, {"before_ctx": "<%> <+> ( </%> <%> <*> _ -> , </%> <%> <+> ) </%> ", "before_line": " t = > ! string . is _ null _ or _ empty ( schema _ table . schema ) & & t . schema = = schema _ table . schema | | t . name = = schema _ table . table ) ) ", "after_ctx": " ", "after_line": "t = > ! string . is _ null _ or _ empty ( schema ) & & t . schema = = schema | | t . name = = table ) )", "predictions": ["t = > ! string . is _ null _ or _ empty ( schema _ ref ; readonly private ( model <%> < model _ </%> > | | private builder model ) ;"]}, {"before_ctx": "<%> <+> } ) . to _ list _ async ( ) ; assert . equal ( 1 , results . count ) ; } } conditional _ fact </%> ", "before_line": " using ( var context = fixture . create _ context ( ) ) ", "after_ctx": " ", "after_line": "using ( var context = create _ context ( ) )", "predictions": ["using ( var context = fixture . create _ ) )"]}, {"before_ctx": "<%> <-> entity . metadata . </%> ", "before_line": " var model = ( entity . metadata . model ) model ; ", "after_ctx": " <%> <-> entity . metadata . </%>", "after_line": "var model = ( model ) model ;", "predictions": ["var model = ( model ) model ;"]}, {"before_ctx": "<%> <-> get _ </%> <%> <*> _ state _ data -> . get </%> <%> <-> navigation </%> ", "before_line": " | | state _ data . is _ property _ flagged ( get _ navigation _ state _ data _ index ( navigation ) , property _ flag . is _ loaded ) ; private int get _ navigation _ state _ data _ index ( i _ navigation navigation ) = > navigation . get _ index ( ) - entity _ type . property _ count ( ) ; ", "after_ctx": " ", "after_line": "| | state _ data . is _ property _ flagged ( navigation . get _ index ( ) , property _ flag . is _ loaded ) ;", "predictions": ["| | state _ data . is _ property _ values entity . < _ <*> _ values entity builder builder builder builder ) <*> -> _ string <%> <*> <*> </%> <*> source <+> </@> _ virtual configuration ;"]}, {"before_ctx": "<%> <*> relational ( configuration -> has _ no </%> <%> <*> source . convention ) . has -> declared </%> <%> <-> property _ info : null </%> <%> <*> private static void set _ default _ discriminator _ values ( i _ read _ only _ list < entity _ type > entity _ types , discriminator _ builder discriminator ) -> private static void set _ default _ discriminator _ values ( </%> <%> <+> i _ read _ only _ list < entity _ type > entity _ types , i _ convention _ discriminator _ builder discriminator ) </%> ", "before_line": " discriminator . has _ value ( entity _ type . name , entity _ type . short _ name ( ) ) ; ", "after_ctx": " ", "after_line": "discriminator . has _ value ( entity _ type , entity _ type . short _ name ( ) ) ;", "predictions": ["discriminator . has _ value ( entity _ type </%> entity _ data </%> <%> _ data </%> <%> <%> _ data </%> <%> , entity , entity ) <@>"]}, {"before_ctx": "<%> <-> public static bool overrides ( this configuration _ source new _ configuration _ source , configuration _ source ? old _ configuration _ source ) { if ( old _ configuration _ source = = null ) { return true ; } if ( new _ configuration _ source = = configuration _ source . explicit ) { return true ; } if ( old _ configuration _ source = = configuration _ source . explicit ) { return false ; } if ( new _ configuration _ source = = configuration _ source . data _ annotation ) { return true ; } return old _ configuration _ source ! = configuration _ source . data _ annotation ; } public static bool overrides ( this configuration _ source ? new _ configuration _ source , configuration _ source ? old _ configuration _ source ) = > new _ configuration _ source ? . overrides ( old _ configuration _ source ) ? ? old _ configuration _ source = = null ; public static bool overrides _ strictly ( this configuration _ source new _ configuration _ source , configuration _ source ? old _ configuration _ source ) = > new _ configuration _ source . overrides ( old _ configuration _ source ) & & new _ configuration _ source ! = old _ configuration _ source ; public static bool overrides _ strictly ( this configuration _ source ? new _ configuration _ source , configuration _ source ? old _ configuration _ source ) = > new _ configuration _ source . has _ value & & new _ configuration _ source . value . overrides _ strictly ( old _ configuration _ source ) ; </%> <%> <*> = > ! right . has _ value | | ( left . has _ value & & left . value . overrides ( right . value ) ) -> = > left . overrides ( right ) </%> ", "before_line": " : right . value ; ", "after_ctx": " <%> <*> = > max ( ( configuration _ source ? ) left , right ) . value ; -> = > left . overrides ( right ) </%> <%> <+> ? left : right . value ; </%>", "after_line": ": right ;", "predictions": [": right ;"]}, {"before_ctx": "<%> <-> ) . relational ( </%> <%> <-> . sql _ server ( ) </%> <%> <-> ) . sql _ server ( </%> ", "before_line": " assert . not _ null ( model . relational ( ) . find _ sequence ( STR ) ) ; var sequence = model . sql _ server ( ) . find _ sequence ( STR ) ; ", "after_ctx": " ", "after_line": "assert . not _ null ( model . find _ sequence ( STR ) ) ; var sequence = model . find _ sequence ( STR ) ;", "predictions": ["assert . not _ null ( model . relational _ <%> . false . false , </@> . <-> property , </@> , </@> _ <%> , false ) index index ) index ) source"]}, {"before_ctx": "<%> <+> : i _ convention _ discriminator _ builder </%> <%> <*> public discriminator _ builder ( not _ null relational _ annotations _ builder annotations _ builder , not _ null func < internal _ entity _ type _ builder , relational _ entity _ type _ builder _ annotations > get _ relational _ entity _ type _ builder _ annotations ) -> public discriminator _ builder ( [ not _ null ] i _ mutable _ entity _ type entity _ type ) </%> <%> <*> annotations _ builder = annotations _ builder ; get _ relational _ entity _ type _ builder _ annotations = get _ relational _ entity _ type _ builder _ annotations ; -> entity _ type _ builder = ( ( entity _ type ) entity _ type ) . builder ; </%> <%> <-> private func < internal _ entity _ type _ builder , relational _ entity _ type _ builder _ annotations > get _ relational _ entity _ type _ builder _ annotations { get ; } </%> ", "before_line": " protected virtual relational _ annotations _ builder annotations _ builder { get ; }       entity _ framework _ internal protected virtual internal _ entity _ type _ builder entity _ type _ builder = > ( internal _ entity _ type _ builder ) annotations _ builder . get _ infrastructure ( ) ; ", "after_ctx": " <%> <+> , configuration _ source . explicit </%> <%> <-> annotations _ builder . </%> <%> <+> . explicit </%> <%> <+> , configuration _ source . explicit </%>", "after_line": "protected virtual internal _ entity _ type _ builder entity _ type _ builder { get ; }", "predictions": ["protected virtual relational _ annotations _ builder annotations _ configuration : ; ; <*> _ <-> _ . has _ <-> _ right has _ . _ configuration left , right _ source . = = right _ . _ configuration new = _ configuration _ configuration _ configuration new ;"]}, {"before_ctx": " ", "before_line": " entity _ type _ builder . relational ( configuration _ source . convention ) . to _ table ( null ) ; ", "after_ctx": " <%> <-> . relational ( configuration _ source . convention ) </%>", "after_line": "entity _ type _ builder . to _ table ( null ) ;", "predictions": ["entity _ type _ builder . relational ( configuration _ </%> , configuration _ </%> , configuration ( configuration _ </%> ( configuration _ </%> ( configuration _ </%> , configuration _ </%> , configuration STR . find ( <@> , <@> ) _ builder property property , entity property ) property , , builder _ ( ) ) _ default _ type type ( builder _ ( ) ( builder ( . . ( ( ( . ( ( ( . ( ( ( . ( ( . ( ( . . ( ( . ( ( . ."]}, {"before_ctx": "<%> <-> configuration _ source ? configuration _ source ) = > property ( property _ name , property _ type , configuration _ source , type _ configuration _ source : configuration _ source ) ; public virtual internal _ property _ builder property ( </%> <%> <-> not _ null type property _ type , </%> <%> <*> property _ name , property _ type , member _ info : null , configuration _ source , type _ configuration _ source ) ; -> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , </%> <%> <+> type _ configuration _ source : type _ configuration _ source ) ; </%> ", "before_line": " = > property ( property _ name , property _ type : null , member _ info : null , configuration _ source , type _ configuration _ source : null ) ; ", "after_ctx": " <%> <-> _ simple </%> <%> <*> name -> type </%> <%> <+> _ simple </%> <%> <*> type -> name </%> <%> <+> can _ be _ null type property _ type , </%> <%> <-> can _ be _ null type property _ type , </%>", "after_line": "= > property ( property _ type : null , property _ name : property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : null ) ;", "predictions": ["= > property ( property _ name , property _ type member _ > member _ > member _ > member _ source , type _ configuration _ source member </%> </%> </%> </%> </%> ) info"]}, {"before_ctx": "<%> <-> not _ null type property _ type , </%> <%> <*> property _ name , property _ type , member _ info : null , configuration _ source , type _ configuration _ source ) ; -> property _ type , property _ name , member _ info : null , configuration _ source : configuration _ source , </%> <%> <+> type _ configuration _ source : type _ configuration _ source ) ; </%> <%> <*> = > property ( property _ name , property _ type : null , member _ info : null , configuration _ source , type _ configuration _ source : null ) ; -> = > property ( </%> <%> <+> property _ type : null , property _ name : property _ name , member _ info : null , configuration _ source : configuration _ source , type _ configuration _ source : null ) ; </%> ", "before_line": " = > property ( member _ info . get _ simple _ member _ name ( ) , member _ info . get _ member _ type ( ) , member _ info , configuration _ source , configuration _ source ) ; ", "after_ctx": " <%> <+> can _ be _ null type property _ type , </%> <%> <-> can _ be _ null type property _ type , </%>", "after_line": "= > property ( member _ info . get _ member _ type ( ) , member _ info . get _ simple _ member _ name ( ) , member _ info , configuration _ source , configuration _ source ) ;", "predictions": ["= > property ( member _ info . get _ protected _ get _ , internal ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ? ? ? ? ? ? ? null _ > ? ? null _ > right ? ? . . ? right _ ( ? ? ? ? ? = ? = ? = = ? configuration _ ( ? = ? ? = null _"]}, {"before_ctx": "<%> <+> bool i _ convention _ entity _ type _ builder . can _ set _ base _ type ( i _ convention _ entity _ type base _ entity _ type , bool from _ data _ annotation ) = > can _ set _ base _ type ( ( entity _ type ) base _ entity _ type , from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention ) ; </%> ", "before_line": " string property _ name , type property _ type , bool set _ type _ configuration _ source , bool from _ data _ annotation ) ", "after_ctx": " <%> <-> property _ name , </%> <%> <*> from _ data _ annotation ? configuration _ source . data _ annotation : configuration -> property </%> <%> <*> source . convention -> name </%> <%> <+> from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention , </%>", "after_line": "type property _ type , string property _ name , bool set _ type _ configuration _ source , bool from _ data _ annotation )", "predictions": ["bool set _ type _ configuration _ source , -> > _ = _ type <-> _ = <-> , -> >"]}, {"before_ctx": "<%> <+> bool i _ convention _ entity _ type _ builder . can _ set _ base _ type ( i _ convention _ entity _ type base _ entity _ type , bool from _ data _ annotation ) = > can _ set _ base _ type ( ( entity _ type ) base _ entity _ type , from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention ) ; </%> <%> <*> string -> type </%> <%> <*> name -> type </%> <%> <*> type -> string </%> <%> <*> type -> name </%> ", "before_line": " property _ name , property _ type , from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention , set _ type _ configuration _ source ", "after_ctx": " ", "after_line": "property _ type , property _ name , from _ data _ annotation ? configuration _ source . data _ annotation : configuration _ source . convention , set _ type _ configuration _ source", "predictions": ["property _ name , property _ type , from _ <%> _ configuration set _ source , , , , , , , , type to _ , _ </%> _ name"]}, {"before_ctx": " ", "before_line": " var id _ property = entity _ type _ builder . property ( id _ property _ name , typeof ( string ) , configuration _ source . convention ) ; ", "after_ctx": " <%> <+> typeof ( j _ object ) , </%> <%> <-> , typeof ( j _ object ) </%>", "after_line": "var id _ property = entity _ type _ builder . property ( typeof ( string ) , id _ property _ name , configuration _ source . convention ) ;", "predictions": ["var id _ property = entity _ type _ builder property _ j = configuration _ source property , object ( type _ j ( string . string . <-> . string . ( count ( count ( set _ <*> , . type ) ) ) ) ) ) type _ <*> configuration _ configuration <+> source _ can _ be _ be _ be type type _ can _ be _ be _ be type type type _ can <%> source _ configuration _ be type type type _ can _ be property , string , source _"]}, {"before_ctx": "<%> <+> typeof ( string ) , </%> <%> <-> , typeof ( string ) </%> ", "before_line": " var j _ object _ property = entity _ type _ builder . property ( j _ object _ property _ name , typeof ( j _ object ) , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "var j _ object _ property = entity _ type _ builder . property ( typeof ( j _ object ) , j _ object _ property _ name , configuration _ source . convention ) ;", "predictions": ["var j _ object _ property = entity _ type server server server server ) find ( <%> ( <%> ( <%> . <-> . ( . ( ( ( ( ( ) ( <*> _ . entity , configuration _ -> type property , </%> , configuration type type type type type type type type type type type type type type member _ source _ : = <*> _ can _ > member _ <-> _ > member _ <-> _ : , null type null type type type type type type type type type type type type type"]}, {"before_ctx": "<%> <+> get _ </%> <%> <*> ( ) . -> _ </%> <%> <+> ( ) </%> ", "before_line": " . where ( i = > index . declaring _ entity _ type . find _ property ( i ) = = null ) . first _ or _ default ( ) ; ", "after_ctx": " ", "after_line": ". first _ or _ default ( i = > index . declaring _ entity _ type . find _ property ( i ) = = null ) ;", "predictions": [". first _ or _ default ( i = <-> entity , entity , entity ) j . configuration j source j . configuration </%> ) </%>"]}, {"before_ctx": "<%> <-> , id _ property . test _ provider ( ) </%> <%> <-> , name _ property . test _ provider ( ) </%> <%> <-> , quacks _ property . test _ provider ( ) </%> <%> <-> , computed _ property . test _ provider ( ) </%> ", "before_line": " entry , concurrency _ property , concurrency _ property . test _ provider ( ) , generator . generate _ next , false , true , false , false , ", "after_ctx": " ", "after_line": "entry , concurrency _ property , generator . generate _ next , false , true , false , false ,", "predictions": ["entry , concurrency _ property , concurrency _ property ( get _ _ , _ > _ data _ data _ data _ property _ <*> _ read _ <*> _ read _ -> ) _ entity _ configuration _ entity _ : _ </%> _ : _ : _ : ) _"]}, {"before_ctx": "<%> <-> , id _ property . test _ provider ( ) </%> <%> <-> , name _ property . test _ provider ( ) </%> <%> <-> , quacks _ property . test _ provider ( ) </%> <%> <-> , computed _ property . test _ provider ( ) </%> ", "before_line": " entry , concurrency _ property , concurrency _ property . test _ provider ( ) , generator . generate _ next , false , true , false , ", "after_ctx": " ", "after_line": "entry , concurrency _ property , generator . generate _ next , false , true , false ,", "predictions": ["entry , concurrency _ property , concurrency _ property . test , generator . generate , false _ property . test , true _ ; ,"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ 1 ;"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( STR , typeof ( guid ) , configuration STR builder STR ) ;"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( STR , typeof ( int ) , configuration _ source . explicit ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( STR , typeof ( guid ) , async _ fact ;"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( STR , typeof ( int ) , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( STR , typeof ( int ) , configuration _ source . count } . explicit _ source _ ) </%> . explicit _ </@> property , . property ) -> ;"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( STR , typeof ( source ) , configuration _ guid . explicit , typeof _ get <%> <%> , property , null <%> <%> <%> name ( name ( </@> . </@> . </@> . name ) ) ) source"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ int . explicit , typeof ( string _ string <%> <%> ) j j ( string ) <%> ;"]}, {"before_ctx": " ", "before_line": " entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . convention ) ;", "predictions": ["entity _ type _ builder . property ( STR . typeof . entity . table . _ ) ;"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;", "predictions": ["entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source ) ;"]}, {"before_ctx": " ", "before_line": " entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . convention ) ;", "predictions": ["entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . entity configuration ) builder"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ ; <+> </%> </%> ( get <%> index _ ; <+> ( get = ( string . string . ( property property not ; , _ id provider ) data ) _ list configuration <%> type ) <*>"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ int . explicit , typeof ( equal } } ) builder"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit , typeof ( source ) , async _ type </%> ( string property ( string j null ( name ( name ( name . </@> . ( ) ) ) <%> bool . name . name <%> bool <%> </%> , . : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit , typeof ( source ) ) ;"]}, {"before_ctx": " ", "before_line": " var shadow _ key _ property = principal _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ; ", "after_ctx": " <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%>", "after_line": "var shadow _ key _ property = principal _ entity _ builder . property ( typeof ( int ) , STR , configuration _ source . convention ) ;", "predictions": ["var shadow _ key _ property = principal _ entity _ builder . property ( STR , typeof ( int ) , configuration ) ;"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " dependent _ entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "dependent _ entity _ builder . property ( typeof ( int ) , order . id _ property . name , configuration _ source . convention ) ;", "predictions": ["dependent _ entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration ( source _ source _ <+> STR ) , <%> , <%> _ null </%> ) <->"]}, {"before_ctx": " ", "before_line": " new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . metadata . name , property . name } , ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "new [ ] { entity _ builder . property ( typeof ( int ) , STR , configuration _ source . convention ) . metadata . name , property . name } ,", "predictions": ["new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention _ typeof STR , <-> STR } ,"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " ( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "( entity _ builder , property ) = > entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ) ;", "predictions": ["( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , configuration _ typeof ( property ) , _ id . data , ) </@> ) property property _ <-> string , ) property property source ,"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var shadow _ property = dependent _ entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "var shadow _ property = dependent _ entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . convention ) ;", "predictions": ["var shadow _ property = dependent _ entity _ builder . property ( STR , typeof ( guid ) , configuration _ source <%> ) ;"]}, {"before_ctx": " ", "before_line": " entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention ) ; ", "after_ctx": " <%> <+> typeof ( string ) , </%> <%> <-> , typeof ( string ) </%>", "after_line": "entity _ builder . property ( typeof ( int ) , order . id _ property . name , configuration _ source . convention ) ;", "predictions": ["entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source ( configuration ) . configuration ( source ( name _ <%> . property . i , name ( guid STR STR STR STR ) STR"]}, {"before_ctx": "<%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> ", "before_line": " derived _ entity _ builder . property ( special _ order . specialty _ property . name , typeof ( string ) , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "derived _ entity _ builder . property ( typeof ( string ) , special _ order . specialty _ property . name , configuration _ source . convention ) ;", "predictions": ["derived _ entity _ builder . property ( special _ order . specialty _ property . name , typeof ( string ) </%> , ( string <%> int source _ source _ > _ > _ guid ) builder ;"]}, {"before_ctx": " ", "before_line": " ( entity _ builder , property ) = > entity _ builder . property ( ( ( i _ property ) property ) . name , property . clr _ type , configuration _ source . explicit ) ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "( entity _ builder , property ) = > entity _ builder . property ( property . clr _ type , ( ( i _ property ) property ) . name , configuration _ source . explicit ) ) ;", "predictions": ["( entity _ builder , property ) = > entity _ builder . property ( ( ( i _ property ) property , <%> ( source ) ) , </@> STR _ source _ property _ entity ) ( data ( data ( id ( id ( id ( data , builder <%> ) ) <%> ) <%> property configuration , ) , : configuration . ; ) ,"]}, {"before_ctx": "<%> <*> ( entity _ builder , property ) = > entity _ builder . property ( ( ( i _ property ) property ) . name , property . clr _ type , configuration _ source . explicit ) ) ; -> ( entity _ builder , property ) = > entity _ builder . property ( property . clr _ type , ( ( i _ property ) property ) . name , configuration _ source . explicit ) ) ; </%> ", "before_line": " var shadow _ property = entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "var shadow _ property = entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . convention ) ;", "predictions": ["var shadow _ property = entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ;"]}, {"before_ctx": " ", "before_line": " ( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "( entity _ builder , property ) = > entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ) ;", "predictions": ["( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , entity _ name typeof id ( , ) _ source , <%> _ int , name ) , configuration , property , property , property _ typeof STR _ id _ <@> ) ) property"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var shadow _ property = entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "var shadow _ property = entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . convention ) ;", "predictions": ["var shadow _ property = entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . entity , . entity ) ;"]}, {"before_ctx": " ", "before_line": " order . id _ property . name , typeof ( int ) , configuration _ source . data _ annotation , type _ configuration _ source : configuration _ source . data _ annotation ) ) ; ", "after_ctx": " <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <%> <+> typeof ( string ) , </%> <%> <-> typeof ( string ) , configuration _ source . convention , </%>", "after_line": "typeof ( int ) , order . id _ property . name , configuration _ source . data _ annotation , type _ configuration _ source : configuration _ source . data _ annotation ) ) ;", "predictions": ["order . id _ property . name , typeof ( int ) , configuration _ source . data _ annotation , type ) builder builder builder ) = . ) = filter </%> server ( configuration _ </%> ( <+> _ <*> . <+> _ <*> . <+> ) property type property ) type"]}, {"before_ctx": "<%> <+> typeof ( int ) , </%> <%> <*> typeof ( int ) , configuration _ source . data _ annotation , -> configuration _ source . data _ annotation , </%> ", "before_line": " entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention , type _ configuration _ source : null ) ) ; ", "after_ctx": " <%> <+> typeof ( string ) , </%> <%> <*> typeof ( string ) , configuration _ source . convention , -> configuration _ source . convention , </%>", "after_line": "entity _ builder . property ( typeof ( int ) , order . id _ property . name , configuration _ source . convention , type _ configuration _ source : null ) ) ;", "predictions": ["entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention , type _ , ) ( null ) . </@> ( <+> , </%> . = , <*> . = , ) , </%> , -> , -> . = , </@> . = ,"]}, {"before_ctx": "<%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> ", "before_line": " order . id _ property . name , typeof ( string ) , configuration _ source . convention , type _ configuration _ source : configuration _ source . convention ) ) ; ", "after_ctx": " ", "after_line": "typeof ( string ) , order . id _ property . name , configuration _ source . convention , type _ configuration _ source : configuration _ source . convention ) ) ;", "predictions": ["order . id _ property . name , typeof ( string ) , configuration _ source . convention , type _ configuration _ <%> <+> . entity <%> , ;"]}, {"before_ctx": " ", "before_line": " var derived _ property = derived _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . data _ annotation ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%> <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "var derived _ property = derived _ entity _ builder . property ( typeof ( int ) , STR , configuration _ source . data _ annotation ) ;", "predictions": ["var derived _ property = derived _ entity _ builder . property ( STR , typeof ( int ) , configuration _ string typeof type _ </@> _ = _ = _ typeof ( int ( id , typeof ) <%> ) <%> <%> typeof _ : , ) ;"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var derived _ property = derived _ entity _ builder . property ( STR , typeof ( byte ) , configuration _ source . convention ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "var derived _ property = derived _ entity _ builder . property ( typeof ( byte ) , STR , configuration _ source . convention ) ;", "predictions": ["var derived _ property = derived _ entity _ builder . property ( STR , typeof ( byte ) , configuration _ name <%> typeof int int source ) : , , STR ) property"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> <%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var property _ builder = entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ builder . property ( typeof ( int ) , STR , configuration _ source . convention ) ;", "predictions": ["var property _ builder = entity _ builder . property ( STR , typeof ( int ) , configuration _ source . builder _ entity . builder typeof ) <->"]}, {"before_ctx": "<%> <+> typeof ( int ) , </%> <%> <-> ) , typeof ( int </%> ", "before_line": " var property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( int ) , configuration _ source . data _ annotation ) ; ", "after_ctx": " <%> <+> typeof ( string ) , </%> <%> <-> ) , typeof ( string </%> <%> <+> typeof ( string ) , </%> <%> <-> ) , typeof ( string </%>", "after_line": "var property _ builder = derived _ entity _ builder . property ( typeof ( int ) , nameof ( special _ order . specialty ) , configuration _ source . data _ annotation ) ;", "predictions": ["var property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , special -> source -> _ id <%> : , source builder builder builder ) entity property property configuration entity ( = ( = ( <*> property var ; . _ annotation ( <*> _ var ( <*> ( = ( = ( = ( = ( = ( ; ( ; ( ; ( ; <%> ( ; builder ( ; ; <+> ( ; ( ; <%> ( var ( var ( ; ( ; ( ;"]}, {"before_ctx": "<%> <+> typeof ( int ) , </%> <%> <-> ) , typeof ( int </%> <%> <*> var property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( int ) , configuration _ source . data _ annotation ) ; -> var property _ builder = derived _ entity _ builder . property ( typeof ( int ) , nameof ( special _ order . specialty ) , configuration _ source . data _ annotation ) ; </%> ", "before_line": " assert . null ( derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( string ) , configuration _ source . data _ annotation ) ) ; ", "after_ctx": " <%> <+> typeof ( string ) , </%> <%> <-> ) , typeof ( string </%>", "after_line": "assert . null ( derived _ entity _ builder . property ( typeof ( string ) , nameof ( special _ order . specialty ) , configuration _ source . data _ annotation ) ) ;", "predictions": ["assert . null ( derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , configuration _ source . data _ annotation ) ) ;"]}, {"before_ctx": "<%> <*> var property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( int ) , configuration _ source . data _ annotation ) ; -> var property _ builder = derived _ entity _ builder . property ( typeof ( int ) , nameof ( special _ order . specialty ) , configuration _ source . data _ annotation ) ; </%> <%> <+> typeof ( string ) , </%> <%> <-> ) , typeof ( string </%> ", "before_line": " property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( string ) , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "property _ builder = derived _ entity _ builder . property ( typeof ( string ) , nameof ( special _ order . specialty ) , configuration _ source . explicit ) ;", "predictions": ["property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , special _ source . explicit ) ;"]}, {"before_ctx": "<%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> ", "before_line": " assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . data _ annotation ) ) ; ", "after_ctx": " <%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%>", "after_line": "assert . not _ null ( entity _ builder . property ( typeof ( int ) , order . id _ property . name , configuration _ source . data _ annotation ) ) ;", "predictions": ["assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( typeof ( typeof ( typeof filter filter </%> <*> , ( ) _ annotation ) ) ) >"]}, {"before_ctx": "<%> <+> typeof ( int ) , </%> <%> <-> , typeof ( int ) </%> ", "before_line": " assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . explicit ) ) ; ", "after_ctx": " ", "after_line": "assert . not _ null ( entity _ builder . property ( typeof ( int ) , order . id _ property . name , configuration _ source . explicit ) ) ;", "predictions": ["assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( ( ( ( ( ( . , . , </%> STR <%> int , STR _ source _ </@> _ </@> _ </@> ) _ </@> _ type _ data ) ) ) <-> ( </%> </%> _ source ( order . builder ( server ( ) . : ( entity _ data _ </%> . </@> _ id . : _ <@> _ : _ : _ : _ : _ : _ <@> _ : _"]}, {"before_ctx": " ", "before_line": " if ( property . relational ( ) . is _ fixed _ length ) ", "after_ctx": " <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%>", "after_line": "if ( property . is _ fixed _ length ( ) )", "predictions": ["if ( property . relational ( ) . is _ fixed _ length )"]}, {"before_ctx": " ", "before_line": " var db _ function = model . relational ( ) . find _ db _ function ( method ) ; ", "after_ctx": " <%> <-> method . return _ type , null ) ; </%>", "after_line": "var db _ function = model . find _ db _ function ( method ) ;", "predictions": ["var db _ function = model . find _ db _ function ( ) ;"]}, {"before_ctx": " ", "before_line": " new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . metadata } , ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "new [ ] { entity _ builder . property ( typeof ( int ) , STR , configuration _ source . convention ) . metadata } ,", "predictions": ["new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) _ entity ,"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . metadata } , ", "after_ctx": " ", "after_line": "new [ ] { entity _ builder . property ( typeof ( int ) , STR , configuration _ source . convention ) . metadata } ,", "predictions": ["new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . metadata } ,"]}, {"before_ctx": "<%> <*> sql -> get </%> <%> <*> server -> filter </%> <%> <-> . filter </%> <%> <-> . sql _ server ( configuration _ source . convention ) </%> <%> <*> sql -> get </%> <%> <*> server -> filter </%> <%> <-> . filter </%> ", "before_line": " index _ builder . sql _ server ( configuration _ source . convention ) . has _ filter ( null ) ; ", "after_ctx": " <%> <*> sql -> get </%> <%> <-> server ( ) . </%> <%> <+> ( </%> <%> <+> ) </%>", "after_line": "index _ builder . has _ filter ( null ) ;", "predictions": ["index _ builder . sql _ server ( null ) . has _ filter ( null ) ;"]}, {"before_ctx": " ", "before_line": " dependent _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "dependent _ entity _ builder . property ( typeof ( int ) , STR , configuration _ source . convention ) ;", "predictions": ["dependent _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . find ;"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " principal _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%> <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "principal _ entity _ builder . property ( typeof ( int ) , STR , configuration _ source . convention ) ;", "predictions": ["principal _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention , STR ) configuration ;"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " dependent _ entity _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; principal _ entity _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "dependent _ entity _ builder . property ( typeof ( string ) , STR , configuration _ source . convention ) ; principal _ entity _ builder . property ( typeof ( string ) , STR , configuration _ source . convention ) ;", "predictions": ["dependent _ entity _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; name _ <-> _ source typeof <%> ( <%> ( </@> typeof <@> typeof source _ configuration _ <-> _ configuration _ <-> ( string _ string ) , configuration . int ) ) source source builder . source _ configuration _ source . source _ source _ builder . = builder property ( nameof . nameof . nameof . nameof . nameof . = builder . = ) _ entity ( nameof . nameof . nameof ."]}, {"before_ctx": "<%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> ", "before_line": " var property _ builder = entity _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; ", "after_ctx": " <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%>", "after_line": "var property _ builder = entity _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ builder . property ( STR , typeof ( readonly readonly readonly query query query query _ database , in _ database ( i _ public . false . false . false . false async STR . virtual [ </%> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( private ) ) ) ) ) ) ) ) ) ) ) ) ) ) _ source ) ) ) ) ) ) STR . _ source . ) ) ) ) _ source . < var _ . ) )"]}, {"before_ctx": "<%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> ", "before_line": " var property _ builder = entity _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ; ", "after_ctx": " <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%>", "after_line": "var property _ builder = entity _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ builder . property ( STR , typeof ( string ) , microsoft _ string string query , memory , <*> ) < database ( i _ i ( i ( i ( i ( i ( i . virtual [ as as as as _ as [ as as </%> [ </%> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ( <*> ("]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ builder . property ( STR , typeof ( int ) , configuration _ source . data _ annotation ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "var property _ builder = entity _ builder . property ( typeof ( int ) , STR , configuration _ source . data _ annotation ) ;", "predictions": ["var property _ builder = entity _ builder . property </%> <*> -> <*> <%> _ source _ data _ out < list _ _ source _ </%> _ out t t t <%> ; _ <*> _ <+> _ out t t <*> </@>"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " var property _ builder = entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ builder . property ( typeof ( int ) , STR , configuration _ source . convention ) ;", "predictions": ["var property _ builder = entity _ builder . property ( _ builder , typeof ( STR ( abstract </%> ( abstract </%> </%> ) ) builder builder builder _ private <-> typeof _ private <%> <%> <%> <%> <%> <%> , <%> > , < </%> _ configuration _ configuration _ source ) ) _ source ) ) , query ( <+> , database , <+> , <+> , query > > > <%> ) <%>"]}, {"before_ctx": " ", "before_line": " assert . true ( property . relational ( ) . is _ fixed _ length ) ; ", "after_ctx": " <%> <-> . relational ( ) </%> <%> <+> ( ) </%>", "after_line": "assert . true ( property . is _ fixed _ length ( ) ) ;", "predictions": ["assert . true ( property . relational ( ) ( . = _ _ as . <@> . </@> _ <-> ) < i > . ; ) </%>"]}, {"before_ctx": "<%> <-> . relational ( ) </%> <%> <+> ( ) </%> ", "before_line": " assert . false ( property . relational ( ) . is _ fixed _ length ) ; ", "after_ctx": " ", "after_line": "assert . false ( property . is _ fixed _ length ( ) ) ;", "predictions": ["assert . false ( property . relational ( ) _ configuration _ configuration _ length <%> ] <*> : <@> ) model <%> <+>"]}, {"before_ctx": "<%> <-> . relational ( ) </%> <%> <*> relational ( ) . -> get _ </%> <%> <+> ( ) </%> ", "before_line": " var sequence = model _ builder . model . relational ( ) . find _ sequence ( STR ) ; ", "after_ctx": " ", "after_line": "var sequence = model _ builder . model . find _ sequence ( STR ) ;", "predictions": ["var sequence = model _ builder . model . relational ( ) . find ) ; _ STR model model , STR _ </@> </%> query i enumerable _ </%> ; ; ( ) <%> ; <%> = <*> <%>"]}, {"before_ctx": "<%> <-> . relational ( ) </%> ", "before_line": " var db _ func = model _ builder . model . relational ( ) . find _ db _ function ( test _ method ) as db _ function ; ", "after_ctx": " ", "after_line": "var db _ func = model _ builder . model . find _ db _ function ( test _ method ) as db _ function ;", "predictions": ["var db _ func = model _ builder . [ -> -> -> . = </%> ( <%> _ ) </%> key _ , = <%> _ <-> query query _ t <*>"]}, {"before_ctx": "<%> <*> bool -> void </%> <%> <*> return false ; -> configuration . data _ store _ creator . delete ( ) ; </%> <%> <+> } public virtual bool exists ( ) { return configuration . data _ store _ creator . exists ( ) ; </%> <%> <*> return task . from _ result ( false ) ; -> return configuration . data _ store _ creator . create _ async ( configuration . model , cancellation _ token ) ; </%> ", "before_line": " public virtual task < bool > delete _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) ) ", "after_ctx": " <%> <*> return task . from _ result ( false ) ; -> return configuration . data _ store _ creator . delete _ async ( cancellation _ token ) ; </%> <%> <+> } public virtual task < bool > exists _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) ) { return configuration . data _ store _ creator . exists _ async ( cancellation _ token ) ; </%>", "after_line": "public virtual task delete _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) )", "predictions": ["public virtual bool delete _ async ( cancellation _ token cancellation _ token = default ] ( by _ ) ( ( ( by _ ) ( by _ ) , server , method _ provider ) , method , method ) ,"]}, {"before_ctx": " ", "before_line": " var store = mock . of < data _ store > ( ) ; var source = create _ source ( STR , configured : true , available : false , store : store ) ; ", "after_ctx": " <%> <*> store -> source </%>", "after_line": "var source = create _ source ( STR , configured : true , available : false , store : mock . of < data _ store > ( ) ) ;", "predictions": ["var source = create _ source ( STR , configured : true , available <%> static _ _ available <%> <%> query < data </%> false <%> false </%> false < private </@> private _ _ </@> </@> i > < _ </@> </@> . ( using provider string string ;"]}, {"before_ctx": "<%> <-> public override void order _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) { base . order _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) ; } public override void order _ by _ then _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) { base . order _ by _ then _ by _ is _ properly _ lifted _ from _ subquery _ created _ by _ include ( ) ; } </%> ", "before_line": " where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and not ( [ g ] . [ has _ soul _ patch ] = cast ( 1 as bit ) ) ", "after_ctx": " <%> <+> assert _ sql ( @ STR from [ gears ] as [ g ] where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and ( [ g ] . [ has _ soul _ patch ] < > cast ( 1 as bit ) ) order by [ g ] . [ full _ name ] STR </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) and ( [ g ] . [ has _ soul _ patch ] < > cast ( 1 as bit ) )", "predictions": ["where [ g ] . [ discriminator ] in ( n ' gear ' , enumerable . result . query , compilation provider provider )"]}, {"before_ctx": "<%> <*> = > new sql _ server _ query _ compilation _ context ( -> { </%> <%> <+> check . not _ null ( linq _ operator _ provider , nameof ( linq _ operator _ provider ) ) ; check . not _ null ( result _ operator _ handler , nameof ( result _ operator _ handler ) ) ; check . not _ null ( enumerable _ method _ provider , nameof ( enumerable _ method _ provider ) ) ; check . not _ null ( method _ call _ translator , nameof ( method _ call _ translator ) ) ; return new sql _ server _ query _ compilation _ context ( </%> ", "before_line": " check . not _ null ( linq _ operator _ provider , nameof ( linq _ operator _ provider ) ) , check . not _ null ( result _ operator _ handler , nameof ( result _ operator _ handler ) ) , ", "after_ctx": " <%> <*> check . not _ null ( enumerable _ method _ provider , nameof ( enumerable _ method _ provider ) ) , check . not _ null ( method _ call _ translator , nameof ( method _ call _ translator ) ) , -> clr _ property _ getter _ source , </%> <%> <+> enumerable _ method _ provider , method _ call _ translator , </%> <%> <+> } </%>", "after_line": "linq _ operator _ provider , result _ operator _ handler ,", "predictions": ["check . not _ null ( linq _ operator _ provider , nameof ( linq _ ) ) ) _ ) ) ) _ ) query check query query expression query expression _ ) query query expression query _ ;"]}, {"before_ctx": "<%> <*> query -> t </%> <%> <*> source -> out > , i </%> <%> <*> scope -> grouping </%> <%> <+> t _ key , </%> <%> <-> > </%> ", "before_line": " private readonly i _ async _ grouping < t _ key , query _ source _ scope < t _ out > > grouping ; ", "after_ctx": " <%> <-> query _ source _ scope < </%> <%> <-> > </%>", "after_line": "private readonly i _ async _ grouping < t _ key , t _ out > grouping ;", "predictions": ["private readonly i _ async _ grouping < t _ key , query _ source _ source t ( _ ( _ _ entity connection provider ) connection ) framework framework framework _ <+> _ ) framework framework framework framework _ private < framework ;"]}, {"before_ctx": "<%> <*> query -> t </%> <%> <*> source -> out > , i </%> <%> <*> scope -> grouping </%> <%> <+> t _ key , </%> <%> <-> > </%> <%> <-> query _ source _ scope < </%> <%> <-> > </%> ", "before_line": " i _ async _ grouping < t _ key , query _ source _ scope < t _ out > > grouping , ", "after_ctx": " ", "after_line": "i _ async _ grouping < t _ key , t _ out > grouping ,", "predictions": ["i _ async _ grouping < t _ key , query _ source _ scope > grouping t _ property ("]}, {"before_ctx": "<%> <*> t . select ( vs = > new entity _ load _ info ( new value _ buffer ( vs ) , vr = > materializer ( t . entity _ type , vr ) ) ) -> t . select ( vs = > new entity _ load _ info ( </%> <%> <+> new value _ buffer ( vs ) , vb = > materializer ( t . entity _ type , vb ) ) ) </%> <%> <+> } </%> ", "before_line": " private static i _ enumerable < query _ source _ scope < t _ entity > > entity _ query < t _ entity > ( i _ query _ source query _ source , query _ context query _ context , query _ source _ scope parent _ query _ source _ scope , ", "after_ctx": " <%> <*> = > ( ( in _ memory _ query _ context ) query _ context ) . database -> { </%> <%> <+> return ( ( in _ memory _ query _ context ) query _ context ) . database </%>", "after_line": "private static i _ enumerable < t _ entity > entity _ query < t _ entity > ( query _ context query _ context ,", "predictions": ["private static i _ enumerable < query _ source _ scope > entity _ query <*> virtual virtual virtual virtual"]}, {"before_ctx": "<%> <*> , -> ; </%> <%> <-> parent _ query _ source _ scope , value _ buffer ) ; </%> <%> <+> } </%> ", "before_line": " private static i _ enumerable < query _ source _ scope < value _ buffer > > projection _ query ( i _ query _ source query _ source , query _ context query _ context , query _ source _ scope parent _ query _ source _ scope , ", "after_ctx": " <%> <*> = > ( ( in _ memory _ query _ context ) query _ context ) . database -> { </%> <%> <+> return ( ( in _ memory _ query _ context ) query _ context ) . database </%> <%> <-> . select _ many ( t = > t . select ( vs = > new query _ source _ scope < value _ buffer > ( query _ source , new value _ buffer ( vs ) , </%>", "after_line": "private static i _ enumerable < value _ buffer > projection _ query ( query _ context query _ context ,", "predictions": ["private static i _ enumerable < query _ source _ scope < value _ buffer context context context _ ( database _ </%> _ configuration cancellation _ ) cancellation _ from by _ ( ( [ _ ( _ scope [ _ ( by _ not _ query _ ; ) query"]}, {"before_ctx": "<%> <*> qss -> result </%> ", "before_line": " private static i _ enumerable < i _ grouping < t _ key , query _ source _ scope < t _ out > > > track _ grouped _ entities < t _ key , t _ out , t _ in > ( i _ enumerable < i _ grouping < t _ key , query _ source _ scope < t _ out > > > groupings , ", "after_ctx": " ", "after_line": "private static i _ enumerable < i _ grouping < t _ key , t _ out > > track _ grouped _ entities < t _ key , t _ out , t _ in > ( i _ enumerable < i _ grouping < t _ key , t _ out > > groupings ,", "predictions": ["private static i _ enumerable < i _ grouping < t _ key , query ( </%> ( connection _ out ; core _ ) _ ( ; ; connection _ in ( source , ) ( ) ( ) ( ) ( ) ) database cancellation _ return data cancellation _ return _ async . ) public"]}, {"before_ctx": " ", "before_line": " private class tracking _ grouping < t _ key , t _ out , t _ in > : i _ grouping < t _ key , query _ source _ scope < t _ out > > ", "after_ctx": " <%> <-> query _ source _ scope < </%> <%> <-> > </%> <%> <-> query _ source _ scope < </%> <%> <-> > </%>", "after_line": "private class tracking _ grouping < t _ key , t _ out , t _ in > : i _ grouping < t _ key , t _ out >", "predictions": ["private class tracking _ grouping : i _ grouping < t _ key , query _ source _ scope >"]}, {"before_ctx": "<%> <-> query _ source _ scope < </%> <%> <-> > </%> ", "before_line": " private readonly i _ grouping < t _ key , query _ source _ scope < t _ out > > grouping ; ", "after_ctx": " <%> <-> query _ source _ scope < </%> <%> <-> > </%>", "after_line": "private readonly i _ grouping < t _ key , t _ out > grouping ;", "predictions": ["private readonly i _ grouping < t _ key , query _ source _ scope , model = source key ) scope scope"]}, {"before_ctx": "<%> <-> query _ source _ scope < </%> <%> <-> > </%> <%> <-> query _ source _ scope < </%> <%> <-> > </%> ", "before_line": " i _ grouping < t _ key , query _ source _ scope < t _ out > > grouping , ", "after_ctx": " ", "after_line": "i _ grouping < t _ key , t _ out > grouping ,", "predictions": ["i _ grouping < t _ key , query _ source _ scope > grouping , ,"]}, {"before_ctx": " ", "before_line": " query _ source _ scope . create ( query _ model . main _ from _ clause , optional _ default _ value , entity _ query _ model _ visitor . query _ source _ scope _ parameter ) ) ; ", "after_ctx": " <%> <*> { return expression . call ( -> = > expression . call ( </%> <%> <-> } </%>", "after_line": "optional _ default _ value ) ;", "predictions": ["query _ source _ scope . create ( query _ model . main _ from _ only ( optional _ default _ value i ( <%> ( <%> ( builder ( parameter ( <%> ( <%> ( entity ( model ( <%> ( <%> _ ) _ ( _ <@> ) ) , ( ( ( ( ( . <*> <*> > t > > > > > > t > cancellation _ source cancellation async cancellation cancellation by _ model _ cast by by _ model by cast by by model ) by by by by _ model _"]}, {"before_ctx": "<%> <*> var group _ join _ clauses = query _ model . body _ clauses . of _ type < group _ join _ clause > ( ) . to _ list ( ) ; if ( group _ join _ clauses . any ( ) ) -> var group _ join _ materialization _ expression _ visitor = new requires _ materialization _ for _ group _ join _ expression _ visitor ( ) ; </%> <%> <+> var group _ join _ materialization _ query _ model _ vistor = new requires _ materialization _ for _ group _ join _ query _ model _ visitor ( group _ join _ materialization _ expression _ visitor , query _ sources _ requiring _ materialization , requires _ materialization _ expression _ visitor ) ; group _ join _ materialization _ expression _ visitor . query _ model _ visitor = group _ join _ materialization _ query _ model _ vistor ; group _ join _ materialization _ query _ model _ vistor . visit _ query _ model ( query _ model ) ; } private class requires _ materialization _ for _ group _ join _ query _ model _ visitor : expression _ transforming _ query _ model _ visitor < requires _ materialization _ for _ group _ join _ expression _ visitor > { private readonly i _ set < i _ query _ source > query _ sources _ requiring _ materialization ; private readonly requires _ materialization _ expression _ visitor requires _ materialization _ expression _ visitor ; public requires _ materialization _ for _ group _ join _ query _ model _ visitor ( requires _ materialization _ for _ group _ join _ expression _ visitor transforming _ visitor , i _ set < i _ query _ source > query _ sources _ requiring _ materialization , requires _ materialization _ expression _ visitor requires _ materialization _ expression _ visitor ) : base ( transforming _ visitor ) { transforming _ visitor . query _ model _ visitor = this ; query _ sources _ requiring _ materialization = query _ sources _ requiring _ materialization ; requires _ materialization _ expression _ visitor = requires _ materialization _ expression _ visitor ; } public override void visit _ group _ join _ clause ( group _ join _ clause group _ join _ clause , query _ model query _ model , int index ) </%> <%> <*> foreach ( var group _ join _ clause in group _ join _ clauses ) -> query _ sources _ requiring _ materialization . add ( group _ join _ clause . join _ clause ) ; </%> <%> <+> var sub _ query _ inner _ sequence = group _ join _ clause . join _ clause . inner _ sequence as sub _ query _ expression ; if ( sub _ query _ inner _ sequence ! = null ) </%> <%> <*> query _ sources _ requiring _ materialization . add ( group _ join _ clause . join _ clause ) ; var sub _ query _ inner _ sequence = group _ join _ clause . join _ clause . inner _ sequence as sub _ query _ expression ; if ( sub _ query _ inner _ sequence ! = null ) -> var sub _ query _ sources _ requiring _ materialization = </%> <%> <+> requires _ materialization _ expression _ visitor . find _ query _ sources _ requiring _ materialization ( sub _ query _ inner _ sequence . query _ model ) ; foreach ( var sub _ query _ source in sub _ query _ sources _ requiring _ materialization ) </%> ", "before_line": " var sub _ query _ sources _ requiring _ materialization = requires _ materialization _ expression _ visitor _ factory . create ( query _ model _ visitor ) . find _ query _ sources _ requiring _ materialization ( sub _ query _ inner _ sequence . query _ model ) ; foreach ( var sub _ query _ source in sub _ query _ sources _ requiring _ materialization ) { query _ sources _ requiring _ materialization . add ( sub _ query _ source ) ; } ", "after_ctx": " <%> <+> } } private class requires _ materialization _ for _ group _ join _ expression _ visitor : expression _ visitor _ base { public query _ model _ visitor _ base query _ model _ visitor { get ; set ; } protected override expression visit _ sub _ query ( sub _ query _ expression expression ) { query _ model _ visitor . visit _ query _ model ( expression . query _ model ) ; </%>", "after_line": "query _ sources _ requiring _ materialization . add ( sub _ query _ source ) ;", "predictions": ["private override void visit _ group _ join _ clause ( ) ;"]}, {"before_ctx": " ", "before_line": " convention _ set _ builders = convention _ set _ builders ;  convention _ set _ builder = new composite _ convention _ set _ builder ( ( i _ read _ only _ list < i _ convention _ set _ builder > ) convention _ set _ builders ) ; ", "after_ctx": " <%> <-> obsolete _ use _ convention _ set _ builders </%>", "after_line": "convention _ set _ builder = new composite _ convention _ set _ builder ( ( i _ read _ only _ list < i _ convention _ set _ builder > ) convention _ set _ builders ) ;", "predictions": ["convention _ set _ builder = new composite _ convention _ set _ builder ( <-> _ read -> -> <%> _ <%> -> -> ( get ( ) -> service string service service string service string service string service service string service string string service query _ source <%> _ ( ( ( t _ ( < t _ cancellation <*> <*> _ cancellation <*> ; . </%> ;"]}, {"before_ctx": "<%> <*> private static readonly -> protected virtual </%> <%> <+> > </%> <%> <+> protected abstract adventure _ works _ context _ base create _ context ( ) ; </%> ", "before_line": " context = adventure _ works _ fixture . create _ context ( ) ; ", "after_ctx": " ", "after_line": "context = create _ context ( ) ;", "predictions": ["context = create _ context ( ) ;"]}, {"before_ctx": "<%> <*> private static readonly -> protected virtual </%> <%> <+> > </%> <%> <+> protected abstract adventure _ works _ context _ base create _ context ( ) ; </%> ", "before_line": " context = adventure _ works _ fixture . create _ context ( ) ; ", "after_ctx": " ", "after_line": "context = create _ context ( ) ;", "predictions": ["context = create _ context ( ) ;"]}, {"before_ctx": " ", "before_line": " using system ; using microsoft _ entity _ framework _ core _ benchmarks _ models _ adventure _ works ; namespace microsoft _ entity _ framework _ core _ benchmarks _ ef _ core _ models _ adventure _ works ", "after_ctx": " <%> <+> abstract </%> <%> <+> _ base </%> <%> <-> private readonly string connection _ string ; private readonly i _ service _ provider service _ provider ; public adventure _ works _ context ( string connection _ string ) { connection _ string = connection _ string ; } public adventure _ works _ context ( string connection _ string , i _ service _ provider service _ provider ) </%>", "after_line": "namespace microsoft _ entity _ framework _ core _ benchmarks _ models _ adventure _ works", "predictions": ["namespace microsoft _ entity _ framework _ core _ benchmarks _ models _ adventure"]}, {"before_ctx": " ", "before_line": " using system ; using microsoft _ entity _ framework _ core _ benchmarks _ models _ adventure _ works ; namespace microsoft _ entity _ framework _ core _ benchmarks _ ef _ core _ models _ adventure _ works ", "after_ctx": " <%> <+> abstract </%> <%> <+> _ base </%> <%> <-> private readonly string connection _ string ; private readonly i _ service _ provider service _ provider ; public adventure _ works _ context ( string connection _ string ) { connection _ string = connection _ string ; } public adventure _ works _ context ( string connection _ string , i _ service _ provider service _ provider ) </%>", "after_line": "namespace microsoft _ entity _ framework _ core _ benchmarks _ models _ adventure _ works", "predictions": ["namespace microsoft _ entity _ framework _ core _ benchmarks _ models _ adventure"]}, {"before_ctx": "<%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ t . gear . weapons ] ", "after_ctx": " <%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ t . gear . weapons ]", "predictions": ["from [ weapon ] as weapons ]"]}, {"before_ctx": "<%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ t . gear . weapons ] ", "after_ctx": " <%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ t . gear . weapons ]", "predictions": ["from [ weapon ] as weapons ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ g . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ g . weapons ]", "predictions": ["from [ weapon ] as [ g ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> cog _ tag -> tags </%> ", "before_line": " from [ weapon ] as [ g . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> cog _ tag -> tags </%>", "after_line": "from [ weapons ] as [ g . weapons ]", "predictions": ["from [ weapon ] as [ g ] value"]}, {"before_ctx": "<%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ g . weapons ] ", "after_ctx": " <%> <*> cog _ tag -> tags </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ g . weapons ]", "predictions": ["from [ weapon ] as [ g ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> cog _ tag -> tags </%> ", "before_line": " from [ weapon ] as [ o . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> cog _ tag -> tags </%>", "after_line": "from [ weapons ] as [ o . weapons ]", "predictions": ["from [ weapon ] as [ o ] as weapons ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ g . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ g . weapons ]", "predictions": ["from [ weapon ] as [ g ] as"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ . weapons ]", "predictions": ["from [ weapon ] as weapons ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ g . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ g . weapons ]", "predictions": ["from [ weapon ] as [ g ] as weapons ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ . weapons ]", "predictions": ["from [ weapon ] as weapons ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ g . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ g . weapons ]", "predictions": ["from [ weapon ] as [ g ] as weapons ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ . weapons ]", "predictions": ["from [ weapon ] as weapons ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ g . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ g . weapons ]", "predictions": ["from [ weapon ] as [ g ] as weapons ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ . weapons ]", "predictions": ["from [ weapon ] as weapons ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ g . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ g . weapons ]", "predictions": ["from [ weapon ] as [ g ] as weapons ]"]}, {"before_ctx": "<%> <*> gear -> gears </%> <%> <*> gear -> gears </%> ", "before_line": " from [ weapon ] as [ . weapons ] ", "after_ctx": " <%> <*> gear -> gears </%> <%> <*> gear -> gears </%>", "after_line": "from [ weapons ] as [ . weapons ]", "predictions": ["from [ weapon ] as weapons ]"]}, {"before_ctx": " ", "before_line": " protected readonly lazy _ metadata _ ref < t _ annotations > lazy _ annotations = new lazy _ metadata _ ref < t _ annotations > ( ) ; ", "after_ctx": " <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%> <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%>", "after_line": "protected t _ annotations lazy _ annotations ;", "predictions": ["protected readonly lazy _ metadata _ ref < <-> _ key & & readonly _ . _ <*> property _ . type > <%> _ </%> private </@> ;"]}, {"before_ctx": " ", "before_line": " protected readonly lazy _ metadata _ ref < t _ annotations > lazy _ annotations = new lazy _ metadata _ ref < t _ annotations > ( ) ; protected readonly lazy _ metadata _ ref < t _ entities > lazy _ entities = new lazy _ metadata _ ref < t _ entities > ( ) ; ", "after_ctx": " <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%> <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%>", "after_line": "protected t _ annotations lazy _ annotations ; protected t _ entities lazy _ entities ;", "predictions": ["protected readonly lazy _ metadata _ ref < ref lazy <%> _ . _ property size _ entities not _ ( ? property _ context _ ; query _ , type , </%> message _ . _ ; null ) nameof _ check <%> </%> nameof , </%> nameof . . type null nameof ,"]}, {"before_ctx": " ", "before_line": " protected readonly lazy _ metadata _ ref < t _ properties > lazy _ properties = new lazy _ metadata _ ref < t _ properties > ( ) ; protected readonly lazy _ metadata _ ref < t _ annotations > lazy _ annotations = new lazy _ metadata _ ref < t _ annotations > ( ) ; ", "after_ctx": " <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%> <%> <*> annotations -> metadata </%> <%> <*> value -> init ( ref lazy _ annotations ) </%>", "after_line": "protected t _ properties lazy _ properties ; protected t _ annotations lazy _ annotations ;", "predictions": ["protected readonly lazy _ metadata _ ref < t _ properties set _ core set _ core helper _ core helper _ properties properties"]}, {"before_ctx": "<%> <+> private readonly db _ context _ options options ; </%> <%> <*> public override northwind _ context create _ context ( query _ tracking _ behavior query _ tracking _ behavior = query _ tracking _ behavior . track _ all , bool enable _ filters = false ) -> public northwind _ query _ in _ memory _ fixture ( ) </%> <%> <*> if ( ! is _ seeded ) -> options = build _ options ( ) ; </%> <%> <+> using ( var context = create _ context ( ) ) </%> ", "before_line": " using ( var context = base . create _ context ( query _ tracking _ behavior , enable _ filters ) ) { northwind _ data . seed ( context ) ; } is _ seeded = true ; ", "after_ctx": " <%> <-> return base . create _ context ( query _ tracking _ behavior , enable _ filters ) ; </%> <%> <-> private bool is _ seeded { get ; set ; } </%>", "after_line": "northwind _ data . seed ( context ) ;", "predictions": ["northwind _ data . seed ( context ) ;"]}, {"before_ctx": " ", "before_line": " : i _ key _ convention , i _ primary _ key _ convention , i _ foreign _ key _ convention , i _ foreign _ key _ removed _ convention , i _ model _ convention ", "after_ctx": " <%> <-> public virtual internal _ key _ builder apply ( internal _ key _ builder key _ builder ) { set _ value _ generation ( key _ builder . metadata . properties ) ; return key _ builder ; } </%>", "after_line": ": i _ primary _ key _ convention , i _ foreign _ key _ convention , i _ foreign _ key _ removed _ convention , i _ model _ convention", "predictions": [": i _ primary _ key _ convention <%> index . foreign _ . _ metadata ( ref ref ref _ value"]}, {"before_ctx": " ", "before_line": " var property _ type = property . clr _ type . unwrap _ nullable _ type ( ) ; if ( property _ type . is _ integer ( ) | | property _ type = = typeof ( guid ) ) { return property ; } ", "after_ctx": " <%> <-> private void set _ identity ( i _ read _ only _ list < property > properties , entity _ type entity _ type ) { var candidate _ identity _ property = find _ value _ generated _ on _ add _ property ( properties , entity _ type ) ; if ( candidate _ identity _ property ! = null ) { var property _ builder = candidate _ identity _ property . builder ; </%>", "after_line": "return property ;", "predictions": ["return property ;"]}, {"before_ctx": " ", "before_line": " private readonly lazy _ ref < entity _ queryable < t _ entity > > entity _ queryable ; ", "after_ctx": " <%> <+> } private </%> <%> <+> < t _ entity > entity _ queryable </%> <%> <*> new lazy -> > non </%> <%> <*> ref < entity -> capturing _ lazy </%> <%> <*> queryable < t -> initializer . ensure </%> <%> <*> entity > > -> initialized </%> <%> <*> ( ) = > new -> ref </%> <%> <*> < t _ entity > ( context . query _ provider ) ) ; -> , </%> <%> <+> this , </%>", "after_line": "private entity _ queryable < t _ entity > entity _ queryable ;", "predictions": ["private readonly lazy _ ref < entity _ server , builder ( t ( t properties ( ) ) ) {"]}, {"before_ctx": "<%> <*> var tables = database _ model . tables ; visit _ tables ( model _ builder , tables ) ; -> check . not _ null ( model _ builder , nameof ( model _ builder ) ) ; </%> <%> <+> check . not _ null ( database _ model , nameof ( database _ model ) ) ; visit _ tables ( model _ builder , database _ model . tables ) ; visit _ foreign _ keys ( model _ builder , database _ model . tables . select _ many ( table = > table . foreign _ keys ) . to _ list ( ) ) ; </%> ", "before_line": " foreach ( var table in database _ model . tables ) { visit _ foreign _ keys ( model _ builder , table ) ; } visit _ navigation _ properties ( model _ builder . model ) ; ", "after_ctx": " <%> <+> check . not _ null ( model _ builder , nameof ( model _ builder ) ) ; check . not _ null ( tables , nameof ( tables ) ) ; </%> <%> <-> model _ builder . entity ( get _ entity _ type _ name ( table ) , builder = > { </%>", "after_line": "visit _ navigation _ properties ( model _ builder ) ;", "predictions": ["visit _ foreign _ keys ( model _ builder , table ) ;"]}, {"before_ctx": "<%> <+> if ( key _ builder = = null ) { var error _ message = relational _ design _ strings . unable _ to _ generate _ entity _ type ( table . display _ name ) ; logger . log _ warning ( error _ message ) ; var model = model _ builder . model ; model . remove _ entity _ type ( entity _ type _ name ) ; model . scaffolding ( ) . entity _ type _ errors . add ( entity _ type _ name , error _ message ) ; return null ; } </%> <%> <+> check . not _ null ( builder , nameof ( builder ) ) ; check . not _ null ( columns , nameof ( columns ) ) ; </%> ", "before_line": " try { visit _ column ( builder , column ) ; } catch ( not _ supported _ exception ) { visit _ unmappable _ column ( column ) ; } ", "after_ctx": " <%> <+> check . not _ null ( builder , nameof ( builder ) ) ; check . not _ null ( column , nameof ( column ) ) ; </%>", "after_line": "visit _ column ( builder , column ) ;", "predictions": ["visit _ column ( builder , column ) ;"]}, {"before_ctx": "<%> <*> other _ entity -> ! foreign </%> <%> <*> type -> key </%> <%> <*> scaffolding ( -> is _ unique </%> <%> <-> . entity _ type _ error = = null ) </%> ", "before_line": " if ( ! foreign _ key . is _ unique ) { entity _ configuration . navigation _ property _ initializer _ configurations . add ( configuration _ factory . create _ navigation _ property _ initializer _ configuration ( navigation _ property _ name , other _ entity _ type . name ) ) ; } ", "after_ctx": " ", "after_line": "entity _ configuration . navigation _ property _ initializer _ configurations . add ( configuration _ factory . create _ navigation _ property _ initializer _ configuration ( navigation _ property _ name , other _ entity _ type . name ) ) ;", "predictions": ["entity _ configuration . navigation _ property _ = _ configurations </%> t _ t </%> <%> <+> <%> . t <%> navigation _ sql _ not _ , property name _ . _ name <+> -> _ </%> _ create ( navigation _ . _ name <+> -> _ </%> _ create ( name _ . _ name <+> -> _ </%> _ create ( name _ . _ name <+> -> _ </%> _ create ( name context ) ) context ) context context ) <->"]}, {"before_ctx": "<%> <-> write ( </%> <%> <+> STR ) ; write ( </%> <%> <*> ) ; -> ) ; </%> ", "before_line": " write _ literal ( STR ) ; write (  ex . get _ type ( ) . name   ) ; ", "after_ctx": " <%> <*> write ( -> write ( </%> <%> <*> ) ; -> ) ; </%> <%> <+> ! </%> <%> <*> options -> database _ exists & & ! model </%> <%> <*> show -> pending </%> <%> <*> migration _ status -> migrations . any ( </%> <%> <+> ) </%>", "after_line": "write _ literal ( STR ) ;   write ( ex . get _ type ( ) . name ) ;", "predictions": ["write _ literal ( STR ) ; write ) <%> ;"]}, {"before_ctx": "<%> <-> var index = try _ get _ index ( properties ) ; </%> <%> <*> index ! = null -> indexes . value . contains _ key ( properties </%> <%> <+> ) </%> <%> <-> index . </%> <%> <+> var </%> ", "before_line": " throw new argument _ exception ( strings . index _ properties _ wrong _ entity ( property . format ( properties ) , name ) ) ; } indexes . value . add ( index ) ; ", "after_ctx": " ", "after_line": "throw new argument _ exception ( strings . index _ properties _ wrong _ entity ( property . format ( properties ) , name ) ) ; } indexes . value . add ( properties , index ) ;", "predictions": ["throw new argument _ exception ( strings . ; </%> </%> -> lazy lazy = name metadata metadata metadata ref metadata metadata > _ key server server _ new ) ; _ , ) ; _ , ) ; ; ; ; ;"]}, {"before_ctx": " ", "before_line": " sequence _ name = > new sql _ server _ sequence _ value _ generator _ state ( sequence , get _ pool _ size ( property ) ) ) ; ", "after_ctx": " <%> <-> public virtual int get _ pool _ size ( [ not _ null ] i _ property property ) { check . not _ null ( property , nameof ( property ) ) ; return property . sql _ server ( ) . hi _ lo _ sequence _ pool _ size ? ? property . declaring _ entity _ type . model . sql _ server ( ) . hi _ lo _ sequence _ pool _ size ? ? 1 ; } </%>", "after_line": "sequence _ name = > new sql _ server _ sequence _ value _ generator _ state ( sequence ) ) ;", "predictions": ["sequence _ name = > new sql _ entity _ = _ return _ generator _ state ) entity entity entity entity database database database ( . ( . ( ( ( ( ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > ( > new new new property _ { _ value _ key _ enumerable ( > ( > ( > ( > { { { { { { { { { { { { { { {"]}, {"before_ctx": "<%> <+> : event _ id _ test _ base </%> ", "before_line": " in _ memory _ test _ helpers . instance . test _ event _ logging ( ", "after_ctx": " ", "after_line": "test _ event _ logging (", "predictions": ["test _ event _ test _ helpers . instance <*>"]}, {"before_ctx": " ", "before_line": " candidate _ property = member _ info . name ; ", "after_ctx": " <%> <+> . name </%>", "after_line": "candidate _ property = member _ info ;", "predictions": ["candidate _ property = member _ info . . <@> </%>"]}, {"before_ctx": " ", "before_line": " new relational _ convention _ set _ builder _ dependencies ( sql _ server _ type _ mapper , null , null ) , new sql _ server _ sql _ generation _ helper ( new relational _ sql _ generation _ helper _ dependencies ( ) ) ) ", "after_ctx": " <%> <*> new core _ convention _ set _ builder _ dependencies ( sql _ server _ type _ mapper , new constructor _ binding _ factory ( ) ) ) -> new core _ convention _ set _ builder _ dependencies ( sql _ server _ type _ mapper , null , null ) ) </%>", "after_line": "new relational _ convention _ set _ builder _ dependencies ( sql _ server _ type _ mapper , null , null , null ) , new sql _ server _ sql _ generation _ helper ( new relational _ sql _ generation _ helper _ dependencies ( ) ) )", "predictions": ["new relational _ convention _ set _ builder _ ? ( <%> _ query _ options _ . context context context ( builder _ null _ = _ not _ ; model model model . builder _ , _ builder _ nameof _ not ) ( . null ( ( null ( nameof _ visit _ ; _ visit _ ; ( ( ( ( null _ nameof _ not _ ; ( ( ( ( null ( ( null _ ; ( ( null ( ( ( ( ( _ nameof _ nameof _ not _ ; _ visit"]}, {"before_ctx": "<%> <*> { typeof ( i _ read _ only _ collection < i _ property _ base > ) , ( ) = > new [ ] { property } } , -> { typeof ( i _ read _ only _ list < i _ property _ base > ) , ( ) = > new [ ] { property } } , </%> <%> <+> { typeof ( i _ enumerable < tuple < member _ info , type > > ) , ( ) = > new [ ] { new tuple < member _ info , type > ( property _ info , typeof ( object ) ) } } , { typeof ( member _ info ) , ( ) = > property _ info } , </%> <%> <*> { typeof ( i _ read _ only _ list < system . exception > ) , ( ) = > new [ ] { new exception ( ) } } , { typeof ( i _ property ) , ( ) = > property } -> { typeof ( i _ read _ only _ list < exception > ) , ( ) = > new [ ] { new exception ( ) } } , </%> <%> <+> { typeof ( i _ property ) , ( ) = > property } , { typeof ( i _ navigation ) , ( ) = > navigation } , { typeof ( i _ foreign _ key ) , ( ) = > foreign _ key } </%> ", "before_line": " in _ memory _ test _ helpers . instance . test _ event _ logging ( typeof ( core _ event _ id ) , typeof ( core _ logger _ extensions ) , fake _ factories ) ; ", "after_ctx": " ", "after_line": "test _ event _ logging ( typeof ( core _ event _ id ) , typeof ( core _ logger _ extensions ) , fake _ factories ) ;", "predictions": ["in _ memory _ test _ helpers . instance . test _ event _ logging ( typeof ( core _ logger ) , fake _ factories ) ;"]}, {"before_ctx": " ", "before_line": " new relational _ convention _ set _ builder _ dependencies ( relational _ type _ mapper , null , null ) ) ", "after_ctx": " <%> <*> new core _ convention _ set _ builder _ dependencies ( relational _ type _ mapper , new constructor _ binding _ factory ( ) ) ) -> new core _ convention _ set _ builder _ dependencies ( relational _ type _ mapper , null , null ) ) </%>", "after_line": "new relational _ convention _ set _ builder _ dependencies ( relational _ type _ mapper , null , null , null ) )", "predictions": ["new relational _ convention _ set _ builder _ dependencies , i _ ; column index <%> } ) ."]}, {"before_ctx": "<%> <-> graph _ factory = graph _ factory ; </%> <%> <-> var modification _ command _ graph = graph _ factory . create < modification _ command > ( ) ; </%> ", "before_line": " populate _ modification _ command _ graph ( modification _ command _ graph , commands ) ; var sorted _ command _ sets = modification _ command _ graph . topological _ sort ( ) ; ", "after_ctx": " ", "after_line": "var sorted _ command _ sets = topological _ sort ( commands ) ;", "predictions": ["var sorted _ command _ sets = modification _ , _ ) . _ ) _ sets <-> _ <%> _ if ; _ ( ) . ! _ sort -> <%> {"]}, {"before_ctx": "<%> <*> report -> log </%> ", "before_line": " connection , c = > relational _ strings . using _ connection ( c . database , c . data _ source ) ) ; ", "after_ctx": " ", "after_line": "( ) = > relational _ strings . using _ connection ( connection . database , connection . data _ source ) ) ;", "predictions": ["connection , c = > relational _ strings . using _ c columns 0 ( , ) . <@> _ list ) ( null _ database , ) . method </%> ) from ) . strings _ . ;"]}, {"before_ctx": "<%> <*> report -> log </%> ", "before_line": " connection , c = > relational _ strings . using _ connection ( c . database , c . data _ source ) ) ; ", "after_ctx": " ", "after_line": "( ) = > relational _ strings . using _ connection ( connection . database , connection . data _ source ) ) ;", "predictions": ["connection , c = > relational _ strings . using _ connection ( ( [ [ = , ) _ configuration ) ) ) ) ; _ <+> _ <-> ( . . . = ) > ;"]}, {"before_ctx": "<%> <*> report -> log </%> ", "before_line": " migration , m = > relational _ strings . generating _ down ( m . get _ id ( ) ) ) ; ", "after_ctx": " ", "after_line": "( ) = > relational _ strings . generating _ down ( migration . get _ id ( ) ) ) ;", "predictions": ["migration , m = > relational _ strings ) -> -> -> -> -> ;"]}, {"before_ctx": "<%> <*> report -> log </%> ", "before_line": " migration , m = > relational _ strings . generating _ up ( m . get _ id ( ) ) ) ; ", "after_ctx": " ", "after_line": "( ) = > relational _ strings . generating _ up ( migration . get _ id ( ) ) ) ;", "predictions": ["migration , m = > relational _ strings . generating _ up ( , , , = . <@> ) > return m ) ) ;"]}, {"before_ctx": "<%> <+> i _ enumerable < string > applied _ migration _ entries , string target _ migration , out i _ read _ only _ list < migration > migrations _ to _ apply , out i _ read _ only _ list < migration > migrations _ to _ revert ) { </%> ", "before_line": " e = > string . equals ( e . migration _ id , migration . key , string _ comparison . ordinal _ ignore _ case ) ) ) ", "after_ctx": " <%> <-> i _ read _ only _ list < migration > migrations _ to _ apply ; i _ read _ only _ list < migration > migrations _ to _ revert ; </%>", "after_line": "e = > string . equals ( e , migration . key , string _ comparison . ordinal _ ignore _ case ) ) )", "predictions": ["e = > string . equals ( e c c . ( ( </%> _ element , . key expression expression ) ) i . empty > model . < = </@> ) ) _ override"]}, {"before_ctx": " ", "before_line": " builder . append ( command . command _ text ) ; } builder . append _ line ( sql . batch _ separator ) ; builder . append _ line ( ) ; ", "after_ctx": " <%> <-> var operations = new list < migration _ operation > ( migration . up _ operations ) ; operations . add ( </%>", "after_line": "builder . append _ line ( command . command _ text ) ; } builder . append ( sql . batch _ separator ) ;", "predictions": ["builder . append ( command . command _ foreach ) ) = . factory ) new i _ state state state <-> ( empty . entity member . & ) > < configuration _ STR . service sql ) ) ;"]}, {"before_ctx": "<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ null _ semantics _ model ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " public class null _ semantics _ query _ sqlite _ fixture : null _ semantics _ query _ relational _ fixture < sqlite _ test _ store > ", "after_ctx": " <%> <-> public static readonly string database _ name = STR ; private readonly i _ service _ provider service _ provider ; private readonly string connection _ string = sqlite _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public null _ semantics _ query _ sqlite _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>", "after_line": "public class null _ semantics _ query _ sqlite _ fixture : null _ semantics _ query _ relational _ fixture", "predictions": ["public class null _ semantics _ query _ sqlite _ fixture : null _ query _ query _ relational _ fixture"]}, {"before_ctx": "<%> <-> _ models _ null _ semantics </%> <%> <*> model -> utilities </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public class null _ semantics _ query _ sql _ server _ fixture : null _ semantics _ query _ relational _ fixture < sql _ server _ test _ store > ", "after_ctx": " <%> <-> public static readonly string database _ name = STR ; private readonly db _ context _ options options ; private readonly string connection _ string = sql _ server _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public null _ semantics _ query _ sql _ server _ fixture ( ) { var service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) </%>", "after_line": "public class null _ semantics _ query _ sql _ server _ fixture : null _ semantics _ query _ relational _ fixture", "predictions": ["public class null _ semantics _ query _ sql _ server _ fixture : null _ query _ test _ store < sql _ server _ ; _ name <*>"]}, {"before_ctx": "<%> <-> using system ; </%> <%> <-> _ models _ updates </%> <%> <*> model -> utilities </%> <%> <+> _ entity </%> <%> <*> extensions -> framework </%> <%> <*> dependency -> core </%> <%> <*> injection -> utilities </%> ", "before_line": " public class updates _ in _ memory _ fixture : updates _ fixture _ base < in _ memory _ test _ store > ", "after_ctx": " <%> <-> private readonly i _ service _ provider service _ provider ; private readonly db _ context _ options _ builder options _ builder ; public updates _ in _ memory _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ in _ memory _ database ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . build _ service _ provider ( validate _ scopes : true ) ; options _ builder = new db _ context _ options _ builder ( ) </%>", "after_line": "public class updates _ in _ memory _ fixture : updates _ fixture _ base", "predictions": ["public class updates _ in _ memory _ fixture : updates _ fixture _ base"]}, {"before_ctx": "<%> <-> using system ; </%> <%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; </%> ", "before_line": " public class updates _ sql _ server _ fixture : updates _ fixture _ base < sql _ server _ test _ store > ", "after_ctx": " <%> <*> private readonly -> protected override </%> <%> <*> service -> test </%> <%> <*> provider service -> store </%> <%> <*> provider ; public updates _ sql -> factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; protected override void on </%> <%> <*> server -> model </%> <%> <*> fixture -> creating </%> <%> <*> ) -> model _ builder model _ builder , db _ context context ) </%> <%> <-> service _ provider = new service _ collection ( ) . add _ entity _ framework _ sql _ server ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . build _ service _ provider ( validate _ scopes : true ) ; } protected virtual string database _ name = > STR ; </%>", "after_line": "public class updates _ sql _ server _ fixture : updates _ fixture _ base", "predictions": ["public class updates _ sql _ server _ fixture : updates _ fixture _ base < sql _ server _ test _ store >"]}, {"before_ctx": "<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ updates _ model ; using microsoft _ extensions _ dependency _ injection ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " public class updates _ sqlite _ fixture : updates _ fixture _ base < sqlite _ test _ store > ", "after_ctx": " <%> <-> public static readonly string database _ name = STR ; private readonly i _ service _ provider service _ provider ; private readonly string connection _ string = sqlite _ test _ store . create _ connection _ string ( database _ name ) ; public updates _ sqlite _ fixture ( ) { service _ provider = new service _ collection ( ) . add _ entity _ framework _ sqlite ( ) . add _ singleton ( test _ model _ source . get _ factory ( on _ model _ creating ) ) . build _ service _ provider ( validate _ scopes : true ) ; </%>", "after_line": "public class updates _ sqlite _ fixture : updates _ fixture _ base", "predictions": ["public class updates _ sqlite _ fixture : updates _ fixture _ base"]}, {"before_ctx": " ", "before_line": " using ( var context = new early _ learning _ center ( test _ helpers . create _ service _ provider ( ) ) ) ", "after_ctx": " <%> <+> public void can _ use _ add _ to _ change _ entity _ state ( ) { change _ state _ with _ method ( ( c , e ) = > c . categories . add ( e ) , entity _ state . unknown , entity _ state . added ) ; change _ state _ with _ method ( ( c , e ) = > c . categories . add ( e ) , entity _ state . unchanged , entity _ state . added ) ; </%>", "after_line": "using ( var context = new early _ learning _ center ( ) )", "predictions": ["using ( var context = new early _ learning <%> table </%> index _ -> . . ; using _ learning . = ( ) _ readonly </@> STR"]}, {"before_ctx": "<%> <*> select outer . name ) ; -> select outer . name , </%> <%> <+> ( s , s ) = > from x in ( from in s join in s on . id equals . level _ optional _ id into grouping from in grouping . default _ if _ empty ( ) orderby . id select client _ level ( ) ) . take ( 2 ) join outer in s on x . id equals outer . level _ optional _ id into grouping _ outer from outer in grouping _ outer . default _ if _ empty ( ) select maybe ( outer , ( ) = > outer . name ) ) ; </%> ", "before_line": " conditional _ fact _ skip ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " public virtual dictionary < string , list < fluent _ api _ configuration > > get _ fluent _ api _ configurations ( bool use _ fluent _ api _ only ) ", "after_ctx": " <%> <*> var fluent _ api _ configs _ dictionary = new dictionary < string , list < fluent _ api _ configuration > > ( ) ; var fluent _ api _ configs = use _ fluent _ api _ only -> return use _ fluent _ api _ only </%> <%> <-> : fluent _ api _ configurations . where ( fc = > ! fc . has _ attribute _ equivalent ) ; foreach ( var fluent _ api _ configuration in fluent _ api _ configs ) { var for = fluent _ api _ configuration . for ? ? string . empty ; list < fluent _ api _ configuration > list _ of _ fluent _ api _ method _ bodies ; </%>", "after_line": "public virtual list < fluent _ api _ configuration > get _ fluent _ api _ configurations ( bool use _ fluent _ api _ only )", "predictions": ["public virtual dictionary < string , fluent _ api _ configuration > get _ fluent _ <%> _ . <%>"]}, {"before_ctx": " ", "before_line": " new [ ] { inner _ item _ parameter } ) ) ", "after_ctx": " <%> <-> new [ ] { </%> <%> <-> } </%>", "after_line": "inner _ item _ parameter ) )", "predictions": ["inner _ item _ parameter } )"]}, {"before_ctx": " ", "before_line": " return new typed _ annotation ( ( string ) annotations . get _ annotation ( relational _ annotation _ names . default _ value _ type ) , ( string ) annotations . get _ annotation ( relational _ annotation _ names . default _ value ) ) . value ; ", "after_ctx": " <%> <*> var typed _ annotation = new typed _ annotation ( value ) ; return annotations . set _ annotation ( relational _ annotation _ names . default _ value _ type , typed _ annotation . type _ string ) & & annotations . set _ annotation ( relational _ annotation _ names . default _ value , typed _ annotation . value _ string ) ; -> if ( ( value ! = null ) </%> <%> <+> & & ( property . clr _ type . unwrap _ nullable _ type ( ) ! = value . get _ type ( ) ) ) </%>", "after_line": "return annotations . get _ annotation ( relational _ annotation _ names . default _ value ) ;", "predictions": ["return ( string ) annotations . get _ annotation ( relational _ annotation _ = ( = > ( options ( options STR STR ) , _ ; . get _ server ) ) ;"]}, {"before_ctx": "<%> <-> ( </%> <%> <*> = = -> . equals ( </%> ", "before_line": " & & ( ( ( method _ call _ expression . arguments [ 0 ] as constant _ expression ) ? . value as array ) ? . length = = 0 ) ) ", "after_ctx": " ", "after_line": "& & ( ( method _ call _ expression . arguments [ 0 ] as constant _ expression ) ? . value as array ) ? . length = = 0 )", "predictions": ["& & ( ( ( method _ call </%> -> , constant = model _ < </@> _ . value ) ? ( </%> ( </@> </%> name = <-> . type . </%> ) = STR ; sql -> ) <%> </%> <*> <%> ) <%> </%> _ server ) <%> </%> ) <%> )"]}, {"before_ctx": "<%> <+> = </%> <%> <*> if ( new _ entity _ expression is member _ init _ expression member _ init _ expression ) -> if ( new _ entity _ expression is member _ init _ expression member _ init _ expression </%> <%> <+> & & member _ init _ expression . bindings . single _ or _ default ( mb = > mb . member . name = = property _ name ) is member _ assignment member _ assignment ) </%> ", "before_line": " if ( member _ init _ expression . bindings . single _ or _ default ( mb = > mb . member . name = = property _ name ) is member _ assignment member _ assignment ) { return member _ assignment . expression ; } ", "after_ctx": " ", "after_line": "return member _ assignment . expression ;", "predictions": ["return member _ assignment . expression ;"]}, {"before_ctx": " ", "before_line": " if ( projection _ mapping ! = null ) { foreach ( var kvp in projection _ mapping ) { projection _ mapping [ kvp . key ] = kvp . value ; } ", "after_ctx": " <%> <*> is _ distinct = distinct -> is _ distinct = distinct , </%> <%> <+> set _ operation _ type = set _ operation _ type </%>", "after_line": "foreach ( var kvp in projection _ mapping ) { projection _ mapping [ kvp . key ] = kvp . value ;", "predictions": ["foreach ( var kvp in projection _ mapping = = _ ; = ( equals <@> _ type <*> key <*> <@> default _ <%> _ , list . <-> <%> <%> <+> : ) model store"]}, {"before_ctx": "<%> <*> return -> return ( ( i _ db _ context _ services ) </%> ", "before_line": " new db _ context _ options ( ) . use _ model ( model ) . use _ in _ memory _ store ( ) ) . configuration . scoped _ service _ provider ; ", "after_ctx": " ", "after_line": "new db _ context _ options ( ) . use _ model ( model ) . use _ in _ memory _ store ( ) ) ) . scoped _ service _ provider ;", "predictions": ["new db _ context _ options ( ) ) ) ) ) ) . _ service _ factory only only only add = is _ id . property ;"]}, {"before_ctx": "<%> <*> private -> public </%> <%> <-> func < </%> <%> <-> > </%> ", "before_line": " logger . log ( log _ level . information , ( int ) event _ id , state ( ) , null , ( s , ) = > formatter ( s ) ) ; ", "after_ctx": " ", "after_line": "logger . log ( log _ level . information , ( int ) event _ id , state , null , ( s , ) = > formatter ( s ) ) ;", "predictions": ["logger . log ( log _ level . provider ) _ provider ) ( _ <+> command factory _ , state ) </%> { 1 = index . default ) <%> STR STR"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " var columns = db _ model . tables . single ( ) . columns . order _ by ( c = > c . ordinal ) ; ", "after_ctx": " <%> <-> _ name </%>", "after_line": "var columns = db _ model . tables . single ( ) . columns ;", "predictions": ["var columns = db _ model . tables ( = _ <*> ( . memory _ <-> append _ ; ) ) , , , . <+> _ . _ columns expression ) )"]}, {"before_ctx": "<%> <*> new column _ model { name = STR , store _ type = STR , primary _ key _ ordinal = 1 } , new column _ model { name = STR , store _ type = STR } , new column _ model { name = STR , store _ type = STR } -> , </%> <%> <+> new database _ column { name = STR , store _ type = STR } , new database _ column { name = STR , store _ type = STR } } , primary _ key = new database _ primary _ key { columns = { } </%> <%> <*> index -> database </%> <%> <*> model -> index </%> ", "before_line": " index _ columns = { new index _ column _ model { column = table . columns . element _ at ( 0 ) } } , ", "after_ctx": " <%> <*> index -> database </%> <%> <*> model -> index </%> <%> <-> index _ </%> <%> <-> new index _ column _ model { column = </%> <%> <-> } </%>", "after_line": "columns = { table . columns . element _ at ( 0 ) } ,", "predictions": ["index _ columns = { new index _ column _ model { column = table . columns readonly -> _ utilities : connection service service test _ = <%> ;"]}, {"before_ctx": "<%> <*> index -> database </%> <%> <*> model -> index </%> <%> <-> index _ </%> <%> <-> new index _ column _ model { column = </%> <%> <-> } </%> <%> <*> index -> database </%> <%> <*> model -> index </%> ", "before_line": " index _ columns = { new index _ column _ model { column = table . columns . element _ at ( 1 ) } } , ", "after_ctx": " <%> <*> index -> database </%> <%> <*> model -> index </%> <%> <-> index _ </%> <%> <-> new index _ column _ model { column = </%> <%> <-> } </%> <%> <-> new index _ column _ model { column = </%> <%> <-> } </%>", "after_line": "columns = { table . columns . element _ at ( 1 ) } ,", "predictions": ["index _ columns = { new index _ } </%> column index <-> , single if ;"]}, {"before_ctx": "<%> <*> new column _ model { name = STR , store _ type = STR , is _ nullable = true } } -> new database _ column { name = STR , store _ type = STR , is _ nullable = true } </%> <%> <+> } , primary _ key = id _ primary _ key </%> <%> <*> index -> database </%> <%> <*> model -> index </%> ", "before_line": " index _ columns = { new index _ column _ model { column = table . columns . element _ at ( 1 ) } } , ", "after_ctx": " <%> <+> database _ </%> <%> <-> _ model </%> <%> <-> columns = { new foreign _ key _ column _ model </%>", "after_line": "columns = { table . columns . element _ at ( 1 ) } ,", "predictions": ["index _ columns = { new index _ id _ s from id } table _ -> assert use use _ attribute private readonly builder } {"]}, {"before_ctx": " ", "before_line": " indexes . order _ by ( i = > i . name ) , ", "after_ctx": " <%> <+> assert . equal ( new list < string > { STR , STR } , index . columns . select ( ic = > ic . name ) . to _ list ( ) ) ; </%> <%> <*> assert . equal ( new list < string > { STR , STR } , index . index _ columns . select ( ic = > ic . column . name ) . to _ list ( ) -> } </%> <%> <-> assert . equal ( new list < int > { 0 , 1 </%> <%> <*> , index . index _ columns . select ( ic = > ic . ordinal ) . to _ list ( ) ) ; } , pk -> fact public void it </%> <%> <*> index = > -> reads _ primary _ key ( ) </%>", "after_line": "indexes ,", "predictions": ["order _ by ( i = > i . name ) ,"]}, {"before_ctx": " ", "before_line": " var columns = db _ model . tables . single ( ) . columns . order _ by ( c = > c . ordinal ) ; ", "after_ctx": " <%> <-> assert . equal ( 1 , id . primary _ key _ ordinal ) ; </%> <%> <-> assert . equal ( 0 , id . ordinal ) ; </%>", "after_line": "var columns = db _ model . tables . single ( ) . columns ;", "predictions": ["var columns = db _ model . tables . single ( c = > c _ ; _ ;"]}, {"before_ctx": "<%> <*> if ( foreign _ key _ expression = = null ) { return new one _ to _ one _ builder ( inverting ? builder . foreign _ key ( new property _ info [ 0 ] ) : builder ) ; } return new one _ to _ one _ builder ( builder . foreign _ key ( foreign _ key _ expression . get _ property _ access _ list ( ) ) ) ; -> return new one _ to _ one _ builder ( builder . foreign _ key ( foreign _ key _ expression . get _ property _ access _ list ( ) ) ) ; </%> <%> <*> can _ be -> not </%> <%> <-> = null </%> <%> <+> check . not _ null ( key _ expression , STR ) ; </%> ", "before_line": " return new one _ to _ one _ builder ( builder . referenced _ key ( key _ expression ! = null ? key _ expression . get _ property _ access _ list ( ) : new property _ info [ 0 ] ) ) ; ", "after_ctx": " ", "after_line": "return new one _ to _ one _ builder ( builder . referenced _ key ( key _ expression . get _ property _ access _ list ( ) ) ) ;", "predictions": ["return new one _ to _ one _ builder ( builder . referenced _ key ( key _ expression . get _ property _ access _ list ( ) : new property _ info [ 0 ] ( = get _ get _ access _ -> ? ? = get _ null _ <%> _ </%> ? ? get _ ) ( metadata get _ get _ access _ -> ? ? ( ( get _ is _ access ( ( ( ( get _ get key _ is _ -> ? get _ </%> configuration ( ( ( )"]}, {"before_ctx": " ", "before_line": " assert . null ( model . remove _ entity _ type ( new entity _ type ( typeof ( customer ) , model ) ) ) ; ", "after_ctx": " <%> <+> get _ </%> <%> <+> ( ) </%> <%> <+> _ type . clr </%> <%> <+> _ type . clr </%>", "after_line": "assert . null ( model . remove _ entity _ type ( typeof ( customer ) ) ) ;", "predictions": ["assert . null ( model . remove _ entity _ type ( new entity _ > ? ? ? ? new i _ > ? ? typeof ? get _ </%> _ class <+> <@> <+> connection _ sql , command , : : : : : : : : return ) ) ) <%> <%> ; get _ false ( -> ? -> _ is ? typeof ? ) ; ( <%> ( <%> ( <%> ( customer ( customer ( customer ( customer ( customer ( customer ( customer ( customer ( customer ( customer ( customer ("]}, {"before_ctx": "<%> <+> get _ </%> <%> <+> ( ) </%> <%> <+> _ type . clr </%> <%> <+> _ type . clr </%> ", "before_line": " assert . null ( model . remove _ entity _ type ( new entity _ type ( typeof ( customer ) . full _ name , model ) ) ) ; ", "after_ctx": " <%> <+> get _ </%> <%> <+> ( ) </%> <%> <+> . name </%> <%> <+> . name </%>", "after_line": "assert . null ( model . remove _ entity _ type ( typeof ( customer ) . full _ name ) ) ;", "predictions": ["assert . null ( model . remove _ entity _ type ( new entity _ type ( typeof ( customer ) . full _ = test test test logger -> -> -> properties properties properties properties ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; ; _ is ) ;"]}, {"before_ctx": "<%> <+> . name </%> ", "before_line": " assert . null ( model . remove _ entity _ type ( new entity _ type ( typeof ( customer ) . full _ name , model ) ) ) ; ", "after_ctx": " <%> <-> entity _ type ( new </%> <%> <-> ) , model </%>", "after_line": "assert . null ( model . remove _ entity _ type ( typeof ( customer ) . full _ name ) ) ;", "predictions": ["assert . null ( model . remove _ entity _ type ( new entity _ <-> . db . <@> </%> </%> ( </@> ? full ? model ? ? full ? ( class c c </%> remove <%> <+> <+> <+> _ get </%> , <+> <+> <+> <+> not null not null not not ? new ? ? source ? ) ) ? ? get ( is ( <%> ? ? <*> ( <%> ? <*> _ metadata false is <*> ? ? <*> ? ? ? ? ? ? ? ? remove ) ? <*> ( new"]}, {"before_ctx": "<%> <-> entity _ type ( new </%> <%> <-> , model ) </%> ", "before_line": " assert . null ( model . remove _ entity _ type ( new entity _ type ( typeof ( customer ) , model ) ) ) ; ", "after_ctx": " ", "after_line": "assert . null ( model . remove _ entity _ type ( typeof ( customer ) ) ) ;", "predictions": ["assert . null ( model . remove _ entity _ type ( new entity _ ? = typeof ( assert ) _ </%> ) ( assert . 1 < ) ? ? type ? ? type ( 2 ( = _ 2 ( [ _ 2 ( [ _ 2 <%> -> _ level <%> , </%> ( return ( return ( return ( return ( return ( return ( return ( return ( return ( return ? ? get ( </%> ? _ _ configuration _ typeof ? ? get ( get ( </%> ? . ) ? ?"]}, {"before_ctx": "<%> <-> , old _ value , new _ value </%> <%> <*> , object old _ value , object new _ value ) -> ) </%> ", "before_line": " var navigations = model . get _ navigations ( foreign _ key ) . to _ list ( ) ; ", "after_ctx": " ", "after_line": "var navigations = foreign _ key . get _ navigations ( ) . to _ list ( ) ;", "predictions": ["var navigations = model . get _ navigations ( foreign _ key ) ;"]}, {"before_ctx": " ", "before_line": " assert . null ( entity _ type . remove _ key ( new key ( new [ ] { id _ property } ) ) ) ; ", "after_ctx": " <%> <+> . properties </%> <%> <+> . properties </%> <%> <-> key ( new </%> <%> <-> ) </%>", "after_line": "assert . null ( entity _ type . remove _ key ( new [ ] { id _ property } ) ) ;", "predictions": ["assert . null ( entity _ type . remove _ key ( new key ( entity key { id </%> null } ) ) ? <+> ;"]}, {"before_ctx": "<%> <-> key ( new </%> <%> <-> ) </%> <%> <+> . properties </%> <%> <+> . properties </%> ", "before_line": " assert . same ( key , entity _ type . remove _ key ( new key ( new [ ] { id _ property } ) ) ) ; ", "after_ctx": " ", "after_line": "assert . same ( key , entity _ type . remove _ key ( new [ ] { id _ property } ) ) ;", "predictions": ["assert . same ( key , entity _ type . remove _ key ( new assert assert { { </%> remove } ( null } ? <-> < new ? ? id = ] parameter expression . , ) . , . instance ) . instance ) <%> <%> <%> configuration ? id ( source properties ( is <%> <@> ? id source ? ? key key ? id source source source ) ? ) metadata"]}, {"before_ctx": " ", "before_line": " principal _ entity _ type _ builder = principal _ entity _ type _ builder ? ? ( old _ relationship _ inverted ", "after_ctx": " <%> <*> dependent _ entity _ type _ builder = dependent _ entity _ type _ builder ? ? ( old _ relationship _ inverted -> dependent _ entity _ type _ builder ? ? = ( old _ relationship _ inverted </%>", "after_line": "principal _ entity _ type _ builder ? ? = ( old _ relationship _ inverted", "predictions": ["principal _ entity _ type _ builder = principal _ relationship _ inverted"]}, {"before_ctx": "<%> <*> principal _ entity _ type _ builder = principal _ entity _ type _ builder ? ? ( old _ relationship _ inverted -> principal _ entity _ type _ builder ? ? = ( old _ relationship _ inverted </%> ", "before_line": " dependent _ entity _ type _ builder = dependent _ entity _ type _ builder ? ? ( old _ relationship _ inverted ", "after_ctx": " ", "after_line": "dependent _ entity _ type _ builder ? ? = ( old _ relationship _ inverted", "predictions": ["dependent _ entity _ type _ builder = dependent _ relationship _ inverted"]}, {"before_ctx": " ", "before_line": " dependent _ properties = dependent _ properties ? ? ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) ", "after_ctx": " <%> <*> principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> principal _ properties ? ? = ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <-> is _ unique = is _ unique ? ? </%>", "after_line": "dependent _ properties ? ? = ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )", "predictions": ["dependent _ properties = dependent _ properties ? ? ( ( metadata . get _ properties _ configuration _ source ( ) ? ? false ) )"]}, {"before_ctx": "<%> <*> dependent _ properties = dependent _ properties ? ? ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> dependent _ properties ? ? = ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> ", "before_line": " principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) ", "after_ctx": " <%> <*> is _ unique = is _ unique ? ? ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ unique ? ? = ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <-> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%>", "after_line": "principal _ properties ? ? = ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )", "predictions": ["principal _ properties = principal _ properties ? ? ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )"]}, {"before_ctx": "<%> <*> dependent _ properties = dependent _ properties ? ? ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> dependent _ properties ? ? = ( ( metadata . get _ properties _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> principal _ properties ? ? = ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> ", "before_line": " is _ unique = is _ unique ? ? ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) ", "after_ctx": " <%> <*> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ required ? ? = ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ ownership ? ? = ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%>", "after_line": "is _ unique ? ? = ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )", "predictions": ["is _ unique = is _ unique ? ? ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )"]}, {"before_ctx": "<%> <*> principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> principal _ properties ? ? = ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ unique = is _ unique ? ? ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ unique ? ? = ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> ", "before_line": " is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) ", "after_ctx": " <%> <*> is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ ownership ? ? = ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <-> delete _ behavior = delete _ behavior ? ? ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%>", "after_line": "is _ required ? ? = ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )", "predictions": ["is _ required = is _ required ? ? ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )"]}, {"before_ctx": "<%> <*> principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> principal _ properties ? ? = ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ unique = is _ unique ? ? ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ unique ? ? = ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ required ? ? = ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> ", "before_line": " is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) ", "after_ctx": " <%> <*> delete _ behavior = delete _ behavior ? ? ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> delete _ behavior ? ? = ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <-> principal _ end _ configuration _ source = principal _ end _ configuration _ source ? ? ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . metadata </%>", "after_line": "is _ ownership ? ? = ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )", "predictions": ["is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? ? false ) ? ? false )"]}, {"before_ctx": "<%> <*> is _ unique = is _ unique ? ? ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ unique ? ? = ( ( metadata . get _ is _ unique _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ required ? ? = ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ ownership ? ? = ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> ", "before_line": " delete _ behavior = delete _ behavior ? ? ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) ", "after_ctx": " <%> <*> principal _ end _ configuration _ source = principal _ end _ configuration _ source ? ? ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . metadata -> principal _ end _ configuration _ source ? ? = ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . metadata </%>", "after_line": "delete _ behavior ? ? = ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )", "predictions": ["delete _ behavior = delete _ behavior ? ? ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false )"]}, {"before_ctx": "<%> <*> is _ required = is _ required ? ? ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ required ? ? = ( ( metadata . get _ is _ required _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> is _ ownership = is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> is _ ownership ? ? = ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> <%> <*> delete _ behavior = delete _ behavior ? ? ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) -> delete _ behavior ? ? = ( ( metadata . get _ delete _ behavior _ configuration _ source ( ) ? . overrides ( configuration _ source ) ? ? false ) </%> ", "before_line": " principal _ end _ configuration _ source = principal _ end _ configuration _ source ? ? ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . metadata ", "after_ctx": " ", "after_line": "principal _ end _ configuration _ source ? ? = ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . metadata", "predictions": ["principal _ end _ configuration _ source = principal _ end _ configuration _ source ? ? ( principal _ entity _ type _ builder . metadata ! = dependent _ entity _ type _ builder . false </@> = dependent _ key _ <-> _ properties . false"]}, {"before_ctx": " ", "before_line": " suppliers = suppliers ? ? new observable _ collection < i _ supplier > ( ) ; ", "after_ctx": " <%> <-> reviews = </%> <%> <+> = </%> <%> <-> photos = </%> <%> <+> = </%> <%> <-> barcodes = </%> <%> <+> = </%>", "after_line": "suppliers ? ? = new observable _ collection < i _ supplier > ( ) ;", "predictions": ["suppliers ? ? = new observable _ collection < i _ supplier > ( ) object ;"]}, {"before_ctx": "<%> <-> suppliers = </%> <%> <+> = </%> ", "before_line": " reviews = reviews ? ? new observable _ collection < i _ product _ review > ( ) ; photos = photos ? ? new observable _ collection < i _ product _ photo > ( ) ; barcodes = barcodes ? ? new observable _ collection < i _ barcode > ( ) ; ", "after_ctx": " ", "after_line": "reviews ? ? = new observable _ collection < i _ product _ review > ( ) ; photos ? ? = new observable _ collection < i _ product _ photo > ( ) ; barcodes ? ? = new observable _ collection < i _ barcode > ( ) ;", "predictions": ["reviews ? ? = new observable _ collection < i _ product _ review > entity ( type type type type type type type c ( = , get <%> ) type ( , factory <%> ? false configuration . <%> configuration . <%> configuration configuration configuration configuration properties"]}, {"before_ctx": " ", "before_line": " suppliers = suppliers ? ? new observable _ collection < i _ supplier > ( ) ; ", "after_ctx": " <%> <-> reviews = </%> <%> <+> = </%> <%> <-> photos = </%> <%> <+> = </%> <%> <-> barcodes = </%> <%> <+> = </%>", "after_line": "suppliers ? ? = new observable _ collection < i _ supplier > ( ) ;", "predictions": ["suppliers ? ? = new observable _ collection < i _ supplier > ( ) properties ;"]}, {"before_ctx": "<%> <-> suppliers = </%> <%> <+> = </%> ", "before_line": " reviews = reviews ? ? new observable _ collection < i _ product _ review > ( ) ; photos = photos ? ? new observable _ collection < i _ product _ photo > ( ) ; barcodes = barcodes ? ? new observable _ collection < i _ barcode > ( ) ; ", "after_ctx": " ", "after_line": "reviews ? ? = new observable _ collection < i _ product _ review > ( ) ; photos ? ? = new observable _ collection < i _ product _ photo > ( ) ; barcodes ? ? = new observable _ collection < i _ barcode > ( ) ;", "predictions": ["reviews ? ? = new observable _ collection < i _ product _ review > entity ( type type type type type type type ) ; ( 1 . -> -> . get _ : > logger = log <%> <%> ( , factory _ model . factory . ) . barcodes is . get _ <%> is false is . metadata is false is false is false is false is false is false is false is metadata is metadata is metadata is metadata is metadata is metadata is metadata is metadata is metadata is metadata is metadata is metadata"]}, {"before_ctx": " ", "before_line": " fact _ skip ", "after_ctx": " <%> <-> _ skip </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip </%> ", "before_line": " fact _ skip ", "after_ctx": " <%> <+> _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " class _ name = c _ sharp _ utilities . instance . generate _ c _ sharp _ identifier ( builder . initial _ catalog , null ) ; if ( class _ name ! = null ) ", "after_ctx": " <%> <*> class -> c </%> <%> <*> name ; -> sharp _ utilities . instance . generate _ c _ sharp _ identifier ( builder . initial _ catalog , null ) ; </%>", "after_line": "if ( builder . initial _ catalog ! = null )", "predictions": ["class _ name = instance . generate _ c _ sharp _ identifier ( builder . initial _ catalog , null ) ; if . . . name ? use >"]}, {"before_ctx": "<%> <+> : i _ migrations _ code _ generator </%> <%> <+> public migrations _ code _ generator ( [ not _ null ] migrations _ code _ generator _ dependencies dependencies ) { check . not _ null ( dependencies , nameof ( dependencies ) ) ; dependencies = dependencies ; } </%> <%> <+> protected virtual migrations _ code _ generator _ dependencies dependencies { get ; } </%> ", "before_line": " not _ null string migration _ namespace , not _ null string migration _ name , not _ null i _ read _ only _ list < migration _ operation > up _ operations , not _ null i _ read _ only _ list < migration _ operation > down _ operations ) ; ", "after_ctx": " <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%> <%> <-> not _ null </%>", "after_line": "string migration _ namespace , string migration _ name , i _ read _ only _ list < migration _ operation > up _ operations , i _ read _ only _ list < migration _ operation > down _ operations ) ;", "predictions": ["not _ null i _ read _ only _ list < migration _ operation > up _ operations , not _ null i _ read _ only _ list < migration _ operation > up _ 0 , _ 0 _ ) new <%> _ -> access _ : expression false false false false ;"]}, {"before_ctx": " ", "before_line": " . where ( mi = > mi . get _ parameters ( ) . length = = 2 ) . where ( mi = > mi . get _ parameters ( ) [ 1 ] . parameter _ type = = typeof ( cancellation _ token ) ) ", "after_ctx": " <%> <+> _ async </%> <%> <+> } public virtual expression adjust _ sequence _ type ( expression expression ) { </%>", "after_line": ". where ( mi = > mi . get _ parameters ( ) . length = = 2 & & mi . get _ parameters ( ) [ 1 ] . parameter _ type = = typeof ( cancellation _ token ) )", "predictions": [". where ( mi = > mi . get _ parameters ( ) . length = = 2 )"]}, {"before_ctx": " ", "before_line": " = > test _ environment . is _ sql _ azure ? new test _ sql _ server _ retrying _ execution _ strategy ( ) . execute ( ", "after_ctx": " <%> <-> state = > execute _ command ( state . connection , state . execute , state . sql , state . use _ transaction , state . parameters ) ) : execute _ command ( connection , execute , sql , use _ transaction , parameters ) ; </%>", "after_line": "= > new test _ sql _ server _ retrying _ execution _ strategy ( ) . execute (", "predictions": ["= > new test _ sql _ server _ retrying _ execution _ strategy ( ) . execute ("]}, {"before_ctx": "<%> <+> list _ logger _ factory . clear ( ) ; </%> ", "before_line": " new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) , ", "after_ctx": " ", "after_line": "list _ logger _ factory ,", "predictions": ["new list _ logger _ factory ( log , l = > l = = db ? collection </%> </%> db , ,"]}, {"before_ctx": "<%> <+> list _ logger _ factory . clear ( ) ; </%> ", "before_line": " new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) , ", "after_ctx": " <%> <-> < ( log </%> <%> <*> level level , event -> logger _ factory list </%> <%> <*> id id , string message ) > log -> logger _ factory </%> <%> <*> < -> _ logger _ factory </%> <%> <*> log _ level , event -> l = > l = = db </%> <%> <*> id , string ) > ( -> logger _ category . model . name </%>", "after_line": "list _ logger _ factory ,", "predictions": ["new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) ,"]}, {"before_ctx": "<%> <*> < -> _ logger _ factory </%> <%> <*> log _ level , event -> l = > l = = db </%> <%> <*> id , string ) > ( -> logger _ category . model . name </%> ", "before_line": " new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) , ", "after_ctx": " ", "after_line": "list _ logger _ factory ,", "predictions": ["new list _ logger _ factory ( log , l = > l = = db _ logger _ category . = sql sql _ ( test <%> <%> log _ = _ category logger > logger > ,"]}, {"before_ctx": "<%> <-> < ( log </%> <%> <*> level level , event -> logger _ factory list </%> <%> <*> id id , string message ) > log -> logger _ factory </%> <%> <*> < -> _ logger _ factory </%> <%> <*> log _ level , event -> l = > l = = db </%> <%> <*> id , string ) > ( -> logger _ category . model . name </%> <%> <+> list _ logger _ factory . clear ( ) ; </%> ", "before_line": " new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) , ", "after_ctx": " ", "after_line": "list _ logger _ factory ,", "predictions": ["new list _ logger _ factory ( log , l = > l = = db _ logger _ category . model . name ) ,"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " <%> <-> test _ sql _ logger _ factory . reset ( ) ; </%>", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <*> public void log < t _ state > ( log _ level log _ level , event _ id event _ id , t _ state state , exception exception , func < t _ state , exception , string > formatter ) -> void i _ logger . log < t _ state > ( </%> <%> <+> log _ level log _ level , event _ id event _ id , t _ state state , exception exception , func < t _ state , exception , string > formatter ) </%> <%> <*> if -> lock </%> <%> <*> format ! = null -> sync </%> <%> <*> var sql _ logger _ data = sql _ logger _ data ; lock ( sql _ logger _ data ) -> if ( format ! = null ) </%> <%> <-> sql _ logger _ data . </%> ", "before_line": " sql _ logger _ data . cancellation _ token _ source . cancel ( ) ; sql _ logger _ data . cancellation _ token _ source = null ; ", "after_ctx": " <%> <*> eol -> new _ line </%>", "after_line": "cancellation _ token _ source . cancel ( ) ; cancellation _ token _ source = null ;", "predictions": ["sql _ logger _ data . cancellation _ token _ source . cancel ( ) ; sql _ logger _ data . cancellation _ token _ source = null ;"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": " ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " <%> <*> public -> protected </%>", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory )", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) )"]}, {"before_ctx": "<%> <+> public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; </%> ", "before_line": " . add _ singleton < i _ logger _ factory > ( new test _ sql _ logger _ factory ( ) ) . build _ service _ provider ( ) ; ", "after_ctx": " ", "after_line": ". add _ singleton < i _ logger _ factory > ( test _ sql _ logger _ factory ) . build _ service _ provider ( ) ;", "predictions": [". add _ singleton ( new test _ sql _ logger _ factory ( ) ) . build _ service _ event . . ) <%> ) ;"]}, {"before_ctx": "<%> <*> inner join -> where exists </%> <%> <*> distinct [ c ] . [ customer _ id ] -> 1 </%> <%> <*> ) as [ ] on -> where </%> <%> <+> c </%> <%> <+> ) </%> <%> <+> o </%> ", "before_line": " select distinct [ ] . [ customer _ id ] , [ o ] . [ order _ id ] ", "after_ctx": " <%> <*> inner join -> where exists </%> <%> <*> distinct [ c ] . [ customer _ id ] -> 1 </%> <%> <*> ) as [ ] on -> where </%> <%> <+> c </%> <%> <+> ) </%>", "after_line": "select distinct [ o ] . [ customer _ id ] , [ o ] . [ order _ id ]", "predictions": ["select distinct [ ] . [ customer _ id ] , [ o ] . [ order _ id ]"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip ", "after_ctx": " <%> <*> true -> false </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip ", "after_ctx": " <%> <*> = = -> . equals ( </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip"]}, {"before_ctx": "<%> <*> { var property = property _ base as i _ property ; return ( property = = null ) | | ! property . is _ shadow _ property -> = > ! property _ base . is _ shadow _ property </%> <%> <*> : shadow _ values [ property . get _ shadow _ index ( ) ] ; } -> : shadow _ values [ property _ base . get _ shadow _ index ( ) ] ; </%> ", "before_line": " var property = property _ base as i _ property ; if ( ( property = = null ) | | ! property . is _ shadow _ property ) ", "after_ctx": " <%> <+> _ base </%>", "after_line": "if ( ! property _ base . is _ shadow _ property )", "predictions": ["var property = property _ base as i _ property ; if ( ( property = = null ) | | ! property . is _ shadow _ property )"]}, {"before_ctx": " ", "before_line": " predicate = bind _ operand ( expression ) ; return expression ; ", "after_ctx": " <%> <*> predicate = null ; return expression ; -> return null ; </%> <%> <-> predicate = null ; </%>", "after_line": "return bind _ operand ( expression ) ;", "predictions": ["return bind _ operand ( expression ) ;"]}, {"before_ctx": " ", "before_line": " protected test _ model _ builder create _ model _ builder ( ) = > create _ model _ builder ( new model ( ) ) ; protected virtual test _ model _ builder create _ model _ builder ( model model ) = > create _ test _ model _ builder ( test _ helpers . instance . create _ convention _ builder ( model ) ) ; ", "after_ctx": " <%> <-> new model ( ) </%>", "after_line": "protected virtual test _ model _ builder create _ model _ builder ( ) = > create _ test _ model _ builder ( test _ helpers . instance . create _ convention _ builder ( ) ) ;", "predictions": ["protected test _ model _ builder create _ model _ builder ( ) = > . . . . . . . . . name <%> _ . _ type annotations builder builder entity . create </%> ;"]}, {"before_ctx": "<%> <*> protected test _ model _ builder create _ model _ builder ( ) = > create _ model _ builder ( new model ( ) ) ; protected virtual test _ model _ builder create _ model _ builder ( model model ) = > create _ test _ model _ builder ( test _ helpers . instance . create _ convention _ builder ( model ) ) ; -> protected virtual test _ model _ builder create _ model _ builder ( ) </%> <%> <+> = > create _ test _ model _ builder ( test _ helpers . instance . create _ convention _ builder ( ) ) ; </%> ", "before_line": " var builder = create _ model _ builder ( new model ( ) ) ; ", "after_ctx": " ", "after_line": "var builder = create _ model _ builder ( ) ;", "predictions": ["var builder = create _ model _ builder ( new model ) ;"]}, {"before_ctx": " ", "before_line": " var id _ property = ( i _ property ) entity _ type _ extensions . find _ property ( ( i _ entity _ type ) entity , customer . id _ property ) ; ", "after_ctx": " <%> <+> _ builder </%> <%> <*> new -> create _ </%> <%> <+> _ builder </%> <%> <-> _ builder </%> <%> <-> create _ </%> <%> <*> ( -> . </%> <%> <-> ) </%>", "after_line": "var id _ property = ( i _ property ) entity . find _ property ( customer . id _ property ) ;", "predictions": ["var id _ property = ( i _ property ) entity _ type _ extensions </%> _ <-> = </%> </%> . </@> _ create virtual </@> ) virtual"]}, {"before_ctx": "<%> <+> _ builder </%> <%> <*> new -> create _ </%> <%> <+> _ builder </%> <%> <-> _ builder </%> <%> <-> create _ </%> <%> <*> ( -> . </%> <%> <-> ) </%> ", "before_line": " var model _ builder = create _ model _ builder ( new model ( ) ) ; ", "after_ctx": " ", "after_line": "var model _ builder = create _ model _ builder ( ) ;", "predictions": ["var model _ builder = create _ model _ builder ( new model ) ;"]}, {"before_ctx": "<%> <-> model model = null </%> ", "before_line": " return new model _ builder ( convention _ set , model ? ? new model ( ) ) ; ", "after_ctx": " ", "after_line": "return new model _ builder ( convention _ set ) ;", "predictions": ["return new model _ builder ( convention _ set server server server ? _ server <*> . _ _ _ </%> </%> </%> </%> . </@> . . _ builder . : . _ builder . . _ builder . ;"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ metadata ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ metadata _ tests ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ tests _ metadata", "predictions": ["namespace microsoft _ entity _ framework _ core _ = model"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ metadata ; using microsoft _ entity _ framework _ core _ metadata _ conventions ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ metadata _ conventions _ tests ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ tests _ metadata _ conventions", "predictions": ["namespace microsoft _ entity _ framework _ core _ metadata _ conventions _ tests"]}, {"before_ctx": " ", "before_line": " using microsoft _ entity _ framework _ core _ metadata _ conventions _ tests ; ", "after_ctx": " <%> <+> _ tests </%> <%> <-> _ tests </%>", "after_line": "using microsoft _ entity _ framework _ core _ tests _ metadata _ conventions ;", "predictions": ["using microsoft _ entity _ framework _ core _ </%> _ </%> model ; _ <%> operation _ , operation _ , operation _ <%> _ , )"]}, {"before_ctx": "<%> <*> metadata -> tests </%> <%> <*> conventions -> metadata </%> <%> <*> tests -> conventions </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ sql _ server _ metadata _ conventions _ tests ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ sql _ server _ tests _ metadata _ conventions", "predictions": ["namespace microsoft _ entity _ framework _ core _ conventions _ conventions"]}, {"before_ctx": "<%> <-> , bool unicode = true </%> ", "before_line": " ? ( unicode ? nvarcharmax : varcharmax ) ", "after_ctx": " <%> <-> , unicode </%> <%> <-> , bool unicode = true </%> <%> <-> ? ( unicode </%>", "after_line": "? nvarcharmax", "predictions": ["? varcharmax : varcharmax )"]}, {"before_ctx": " ", "before_line": " if ( entity _ type ? . query _ filter ! = null ) ", "after_ctx": " <%> <+> expression new _ expression = constant _ expression ; if ( entity _ type . is _ query _ type ( ) ) { is _ view _ type _ query = true ; var annotation = entity _ type . find _ annotation ( core _ annotation _ names . defining _ query ) ; if ( annotation ! = null ) { var query = ( lambda _ expression ) annotation . value ; var parameterized _ query </%>", "after_line": "if ( entity _ type ! = null )", "predictions": ["if ( entity _ type . query _ filter ! = null )"]}, {"before_ctx": "<%> <*> var entity _ type = new relational _ entity _ type _ annotations ( key . declaring _ entity _ type , annotations . provider _ prefix ) ; return get _ default _ key _ name ( entity _ type . table _ name , key . is _ primary _ key ( ) , key . properties . select ( p = > p . name ) ) ; -> return get _ default _ key _ name ( </%> <%> <+> get _ annotations ( key . declaring _ entity _ type ) . table _ name , key . is _ primary _ key ( ) , key . properties . select ( p = > p . name ) ) ; </%> ", "before_line": " builder . append ( primary _ key ? STR : STR ) . append ( table _ name ) ; if ( ! primary _ key ) ", "after_ctx": " <%> <+> . append ( default _ primary _ key _ name _ prefix ) </%> <%> <*> . append ( string . join ( STR , property _ names ) ) ; -> . append ( table _ name ) ; </%> <%> <+> } else { builder </%>", "after_line": "if ( primary _ key )", "predictions": ["builder . append ( table _ name ) . append ( table _ name ) ; if ( ! primary _ key )"]}, {"before_ctx": "<%> <*> public discriminator _ builder ( [ not _ null ] relational _ entity _ type _ builder _ annotations annotations _ builder ) -> public discriminator _ builder ( [ not _ null ] relational _ annotations _ builder annotations _ builder , </%> <%> <+> not _ null func < internal _ entity _ type _ builder , relational _ entity _ type _ builder _ annotations > get _ relational _ entity _ type _ builder _ annotations ) </%> <%> <+> get _ relational _ entity _ type _ builder _ annotations = get _ relational _ entity _ type _ builder _ annotations ; </%> <%> <*> protected virtual relational _ entity _ type _ builder _ annotations annotations _ builder { get ; } -> private func < internal _ entity _ type _ builder , relational _ entity _ type _ builder _ annotations > get _ relational _ entity _ type _ builder _ annotations { get ; } </%> <%> <+> protected virtual relational _ annotations _ builder annotations _ builder { get ; } protected virtual internal _ entity _ type _ builder entity _ type _ builder = > ( internal _ entity _ type _ builder ) annotations _ builder . metadata _ builder ; </%> ", "before_line": " = > has _ value ( annotations _ builder . entity _ type _ builder , value ) ; ", "after_ctx": " <%> <-> annotations _ builder . </%> <%> <-> . annotations </%> <%> <-> annotations _ builder . </%> <%> <-> . annotations </%>", "after_line": "= > has _ value ( entity _ type _ builder , value ) ;", "predictions": ["= > has _ value ( annotations _ builder . entity _ type _ builder , value ) ;"]}, {"before_ctx": "<%> <-> annotations _ builder . </%> <%> <-> . annotations </%> <%> <-> annotations _ builder . </%> <%> <-> . annotations </%> ", "before_line": " var base _ entity _ type _ builder = annotations _ builder . entity _ type _ builder ; ", "after_ctx": " <%> <-> . annotations </%> <%> <-> var annotations _ builder = base _ entity _ type _ builder = = entity _ type _ builder ? annotations _ builder : new relational _ entity _ type _ builder _ annotations ( </%>", "after_line": "var base _ entity _ type _ builder = entity _ type _ builder ;", "predictions": ["var base _ entity _ type _ builder = annotations _ builder . entity _ ; _ model ;"]}, {"before_ctx": " ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new create _ database _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new create _ database _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ( new create _ database _ ) ( <-> <-> _ sql _ sql <-> true . sql . generate ( _ new _ sql <-> true . sql </%> protected test _ = _ ; ( true _ virtual _ builder var annotations annotations generate _ <@> _ ( if constant ) ) var var var var _ . _ model _ ) <%> <%> builder builder <%> protected <@> builder _ model _ . builder"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ database _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new drop _ database _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ( new add _ STR _ operation ( <@> ) column _ idempotent _ sql : : : _ key _ sql : true _ key _ sql i true query constant query ( ( </@> query constant _ . query _ . _ . ) ) ) ; ; _ <+> _ model : ) ; ;"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new create _ sequence _ operation ( new sequence ( STR ) ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new create _ sequence _ operation ( new sequence ( STR ) ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ( new virtual create _ <-> _ builder create <%> create _ is _ query . </%> create create sequence _ ) create create _ model <+> <+> annotations <+> annotations annotations annotations annotations ) <+> <+> annotations {"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ sequence _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " ", "after_line": "generate ( new drop _ sequence _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ sequence _ ( ( . STR . sql _ , _ sql <-> true . sql . sql . sql _ , _ ( ( </%> true </%> . <%> _ sequence _ ) <*> true ( STR _ instance _ builder var var annotations annotations </%> annotations true _ idempotent _ builder var true ) = constant ) var ) var var var var var ) var ) var ) var constant _ <*> _ model _ ) <%> test _ <*>"]}, {"before_ctx": " ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["sql _ server _ migration _ operation _ sql ; </@> </%> ="]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ table _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new drop _ table _ operation ( STR ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ( new column _ new _ operation ( <@> ) STR </%> ) : new ) : sql ) : sql ) : sql ) : sql ) ,"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new rename _ table _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new rename _ table _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ( new create _ table _ table server new new create _ ) ; <-> _ idempotent _ builder </@> true _ builder <%> true _ </%> _ ( : <@> ) instance _ . _ test _ ( _ model _ create ;"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new move _ table _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new move _ table _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ( new move _ new _ operation ( STR , STR ) entity id entity ) ( model builder builder _ . _ ) _ ) annotations"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new add _ column _ operation ( STR , column ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new add _ column _ operation ( STR , column ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ( new new new STR _ operation ( STR ) , generate _ create _ sql id true ) </%> <%> ) type ) type ) </@>"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ column _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new drop _ column _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ column _ operation ( STR , STR ) , generate _ key _ sql , true operation operation operation operation operation operation ) type"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( ", "after_ctx": " ", "after_line": "generate (", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . </@> </%>"]}, {"before_ctx": " ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ primary _ key _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new drop _ primary _ key _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . generate ( new </@> _ primary _ = _ ( builder entity = : : : : ! ! ! core query query _ ( core query ) builder key key key _ . key key _ name key _ name key key key _ , > type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type _ generator annotations <->"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( ", "after_ctx": " ", "after_line": "generate (", "predictions": ["sql _ server _ migration _ operation _ sql _ generator ."]}, {"before_ctx": " ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ foreign _ key _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new drop _ foreign _ key _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator operation _ <%> operation _ <%> operation , _ index _ sql STR , _ index _ sql STR operation . sql . , . sql _ <-> _ new _ ) . sql . ( true . server . server . sql _ <-> _ <%> _ ) . sql . ( true . server . server _ foreign _ new _ ) ( . sql . sql . sql . sql _ foreign _ none _ ( ) server </%> </%> </%> ;"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["sql _ server _ migration _ operation _ sql _ generator . : :"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( new drop _ index _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ; ", "after_ctx": " <%> <-> sql _ server _ migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new drop _ index _ operation ( STR , STR ) , generate _ idempotent _ sql : true ) . sql ) ;", "predictions": ["sql _ server _ migration _ operation _ sql _ generator </%> </%> none <*> <*> <*> <*> sql _ ] _ <%> : null ( null ( null <%> <*> _ generic _ ; </@> metadata <%> <%> <%> system <%> <%> system <%> system <%> system <%> <%> system <%> system <%> <%> <%> <%> <%> system <%> system <%> system <%> <%> <%> <%> <%> <%> <%> <%> system <%> <%> system <%> system <%> system <%> <%> <%> <%> system <%> ;"]}, {"before_ctx": "<%> <-> sql _ server _ migration _ operation _ sql _ generator . </%> ", "before_line": " sql _ server _ migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <+> new sql _ server _ type _ mapper ( ) </%>", "after_line": "generate (", "predictions": ["sql _ server _ migration _ operation _ sql _ generator operation . </@> . </@> . </@> . </@> . </@> . </@> ."]}, {"before_ctx": " ", "before_line": " using system _ collections _ generic ; using system _ linq ; ", "after_ctx": " <%> <*> using microsoft _ data _ entity _ relational _ model ; -> using microsoft _ data _ entity _ change _ tracking ; </%> <%> <+> using microsoft _ data _ entity _ infrastructure ; using microsoft _ data _ entity _ metadata ; </%> <%> <*> using moq ; -> using microsoft _ framework _ dependency _ injection ; </%> <%> <+> using microsoft _ framework _ dependency _ injection _ fallback ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": " ", "before_line": " migration _ operation _ sql _ generator . generate ( new create _ database _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ; ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new create _ database _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ;", "predictions": ["migration _ operation _ sql _ generator . generate ( new create _ database _ operation operation </%> </%> </%> server _ idempotent _ sql ( false . false . sql : ) . sql ) </%> </%> . generate ( _ ) </%> new create ( new create ( new create _ ) _ sql <-> <@> <%> generate _ index _ sql <-> false . sql . sql . false _ ) </%> key . sql . generate _ ) </%> sql . generate ( ( _ index _ sql <%> false . sql . ;"]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( new drop _ database _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ; ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new drop _ database _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ;", "predictions": ["migration _ operation _ sql _ generator . generate ( new drop _ <@> _ . STR </@> operation : server _ idempotent _ sql ; sql ;"]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( new drop _ sequence _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ; ", "after_ctx": " ", "after_line": "generate ( new drop _ sequence _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ;", "predictions": ["migration _ operation _ sql _ generator . generate ( new create _ new _ operation ( STR ) , generate _ false _ sql : false . sql . false . false . sql . migration _ operation _ sql _ STR ) server _ operation _ sql _ STR . , <@> ( new _ key _ operation ( </@> ) , _ idempotent _ sql <-> false . sql . sql . drop . sql . . drop <-> . . drop ( _ ) _ sql _ ( false . sql . , generate _ ]"]}, {"before_ctx": " ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( new drop _ table _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ; ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new drop _ table _ operation ( STR ) , generate _ idempotent _ sql : false ) . sql ) ;", "predictions": ["migration _ operation _ sql _ generator . generate ( new database _ new _ operation ( STR ) , generate _ false _ sql : false ) . sql operation : sql ) :"]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( new drop _ foreign _ key _ operation ( STR , STR ) , generate _ idempotent _ sql : false ) . sql ) ; ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new drop _ foreign _ key _ operation ( STR , STR ) , generate _ idempotent _ sql : false ) . sql ) ;", "predictions": ["migration _ operation _ sql _ generator . generate ( new <@> _ foreign _ new _ operation server </%> ( </%> ) ( STR ) ( STR ) ;"]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( new drop _ index _ operation ( STR , STR ) , generate _ idempotent _ sql : false ) . sql ) ; ", "after_ctx": " <%> <-> migration _ operation _ sql _ generator . </%>", "after_line": "generate ( new drop _ index _ operation ( STR , STR ) , generate _ idempotent _ sql : false ) . sql ) ;", "predictions": ["migration _ operation _ sql _ generator . generate ( new drop _ index _ operation ( STR , STR ) , generate _ idempotent _ sql : false ) . sql ) : STR ) ; _ ] _ <%> _ ) </%> none ( none ; none _ ) ; _ ] _ <%> sql [ [ [ <%> ( none ;"]}, {"before_ctx": "<%> <-> migration _ operation _ sql _ generator . </%> ", "before_line": " migration _ operation _ sql _ generator . generate ( ", "after_ctx": " <%> <+> new relational _ type _ mapper ( ) </%>", "after_line": "generate (", "predictions": ["migration _ operation _ sql _ generator . generate ("]}, {"before_ctx": "<%> <-> ? </%> <%> <*> . find _ annotation ( -> [ </%> <%> <*> ) -> ] </%> ", "before_line": " return ( sql _ server _ value _ generation _ strategy ? ) annotation . value ; ", "after_ctx": " <%> <-> ? ( sql _ server _ value _ generation _ strategy </%> <%> <-> ) </%> <%> <*> null ; -> sql _ server _ value _ generation _ strategy . none ; </%>", "after_line": "return ( sql _ server _ value _ generation _ strategy ) annotation ;", "predictions": ["return ( sql _ server _ value _ generation _ strategy ? </%> </%> </%> _ server _ microsoft _ framework _ </@> ) <@> entity ->"]}, {"before_ctx": " ", "before_line": " return tuple . item ; ", "after_ctx": " <%> <*> return -> return new tuple < t _ value , configuration _ source > ( </%> <%> <*> ; -> , default _ configuration _ source ) ; </%>", "after_line": "return tuple ;", "predictions": ["return tuple ;"]}, {"before_ctx": "<%> <-> public virtual internal _ relationship _ builder one _ to _ one _ referenced _ key ( not _ null type specified _ principal _ type , not _ null i _ read _ only _ list < property _ info > property _ access _ list , configuration _ source configuration _ source ) { check . not _ null ( specified _ principal _ type , STR ) ; check . not _ null ( property _ access _ list , STR ) ; return reference _ invert _ if _ needed ( resolve _ type ( specified _ principal _ type ) , configuration _ source ) . referenced _ key ( property _ access _ list , configuration _ source ) ; } </%> <%> <*> principal -> metadata . referenced _ entity </%> ", "before_line": " : invert ( ) . replace _ foreign _ key ( configuration _ source ) ; ", "after_ctx": " <%> <-> var inverted = metadata . entity _ type ! = dependent _ type ; </%> <%> <-> ( are _ dependent _ properties _ by _ convention ? new property [ 0 ] : inverted ? metadata . referenced _ properties </%>", "after_line": ": invert ( configuration _ source ) ;", "predictions": [": invert ( ) ;"]}, {"before_ctx": "<%> <+> using system ; </%> <%> <-> using microsoft _ data _ entity _ storage ; </%> ", "before_line": " public virtual data _ store _ exception exception { get ; set ; } ", "after_ctx": " <%> <+> public type context _ type { get ; internal set ; } </%>", "after_line": "public virtual exception exception { get ; set ; }", "predictions": ["public virtual data _ store _ microsoft microsoft <-> <-> test _ store _ connection _ </@> ;"]}, {"before_ctx": " ", "before_line": " ( c , ex ) = > { assert . is _ type < db _ update _ exception > ( ex ) ; } , ", "after_ctx": " <%> <*> void -> task </%> <%> <+> return </%>", "after_line": "( c , ex ) = > assert . is _ type < db _ update _ exception > ( ex ) ,", "predictions": ["( c , ex ) = <+> . ] ] . new _ root properties using db _ update _ exception ,"]}, {"before_ctx": " ", "before_line": " query _ optimizer . optimize ( query _ compilation _ context . query _ annotations , query _ model ) ; ", "after_ctx": " <%> <-> . query _ annotations </%>", "after_line": "query _ optimizer . optimize ( query _ compilation _ context , query _ model ) ;", "predictions": ["query _ optimizer . optimize ( core _ compilation _ namespace _ ; <+> _ <@> ;"]}, {"before_ctx": "<%> <-> . query _ annotations </%> ", "before_line": " query _ optimizer . optimize ( query _ compilation _ context . query _ annotations , query _ model ) ; ", "after_ctx": " ", "after_line": "query _ optimizer . optimize ( query _ compilation _ context , query _ model ) ;", "predictions": ["query _ optimizer . optimize ( ( . builder . ( ; core _ model <%> </%> _ [ _ core uri ) <%> _ { ;"]}, {"before_ctx": "<%> <*> method _ info correlate _ subquery _ method ; -> var correlate _ subquery _ method = query _ compilation _ context . is _ async _ query </%> <%> <+> ? correlate _ subquery _ async _ method _ info : correlate _ subquery _ method _ info ; </%> ", "before_line": " correlate _ subquery _ method = correlate _ subquery _ method _ info . make _ generic _ method ( collection _ query _ model . select _ clause . selector . type , navigation . get _ collection _ accessor ( ) . collection _ type ) ; ", "after_ctx": " ", "after_line": "correlate _ subquery _ method = correlate _ subquery _ method . make _ generic _ method ( collection _ query _ model . select _ clause . selector . type , navigation . get _ collection _ accessor ( ) . collection _ type ) ;", "predictions": ["correlate _ subquery _ method = make _ STR _ , _ STR ) entity _ entity _ ( e _ = _ model e e _ = _ </@> ( , = , <@> ( , <@> _ : _ accessor ( , , <@> _ instance , <@> ( , , <@> ( , <@> _ instance , <@> _ factory _ ) , entity _ : ( selector ( , , <@> ( , ( , ( , ( , ( , ( , ( , , , ( , <@> ( , <@> , <@> ("]}, {"before_ctx": "<%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> <%> <-> _ sql </%> ", "before_line": " connection _ uri = new uri ( test _ environment . default _ connection ) ; ", "after_ctx": " <%> <-> _ sql </%> <%> <*> uri -> string </%>", "after_line": "connection _ uri = test _ environment . default _ connection ;", "predictions": ["connection _ uri = test _ <+> b ; _ model ; command _ . type <%>"]}, {"before_ctx": " ", "before_line": " model _ builder . finalize _ model ( ) ; var model = model _ builder . model ; ", "after_ctx": " <%> <+> _ net _ topology </%> <%> <*> nts -> suite </%>", "after_line": "var model = model _ builder . finalize _ model ( ) ;", "predictions": ["var model = model _ builder ) ) ) ) ;"]}, {"before_ctx": "<%> <*> . entity < self _ ref > ( ) . one _ to _ one ( e = > e . self _ ref , e = > e . self _ ref ) ; -> . entity < self _ ref > ( ) . has _ one ( e = > e . self _ ref ) . with _ one ( e = > e . self _ ref ) ; </%> <%> <*> . entity < self _ ref > ( ) . one _ to _ one ( e = > e . self _ ref , e = > e . self _ ref ) ; -> . entity < self _ ref > ( ) . has _ one ( e = > e . self _ ref ) . with _ one ( e = > e . self _ ref ) ; </%> ", "before_line": " assert . equal ( navigation _ to _ principal . name , new _ fk . get _ navigation _ to _ dependent ( ) . name ) ; assert . equal ( navigation _ to _ dependent . name , new _ fk . get _ navigation _ to _ principal ( ) . name ) ; ", "after_ctx": " ", "after_line": "assert . equal ( navigation _ to _ dependent . name , new _ fk . get _ navigation _ to _ dependent ( ) . name ) ; assert . equal ( navigation _ to _ principal . name , new _ fk . get _ navigation _ to _ principal ( ) . name ) ;", "predictions": ["assert . equal ( navigation _ to _ principal . name , navigation _ to _ null ) , ; ; ; ; ; ; ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ query _ expression _ visitors _ internal ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tools _ core _ tests _ migrations _ design ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ design _ tests _ migrations _ design", "predictions": ["namespace microsoft _ entity _ framework _ ; _ ; _ ( <-> ;"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ internal ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tools _ core _ tests _ migrations _ design ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ design _ tests _ migrations _ design", "predictions": ["namespace microsoft _ entity _ framework _ ( _ STR _ STR _ internal _ </@> _ } _ </@> _ using _ builder _ ( add _ type _ framework _ command _ tests ) . ( equal )"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ design ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tools _ tests _ design ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ design _ tests _ design", "predictions": ["namespace microsoft _ entity _ framework _ query _ context _ query"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ design ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tools _ tests _ design ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ design _ tests _ design", "predictions": ["namespace microsoft _ entity _ framework _ query _ context _ query"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ design ; </%> ", "before_line": " namespace microsoft _ entity _ framework _ core _ tools _ tests _ design ", "after_ctx": " ", "after_line": "namespace microsoft _ entity _ framework _ core _ design _ tests _ design", "predictions": ["namespace microsoft _ entity _ framework _ core _ tools _ tests _ . _ ="]}, {"before_ctx": "<%> <*> fact _ skip _ skip _ reason -> conditional _ fact </%> <%> <+> platform _ skip _ condition _ test _ platform _ linux _ test _ platform _ mac </%> ", "before_line": " fact _ skip _ skip _ reason ", "after_ctx": " <%> <*> fixture . install _ tool ( project , output , fixture . test _ project _ root ) ; assert _ command . pass ( new migration _ add _ command ( project , STR , output ) . execute ( $ STR ) ) ; -> assert _ command . pass ( new add _ migration ( project , STR , output ) </%> <%> <+> . execute ( STR , STR , STR , STR ) ) ; </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ skip _ reason </%> <%> <*> fixture . install _ tool ( project , output , fixture . test _ project _ root ) ; assert _ command . pass ( new migration _ add _ command ( project , STR , output ) . execute ( $ STR ) ) ; -> assert _ command . pass ( new add _ migration ( project , STR , output ) </%> <%> <+> . execute ( STR , STR , STR , STR ) ) ; </%> ", "before_line": " theory _ skip _ skip _ reason ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": "<%> <+> . properties </%> <%> <*> ? activator . create _ instance ( typeof ( simple _ null _ sentinel _ entity _ key _ factory < > ) . make _ generic _ type ( key _ type . unwrap _ nullable _ type ( ) ) ) : activator . create _ instance ( typeof ( simple _ entity _ key _ factory < > ) . make _ generic _ type ( key _ type . unwrap _ nullable _ type ( ) ) , sentinel ) ) ; -> ? activator . create _ instance ( </%> <%> <+> typeof ( simple _ null _ sentinel _ entity _ key _ factory < > ) . make _ generic _ type ( key _ type . unwrap _ nullable _ type ( ) ) , k ) : activator . create _ instance ( typeof ( simple _ entity _ key _ factory < > ) . make _ generic _ type ( key _ type . unwrap _ nullable _ type ( ) ) , k , sentinel ) ) ; </%> ", "before_line": " return new composite _ entity _ key _ factory ( k . select ( p = > p . sentinel _ value ) . to _ list ( ) ) ; ", "after_ctx": " ", "after_line": "return new composite _ entity _ key _ factory ( k ) ;", "predictions": ["return new composite _ entity _ key _ factory ( k ) ;"]}, {"before_ctx": "<%> <+> public simple _ null _ sentinel _ entity _ key _ factory ( [ not _ null ] i _ key key ) : base ( key ) { } </%> ", "before_line": " i _ entity _ type entity _ type , i _ read _ only _ list < i _ property > properties , value _ buffer value _ buffer ) = > create ( entity _ type , value _ buffer [ properties [ 0 ] . index ] ) ; ", "after_ctx": " <%> <*> i _ entity _ type entity _ type , i _ read _ only _ list < i _ property > properties , i _ property _ accessor property _ accessor ) = > create ( entity _ type , property _ accessor [ properties [ 0 ] ] ) ; private entity _ key create ( i _ entity _ type entity _ type , object value ) { return value ! = null ? new simple _ entity _ key < t _ key > ( entity _ type , ( t _ key ) value ) -> i _ read _ only _ list < i _ property > properties , i _ property _ accessor property _ accessor ) </%> <%> <+> = > create ( property _ accessor [ properties [ 0 ] ] ) ; private entity _ key create ( object value ) </%>", "after_line": "i _ read _ only _ list < i _ property > properties , value _ buffer value _ buffer ) = > create ( value _ buffer [ properties [ 0 ] . index ] ) ;", "predictions": ["i _ entity _ type entity _ type , i _ read _ only _ list < i _ property > properties , value _ buffer value _ buffer ) = > create ( entity _ type , value _ buffer [ 0 ] . index ] ;"]}, {"before_ctx": "<%> <+> entity _ type . get _ primary _ </%> <%> <*> _ properties -> ( ) </%> ", "before_line": " = vr = > key _ factory . create ( entity _ type . root _ type ( ) , key _ properties , vr ) ; ", "after_ctx": " ", "after_line": "= vr = > key _ factory . create ( key _ properties , vr ) ;", "predictions": ["= vr = > key _ factory entity entity entity _ factory core framework <-> _ sql ( ) assert <*> </%> . </%> _ </@> method _ STR , fact"]}, {"before_ctx": " ", "before_line": " new object [ ] { 0 , null , null } ) . create ( type , type . get _ primary _ key ( ) . properties , entry ) ) ; ", "after_ctx": " <%> <+> sentinel _ </%> <%> <+> sentinel _ </%>", "after_line": "type . get _ primary _ key ( ) ) . create ( type . get _ primary _ key ( ) . properties , entry ) ) ;", "predictions": ["0 , type , type . internal </%> type </%> </%> </%> get core properties ;"]}, {"before_ctx": " ", "before_line": " assert . null ( model _ builder . model . find _ entity _ type ( typeof ( tests . c ) ) ) ; ", "after_ctx": " <%> <-> tests . </%>", "after_line": "assert . null ( model _ builder . model . find _ entity _ type ( typeof ( c ) ) ) ;", "predictions": ["assert . null ( model _ <@> _ <%> _ <%> model line ( </%> _ <@> ) <%> ;"]}, {"before_ctx": " ", "before_line": " using microsoft _ entity _ framework _ core _ relational _ tests _ test _ utilities _ fake _ provider ; using microsoft _ entity _ framework _ core _ storage ; using microsoft _ entity _ framework _ core _ tests _ test _ utilities ; ", "after_ctx": " <%> <-> _ relational _ tests </%>", "after_line": "using microsoft _ entity _ framework _ core _ test _ utilities ; using microsoft _ entity _ framework _ core _ test _ utilities _ fake _ provider ;", "predictions": ["using microsoft _ entity _ framework _ </%> <%> ( uri _ STR _ using _ <+> _ fake _ <*> _ ; , <%> _ ; , type . test . source _ source ( configuration _ <%> _ type _ e _ <%> . fake _ -> . test _ -> _ ; . test _ ; . test _ -> _ ref _ e _ ; _ test _ -> _ ref _ e _ ; . test _ -> _ ref _ e _ ; . test _ ; . test _ -> _ ref _"]}, {"before_ctx": " ", "before_line": " using microsoft _ entity _ framework _ core _ specification _ tests _ test _ models _ complex _ navigations _ model ; using microsoft _ entity _ framework _ core _ specification _ tests _ test _ utilities _ xunit ; using microsoft _ entity _ framework _ core _ specification _ test _ utilities ; ", "after_ctx": " <%> <-> _ specification _ tests </%>", "after_line": "using microsoft _ entity _ framework _ core _ test _ models _ complex _ navigations _ model ; using microsoft _ entity _ framework _ core _ test _ utilities ; using microsoft _ entity _ framework _ core _ test _ utilities _ xunit ;", "predictions": ["using microsoft _ entity _ framework _ builder _ ( _ , _ <@> _ new project _ ) ) using entity . type . type . type _ <%> ) ) ;"]}, {"before_ctx": "<%> <+> single _ line : </%> <%> <+> indent : </%> ", "before_line": " builder . append ( entity _ type . annotations _ to _ debug _ string ( indent + STR ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( entity _ type . annotations _ to _ debug _ string ( indent : indent + STR ) ) ;", "predictions": ["builder . append ( annotations _ to </@> internal </%> entity entity _ type _ factory <%> core ;"]}, {"before_ctx": " ", "before_line": " . for _ relational ( b = > { b . name ( STR ) ; } ) ; ", "after_ctx": " <%> <-> . for _ relational ( ) </%>", "after_line": ". name ( STR ) ;", "predictions": [". for _ relational ( b tests > tests microsoft . . using model ( tests model ( namespace <%> </@> <@> ) <%> <%> <%> ( model ( execute , assert . , , test ( test , test ( STR ( STR ( STR ( STR ( STR ( null ( STR ( null ( STR ( STR ( STR ( STR ( null ( STR ( null ( STR ( STR ( STR ( STR ( null ( STR ( null ( STR ( STR ( STR ( STR ( null ( STR ( null ( STR"]}, {"before_ctx": " ", "before_line": " . for _ relational ( b = > { b . name ( STR ) ; } ) ; ", "after_ctx": " <%> <-> . for _ relational ( ) </%>", "after_line": ". name ( STR ) ;", "predictions": [". for _ relational ( b tests > tests microsoft . . using using model ( tests model ( <*> _ </@> ; <@> ;"]}, {"before_ctx": " ", "before_line": " . for _ relational ( b = > { b . name ( STR ) ; } ) ; ", "after_ctx": " <%> <-> . for _ relational ( ) </%>", "after_line": ". name ( STR ) ;", "predictions": [". for _ relational ( b = > b . name ( using using query query ( tests ( [ ( </@> _ <@> ; <@> ; <%> ( using ( using , execute . , _ type method method method platform , test ( platform , test ( STR ( STR ( STR ( STR ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model ( STR ( model"]}, {"before_ctx": "<%> <-> _ using _ nested _ closure </%> ", "before_line": " . for _ relational ( b = > { b . table ( STR ) ; } ) ; ", "after_ctx": " <%> <+> public void can _ set _ table _ name _ with _ convention _ builder _ using _ nested _ closure _ non _ generic ( ) { var model _ builder = create _ convention _ model _ builder ( ) ; model _ builder . entity ( typeof ( customer ) ) </%>", "after_line": ". table ( STR ) ;", "predictions": [". for _ relational ( b ( </@> ( <@> . async ( STR ( table ) ) ) ) , : <%> ) , </@> ) ,"]}, {"before_ctx": "<%> <-> _ using _ nested _ closure </%> ", "before_line": " . for _ relational ( b = > { b . table ( STR , STR ) ; } ) ; ", "after_ctx": " <%> <+> public void can _ set _ table _ and _ schema _ name _ with _ convention _ builder _ using _ nested _ closure _ non _ generic ( ) { var model _ builder = create _ convention _ model _ builder ( ) ; model _ builder </%>", "after_line": ". table ( STR , STR ) ;", "predictions": [". for _ relational ( b <%> <*> { project project <*> ) ; ;"]}, {"before_ctx": "<%> <+> . table ( STR , STR ) ; var entity _ type = model _ builder . model . get _ entity _ type ( typeof ( customer ) ) ; assert . equal ( STR , entity _ type . display _ name ( ) ) ; assert . equal ( STR , entity _ type . relational ( ) . table ) ; assert . equal ( STR , entity _ type . relational ( ) . schema ) ; } fact </%> ", "before_line": " model _ builder . for _ relational ( ) . sequence ( ) ; ", "after_ctx": " <%> <*> . for _ relational ( b = > { b . sequence ( ) ; } ) ; -> . sequence ( b = > { } ) </%>", "after_line": "model _ builder . sequence ( ) ;", "predictions": ["model _ builder . for _ relational ( ) . sequence ( ) type type ) )"]}, {"before_ctx": " ", "before_line": " model _ builder . for _ relational ( ) . sequence ( STR ) ; ", "after_ctx": " <%> <*> . for _ relational ( b = > { b . sequence ( STR ) ; } ) ; -> . sequence ( STR , b = > { } ) </%>", "after_line": "model _ builder . sequence ( STR ) ;", "predictions": ["model _ builder . for _ relational ( STR ) </%> </%> </%> </%> </%> </%>"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ see _ issue ", "after_ctx": " <%> <*> os -> gs </%> <%> <*> os -> gs </%> <%> <+> ! </%> <%> <*> ) ; -> , </%> <%> <+> assert _ order : true , element _ asserter : collection _ asserter < gear > ( ee = > ee . full _ name , ( ee , aa ) = > assert . equal ( ee . full _ name , aa . full _ name ) ) ) ; } conditional _ fact </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ issue _ issue"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ see _ issue ", "after_ctx": " <%> <*> os -> gs </%> <%> <*> os -> gs </%> <%> <+> ! </%> <%> <*> ) ; -> , </%> <%> <+> assert _ order : true , element _ asserter : collection _ asserter < gear > ( ee = > ee . full _ name , ( ee , aa ) = > assert . equal ( ee . full _ name , aa . full _ name ) ) ) ; } conditional _ fact </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ issue _ issue"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <+> is _ async = false ; </%> <%> <*> query -> task </%> <%> <*> issue -> list </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ query )"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <+> is _ async = false ; </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <+> is _ async = false ; </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <+> is _ async = false ; </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <+> is _ async = false ; </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ query </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <+> } conditional _ theory member _ data _ nameof _ is _ async _ data public virtual task enumerable _ min _ is _ mapped _ to _ queryable ( bool is _ async ) </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ issue"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> } ) . take ( NUM ) . select ( a = > a . c ) ) ; </%>", "after_line": "conditional _ theory", "predictions": ["conditional"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ task _ list ", "after_ctx": " <%> <-> _ skip _ task _ list </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ list"]}, {"before_ctx": "<%> <-> _ skip _ task _ list </%> ", "before_line": " conditional _ theory _ skip _ task _ list ", "after_ctx": " <%> <-> _ skip _ task _ list </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ task _ <%>"]}, {"before_ctx": "<%> <-> _ skip _ task _ list </%> ", "before_line": " conditional _ theory _ skip _ task _ list ", "after_ctx": " <%> <-> _ skip _ task _ list </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ task _ list"]}, {"before_ctx": "<%> <-> _ skip _ task _ list </%> ", "before_line": " conditional _ theory _ skip _ task _ list ", "after_ctx": " <%> <-> _ skip _ task _ list </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ task _ list"]}, {"before_ctx": "<%> <-> _ skip _ task _ list </%> ", "before_line": " conditional _ theory _ skip _ task _ list ", "after_ctx": " <%> <-> _ skip _ task _ list </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ task _ list"]}, {"before_ctx": "<%> <-> _ skip _ task _ list </%> ", "before_line": " conditional _ theory _ skip _ task _ list ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ list"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ tasklist ", "after_ctx": " <%> <-> _ skip _ tasklist </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ tasklist </%> ", "before_line": " conditional _ theory _ skip _ tasklist ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <+> is _ async = false ; </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ <-> _ <%> _ issue"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <+> is _ async = false ; </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ issue"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ task _ skip"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ list"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ <%>"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ <%>"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ issue"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ query _ list"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ query _ issue ", "after_ctx": " <%> <+> is _ async = false ; </%>", "after_line": "conditional _ theory", "predictions": ["conditional"]}, {"before_ctx": " ", "before_line": " private readonly lazy _ ref < i _ logger > logger ; ", "after_ctx": " <%> <-> _ factory </%> <%> <-> _ factory </%> <%> <-> _ factory </%> <%> <-> _ factory </%> <%> <*> new lazy _ ref < i _ logger > ( logger _ factory . create _ logger < relational _ connection > ) ; -> logger ; </%>", "after_line": "private readonly i _ logger logger ;", "predictions": ["private readonly lazy _ ref < i _ logger > ) ; ; ; ; ; ;"]}, {"before_ctx": "<%> <+> new logger < sql _ statement _ executor > ( </%> <%> <+> ) </%> <%> <*> { return interlocked . add ( ref current , block _ size ) ; } -> = > interlocked . add ( ref current , block _ size ) ; </%> ", "before_line": " i _ relational _ connection connection , string sql , cancellation _ token cancellation _ token = new cancellation _ token ( ) ) { return task . from _ result < object > ( interlocked . add ( ref current , block _ size ) ) ; } ", "after_ctx": " ", "after_line": "i _ relational _ connection connection , string sql , cancellation _ token cancellation _ token = new cancellation _ token ( ) ) = > task . from _ result < object > ( interlocked . add ( ref current , block _ size ) ) ;", "predictions": ["return task . from _ result < object > ( interlocked . add ( ref current , block _ size ) ) ;"]}, {"before_ctx": " ", "before_line": " var sorted _ entities = relational _ test _ helpers . instance . create _ command _ batch _ preparer ( ) ", "after_ctx": " <%> <+> i _ update _ entry </%>", "after_line": "var sorted _ entities = create _ command _ batch _ preparer ( )", "predictions": ["var sorted _ entities = create , </%> , )"]}, {"before_ctx": " ", "before_line": " var sorted _ entities = relational _ test _ helpers . instance . create _ command _ batch _ preparer ( ) ", "after_ctx": " <%> <+> i _ update _ entry </%>", "after_line": "var sorted _ entities = create _ command _ batch _ preparer ( )", "predictions": ["var sorted _ entities = create _ command _ <-> , using using . <@> ;"]}, {"before_ctx": " ", "before_line": " relational _ test _ helpers . instance . create _ command _ batch _ preparer ( state _ manager : state _ manager , sensitive _ logging : true ) . batch _ commands ( new [ ] { first _ entry , second _ entry } ) . to _ array ( ) ) . message ) ; ", "after_ctx": " <%> <-> relational _ test _ helpers . instance . </%>", "after_line": "create _ command _ batch _ preparer ( state _ manager : state _ manager , sensitive _ logging : true ) . batch _ commands ( new [ ] { first _ entry , second _ entry } ) . to _ array ( ) ) . message ) ;", "predictions": ["create _ command _ batch _ preparer ( state _ manager using state _ diagnostics type true _ <-> transaction true _ entity </@> < microsoft or <*> store _ using . service _ using utilities ( ( { entry _ entry { from _ entry ) expression expression ( ( ( operation _ & ) ( operation _ & } _ logging ( true [ true } _ logging } true [ true } ) ] ] _ name _ on [ array . -> _ array , </@> [ name } _ <@> } _ logging } )"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ need _ to _ push _ down _ set _ operation _ on _ take _ without _ orderby _ skip _ on _ sq _ server _ waiting _ on _ design ", "after_ctx": " <%> <*> throw new not _ implemented _ exception ( STR ) ; -> assert _ sql ( </%> <%> <+> @ STR select [ ] . [ customer _ id ] , [ ] . [ address ] , [ ] . [ city ] , [ ] . [ company _ name ] , [ ] . [ contact _ name ] , [ ] . [ contact _ title ] , [ ] . [ country ] , [ ] . [ fax ] , [ ] . [ phone ] , [ ] . [ postal _ code ] , [ ] . [ region ] from ( select top ( p ) [ ] . [ customer _ id ] , [ ] . [ address ] , [ ] . [ city ] , [ ] . [ company _ name ] , [ ] . [ contact _ name ] , [ ] . [ contact _ title ] , [ ] . [ country ] , [ ] . [ fax ] , [ ] . [ phone ] , [ ] . [ postal _ code ] , [ ] . [ region ] from ( </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ need _ to _ push _ down _ set _ operation _ on _ take"]}, {"before_ctx": " ", "before_line": " using system _ collections ; ", "after_ctx": " <%> <-> using system _ collections _ immutable ; </%> <%> <+> using system _ reflection ; using system _ threading ; </%> <%> <+> using microsoft _ data _ entity _ change _ tracking _ internal ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": "<%> <+> static </%> <%> <*> _ -> . </%> <%> <*> _ -> . </%> <%> <*> _ -> . </%> <%> <+> . constants </%> ", "before_line": " integer = constants . sqlite _ integer , real = constants . sqlite _ float , text = constants . sqlite _ text , blob = constants . sqlite _ blob ", "after_ctx": " ", "after_line": "integer = sqlite _ integer , real = sqlite _ float , text = sqlite _ text , blob = sqlite _ blob", "predictions": ["integer = constants . sqlite _ integer , text current current . </%> , , blob </%> < <%> ; sqlite store factory _ t )"]}, {"before_ctx": " ", "before_line": " native _ methods . sqlite _ bind _ blob ( stmt , index , value , value . length , constants . sqlite _ transient ) ; ", "after_ctx": " <%> <-> constants . </%>", "after_line": "native _ methods . sqlite _ bind _ blob ( stmt , index , value , value . length , sqlite _ transient ) ;", "predictions": ["sqlite _ bind _ blob ( stmt . get . <%> _ value _ </%> . assert . </%> _ > _ ; factory test instance <%> <%> <%> ;"]}, {"before_ctx": "<%> <-> constants . </%> ", "before_line": " native _ methods . sqlite _ bind _ text ( stmt , index , value , constants . sqlite _ transient ) ; ", "after_ctx": " ", "after_line": "native _ methods . sqlite _ bind _ text ( stmt , index , value , sqlite _ transient ) ;", "predictions": ["sqlite _ bind _ text ( instance . entry . value . sqlite . > _ transient = <%> _ t <%> context ) string _ store ) string"]}, {"before_ctx": " ", "before_line": " = expression . lambda < func < i _ enumerable < object > > > ( new sub _ query _ expression ( collection _ query _ model ) ) ; ", "after_ctx": " <%> <+> var async _ enumerable _ type = typeof ( i _ async _ enumerable < > ) . make _ generic _ type ( target _ type ) ; </%> <%> <*> i -> > ) . make </%> <%> <+> generic _ type ( </%> <%> <*> < object > > -> _ type </%>", "after_line": "= expression . lambda ( new sub _ query _ expression ( collection _ query _ model ) ) ;", "predictions": ["= expression . lambda < func < i _ enumerable < first ; ; ;"]}, {"before_ctx": "<%> <+> using system _ data ; </%> ", "before_line": " public abstract class relational _ test _ store < t _ connection > : test _ store , i _ relational _ test _ store < t _ connection > where t _ connection : db _ connection ", "after_ctx": " <%> <+> public connection _ state connection _ state = > connection . state ; public void close _ connection ( ) = > connection . close ( ) ; </%> <%> <*> public virtual t _ connection connection { get ; protected set ; } public virtual db _ transaction transaction { get ; } -> public db _ transaction begin _ transaction ( ) = > connection . begin _ transaction ( ) ; </%> <%> <+> protected virtual db _ connection connection { get ; set ; } </%>", "after_line": "public abstract class relational _ test _ store : test _ store", "predictions": ["public abstract class relational _ test _ store < t _ store <%> <%> ; <@> _ ( </%> _ table < builder _ get _ expression )"]}, {"before_ctx": "<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ transportation _ model ; using microsoft _ extensions _ dependency _ injection ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <+> using microsoft _ entity _ framework _ core _ utilities ; </%> ", "before_line": " public class table _ splitting _ sqlite _ test : table _ splitting _ test _ base < sqlite _ test _ store > ", "after_ctx": " <%> <-> public override sqlite _ test _ store create _ test _ store ( action < model _ builder > on _ model _ creating ) = > sqlite _ test _ store . get _ or _ create _ shared ( database _ name , false , ( ) = > { var options _ builder = new db _ context _ options _ builder ( ) . use _ sqlite ( sqlite _ test _ store . create _ connection _ string ( database _ name ) ) . enable _ sensitive _ data _ logging ( ) . use _ internal _ service _ provider ( build _ service _ provider ( on _ model _ creating ) ) ; using ( var context = new transportation _ context ( options _ builder . options ) ) { </%>", "after_line": "public class table _ splitting _ sqlite _ test : table _ splitting _ test _ base", "predictions": ["public class table _ splitting _ sqlite _ test : table _ splitting _ test _ base"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " assert . equal ( fixture . customers , inner _ context . set < transaction _ customer > ( ) . order _ by ( c = > c . id ) . to _ list ( ) ) ; ", "after_ctx": " <%> <-> ( context . database . get _ db _ connection </%> <%> <-> ) </%> <%> <-> fixture . </%>", "after_line": "assert . equal ( customers , inner _ context . set < transaction _ customer > ( ) . order _ by ( c = > c . id ) . to _ list ( ) ) ;", "predictions": ["assert . equal ( fixture . customers , inner _ context . list test test on object _ < </@> > _ <*> store > <-> _ : _ server ( ; ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " using ( var inner _ context = create _ context ( context . database . get _ db _ connection ( ) ) ) ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "using ( var inner _ context = create _ context ( ) )", "predictions": ["using ( var inner _ context </%> <@> manager _ on using microsoft _ if _ state test ;"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " assert . equal ( fixture . customers , await inner _ context . set < transaction _ customer > ( ) . order _ by ( c = > c . id ) . to _ list _ async ( ) ) ; ", "after_ctx": " <%> <-> ( context . database . get _ db _ connection </%> <%> <-> ) </%> <%> <-> fixture . </%>", "after_line": "assert . equal ( customers , await inner _ context . set < transaction _ customer > ( ) . order _ by ( c = > c . id ) . to _ list _ async ( ) ) ;", "predictions": ["assert . equal ( await inner _ context . set < true . -> ; test ; transaction ( server state > <-> _ framework ) _ using store ) </%> </%> </%> _ name _ core ) microsoft _ public ( test ) microsoft ( test _ > _ set _ database test test _ on ) microsoft"]}, {"before_ctx": "<%> <-> fixture . </%> ", "before_line": " using ( var inner _ context = create _ context ( context . database . get _ db _ connection ( ) ) ) ", "after_ctx": " <%> <-> fixture . </%>", "after_line": "using ( var inner _ context = create _ context ( ) )", "predictions": ["using ( var inner _ context = create _ > state ( model system . not . <-> <%> ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ infrastructure ; </%> <%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> ", "before_line": " public abstract class end _ to _ end _ test < t _ test _ store , t _ fixture > : i _ disposable where t _ test _ store : test _ store where t _ fixture : cross _ store _ fixture , new ( ) ", "after_ctx": " <%> <+> protected end _ to _ end _ test ( cross _ store _ fixture fixture ) { fixture = fixture ; test _ store = fixture . create _ test _ store ( test _ store _ factory ) ; } protected cross _ store _ fixture fixture { get ; } protected abstract i _ test _ store _ factory < test _ store > test _ store _ factory { get ; } protected test _ store test _ store { get ; } public void dispose ( ) = > test _ store . dispose ( ) ; </%>", "after_line": "public abstract class end _ to _ end _ test : i _ disposable", "predictions": ["public abstract class end _ to _ end _ test : microsoft _ app"]}, {"before_ctx": "<%> <+> protected cross _ store _ fixture fixture { get ; } protected abstract i _ test _ store _ factory < test _ store > test _ store _ factory { get ; } protected test _ store test _ store { get ; } public void dispose ( ) = > test _ store . dispose ( ) ; </%> ", "before_line": " context . database . ensure _ created ( ) ; var first = context . simple _ entities . add ( new simple _ entity { string _ property = STR } ) . entity ; set _ partition _ id ( first , context ) ; ", "after_ctx": " <%> <-> set _ partition _ id ( second , context ) ; </%>", "after_line": "context . simple _ entities . add ( new simple _ entity { string _ property = STR } ) ;", "predictions": ["var first = context . simple _ entities . add ( new get > <%> public _ property end public t = system _ check _ i <*> operation operation ) type type expression & contains from ( from [ property [ entity on entity , operation [ property <%> <+> ) ] ( from address address , operation ) ( factory model model ;"]}, {"before_ctx": "<%> <-> < sqlite _ test _ store , sqlite _ cross _ store _ fixture > </%> <%> <-> sqlite _ </%> <%> <-> sqlite _ </%> <%> <+> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sqlite _ test _ store _ factory . instance ; </%> ", "before_line": " public class shared _ in _ memory _ end _ to _ end _ test : end _ to _ end _ test < in _ memory _ test _ store , shared _ cross _ store _ fixture > ", "after_ctx": " <%> <+> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </%> <%> <-> < sql _ server _ test _ store , shared _ cross _ store _ fixture > </%>", "after_line": "public class shared _ in _ memory _ end _ to _ end _ test : end _ to _ end _ test", "predictions": ["public class shared _ in _ memory _ end _ to _ { : : _ = _ table _ model get _ select [ ] </%> shared [ STR _ ( _ model )"]}, {"before_ctx": "<%> <-> < in _ memory _ test _ store , shared _ cross _ store _ fixture > </%> <%> <+> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > in _ memory _ test _ store _ factory . instance ; </%> ", "before_line": " public class shared _ sql _ server _ end _ to _ end _ test : end _ to _ end _ test < sql _ server _ test _ store , shared _ cross _ store _ fixture > ", "after_ctx": " <%> <+> protected override i _ test _ store _ factory < test _ store > test _ store _ factory = > sql _ server _ test _ store _ factory . instance ; </%>", "after_line": "public class shared _ sql _ server _ end _ to _ end _ test : end _ to _ end _ test", "predictions": ["public class shared _ sql _ server _ end _ to _ ( protected t _ core _ ) < _ new ; builder _ = _ core _ core . id ,"]}, {"before_ctx": "<%> <*> using system ; using microsoft _ entity _ framework _ core _ test _ models _ transportation _ model ; -> using microsoft _ entity _ framework _ core _ test _ utilities ; </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public class table _ splitting _ sql _ server _ test : table _ splitting _ test _ base < sql _ server _ test _ store > ", "after_ctx": " <%> <-> private readonly string connection _ string = sql _ server _ test _ store . create _ connection _ string ( database _ name ) ; public test _ sql _ logger _ factory test _ sql _ logger _ factory { get ; } = new test _ sql _ logger _ factory ( ) ; public override sql _ server _ test _ store create _ test _ store ( action < model _ builder > on _ model _ creating ) = > sql _ server _ test _ store . get _ or _ create _ shared ( database _ name , ( ) = > { var options _ builder = new db _ context _ options _ builder ( ) . use _ sql _ server ( connection _ string , b = > b . apply _ configuration ( ) . command _ timeout ( NUM ) ) . enable _ sensitive _ data _ logging ( ) . use _ internal _ service _ provider ( build _ service _ provider ( on _ model _ creating ) ) ; </%>", "after_line": "public class table _ splitting _ sql _ server _ test : table _ splitting _ test _ base", "predictions": ["public class table _ splitting _ sql _ server _ test : table _ splitting _ test _ base"]}, {"before_ctx": "<%> <-> using system _ io ; using system _ threading ; </%> <%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public class sqlite _ test _ store : relational _ test _ store < sqlite _ connection > ", "after_ctx": " <%> <*> private static int scratch _ count ; private static string base _ directory = > app _ context . base _ directory ; public static sqlite _ test _ store get _ northwind _ store ( ) = > get _ or _ create _ shared ( STR , ( ) = > { } ) ; public static sqlite _ test _ store get _ or _ create _ shared ( string name , bool shared _ cache , action initialize _ database = null ) = > new sqlite _ test _ store ( name ) . initialize _ shared ( initialize _ database , shared _ cache ) ; public static sqlite _ test _ store get _ shared ( string name ) -> public static sqlite _ test _ store get _ or _ create ( string name ) </%>", "after_line": "public class sqlite _ test _ store : relational _ test _ store", "predictions": ["public class sqlite _ test _ store : relational _ test _ operation"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ diagnostics ; </%> <%> <+> using microsoft _ entity _ framework _ core _ test _ utilities ; using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public abstract class table _ splitting _ test _ base < t _ test _ store > where t _ test _ store : test _ store ", "after_ctx": " <%> <-> var store = </%> <%> <-> store , on _ model _ creating </%>", "after_line": "public abstract class table _ splitting _ test _ base", "predictions": ["public abstract class table _ splitting _ test _ base"]}, {"before_ctx": "<%> <+> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> <%> <*> public abstract class table _ splitting _ test _ base < t _ test _ store > where t _ test _ store : test _ store -> public abstract class table _ splitting _ test _ base </%> ", "before_line": " using ( var store = create _ test _ store ( on _ model _ creating ) ) ", "after_ctx": " <%> <-> store , on _ model _ creating </%>", "after_line": "using ( create _ test _ store ( on _ model _ creating ) )", "predictions": ["using ( create _ test _ store ( on _ model _ creating </%> </%> > ) )"]}, {"before_ctx": "<%> <-> store , on _ model _ creating </%> ", "before_line": " using ( var store = create _ test _ store ( on _ model _ creating ) ) ", "after_ctx": " <%> <-> store , on _ model _ creating </%>", "after_line": "using ( create _ test _ store ( on _ model _ creating ) )", "predictions": ["using ( var store = create _ internal _ _ = ;"]}, {"before_ctx": "<%> <-> using microsoft _ extensions _ dependency _ injection ; using microsoft _ extensions _ logging ; </%> ", "before_line": " public class sql _ server _ test _ store : relational _ test _ store < sql _ connection > ", "after_ctx": " <%> <-> private const string northwind _ name = STR ; public static readonly string northwind _ connection _ string = create _ connection _ string ( northwind _ name ) ; </%> <%> <-> = > get _ or _ create _ shared ( northwind _ name , path . combine ( path . get _ directory _ name ( typeof ( sql _ server _ test _ store ) . get _ type _ info ( ) . assembly . location ) , STR ) ) ; </%>", "after_line": "public class sql _ server _ test _ store : relational _ test _ store", "predictions": ["public class sql _ server _ test _ store : sql _ , </@>"]}, {"before_ctx": "<%> <+> if ( use _ relational _ null _ semantics ) { current _ expression = new not _ nullable _ expression ( current _ expression ) ; } </%> ", "before_line": " var reduced _ expression = new reducing _ expression _ visitor ( ) . visit _ expression ( current _ expression ) ; return reduced _ expression ; ", "after_ctx": " ", "after_line": "return current _ expression ;", "predictions": ["return current _ expression ;"]}, {"before_ctx": "<%> <+> = > table _ rebuilds . contains ( table _ name ) ? null : new [ ] { operation } ; private i _ list < migration _ operation > create _ table _ rebuild ( string table _ name , i _ model model , migration _ operation operation ) </%> <%> <*> check . not _ null ( model , nameof ( model ) ) ; -> if ( table _ rebuilds . contains ( table _ name ) ) </%> <%> <+> { return null ; } </%> <%> <*> operation . table -> table _ name </%> <%> <*> create _ table _ operation -> differences </%> <%> <+> ; var create _ table _ operation = differences </%> <%> <*> operation . table -> table _ name </%> <%> <-> ( ! </%> <%> <*> is create _ table _ operation -> = = null </%> <%> <-> ) </%> ", "before_line": " return new migration _ operation [ ] { operation } ; ", "after_ctx": " <%> <*> return new [ ] -> table _ rebuilds . add ( table _ name ) ; </%> <%> <+> var rebuild _ operations = new list < migration _ operation > </%> <%> <*> operation . table -> table _ name </%>", "after_line": "return new [ ] { operation } ;", "predictions": ["return new [ ] { operation } ;"]}, {"before_ctx": "<%> <+> abstract </%> ", "before_line": " protected value _ generator _ factory _ selector ( ) { } public value _ generator _ factory _ selector ( ", "after_ctx": " ", "after_line": "protected value _ generator _ factory _ selector (", "predictions": ["protected value _ generator _ factory _ selector , i _ ) _ ( . _ <%> _ <%> . for <%>"]}, {"before_ctx": "<%> <*> switch ( visited _ expression . node _ type ) -> if ( restricted _ binary _ expressions . try _ get _ value ( visited _ expression . node _ type , out var restricted _ types ) </%> <%> <+> & & visited _ expression is binary _ expression visited _ binary _ expression & & ( restricted _ types . contains ( get _ provider _ type ( visited _ binary _ expression . left ) ) | | restricted _ types . contains ( get _ provider _ type ( visited _ binary _ expression . right ) ) ) ) </%> ", "before_line": " case expression _ type . add : case expression _ type . subtract : case expression _ type . multiply : case expression _ type . divide : case expression _ type . modulo : return is _ date _ time _ based _ operation ( visited _ expression ) ? null : visited _ expression ; ", "after_ctx": " <%> <-> private static bool is _ date _ time _ based _ operation ( expression expression ) { if ( expression is binary _ expression binary _ expression ) { var type _ mapping = infer _ type _ mapping _ from _ column ( binary _ expression . left ) ? ? infer _ type _ mapping _ from _ column ( binary _ expression . right ) ; if ( type _ mapping ! = null </%>", "after_line": "return null ;", "predictions": ["case expression _ type . add : case expression _ type . subtract : case expression _ type . divide : ) from server _ sql ) ;"]}, {"before_ctx": " ", "before_line": " public virtual lazy _ ref < i _ state _ manager > state _ manager = > dependencies . state _ manager ; ", "after_ctx": " <%> <*> state _ manager . value . context -> dependencies </%>", "after_line": "public virtual i _ state _ manager state _ manager = > dependencies . state _ manager ;", "predictions": ["public virtual lazy _ ref < using on _ ; <%> . <%> _ _ ;"]}, {"before_ctx": " ", "before_line": " return task . from _ result ( 1 ) ; ", "after_ctx": " <%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> <%> <-> _ async </%>", "after_line": "return 1 ;", "predictions": ["return 1 ;"]}, {"before_ctx": "<%> <*> return task . from _ result ( -> return </%> <%> <-> ) </%> ", "before_line": " return task . from _ result ( 1 ) ; ", "after_ctx": " <%> <-> _ async </%>", "after_line": "return 1 ;", "predictions": ["return 1 ;"]}, {"before_ctx": " ", "before_line": " using ( var test _ database = await sql _ server _ northwind _ context . get _ shared _ store _ async ( ) ) ", "after_ctx": " <%> <-> . state _ manager </%> <%> <+> ( ) </%>", "after_line": "using ( await sql _ server _ northwind _ context . get _ shared _ store _ async ( ) )", "predictions": ["using ( var test _ database = await sql _ server _ > , ] STR )"]}, {"before_ctx": "<%> <+> . value </%> ", "before_line": " internal _ property _ builder builder , type property _ type , bool? shadow _ property , configuration _ source configuration _ source ) ", "after_ctx": " ", "after_line": "internal _ property _ builder builder , type property _ type , bool? shadow _ property , configuration _ source ? configuration _ source )", "predictions": ["internal _ property _ builder builder , type _ ) ( <*> ( ) )"]}, {"before_ctx": "<%> <+> _ mutable </%> <%> <+> _ mutable </%> <%> <*> i _ mutable _ key i _ mutable _ foreign _ key . principal _ key { debugger _ step _ through get = > principal _ key ; } i _ entity _ type i _ foreign _ key . declaring _ entity _ type -> i _ mutable _ entity _ type i _ mutable _ foreign _ key . declaring _ entity _ type </%> ", "before_line": " i _ mutable _ entity _ type i _ mutable _ foreign _ key . declaring _ entity _ type { debugger _ step _ through get = > declaring _ entity _ type ; } i _ entity _ type i _ foreign _ key . principal _ entity _ type ", "after_ctx": " <%> <*> i _ mutable _ entity _ type i _ mutable _ foreign _ key . principal _ entity _ type { debugger _ step _ through get = > principal _ entity _ type ; } i _ navigation i _ foreign _ key . dependent _ to _ principal -> i _ mutable _ navigation i _ mutable _ foreign _ key . dependent _ to _ principal </%>", "after_line": "i _ mutable _ entity _ type i _ mutable _ foreign _ key . principal _ entity _ type", "predictions": ["i _ mutable _ entity _ type i _ mutable _ foreign _ key . declaring _ entity _ type { debugger _ step _ through get = > declaring _ entity _ type ; } i _ entity _ type i _ foreign _ key . principal _ entity _ type"]}, {"before_ctx": "<%> <+> set _ </%> <%> <*> = -> ( </%> <%> <+> ) </%> ", "before_line": " public virtual i _ model finalize _ model ( ) = > builder . metadata . finalize ( ) ; ", "after_ctx": " ", "after_line": "public virtual i _ model finalize _ model ( ) = > builder . metadata . finalize _ model ( ) ;", "predictions": ["public virtual i _ model finalize _ model ( ) = > configuration . metadata <+> <+> <+> <+> <+> <+> <+> ;"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ query ; </%> ", "before_line": " not _ null i _ query _ compilation _ context _ factory query _ compilation _ context _ factory , not _ null i _ update _ adapter _ factory update _ adapter _ factory , not _ null i _ query _ compilation _ context _ factory query _ compilation _ context _ factory ) ", "after_ctx": " <%> <-> query _ compilation _ context _ factory = query _ compilation _ context _ factory ; </%> <%> <-> public i _ query _ compilation _ context _ factory query _ compilation _ context _ factory { get ; } </%>", "after_line": "not _ null i _ query _ compilation _ context _ factory query _ compilation _ context _ factory , not _ null i _ update _ adapter _ factory update _ adapter _ factory )", "predictions": ["not _ null i _ query _ compilation _ context _ factory query _ <%> _ <%> _ ( state )"]}, {"before_ctx": "<%> <-> using microsoft _ entity _ framework _ core _ infrastructure ; </%> ", "before_line": " public class query _ context : i _ disposable , i _ parameter _ values ", "after_ctx": " <%> <-> private readonly func < i _ query _ buffer > query _ buffer _ factory ; </%> <%> <-> private i _ query _ buffer query _ buffer ; </%> <%> <*> not _ null query _ context _ dependencies dependencies , not _ null func < i _ query _ buffer > query _ buffer _ factory ) -> not _ null query _ context _ dependencies dependencies ) </%> <%> <-> check . not _ null ( query _ buffer _ factory , nameof ( query _ buffer _ factory ) ) ; </%>", "after_line": "public class query _ context : i _ parameter _ values", "predictions": ["public class query _ context : i _ parameter _ values"]}, {"before_ctx": "<%> <+> case null _ conditional _ expression null _ conditional _ expression : return unwrap _ entity _ reference ( null _ conditional _ expression . access _ operation ) ; </%> ", "before_line": " var expansion = try _ expand _ navigation ( inner _ expression , member _ identity . create ( member _ expression . member ) ) ; return expansion ? ? member _ expression . update ( inner _ expression ) ; ", "after_ctx": " <%> <-> var expansion = try _ expand _ navigation ( source , member _ identity . create ( navigation _ name ) ) ; if ( expansion ! = null ) { return expansion ; </%>", "after_line": "return try _ expand _ navigation ( inner _ expression , member _ identity . create ( member _ expression . member ) ) ? ? member _ expression . update ( inner _ expression ) ;", "predictions": ["return try _ expand _ navigation ( inner _ expression , member _ core context context _ <%> </%> < ; ) i < ; ;"]}, {"before_ctx": "<%> <-> ( </%> ", "before_line": " : . one _ to _ one _ optional _ f . one _ to _ one _ optional _ f . one _ to _ one _ optional _ f ) = = null ? null : . one _ to _ one _ optional _ f . one _ to _ one _ optional _ f . one _ to _ one _ optional _ f . name ) = = STR ) ) ; ", "after_ctx": " ", "after_line": ": . one _ to _ one _ optional _ f . one _ to _ one _ optional _ f . one _ to _ one _ optional _ f . name ) = = STR ) ) ;", "predictions": [": . one _ to _ one _ optional _ f . one _ ; ) <%> <%> = </%> <@> query <-> query <-> ) not ;"]}, {"before_ctx": "<%> <*> i -> state </%> <%> <+> manager _ dependencies </%> <%> <+> _ </%> <%> <+> _ dependencies </%> <%> <-> i _ </%> <%> <+> _ dependencies command _ </%> <%> <+> _ dependencies </%> <%> <+> protected virtual i _ change _ detector change _ detector { get ; } </%> <%> <*> { var result = diff ( source , target , new diff _ context ( source , target ) ) . any ( ) ; state _ manager . reset _ state ( ) ; return result ; } -> = > diff ( source , target , new diff _ context ( source , target ) ) . any ( ) ; </%> ", "before_line": " var operations = sort ( diff ( source , target , diff _ context ) , diff _ context ) ; state _ manager . reset _ state ( ) ; return operations ; ", "after_ctx": " ", "after_line": "return sort ( diff ( source , target , diff _ context ) , diff _ context ) ;", "predictions": ["return sort ( source , target , diff _ context ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <*> select o . order _ date . get _ value _ or _ default ( ) ) ; -> select o . order _ date . get _ value _ or _ default ( new date _ time ( NUM , 1 , 1 ) ) , </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ issue"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property . entity STR , builder . explicit ) <+>"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( store _ guid , ( guid _ guid _ STR ) _ source ) ) . explicit . explicit _ inner . = compilation context context </%> </%> query -> query </%> </%> </%> <%> </%> buffer _ < private </%> </%> buffer </%> < private </%> </%> buffer _ -> </%> </%> </%>"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( int ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( guid <%> _ </@> _ </@> <%> ( int , . </%> , . STR ) ) ) ) ) . explicit . explicit context context context context context context factory </@> context context context context context context context factory entity context context context context context context context context context context context context </%> func query -> i </%> <%> <%> <%> </%> </%> </%> </%> </%> </%> </%> </%> </%> ) factory"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( int ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( guid ) , STR , configuration _ sql </%> </%> </%> </%>"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( int ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) <+>"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( int ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . configuration _ guid _ name , typeof , </@> , </@> ) ) ) ) expression ; . explicit . var ) ;"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( source ) , STR , configuration _ int . server <%> <%> <%> STR </%> = <%> </%> , ) or ) or"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( source ) , STR , configuration _ int . explicit ) ;"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . convention ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ int . entity ) ;"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ int . explicit ) ;"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;"]}, {"before_ctx": " ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ; ", "after_ctx": " ", "after_line": "var property _ builder = entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . explicit ) ;", "predictions": ["var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;"]}, {"before_ctx": " ", "before_line": " new [ ] { entity _ builder . property ( typeof ( int ) , STR , configuration _ source . convention ) . metadata . name , property . name } , ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . metadata . name , property . name } ,", "predictions": ["new [ ] { entity _ builder . property ( typeof ( guid , . . . ) ) . metadata . ) ) context factory <-> factory <-> check query check ) check"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " ( entity _ builder , property ) = > entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ) ;", "predictions": ["( entity _ builder , property ) = > entity _ builder default ) <-> <-> , var ) ) ,"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " var shadow _ property = dependent _ entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "var shadow _ property = dependent _ entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . convention ) ;", "predictions": ["var shadow _ property = dependent _ entity _ builder . property ( var , STR , configuration _ typeof . entity ) property property _ typeof . entity ) property property . configuration , typeof </%> </%> ) ;"]}, {"before_ctx": " ", "before_line": " ( entity _ builder , property ) = > entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . explicit ) ) ;", "predictions": ["( entity _ builder , property ) = > entity _ builder <%> builder ) entity ; ; ; ) ; ; , ( = inner ( try factory compilation factory compilation context factory context i </%> query . <*> ( typeof ( guid ( guid ( guid ( guid ( guid ( guid ( guid ( guid [ , 1 ( <*> ( guid ( guid ( } i i i i i i _ -> i i i ) _ { { configuration i entity _ -> i _ -> key _ -> i entity i type _"]}, {"before_ctx": "<%> <+> STR , </%> <%> <-> , STR </%> ", "before_line": " var shadow _ property = entity _ builder . property ( typeof ( guid ) , STR , configuration _ source . convention ) ; ", "after_ctx": " ", "after_line": "var shadow _ property = entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . convention ) ;", "predictions": ["var shadow _ property = entity _ builder . property ( typeof ( guid ) , STR _ source ) ; > ; > ; > ; > ; null = < b ( , ) </%>"]}, {"before_ctx": " ", "before_line": " assert . same ( property _ builder , entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) ) ; ", "after_ctx": " <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%>", "after_line": "assert . same ( property _ builder , entity _ builder . property ( order . id _ property . name , typeof ( order ) , configuration _ source . explicit ) ) ;", "predictions": ["assert . same ( property _ builder , entity _ builder . property ( typeof ( order ) , order . id . name , entity . explicit ) ) <+>"]}, {"before_ctx": "<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> ", "before_line": " var property _ builder = entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . data _ annotation ) ; ", "after_ctx": " <%> <-> typeof ( int ) , </%> <%> <+> , typeof ( int ) </%>", "after_line": "var property _ builder = entity _ builder . property ( order . id _ property . name , typeof ( order ) , configuration _ source . data _ annotation ) ;", "predictions": ["var property _ builder = entity _ builder . property ( typeof ( order ) , order . id _ property . name ( <-> , data _ ) <@> ) <@>"]}, {"before_ctx": "<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> ", "before_line": " var property _ builder = entity _ builder . property ( typeof ( int ) , order . id _ property . name , configuration _ source . convention ) ; ", "after_ctx": " <%> <-> typeof ( int ) , </%> <%> <+> , typeof ( int ) </%>", "after_line": "var property _ builder = entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention ) ;", "predictions": ["var property _ builder = entity _ builder . property ( typeof ( int ) , order . id _ property . not . not ( _ ) , _ name ) info"]}, {"before_ctx": "<%> <-> typeof ( int ) , </%> <%> <+> , typeof ( int ) </%> ", "before_line": " derived _ entity _ builder . property ( typeof ( int ) , order . id _ property . name , configuration _ source . data _ annotation ) ) . message ) ; ", "after_ctx": " ", "after_line": "derived _ entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . data _ annotation ) ) . message ) ;", "predictions": ["derived _ entity _ builder . property ( typeof ( int ) , order . id _ </%> . id ( <*> , order ) ( data ) . source , <%> ( . _ _ _ _ ( _ ( _ ( _ . _ _ _ _ _ cancellation _ model ( b , STR ( STR ( STR ) ) ( ) ( b , STR ) ) ( b ( STR ( STR ) ) ) ) ) ) > int ( b , STR ) ( b ( STR ( STR ) ) ( int"]}, {"before_ctx": " ", "before_line": " assert . null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . data _ annotation ) ) ; ", "after_ctx": " <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%>", "after_line": "assert . null ( entity _ builder . property ( order . id _ property . name , typeof ( order ) , configuration _ source . data _ annotation ) ) ;", "predictions": ["assert . null ( entity _ builder . property ( typeof ( order ) , order . id , data , data ( ) . </@> _ <@> ) ) builder"]}, {"before_ctx": "<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> ", "before_line": " entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) ) . message ) ; ", "after_ctx": " <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%>", "after_line": "entity _ builder . property ( order . id _ property . name , typeof ( order ) , configuration _ source . explicit ) ) . message ) ;", "predictions": ["entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source ( configuration int typeof ) , order . id _ <-> . id , assert ) ;"]}, {"before_ctx": "<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> ", "before_line": " assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . convention ) ) ; ", "after_ctx": " <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%>", "after_line": "assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( order ) , configuration _ source . convention ) ) ;", "predictions": ["assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration execute source . </@> . create builder _ id ) _ configuration property name _ </@> ;"]}, {"before_ctx": "<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> ", "before_line": " assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . data _ annotation ) ) ; ", "after_ctx": " <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%>", "after_line": "assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( order ) , configuration _ source . data _ annotation ) ) ;", "predictions": ["assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration <%> source ) ) ;"]}, {"before_ctx": "<%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> <%> <-> typeof ( order ) , </%> <%> <+> , typeof ( order ) </%> ", "before_line": " assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) ) ; ", "after_ctx": " ", "after_line": "assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( order ) , configuration _ source . explicit ) ) ;", "predictions": ["assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property typeof , = ( , ) ( ) ( configuration ) ) . = _ debug execute </@> _ <*> <%> _ { STR , STR ) ) <*>"]}, {"before_ctx": "<%> <*> assert . same ( property , entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . convention ) . metadata ) ; -> property . is _ shadow _ property = false ; </%> <%> <+> assert . same ( property , entity _ builder . property ( order . id _ property . name , configuration _ source . convention ) . metadata ) ; </%> ", "before_line": " entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) ) . message ) ; ", "after_ctx": " ", "after_line": "entity _ builder . property ( order . id _ property . name , typeof ( order ) , configuration _ source . explicit ) ) . message ) ;", "predictions": ["entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) . <*> connection ;"]}, {"before_ctx": "<%> <+> console _ command _ logger . is _ verbose = </%> <%> <-> debug _ helper . </%> ", "before_line": " dotnet _ tool _ dispatcher . ensure _ valid _ dispatch _ recipient ( ref args , execute _ command . get _ tool _ name ( ) ) ; return execute _ command . create ( args ) . execute ( args ) ; ", "after_ctx": " <%> <*> reporter -> console _ command _ logger </%> <%> <-> . write _ line </%>", "after_line": "return execute _ command . create ( ref args ) . execute ( args ) ;", "predictions": ["dotnet _ tool _ dispatcher . ensure _ valid _ dispatch _ recipient ( ref args , execute _ command . get _ tool _ name property ) configuration configuration configuration configuration cancellation _ . create ) ( ;"]}, {"before_ctx": " ", "before_line": " b . indexes ( ixs = > ixs . index ( STR ) ) ; ", "after_ctx": " <%> <-> model _ builder </%>", "after_line": "b . index ( STR ) ;", "predictions": ["b . indexes ( ixs = > ixs . index ( STR ) ) ;"]}, {"before_ctx": " ", "before_line": " . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; ", "after_ctx": " <%> <-> points _ to _ principal : </%> <%> <-> points _ to _ principal : </%>", "after_line": ". foreign _ key < customer > ( c = > c . customer _ id ) ;", "predictions": [". foreign _ keys ( fks = > fks . foreign _ key ( c = > </%> . c _ key _ <+> _ <+> _ id , <-> . <+> _ id . property , ;"]}, {"before_ctx": " ", "before_line": " . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; ", "after_ctx": " <%> <-> points _ to _ principal : </%>", "after_line": ". foreign _ key < customer > ( c = > c . customer _ id ) ;", "predictions": [". foreign _ keys ( fks = > fks . foreign _ key ( c = > model ) . nameof . <-> _ </@> ) ; ;"]}, {"before_ctx": " ", "before_line": " . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; ", "after_ctx": " <%> <-> points _ to _ principal : </%>", "after_line": ". foreign _ key < customer > ( c = > c . customer _ id ) ;", "predictions": [". foreign _ keys ( fks = > fks . foreign _ key ( c = > c . customer _ id . nameof _ expression ) ) ;"]}, {"before_ctx": " ", "before_line": " . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; ", "after_ctx": " <%> <-> points _ to _ principal : </%> <%> <-> points _ to _ principal : </%>", "after_line": ". foreign _ key < customer > ( c = > c . customer _ id ) ;", "predictions": [". foreign _ keys ( fks = > fks . foreign _ key ( c = > c . customer _ id ( </%> <-> > ; ; ) _ id _ id . <+> , <-> ) typeof = context ) ;"]}, {"before_ctx": " ", "before_line": " . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; ", "after_ctx": " <%> <-> points _ to _ principal : </%>", "after_line": ". foreign _ key < customer > ( c = > c . customer _ id ) ;", "predictions": [". foreign _ keys ( fks = > fks . foreign _ key ( c = > c . customer _ id ) ) ;"]}, {"before_ctx": " ", "before_line": " . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . customer _ id ) ) ; ", "after_ctx": " <%> <-> points _ to _ principal : </%>", "after_line": ". foreign _ key < customer > ( c = > c . customer _ id ) ;", "predictions": [". foreign _ keys ( fks = > fks . foreign _ key ( c = > c . customer _ id ) ) ;"]}, {"before_ctx": " ", "before_line": " . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . id ) ) ; ", "after_ctx": " <%> <-> points _ to _ principal : </%> <%> <-> points _ to _ principal : </%>", "after_line": ". foreign _ key < customer > ( c = > c . id ) ;", "predictions": [". foreign _ keys ( fks = > fks . foreign _ key ( c = > c . id ) ) to . id ) <@> <@>"]}, {"before_ctx": " ", "before_line": " . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . id ) ) ; ", "after_ctx": " <%> <-> points _ to _ principal : </%>", "after_line": ". foreign _ key < customer > ( c = > c . id ) ;", "predictions": [". foreign _ keys ( fks = > fks . foreign _ key ( c = > test ; test ;"]}, {"before_ctx": " ", "before_line": " . foreign _ keys ( fks = > fks . foreign _ key < customer > ( c = > c . id ) ) ; ", "after_ctx": " <%> <-> points _ to _ principal : </%>", "after_line": ". foreign _ key < customer > ( c = > c . id ) ;", "predictions": [". foreign _ keys ( fks = > fks . foreign _ key ( c = > <%> STR ) ) <+>"]}, {"before_ctx": "<%> <*> model _ builder . entity ( STR , b = > -> model _ builder . entity ( STR , b = > </%> <%> <*> b . foreign _ keys ( fks = > fks -> b </%> <%> <-> ) </%> <%> <*> b . indexes ( ixs = > ixs -> b </%> <%> <-> ) </%> ", "before_line": " model _ builder . entity ( STR , b = > b . foreign _ keys ( fks = > fks . foreign _ key ( STR , STR ) ) ) ; ", "after_ctx": " <%> <*> new column ( STR , typeof ( int ) ) { is _ nullable = false } , is _ destructive _ change : true ) ; -> new column ( STR , typeof ( int ) ) { is _ nullable = false } , true ) ; </%> <%> <-> new column ( STR , typeof ( int ) ) { is _ nullable = false } , </%>", "after_line": "model _ builder . entity ( STR , b = > b . foreign _ key ( STR , STR ) ) ;", "predictions": ["model _ builder . entity ( STR , b = > b . foreign _ key ( STR , STR ) ) ;"]}, {"before_ctx": " ", "before_line": " b . foreign _ keys ( fk = > fk . foreign _ key < fake _ entity > ( c = > c . related _ id ) ) ; ", "after_ctx": " <%> <-> . foreign _ keys ( fk = > fk </%> <%> <-> ) </%>", "after_line": "b . foreign _ key < fake _ entity > ( c = > c . related _ id ) ;", "predictions": ["b . foreign _ keys ( fk = > fk . foreign _ key ( c = . name ( <+> typeof _ message ) int . related _ <@> ) ) <->"]}, {"before_ctx": "<%> <*> b . foreign _ keys ( fk = > fk -> b </%> <%> <-> ) </%> ", "before_line": " . foreign _ keys ( fk = > fk . foreign _ key < related _ fake _ entity > ( c = > c . related _ id ) ) ; ", "after_ctx": " ", "after_line": ". foreign _ key < related _ fake _ entity > ( c = > c . related _ id ) ;", "predictions": [". foreign _ keys ( c = > c . related _ key ) ;"]}, {"before_ctx": "<%> <-> i _ model model </%> <%> <*> if ( ! exists -> using ( var master _ connection = connection . create _ master _ connection </%> ", "before_line": " using ( var master _ connection = connection . create _ master _ connection ( ) ) { statement _ executor . execute _ non _ query ( master _ connection , create _ create _ operations ( ) ) ; clear _ pool ( ) ; } ", "after_ctx": " <%> <+> } public override async task create _ async ( cancellation _ token cancellation _ token = default ( cancellation _ token ) ) { using ( var master _ connection = connection . create _ master _ connection ( ) ) { await statement _ executor . execute _ non _ query _ async ( master _ connection , create _ create _ operations ( ) , cancellation _ token ) ; clear _ pool ( ) ; } } </%>", "after_line": "statement _ executor . execute _ non _ query ( master _ connection , create _ create _ operations ( ) ) ; clear _ pool ( ) ;", "predictions": ["statement _ executor . execute _ non _ query ( master _ connection , create _ create _ operations ( ) ) ; clear _ pool ) . false . -> . -> . -> . execute ( STR . , _ > . text ) object"]}, {"before_ctx": "<%> <-> check . not _ null ( model , nameof ( model ) ) ; </%> ", "before_line": " new expression _ string _ builder ( ) . build ( check . not _ null ( query , nameof ( query ) ) ) , ", "after_ctx": " ", "after_line": "new expression _ string _ builder ( ) . build ( query ) ,", "predictions": ["new expression _ string _ builder ( ) . build ( check . not _ null ( c ( c . c . c . c . c . c . </%> ) ) ( ) ( </%> ( <-> ) ) ) ,"]}, {"before_ctx": "<%> <-> check . not _ null ( model , nameof ( model ) ) ; check . not _ null ( entity _ tracking _ info _ factory , nameof ( entity _ tracking _ info _ factory ) ) ; </%> ", "before_line": " check . not _ null ( query _ compilation _ context , nameof ( query _ compilation _ context ) ) ) ; ", "after_ctx": " ", "after_line": "query _ compilation _ context ) ;", "predictions": ["check . not _ null ( nameof ( query _ compilation _ context ) ) ;"]}, {"before_ctx": "<%> <+> using microsoft _ data _ entity _ functional _ tests _ test _ utilities _ xunit ; </%> ", "before_line": " using microsoft _ data _ entity _ functional _ tests _ test _ utilities _ xunit ; ", "after_ctx": " ", "after_line": "using xunit ;", "predictions": ["using microsoft _ data _ entity _ functional _ tests _ test _ utilities ;"]}, {"before_ctx": "<%> <-> [ not _ null ] </%> <%> <-> [ not _ null ] </%> <%> <*> public virtual void foreign _ key _ property _ changed ( not _ null internal _ entity _ entry entry , [ not _ null ] i _ property property , [ can _ be _ null ] object old _ value , [ can _ be _ null ] object new _ value ) -> public virtual void foreign _ key _ property _ changed ( internal _ entity _ entry entry , i _ property property , object old _ value , object new _ value ) </%> <%> <*> public virtual void navigation _ reference _ changed ( not _ null internal _ entity _ entry entry , [ not _ null ] i _ navigation navigation , [ can _ be _ null ] object old _ value , [ can _ be _ null ] object new _ value ) -> public virtual void navigation _ reference _ changed ( internal _ entity _ entry entry , i _ navigation navigation , object old _ value , object new _ value ) </%> ", "before_line": " public virtual void navigation _ collection _ changed ( not _ null internal _ entity _ entry entry , [ not _ null ] i _ navigation navigation , [ not _ null ] i _ set < object > added , [ not _ null ] i _ set < object > removed ) ", "after_ctx": " <%> <*> public virtual void principal _ key _ property _ changed ( not _ null internal _ entity _ entry entry , [ not _ null ] i _ property property , [ can _ be _ null ] object old _ value , [ can _ be _ null ] object new _ value ) -> public virtual void principal _ key _ property _ changed ( internal _ entity _ entry entry , i _ property property , object old _ value , object new _ value ) </%> <%> <-> [ not _ null ] </%> <%> <-> [ not _ null ] </%> <%> <-> [ not _ null ] </%> <%> <-> [ not _ null ] </%>", "after_line": "public virtual void navigation _ collection _ changed ( internal _ entity _ entry entry , i _ navigation navigation , i _ set < object > added , i _ set < object > removed )", "predictions": ["public virtual void navigation _ collection _ changed ( not _ null internal _ entity _ entry entry , [ not _ null ] i _ navigation navigation , [ not _ null ] i _ set < object > removed )"]}, {"before_ctx": " ", "before_line": " not _ null i _ relational _ value _ buffer _ factory _ factory value _ buffer _ factory _ factory ) not _ null i _ update _ sql _ generator update _ sql _ generator , ", "after_ctx": " <%> <+> check . not _ null ( sql _ generator , nameof ( sql _ generator ) ) ; </%>", "after_line": "not _ null i _ relational _ value _ buffer _ factory _ factory value _ buffer _ factory _ factory ,", "predictions": ["not _ null i _ update _ sql _ buffer _ ) ref"]}, {"before_ctx": "<%> <*> dictionary -> cache </%> ", "before_line": " | | declaring _ type = = typeof ( entity _ framework _ queryable _ extensions ) ", "after_ctx": " <%> <*> . equals ( entity _ framework _ queryable _ extensions . string _ include _ method _ info ) ) ) -> . equals ( entity _ framework _ queryable _ extensions . string _ include _ method _ info ) ) </%> <%> <+> & & ! method _ info . get _ generic _ method _ definition ( ) . equals ( entity _ framework _ queryable _ extensions . with _ tag _ method _ info ) ) ) </%>", "after_line": "| | ( declaring _ type = = typeof ( entity _ framework _ queryable _ extensions )", "predictions": ["| | declaring _ type = = typeof ( entity _ framework _ queryable _ extensions )"]}, {"before_ctx": " ", "before_line": " operation . increment _ by , operation . min _ value , operation . max _ value , operation . is _ cyclic , ", "after_ctx": " <%> <-> operation . increment _ by , </%>", "after_line": "operation ,", "predictions": ["operation . increment _ by , operation . min _ value _ ( framework ( </%> entity _ cyclic , . is query entity ;"]}, {"before_ctx": "<%> <*> operation . increment _ by , operation . min _ value , operation . max _ value , operation . is _ cyclic , -> operation , </%> ", "before_line": " operation . increment _ by , operation . min _ value , operation . max _ value , operation . is _ cyclic , ", "after_ctx": " <%> <*> int increment , long? minimum _ value , long? maximum _ value , bool cycle , -> not _ null sequence _ operation operation , </%>", "after_line": "operation ,", "predictions": ["operation . increment _ by , operation . min _ value _ query _ query _ target ( . , ( ) ) _ <%> _ <%> _ <%> _ new ("]}, {"before_ctx": " ", "before_line": " operation . clr _ type , operation . is _ unicode , operation . max _ length , operation . is _ fixed _ length , operation . is _ row _ version , ", "after_ctx": " <%> <-> operation . old _ column . clr _ type , operation . old _ column . is _ unicode , operation . old _ column . max _ length , operation . old _ column . is _ fixed _ length , </%>", "after_line": "operation ,", "predictions": ["operation . clr _ type , operation . is _ unicode query query ; </%> ; configuration _ length . method _ fixed _ length . method _ string . method . method _ | _ | . <%> ( builder ( <%> . type _ <%> _ <%> builder ) builder"]}, {"before_ctx": "<%> <+> ? </%> <%> <+> ? </%> ", "before_line": " can _ be _ null ref t _ related navigation _ field , ", "after_ctx": " <%> <*> null -> STR </%>", "after_line": "can _ be _ null ref t _ related ? navigation _ field ,", "predictions": ["can _ be _ null ? navigation _ field ,"]}, {"before_ctx": "<%> <+> # nullable enable </%> ", "before_line": " can _ be _ null ref t _ value target , ", "after_ctx": " <%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%>", "after_line": "can _ be _ null ref t _ value ? target ,", "predictions": ["can _ be _ null ref t _ value target ,"]}, {"before_ctx": "<%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%> <%> <+> ! </%> ", "before_line": " can _ be _ null ref t _ value target , ", "after_ctx": " <%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%>", "after_line": "can _ be _ null ref t _ value ? target ,", "predictions": ["t _ value target ,"]}, {"before_ctx": "<%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%> <%> <+> ! </%> ", "before_line": " can _ be _ null ref t _ value target , ", "after_ctx": " <%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%>", "after_line": "can _ be _ null ref t _ value ? target ,", "predictions": ["t _ value target ,"]}, {"before_ctx": "<%> <*> if ( volatile . read ( ref target ) ! = null ) -> var tmp = volatile . read ( ref target ) ; </%> <%> <+> if ( tmp ! = null ) </%> <%> <*> target -> tmp </%> <%> <+> ! </%> ", "before_line": " can _ be _ null ref t _ value target , ", "after_ctx": " <%> <+> ! </%> <%> <+> ! </%>", "after_line": "can _ be _ null ref t _ value ? target ,", "predictions": ["can _ be _ null ref t _ value target ,"]}, {"before_ctx": "<%> <+> values [ i ] = value ; </%> ", "before_line": " private t _ entity find _ tracked ( object [ ] key _ values , out i _ read _ only _ list < i _ property > key _ properties ) ", "after_ctx": " ", "after_line": "private t _ entity ? find _ tracked ( object [ ] key _ values , out i _ read _ only _ list < i _ property > key _ properties )", "predictions": ["private t _ entity find _ tracked ( object [ ] microsoft _ </%> _ list , , using new , , ) target ( ) ! ( ) target ( ) ! ( ) target ( ) ! ( ) {"]}, {"before_ctx": " ", "before_line": " protected class relational _ type _ mapping _ info : core _ type _ mapper . type _ mapping _ info ", "after_ctx": " <%> <+> if ( </%> <%> <*> store _ type _ name ? ? get _ column _ type ( property ) ; if ( store _ type _ name = -> = null & & property ! </%>", "after_line": "protected class relational _ type _ mapping _ info : type _ mapping _ info", "predictions": ["protected class relational _ type _ mapping _ info : type <%> <%> core _ . _ </%>"]}, {"before_ctx": "<%> <-> protected override entity _ type _ builder new ( internal _ entity _ type _ builder builder ) = > new entity _ type _ builder < t _ entity > ( builder ) ; </%> <%> <*> ( -> new </%> <%> <*> ) base -> ( builder </%> <%> <+> , configuration _ source . explicit ) </%> <%> <*> ( -> new </%> <%> <*> ) base -> ( builder </%> <%> <+> , configuration _ source . explicit ) </%> ", "before_line": " = > ( entity _ type _ builder < t _ entity > ) base . has _ base _ type ( typeof ( t _ base _ type ) ) ; ", "after_ctx": " ", "after_line": "= > has _ base _ type ( typeof ( t _ base _ type ) ) ;", "predictions": ["= > ( entity _ type _ builder ) base . has _ base _ type ( typeof entity _ base _ type ( var ( var _ base _ type ( var _ ; ( type ( var _ base _ type ) . <*> . <*> . typeof . has . <*> . typeof . <*> . <*> . annotations . annotations . annotations . annotations . annotations . annotations . annotations . annotations . annotations . has . annotations ) . has . has . has . typeof . typeof . typeof . typeof . typeof ."]}, {"before_ctx": "<%> <*> foreach ( var entity _ accessor in entity _ accessors ) -> foreach ( var entity in entity _ accessors </%> <%> <+> . select ( entity _ accessor = > entity _ accessor ( ( t _ in ) result ) ) . where ( entity = > entity ! = null ) ) </%> ", "before_line": " var entity = entity _ accessor ( ( t _ in ) result ) ; if ( entity ! = null ) { query _ context . query _ buffer . start _ tracking ( entity ) ; } ", "after_ctx": " <%> <*> public virtual method _ info track _ entities { get { return track _ entities ; } } -> public virtual method _ info track _ entities = > track _ entities ; </%>", "after_line": "query _ context . query _ buffer . start _ tracking ( entity ) ;", "predictions": ["query _ context . query _ buffer . start _ tracking ( entity ) ;"]}, {"before_ctx": "<%> <*> foreach -> return results . select </%> <%> <-> var </%> <%> <*> in results ) -> = > </%> <%> <*> foreach ( var entity _ accessor in entity _ accessors ) -> foreach ( var entity in entity _ accessors </%> <%> <+> . select ( entity _ accessor = > entity _ accessor ( ( t _ in ) result ) ) . where ( entity = > entity ! = null ) ) </%> ", "before_line": " var entity = entity _ accessor ( ( t _ in ) result ) ; if ( entity ! = null ) { query _ context . query _ buffer . start _ tracking ( entity ) ; } ", "after_ctx": " <%> <-> yield return result ; </%> <%> <-> else { yield return null ; } } } public virtual method _ info track _ entities </%>", "after_line": "query _ context . query _ buffer . start _ tracking ( entity ) ;", "predictions": ["query _ context . query _ buffer . start _ tracking ( entity ) ;"]}, {"before_ctx": " ", "before_line": " sql _ server _ update _ sql _ generator . results _ grouping append _ bulk _ insert _ operation ( ", "after_ctx": " <%> <*> not _ null i _ read _ only _ list < modification _ command > modification _ commands ) ; -> not _ null i _ read _ only _ list < modification _ command > modification _ commands , </%> <%> <+> int command _ position ) ; </%>", "after_line": "results _ grouping append _ bulk _ insert _ operation (", "predictions": ["sql _ server _ update _ sql _ generator . results ,"]}, {"before_ctx": " ", "before_line": " not _ null string name , configuration _ source configuration _ source , bool? owned = false , bool throw _ on _ query = false ) = > entity ( new type _ identity ( name ) , configuration _ source , owned , throw _ on _ query ) ; ", "after_ctx": " <%> <*> , bool throw _ on _ query = false ) -> ) </%> <%> <-> , throw _ on _ query </%> <%> <*> , bool throw _ on _ query ) -> ) </%>", "after_line": "not _ null string name , configuration _ source configuration _ source , bool? owned = false ) = > entity ( new type _ identity ( name ) , configuration _ source , owned ) ;", "predictions": ["configuration _ source configuration _ source , configuration _ source configuration ( . type = = ) = entity _ ? . type . type _ identity annotations . : : type var var var var var var var annotations new . ( _ ) configuration -> entity _ </%> entity ( ! _ ) configuration entity entity </%> -> ( query _ ) entity _ </%> ( <%> _ ) entity _ </%> ( . <+> _ public ( } ( <%> _ ) entity entity ( ! ( . . ) ( ! ( . _ ) _"]}, {"before_ctx": " ", "before_line": " var entity _ type _ builder = entity _ type _ builder . metadata . is _ query _ type ? entity _ type _ builder . model _ builder . query ( entity _ type , annotations _ builder . configuration _ source ) : entity _ type _ builder . model _ builder . entity ( ", "after_ctx": " <%> <-> var entity _ type _ builder = entity _ type _ builder . metadata . is _ query _ type ? entity _ type _ builder . model _ builder . query ( entity _ type _ name , annotations _ builder . configuration _ source ) : entity _ type _ builder . model _ builder . entity ( </%>", "after_line": "var entity _ type _ builder = entity _ type _ builder . model _ builder . entity (", "predictions": ["var entity _ type _ builder = entity _ type _ builder . is _ query _ type : ? entity _ type _ . builder _ . builder _ metadata builder _ . builder _ . builder _ metadata builder"]}, {"before_ctx": "<%> <*> var entity _ type _ builder = entity _ type _ builder . metadata . is _ query _ type ? entity _ type _ builder . model _ builder . query ( entity _ type , annotations _ builder . configuration _ source ) : entity _ type _ builder . model _ builder . entity ( -> var entity _ type _ builder = entity _ type _ builder . model _ builder . entity ( </%> ", "before_line": " var entity _ type _ builder = entity _ type _ builder . metadata . is _ query _ type ? entity _ type _ builder . model _ builder . query ( entity _ type _ name , annotations _ builder . configuration _ source ) : entity _ type _ builder . model _ builder . entity ( ", "after_ctx": " ", "after_line": "var entity _ type _ builder = entity _ type _ builder . model _ builder . entity (", "predictions": ["var entity _ type _ builder = entity _ type _ builder . model _ builder . query </%> </%> _ <%> _ select -> <*> <*> _ entity ) } ( ( ( ( ( select _ <%> _ select _ <%> _ select _ <%> _ entity -> _ entity ) } } _ entity ) } ( ( ( ( ( ( _ <%> _ select _ <%> _ entity -> ) ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( select _ <%> _ select _ <%> _ select"]}, {"before_ctx": "<%> <*> internal -> infrastructure </%> ", "before_line": " using microsoft _ entity _ framework _ core _ query _ expressions _ internal ; using microsoft _ entity _ framework _ core _ query _ internal ; using microsoft _ entity _ framework _ core _ query _ navigation _ expansion ; using microsoft _ entity _ framework _ core _ query _ pipeline ; ", "after_ctx": " <%> <*> pipeline -> internal </%> <%> <+> private const string compiled _ query _ parameter _ prefix = STR ; </%>", "after_line": "using microsoft _ entity _ framework _ core _ query _ navigation _ expansion _ internal ;", "predictions": ["using microsoft _ entity _ framework _ core _ query _ <@> ) )"]}, {"before_ctx": "<%> <+> using microsoft _ entity _ framework _ core _ infrastructure ; </%> ", "before_line": " using microsoft _ entity _ framework _ core _ query _ expressions _ internal ; using microsoft _ entity _ framework _ core _ query _ internal ; using microsoft _ entity _ framework _ core _ query _ navigation _ expansion ; namespace microsoft _ entity _ framework _ core _ query _ pipeline ", "after_ctx": " ", "after_line": "using microsoft _ entity _ framework _ core _ query _ navigation _ expansion _ internal ; namespace microsoft _ entity _ framework _ core _ query _ internal", "predictions": ["namespace microsoft _ entity _ framework _ core _ query _ row _ <->"]}, {"before_ctx": " ", "before_line": " using microsoft _ entity _ framework _ core _ query _ expressions _ internal ; using microsoft _ entity _ framework _ core _ query _ internal ; namespace microsoft _ entity _ framework _ core _ query _ pipeline ", "after_ctx": " <%> <-> public null _ check _ removing _ expression _ visitor ( ) { } </%>", "after_line": "namespace microsoft _ entity _ framework _ core _ query _ internal", "predictions": ["namespace microsoft _ entity _ framework _ core _ query _ ?"]}, {"before_ctx": " ", "before_line": " select top ( p ) [ c ] . [ customer _ id ] , [ c ] . [ company _ name ] , coalesce ( [ c ] . [ region ] , n ' zz ' ) as [ c ] ", "after_ctx": " <%> <*> c -> region </%> <%> <*> c -> region </%>", "after_line": "select top ( p ) [ c ] . [ customer _ id ] , [ c ] . [ company _ name ] , coalesce ( [ c ] . [ region ] , n ' zz ' ) as [ region ]", "predictions": ["select top ( p ) . [ customer _ id ] sql _ <%> core ; value <%> on ' target ) </%> _ ' value </%> ( <%> ) target target </%> </%> ' null null"]}, {"before_ctx": "<%> <*> object -> string </%> ", "before_line": " ( string container _ id , j _ token document , object partition _ key ) parameters ) ", "after_ctx": " <%> <*> object -> string </%>", "after_line": "( string container _ id , j _ token document , string partition _ key ) parameters )", "predictions": ["( string container _ id , j _ token document , string parameters [ <+> & parameters ( command operation _ </@> . operation . operation is <+> core entity core core core core entity entity core core ;"]}, {"before_ctx": "<%> <*> object -> string </%> ", "before_line": " ( string container _ id , string item _ id , j _ object document , object partition _ key ) parameters ) ", "after_ctx": " <%> <*> object -> string </%>", "after_line": "( string container _ id , string item _ id , j _ object document , string partition _ key ) parameters )", "predictions": ["( string container _ id , string item _ id , as [ factory <+> ( command -> , query entity entity query query query query key query query query query query query query query query query query target target target target target method method method method method method method method method method <%> <%> <%> _ -> builder builder <%> = ) <+> <%> <%> _ -> <%> <+> <%> )"]}, {"before_ctx": "<%> <*> object -> string </%> ", "before_line": " ( string container _ id , string item _ id , j _ object document , object partition _ key ) parameters , ", "after_ctx": " ", "after_line": "( string container _ id , string item _ id , j _ object document , string partition _ key ) parameters ,", "predictions": ["( string container _ id , string item _ id , key object string , entity ; & ( framework core core <%> <%> ) ,"]}, {"before_ctx": "<%> <*> object -> string </%> ", "before_line": " ( string container _ id , string document _ id , object partition _ key ) parameters ) ", "after_ctx": " <%> <*> object -> string </%>", "after_line": "( string container _ id , string document _ id , string partition _ key ) parameters )", "predictions": ["( string container _ id , string document _ id , , , > check <%> </%> read framework sql )"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <+> string _ enum ? param = string _ enum . value ; assert . same ( entity , context . set < mapped _ nullable _ data _ types > ( ) . single ( e = > e . int = = NUM & & e . enum _ as _ nvarchar = = param ) ) ; string _ enum ? param = string _ enum . value ; assert . same ( entity , context . set < mapped _ nullable _ data _ types > ( ) . single ( e = > e . int = = NUM & & e . enum _ as _ varchar _ max = = param ) ) ; </%> ", "before_line": " fact _ skip _ task _ list ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <+> , STR </%> <%> <+> , STR </%> ", "before_line": " system . linq . expressions . expression . new _ array _ init ( ", "after_ctx": " <%> <*> navigation _ extensions -> n </%> <%> <-> ( i _ navigation ) n </%>", "after_line": "expression . new _ array _ init (", "predictions": ["new _ array _ init ("]}, {"before_ctx": "<%> <-> system . linq . expressions . </%> ", "before_line": " var target _ type = navigation _ extensions . get _ target _ type ( ( i _ navigation ) n ) ; ", "after_ctx": " ", "after_line": "var target _ type = n . get _ target _ type ( ) ;", "predictions": ["var target _ type = get _ line _ <%> ( ( builder line . </@> _ ( _ <%> ; ;"]}, {"before_ctx": " ", "before_line": " func < i _ async _ enumerable < t > > source , type context _ type , i _ logger logger ) ", "after_ctx": " <%> <-> func < </%> <%> <-> > </%> <%> <+> _ async </%> <%> <*> factory -> enumerable </%> <%> <*> public exception _ interceptor ( func < -> public exception _ interceptor ( </%> <%> <-> > </%> <%> <+> _ async </%> <%> <*> factory -> enumerable </%>", "after_line": "i _ async _ enumerable < t > source , type context _ type , i _ logger logger )", "predictions": ["func < i _ async _ enumerable scope parent <%> result parent </@> , as = context int int . . )"]}, {"before_ctx": "<%> <+> public static bool is _ create _ method ( [ not _ null ] method _ call _ expression method _ call _ expression ) { check . not _ null ( method _ call _ expression , nameof ( method _ call _ expression ) ) ; return reference _ equals ( method _ call _ expression . method , create _ value _ buffer _ method _ info ) | | method _ call _ expression . method . method _ is _ closed _ form _ of ( create _ entity _ method _ info ) ; } </%> ", "before_line": " private static query _ result _ scope < value _ buffer > create _ value _ buffer ( ", "after_ctx": " <%> <-> query _ context query _ context , query _ result _ scope parent _ query _ result _ scope , </%> <%> <*> = > new query _ result _ scope < value _ buffer > ( query _ source , value _ buffer . with _ offset ( value _ buffer _ offset ) , parent _ query _ result _ scope ) ; -> = > value _ buffer . with _ offset ( value _ buffer _ offset ) ; </%>", "after_line": "private static value _ buffer create _ value _ buffer (", "predictions": ["private static query _ result _ scope create _ value _ buffer ("]}, {"before_ctx": "<%> <+> } </%> <%> <-> query _ result _ scope < </%> <%> <-> > </%> <%> <-> query _ context query _ context , query _ result _ scope parent _ query _ result _ scope , </%> ", "before_line": " = > new query _ result _ scope < value _ buffer > ( query _ source , value _ buffer . with _ offset ( value _ buffer _ offset ) , parent _ query _ result _ scope ) ; ", "after_ctx": " <%> <-> query _ result _ scope < </%> <%> <-> > </%> <%> <-> query _ context query _ context , query _ result _ scope parent _ query _ result _ scope , </%>", "after_line": "= > value _ buffer . with _ offset ( value _ buffer _ offset ) ;", "predictions": ["= > new query _ result _ ( param _ source enum _ ( <*> </%> <-> _ query _ ( _ ) create _ not _ ( ;"]}, {"before_ctx": "<%> <-> query _ result _ scope < </%> <%> <-> > </%> <%> <-> query _ context query _ context , query _ result _ scope parent _ query _ result _ scope , </%> <%> <*> = > new query _ result _ scope < value _ buffer > ( query _ source , value _ buffer . with _ offset ( value _ buffer _ offset ) , parent _ query _ result _ scope ) ; -> = > value _ buffer . with _ offset ( value _ buffer _ offset ) ; </%> ", "before_line": " private static query _ result _ scope < t _ entity > create _ entity < t _ entity > ( ", "after_ctx": " <%> <-> query _ context query _ context , query _ result _ scope parent _ query _ result _ scope , </%> <%> <+> query _ context query _ context , </%>", "after_line": "private static t _ entity create _ entity < t _ entity > (", "predictions": ["private static query _ result _ scope create _ entity ("]}, {"before_ctx": "<%> <*> not _ null entity _ query _ model _ visitor query _ model _ visitor , not _ null i _ query _ source query _ source ) -> entity _ query _ model _ visitor query _ model _ visitor , i _ query _ source query _ source ) </%> ", "before_line": " check . not _ null ( query _ source , nameof ( query _ source ) ) ) ; ", "after_ctx": " ", "after_line": "query _ source ) ;", "predictions": ["check . not _ null ( nameof enumerable <*> </%> <%> < </%> _ result scope scope scope ) ? entity < & ( query _ result scope scope scope scope ) >"]}, {"before_ctx": " ", "before_line": " func < i _ enumerable < t > > source , type context _ type , i _ logger logger ) ", "after_ctx": " <%> <-> func < </%> <%> <-> > </%> <%> <*> factory -> enumerable </%> <%> <*> public exception _ interceptor ( func < -> public exception _ interceptor ( </%> <%> <-> > </%> <%> <*> factory -> enumerable </%>", "after_line": "i _ enumerable < t > source , type context _ type , i _ logger logger )", "predictions": ["func < i _ enumerable < t model model i source source source source source source source ; ;"]}, {"before_ctx": "<%> <*> not _ null entity _ query _ model _ visitor query _ model _ visitor , not _ null i _ query _ source query _ source ) -> entity _ query _ model _ visitor query _ model _ visitor , i _ query _ source query _ source ) </%> ", "before_line": " check . not _ null ( query _ source , nameof ( query _ source ) ) ) ; ", "after_ctx": " ", "after_line": "query _ source ) ;", "predictions": ["check . not _ null ( nameof ( query _ source ) ) exception exception exception exception ;"]}, {"before_ctx": " ", "before_line": " command _ string _ builder . append ( STR ) . append _ line ( ) ; ", "after_ctx": " <%> <+> _ line </%> <%> <-> ) . append _ line ( </%>", "after_line": "command _ string _ builder . append _ line ( STR ) ;", "predictions": ["command _ string _ builder . append _ target . append _ line ( builder ( builder ( builder </%> entity entity ;"]}, {"before_ctx": "<%> <-> . append ( STR ) </%> <%> <+> STR </%> ", "before_line": " command _ string _ builder . append ( sql _ generation _ helper . statement _ terminator ) . append _ line ( ) ; ", "after_ctx": " ", "after_line": "command _ string _ builder . append _ line ( sql _ generation _ helper . statement _ terminator ) ;", "predictions": ["command _ string _ builder . append </%> </%> . statement . ) . ) _ STR = </%> > > > > {"]}, {"before_ctx": "<%> <+> _ line </%> <%> <-> . append _ line ( ) </%> ", "before_line": " . append ( sql _ generation _ helper . statement _ terminator ) . append _ line ( ) ; ", "after_ctx": " ", "after_line": ". append _ line ( sql _ generation _ helper . statement _ terminator ) ;", "predictions": [". append ( sql _ generation . = ( . = <@> _ expression ( ( ( = _ } ( ( a ) ) ) ) {"]}, {"before_ctx": " ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > { a . has _ base _ type ( a ) ; } ) . message ) ; ", "after_ctx": " <%> <-> { </%> <%> <-> ; } </%> <%> <-> { </%> <%> <-> ; } </%>", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > a . has _ base _ type ( a ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation _ d > { { { , , , , , <%> not _ _ -> source enum string _ > _ int _ -> < = <%> value _ </%> value _ </%> expression ) method _ _ _ context _ context _ context _ context _ context ) method method method method method method method method _"]}, {"before_ctx": "<%> <-> { </%> <%> <-> ; } </%> ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > { a . has _ base _ type ( b ) ; } ) . message ) ; ", "after_ctx": " <%> <-> { </%> <%> <-> ; } </%>", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > a . has _ base _ type ( b ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation _ has > ( ( ) = > a } base <%> <%> _ message _ </@> _ message ) query"]}, {"before_ctx": "<%> <-> { </%> <%> <-> ; } </%> <%> <-> { </%> <%> <-> ; } </%> ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > { a . has _ base _ type ( d ) ; } ) . message ) ; ", "after_ctx": " <%> <-> { </%> <%> <-> ; } </%>", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > a . has _ base _ type ( d ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation -> ) enumerable func func -> </%> _ null ) ) ) ) <"]}, {"before_ctx": "<%> <-> { </%> <%> <-> ; } </%> ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > { b . has _ base _ type ( a ) ; } ) . message ) ; ", "after_ctx": " <%> <-> { </%> <%> <-> ; } </%>", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ base _ type ( a ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation _ exception > ( ( ) <@> > base . invalid _ d -> type , <%> <%> </%> <%> <%> <%> <%> _ message _ message _ message ) ."]}, {"before_ctx": "<%> <-> { </%> <%> <-> ; } </%> ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > { b . has _ base _ type ( a ) ; } ) . message ) ; ", "after_ctx": " <%> <-> { </%> <%> <-> ; } </%>", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ base _ type ( a ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ exception _ type <*> <%> _ </@> _ type _ message <%> _ context ) query _ query query query _ message . message . with <%>"]}, {"before_ctx": "<%> <-> { </%> <%> <-> ; } </%> ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > { a . has _ base _ type ( b ) ; } ) . message ) ; ", "after_ctx": " ", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > a . has _ base _ type ( b ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation entity context reader reader _ = ; a <-> </%> ) </%> ) </%> b ) </%>"]}, {"before_ctx": " ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > { b . has _ base _ type ( a ) ; } ) . message ) ; ", "after_ctx": " <%> <-> { </%> <%> <-> ; } </%>", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ base _ type ( a ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation _ exception > ( ( ) <-> { b <-> has ; base ; > > message ) </%>"]}, {"before_ctx": "<%> <-> { </%> <%> <-> ; } </%> ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > { b . has _ base _ type ( a ) ; } ) . message ) ; ", "after_ctx": " <%> <-> { </%> <%> <-> ; } </%>", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ base _ type ( a ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ base _ type { public not _ _ query type , ( <%> exception func -> source <*> factory <%> _ context _ = _ nullable _ data param _ nullable e _ data param _ nullable _ data param param _ nullable e enum & enum _ = <%> <%> <+> </%> ) _ with _ with _ with _ with ( </%> _ _ _ . <%> ) _ with _ with _ with _ with ( ) _"]}, {"before_ctx": "<%> <-> { </%> <%> <-> ; } </%> ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > { b . has _ base _ type ( a ) ; } ) . message ) ; ", "after_ctx": " <%> <-> { </%> <%> <-> ; } </%>", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ base _ type ( a ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation _ exception > ( ( ) = > b . has _ base _ type ( a <%> <%> <%> <%> a <%> _ message _ message _ type ) _ message <%> <%> ) </%>"]}, {"before_ctx": "<%> <-> { </%> <%> <-> ; } </%> ", "before_line": " assert . throws < invalid _ operation _ exception > ( ( ) = > { a . has _ base _ type ( b ) ; } ) . message ) ; ", "after_ctx": " ", "after_line": "assert . throws < invalid _ operation _ exception > ( ( ) = > a . has _ base _ type ( b ) ) . message ) ;", "predictions": ["assert . throws < invalid _ operation _ exception > ( ( ) = reader ) . enumerable _ has ;"]}, {"before_ctx": " ", "before_line": " cb . owns _ one ( c = > c . sub _ child , scb = > { scb . has _ foreign _ key ( STR ) ; } ) ; ", "after_ctx": " <%> <-> { </%> <%> <-> ; } </%>", "after_line": "cb . owns _ one ( c = > c . sub _ child , scb = > scb . has _ foreign _ key ( STR ) ) ;", "predictions": ["cb . owns _ one ( c > { } _ type </@> ) ( < { < < execute ) ) <%> <%> <%> <%> </%> <%> ) ;"]}, {"before_ctx": "<%> <-> { </%> <%> <-> ; } </%> ", "before_line": " cb . owns _ one ( c = > c . sub _ child , scb = > { scb . has _ foreign _ key ( STR ) ; } ) ; ", "after_ctx": " ", "after_line": "cb . owns _ one ( c = > c . sub _ child , scb = > scb . has _ foreign _ key ( STR ) ) ;", "predictions": ["cb . owns _ one ( c = > c . sub _ exception = < < type </@> { value entity } </@> ; < invalid ) <%> ;"]}, {"before_ctx": " ", "before_line": " model _ builder . entity < non _ signed _ integer _ key _ entity > ( e = > { e . has _ data ( entity ) ; } ) ; ", "after_ctx": " <%> <-> { </%> <%> <-> ; } </%>", "after_line": "model _ builder . entity < non _ signed _ integer _ key _ entity > ( e = > e . has _ data ( entity ) ) ;", "predictions": ["model _ builder . entity < non _ signed _ integer _ has _ ( { } assert { } <%> exception _ base <-> <%> </%> </%> </%> </%> </%> ) <->"]}, {"before_ctx": "<%> <-> { </%> <%> <-> ; } </%> ", "before_line": " model _ builder . entity < a > ( e = > { e . has _ data ( new a ( ) ) ; } ) ; ", "after_ctx": " ", "after_line": "model _ builder . entity < a > ( e = > e . has _ data ( new a ( ) ) ) ;", "predictions": ["model _ builder . entity < a STR _ <-> STR _ ) _ has = c ( key . _ { message entity <%> </@> ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ test _ does _ not _ pass ", "after_ctx": " <%> <+> ( int? ) </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact _ test _ does _ <@> _ STR"]}, {"before_ctx": " ", "before_line": " private i _ enumerable < i _ value _ reader > execute _ value _ reader < t _ entity > ( ", "after_ctx": " <%> <-> var entity _ type = query _ context . model . get _ entity _ type ( typeof ( t _ entity ) ) ; </%>", "after_line": "private i _ enumerable < i _ value _ reader > execute _ value _ reader (", "predictions": ["private i _ enumerable < t _ ; ( . } ("]}, {"before_ctx": "<%> <+> private readonly constant _ verifying _ expression _ visitor constant _ verifying _ expression _ visitor ; </%> ", "before_line": " query _ compilation _ context query _ compilation _ context , shaped _ query _ compiling _ expression _ visitor _ dependencies dependencies ) ", "after_ctx": " <%> <+> constant _ verifying _ expression _ visitor = new constant _ verifying _ expression _ visitor ( dependencies . type _ mapping _ source ) ; </%>", "after_line": "shaped _ query _ compiling _ expression _ visitor _ dependencies dependencies , query _ compilation _ context query _ compilation _ context )", "predictions": ["shaped _ query _ compiling _ expression _ visitor _ dependencies query _ compilation _ context , shaped _ <+> _ </@> _ in _ store _ query = <%> <%> _ memory _ value )"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ sq _ lite _ interop ; namespace microsoft _ data _ sq _ lite _ utilities ", "after_ctx": " <%> <*> native _ methods -> constants </%>", "after_line": "namespace microsoft _ data _ sq _ lite _ interop", "predictions": ["namespace microsoft _ data _ sq _ lite _ assert"]}, {"before_ctx": "<%> <+> using microsoft _ data _ entity _ infrastructure ; </%> ", "before_line": " public class built _ in _ data _ types _ in _ memory _ fixture : built _ in _ data _ types _ fixture _ base < in _ memory _ test _ store > ", "after_ctx": " <%> <+> private readonly db _ context _ options options ; private readonly in _ memory _ test _ store test _ store ; </%> <%> <+> test _ store = new in _ memory _ test _ store ( ) ; </%>", "after_line": "public class built _ in _ data _ types _ in _ memory _ fixture : built _ in _ data _ types _ fixture _ base", "predictions": ["public class built _ in _ data _ types _ in _ memory _ fixture : built _ < _ <+> _ readonly _ sql"]}, {"before_ctx": "<%> <+> using microsoft _ data _ entity _ infrastructure ; </%> ", "before_line": " public class built _ in _ data _ types _ sqlite _ fixture : built _ in _ data _ types _ fixture _ base < sqlite _ test _ store > ", "after_ctx": " <%> <+> private readonly db _ context _ options options ; private readonly sqlite _ test _ store test _ store ; </%> <%> <+> test _ store = sqlite _ test _ store . create _ scratch ( ) ; </%>", "after_line": "public class built _ in _ data _ types _ sqlite _ fixture : built _ in _ data _ types _ fixture _ base", "predictions": ["public class built _ in _ data _ types _ sqlite _ fixture : built _ in _ </%> _ , _ ] _ base"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ sql _ server _ metadata ; </%> ", "before_line": " public class built _ in _ data _ types _ sql _ server _ fixture : built _ in _ data _ types _ fixture _ base < sql _ server _ test _ store > ", "after_ctx": " <%> <+> private readonly db _ context _ options options ; private readonly sql _ server _ test _ store test _ store ; </%> <%> <+> test _ store = sql _ server _ test _ store . create _ scratch ( ) ; </%>", "after_line": "public class built _ in _ data _ types _ sql _ server _ fixture : built _ in _ data _ types _ fixture _ base", "predictions": ["public class built _ in _ data _ types _ sql _ server _ fixture : built _ memory _ > _ info"]}, {"before_ctx": " ", "before_line": " t _ result execute _ async < t _ result > ( [ not _ null ] expression query ) ;       task < t _ result > execute _ async < t _ result > ( [ not _ null ] expression query , cancellation _ token cancellation _ token ) ; ", "after_ctx": " <%> <-> func < query _ context , task < t _ result > > create _ compiled _ async _ singleton _ query < t _ result > ( [ not _ null ] expression query ) ; </%>", "after_line": "t _ result execute _ async < t _ result > ( [ not _ null ] expression query , cancellation _ token cancellation _ token ) ;", "predictions": ["t _ result execute _ async < t _ result > ( [ not _ null ] expression ; ) </%> </%> </%> </%> config _ -> <%> , method = info t = info info > ; ; sql sql sql sql _ { cancellation _ { ; new not sql sql ( cancellation sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql"]}, {"before_ctx": " ", "before_line": " private static task < t _ result > execute _ async < t _ source , t _ result > ( ", "after_ctx": " <%> <+> expression expression , </%> <%> <-> operator _ method _ info = operator _ method _ info . make _ generic _ method ( typeof ( t _ source ) ) ; </%>", "after_line": "private static t _ result execute _ async < t _ source , t _ result > (", "predictions": ["private static t _ result execute _ async < t _ source , t _ result > ("]}, {"before_ctx": "<%> <*> arguments : source . expression ) , -> arguments : expression = = null </%> <%> <+> ? new [ ] { source . expression } : new [ ] { source . expression , expression } ) , </%> ", "before_line": " private static task < t _ result > execute _ async < t _ source , t _ result > ( ", "after_ctx": " <%> <-> task < </%> <%> <-> > </%> <%> <-> expression expression , </%>", "after_line": "private static t _ result execute _ async < t _ source , t _ result > (", "predictions": ["private static task execute _ async < t _ source , t _ result > ("]}, {"before_ctx": "<%> <-> task < </%> <%> <-> > </%> ", "before_line": " private static task < t _ result > execute _ async < t _ source , t _ result > ( ", "after_ctx": " <%> <-> expression expression , </%> <%> <-> { </%> <%> <+> = > execute _ async < t _ source , t _ result > ( </%> <%> <*> if ( source . provider is i -> operator </%> <%> <*> async -> method </%> <%> <*> query _ provider provider -> info , source , ( expression </%> <%> <*> { -> null , cancellation _ token ) ; </%> <%> <-> operator _ method _ info = operator _ method _ info . get _ generic _ arguments ( ) . length = = 2 ? operator _ method _ info . make _ generic _ method ( typeof ( t _ source ) , typeof ( t _ result ) ) </%>", "after_line": "private static t _ result execute _ async < t _ source , t _ result > (", "predictions": ["private static t _ result execute _ async < t _ source , t _ result > ("]}, {"before_ctx": "<%> <+> { typeof ( i _ query _ sql _ generator _ factory ) , new service _ characteristics ( service _ lifetime . scoped ) } , { typeof ( i _ relational _ sql _ translating _ expression _ visitor _ factory ) , new service _ characteristics ( service _ lifetime . singleton ) } , { typeof ( i _ method _ call _ translator _ provider ) , new service _ characteristics ( service _ lifetime . singleton ) } , { typeof ( i _ member _ translator _ provider ) , new service _ characteristics ( service _ lifetime . singleton ) } , { typeof ( i _ sql _ expression _ factory ) , new service _ characteristics ( service _ lifetime . singleton ) } , </%> ", "before_line": " { typeof ( i _ member _ translator _ plugin ) , new service _ characteristics ( service _ lifetime . singleton , multiple _ registrations : true ) } ", "after_ctx": " ", "after_line": "{ typeof ( i _ member _ translator _ plugin ) , new service _ characteristics ( service _ lifetime . singleton , multiple _ registrations : true ) } ,", "predictions": ["{ typeof ( i _ member _ translator _ plugin ) , new service _ characteristics ( service _ lifetime . singleton , multiple _ registrations : true ) }"]}, {"before_ctx": " ", "before_line": " property . declaring _ type , property _ type , element _ type ) ; var member _ info = navigation . get _ member _ info ( for _ construction , for _ set ) ; ", "after_ctx": " <%> <+> navigation . get _ </%> <%> <+> ( for _ construction , for _ set ) </%>", "after_line": "member _ info . declaring _ type , property _ type , element _ type ) ;", "predictions": ["var member _ info = navigation . get _ member _ info ( element _ type , for _ set constant _ context expression expression ) ;"]}, {"before_ctx": "<%> <-> ( ) . is _ configured </%> <%> <+> . is _ configured </%> ", "before_line": " assert . false ( new in _ memory _ data _ store _ source ( ) . is _ configured ( configuration _ mock . object ) ) ; ", "after_ctx": " <%> <-> ( ) . is _ available </%> <%> <+> . is _ available </%>", "after_line": "assert . false ( new in _ memory _ data _ store _ source ( configuration _ mock . object ) . is _ configured ) ;", "predictions": ["assert . false ( new in _ memory _ data _ store _ source ( ) . is expression <%> types _ < . . _ <+> store readonly readonly ) store ; ; STR server server . ) . ) in database _ <%> store in ) in ) in"]}, {"before_ctx": "<%> <-> ( ) . is _ configured </%> <%> <+> . is _ configured </%> ", "before_line": " assert . true ( new in _ memory _ data _ store _ source ( ) . is _ available ( mock . of < db _ context _ configuration > ( ) ) ) ; ", "after_ctx": " ", "after_line": "assert . true ( new in _ memory _ data _ store _ source ( mock . of < db _ context _ configuration > ( ) ) . is _ available ) ;", "predictions": ["assert . in _ memory _ data _ store _ source ( ) . is _ available ( var ) <+> <+> <+> ( db ) ) constant ;"]}, {"before_ctx": " ", "before_line": " if ( ! sources [ 0 ] . is _ available ( configuration ) ) ", "after_ctx": " <%> <+> . store _ services </%>", "after_line": "if ( ! sources [ 0 ] . is _ available )", "predictions": ["if ( ! sources [ 0 ] . is string . is . is _ <@> )"]}, {"before_ctx": "<%> <-> ( ) . is _ configured </%> <%> <+> . is _ configured </%> ", "before_line": " assert . false ( new sql _ server _ data _ store _ source ( ) . is _ configured ( configuration _ mock . object ) ) ; ", "after_ctx": " <%> <-> ( ) . is _ available </%> <%> <+> . is _ available </%>", "after_line": "assert . false ( new sql _ server _ data _ store _ source ( configuration _ mock . object ) . is _ configured ) ;", "predictions": ["assert . false ( new sql _ server _ data _ store _ source ( ) ) ;"]}, {"before_ctx": "<%> <-> ( ) . is _ configured </%> <%> <+> . is _ configured </%> ", "before_line": " assert . true ( new sql _ server _ data _ store _ source ( ) . is _ available ( configuration _ mock . object ) ) ; ", "after_ctx": " <%> <-> ( ) . is _ available </%> <%> <+> . is _ available </%>", "after_line": "assert . true ( new sql _ server _ data _ store _ source ( configuration _ mock . object ) . is _ available ) ;", "predictions": ["assert . true ( new sql _ server _ data _ store _ source ( ) . is _ available <%> ] expression </%> t expression store ;"]}, {"before_ctx": "<%> <-> ( ) . is _ available </%> <%> <+> . is _ available </%> ", "before_line": " assert . false ( new sql _ server _ data _ store _ source ( ) . is _ available ( configuration _ mock . object ) ) ; ", "after_ctx": " ", "after_line": "assert . false ( new sql _ server _ data _ store _ source ( configuration _ mock . object ) . is _ available ) ;", "predictions": ["assert . false ( new sql _ server _ line _ store _ source builder . is _ database data ) <+> assert . data ( assert _ _ _ types < token _ t result result _ ( . . _ test sql store _ ( ( . store _ : _ database _ : _ source store ( new -> _ options _ database _ : _ source store ( new -> _ options _ database _ : _ source store ( new -> _ options _ database _ : _ source ( new ( ( new _"]}, {"before_ctx": "<%> <-> using microsoft _ data _ entity _ infrastructure _ internal ; using microsoft _ data _ entity _ in _ memory ; using microsoft _ data _ entity _ internal ; </%> ", "before_line": " private readonly thread _ safe _ lazy _ ref < i _ in _ memory _ store > database ; ", "after_ctx": " ", "after_line": "private readonly i _ in _ memory _ store database ;", "predictions": ["private readonly i _ in _ memory _ store < i _ in _ memory _ store > ;"]}, {"before_ctx": "<%> <*> var store _ config = options . extensions . of _ type < in _ memory _ options _ extension > ( ) . first _ or _ default ( ) ; database = new thread _ safe _ lazy _ ref < i _ in _ memory _ store > ( ( ) = > store _ config ? . persist ? ? true ? persistent _ store : new in _ memory _ store ( logger _ factory ) ) ; -> database = persistent _ store ; </%> ", "before_line": " public virtual i _ in _ memory _ store store = > database . value ; ", "after_ctx": " <%> <-> . value </%> <%> <-> . value </%> <%> <-> . value </%>", "after_line": "public virtual i _ in _ memory _ store store = > database ;", "predictions": ["public virtual i _ in _ memory _ store store = > database . value ;"]}, {"before_ctx": "<%> <+> public bool remove _ formatting { get ; set ; } </%> ", "before_line": " transforming _ visitor . string _ builder . append _ line ( ) ; ", "after_ctx": " ", "after_line": "append _ line ( ) ;", "predictions": ["append _ line ( ) ;"]}, {"before_ctx": " ", "before_line": " transforming _ visitor . string _ builder . append _ line ( ) ; ", "after_ctx": " <%> <-> transforming _ visitor . string _ builder . </%> <%> <-> transforming _ visitor . string _ builder . </%>", "after_line": "append _ line ( ) ;", "predictions": ["append _ line ( ) ;"]}, {"before_ctx": "<%> <-> transforming _ visitor . string _ builder . </%> ", "before_line": " transforming _ visitor . string _ builder . append _ line ( ) ; ", "after_ctx": " <%> <-> transforming _ visitor . string _ builder . </%>", "after_line": "append _ line ( ) ;", "predictions": ["append _ line ( ) ;"]}, {"before_ctx": "<%> <-> transforming _ visitor . string _ builder . </%> <%> <-> transforming _ visitor . string _ builder . </%> ", "before_line": " transforming _ visitor . string _ builder . append _ line ( ) ; ", "after_ctx": " <%> <-> transforming _ visitor . string _ builder . </%>", "after_line": "append _ line ( ) ;", "predictions": ["append _ line ( ) ;"]}, {"before_ctx": "<%> <-> transforming _ visitor . string _ builder . </%> ", "before_line": " transforming _ visitor . string _ builder . append _ line ( ) ; ", "after_ctx": " <%> <-> transforming _ visitor . string _ builder . </%>", "after_line": "append _ line ( ) ;", "predictions": ["append _ line ( ) ;"]}, {"before_ctx": "<%> <-> transforming _ visitor . string _ builder . </%> ", "before_line": " transforming _ visitor . string _ builder . append _ line ( ) ; ", "after_ctx": " <%> <-> transforming _ visitor . string _ builder . </%> <%> <-> $ </%>", "after_line": "append _ line ( ) ;", "predictions": ["append _ line ( ) ;"]}, {"before_ctx": "<%> <-> transforming _ visitor . string _ builder . </%> ", "before_line": " transforming _ visitor . string _ builder . append _ line ( ) ; transforming _ visitor . string _ builder . append ( $ STR ) ; ", "after_ctx": " <%> <-> transforming _ visitor . string _ builder . </%>", "after_line": "append _ line ( ) ; transforming _ visitor . string _ builder . append ( STR ) ;", "predictions": ["append _ builder . append _ line ( ) ; append ( $ STR ) ;"]}, {"before_ctx": "<%> <-> transforming _ visitor . string _ builder . </%> <%> <-> $ </%> ", "before_line": " transforming _ visitor . string _ builder . append _ line ( ) ; ", "after_ctx": " ", "after_line": "append _ line ( ) ;", "predictions": ["append _ line ( ) ;"]}, {"before_ctx": " ", "before_line": " string _ builder . append _ line ( ) ; ", "after_ctx": " <%> <-> string _ builder . </%> <%> <-> string _ builder . </%>", "after_line": "append _ line ( ) ;", "predictions": ["append _ line ( ) ;"]}, {"before_ctx": "<%> <-> string _ builder . </%> ", "before_line": " string _ builder . append _ line ( STR + node . result ) ; ", "after_ctx": " <%> <-> string _ builder . </%>", "after_line": "append _ line ( STR + node . result ) ;", "predictions": ["append _ builder . append _ line ( </@> $ result ) ) ) ) ) ) ;"]}, {"before_ctx": "<%> <-> string _ builder . </%> <%> <-> string _ builder . </%> ", "before_line": " string _ builder . append _ line ( STR ) ; ", "after_ctx": " ", "after_line": "append _ line ( STR ) ;", "predictions": ["append _ line ( STR ) ;"]}, {"before_ctx": "<%> <+> , remove _ formatting </%> ", "before_line": " string _ builder . append _ line ( STR + node . target . type . short _ display _ name ( ) + STR + node . target + STR ) ; ", "after_ctx": " ", "after_line": "append _ line ( STR + node . target . type . short _ display _ name ( ) + STR + node . target + STR ) ;", "predictions": ["string _ builder . append _ line builder </%> <%> <-> <-> <%> <%> argument ( ; source ) method method method method method <->"]}, {"before_ctx": "<%> <-> string _ builder , </%> ", "before_line": " string _ builder . append _ line ( core _ strings . invalid _ member _ init _ binding ) ; ", "after_ctx": " <%> <-> string _ builder . </%>", "after_line": "append _ line ( core _ strings . invalid _ member _ init _ binding ) ;", "predictions": ["string _ builder . append _ line ( invalid . binding ) </@> <%> ;"]}, {"before_ctx": "<%> <-> string _ builder , </%> <%> <-> string _ builder . </%> ", "before_line": " string _ builder . append _ line ( STR ) ; ", "after_ctx": " ", "after_line": "append _ line ( STR ) ;", "predictions": ["append _ builder . append _ <@> n _ entity to to . collection ( > ) </@>"]}, {"before_ctx": "<%> <+> ( action < string > ) </%> <%> <-> string _ builder , </%> <%> <-> string _ builder , </%> <%> <-> string _ builder , </%> ", "before_line": " string _ builder . append _ line ( STR ) ; ", "after_ctx": " ", "after_line": "append _ line ( STR ) ;", "predictions": ["STR ) ;"]}, {"before_ctx": "<%> <-> _ id </%> <%> <*> constraint -> sorted _ column </%> <%> <*> type -> ids </%> <%> <*> constraint _ types [ constraint -> entry . value . values . to </%> <%> <*> id ] -> list ( ) </%> <%> <*> var -> var tuple = match _ properties ( sorted _ </%> <%> <*> = entry . value -> ) </%> <%> <-> var tuple = match _ properties ( column _ ids ) ; </%> <%> <+> constraint . </%> ", "before_line": " entity _ type . set _ primary _ key ( matching _ properties . to _ list ( ) ) ; ", "after_ctx": " <%> <-> . to _ list ( ) </%>", "after_line": "entity _ type . set _ primary _ key ( matching _ properties ) ;", "predictions": ["entity _ type . set _ primary _ key ( matching _ properties ) ! ! matching _ properties </%> ! ! matching _ <*> <%> ) id"]}, {"before_ctx": "<%> <-> . to _ list ( ) </%> ", "before_line": " entity _ type . add _ key ( matching _ properties . to _ list ( ) ) ; ", "after_ctx": " <%> <+> constraint . </%>", "after_line": "entity _ type . add _ key ( matching _ properties ) ;", "predictions": ["entity _ type . add _ key <%> matching . properties . _ properties . </%> ,"]}, {"before_ctx": "<%> <+> { var second _ argument = visit ( method _ call _ expression . arguments [ 1 ] ) ; if ( second _ argument is navigation _ expansion _ expression inner _ source ) </%> ", "before_line": " var second _ argument = visit ( method _ call _ expression . arguments [ 1 ] ) ; if ( second _ argument is navigation _ expansion _ expression inner _ source ) { return process _ set _ operation ( source , generic _ method , inner _ source ) ; } break ; ", "after_ctx": " <%> <+> break ; } </%>", "after_line": "return process _ set _ operation ( source , generic _ method , inner _ source ) ;", "predictions": ["return process _ set _ operation ( source , generic _ method , inner _ <*> </%> </%> </%> </%> </%> . ids = -> _ = <%> _ = <%> -> _ = <%> <%> <%> <%> <%> <%> </%> _ source . <%> [ <*> ] ) ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> @ STR </%> <%> <+> left join [ weapons ] as [ w ] on [ t ] . [ full _ name ] = [ w ] . [ owner _ full _ name ] </%> <%> <*> from -> order by [ t ] . [ nickname ] , </%> <%> <*> weapons -> t </%> <%> <*> as -> . </%> <%> <*> g . weapons -> squad _ id </%> <%> <*> inner join ( -> , [ w ] . [ id ] STR </%> <%> <-> select top ( 1 ) [ ] . [ nickname ] , [ ] . [ squad _ id ] , [ ] . [ full _ name ] from [ gears ] as [ ] where [ ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) order by [ ] . [ nickname ] , [ ] . [ squad _ id ] , [ ] . [ full _ name ] ) as [ t ] on [ g . weapons ] . [ owner _ full _ name ] = [ t ] . [ full _ name ] order by [ t ] . [ nickname ] , [ t ] . [ squad _ id ] , [ t ] . [ full _ name ] STR </%> ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) STR ", "after_ctx": " <%> <+> from ( select top ( 1 ) [ g ] . [ nickname ] , [ g ] . [ squad _ id ] , [ g ] . [ full _ name ] </%> <%> <*> officer -> gear </%> <%> <*> gear -> officer </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' ) STR", "predictions": ["where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) STR"]}, {"before_ctx": " ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) ", "after_ctx": " <%> <+> [ g ] . </%> <%> <*> key -> nickname </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' )", "predictions": ["where [ g ] . [ null <%> , , ) <-> . [ ;"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ fact _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <+> conditional _ theory </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory _ skip _ </%>"]}, {"before_ctx": "<%> <+> conditional _ theory _ skip _ issue _ cannot _ eval _ default _ if _ empty _ p member _ data _ nameof _ is _ async _ data </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " raw . sqlite _ bind _ blob ( stmt , index , blob ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "sqlite _ bind _ blob ( stmt , index , blob ) ;", "predictions": ["sqlite _ bind _ blob ( i , = = , <%> ;"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ bind _ double ( stmt , index , value ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "= > sqlite _ bind _ double ( stmt , index , value ) ;", "predictions": ["= > sqlite _ bind _ append target target ) ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ bind _ int ( stmt , index , value ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "= > sqlite _ bind _ int ( stmt , index , value ) ;", "predictions": ["= > sqlite _ bind _ if <+> member , , , ) . <@> _ ) _ </@> <-> column -> count -> method inner method inner method <-> <-> to ) <-> ) -> var -> column <*> id ! handle , handle -> ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ bind _ null ( stmt , index ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "= > sqlite _ bind _ null ( stmt , index ) ;", "predictions": ["= > sqlite _ bind _ null </%> line ) ,"]}, {"before_ctx": "<%> <+> using static sq _ lite _ pcl . raw ; </%> ", "before_line": " private readonly i _ collection < sqlite _ stmt > prepared _ statements = new list < sqlite _ stmt > ( ) ; ", "after_ctx": " ", "after_line": "private readonly list < sqlite _ stmt > prepared _ statements = new list < sqlite _ stmt > ( ) ;", "predictions": ["private readonly list < sqlite _ , <-> . value <%>"]}, {"before_ctx": " ", "before_line": " var expected _ params = raw . sqlite _ bind _ parameter _ count ( stmt ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "var expected _ params = sqlite _ bind _ parameter _ count ( stmt ) ;", "predictions": ["var expected _ params = sqlite . sqlite _ _ _ _ _ core _ <@> . stmt skip ) ) ) ,"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " var name = raw . sqlite _ bind _ parameter _ name ( stmt , i ) ; ", "after_ctx": " ", "after_line": "var name = sqlite _ bind _ parameter _ name ( stmt , i ) ;", "predictions": ["var name = sqlite _ bind _ parameter . <%> </%> i , ; <-> ( list ( double ) ) ) ) target , action -> | <@> expression <%> [ expression source source expression source expression ) source"]}, {"before_ctx": " ", "before_line": " raw . sqlite _ reset ( stmt ) ; ", "after_ctx": " <%> <-> if ( rc = = raw . sqlite _ row </%> <%> <*> | | raw . -> if ( </%> <%> <*> stmt -> column </%> <%> <*> readonly -> count </%> <%> <-> raw . </%>", "after_line": "sqlite _ reset ( stmt ) ;", "predictions": ["sqlite _ reset ( stmt ) ;"]}, {"before_ctx": "<%> <-> if ( rc = = raw . sqlite _ row </%> <%> <*> | | raw . -> if ( </%> <%> <*> stmt -> column </%> <%> <*> readonly -> count </%> <%> <-> raw . </%> <%> <*> raw . sqlite _ reset ( stmt ) ; -> while ( rc ! = sqlite _ done ) </%> <%> <+> { rc = sqlite _ step ( stmt ) ; sqlite _ exception . throw _ exception _ for _ rc ( rc , connection . handle ) ; } sqlite _ reset ( stmt ) ; </%> ", "before_line": " changes + = raw . sqlite _ changes ( connection . handle ) ; ", "after_ctx": " <%> <-> ( </%> <%> <*> & -> . has _ flag ( </%> <%> <-> ! = 0 </%>", "after_line": "changes + = sqlite _ changes ( connection . handle ) ;", "predictions": ["changes + = raw . sqlite _ changes ( connection ) ;"]}, {"before_ctx": " ", "before_line": " case raw . sqlite _ integer : ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "case sqlite _ integer :", "predictions": ["case sqlite _ integer :"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " case raw . sqlite _ float : ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "case sqlite _ float :", "predictions": ["case sqlite _ float :"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " case raw . sqlite _ text : ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "case sqlite _ text :", "predictions": ["case sqlite _ text :"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " case raw . sqlite _ blob : ", "after_ctx": " <%> <-> raw . </%>", "after_line": "case sqlite _ blob :", "predictions": ["case sqlite _ blob :"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " case raw . sqlite _ null : ", "after_ctx": " ", "after_line": "case sqlite _ null :", "predictions": ["case sqlite _ null :"]}, {"before_ctx": " ", "before_line": " case raw . sqlite _ integer : ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "case sqlite _ integer :", "predictions": ["case sqlite _ integer :"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " case raw . sqlite _ text : ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "case sqlite _ text :", "predictions": ["case sqlite _ text :"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " case raw . sqlite _ blob : ", "after_ctx": " <%> <-> raw . </%>", "after_line": "case sqlite _ blob :", "predictions": ["case sqlite _ blob :"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " case raw . sqlite _ null : ", "after_ctx": " ", "after_line": "case sqlite _ null :", "predictions": ["case sqlite _ null :"]}, {"before_ctx": "<%> <*> var column _ name = raw . sqlite _ column _ origin _ name ( stmt , i ) ; if ( ( column _ name = = STR ) | | ( column _ name = = STR ) | | ( column _ name = = STR ) ) -> var column _ name = sqlite _ column _ origin _ name ( handle , i ) ; </%> <%> <+> if ( column _ name = = STR ) </%> ", "before_line": " var rc = raw . sqlite _ table _ column _ metadata ( ", "after_ctx": " ", "after_line": "var rc = sqlite _ table _ column _ metadata (", "predictions": ["raw . sqlite _ table _ column _ metadata ("]}, {"before_ctx": "<%> <*> stmt -> record </%> <%> <*> raw -> record </%> <%> <*> sqlite _ reset -> dispose </%> <%> <-> stmt </%> <%> <-> stmt = null ; </%> ", "before_line": " raw . sqlite _ reset ( stmt _ queue . dequeue ( ) . stmt ) ; ", "after_ctx": " <%> <-> { if ( closed ) </%>", "after_line": "sqlite _ reset ( stmt _ queue . dequeue ( ) . stmt ) ;", "predictions": ["raw . sqlite _ reset ( ) . stmt ;"]}, {"before_ctx": "<%> <+> ? throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ ordinal ) ) ) : record . get _ ordinal ( name ) ; </%> <%> <*> { if ( closed ) { throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ data _ type _ name ) ) ) ; } return record . get _ data _ type _ name ( ordinal ) ; } -> = > closed </%> <%> <+> ? throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ data _ type _ name ) ) ) : record . get _ data _ type _ name ( ordinal ) ; </%> <%> <*> { if ( closed ) { throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ field _ type ) ) ) ; } return record . get _ field _ type ( ordinal ) ; } -> = > closed </%> <%> <+> ? throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ field _ type ) ) ) : record . get _ field _ type ( ordinal ) ; </%> ", "before_line": " : ! stepped | | done ? throw new invalid _ operation _ exception ( resources . no _ data ) : record . is _ db _ null ( ordinal ) ; ", "after_ctx": " <%> <*> = > record . get _ boolean ( ordinal ) ; -> = > closed </%> <%> <+> ? throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ boolean ) ) ) : record . get _ boolean ( ordinal ) ; </%> <%> <*> = > record . get _ byte ( ordinal ) ; -> = > closed </%> <%> <+> ? throw new invalid _ operation _ exception ( resources . data _ reader _ closed ( nameof ( get _ byte ) ) ) : record . get _ byte ( ordinal ) ; </%>", "after_line": ": record . is _ db _ null ( ordinal ) ;", "predictions": [": record | | done ? throw new invalid _ operation _ exception ( resources . no _ data ) : record . is _ db _ null ( ordinal ) ;"]}, {"before_ctx": " ", "before_line": " = > raw . sqlite _ result _ blob ( ctx , value ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "= > sqlite _ result _ blob ( ctx , value ) ;", "predictions": ["= > sqlite _ result _ blob ( ctx , value ;"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ result _ double ( ctx , value ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "= > sqlite _ result _ double ( ctx , value ) ;", "predictions": ["= > sqlite _ result _ double ( ctx , value <*> options options options"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ result _ int ( ctx , value ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "= > sqlite _ result _ int ( ctx , value ) ;", "predictions": ["= > sqlite _ result _ int ( ctx , value <*> </@> </@> </@>"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ result _ null ( ctx ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "= > sqlite _ result _ null ( ctx ) ;", "predictions": ["= > sqlite _ result _ null ( ctx ) ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ result _ text ( ctx , value ) ; ", "after_ctx": " ", "after_line": "= > sqlite _ result _ text ( ctx , value ) ;", "predictions": ["= > sqlite _ result _ text ( ctx , value _ value <*> _ ;"]}, {"before_ctx": "<%> <+> using static sq _ lite _ pcl . raw ; </%> ", "before_line": " = > raw . sqlite _ close ( db ) ; ", "after_ctx": " ", "after_line": "= > sqlite _ close ( db ) ;", "predictions": ["= > sqlite _ close ( db ) ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> ", "before_line": " = > raw . sqlite _ libversion ( ) ; ", "after_ctx": " ", "after_line": "= > sqlite _ libversion ( ) ;", "predictions": ["= > sqlite _ libversion ( ) ;"]}, {"before_ctx": "<%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> ", "before_line": " flags | = raw . sqlite _ open _ readonly ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "flags | = sqlite _ open _ readonly ;", "predictions": ["flags | = sqlite _ open _ readonly ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> ", "before_line": " flags | = raw . sqlite _ open _ readwrite ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "flags | = sqlite _ open _ readwrite ;", "predictions": ["flags | = sqlite _ open _ readwrite ;"]}, {"before_ctx": "<%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " flags | = raw . sqlite _ open _ readwrite | raw . sqlite _ open _ create | raw . sqlite _ open _ memory ; if ( ( flags & raw . sqlite _ open _ uri ) = = 0 ) { flags | = raw . sqlite _ open _ uri ; ", "after_ctx": " <%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "flags | = sqlite _ open _ readwrite | sqlite _ open _ create | sqlite _ open _ memory ; if ( ( flags & sqlite _ open _ uri ) = = 0 ) { flags | = sqlite _ open _ uri ;", "predictions": ["flags | = sqlite _ open _ readwrite | raw . sqlite _ STR _ handle var column = | _ STR _ memory </%> = = = = column = | column = column = | <+> ; table var ; , , column = column = | _ STR </%>"]}, {"before_ctx": "<%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> ", "before_line": " flags | = raw . sqlite _ open _ sharedcache ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%>", "after_line": "flags | = sqlite _ open _ sharedcache ;", "predictions": ["flags | = sqlite _ open _ sharedcache ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%> ", "before_line": " flags | = raw . sqlite _ open _ privatecache ; ", "after_ctx": " <%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> raw . </%>", "after_line": "flags | = sqlite _ open _ privatecache ;", "predictions": ["flags | = sqlite _ open _ privatecache ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> _ string </%> <%> <*> builder -> options </%> ", "before_line": " & & ( flags & raw . sqlite _ open _ uri ) = = 0 ", "after_ctx": " ", "after_line": "& & ( flags & sqlite _ open _ uri ) = = 0", "predictions": ["& & ( flags & raw . sqlite _ open _ uri value options ) -> . ;"]}, {"before_ctx": " ", "before_line": " var rc = raw . sqlite _ open ( filename , out db , flags , vfs : null ) ; ", "after_ctx": " <%> <-> _ string </%> <%> <*> builder -> options </%>", "after_line": "var rc = sqlite _ open ( filename , out db , flags , vfs : null ) ;", "predictions": ["var rc = raw . sqlite _ open ( filename , out result . db . flags <*> <*> ) builder options ) <*>"]}, {"before_ctx": "<%> <-> _ string </%> <%> <*> builder -> options </%> <%> <-> _ string </%> <%> <*> builder -> options </%> ", "before_line": " rc = raw . sqlite _ create _ collation ( db , item . key , item . value . state , item . value . collation ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "rc = sqlite _ create _ collation ( db , item . key , item . value . state , item . value . collation ) ;", "predictions": ["rc = sqlite _ create _ collation ( db , item <%> <-> open _ ; _ memory <-> open _ ; _ ( builder ) options"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " rc = raw . sqlite _ create _ function ( db , item . key . name , item . key . arity , item . value . state , item . value . func ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "rc = sqlite _ create _ function ( db , item . key . name , item . key . arity , item . value . state , item . value . func ) ;", "predictions": ["rc = sqlite _ create _ function ( db , item <%> <%> </%> </%> <-> <%> <%> <%> </%> <-> <%> options <%> </%> <%> <%> <%> <%> <%> ;"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " rc = raw . sqlite _ enable _ load _ extension ( db , 1 ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "rc = sqlite _ enable _ load _ extension ( db , 1 ) ;", "predictions": ["rc = sqlite _ enable _ load _ extension </@> db ;"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " rc = raw . sqlite _ enable _ load _ extension ( db , extensions _ enabled ? 1 : 0 ) ; ", "after_ctx": " ", "after_line": "rc = sqlite _ enable _ load _ extension ( db , extensions _ enabled ? 1 : 0 ) ;", "predictions": ["rc = sqlite _ enable _ load _ extension ( db _ db _ enabled _ func <-> <-> ) <*> ;"]}, {"before_ctx": " ", "before_line": " rc = raw . sqlite _ enable _ load _ extension ( db , 1 ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "rc = sqlite _ enable _ load _ extension ( db , 1 ) ;", "predictions": ["rc = sqlite _ enable _ load _ extension <-> db <-> ( ( ( ( ( -> <%> . ) ) ) ) flags = = -> _ ( _ ; ) </%> </%> uri <-> open </%> open </%> uri </%> </%> </%> _ builder <%> </%> <-> open </%> </%> name name name ) |"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " rc = raw . sqlite _ enable _ load _ extension ( db , 0 ) ; ", "after_ctx": " ", "after_line": "rc = sqlite _ enable _ load _ extension ( db , 0 ) ;", "predictions": ["rc = sqlite _ enable _ load _ extension ( db ) ;"]}, {"before_ctx": " ", "before_line": " using ( var backup = raw . sqlite _ backup _ init ( destination . db , destination _ name , db , source _ name ) ) ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "using ( var backup = sqlite _ backup _ init ( destination . db , destination _ name , db , source _ name ) )", "predictions": ["using ( var backup = raw . sqlite _ backup _ init ( db , destination _ name , db , source </%> </@> _ </@> _ get = null _ </@> </%> ;"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " rc = raw . sqlite _ errcode ( destination . db ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "rc = sqlite _ errcode ( destination . db ) ;", "predictions": ["rc = sqlite _ errcode ( destination . db ) ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " rc = raw . sqlite _ backup _ step ( backup , - 1 ) ; ", "after_ctx": " ", "after_line": "rc = sqlite _ backup _ step ( backup , - 1 ) ;", "predictions": ["rc = sqlite _ backup _ step ( backup , </@> <@> : </@> : case 1 case sqlite case rc _ rc ) ) ctx ) ctx ) _ code ) ;"]}, {"before_ctx": " ", "before_line": " raw . sqlite _ result _ error ( ctx , ex . message ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "sqlite _ result _ error ( ctx , ex . message ) ;", "predictions": ["sqlite _ result _ error ( ctx , ex . message <@> ) ;"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " raw . sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ;", "predictions": ["sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " var flags = is _ deterministic ? raw . sqlite _ deterministic : 0 ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "var flags = is _ deterministic ? sqlite _ deterministic : 0 ;", "predictions": ["var flags = is _ deterministic ? sqlite _ deterministic <@> </@> ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " var rc = raw . sqlite _ create _ function ( ", "after_ctx": " ", "after_line": "var rc = sqlite _ create _ function (", "predictions": ["var rc = sqlite _ create _ function ("]}, {"before_ctx": " ", "before_line": " raw . sqlite _ result _ error ( ctx , context . exception . message ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "sqlite _ result _ error ( ctx , context . exception . message ) ;", "predictions": ["sqlite . sqlite _ result _ error ( ctx , = = is is message _ message ) ) ) error _ result </%> </@> error code ) ( </@> , name . = message <-> <-> <-> ) ;"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " raw . sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ;", "predictions": ["sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " var flags = is _ deterministic ? raw . sqlite _ deterministic : 0 ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "var flags = is _ deterministic ? sqlite _ deterministic : 0 ;", "predictions": ["var flags = is _ deterministic ? sqlite _ deterministic : 0 _ </@>"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " var rc = raw . sqlite _ create _ function ( ", "after_ctx": " ", "after_line": "var rc = sqlite _ create _ function (", "predictions": ["var rc = sqlite _ create _ function ("]}, {"before_ctx": " ", "before_line": " assert . equal ( raw . sqlite _ readonly , ex . sqlite _ error _ code ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "assert . equal ( sqlite _ readonly , ex . sqlite _ error _ code ) ;", "predictions": ["assert . equal ( raw _ error _ code , <%> . <-> _ _ _ _ <%> readonly : ex <%> error </%> readonly . ( . ( ( ( <%> </%> <@> </%> </%> </%> </%> . <%> </%> ) ) ) <-> ) <-> , , , , sqlite . sqlite _ readonly ) <->"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " assert . equal ( raw . sqlite _ cantopen , ex . sqlite _ error _ code ) ; ", "after_ctx": " ", "after_line": "assert . equal ( sqlite _ cantopen , ex . sqlite _ error _ code ) ;", "predictions": ["assert . equal ( sqlite _ cantopen , ex . <-> _ _ _ _ _ _ _ ? . <-> _ <%> native . ( ( ( ( ( ( ( ( ( ( <%> . <%> . <%> </%> <%> . result . <%> </%> raw </%> </%> </%> raw . result ) </%> </%> </%> raw _ source ) ) ) <-> ) <-> , sqlite _ source ) <-> ) <->"]}, {"before_ctx": " ", "before_line": " assert . equal ( raw . sqlite _ busy , ex . sqlite _ error _ code ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "assert . equal ( sqlite _ busy , ex . sqlite _ error _ code ) ;", "predictions": ["assert . equal ( ex . sqlite _ error _ code </@> ex . <-> _ _ _ var _ _ var _ ( . ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( </%> . <%> . <%> </%> </%> </%> </%> <%> </%> </%> </%> </%> </%> <%> </%> ) </%> </%> _ <%> </%> </%> </%> <%> </%> . <%> </%> ) </%> </%> <%> _ sqlite _ source ) ) ) . sqlite _ <@> ) <-> ) <-> sqlite . sqlite _ <@> _ = ) <-> )"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " assert . equal ( raw . sqlite _ cantopen , ex . sqlite _ error _ code ) ; ", "after_ctx": " ", "after_line": "assert . equal ( sqlite _ cantopen , ex . sqlite _ error _ code ) ;", "predictions": ["assert . equal ( sqlite _ cantopen , ex . <-> _ _ _ _ _ _ _ ctx ) ) ) 0 </@> </@> </@> : <@> ) </@>"]}, {"before_ctx": " ", "before_line": " resources . sqlite _ native _ error ( raw . sqlite _ error , resources . udf _ called _ with _ null ( STR , 0 ) ) , ", "after_ctx": " <%> <-> raw . </%>", "after_line": "resources . sqlite _ native _ error ( sqlite _ error , resources . udf _ called _ with _ null ( STR , 0 ) ) ,", "predictions": ["resources . sqlite _ native _ error ( raw . sqlite _ error , resources </%> 0 <%> <%> <%> null ) , . </%> . source ;"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " assert . equal ( raw . sqlite _ error , ex . sqlite _ error _ code ) ; ", "after_ctx": " ", "after_line": "assert . equal ( sqlite _ error , ex . sqlite _ error _ code ) ;", "predictions": ["assert . equal ( sqlite _ error , ex . </%> _ _ _ _ _ _ _ _ _ _ _"]}, {"before_ctx": "<%> <+> static </%> <%> <+> . raw </%> ", "before_line": " = > get _ sqlite _ type ( ordinal ) = = raw . sqlite _ null ; ", "after_ctx": " <%> <+> checked ( </%> <%> <+> ) </%> <%> <-> raw . </%>", "after_line": "= > get _ sqlite _ type ( ordinal ) = = sqlite _ null ;", "predictions": ["= > get _ sqlite _ type ( ordinal ) = = sqlite _ null ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <+> checked ( </%> <%> <+> ) </%> ", "before_line": " if ( sqlite _ type = = raw . sqlite _ text ) ", "after_ctx": " <%> <+> checked ( </%> <%> <+> ) </%>", "after_line": "if ( sqlite _ type = = sqlite _ text )", "predictions": ["if ( sqlite _ type = = raw . sqlite _ text )"]}, {"before_ctx": "<%> <+> checked ( </%> <%> <+> ) </%> ", "before_line": " case raw . sqlite _ float : case raw . sqlite _ integer : ", "after_ctx": " ", "after_line": "case sqlite _ float : case sqlite _ integer :", "predictions": ["case sqlite _ float : case sqlite _ integer :"]}, {"before_ctx": " ", "before_line": " case raw . sqlite _ float : case raw . sqlite _ integer : ", "after_ctx": " <%> <+> checked ( </%> <%> <+> ) </%> <%> <+> checked ( </%> <%> <+> ) </%>", "after_line": "case sqlite _ float : case sqlite _ integer :", "predictions": ["case sqlite _ float : case sqlite _ integer :"]}, {"before_ctx": "<%> <+> checked </%> ", "before_line": " case raw . sqlite _ integer : ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "case sqlite _ integer :", "predictions": ["case sqlite _ integer :"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " case raw . sqlite _ float : ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "case sqlite _ float :", "predictions": ["case sqlite _ float :"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " case raw . sqlite _ text : ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "case sqlite _ text :", "predictions": ["case sqlite _ text :"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " case raw . sqlite _ blob : ", "after_ctx": " <%> <-> raw . </%>", "after_line": "case sqlite _ blob :", "predictions": ["case sqlite _ blob :"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " case raw . sqlite _ null : ", "after_ctx": " ", "after_line": "case sqlite _ null :", "predictions": ["case sqlite _ null :"]}, {"before_ctx": " ", "before_line": " var rc = raw . sqlite _ blob _ open ( ", "after_ctx": " <%> <-> raw . </%>", "after_line": "var rc = sqlite _ blob _ open (", "predictions": ["var rc = sqlite _ blob _ open ("]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " length = raw . sqlite _ blob _ bytes ( blob ) ; ", "after_ctx": " ", "after_line": "length = sqlite _ blob _ bytes ( blob ) ;", "predictions": ["length = sqlite _ blob _ bytes ( blob ) case"]}, {"before_ctx": " ", "before_line": " raw . sqlite _ rollback _ hook ( connection . handle , null , null ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "sqlite _ rollback _ hook ( connection . handle , null , null ) ;", "predictions": ["raw . sqlite _ rollback _ hook ( handle , null _ equal _ equal </@> </@> </@> </@> </@> </@> </@> </@> ) ) . flags , ) ) . handle </%> null : ( <@> . <@> . ( ( ( if </%> ( ( ( ( if </%> ( ( ( ( if </%> if </%> <%> code code code code code ) code code code code code code code code code code code code code code code code code code code code code code code . <@> . <%> . <%> code code code code ."]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " raw . sqlite _ rollback _ hook ( connection . handle , null , null ) ; ", "after_ctx": " ", "after_line": "sqlite _ rollback _ hook ( connection . handle , null , null ) ;", "predictions": ["raw . sqlite _ rollback _ hook _ query _ handle <+> <%> ) <*> <*> <*> ) <-> <-> ( <-> . handle ) | </%> ( <%> ) assert _ , , . . . . > > handle _ -> _ ) , ( ( handle . handle . handle . ( handle . ( ( ( ( ( handle _ <%> . ( . ( ) property property property property property property property property property property property property <%> property . ( ( ( ( ( ( handle _ handle _ type . ) . ("]}, {"before_ctx": " ", "before_line": " if ( rc = = raw . sqlite _ ok | | rc = = raw . sqlite _ row | | rc = = raw . sqlite _ done ) ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "if ( rc = = sqlite _ ok | | rc = = sqlite _ row | | rc = = sqlite _ done )", "predictions": ["if ( rc = = sqlite _ ok | | rc . . | | STR . , , _ i t count ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " | | rc ! = raw . sqlite _ errcode ( db ) ) ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "| | rc ! = sqlite _ errcode ( db ) )", "predictions": ["| | rc ! = sqlite _ errcode ( db ) STR"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " message = raw . sqlite _ errstr ( rc ) + STR + resources . default _ native _ error ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "message = sqlite _ errstr ( rc ) + STR + resources . default _ native _ error ;", "predictions": ["message = sqlite _ errstr ( rc ) + STR + default = default _ default )"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " message = raw . sqlite _ errmsg ( db ) ; extended _ error _ code = raw . sqlite _ extended _ errcode ( db ) ; ", "after_ctx": " ", "after_line": "message = sqlite _ errmsg ( db ) ; extended _ error _ code = sqlite _ extended _ errcode ( db ) ;", "predictions": ["extended _ error _ code = sqlite _ errmsg ( db </%> </%> <@> </%> ; = _ = . null </%> query t , -> , t ,"]}, {"before_ctx": "<%> <+> static </%> <%> <+> . raw </%> ", "before_line": " integer = raw . sqlite _ integer , ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "integer = sqlite _ integer ,", "predictions": ["integer = sqlite _ integer ,"]}, {"before_ctx": "<%> <+> static </%> <%> <+> . raw </%> <%> <-> raw . </%> ", "before_line": " real = raw . sqlite _ float , ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "real = sqlite _ float ,", "predictions": ["real = sqlite _ float ,"]}, {"before_ctx": "<%> <+> static </%> <%> <+> . raw </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " text = raw . sqlite _ text , ", "after_ctx": " <%> <-> raw . </%>", "after_line": "text = sqlite _ text ,", "predictions": ["text = sqlite _ text ,"]}, {"before_ctx": "<%> <+> static </%> <%> <+> . raw </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " blob = raw . sqlite _ blob ", "after_ctx": " ", "after_line": "blob = sqlite _ blob", "predictions": ["blob = sqlite _ blob"]}, {"before_ctx": " ", "before_line": " = > raw . sqlite _ value _ double ( values [ ordinal ] ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "= > sqlite _ value _ double ( values [ ordinal ] ) ;", "predictions": ["= > sqlite _ value _ double ( values [ ordinal <@> <-> <-> <-> ) ) <-> | row db ordinal <+> <+> ( ;"]}, {"before_ctx": "<%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ value _ int ( values [ ordinal ] ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "= > sqlite _ value _ int ( values [ ordinal ] ) ;", "predictions": ["= > sqlite _ value _ int ( values [ ordinal ] ) ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ value _ text ( values [ ordinal ] ) ; ", "after_ctx": " <%> <-> raw . </%> <%> <-> raw . </%>", "after_line": "= > sqlite _ value _ text ( values [ ordinal ] ) ;", "predictions": ["= > sqlite _ value _ text ( values [ ordinal ] ) ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ value _ blob ( values [ ordinal ] ) ; ", "after_ctx": " <%> <-> raw . </%>", "after_line": "= > sqlite _ value _ blob ( values [ ordinal ] ) ;", "predictions": ["= > sqlite _ value _ blob ( values [ ordinal ] ) ;"]}, {"before_ctx": "<%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> <%> <-> raw . </%> ", "before_line": " = > raw . sqlite _ value _ type ( values [ ordinal ] ) ; ", "after_ctx": " ", "after_line": "= > sqlite _ value _ type ( values [ ordinal ] ) ;", "predictions": ["= > sqlite _ value _ type ( values [ ordinal ] ) ;"]}, {"before_ctx": " ", "before_line": " annotation _ provider . format _ columns ( first _ properties ) ) ) ; ", "after_ctx": " <%> <*> annotation -> first </%> <%> <*> provider -> properties </%> <%> <-> first _ properties </%>", "after_line": "first _ properties . format _ columns ( ) ) ) ;", "predictions": ["first _ properties . format _ columns ( first _ properties ) ) . type = 1 ) ) ) ="]}, {"before_ctx": "<%> <*> annotation -> first </%> <%> <*> provider -> properties </%> <%> <-> first _ properties </%> ", "before_line": " annotation _ provider . format _ columns ( first _ properties ) ) ) ; ", "after_ctx": " ", "after_line": "first _ properties . format _ columns ( ) ) ) ;", "predictions": ["first _ properties . format _ columns ( ) ) ;"]}, {"before_ctx": " ", "before_line": " annotation _ provider . format _ columns ( first _ properties ) ) ) ; ", "after_ctx": " <%> <*> annotation -> first </%> <%> <*> provider -> properties </%> <%> <-> first _ properties </%>", "after_line": "first _ properties . format _ columns ( ) ) ) ;", "predictions": ["first _ properties . format _ columns ( first _ properties ) ) ;"]}, {"before_ctx": "<%> <*> annotation -> first </%> <%> <*> provider -> properties </%> <%> <-> first _ properties </%> ", "before_line": " annotation _ provider . format _ columns ( first _ properties ) ) ) ; ", "after_ctx": " ", "after_line": "first _ properties . format _ columns ( ) ) ) ;", "predictions": ["first _ properties . format _ columns ( ) ) ;"]}, {"before_ctx": "<%> <*> null -> equal </%> <%> <+> STR , </%> <%> <+> . name </%> ", "before_line": " assert . null ( model . relational ( ) . find _ sequence ( STR ) ) ; var sequence = model . sqlite ( ) . find _ sequence ( STR ) ; ", "after_ctx": " ", "after_line": "var sequence = model . relational ( ) . find _ sequence ( STR ) ;", "predictions": ["assert . null ( model . relational ( ) . find </%> assert < , > assert _ array _ ; > property _ = = = = = = = = = = = = = root ,"]}, {"before_ctx": "<%> <*> relational _ full _ annotation _ names . instance . schema , provider _ full _ annotation _ names ? . schema , -> relational _ annotation _ names . schema , </%> ", "before_line": " var root _ type = entity _ type . root _ type ( ) ; return get _ annotations ( root _ type ) . discriminator _ property ; ", "after_ctx": " <%> <*> var property _ name = ( string ) annotations . get _ annotation ( relational _ full _ annotation _ names . instance . discriminator _ property , provider _ full _ annotation _ names ? . discriminator _ property ) ; -> var property _ name = ( string ) annotations . get _ annotation ( relational _ annotation _ names . discriminator _ property ) ; </%> <%> <*> { -> = > </%> <%> <-> } </%>", "after_line": "return get _ annotations ( entity _ type . root _ type ( ) ) . discriminator _ property ;", "predictions": ["return get _ annotations ( entity _ type ) . discriminator _ property ;"]}, {"before_ctx": "<%> <+> { test _ helpers . assert _ results ( o _ query ( northwind _ data . set < t _ item > ( ) ) . to _ array ( ) , ef _ query ( context . set < t _ item > ( ) ) . to _ array ( ) , assert _ order , asserter ) ; assert . equal ( entry _ count , context . change _ tracker . entries ( ) . count ( ) ) ; } } </%> ", "before_line": " func < i _ queryable < t _ item > , i _ queryable < long > > query , bool assert _ order = false ) ", "after_ctx": " ", "after_line": "func < i _ queryable < t _ item > , i _ queryable < bool > > query , bool assert _ order = false )", "predictions": ["func < i _ queryable < t _ item > , i _ queryable < long > property )"]}, {"before_ctx": " ", "before_line": " private async task < int > assert _ query < t _ item > ( ", "after_ctx": " <%> <-> return </%>", "after_line": "private async task assert _ query < t _ item > (", "predictions": ["private async task assert _ query < t <%> </%>"]}, {"before_ctx": "<%> <-> < int > </%> ", "before_line": " return test _ helpers . assert _ results ( ", "after_ctx": " <%> <-> < int > </%>", "after_line": "test _ helpers . assert _ results (", "predictions": ["return test _ helpers . assert _ connection ;"]}, {"before_ctx": "<%> <-> return </%> ", "before_line": " private async task < int > assert _ query < t _ item > ( ", "after_ctx": " <%> <-> return </%>", "after_line": "private async task assert _ query < t _ item > (", "predictions": ["private async task assert _ query < private </%> > </@>"]}, {"before_ctx": "<%> <-> < int > </%> ", "before_line": " return test _ helpers . assert _ results ( ", "after_ctx": " <%> <-> < int > </%>", "after_line": "test _ helpers . assert _ results (", "predictions": ["return test _ helpers . assert _ results ("]}, {"before_ctx": "<%> <-> return </%> ", "before_line": " private async task < int > assert _ query < t _ item > ( ", "after_ctx": " <%> <-> return </%>", "after_line": "private async task assert _ query < t _ item > (", "predictions": ["private async task assert _ query < t _ item <-> </@>"]}, {"before_ctx": "<%> <-> < int > </%> ", "before_line": " return test _ helpers . assert _ results ( ", "after_ctx": " <%> <-> < int > </%>", "after_line": "test _ helpers . assert _ results (", "predictions": ["return test _ helpers . assert _ results ("]}, {"before_ctx": "<%> <-> return </%> ", "before_line": " private async task < int > assert _ query < t _ item , t _ item > ( ", "after_ctx": " <%> <-> return </%>", "after_line": "private async task assert _ query < t _ item , t _ item > (", "predictions": ["private async task assert _ query < <@> . item = t _ -> properties provider"]}, {"before_ctx": "<%> <-> < int > </%> ", "before_line": " return test _ helpers . assert _ results ( ", "after_ctx": " <%> <*> private async task < int > assert _ query < t _ item > ( -> private async task assert _ query < t _ item , t _ item > ( </%> <%> <+> func < i _ queryable < t _ item > , i _ queryable < t _ item > , task < bool > > query , bool assert _ order = false ) where t _ item : class </%>", "after_line": "test _ helpers . assert _ results (", "predictions": ["return test _ helpers . assert _ results ("]}, {"before_ctx": "<%> <*> private async task < int > assert _ query < t _ item > ( -> private async task assert _ query < t _ item , t _ item > ( </%> <%> <+> func < i _ queryable < t _ item > , i _ queryable < t _ item > , task < bool > > query , bool assert _ order = false ) where t _ item : class where t _ item : class { using ( var context = create _ context ( ) ) { test _ helpers . assert _ results ( new [ ] { await query ( northwind _ data . set < t _ item > ( ) , northwind _ data . set < t _ item > ( ) ) } , new [ ] { await query ( context . set < t _ item > ( ) , context . set < t _ item > ( ) ) } , assert _ order ) ; } } private async task assert _ query < t _ item , t _ item > ( func < i _ queryable < t _ item > , i _ queryable < t _ item > , task < int > > query , bool assert _ order = false ) where t _ item : class where t _ item : class { using ( var context = create _ context ( ) ) { test _ helpers . assert _ results ( new [ ] { await query ( northwind _ data . set < t _ item > ( ) , northwind _ data . set < t _ item > ( ) ) } , new [ ] { await query ( context . set < t _ item > ( ) , context . set < t _ item > ( ) ) } , assert _ order ) ; } } private async task assert _ query < t _ item , t _ item > ( func < i _ queryable < t _ item > , i _ queryable < t _ item > , task < long > > query , bool assert _ order = false ) where t _ item : class where t _ item : class { using ( var context = create _ context ( ) ) { test _ helpers . assert _ results ( new [ ] { await query ( northwind _ data . set < t _ item > ( ) , northwind _ data . set < t _ item > ( ) ) } , new [ ] { await query ( context . set < t _ item > ( ) , context . set < t _ item > ( ) ) } , assert _ order ) ; } } private async task assert _ query < t _ item , t _ item , t _ item > ( func < i _ queryable < t _ item > , i _ queryable < t _ item > , i _ queryable < t _ item > , task < bool > > query , bool assert _ order = false ) where t _ item : class where t _ item : class where t _ item : class { using ( var context = create _ context ( ) ) { test _ helpers . assert _ results ( new [ ] { await query ( northwind _ data . set < t _ item > ( ) , northwind _ data . set < t _ item > ( ) , northwind _ data . set < t _ item > ( ) ) } , new [ ] { await query ( context . set < t _ item > ( ) , context . set < t _ item > ( ) , context . set < t _ item > ( ) ) } , assert _ order ) ; } } private async task assert _ query < t _ item > ( </%> ", "before_line": " return test _ helpers . assert _ results ( ", "after_ctx": " <%> <*> private -> protected </%> <%> <-> < int > </%> <%> <+> int entry _ count = 0 , </%>", "after_line": "test _ helpers . assert _ results (", "predictions": ["private async task _ equal _ query < t _ item > ( string context , northwind _ data . set > query , bool where _ order ) ;"]}, {"before_ctx": "<%> <-> return </%> <%> <+> new [ ] { await </%> <%> <*> . to _ array ( ) -> } </%> <%> <+> new [ ] { </%> <%> <*> . to _ array _ async ( ) , -> } , </%> <%> <*> asserter ) ; -> ( os , efs ) = > asserter ( os . single ( ) , efs . single ( ) ) ) ; </%> <%> <+> assert . equal ( entry _ count , context . change _ tracker . entries ( ) . count ( ) ) ; </%> ", "before_line": " private async task < int > assert _ query < t _ item , t _ item > ( ", "after_ctx": " <%> <-> return </%>", "after_line": "private async task assert _ query < t _ item , t _ item > (", "predictions": ["private async task assert _ query < t _ item , t _ item > ("]}, {"before_ctx": "<%> <-> < int > </%> ", "before_line": " return test _ helpers . assert _ results ( ", "after_ctx": " <%> <-> < int > </%>", "after_line": "test _ helpers . assert _ results (", "predictions": ["return test _ helpers . assert _ results ("]}, {"before_ctx": "<%> <-> return </%> ", "before_line": " private async task < int > assert _ query < t _ item , t _ item , t _ item > ( ", "after_ctx": " <%> <-> return </%>", "after_line": "private async task assert _ query < t _ item , t _ item , t _ item > (", "predictions": ["private async task assert _ query < t _ item , t _ ->"]}, {"before_ctx": "<%> <-> < int > </%> ", "before_line": " return test _ helpers . assert _ results ( ", "after_ctx": " <%> <*> private async task < int > assert _ query < t _ item > ( func < i _ queryable < t _ item > , i _ queryable < int > > query , bool assert _ order = false ) -> private async task assert _ query < t _ item > ( </%> <%> <+> func < i _ queryable < t _ item > , i _ queryable < int > > query , bool assert _ order = false , </%>", "after_line": "test _ helpers . assert _ results (", "predictions": ["return test _ helpers . assert _ results ("]}, {"before_ctx": " ", "before_line": " constraint STR my _ pk STR primary key nonclustered ( STR foo STR , STR bar STR ) ", "after_ctx": " <%> <-> new create _ table _ operation ( table ) , generate _ idempotent _ sql : false ) . sql ) ; } fact public void generate _ when _ create _ table _ operation _ with _ identity _ key ( ) { column foo , bar ; var table = new table ( STR , </%>", "after_line": "constraint STR my _ pk STR primary key ( STR foo STR , STR bar STR )", "predictions": ["constraint STR my _ pk STR primary key nonclustered ( STR foo , , bar , , = , )"]}, {"before_ctx": "<%> <*> assert . equal ( STR , generate ( new rename _ column _ operation ( STR , STR , STR ) , generate _ idempotent _ sql : false ) . sql ) ; -> assert . throws < not _ implemented _ exception > ( ( ) = > generate ( </%> <%> <+> new rename _ column _ operation ( STR , STR , STR ) ) . sql ) ; </%> ", "before_line": " STR , generate ( new add _ primary _ key _ operation ( STR , STR , new [ ] { STR , STR } , is _ clustered : false ) , generate _ idempotent _ sql : false ) . sql ) ; ", "after_ctx": " <%> <-> , generate _ idempotent _ sql : false </%>", "after_line": "STR , generate ( new add _ primary _ key _ operation ( STR , STR , new [ ] { STR , STR } , is _ clustered : false ) ) . sql ) ;", "predictions": ["STR , generate ( new add _ primary _ key _ operation ( STR , STR , new [ ] { STR , STR } , is _ clustered : false ) , generate _ idempotent _ sql : false ) ;"]}, {"before_ctx": " ", "before_line": " if ( type _ mapping _ source . find _ mapping ( target _ type ) ! = null | | target _ type . get _ type _ info ( ) . is _ interface ", "after_ctx": " <%> <*> | | parameter _ binding _ factories . find _ factory ( property _ info . property _ type , property _ info . name ) ! = null ) -> | | parameter _ binding _ factories . find _ factory ( property _ info . property _ type , property _ info . name ) ! = null </%> <%> <+> | | type _ mapping _ source . find _ mapping ( target _ type ) ! = null ) </%>", "after_line": "if ( target _ type . get _ type _ info ( ) . is _ interface", "predictions": ["if ( type _ mapping _ source . find _ mapping ( target _ type ) ! = < < _ <%> > </%> true </%> </%> <*> _ <%> , = = = = < null ="]}, {"before_ctx": " ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " <%> <-> _ skip _ issue </%>", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": "<%> <-> _ skip _ issue </%> ", "before_line": " conditional _ theory _ skip _ issue ", "after_ctx": " ", "after_line": "conditional _ theory", "predictions": ["conditional _ theory"]}, {"before_ctx": " ", "before_line": " where [ g ] . [ discriminator ] in ( n ' officer ' , n ' gear ' ) ", "after_ctx": " <%> <*> officer -> gear </%> <%> <*> gear -> officer </%>", "after_line": "where [ g ] . [ discriminator ] in ( n ' gear ' , n ' officer ' )", "predictions": ["where [ g ] . [ discriminator ] in ( n ' ) <@> <+> -> -> _ g . <*>"]}, {"before_ctx": "<%> <*> from -> to </%> <%> <-> . state _ manager </%> <%> <-> , message </%> <%> <+> , message </%> ", "before_line": " assert _ sent _ messages _ consistent ( login ) ; assert _ sent _ messages _ consistent ( login , message ) ; ", "after_ctx": " <%> <*> from -> to </%> <%> <-> . state _ manager </%>", "after_line": "assert _ sent _ messages _ consistent ( login , message ) ; assert _ sent _ messages _ consistent ( login ) ;", "predictions": ["assert _ sent _ messages _ consistent ( message , login ) assert _ <*> _ . _ <*> = , , , , , , , bool ) ( i ) ) ) ) ) ) ) message ;"]}, {"before_ctx": "<%> <-> assert _ sent _ messages _ consistent ( null , message ) ; </%> <%> <*> from -> to </%> <%> <-> . state _ manager </%> <%> <-> , message </%> <%> <+> , message </%> ", "before_line": " assert _ sent _ messages _ consistent ( login ) ; assert _ sent _ messages _ consistent ( login , message ) ; ", "after_ctx": " <%> <+> p = > </%> <%> <+> ( p ) </%>", "after_line": "assert _ sent _ messages _ consistent ( login , message ) ; assert _ sent _ messages _ consistent ( login ) ;", "predictions": ["assert _ sent _ messages _ consistent ( login , login ) connection connection connection connection connection connection ; table , ;"]}, {"before_ctx": "<%> <*> sender -> recipient </%> <%> <-> . state _ manager </%> <%> <-> , message </%> <%> <+> , message </%> ", "before_line": " assert _ sent _ messages _ consistent ( login ) ; assert _ sent _ messages _ consistent ( login , message ) ; ", "after_ctx": " <%> <*> sender -> recipient </%> <%> <-> . state _ manager </%>", "after_line": "assert _ sent _ messages _ consistent ( login , message ) ; assert _ sent _ messages _ consistent ( login ) ;", "predictions": ["assert _ sent _ messages _ consistent ( login , login ) ;"]}, {"before_ctx": "<%> <-> assert _ sent _ messages _ consistent ( null , message ) ; </%> <%> <*> sender -> recipient </%> <%> <-> . state _ manager </%> <%> <-> , message </%> <%> <+> , message </%> ", "before_line": " assert _ sent _ messages _ consistent ( login ) ; assert _ sent _ messages _ consistent ( login , message ) ; ", "after_ctx": " <%> <+> p = > </%> <%> <+> ( p ) </%> <%> <+> p = > </%> <%> <+> ( p ) </%>", "after_line": "assert _ sent _ messages _ consistent ( login , message ) ; assert _ sent _ messages _ consistent ( login ) ;", "predictions": ["assert _ sent _ messages _ consistent ( login , login ) entity entity entity entity entity entity ; ; ; ; , item assert ; ; ; ; ; ; ( ) ( </%> , </%> , </%> ) ( ) = info = binding binding ( ( p = bool </%> </%> -> </%> </%> </%> </%> </%> ) <*>"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ entity _ migrations _ utilities ; using microsoft _ data _ entity _ relational ; ", "after_ctx": " <%> <+> _ relational </%>", "after_line": "using microsoft _ data _ entity _ relational _ migrations _ utilities ;", "predictions": ["using microsoft _ data _ entity _ relational _ utilities ;"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ entity _ migrations _ infrastructure ; using microsoft _ data _ entity _ relational ; ", "after_ctx": " <%> <-> using microsoft _ data _ entity _ utilities ; </%> <%> <*> migrations -> relational </%> <%> <+> _ migrations </%>", "after_line": "using microsoft _ data _ entity _ relational _ migrations _ infrastructure ;", "predictions": ["using microsoft _ data _ entity _ migrations _ infrastructure ; using ( message _ message _ message _ ; <%> ) cancellation <@> cancellation _ <%> _ : STR"]}, {"before_ctx": " ", "before_line": " return operation _ processor . process ( operations , new metadata . model ( ) , model ) ; ", "after_ctx": " <%> <-> metadata . </%>", "after_line": "return operation _ processor . process ( operations , new model ( ) , model ) ;", "predictions": ["return operation _ processor . process ( operations , new model ( data entity entity entity entity , <*> ) ) ) ) microsoft ) microsoft"]}, {"before_ctx": "<%> <-> metadata . </%> ", "before_line": " return operation _ processor . process ( operations , model , new metadata . model ( ) ) ; ", "after_ctx": " ", "after_line": "return operation _ processor . process ( operations , model , new model ( ) ) ;", "predictions": ["return process ( operations , model , new metadata . model ( ) ) using using ;"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ entity _ migrations _ infrastructure ; using microsoft _ data _ entity _ relational ; ", "after_ctx": " <%> <+> _ relational </%>", "after_line": "using microsoft _ data _ entity _ relational _ migrations _ infrastructure ;", "predictions": ["using microsoft _ data _ entity _ relational _ infrastructure ; using microsoft _ t _ ; ( <%> _ <%> _ , <%> assert assert _ </%> _ ( infrastructure _ new ) STR"]}, {"before_ctx": " ", "before_line": " using microsoft _ data _ entity _ migrations _ infrastructure ; using microsoft _ data _ entity _ relational ; ", "after_ctx": " <%> <+> _ relational </%>", "after_line": "using microsoft _ data _ entity _ relational _ migrations _ infrastructure ;", "predictions": ["using microsoft _ data _ entity _ relational _ infrastructure ; using microsoft _ data _ , ; ( </@> _ <@> _ , <%> assert assert _ </%> _ , <%> < < < < ( table _ nameof _ ( _ name _ type ) < assert _ > _ ) . null . null _ target _ null . null _ <*> _ </%> _ <*> _ < < < < < </%> ) ) ;"]}, {"before_ctx": " ", "before_line": " not _ null reverse _ engineering _ generator generator , not _ null i _ entity _ type entity _ type , can _ be _ null string namespace _ name ) ", "after_ctx": " <%> <+> check . not _ null ( generator , nameof ( generator ) ) ; check . not _ null ( entity _ type , nameof ( entity _ type ) ) ; check . not _ null ( namespace _ name , nameof ( namespace _ name ) ) ; </%> <%> <+> check . not _ null ( sb , nameof ( sb ) ) ; </%>", "after_line": "not _ null reverse _ engineering _ generator generator , not _ null i _ entity _ type entity _ type , not _ null string namespace _ name )", "predictions": ["not _ null reverse _ engineering _ generator generator , not _ , . entity _ entity _ type ( = = = async _ <@> _ ) object -> _ bool , <@> _ </@> _ ) object , ( connection _ <*> , connection _ <-> i )"]}, {"before_ctx": " ", "before_line": " not _ null reverse _ engineering _ generator generator , not _ null i _ entity _ type entity _ type , can _ be _ null string namespace _ name ) ", "after_ctx": " <%> <+> check . not _ null ( generator , nameof ( generator ) ) ; check . not _ null ( entity _ type , nameof ( entity _ type ) ) ; check . not _ empty ( namespace _ name , nameof ( namespace _ name ) ) ; </%>", "after_line": "not _ null reverse _ engineering _ generator generator , not _ null i _ entity _ type entity _ type , not _ null string namespace _ name )", "predictions": ["not _ null reverse _ engineering _ generator generator , not _ <+> null null _ p _ check _ check _ check _ check null null string . type null"]}, {"before_ctx": "<%> <+> < int > </%> <%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%> ", "before_line": " public task < object > execute _ scalar _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true ) ", "after_ctx": " <%> <-> , cancellation _ token cancellation _ token = default ( cancellation _ token ) </%> <%> <*> ) -> , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </%>", "after_line": "public task < object > execute _ scalar _ async ( i _ relational _ connection connection , bool manage _ connection = true , cancellation _ token cancellation _ token = default ( cancellation _ token ) )", "predictions": ["public task < i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , -> bool _ connection <%> default ( . _ type | . null | . , , ( return ( ( ) <%> _ STR ) ) )"]}, {"before_ctx": "<%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%> ", "before_line": " public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true , i _ read _ only _ dictionary < string , object > parameters = null ) ", "after_ctx": " ", "after_line": "public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ connection connection , bool manage _ connection = true , i _ read _ only _ dictionary < string , object > parameters = null , cancellation _ token cancellation _ token = default ( cancellation _ token ) )", "predictions": ["public task < relational _ data _ reader > execute _ reader _ async ; entity _ type , , , , <+> message _ ( ) <%> = null _ null ( entity )"]}, {"before_ctx": "<%> <*> void -> int </%> <%> <+> < int > </%> <%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%> ", "before_line": " public task < object > execute _ scalar _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true ) ", "after_ctx": " <%> <-> , cancellation _ token cancellation _ token = default ( cancellation _ token ) </%> <%> <*> ) -> , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </%>", "after_line": "public task < object > execute _ scalar _ async ( i _ relational _ connection connection , bool manage _ connection = true , cancellation _ token cancellation _ token = default ( cancellation _ token ) )", "predictions": ["public task < int > execute _ scalar _ async ( i _ relational _ connection connection , . _ type . . . target = null )"]}, {"before_ctx": "<%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%> ", "before_line": " public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true , i _ read _ only _ dictionary < string , object > parameters = null ) ", "after_ctx": " ", "after_line": "public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ connection connection , bool manage _ connection = true , i _ read _ only _ dictionary < string , object > parameters = null , cancellation _ token cancellation _ token = default ( cancellation _ token ) )", "predictions": ["public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ , , entity _ type entity _ type ( default ; null <%> ; , = = string _ , parameters parameters token token , null void void is get _ interface _ async -> parameters , dictionary _ only _ execute _ async > </@> . to </%> to )"]}, {"before_ctx": " ", "before_line": " = > ( int ) await create _ has _ tables _ command ( ) . execute _ scalar _ async ( connection , cancellation _ token ) ! = 0 ; ", "after_ctx": " <%> <+> raw _ </%>", "after_line": "= > ( int ) await create _ has _ tables _ command ( ) . execute _ scalar _ async ( connection , cancellation _ token : cancellation _ token ) ! = 0 ;", "predictions": ["= > ( int ) await create _ has _ tables _ command ; <%> ( connection _ async _ async <%> ( . _ to </%> token token , > 0 _ 0 _ cancellation _ -> _ state </%> null not _ <-> > assert ) connection ) ,"]}, {"before_ctx": "<%> <*> void -> int </%> <%> <+> return 0 ; </%> <%> <+> < int > </%> <%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%> ", "before_line": " public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true , i _ read _ only _ dictionary < string , object > parameters = null ) ", "after_ctx": " <%> <+> , bool manage _ connection = true </%> <%> <*> , bool manage _ connection = true ) -> ) </%>", "after_line": "public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ connection connection , bool manage _ connection = true , i _ read _ only _ dictionary < string , object > parameters = null , cancellation _ token cancellation _ token = default ( cancellation _ token ) )", "predictions": ["public task < relational _ data _ reader > execute _ reader _ async ( i _ relational ) _ _ _ array ] ( i ) ( -> ) ( -> ; -> ; i )"]}, {"before_ctx": "<%> <-> , cancellation _ token cancellation _ token = default ( cancellation _ token ) </%> <%> <*> ) -> , cancellation _ token cancellation _ token = default ( cancellation _ token ) ) </%> ", "before_line": " public task < object > execute _ scalar _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token = default ( cancellation _ token ) , bool manage _ connection = true ) ", "after_ctx": " ", "after_line": "public task < object > execute _ scalar _ async ( i _ relational _ connection connection , bool manage _ connection = true , cancellation _ token cancellation _ token = default ( cancellation _ token ) )", "predictions": ["public task execute _ scalar _ async ( i _ relational _ connection connection , STR STR , <*> <@> _ = connection bool null connection bool null cancellation _ = entity not _ ( ) ( <%> _ > , cancellation _ token ) )"]}, {"before_ctx": "<%> <-> ( cancellation _ token ) </%> ", "before_line": " verify _ produced _ expression < int , bool > ( value = > value . any _ async ( e = > true , default ( cancellation _ token ) ) ) ; ", "after_ctx": " ", "after_line": "verify _ produced _ expression < int , bool > ( value = > value . any _ async ( e = > true , default ) ) ;", "predictions": ["verify _ produced _ expression < bool > ( value = > value . parameter _ values _ <+> _ command _ <*> ( <+> ) ( <*> _ ; , <*> ( value state state _ ; state state state state </%> </%> <+> _ -> </%> </%> <%> </%> </%> </%> ) </%> . ( ( ( . ( values value ) } ; null ( values value ( <*> _ token </%> entity <%> </%> <*> <%> </%> </%> </%> </%> _ token </%> </%> _ token </%> </%> <%> </%> </%> </%> </%> </%> _ token"]}, {"before_ctx": "<%> <-> ( cancellation _ token ) </%> ", "before_line": " verify _ produced _ expression < int , int > ( value = > value . single _ async ( e = > true , default ( cancellation _ token ) ) ) ; ", "after_ctx": " <%> <-> ( cancellation _ token ) </%> <%> <-> ( cancellation _ token ) </%> <%> <-> ( cancellation _ token ) </%>", "after_line": "verify _ produced _ expression < int , int > ( value = > value . single _ async ( e = > true , default ) ) ;", "predictions": ["verify _ produced _ expression < int , int > ( value = > value parameter parameter ( ) </%> [ _ ; ( ) ( ) ( ) ( ) ( , create _ token </%> </%> </%> </%> </%> _ entity . , . , properties . this , . , , , i = ) ( ) </%> </%> ; <%> </%> _ ) </%> </%> <%>"]}, {"before_ctx": "<%> <+> { if ( query _ source ! = null ) </%> ", "before_line": " if ( query _ source ! = null ) { demote _ query _ source ( query _ source ) ; } } ) ; ", "after_ctx": " ", "after_line": "demote _ query _ source ( query _ source ) ; } } ) ;", "predictions": ["demote _ query _ source ( query _ source ) ; } }"]}, {"before_ctx": " ", "before_line": " = typeof ( random ) . get _ runtime _ method ( nameof ( random . next ) , new type [ ] { typeof ( int ) } ) ; ", "after_ctx": " <%> <-> type </%>", "after_line": "= typeof ( random ) . get _ runtime _ method ( nameof ( random . next ) , new [ ] { typeof ( int ) } ) ;", "predictions": ["= typeof ( random ) . get _ runtime _ method ( nameof ( ; ( ; next ( next ( <@> ( <@> ( <@> ( <@> ( <@> ( <@> ( async _ _ _ _ _ _ _ _ = } = } = } = } = } = ; = <*> . <+> . = _ var <%> foreach <%> <%> <%> <%> <%> <%> <%> key key ) key key key key key key key key key key key key key key key key key key key key key key key key key key"]}, {"before_ctx": "<%> <-> type </%> ", "before_line": " = typeof ( random ) . get _ runtime _ method ( nameof ( random . next ) , new type [ ] { typeof ( int ) , typeof ( int ) } ) ; ", "after_ctx": " ", "after_line": "= typeof ( random ) . get _ runtime _ method ( nameof ( random . next ) , new [ ] { typeof ( int ) , typeof ( int ) } ) ;", "predictions": ["= typeof ( random ) . get _ runtime _ method ( nameof ( </%> token ( expression ( <-> ( <-> ( <-> ( <-> ( <-> ( <-> ( <-> _ 1 = ( value = value ; value _ ) . <*> . ) <-> . ) <-> . state <-> <-> foreach <%> <%> foreach key key <+> key _ ( key key <+> <+> _ ( values = ( values = . = values = ( values = values = values = values = values = values = values = values = values = values"]}, {"before_ctx": "<%> <*> if -> for </%> <%> <*> result ! -> var i </%> <%> <*> null ) -> 0 ; i < entity _ tracking _ infos . count ; i + + ) </%> <%> <*> for ( var i = 0 ; i < entity _ tracking _ infos . count ; i + + ) -> var entity _ or _ collection = entity _ accessors [ i ] ( result as t _ in ) ; </%> <%> <+> if ( entity _ or _ collection ! = null ) </%> <%> <*> or -> tracking </%> <%> <*> collection -> info </%> <%> <+> _ tracking </%> <%> <*> accessors -> infos </%> <%> <*> ( result as t _ in ) ; -> ; </%> <%> <*> or -> tracking </%> <%> <*> collection ! = null -> info . is _ enumerable _ target </%> <%> <*> var entity _ tracking _ info = entity _ tracking _ infos [ i ] ; if ( entity _ tracking _ info . is _ enumerable _ target ) -> foreach ( var entity in ( i _ enumerable ) entity _ or _ collection ) </%> ", "before_line": " foreach ( var entity in ( i _ enumerable ) entity _ or _ collection ) { query _ context . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ; } ", "after_ctx": " <%> <-> else </%> <%> <*> { -> } </%> <%> <*> query _ context . start _ tracking ( entity _ or _ collection , entity _ tracking _ infos [ i ] ) ; -> else </%> <%> <*> } -> { </%> <%> <+> query _ context . start _ tracking ( entity _ or _ collection , entity _ tracking _ infos [ i ] ) ; </%> <%> <+> } </%>", "after_line": "query _ context . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;", "predictions": ["query _ context . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;"]}, {"before_ctx": "<%> <*> or -> tracking </%> <%> <*> collection -> info </%> <%> <+> _ tracking </%> <%> <*> accessors -> infos </%> <%> <*> ( result as t _ in ) ; -> ; </%> <%> <*> or -> tracking </%> <%> <*> collection ! = null -> info . is _ enumerable _ target </%> <%> <*> var entity _ tracking _ info = entity _ tracking _ infos [ i ] ; if ( entity _ tracking _ info . is _ enumerable _ target ) -> foreach ( var entity in ( i _ enumerable ) entity _ or _ collection ) </%> <%> <-> foreach ( var entity in ( i _ enumerable ) entity _ or _ collection ) { </%> <%> <-> } </%> ", "before_line": " else { query _ context . start _ tracking ( entity _ or _ collection , entity _ tracking _ infos [ i ] ) ; } ", "after_ctx": " <%> <+> } </%>", "after_line": "} else { query _ context . start _ tracking ( entity _ or _ collection , entity _ tracking _ infos [ i ] ) ;", "predictions": ["query _ context . start _ tracking ( entity _ or _ collection , , , , _ ; factory factory </%> < </%> _ <%> _ </@> ) ( ) type ;"]}, {"before_ctx": "<%> <*> state _ manager . state _ changing ( this , entity _ state . unchanged ) ; -> var notifier = configuration . state _ entry _ notifier ; </%> <%> <+> notifier . state _ changing ( this , entity _ state . unchanged ) ; </%> <%> <*> state _ manager -> notifier </%> ", "before_line": " return state _ manager . create _ key ( entity _ type , entity _ type . get _ key ( ) . properties , this ) ; ", "after_ctx": " <%> <-> state _ manager . </%> <%> <*> return state _ manager . create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . referenced _ properties , this ) ; -> return create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . referenced _ properties , this ) ; </%> <%> <+> } </%>", "after_line": "return create _ key ( entity _ type , entity _ type . get _ key ( ) . properties , this ) ;", "predictions": ["return create _ key ( foreign _ key . create _ key ( entity _ in entity entity _ in entity ) <%> <%> <+> entity entity entity <%> ) ->"]}, {"before_ctx": "<%> <*> state _ manager -> notifier </%> <%> <-> state _ manager . </%> ", "before_line": " return state _ manager . create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . properties , this ) ; ", "after_ctx": " <%> <*> return state _ manager . create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . referenced _ properties , this ) ; -> return create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . referenced _ properties , this ) ; </%> <%> <+> } private entity _ key create _ key ( i _ entity _ type entity _ type , i _ read _ only _ list < i _ property > properties , state _ entry entry ) { return configuration . entity _ key _ factory _ source . get _ key _ factory ( properties ) </%>", "after_line": "return create _ key ( foreign _ key . referenced _ entity _ type , foreign _ key . properties , this ) ;", "predictions": ["return state _ manager . create _ key ( foreign _ key _ type ) ) enumerable enumerable _ <+> ( i _ = ( value . sql _ ; ) ) [ 0 _ var </%> ) _ <%> </%> ) _ <%> </%> ) _ ) </%> ) _ <%> </%> i _ . <%> ;"]}, {"before_ctx": "<%> <*> sets = new context _ entity _ sets ( this , configuration . entity _ set _ source ) ; configuration . entity _ set _ initializer . initialize _ sets ( this ) ; model = new lazy _ ref < i _ model > ( ( ) = > configuration . model _ source . get _ model ( this ) ) ; state _ manager = new lazy _ ref < state _ manager > ( ( ) = > configuration . state _ manager _ factory . create ( model . value ) ) ; -> var scoped _ provider = configuration </%> <%> <+> . service _ provider . get _ service < i _ service _ scope _ factory > ( ) . create _ scope ( ) . service _ provider ; configuration = scoped _ provider . get _ service < context _ configuration > ( ) . initialize ( scoped _ provider , this ) ; sets = configuration . context _ entity _ sets ; sets . initialize _ sets ( this ) ; </%> <%> <*> internal void call _ on _ configuring ( entity -> public virtual context </%> <%> <*> _ builder builder ) -> configuration </%> <%> <*> on _ configuring ( builder ) -> get { return configuration </%> <%> <+> } </%> <%> <+> internal </%> ", "before_line": " internal void call _ on _ model _ creating ( model _ builder builder ) { on _ model _ creating ( builder ) ; } protected virtual void on _ model _ creating ( [ not _ null ] model _ builder builder ) ", "after_ctx": " <%> <*> return configuration . data _ store . save _ changes _ async ( state _ manager . value . state _ entries , model , cancellation _ token ) ; -> return configuration . data _ store . save _ changes _ async ( </%>", "after_line": "protected internal virtual void on _ model _ creating ( [ not _ null ] model _ builder builder )", "predictions": ["internal virtual void call _ on _ model _ creating ( model _ builder builder ) { on _ model _ creating ( builder ) ; } protected virtual void on _ model _ creating ( model _ builder builder )"]}, {"before_ctx": "<%> <+> { type _ mapping = sql _ constant . type _ mapping ; var values = ( i _ enumerable ) sql _ constant . value ; foreach ( var value in values ) </%> <%> <*> type _ mapping = sql _ constant . type _ mapping ; var values = ( i _ enumerable ) sql _ constant . value ; foreach ( var value in values ) -> if ( value = = null ) </%> ", "before_line": " if ( value = = null ) { has _ null _ value = true ; continue ; } in _ values . add ( value ) ; ", "after_ctx": " <%> <+> in _ values . add ( value ) ; </%> <%> <+> } </%> <%> <+> { type _ mapping = sql _ parameter . type _ mapping ; var values = ( i _ enumerable ) parameters _ values [ sql _ parameter . name ] ; foreach ( var value in values ) </%>", "after_line": "has _ null _ value = true ; continue ;", "predictions": ["has _ null _ value = true ; continue ;"]}, {"before_ctx": "<%> <+> } </%> <%> <+> { type _ mapping = sql _ parameter . type _ mapping ; var values = ( i _ enumerable ) parameters _ values [ sql _ parameter . name ] ; foreach ( var value in values ) </%> <%> <*> type _ mapping = sql _ parameter . type _ mapping ; var values = ( i _ enumerable ) parameters _ values [ sql _ parameter . name ] ; foreach ( var value in values ) -> if ( value = = null ) </%> ", "before_line": " if ( value = = null ) { has _ null _ value = true ; continue ; } in _ values . add ( value ) ; ", "after_ctx": " <%> <+> in _ values . add ( value ) ; </%> <%> <+> } </%>", "after_line": "has _ null _ value = true ; continue ;", "predictions": ["has _ null _ value = true ; continue ;"]}, {"before_ctx": "<%> <+> { if ( value = = null ) </%> ", "before_line": " if ( value = = null ) { has _ null _ value = true ; continue ; } in _ values . add ( value ) ; ", "after_ctx": " <%> <+> in _ values . add ( value ) ; } </%>", "after_line": "has _ null _ value = true ; continue ;", "predictions": ["has _ null _ value = true ; continue ;"]}, {"before_ctx": "<%> <+> in _ values . add ( value ) ; } </%> <%> <+> { if ( value = = null ) </%> ", "before_line": " if ( value = = null ) { has _ null _ value = true ; continue ; } in _ values . add ( value ) ; ", "after_ctx": " <%> <+> in _ values . add ( value ) ; } </%>", "after_line": "has _ null _ value = true ; continue ;", "predictions": ["has _ null _ value = true ; continue ;"]}, {"before_ctx": "<%> <+> , false </%> <%> <*> 2 -> 1 </%> ", "before_line": " assert . equal ( STR , store _ command . relational _ command . parameters [ 1 ] . invariant _ name ) ; assert . equal ( 2 , store _ command . parameter _ values . count ) ; ", "after_ctx": " <%> <-> assert . equal ( 1 , store _ command . parameter _ values [ STR ] ) ; </%>", "after_line": "assert . equal ( 1 , store _ command . parameter _ values . count ) ;", "predictions": ["assert . equal ( 2 , store _ command . relational _ command . configuration [ _ = type _ <@> . manager key ( 2 ( 2 ( ) state . entity <%> <%> key ) _ <+> ) ) ) = -> = <%> = ) ) . } value value ;"]}, {"before_ctx": " ", "before_line": " conditional _ fact _ skip _ query _ issue ", "after_ctx": " <%> <*> enumerable . first _ or _ default ( -> ( </%>", "after_line": "conditional _ fact", "predictions": ["conditional _ fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <+> ( ) . as _ no _ tracking </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "theory", "predictions": ["theory _ skip _ query _ issue"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> ", "before_line": " theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%>", "after_line": "theory", "predictions": ["theory _ skip _ query _ issue"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> ", "before_line": " theory _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "theory", "predictions": ["theory _ skip _ query _ issue"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> <%> <-> _ skip _ query _ issue </%> ", "before_line": " theory _ skip _ query _ issue ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " <%> <-> _ skip _ tasklist _ include </%>", "after_line": "theory", "predictions": ["theory _ skip _ tasklist _ include"]}, {"before_ctx": "<%> <-> _ skip _ tasklist _ include </%> ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " <%> <-> _ skip _ tasklist _ include </%>", "after_line": "theory", "predictions": ["theory _ skip _ tasklist _ include"]}, {"before_ctx": "<%> <-> _ skip _ tasklist _ include </%> ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " <%> <-> _ skip _ tasklist _ include </%>", "after_line": "theory", "predictions": ["theory _ skip _ tasklist _ include"]}, {"before_ctx": "<%> <-> _ skip _ tasklist _ include </%> ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " <%> <-> _ skip _ tasklist _ include </%>", "after_line": "theory", "predictions": ["theory _ skip _ tasklist _ include"]}, {"before_ctx": "<%> <-> _ skip _ tasklist _ include </%> ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " <%> <-> _ skip _ tasklist _ include </%>", "after_line": "theory", "predictions": ["theory _ skip _ tasklist _ include"]}, {"before_ctx": "<%> <-> _ skip _ tasklist _ include </%> ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " <%> <-> _ skip _ tasklist _ include </%>", "after_line": "theory", "predictions": ["theory _ skip _ tasklist _ include"]}, {"before_ctx": "<%> <-> _ skip _ tasklist _ include </%> ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " <%> <-> _ skip _ tasklist _ include </%>", "after_line": "theory", "predictions": ["theory _ skip _ tasklist _ include"]}, {"before_ctx": "<%> <-> _ skip _ tasklist _ include </%> ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " <%> <-> _ skip _ tasklist _ include </%>", "after_line": "theory", "predictions": ["theory _ skip _ tasklist _ include"]}, {"before_ctx": "<%> <-> _ skip _ tasklist _ include </%> ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " <%> <-> _ skip _ tasklist _ include </%>", "after_line": "theory", "predictions": ["theory _ skip _ tasklist _ include"]}, {"before_ctx": "<%> <-> _ skip _ tasklist _ include </%> ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " <%> <-> _ skip _ tasklist _ include </%>", "after_line": "theory", "predictions": ["theory _ skip _ tasklist _ include"]}, {"before_ctx": "<%> <-> _ skip _ tasklist _ include </%> ", "before_line": " theory _ skip _ tasklist _ include ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory"]}, {"before_ctx": " ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " <%> <-> _ skip _ query _ issue </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <-> _ skip _ query _ issue </%> ", "before_line": " fact _ skip _ query _ issue ", "after_ctx": " ", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": " ", "before_line": " public override i _ model _ builder _ factory model _ builder _ factory = > model _ builder _ factory ; ", "after_ctx": " <%> <-> i _ </%>", "after_line": "public override model _ builder _ factory model _ builder _ factory = > model _ builder _ factory ;", "predictions": ["public override model _ builder _ builder _ factory model _ builder _ factory = > . . . . , ,"]}, {"before_ctx": "<%> <-> i _ </%> ", "before_line": " public override i _ model _ source model _ source = > model _ source ; ", "after_ctx": " ", "after_line": "public override model _ source model _ source = > model _ source ;", "predictions": ["public override i _ model _ source model _ query = > _ query <%>"]}, {"before_ctx": " ", "before_line": " public override i _ model _ builder _ factory model _ builder _ factory = > model _ builder _ factory ; ", "after_ctx": " <%> <-> i _ </%>", "after_line": "public override model _ builder _ factory model _ builder _ factory = > model _ builder _ factory ;", "predictions": ["public override model _ builder _ builder _ factory model _ builder _ factory = > model _ builder _ factory ;"]}, {"before_ctx": "<%> <-> i _ </%> ", "before_line": " public override i _ model _ source model _ source = > model _ source ; ", "after_ctx": " ", "after_line": "public override model _ source model _ source = > model _ source ;", "predictions": ["public override i _ model _ source model _ query = > _ query <%>"]}, {"before_ctx": " ", "before_line": " benchmark _ skip _ see _ issue ", "after_ctx": " <%> <+> . select ( </%>", "after_line": "benchmark", "predictions": ["benchmark"]}, {"before_ctx": " ", "before_line": " STR , typeof ( navigation _ as _ property ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , ", "after_ctx": " <%> <*> core _ strings . property _ not _ mapped ( STR , typeof ( int ) . display _ name ( ) , typeof ( primitive _ property _ entity ) . display _ name ( full _ name : false ) ) , -> core _ strings . property _ not _ mapped ( </%>", "after_line": "typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) , STR , typeof ( navigation _ as _ property ) . display _ name ( full _ name : false ) ) ,", "predictions": ["STR , typeof ( navigation _ as _ property ) . display _ name ( full _ . false ) name name name name name name name name name :"]}, {"before_ctx": "<%> <*> STR , typeof ( navigation _ as _ property ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , -> typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) , </%> <%> <+> STR , typeof ( navigation _ as _ property ) . display _ name ( full _ name : false ) ) , </%> ", "before_line": " core _ strings . property _ not _ mapped ( STR , typeof ( int ) . display _ name ( ) , typeof ( primitive _ property _ entity ) . display _ name ( full _ name : false ) ) , ", "after_ctx": " <%> <*> core _ strings . property _ not _ added ( STR , typeof ( cancellation _ token ) . name , typeof ( non _ primitive _ value _ type _ property _ entity ) . display _ name ( full _ name : false ) ) , -> core _ strings . property _ not _ added ( </%>", "after_line": "core _ strings . property _ not _ mapped ( typeof ( primitive _ property _ entity ) . display _ name ( full _ name : false ) , STR , typeof ( int ) . display _ name ( ) ) ,", "predictions": ["core _ strings . property _ not _ mapped ( STR , typeof ( int ) . display _ name ( ) , typeof ( primitive _ property _ entity ) ) ("]}, {"before_ctx": "<%> <*> core _ strings . property _ not _ mapped ( STR , typeof ( int ) . display _ name ( ) , typeof ( primitive _ property _ entity ) . display _ name ( full _ name : false ) ) , -> core _ strings . property _ not _ mapped ( </%> <%> <+> typeof ( primitive _ property _ entity ) . display _ name ( full _ name : false ) , STR , typeof ( int ) . display _ name ( ) ) , </%> ", "before_line": " core _ strings . property _ not _ added ( STR , typeof ( cancellation _ token ) . name , typeof ( non _ primitive _ value _ type _ property _ entity ) . display _ name ( full _ name : false ) ) , ", "after_ctx": " ", "after_line": "core _ strings . property _ not _ added ( typeof ( non _ primitive _ value _ type _ property _ entity ) . display _ name ( full _ name : false ) , STR , typeof ( cancellation _ token ) . name ) ,", "predictions": ["core _ strings . property _ not _ added ( STR , typeof ( cancellation _ <@> </%> <*> -> <*> . display -> var </%> var </%> </%> _ ( ) get _ ) </%> </%> </%> </%> get _ ) expression expression ."]}, {"before_ctx": "<%> <+> entity _ type . display _ name ( ) , </%> <%> <-> ) , entity _ type . display _ name ( </%> ", "before_line": " actual _ property . name , property _ type . display _ name ( full _ name : false ) , entity _ type . display _ name ( ) ) ) ; ", "after_ctx": " <%> <+> entity _ type . display _ name ( ) , </%> <%> <-> ) , entity _ type . display _ name ( </%>", "after_line": "entity _ type . display _ name ( ) , actual _ property . name , property _ type . display _ name ( full _ name : false ) ) ) ;", "predictions": ["actual _ property . name , property _ type . display _ name ( full _ ) > access _ code ? ? as as _ ) expression ( ( result ( ( ( as _ ) equal ( as _ ) equal ( <%> _ </%> expression <%> _ </%> expression <%> <%> expression <%> ( ( false _ as . ) ( ( ( ) ( false _ as . ) ( ( ( false _ as . ) ( false _ as . ) ( false _ as . ) ( ( ( false _ as ."]}, {"before_ctx": "<%> <+> entity _ type . display _ name ( ) , </%> <%> <-> ) , entity _ type . display _ name ( </%> ", "before_line": " actual _ property . name , property _ type . display _ name ( full _ name : false ) , entity _ type . display _ name ( ) ) ) ; ", "after_ctx": " <%> <+> entity _ type . display _ name ( ) , </%> <%> <-> ) , entity _ type . display _ name ( </%>", "after_line": "entity _ type . display _ name ( ) , actual _ property . name , property _ type . display _ name ( full _ name : false ) ) ) ;", "predictions": ["actual _ property . name , property _ type . display _ name ( full _ name : false ) ) ;"]}, {"before_ctx": "<%> <+> entity _ type . display _ name ( ) , </%> <%> <-> ) , entity _ type . display _ name ( </%> ", "before_line": " actual _ property . name , property _ type . display _ name ( full _ name : false ) , entity _ type . display _ name ( ) ) ) ; ", "after_ctx": " ", "after_line": "entity _ type . display _ name ( ) , actual _ property . name , property _ type . display _ name ( full _ name : false ) ) ) ;", "predictions": ["actual _ property . name , property _ type . display _ name ( full _ , : _ property _ , ( </%> _ type <-> false ) ) property = get _ type . = _ ( result ) result </%>"]}, {"before_ctx": " ", "before_line": " assert . equal ( core _ strings . property _ not _ mapped ( STR , typeof ( long ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , ", "after_ctx": " <%> <*> assert . equal ( core _ strings . property _ not _ mapped ( STR , typeof ( long ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , -> assert . equal ( core _ strings . property _ not _ mapped ( </%>", "after_line": "assert . equal ( core _ strings . property _ not _ mapped ( typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) , STR , typeof ( long ) . display _ name ( full _ name : false ) ) ,", "predictions": ["assert . equal ( core _ strings . property _ not _ mapped ( STR , core ( long ) , core ( -> _ . typeof STR ) name name ( ;"]}, {"before_ctx": "<%> <*> assert . equal ( core _ strings . property _ not _ mapped ( STR , typeof ( long ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , -> assert . equal ( core _ strings . property _ not _ mapped ( </%> <%> <+> typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) , STR , typeof ( long ) . display _ name ( full _ name : false ) ) , </%> ", "before_line": " assert . equal ( core _ strings . property _ not _ mapped ( STR , typeof ( long ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) ) , ", "after_ctx": " ", "after_line": "assert . equal ( core _ strings . property _ not _ mapped ( typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( full _ name : false ) , STR , typeof ( long ) . display _ name ( full _ name : false ) ) ,", "predictions": ["assert . equal ( core _ strings . property _ not _ mapped ( STR , typeof ( long ) . display _ name ( full _ name : false ) . typeof _ , ) ( : : , not _ , property . name <%> <*> . name <%> <*> . ( <*> . ( -> . ( -> . name <%> -> . name <%> -> . name <%> -> . name <%> . name <%> . name <%> -> . name <-> <*> . ( <*> . ( -> . ( entity . name <%> ->"]}, {"before_ctx": " ", "before_line": " list < tuple < property _ info , type > > referencing _ navigations _ with _ attribute ; if ( ! inverse _ navigations . try _ get _ value ( inverse _ navigation , out referencing _ navigations _ with _ attribute ) ) ", "after_ctx": " <%> <-> ( equals </%> <%> <*> , -> . is _ same _ as ( </%>", "after_line": "if ( ! inverse _ navigations . try _ get _ value ( inverse _ navigation , out list < tuple < property _ info , type > > referencing _ navigations _ with _ attribute ) )", "predictions": ["if ( ! inverse _ navigations . try _ get _ value ( inverse _ navigation name name name ( out _ . name <%> _ . ( property _ ? _ </%> _ false , type _ name _ as _ false , <+> type type ) <*> <*> <*> <*> ) <*> )"]}, {"before_ctx": "<%> <+> var expected _ principal _ properties = principal _ type . properties . to _ list ( ) ; var expected _ dependent _ properties = dependent _ type . properties . to _ list ( ) ; </%> ", "before_line": " . foreign _ key < order _ details > ( e = > e . order _ id ) . referenced _ key < order > ( e = > e . order _ id ) ; ", "after_ctx": " <%> <*> equal -> same ( fk . get _ navigation _ to _ principal </%> <%> <*> STR -> ) </%> <%> <-> . name </%> <%> <*> equal -> same ( fk . get _ navigation _ to _ dependent </%> <%> <*> STR -> ) </%> <%> <-> . name </%> <%> <*> new [ ] { STR , STR , -> expected _ </%> <%> <-> key . </%> <%> <-> . single ( ) . name } </%> <%> <-> . select ( p = > p . name ) </%> <%> <*> new [ ] { -> expected _ </%> <%> <-> key . </%> <%> <-> . single ( ) . name , fk _ property . name } </%> <%> <-> . select ( p = > p . name ) </%>", "after_line": ". referenced _ key < order > ( e = > e . order _ id ) . foreign _ key < order _ details > ( e = > e . order _ id ) ;", "predictions": [". foreign _ key ( e = > e . order _ id ) . referenced _ key ( e = > e . order _ id ) ;"]}, {"before_ctx": "<%> <-> _ principal _ and </%> <%> <*> dependent -> creates </%> <%> <*> can -> fk </%> <%> <*> be -> when </%> <%> <*> flipped -> principal </%> <%> <*> in -> and </%> <%> <*> both -> foreign </%> <%> <*> ways -> key </%> <%> <*> in -> specified </%> <%> <*> reverse -> on </%> <%> <*> order -> principal </%> ", "before_line": " var dependent _ type = model . get _ entity _ type ( typeof ( order _ details ) ) ; var principal _ type = model . get _ entity _ type ( typeof ( order ) ) ; ", "after_ctx": " <%> <+> var expected _ principal _ properties = principal _ type . properties . to _ list ( ) ; var expected _ dependent _ properties = dependent _ type . properties . to _ list ( ) ; </%> <%> <*> referenced -> foreign </%> <%> <*> foreign -> referenced </%>", "after_line": "var dependent _ type = model . get _ entity _ type ( typeof ( order ) ) ; var principal _ type = model . get _ entity _ type ( typeof ( order _ details ) ) ;", "predictions": ["var dependent _ type = model . get _ entity _ type ( typeof ( order _ info , <*> , property ) , ) ; _ get _ entity _ full , -> , entity , -> , -> , entity : -> . not _ core _ : . <+> . order _ details property ;"]}, {"before_ctx": " ", "before_line": " return create _ get _ store _ value _ expression ( j _ object _ expression , store _ name , property . get _ type _ mapping ( ) , property . clr _ type ) ; } private static expression create _ get _ store _ value _ expression ( ", "after_ctx": " <%> <-> core _ type _ mapping </%> <%> <+> clr </%> <%> <*> mapping -> type </%> <%> <+> core _ </%> <%> <-> clr </%> <%> <+> mapping </%> <%> <+> _ mapping = null </%> <%> <*> j _ token -> inner </%> <%> <-> expression . call ( </%> <%> <*> , get _ item _ method _ info , expression . constant ( store _ name ) ) ; -> ; </%> <%> <+> if ( projection _ bindings . try _ get _ value ( j _ object _ expression , out var inner _ variable ) ) { inner _ expression = inner _ variable ; } </%>", "after_line": "return create _ get _ store _ value _ expression ( j _ object _ expression , store _ name , property . clr _ type , property . get _ type _ mapping ( ) ) ; } private expression create _ get _ store _ value _ expression (", "predictions": ["return create _ get _ store _ value _ expression ("]}, {"before_ctx": " ", "before_line": " { return navigation _ binding _ expression . root _ parameter . build _ property _ access ( navigation _ binding _ expression . navigation _ tree _ node . to _ mapping ) ; } ", "after_ctx": " <%> <*> var include _ result = apply _ includes ( navigation _ expansion _ expression ) ; var state = include _ result . state ; var result = visit ( include _ result . operand ) ; -> var ( result , state ) = apply _ includes ( navigation _ expansion _ expression ) ; </%> <%> <+> result = visit ( result ) ; </%>", "after_line": "return navigation _ binding _ expression . root _ parameter . build _ property _ access ( navigation _ binding _ expression . navigation _ tree _ node . to _ mapping ) ;", "predictions": ["return navigation _ binding _ expression . root _ parameter . build _ property _ access ) . int _ property . display _ mapping . to _ tree _ non name ;"]}, {"before_ctx": "<%> <-> private string get _ name ( ) = > ( expression as key _ access _ expression ) ? . name ? ? ( expression as object _ access _ expression ) ? . name ? ? ( expression as entity _ projection _ expression ) ? . alias ; </%> ", "before_line": " public override int get _ hash _ code ( ) = > hash _ code . combine ( base . get _ hash _ code ( ) , alias , expression ) ; ", "after_ctx": " ", "after_line": "public override int get _ hash _ code ( ) = > hash _ code . combine ( alias , expression ) ;", "predictions": ["public override int get _ hash _ code ( ) = > hash _ code . </@> result <%> <%> <%> <%> <+> ;"]}, {"before_ctx": "<%> <*> public virtual void add _ db _ parameter ( not _ null db _ command command , can _ be _ null object value ) -> public virtual void add _ db _ parameter ( db _ command command , object value ) </%> ", "before_line": " . add ( type _ mapper . get _ mapping _ for _ value ( value ) . create _ parameter ( command , name , value , null ) ) ; ", "after_ctx": " ", "after_line": ". add ( type _ mapper . get _ mapping _ for _ value ( null ) . create _ parameter ( command , name , null ) ) ;", "predictions": [". add ( get _ mapping _ for . ( <%> ) <%> log <%> > i ( STR ( t model t model model ( t _ -> model ( t model model ( t model model ( t model model _ -> model t model model model _ -> model model model model model _ -> model t model model _ -> > model model model model model ( t model > public public public public public public public public public public public t model model model ( t model model _ -> model public public public public"]}, {"before_ctx": " ", "before_line": " var nullable _ string _ values = new string [ ] { STR , STR , null } ; ", "after_ctx": " <%> <-> bool </%> <%> <-> string </%> <%> <-> int </%> <%> <*> int -> var </%> <%> <*> int -> var </%> <%> <*> int -> var </%>", "after_line": "var nullable _ string _ values = new [ ] { STR , STR , null } ;", "predictions": ["string nullable _ string _ values = new <@> <@> </@> path class data data , ! ! <-> <+> get <+> _ is <%> -> <*> { </%> = path ;"]}, {"before_ctx": "<%> <*> if ( formatter ! = null ) -> var message = formatter ? . invoke ( state , exception ) ; </%> <%> <+> if ( ! string . is _ null _ or _ white _ space ( message ) ) </%> <%> <*> var message = formatter ( state , exception ) ; if ( ! string . is _ null _ or _ white _ space ( message ) ) -> lock ( log _ file _ path ) </%> ", "before_line": " lock ( log _ file _ path ) { file . append _ all _ text ( log _ file _ path , message + environment . new _ line ) ; } ", "after_ctx": " <%> <*> public bool is _ enabled ( log _ level log _ level ) { return true ; } -> public bool is _ enabled ( log _ level log _ level ) = > true ; </%>", "after_line": "file . append _ all _ text ( log _ file _ path , message + environment . new _ line ) ;", "predictions": ["file . append _ all _ text ( override override ( environment _ var async <+> + <-> <%> <%> <%> <%> <%> ( <-> _ <@> ( = < . ( . _ <@> ( . ( . . . . _ <@> ( = ( . ( . ( . . . . . . . . . _ <@> ( . ( . ( . _ . ) ) ( ) ( <-> <%> ) ) ) ( ) ( ) ) ) if new . 0 _ <@> ( . ) ) )"]}, {"before_ctx": " ", "before_line": " var nullable _ string _ values = new string [ ] { STR , STR , null } ; ", "after_ctx": " <%> <-> bool </%> <%> <-> string </%> <%> <-> int </%> <%> <*> int -> var </%> <%> <*> int -> var </%> <%> <*> int -> var </%>", "after_line": "var nullable _ string _ values = new [ ] { STR , STR , null } ;", "predictions": ["string nullable _ string _ values = new [ ] map null , class STR add can null </@> ; </@> ; _ values _ get get _ get , _ <%> exception"]}, {"before_ctx": "<%> <-> } </%> ", "before_line": " var collection _ navigation = navigations . where ( n = > n . is _ collection ( ) ) . single _ or _ default ( ) ; ", "after_ctx": " ", "after_line": "var collection _ navigation = navigations . single _ or _ default ( n = > n . is _ collection ( ) ) ;", "predictions": ["var collection _ navigation = navigations . where ) _ string _ <+> </%> string _ if _ new ( ) <%>"]}, {"before_ctx": "<%> <*> public override i _ async _ enumerable < t _ result > query < t _ result > ( query _ model query _ model , state _ manager state _ manager ) -> public override i _ enumerable < t _ result > query < t _ result > ( query _ model query _ model , state _ manager state _ manager ) </%> ", "before_line": " var query _ model _ visitor = new query _ model _ visitor ( ) ; var query _ executor = query _ model _ visitor . create _ query _ executor < t _ result > ( query _ model ) ; ", "after_ctx": " <%> <*> return new completed _ async _ enumerable < t _ result > ( query _ executor ( query _ context ) ) ; -> return query _ executor ( query _ context ) ; </%> <%> <+> } public override i _ async _ enumerable < t _ result > async _ query < t _ result > ( query _ model query _ model , state _ manager state _ manager ) { check . not _ null ( query _ model , STR ) ; check . not _ null ( state _ manager , STR ) ; var query _ executor = new async _ query _ model _ visitor ( ) . create _ query _ executor < t _ result > ( query _ model ) ; var query _ context = new relational _ query _ context ( model , logger , state _ manager , connection , value _ reader _ factory ) ; </%>", "after_line": "var query _ executor = new query _ model _ visitor ( ) . create _ query _ executor < t _ result > ( query _ model ) ;", "predictions": ["var query _ executor = query _ model _ instance i _ configure ; ; < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) < ) <"]}], "ServiceStack": [{"before_ctx": " ", "before_line": " public static object handle _ exception < t _ request > ( i _ app _ host app _ host , t _ request request , exception ex ) ", "after_ctx": " <%> <+> if ( app _ host ! = null ) </%>", "after_line": "public static object handle _ exception ( i _ app _ host app _ host , object request , exception ex )", "predictions": ["public static object handle _ exception < t _ <%> i _ , , type _ void void </%> </%> exception </@> <%>"]}, {"before_ctx": "<%> <+> public list < tuple < object , int > > get _ priority _ instances ( ) </%> <%> <+> priority _ </%> <%> <-> modular _ startup _ config . </%> <%> <*> x . has _ interface ( typeof ( i _ pre _ configure _ services ) ) | | x . has _ interface ( typeof ( i _ post _ configure _ services ) ) | | x . has _ interface ( typeof ( i _ pre _ configure _ app ) ) | | x . has _ interface ( typeof ( i _ post _ configure _ app ) ) ) ) ; if ( modular _ startup _ config . startup _ type ! = null ) -> x . has _ interface ( typeof ( i _ configure _ services ) ) | | </%> <%> <+> x . has _ interface ( typeof ( i _ configure _ app ) ) ) ) ; if ( startup _ type ! = null ) </%> ", "before_line": " startup _ instance = create _ startup _ instance ( modular _ startup _ config . startup _ type ) ; ", "after_ctx": " <%> <+> priority _ </%> <%> <+> < tuple </%> <%> <+> , int > </%> <%> <+> priority _ </%> <%> <*> instance ) ; -> new tuple < object , int > ( instance , type . first _ attribute < priority _ attribute > ( ) ? . value ? ? 0 ) ) ; </%> <%> <+> priority _ instances . sort ( ( x , y ) = > x . item . compare _ to ( y . item ) ) ; </%> <%> <+> priority _ </%>", "after_line": "startup _ instance = create _ startup _ instance ( startup _ type ) ;", "predictions": ["startup _ instance = create _ startup _ class , -> {"]}, {"before_ctx": "<%> <-> output = context . render _ code ( @ STR { { # ul { if : has _ access , each : items , where : ' age > = 2 ' , class : [ ' nav ' , ! disclaimer _ accepted ? ' blur ':' ' ] , id : ` ul - $ { id } ` } } } { { # li { class : { alt : is _ odd ( index ) , active : name = = highlight } } } { { name } } { { / li } } { { else } } < div > no items < / div > { { / ul } } STR items = new [ ] { new person ( STR , 1 ) , new person ( STR , 2 ) , new person ( STR , NUM ) } , id = STR , disclaimer _ accepted = false , has _ access = true , highlight = STR , digits = new [ ] { STR , STR , STR , STR , STR , STR , STR , STR , STR , STR } , } ) ; assert . that ( output . normalize _ new _ lines ( ) , is . equal _ to ( @ STR < ul class = STR nav blur STR id = STR ul - menu STR > < li > bar < / li > < li class = STR alt active STR > baz < / li > < / ul > STR output = context . render _ code ( @ STR { { # partial content } } - list item { { / partial } } ' < > title < / > ' | raw ' content ' | partial | markdown STR assert . that ( output . remove _ new _ lines ( ) , is . equal _ to ( STR . remove _ new _ lines ( ) ) ) ; </%> <%> <-> { { </%> <%> <-> } } </%> ", "before_line": " { { / raw } } ", "after_ctx": " <%> <-> { { </%> <%> <-> } } </%> <%> <*> { -> ` $ </%> <%> <-> } </%> <%> <*> { -> $ </%> <%> <*> } -> ` </%> <%> <-> { { </%> <%> <-> } } { { </%> <%> <*> } } -> STR </%> <%> <-> STR </%>", "after_line": "/ raw", "predictions": ["{ / raw } }"]}, {"before_ctx": " ", "before_line": " foreach ( var request _ filter in config . request _ filters ) ", "after_ctx": " <%> <-> config . </%>", "after_line": "foreach ( var request _ filter in request _ filters )", "predictions": ["foreach ( var request _ filter in request _ </%>"]}, {"before_ctx": "<%> <-> config . </%> ", "before_line": " foreach ( var response _ filter in config . response _ filters ) ", "after_ctx": " ", "after_line": "foreach ( var response _ filter in response _ filters )", "predictions": ["foreach ( var response _ filter in response _ filters collection <-> _ </@> change"]}, {"before_ctx": "<%> <+> route _ return _ ireturnvoid _ ge public class return _ i _ return _ void _ dto _ request : i _ return < i _ return _ void > , i _ get { } </%> ", "before_line": " public class return _ void _ dto _ request : i _ return < i _ return _ void > , i _ get ", "after_ctx": " ", "after_line": "public class return _ void _ dto _ request : i _ return _ void", "predictions": ["public class return _ void _ dto _ my <%> ( ; ; ; ; directory _ public { directory )"]}, {"before_ctx": " ", "before_line": " var path _ controller = string . intern ( path _ parts [ 0 ] . to _ lower ( ) ) ; ", "after_ctx": " <%> <-> string . intern ( </%> <%> <-> ) </%>", "after_line": "var path _ controller = path _ parts [ 0 ] . to _ lower ( ) ;", "predictions": ["var path _ controller = string . intern _ ; <%> var path ; ; | |"]}, {"before_ctx": "<%> <-> string . intern ( </%> <%> <-> ) </%> ", "before_line": " var path _ action = string . intern ( path _ parts [ 1 ] . to _ lower ( ) ) ; ", "after_ctx": " ", "after_line": "var path _ action = path _ parts [ 1 ] . to _ lower ( ) ;", "predictions": ["var path _ action = string . intern ( path <%> null ] . = -> . ) | | _ if path member member member member member ,"]}, {"before_ctx": "<%> <+> ( </%> <%> <+> ) </%> ", "before_line": " var enum _ value = convert . change _ type ( value , type . get _ type _ code ( type ) ) . to _ string ( ) ; ", "after_ctx": " ", "after_line": "var enum _ value = convert . change _ type ( value , type ) . to _ string ( ) ;", "predictions": ["var enum _ value = convert . change _ request </%> value </%> . d service check _ void _ </%> return void ) command command _ add ) type ; ; ; member . , ( ) file _ </%> ! ) file _ </%> ( ) file file file . path file file file . path . path file _ log _ -> ( log ) file file file file file file file file . path . path file _ log file ) file _ </%> ( ) file file file . child _ STR public directory public"]}, {"before_ctx": " ", "before_line": " var path _ controller = string . intern ( path _ parts [ 0 ] . to _ lower ( ) ) ; ", "after_ctx": " <%> <-> string . intern ( </%> <%> <-> ) </%>", "after_line": "var path _ controller = path _ parts [ 0 ] . to _ lower ( ) ;", "predictions": ["var path _ controller = string . intern ( path request <-> int nullable int STR ( ( ( ( <*> . return return class return class return 0 color parameter ; ) ) color color name name color color <-> color 0 color 0 typeof 0 name color 0 typeof string name name color name color 0 color 0 color 0 0 color 0 typeof 0 color 0 typeof 0 color 0 typeof 0 color 0 color 0 color name ) get name set _ { data color name color color ;"]}, {"before_ctx": "<%> <-> array . convert _ all ( </%> <%> <*> , -> . map ( </%> <%> <*> ; -> . to _ array ( ) ; </%> ", "before_line": " t _ delegate d = delegate . create _ delegate ( typeof ( t _ delegate ) , this _ parameter , target _ method , false ", "after_ctx": " ", "after_line": "t _ delegate d = target _ method . create _ delegate ( typeof ( t _ delegate ) , this _ parameter ) as t _ delegate ;", "predictions": ["t _ delegate d = delegate . create ( typeof i color my _ command ; <@> _ exception ) <*> bool . STR directory virtual {"]}, {"before_ctx": " ", "before_line": " var response = page _ result . return _ value ? . result ; if ( response ! = null ) ", "after_ctx": " <%> <+> var response = page _ result . return _ value ? . result ; </%> <%> <*> template -> sharp </%> <%> <-> _ pages </%>", "after_line": "if ( page _ result . return _ value ! = null )", "predictions": ["if ( page _ result . return _ ; <-> . , <%> = = <%> values _ ) ( )"]}, {"before_ctx": "<%> <*> object -> reqstar </%> ", "before_line": " public object any ( routeless _ reqstar request ) ", "after_ctx": " <%> <*> object -> list < reqstar > </%>", "after_line": "public routeless _ reqstar any ( routeless _ reqstar request )", "predictions": ["public reqstar _ reqstar any ( routeless _ ( request ) </%> exception ;"]}, {"before_ctx": " ", "before_line": " if ( ( mi . return _ type ! = typeof ( object ) & & mi . return _ type ! = typeof ( void ) ) | | mi . get _ parameters ( ) . length ! = 1 ) ", "after_ctx": " <%> <-> var response _ type = return _ marker ! = null </%>", "after_line": "if ( mi . get _ parameters ( ) . length ! = 1 )", "predictions": ["if ( ( mi . return _ type description </%> typeof _ void ) ;"]}, {"before_ctx": " ", "before_line": " api _ member _ parameter _ type _ path _ description _ range _ description _ data _ type _ double _ is _ required _ true ", "after_ctx": " <%> <-> references _ typeof _ check _ service _ model _ operations _ hello </%> <%> <+> references _ typeof _ check _ service _ model _ operations _ hello </%>", "after_line": "api _ member _ description _ range _ description _ parameter _ type _ path _ data _ type _ double _ is _ required _ true", "predictions": ["api _ member _ parameter _ is _ required _ <%>"]}, {"before_ctx": "<%> <*> api _ allowable _ values _ color _ typeof _ color data _ member _ name _ aliased public string color { get ; set ; } -> api _ allowable _ values _ color _ name _ typeof _ my _ color </%> <%> <+> data _ member public string color _ name { get ; set ; } api _ member api _ allowable _ values _ color _ typeof _ my _ color data _ member public my _ color color { get ; set ; } </%> ", "before_line": " data _ member _ name _ aliased ", "after_ctx": " <%> <-> _ name _ aliased </%> <%> <-> _ name _ aliased </%>", "after_line": "data _ member", "predictions": ["data _ member _ name _ aliased"]}, {"before_ctx": "<%> <+> data _ member public string color _ name { get ; set ; } api _ member api _ allowable _ values _ color _ typeof _ my _ color data _ member public my _ color color { get ; set ; } </%> <%> <-> _ name _ aliased </%> ", "before_line": " data _ member _ name _ aliased ", "after_ctx": " <%> <-> _ name _ aliased </%>", "after_line": "data _ member", "predictions": ["data _ member _ name _ aliased"]}, {"before_ctx": "<%> <-> _ name _ aliased </%> <%> <-> _ name _ aliased </%> ", "before_line": " data _ member _ name _ aliased ", "after_ctx": " ", "after_line": "data _ member", "predictions": ["data _ member _ name _ aliased"]}, {"before_ctx": "<%> <*> public override i _ virtual _ directory root _ directory { get { return child _ providers . first _ or _ default ( ) . root _ directory ; } } public override string virtual _ path _ separator { get { return STR ; } } public override string real _ path _ separator { get { return convert . to _ string ( path . directory _ separator _ char ) ; } } -> public override i _ virtual _ directory root _ directory = > child _ providers . first _ or _ default ( ) . root _ directory ; </%> <%> <+> public override string virtual _ path _ separator = > STR ; public override string real _ path _ separator = > convert . to _ string ( path . directory _ separator _ char ) ; </%> <%> <+> _ null </%> <%> <*> STR -> nameof ( child _ providers ) </%> ", "before_line": " protected override sealed void initialize ( ) { } ", "after_ctx": " ", "after_line": "protected sealed override void initialize ( ) { }", "predictions": ["protected sealed override void initialize ( ) { ,"]}, {"before_ctx": "<%> <*> STR -> nameof ( root _ dir _ info ) </%> ", "before_line": " protected override sealed void initialize ( ) ", "after_ctx": " <%> <*> throw new application _ exception ( STR . fmt ( root _ dir _ info . full _ name ) ) ; -> throw new application _ exception ( $ STR ) ; </%>", "after_line": "protected sealed override void initialize ( )", "predictions": ["protected sealed override void initialize ( )"]}, {"before_ctx": "<%> <*> STR -> nameof ( backing _ assembly ) </%> ", "before_line": " protected override sealed void initialize ( ) ", "after_ctx": " ", "after_line": "protected sealed override void initialize ( )", "predictions": ["protected sealed override void initialize ( )"]}, {"before_ctx": " ", "before_line": " new type [ ] { typeof ( string ) } , null ) ; ", "after_ctx": " <%> <*> constructor _ info -> var </%>", "after_line": "new [ ] { typeof ( string ) } , null ) ;", "predictions": ["new [ ] { typeof ( string ) } } ( ] _ > _ new _ bool _ <@> _ <@> _ </%> _ double _ </@> _ type _ <+> _ void . value . enum . value . null . value . value . value . value . value . value . value . value . values . value . values . values . values . values . enum . enum . value . values . values . value . value . value . value . value . value . value _ _ _ typeof ( string"]}, {"before_ctx": "<%> <+> $ </%> <%> <*> . fmt ( type _ accessor , type ( type . name , type . generic _ args ) ) ) ; -> ) ; </%> ", "before_line": " var value = type . enum _ values ! = null ? type . enum _ values [ i ] : null ; ", "after_ctx": " <%> <+> $ </%> <%> <-> . fmt ( name ) </%> <%> <+> $ </%> <%> <-> . fmt ( name , value ) </%>", "after_line": "var value = type . enum _ values ? [ i ] ;", "predictions": ["var value = type . enum _ values [ set ] path"]}, {"before_ctx": " ", "before_line": " this . provider = name ; this . auth _ realm = realm ; ", "after_ctx": " <%> <-> var auth _ repo = auth _ service . try _ resolve < i _ user _ auth _ repository > ( ) ; if ( auth _ repo = = null ) { </%>", "after_line": "provider = name ; auth _ realm = realm ;", "predictions": ["provider = name ; auth _ realm = <%> ->"]}, {"before_ctx": " ", "before_line": " using system _ globalization ; ", "after_ctx": " <%> <+> using system _ globalization ; using system _ net ; using service _ stack _ configuration ; </%> <%> <-> using service _ stack _ configuration ; using service _ stack _ fluent _ validation ; </%> <%> <-> using system ; using system _ net ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": "<%> <-> class digest _ auth _ validator : abstract _ validator < authenticate > { public digest _ auth _ validator ( ) { rule _ for ( x = > x . user _ name ) . not _ empty ( ) ; rule _ for ( x = > x . password ) . not _ empty ( ) ; } } </%> ", "before_line": " this . provider = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> var auth _ repo = auth _ service . try _ resolve < i _ user _ auth _ repository > ( ) ; </%>", "after_line": "provider = name ;", "predictions": ["provider = name ;"]}, {"before_ctx": "<%> <-> class digest _ auth _ validator : abstract _ validator < authenticate > { public digest _ auth _ validator ( ) { rule _ for ( x = > x . user _ name ) . not _ empty ( ) ; rule _ for ( x = > x . password ) . not _ empty ( ) ; } } </%> <%> <-> this . </%> ", "before_line": " this . auth _ realm = realm ; ", "after_ctx": " <%> <-> var auth _ repo = auth _ service . try _ resolve < i _ user _ auth _ repository > ( ) ; if ( auth _ repo = = null ) { </%>", "after_line": "auth _ realm = realm ;", "predictions": ["auth _ realm = realm ;"]}, {"before_ctx": " ", "before_line": " var tag _ builder = new tag _ builder ( STR ) ; ", "after_ctx": " <%> <*> return tag _ builder . to _ mvc _ html _ string ( tag _ render _ mode . self _ closing ) ; -> return tag _ builder . to _ html _ string ( tag _ render _ mode . self _ closing ) ; </%> <%> <+> } public mvc _ html _ string raw ( object content ) { if ( content = = null ) return null ; var str _ content = content as string ; </%>", "after_line": "tag _ builder tag _ builder = new tag _ builder ( STR ) ;", "predictions": ["tag _ builder tag _ builder = i . ( resolve _ < ) . resolve _ < ) . tag . ( db db db connection db connection db _ < ( db _ < ) resolve ) . new _ < ( ) . resolve . ( resolve _ < ) . resolve . ( resolve _ < db db db _ </%> db _ < db _ < db db _ < db _ < db db _ < db _ < db db _ < db _ < db _ < db _ < )"]}, {"before_ctx": "<%> <-> * * copyright ( c ) microsoft corporation . all rights reserved . * * this software is subject to the microsoft public license ( ms - pl ) . * a copy of the license can be found in the license . htm file included * in this distribution . * * you must not remove this notice , or any other , from this software . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * / </%> ", "before_line": " using service _ stack _ html ; namespace service _ stack _ markdown ", "after_ctx": " ", "after_line": "namespace service _ stack _ html", "predictions": ["namespace service _ stack _ html"]}, {"before_ctx": " ", "before_line": " var name _ parts = new stack < string > ( ) ; ", "after_ctx": " <%> <*> var -> method _ call _ expression </%>", "after_line": "stack < string > name _ parts = new stack < string > ( ) ;", "predictions": ["stack < string > name _ parts </%> get _ </@> _ parts ;"]}, {"before_ctx": "<%> <*> var -> stack < string > </%> ", "before_line": " var method _ expression = ( method _ call _ expression ) part ; ", "after_ctx": " <%> <-> expression . parameters . to _ array ( ) ) ) ; </%>", "after_line": "method _ call _ expression method _ expression = ( method _ call _ expression ) part ;", "predictions": ["method _ call _ expression <*> <%> </%> = using <%> _ = ( ex ; <+> request = string < name _ , _ . _ async this ) <%> <%> ( url url call tag content _ ( _ ( _ _ call _ ( _ x _ ( _ x _ ( _ x _ ( _ ( _ ( _ _ _ _ _ _ _ ( _ x _ ( _ ( _ ) _ ) _ ) ) _ ) _ ) _ ) _ } _ if this _ ( <%> . string"]}, {"before_ctx": "<%> <*> ? db _ factory . open _ db _ connection ( ) : db _ factory . open _ db _ connection ( named _ connection ) ; -> ? ( req ! = null </%> <%> <+> ? host _ context . app _ host . get _ db _ connection ( req ) : host _ context . try _ resolve < i _ db _ connection _ factory > ( ) . open _ db _ connection ( ) ) : host _ context . try _ resolve < i _ db _ connection _ factory > ( ) . open _ db _ connection ( named _ connection ) ; </%> ", "before_line": " return filter < from > ( request , typed _ query . create _ query ( get _ db < from > ( ) , model , dynamic _ params , this ) , model ) ; ", "after_ctx": " <%> <+> request </%>", "after_line": "return filter < from > ( request , typed _ query . create _ query ( get _ db < from > ( request ) , model , dynamic _ params , this ) , model ) ;", "predictions": ["return filter < from > ( request , typed * query . * create . dynamic ( dynamic ( dynamic _ params ( namespace * this , a ( namespace * params ( namespace * this _ params . _ connection _ connection ) ) ) _ a _ connection . a _ microsoft . </@> . </@> _ this _ copy . </@> . ) stack _ in _ connection _ connection _ connection _ connection ) stack * . copy * this _ app * all * create ) ;"]}, {"before_ctx": "<%> <*> return host _ context . service _ controller . execute ( request ) ; -> var response = host _ context . service _ controller . execute ( request ) ; </%> <%> <+> var ex = response as exception ; if ( ex ! = null ) throw ex ; return response ; </%> ", "before_line": " return host _ context . service _ controller . execute ( request ) ; ", "after_ctx": " ", "after_line": "return execute ( request ) ;", "predictions": ["return execute ( request ) ;"]}, {"before_ctx": "<%> <*> new rsa _ crypto _ service -> create </%> <%> <*> provider -> rsa </%> <%> <-> ( int ) </%> ", "before_line": " var verified = rsa . verify _ data ( data _ to _ verify , hash _ algorithm , signature ) ; ", "after_ctx": " ", "after_line": "var verified = rsa . verify _ data ( data _ to _ verify , signature , hash _ algorithm ) ;", "predictions": ["var verified = verify _ configuration <%> <+> . = <@> item <%> <%> _ null <%> </@> = this _ <@> _ <-> ; ; ; ;"]}, {"before_ctx": "<%> <*> new rsa _ crypto _ service -> create </%> <%> <*> provider -> rsa </%> <%> <-> ( int ) </%> ", "before_line": " var verified = rsa . verify _ data ( data _ to _ verify , hash _ algorithm , signature ) ; ", "after_ctx": " ", "after_line": "var verified = rsa . verify _ data ( data _ to _ verify , signature , hash _ algorithm ) ;", "predictions": ["var verified = verify _ data ( configuration _ service _ use </%> </%> <@> </%> </%> } item <%> . verify _ crypto _ : ( this ;"]}, {"before_ctx": "<%> <*> new rsa _ crypto _ service -> create </%> <%> <*> provider -> rsa </%> <%> <-> ( int ) </%> ", "before_line": " var verified = rsa . verify _ data ( data _ to _ verify , hash _ algorithm , signature ) ; ", "after_ctx": " ", "after_line": "var verified = rsa . verify _ data ( data _ to _ verify , signature , hash _ algorithm ) ;", "predictions": ["var verified = verify _ data ( data _ to _ path , , , , , , , </%> item <%> item <%> <%> _ null <%> </@> . this ; </@> ;"]}, {"before_ctx": "<%> <*> new rsa _ crypto _ service -> create </%> <%> <*> provider -> rsa </%> <%> <-> ( int ) </%> ", "before_line": " var verified = rsa . verify _ data ( data _ to _ verify , hash _ algorithm , signature ) ; ", "after_ctx": " ", "after_line": "var verified = rsa . verify _ data ( data _ to _ verify , signature , hash _ algorithm ) ;", "predictions": ["var verified = verify _ data ( data _ if . host ( new _ < _ path ( signature , , , , , </%> <@> </%> </%> } = to _ null . </@> ;"]}, {"before_ctx": " ", "before_line": " template _ args = new dictionary < string , object > { { markdown _ page . model _ name , person } } ; ", "after_ctx": " <%> <+> private razor _ page add _ view _ page ( string page _ name , string page _ path , string page _ contents , string template _ path = null ) { var dynamic _ page = new razor _ page ( markdown _ format , </%>", "after_line": "template _ args = person ;", "predictions": ["template _ args = new dictionary < i this ( provider _ x ( > > > ;"]}, {"before_ctx": "<%> <*> catch ( http _ listener -> private bool is </%> <%> <*> exception ex ) -> listening </%> <%> <*> if ( environment . os _ version . platform ! = platform _ id . win _ nt | | ex . error _ code ! = NUM ) -> get { return this . is _ started & & this . listener ! = null & & this . listener . is _ listening ; } </%> <%> <-> throw ex ; add _ url _ reservation _ to _ acl ( url _ base ) ; reserved _ url = true ; listener . start ( ) ; } thread _ pool . queue _ user _ work _ item ( listen ) ; if ( reserved _ url ) remove _ url _ reservation _ from _ acl ( url _ base ) ; </%> ", "before_line": " while ( listener . is _ listening ) ", "after_ctx": " ", "after_line": "while ( is _ listening )", "predictions": ["while ( is _ listening )"]}, {"before_ctx": "<%> <*> thread _ pool . queue _ user _ work _ item ( listen ) -> return </%> <%> <+> throw ex ; } thread _ pool . queue _ user _ work _ item ( listen _ callback ) ; if ( reserved _ url ) remove _ url _ reservation _ from _ acl ( url _ base ) ; } </%> ", "before_line": " while ( this . is _ listening ) { if ( this . listener = = null ) return ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "while ( is _ listening ) { if ( listener = = null ) return ;", "predictions": ["while ( is _ listening ) { return public catch = environment ( = ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . listener . begin _ get _ context ( listener _ callback , this . listener ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "listener . begin _ get _ context ( listener _ callback , listener ) ;", "predictions": ["listener . begin _ get service context -> , service configuration ; </%> </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . listener = = null ) return ; ", "after_ctx": " ", "after_line": "if ( listener = = null ) return ;", "predictions": ["if ( listener = = > call <-> return method </%> </@> <*>"]}, {"before_ctx": "<%> <+> using service _ stack _ common _ tests ; </%> ", "before_line": " namespace service _ stack _ common _ tests _ text ", "after_ctx": " ", "after_line": "namespace service _ stack _ text _ tests", "predictions": ["namespace service _ stack _ service _ </%>"]}, {"before_ctx": "<%> <-> using service _ stack _ text ; </%> ", "before_line": " namespace service _ stack _ common _ tests _ text ", "after_ctx": " ", "after_line": "namespace service _ stack _ text _ tests", "predictions": ["namespace service _ stack _ <@> _ interface"]}, {"before_ctx": "<%> <-> using service _ stack _ text ; </%> ", "before_line": " namespace service _ stack _ common _ tests _ text ", "after_ctx": " ", "after_line": "namespace service _ stack _ text _ tests", "predictions": ["namespace service _ stack _ <@> . )"]}, {"before_ctx": " ", "before_line": " public static void use _ service _ stack ( this i _ application _ builder app , app _ host _ base app _ host ) ", "after_ctx": " <%> <+> return app ; } public static i _ application _ builder use ( this i _ application _ builder app , system . web . i _ http _ async _ handler http _ handler ) { return app . use ( http _ handler . middleware ) ; </%>", "after_line": "public static i _ application _ builder use _ service _ stack ( this i _ application _ builder app , app _ host _ base app _ host )", "predictions": ["public static void use _ service _ base ; for _ { ( for _ { ( for _ -> _ | . . . . . i url _ -> url | . add _ -> url _ -> url url -> url is _ -> ( | ) url | NUM url _ -> url _ -> url url -> url is _ -> ( ) . add url . . . this ) )"]}, {"before_ctx": "<%> <+> private static readonly bool using _ integrated _ pipeline = false ; </%> <%> <+> try { using _ integrated _ pipeline = http _ runtime . using _ integrated _ pipeline ; } catch ( exception ignore ) { } </%> ", "before_line": " if ( ! http _ runtime . using _ integrated _ pipeline ) ", "after_ctx": " ", "after_line": "if ( ! using _ integrated _ pipeline )", "predictions": ["if ( ! using _ integrated _ _ = )"]}, {"before_ctx": " ", "before_line": " get { return files . cast < i _ virtual _ file > ( ) ; } ", "after_ctx": " <%> <-> . cast < i _ virtual _ directory > ( ) </%>", "after_line": "get { return files ; }", "predictions": ["get { return files ; }"]}, {"before_ctx": "<%> <-> . cast < i _ virtual _ file > ( ) </%> ", "before_line": " get { return dirs . cast < i _ virtual _ directory > ( ) ; } ", "after_ctx": " ", "after_line": "get { return dirs ; }", "predictions": ["return dirs ;"]}, {"before_ctx": " ", "before_line": " public type body _ type { get ; set ; } ", "after_ctx": " <%> <-> body _ </%>", "after_line": "public type type { get ; set ; }", "predictions": ["public type body _ type tests tests text _ . </%> )"]}, {"before_ctx": "<%> <-> using service _ stack _ orm _ lite ; </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": " ", "before_line": " using service _ stack _ fluent _ validation ; using service _ stack _ service _ interface _ auth ; ", "after_ctx": " <%> <-> _ service _ interface </%>", "after_line": "using service _ stack _ auth ; using service _ stack _ fluent _ validation ;", "predictions": ["using service ; using service _ < <%> <%> _ <-> _ net using </@> using runtime _ http . response . return ;"]}, {"before_ctx": "<%> <-> _ fluent </%> <%> <*> validation -> auth </%> <%> <-> _ service </%> <%> <*> interface -> fluent </%> <%> <*> auth -> validation </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": " ", "before_line": " public class requires _ custom _ auth _ service : service _ interface . service ", "after_ctx": " <%> <-> service _ stack . service _ interface . </%>", "after_line": "public class requires _ custom _ auth _ service : service", "predictions": ["public class requires _ custom _ <%> . this ( <%>"]}, {"before_ctx": "<%> <-> _ interface . service </%> ", "before_line": " public class custom _ authenticate _ attribute : service _ stack . service _ interface . authenticate _ attribute ", "after_ctx": " ", "after_line": "public class custom _ authenticate _ attribute : authenticate _ attribute", "predictions": ["public class custom _ authenticate _ attribute : <%> _ interface"]}, {"before_ctx": "<%> <-> using service _ stack _ service _ host ; </%> ", "before_line": " public class base _ service < t > : service _ interface . service ", "after_ctx": " ", "after_line": "public class base _ service < t > : service", "predictions": ["public class base _ service : service"]}, {"before_ctx": "<%> <-> using service _ stack _ service _ host ; </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": "<%> <-> using service _ stack _ service _ host ; </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": " ", "before_line": " public class exception _ with _ response _ status _ service : service _ interface . service ", "after_ctx": " <%> <-> _ interface . service </%>", "after_line": "public class exception _ with _ response _ status _ service : service", "predictions": ["public class exception _ with _ response _ status _ service"]}, {"before_ctx": "<%> <-> _ interface . service </%> ", "before_line": " public class exception _ no _ response _ status _ service : service _ interface . service ", "after_ctx": " <%> <-> _ interface . service </%>", "after_line": "public class exception _ no _ response _ status _ service : service", "predictions": ["public class exception _ no _ response _ status _ service :"]}, {"before_ctx": "<%> <-> _ interface . service </%> ", "before_line": " public class exception _ no _ response _ dto _ service : service _ interface . service ", "after_ctx": " <%> <-> _ interface . service </%>", "after_line": "public class exception _ no _ response _ dto _ service : service", "predictions": ["public class exception _ no _ response _ <@> _ service </%> </%>"]}, {"before_ctx": "<%> <-> _ interface . service </%> ", "before_line": " public class uncatched _ exception _ service : service _ interface . service ", "after_ctx": " ", "after_line": "public class uncatched _ exception _ service : service", "predictions": ["public class uncatched _ exception _ service : service"]}, {"before_ctx": " ", "before_line": " public class exception _ with _ response _ status _ service : service _ interface . service ", "after_ctx": " <%> <-> _ interface . service </%>", "after_line": "public class exception _ with _ response _ status _ service : service", "predictions": ["public class exception _ with _ response _ host _ service <%>"]}, {"before_ctx": "<%> <-> _ interface . service </%> ", "before_line": " public class exception _ no _ response _ status _ service : service _ interface . service ", "after_ctx": " <%> <-> _ interface . service </%>", "after_line": "public class exception _ no _ response _ status _ service : service", "predictions": ["public class exception _ no _ response _ status _ service :"]}, {"before_ctx": "<%> <-> _ interface . service </%> ", "before_line": " public class exception _ no _ response _ dto _ service : service _ interface . service ", "after_ctx": " ", "after_line": "public class exception _ no _ response _ dto _ service : service", "predictions": ["public class exception _ no _ response _ <@> _ service <%> <%>"]}, {"before_ctx": "<%> <*> common -> auth </%> <%> <-> using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": "<%> <+> using service _ stack _ auth ; </%> ", "before_line": " using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ service _ interface"]}, {"before_ctx": "<%> <-> using service _ stack _ common ; </%> <%> <-> using service _ stack _ web ; </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": "<%> <-> using system _ linq ; using system _ net ; </%> <%> <*> system -> service _ stack </%> <%> <*> web -> auth </%> <%> <-> using service _ stack _ common ; using service _ stack _ configuration ; </%> <%> <-> using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": " ", "before_line": " class uncached _ proto _ buf _ email _ service : service _ interface . service ", "after_ctx": " <%> <-> _ interface . service </%>", "after_line": "class uncached _ proto _ buf _ email _ service : service", "predictions": ["class uncached _ proto _ buf _ email _ . <%> <%>"]}, {"before_ctx": "<%> <-> _ interface . service </%> ", "before_line": " class cached _ proto _ buf _ email _ service : service _ interface . service ", "after_ctx": " ", "after_line": "class cached _ proto _ buf _ email _ service : service", "predictions": ["class cached _ proto _ buf _ email _ service ;"]}, {"before_ctx": "<%> <+> using service _ stack _ auth ; </%> <%> <*> using service _ stack _ service _ interface _ auth ; using service _ stack _ service _ interface _ testing ; -> using service _ stack _ testing ; </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": "<%> <-> using service _ stack _ service _ host ; </%> ", "before_line": " public class check _ box _ service : service _ interface . service ", "after_ctx": " ", "after_line": "public class check _ box _ service : service", "predictions": ["public class check _ box _ service : service"]}, {"before_ctx": "<%> <-> _ service _ interface </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": "<%> <+> using service _ stack _ auth ; </%> ", "before_line": " using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ service _ interface"]}, {"before_ctx": "<%> <-> using service _ stack _ service _ host ; </%> ", "before_line": " public class mini _ profiler _ service : service _ interface . service ", "after_ctx": " ", "after_line": "public class mini _ profiler _ service : service", "predictions": ["public class mini _ profiler _ service : service"]}, {"before_ctx": "<%> <*> common -> auth </%> <%> <-> using service _ stack _ service _ interface _ auth ; </%> ", "before_line": " using service _ stack _ web _ host _ endpoints ; using service _ stack _ web _ host _ endpoints _ wrappers ; namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["using service _ stack _ web _ host _ system _ namespace stack ) )"]}, {"before_ctx": " ", "before_line": " public class multiple _ test _ request _ service : service _ interface . service ", "after_ctx": " <%> <-> _ interface . service </%>", "after_line": "public class multiple _ test _ request _ service : service", "predictions": ["public class multiple _ test _ request _ service ;"]}, {"before_ctx": "<%> <-> _ interface . service </%> ", "before_line": " public class swagger _ feature _ service : service _ interface . service ", "after_ctx": " ", "after_line": "public class swagger _ feature _ service : service", "predictions": ["public class swagger _ feature _ service : service"]}, {"before_ctx": "<%> <+> using service _ stack _ auth ; </%> <%> <-> using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": "<%> <-> using service _ stack _ service _ host ; </%> ", "before_line": " public class custom _ form _ data _ service : service _ interface . service ", "after_ctx": " ", "after_line": "public class custom _ form _ data _ service : service", "predictions": ["public class custom _ form _ data _ service ;"]}, {"before_ctx": "<%> <*> common -> auth </%> <%> <-> using service _ stack _ service _ host ; using service _ stack _ service _ interface _ auth ; </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": "<%> <-> using service _ stack _ service _ host ; </%> ", "before_line": " namespace service _ stack _ service _ interface ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ interface"]}, {"before_ctx": "<%> <*> if ( raw _ url . contains ( endpoint _ host . config . service _ stack _ handler _ factory _ path ) ) -> if ( raw _ url . contains ( endpoint _ host . config . service _ stack _ handler _ factory _ path + STR ) </%> <%> <+> | | raw _ url . ends _ with ( endpoint _ host . config . service _ stack _ handler _ factory _ path ) ) { if ( context . request . physical _ path ! = web _ host _ physical _ path | | ! file . exists ( path . combine ( context . request . physical _ path , default _ root _ file _ name ) ) ) </%> <%> <*> return new default _ http _ handler ( ) ; -> } </%> <%> <+> return default _ http _ handler ; </%> ", "before_line": " ? ? new default _ http _ handler ( ) ; ", "after_ctx": " <%> <+> var existing _ file = path _ parts [ 0 ] . to _ lower ( ) ; if ( web _ host _ root _ file _ names . contains ( existing _ file ) ) { </%>", "after_line": "? ? default _ http _ handler ;", "predictions": ["? ? new default _ http _ handler ( ) ;"]}, {"before_ctx": "<%> <-> , </%> ", "before_line": " assert . that ( test _ utils . normalize _ new _ lines ( result ) , is . equal _ to ( STR ) ) ; ", "after_ctx": " <%> <*> test _ utils -> result </%> <%> <-> result </%> <%> <*> test _ utils -> result </%> <%> <-> result </%>", "after_line": "assert . that ( result . normalize _ new _ lines ( ) , is . equal _ to ( STR ) ) ;", "predictions": ["assert . that ( result , is . equal _ if ; user = </@> <-> ) <@> <@> <-> _ equal ( . ) get _ factory type ;"]}, {"before_ctx": "<%> <*> test _ utils -> result </%> <%> <-> result </%> ", "before_line": " assert . that ( test _ utils . normalize _ new _ lines ( result ) , is . equal _ to ( STR ) ) ; ", "after_ctx": " <%> <*> test _ utils -> result </%> <%> <-> result </%> <%> <-> var context = new script _ context { </%>", "after_line": "assert . that ( result . normalize _ new _ lines ( ) , is . equal _ to ( STR ) ) ;", "predictions": ["assert . that ( result , is . equal _ var ( -> ) <-> ) this this this ) ; ; native native <%>"]}, {"before_ctx": "<%> <*> test _ utils -> result </%> <%> <-> result </%> <%> <*> test _ utils -> result </%> <%> <-> result </%> ", "before_line": " assert . that ( test _ utils . normalize _ new _ lines ( result ) , is . equal _ to ( STR ) ) ; ", "after_ctx": " <%> <*> var context = new script _ context { } . init ( ) ; -> var context = new script _ context ( ) . init ( ) ; </%>", "after_line": "assert . that ( result . normalize _ new _ lines ( ) , is . equal _ to ( STR ) ) ;", "predictions": ["assert . that ( result , is . equal _ to _ object _ void ( <%> ) ) ;"]}, {"before_ctx": " ", "before_line": " public static void add _ item _ to _ scope ( this template _ scope _ context scope , string item _ binding , object item , int index ) ", "after_ctx": " <%> <+> return scope . add _ item _ to _ scope ( item _ binding , item ) ; } public static template _ scope _ context add _ item _ to _ scope ( this template _ scope _ context scope , string item _ binding , object item ) { </%>", "after_line": "public static template _ scope _ context add _ item _ to _ scope ( this template _ scope _ context scope , string item _ binding , object item , int index )", "predictions": ["public static void add _ item _ to _ ( app this _ ( _ service ) factory factory ( <+> _ get factory </%> default . return return return node ( return node ( return ( , void _ scope _ i scope . info node ( ) ) )"]}, {"before_ctx": "<%> <+> using service _ stack _ admin ; </%> ", "before_line": " namespace service _ stack _ admin ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": "<%> <*> funq _ perf ( ) ; -> native _ funq _ perf ( ) ; </%> <%> <+> auto _ wired _ funq _ perf ( ) ; </%> ", "before_line": " var type _ factory = get _ hiro _ type _ factory ( ) ; register _ services ( service _ controller , type _ factory ) ; ", "after_ctx": " <%> <+> native _ </%> <%> <-> var type _ factory = get _ func _ type _ factory ( ) ; register _ services ( service _ controller , type _ factory ) ; </%>", "after_line": "register _ services ( service _ controller , get _ hiro _ type _ factory ( ) ) ;", "predictions": ["register _ services ( service _ controller , register _ services ) ;"]}, {"before_ctx": " ", "before_line": " var type _ factory = get _ hiro _ type _ factory ( ) ; register _ services ( service _ controller , type _ factory ) ; ", "after_ctx": " <%> <+> _ native </%> <%> <*> var type _ factory = get _ func _ type _ factory ( ) ; register _ services ( service _ controller , type _ factory ) ; -> register _ services ( service _ controller , get _ native _ funq _ type _ factory ( ) ) ; </%> <%> <+> store _ and _ get _ customers ( service _ controller ) ; </%>", "after_line": "register _ services ( service _ controller , get _ hiro _ type _ factory ( ) ) ;", "predictions": ["register _ services ( service _ controller , register _ services ) ;"]}, {"before_ctx": " ", "before_line": " static private readonly string web _ host _ physical _ path = null ; static private readonly string default _ root _ file _ name = null ; ", "after_ctx": " <%> <-> static </%> <%> <+> static </%> <%> <-> static </%> <%> <+> static </%> <%> <-> static </%> <%> <+> static </%> <%> <-> static </%> <%> <+> static </%> <%> <-> static </%> <%> <+> static </%>", "after_line": "private static readonly string web _ host _ physical _ path = null ; private static readonly string default _ root _ file _ name = null ;", "predictions": ["private static readonly string web _ host _ physical . var context result result <*> = assembly )"]}, {"before_ctx": "<%> <*> get { if ( default _ operation _ namespace = = null ) { default _ operation _ namespace = get _ default _ namespace ( ) ; } return default _ operation _ namespace ; } set { default _ operation _ namespace = value ; } -> get { return default _ operation _ namespace ? ? ( default _ operation _ namespace = get _ default _ namespace ( ) ) ; } </%> <%> <+> set { default _ operation _ namespace = value ; } </%> ", "before_line": " if ( ! string . is _ null _ or _ empty ( default _ operation _ namespace ) ) return null ; ", "after_ctx": " <%> <-> string . </%>", "after_line": "if ( ! is _ null _ or _ empty ( default _ operation _ namespace ) ) return null ;", "predictions": ["if ( ! string . is _ null _ or _ empty ( default _ operation _ namespace ) ) return null ;"]}, {"before_ctx": "<%> <+> set { default _ operation _ namespace = value ; } </%> <%> <-> string . </%> ", "before_line": " if ( string . is _ null _ or _ empty ( attr . namespace ) ) continue ; ", "after_ctx": " ", "after_line": "if ( is _ null _ or _ empty ( attr . namespace ) ) continue ;", "predictions": ["if ( is _ null _ or _ empty <%> </%> . . . . namespace , if string make _ null _ </@> _ request </%> ) this ( context . } . system . system . var ;"]}, {"before_ctx": "<%> <*> public static string get _ physical _ path ( this i _ request http _ req ) { return host _ context . resolve _ physical _ path ( http _ req . path _ info , http _ req ) ; } public static i _ virtual _ file get _ virtual _ file ( this i _ request http _ req ) { return host _ context . resolve _ virtual _ file ( http _ req . path _ info , http _ req ) ; } public static i _ virtual _ directory get _ virtual _ directory ( this i _ request http _ req ) { return host _ context . resolve _ virtual _ directory ( http _ req . path _ info , http _ req ) ; } public static i _ virtual _ node get _ virtual _ node ( this i _ request http _ req ) { return host _ context . resolve _ virtual _ node ( http _ req . path _ info , http _ req ) ; } -> public static string get _ physical _ path ( this i _ request http _ req ) = > host _ context . resolve _ physical _ path ( http _ req . path _ info , http _ req ) ; </%> <%> <+> public static i _ virtual _ file get _ virtual _ file ( this i _ request http _ req ) = > host _ context . resolve _ virtual _ file ( http _ req . path _ info , http _ req ) ; public static i _ virtual _ directory get _ virtual _ directory ( this i _ request http _ req ) = > host _ context . resolve _ virtual _ directory ( http _ req . path _ info , http _ req ) ; public static i _ virtual _ node get _ virtual _ node ( this i _ request http _ req ) = > host _ context . resolve _ virtual _ node ( http _ req . path _ info , http _ req ) ; </%> ", "before_line": " return string . is _ null _ or _ empty ( path ) | | path [ path . length - 1 ] = = '/' ", "after_ctx": " ", "after_line": "return is _ null _ or _ empty ( path ) | | path [ path . length - 1 ] = = '/'", "predictions": ["return is _ null _ or _ empty ( path ) | | path [ path . length - 1 ] = = '/'"]}, {"before_ctx": " ", "before_line": " if ( string . is _ null _ or _ empty ( last _ path _ info ) ) return null ; ", "after_ctx": " <%> <+> , string _ comparison . ordinal </%> <%> <+> , string _ comparison . ordinal </%> <%> <+> , string _ comparison . ordinal </%>", "after_line": "if ( is _ null _ or _ empty ( last _ path _ info ) ) return null ;", "predictions": ["if ( string . is _ null _ or _ <@> utils , is _ <%> _ request + -> readonly last ( , , <+> _ x _ service , var , var , ) ,"]}, {"before_ctx": "<%> <+> , string _ comparison . ordinal </%> <%> <+> , string _ comparison . ordinal </%> <%> <+> , string _ comparison . ordinal </%> ", "before_line": " if ( string . is _ null _ or _ empty ( path _ info ) ) ", "after_ctx": " ", "after_line": "if ( is _ null _ or _ empty ( path _ info ) )", "predictions": ["if ( is _ null _ or _ empty } info _ </@> <%> )"]}, {"before_ctx": " ", "before_line": " if ( ! string . is _ null _ or _ empty ( request . path _ info ) ) return request . path _ info . trim _ end ( '/' ) ; ", "after_ctx": " <%> <-> string . </%>", "after_line": "if ( ! is _ null _ or _ empty ( request . path _ info ) ) return request . path _ info . trim _ end ( '/' ) ;", "predictions": ["if ( ! string . is _ null _ get _ </@> <%> null , return </%> . <+> _ ; . trim _ request </%> ;"]}, {"before_ctx": "<%> <-> string . </%> ", "before_line": " if ( ! string . is _ null _ or _ empty ( path _ info ) ) return path _ info ; ", "after_ctx": " <%> <-> string . </%>", "after_line": "if ( ! is _ null _ or _ empty ( path _ info ) ) return path _ info ;", "predictions": ["if ( ! is _ null _ or _ ; <-> { { _ string info info _ ! ("]}, {"before_ctx": "<%> <-> string . </%> ", "before_line": " if ( ! string . is _ null _ or _ empty ( path _ info ) ) return path _ info ; ", "after_ctx": " ", "after_line": "if ( ! is _ null _ or _ empty ( path _ info ) ) return path _ info ;", "predictions": ["if ( ! string . is _ null _ app _ <@> . empty _ </%> <%> <%> _ ; <%> ! <+> ; ; </%> null null null null null null null null null null null null -> -> -> context _ ( context scope scope scope scope scope scope scope ( } ) ) var ; ; _ factory ; ) ; ; ; STR ;"]}, {"before_ctx": " ", "before_line": " if ( ! string . is _ null _ or _ empty ( specified _ content _ type ) ) return specified _ content _ type ; ", "after_ctx": " <%> <-> string . </%>", "after_line": "if ( ! is _ null _ or _ empty ( specified _ content _ type ) ) return specified _ content _ type ;", "predictions": ["if ( ! is _ null _ or _ if . null string string ) to _ ( ( path <%> string string string ( ) . request _ var _ <+> _ this item ) scope , <%> _ } _ </%> ; ; _ factory _ </%> ) ) -> ;"]}, {"before_ctx": "<%> <-> string . </%> ", "before_line": " var has _ default _ content _ type = ! string . is _ null _ or _ empty ( default _ content _ type ) ; ", "after_ctx": " ", "after_line": "var has _ default _ content _ type = ! is _ null _ or _ empty ( default _ content _ type ) ;", "predictions": ["var has _ default _ content _ type = string ( . null ! info . if _ is _ null _ <@> new result null test _ </%> static <+> -> -> -> ( . var _ <+> _ </%> _ empty } ) </%> _ ) = _ ) = <%> ( factory ( factory service -> _ <*> _ </@> _ native get _ factory _ ) { operation { operation { operation default _ namespace _ ) } } } } } } } } } } } } } } } } } } }"]}, {"before_ctx": " ", "before_line": " if ( string . is _ null _ or _ empty ( from _ path _ info ) ) ", "after_ctx": " <%> <-> string . </%>", "after_line": "if ( is _ null _ or _ empty ( from _ path _ info ) )", "predictions": ["if ( is _ null _ or _ empty ( content _ null _ <@> content ) )"]}, {"before_ctx": "<%> <-> string . </%> ", "before_line": " if ( string . is _ null _ or _ empty ( absolute _ uri ) ) ", "after_ctx": " ", "after_line": "if ( is _ null _ or _ empty ( absolute _ uri ) )", "predictions": ["if ( is _ null _ or _ empty ( <@> _ or ) ( . </@> content content ) <%>"]}, {"before_ctx": "<%> <*> if ( feature . on _ init ! = null ) feature . on _ init ( req ) ; -> feature . on _ init ? . invoke ( req ) ; </%> ", "before_line": " var user _ auth _ id = session ! = null ? session . user _ auth _ id : null ; ", "after_ctx": " ", "after_line": "var user _ auth _ id = session ? . user _ auth _ id ;", "predictions": ["var user _ auth _ id = session . </@> _ context _ new ( <-> _ test _ utils <%> , <%> _ config <+> type type ( return _ </%> <%> operation operation operation operation default _ </%> _ null ) ( return { ? ? ? ? ? default _ </%> _ host static public request _ get _ host static i _ get _ host static public i _ get _ host virtual public request _ get _ host virtual i _ get _ host static public request _ get _ host virtual public request _"]}, {"before_ctx": "<%> <-> ! = null </%> <%> <-> o </%> <%> <-> : null </%> ", "before_line": " var feature = app _ host ! = null ? app _ host . get _ plugin < server _ events _ feature > ( ) : null ; ", "after_ctx": " ", "after_line": "var feature = app _ host ? . get _ plugin < server _ events _ feature > ( ) ;", "predictions": ["var feature = app _ host . get _ plugin info info _ events _ utils </@> </@> </@> . <%> ,"]}, {"before_ctx": "<%> <-> new [ ] { </%> <%> <-> } </%> ", "before_line": " var register _ method _ info = method _ info . make _ generic _ method ( new [ ] { service _ type } ) ; ", "after_ctx": " <%> <-> new [ ] { </%> <%> <-> } </%>", "after_line": "var register _ method _ info = method _ info . make _ generic _ method ( service _ type ) ;", "predictions": ["var register _ method _ info = method _ ) </@> _ is _ . _ . <*> , equal content file static = ;"]}, {"before_ctx": "<%> <-> new [ ] { </%> <%> <-> } </%> ", "before_line": " var register _ method _ info = method _ info . make _ generic _ method ( new [ ] { service _ type } ) ; ", "after_ctx": " ", "after_line": "var register _ method _ info = method _ info . make _ generic _ method ( service _ type ) ;", "predictions": ["var register _ method _ info = method _ namespace = operation _ namespace <@> _ null ( get </%> info ;"]}, {"before_ctx": " ", "before_line": " if ( ! string . is _ null _ or _ empty ( specified _ content _ type ) ) ", "after_ctx": " <%> <-> string . </%>", "after_line": "if ( ! is _ null _ or _ empty ( specified _ content _ type ) )", "predictions": ["if ( ! is _ null _ or _ default ( null ) )"]}, {"before_ctx": "<%> <-> string . </%> ", "before_line": " else if ( string . is _ null _ or _ empty ( config . default _ content _ type ) ) ", "after_ctx": " ", "after_line": "else if ( is _ null _ or _ empty ( config . default _ content _ type ) )", "predictions": ["else if ( string . is _ null _ or null </%> _ <%> _ ; _ return ( ) )"]}, {"before_ctx": "<%> <-> if ( app _ host = = null ) return null ; </%> ", "before_line": " return has _ container ! = null ? has _ container . container : null ; ", "after_ctx": " ", "after_line": "return has _ container ? . container ;", "predictions": ["return has _ container ? . container ;"]}, {"before_ctx": " ", "before_line": " var response = request _ context ! = null ? request _ context . response : null ; ", "after_ctx": " <%> <*> if ( response ! = null ) response . set _ content _ length ( file _ info . length + padding _ length ) ; -> response ? . set _ content _ length ( file _ info . length + padding _ length ) ; </%>", "after_line": "var response = request _ context ? . response ;", "predictions": ["var response = request _ context . response ;"]}, {"before_ctx": " ", "before_line": " public static js _ token to _ token ( this object value , js _ binding binding ) ", "after_ctx": " <%> <*> constant -> literal </%> <%> <+> _ js </%> <%> <+> _ js </%> <%> <+> _ js </%>", "after_line": "public static js _ token to _ token ( this object value , js _ token binding )", "predictions": ["public static js _ token to _ token ( is is is request string get service <%> <%> }"]}, {"before_ctx": "<%> <+> if ( config _ utils . get _ nullable _ app _ setting ( namespaces _ app _ settings _ key ) ! = null ) { config _ utils . get _ list _ from _ app _ setting ( namespaces _ app _ settings _ key ) . for _ each ( x = > razor _ namespaces . add ( x ) ) ; } return razor _ namespaces ; } } </%> ", "before_line": " system . reflection . assembly entry _ assembly ; ", "after_ctx": " <%> <-> system . reflection . </%>", "after_line": "assembly entry _ assembly ;", "predictions": ["assembly entry _ assembly ;"]}, {"before_ctx": "<%> <*> return rule _ set _ to _ generate _ client _ side _ rules . contains ( rule . rule _ set ) ; -> bool execute _ default _ rule = ( rule _ set _ to _ generate _ client _ side _ rules . contains ( STR , string _ comparer . ordinal _ ignore _ case ) </%> <%> <+> & & ( rule . rule _ sets . length = = 0 | | rule . rule _ sets . contains ( STR , string _ comparer . ordinal _ ignore _ case ) ) ) ; return rule _ set _ to _ generate _ client _ side _ rules . intersect ( rule . rule _ sets , string _ comparer . ordinal _ ignore _ case ) . any ( ) | | execute _ default _ rule ; </%> ", "before_line": " var supports _ client _ validation = validator as system . web . mvc . i _ client _ validatable ; ", "after_ctx": " ", "after_line": "var supports _ client _ validation = validator as i _ client _ validatable ;", "predictions": ["var supports _ client _ validation = i _ client _ validatable ;"]}, {"before_ctx": " ", "before_line": " auto _ query _ viewer _ title _ explore _ stack _ overflow _ questions _ description _ find _ service _ stack _ questions _ on _ stack _ overflow _ icon _ url _ material _ icons _ cast _ default _ search _ field _ title _ default _ search _ type _ contains _ default _ search _ text _ service _ stack ", "after_ctx": " <%> <+> , i _ meta </%>", "after_line": "auto _ query _ viewer _ default _ search _ field _ title _ default _ search _ text _ service _ stack _ default _ search _ type _ contains _ description _ find _ service _ stack _ questions _ on _ stack _ overflow _ icon _ url _ material _ icons _ cast _ title _ explore _ stack _ overflow _ questions", "predictions": ["auto _ query _ viewer _ title _ explore _ stack _ overflow _ i _ < default _ </%> _ type _ public _ <%> _ static _ string _ string _ <->"]}, {"before_ctx": "<%> <*> i _ http _ error -> exception </%> ", "before_line": " first _ async _ error = async _ responses [ i ] ; return first _ async _ error ; ", "after_ctx": " ", "after_line": "return first _ async _ error = async _ responses [ i ] ;", "predictions": ["return async _ responses [ i ] ;"]}, {"before_ctx": " ", "before_line": " public static i _ list < array _ result > get ( this i _ hello _ array _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ array body = default ( hello _ array ) ) ", "after_ctx": " <%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ array body = default ( hello _ array </%> <%> <-> , body </%>", "after_line": "public static i _ list < array _ result > get ( this i _ hello _ array _ operations operations , string names = default ( string ) )", "predictions": ["public static i _ list < array _ result > get ( this ; i _ ( ( </@> , i _ ( </@> , </@> , hello _ </%> body default default ) < default _ </%> body body ) )"]}, {"before_ctx": "<%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ array body = default ( hello _ array </%> <%> <-> , body </%> ", "before_line": " public static i _ list < array _ result > create ( this i _ hello _ array _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ array body = default ( hello _ array ) ) ", "after_ctx": " <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%>", "after_line": "public static i _ list < array _ result > create ( this i _ hello _ array _ operations operations , string names = default ( string ) , hello _ array body = default ( hello _ array ) )", "predictions": ["public static i _ list < array _ result > create ( this i _ , _ set _ operations operations | ) client = _ set client = = _ set case , , , ) comparer"]}, {"before_ctx": "<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%> ", "before_line": " public static i _ list < array _ result > post ( this i _ hello _ array _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ array body = default ( hello _ array ) ) ", "after_ctx": " <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%>", "after_line": "public static i _ list < array _ result > post ( this i _ hello _ array _ operations operations , string names = default ( string ) , hello _ array body = default ( hello _ array ) )", "predictions": ["public static i _ list < array _ result > post ( this array _ ) _ , _ operations operations body body body body = default ( )"]}, {"before_ctx": "<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%> ", "before_line": " public static i _ list < array _ result > delete ( this i _ hello _ array _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ array body = default ( hello _ array ) ) ", "after_ctx": " <%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ array body = default ( hello _ array </%> <%> <-> , body </%>", "after_line": "public static i _ list < array _ result > delete ( this i _ hello _ array _ operations operations , string names = default ( string ) )", "predictions": ["public static i _ list < array _ result > delete ( this i _ ; _ if _ code code & info _ STR > all all <%> <%> & ; info > all <%> <%> catch <%> <%> , , )"]}, {"before_ctx": " ", "before_line": " public static i _ list < list _ result > get ( this i _ hello _ list _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ list body = default ( hello _ list ) ) ", "after_ctx": " <%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ list body = default ( hello _ list </%> <%> <-> , body </%>", "after_line": "public static i _ list < list _ result > get ( this i _ hello _ list _ operations operations , string names = default ( string ) )", "predictions": ["public static i _ list < list _ result > get ( this < <%> _ </@> container = null = ; ; ; ; ; <*> _ host instance var var var var var = default ( hello _ list ) )"]}, {"before_ctx": "<%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ list body = default ( hello _ list </%> <%> <-> , body </%> ", "before_line": " public static i _ list < list _ result > create ( this i _ hello _ list _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ list body = default ( hello _ list ) ) ", "after_ctx": " <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%>", "after_line": "public static i _ list < list _ result > create ( this i _ hello _ list _ operations operations , string names = default ( string ) , hello _ list body = default ( hello _ list ) )", "predictions": ["public static i _ list < list _ result > create ( this i _ , _ <%> _ default default array array array _ <%> > create body ( array ( _ <%> ( , < string _ <%> <%> <%> <%> <%> <%> <%> all ;"]}, {"before_ctx": "<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%> ", "before_line": " public static i _ list < list _ result > post ( this i _ hello _ list _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ list body = default ( hello _ list ) ) ", "after_ctx": " <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%>", "after_line": "public static i _ list < list _ result > post ( this i _ hello _ list _ operations operations , string names = default ( string ) , hello _ list body = default ( hello _ list ) )", "predictions": ["public static i _ list < list _ result > post ( this i _ list _ <%> _ = = ( i _ <%> , default < default < default < default < default app <%> app app app > > ) _ list <@> body , ( hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> & ;"]}, {"before_ctx": "<%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > </%> ", "before_line": " public static i _ list < list _ result > delete ( this i _ hello _ list _ operations operations , i _ list < string > names = default ( i _ list < string > ) , hello _ list body = default ( hello _ list ) ) ", "after_ctx": " <%> <-> , body </%> <%> <-> i _ list < </%> <%> <-> > </%> <%> <-> i _ list < </%> <%> <-> > ) , hello _ list body = default ( hello _ list </%> <%> <-> , body </%>", "after_line": "public static i _ list < list _ result > delete ( this i _ hello _ list _ operations operations , string names = default ( string ) )", "predictions": ["public static i _ list < list _ result > delete ( this i _ , _ <%> _ default default array array array _ <%> > body body ( array ( _ <%> ( , < , list ( string _ <%> ( string _ <%> ( string _ . <%> <%> <%> <%> & </%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> case default _ . case | default _"]}, {"before_ctx": " ", "before_line": " var value = type . enum _ values ! = null ? type . enum _ values [ i ] : null ; ", "after_ctx": " <%> <-> STR . fmt ( </%> <%> <-> ) </%> <%> <+> $ </%> <%> <-> . fmt ( name , value ) </%>", "after_line": "var value = type . enum _ values ? [ i ] ;", "predictions": ["var value = type . enum _ values [ i ] ;"]}, {"before_ctx": "<%> <+> $ </%> <%> <*> . fmt ( type _ declaration , type ( type . name , type . generic _ args ) ) ) ; -> ) ; </%> ", "before_line": " var value = type . enum _ values ! = null ? type . enum _ values [ i ] : null ; ", "after_ctx": " <%> <+> $ </%> <%> <-> . fmt ( name ) </%> <%> <+> $ </%> <%> <-> . fmt ( name , value ) </%>", "after_line": "var value = type . enum _ values ? [ i ] ;", "predictions": ["var value = type . enum _ values [ i ] ;"]}, {"before_ctx": " ", "before_line": " dispose ( ) ; } public void dispose ( ) { if ( app _ host = = null ) return ; app _ host . dispose ( ) ; app _ host = null ; } ", "after_ctx": " <%> <*> console -> json </%> <%> <*> write _ line -> print </%> <%> <-> json </%>", "after_line": "app _ host . dispose ( ) ;  }", "predictions": ["} public void dispose ( ) { if ( app _ host = service null list list <%> list <%> < list list list <%> list <-> list <%> < list list list <%> list <%> list <%> , array </%> host <%> <%> ( host ( host host list list list <%> list <-> list <-> list list list _ host list list <%> list <-> list <%> < > , list _ host list list <%> list <-> > > > > > > > > > > >"]}, {"before_ctx": " ", "before_line": " return type _ serializer . serialize _ and _ format ( request _ obj ) ; ", "after_ctx": " <%> <-> endpoint _ </%> <%> <*> . config -> _ context </%> <%> <*> endpoint -> host </%> <%> <*> host -> context </%>", "after_line": "return request _ obj . serialize _ and _ format ( ) ;", "predictions": ["return request _ obj . serialize _ and _ format ( request _ <@> <+> ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! _ < ) ,"]}, {"before_ctx": "<%> <*> var app _ host = get _ app _ host ( ) ; var container = app _ host ! = null ? app _ host . config . service _ manager . container : null ; -> var container = host _ context . container ; </%> ", "before_line": " if ( container ! = null ) container . auto _ wire ( attr _ instance ) ; ", "after_ctx": " <%> <*> if ( app _ host ! = null ) app _ host . release ( attr _ instance ) ; -> host _ context . release ( attr _ instance ) ; </%>", "after_line": "container . auto _ wire ( attr _ instance ) ;", "predictions": ["container . auto _ wire ( attr _ instance ) ;"]}, {"before_ctx": "<%> <*> if ( app _ host ! = null ) app _ host . release ( attr _ instance ) ; -> host _ context . release ( attr _ instance ) ; </%> ", "before_line": " if ( container ! = null ) container . auto _ wire ( attr _ instance ) ; ", "after_ctx": " <%> <*> if ( app _ host ! = null ) app _ host . release ( attr _ instance ) ; -> host _ context . release ( attr _ instance ) ; </%>", "after_line": "container . auto _ wire ( attr _ instance ) ;", "predictions": ["container . auto _ wire ( attr _ instance ) ;"]}, {"before_ctx": " ", "before_line": " var c = app _ host . container ; var dto _ a _ validator = ( dto _ a _ request _ validator ) c . try _ resolve < i _ validator < dto _ a > > ( ) ; ", "after_ctx": " <%> <*> c -> app _ host </%> <%> <*> c -> app _ host </%>", "after_line": "var dto _ a _ validator = ( dto _ a _ request _ validator ) app _ host . try _ resolve < i _ validator < dto _ a > > ( ) ;", "predictions": ["dto _ a _ request _ validator c = app _ host . : , </%> _ i ( <-> _ i ( </%> _ i ( </%> _ , > </@> > ) ) ; _ <-> _ , <*> container _ ; ( <-> _ i ( i _ < string string string string array _ static string string array array _ static string array _ < string string array _ <-> string array _ < string string string array _ static string string ( array _ < string _ > string string . _ <-> _ >"]}, {"before_ctx": "<%> <*> dictionary -> list </%> <%> <-> string , </%> ", "before_line": " return provider _ o _ auth _ access . values ", "after_ctx": " ", "after_line": "return provider _ o _ auth _ access", "predictions": ["return provider _ o _ auth _ access . values"]}, {"before_ctx": " ", "before_line": " var page = feature . html _ pages . get _ page ( path _ info ) ; ", "after_ctx": " <%> <*> if ( catch _ all _ paths _ not _ found . count > NUM ) -> if ( ! path _ info . ends _ with ( STR ) & & app _ host . virtual _ file _ sources . directory _ exists ( path _ info . trim _ prefixes ( STR ) ) ) </%> <%> <+> return new redirect _ http _ handler { relative _ url = path _ info + STR , status _ code = http _ status _ code . moved _ permanently } ; if ( catch _ all _ paths _ not _ found . count > server _ html _ feature . prevent _ dos _ max _ size ) </%>", "after_line": "var page = get _ page ( path _ info ) ;", "predictions": ["var page = get _ page ( path _ info ) ;"]}, {"before_ctx": " ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["mono _ touch"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " ", "after_line": "preserve", "predictions": ["mono _ touch"]}, {"before_ctx": " ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["mono _ touch"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["foundation _ preserve"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["foundation _ preserve"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve _ all _ members _ true ", "after_ctx": " ", "after_line": "preserve _ all _ members _ true", "predictions": ["mono _ touch _ foundation _ preserve _ all _ members _ = value"]}, {"before_ctx": " ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["mono _ touch"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " ", "after_line": "preserve", "predictions": ["mono _ touch"]}, {"before_ctx": " ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["mono _ touch"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["foundation _ preserve"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["foundation _ preserve"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve _ all _ members _ true ", "after_ctx": " ", "after_line": "preserve _ all _ members _ true", "predictions": ["mono _ touch _ _ filter"]}, {"before_ctx": " ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["mono _ touch"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " ", "after_line": "preserve", "predictions": ["mono _ touch"]}, {"before_ctx": " ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["mono _ touch"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["foundation _ preserve"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve ", "after_ctx": " <%> <-> mono _ touch _ foundation _ </%>", "after_line": "preserve", "predictions": ["foundation _ preserve"]}, {"before_ctx": "<%> <-> mono _ touch _ foundation _ </%> ", "before_line": " mono _ touch _ foundation _ preserve _ all _ members _ true ", "after_ctx": " ", "after_line": "preserve _ all _ members _ true", "predictions": ["mono _ touch _ foundation _ preserve _ <+> _ data"]}, {"before_ctx": " ", "before_line": " includ _ file = { { ' file . txt ' | include _ file } } ", "after_ctx": " <%> <*> assert . that ( test _ utils . normalize _ new _ lines ( new page _ result ( context . get _ page ( STR ) ) . result ) , is . equal _ to ( test _ utils . normalize _ new _ lines ( @ STR include _ url = includ _ file = file contents STR -> assert . throws < not _ supported _ exception > ( ( ) = > { </%> <%> <+> var ignore = new page _ result ( context . get _ page ( STR ) ) . result ; } ) ; </%>", "after_line": "include _ file = { { ' file . txt ' | include _ file } }", "predictions": ["includ _ file = file . txt , client _ . id id"]}, {"before_ctx": "<%> <+> _ description </%> <%> <+> _ description </%> <%> <+> _ status _ code </%> <%> <-> default </%> <%> <+> data _ member </%> ", "before_line": " api _ member _ description _ range _ description _ parameter _ type _ path _ data _ type _ double _ is _ required _ true ", "after_ctx": " <%> <-> string _ length references _ typeof _ check _ service _ model _ operations _ hello meta _ foo _ bar public virtual string name { get ; set ; } </%>", "after_line": "api _ member _ data _ type _ double _ description _ range _ description _ is _ required _ true _ parameter _ type _ path", "predictions": ["api _ member _ description _ range _ cache _ = _ factory _ > _ type _ )"]}, {"before_ctx": "<%> <+> _ description </%> <%> <+> _ description </%> <%> <+> _ status _ code </%> ", "before_line": " api _ member _ parameter _ type _ path _ description _ range _ description _ data _ type _ double _ is _ required _ true ", "after_ctx": " ", "after_line": "api _ member _ data _ type _ double _ description _ range _ description _ is _ required _ true _ parameter _ type _ path", "predictions": ["api _ member _ <@> _ request _ </@> _ xml _ <%> _ </@> _ ;"]}, {"before_ctx": "<%> <+> _ description </%> <%> <+> _ description </%> <%> <+> _ status _ code </%> <%> <+> data _ member required public virtual int id { get ; set ; } </%> ", "before_line": " api _ member _ description _ range _ description _ parameter _ type _ path _ data _ type _ double _ is _ required _ true ", "after_ctx": " ", "after_line": "api _ member _ data _ type _ double _ description _ range _ description _ is _ required _ true _ parameter _ type _ path", "predictions": ["api _ member _ null _ <%> . <@> . value . $ . </@> . ;"]}, {"before_ctx": " ", "before_line": " public interface i _ message < t > ", "after_ctx": " <%> <+> } public interface i _ message < t > : i _ message </%>", "after_line": "public interface i _ message", "predictions": ["public interface i _ mono"]}, {"before_ctx": " ", "before_line": " def ( STR , 1 , ( i , a ) = > { print ( i , str ( a [ 0 ] , false ) ) ; return a [ 0 ] ; ", "after_ctx": " <%> <*> def ( STR , 1 , ( i , a ) = > -> def ( STR , - 1 , ( i , a ) = > { var c = ( cell ) a [ 0 ] ; foreach ( var x in c ) </%> <%> <*> writeln -> write </%> <%> <*> a [ 0 ] -> x </%> <%> <-> return a [ 0 ] ; </%> <%> <+> } </%>", "after_line": "def ( STR , - 1 , ( i , a ) = > { var c = ( cell ) a [ 0 ] ; foreach ( var x in c ) { print ( i , str ( x , false ) ) ; } return a [ a . length - 1 ] ;", "predictions": ["def ( STR , 1 , ( } ) { <@> ( } ( str ( . = 0 = 0 _ 0 > _ <*> list list list list list list ;"]}, {"before_ctx": " ", "before_line": " stream _ serializer = type _ serializer . serialize _ to _ stream , ", "after_ctx": " <%> <+> } private static void serialize _ to _ stream ( i _ request _ context request _ context , object dto , stream stream ) { type _ serializer . serialize _ to _ stream ( dto , stream ) ; </%>", "after_line": "stream _ serializer = serialize _ to _ stream ,", "predictions": ["stream _ serializer = type _ . _ <%> <+>"]}, {"before_ctx": "<%> <*> mime -> response _ content </%> <%> <-> var http _ req = request _ context . get < i _ http _ request > ( ) ; </%> ", "before_line": " factory _ fn , http _ req . response _ content _ type , request _ context . compression _ type , cache _ client , cache _ key , null ) ; ", "after_ctx": " <%> <-> var http _ req = request _ context . get < i _ http _ request > ( ) ; </%> <%> <-> , http _ req . response _ content _ type </%> <%> <-> . compression _ type </%>", "after_line": "factory _ fn , request _ context , cache _ client , cache _ key , null ) ;", "predictions": ["factory _ fn , request _ req a , return , </%> , return , str , null _ result ( null _ </@> ( null _ </@> ( STR { STR </%> x ) to _ = . [ _ > to _ = <+> to _ , to _ , to _ , ) token ) token"]}, {"before_ctx": "<%> <*> factory _ fn , http _ req . response _ content _ type , request _ context . compression _ type , cache _ client , cache _ key , null ) ; -> factory _ fn , request _ context , cache _ client , cache _ key , null ) ; </%> <%> <-> var http _ req = request _ context . get < i _ http _ request > ( ) ; </%> ", "before_line": " factory _ fn , http _ req . response _ content _ type , request _ context . compression _ type , ", "after_ctx": " ", "after_line": "factory _ fn , request _ context ,", "predictions": ["factory _ fn , request _ req . response _ = _ <-> , http _ </%> a ;"]}, {"before_ctx": " ", "before_line": " stream _ serializer = xml _ serializer . serialize _ to _ stream , ", "after_ctx": " <%> <+> } private static void serialize _ to _ stream ( i _ request _ context request _ context , object dto , stream stream ) { xml _ serializer . serialize _ to _ stream ( dto , stream ) ; </%>", "after_line": "stream _ serializer = serialize _ to _ stream ,", "predictions": ["stream _ serializer = type _ serializer ,"]}, {"before_ctx": "<%> <+> using service _ stack _ service _ host ; </%> ", "before_line": " csv _ serializer . serialize _ to _ stream , csv _ serializer . deserialize _ from _ stream ) ; ", "after_ctx": " <%> <+> public static void serialize _ to _ stream ( i _ request _ context request _ context , object request , stream stream ) </%>", "after_line": "serialize _ to _ stream , csv _ serializer . deserialize _ from _ stream ) ;", "predictions": ["csv _ serializer , <@> _ get _ = null null null if path null ;"]}, {"before_ctx": " ", "before_line": " stream _ serializer = json _ serializer . serialize _ to _ stream , ", "after_ctx": " <%> <+> } private static void serialize _ to _ stream ( i _ request _ context request _ context , object dto , stream stream ) { json _ serializer . serialize _ to _ stream ( dto , stream ) ; </%>", "after_line": "stream _ serializer = serialize _ to _ stream ,", "predictions": ["stream _ serializer = serialize _ to _ stream ,"]}, {"before_ctx": " ", "before_line": " using system _ linq ; ", "after_ctx": " <%> <+> public action < swagger _ model > model _ filter { get ; set ; } </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": "<%> <-> using ( var redis = new redis _ generic _ client < t > ( ) ) { </%> <%> <-> _ id </%> <%> <-> _ id </%> ", "before_line": " } test [ ignore ( STR ) ] ", "after_ctx": " <%> <*> using ( var redis = new redis _ generic _ client < t > ( ) ) { list _ members . for _ each ( x = > redis . add _ to _ list ( list _ id , x ) ) ; list _ members . for _ each ( x = > redis . add _ to _ list ( list _ id , x ) ) ; -> list _ members . for _ each ( x = > redis . add _ to _ list ( list , x ) ) ; </%>", "after_line": "test", "predictions": ["} test [ ignore ]"]}, {"before_ctx": " ", "before_line": " args . append ( STR . fmt ( type _ value ( ctor _ arg . type , ctor _ arg . value ) ) ) ; ", "after_ctx": " <%> <+> $ </%> <%> <*> . fmt ( attr _ arg . name , type _ value ( attr _ arg . type , attr _ arg . value ) ) ) ; -> ) ; </%>", "after_line": "args . append ( type _ value ( ctor _ arg . type , ctor _ arg . value ) ) ;", "predictions": ["args . append ( STR . fmt <+> <@> </%> _ ; data <@> </%> _ <-> , ctor . cache , , , context , , , context . context . file ( . . . x ( , ) ( , , , ( arg ) ( , , , , , , ( . x ( , . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%>"]}, {"before_ctx": " ", "before_line": " using system _ collections ; ", "after_ctx": " <%> <*> service -> system </%> <%> <*> stack -> text </%> <%> <*> cache -> regular </%> <%> <*> access -> expressions </%> <%> <+> public static regex valid _ user _ name _ reg _ ex = new regex ( STR , regex _ options . compiled ) ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": " ", "before_line": " public static object to _ optimized _ result < t > ( this i _ request request , t dto ) ", "after_ctx": " <%> <+> dto = dto . get _ dto ( ) ; </%> <%> <-> ( object ) </%>", "after_line": "public static object to _ optimized _ result ( this i _ request request , object dto )", "predictions": ["public static object to _ optimized _ static , . <@> , stack _ <%> <%> </%> t )"]}, {"before_ctx": "<%> <-> to _ array [ i ] = requests _ array [ i ] ; } return exec _ sync < t _ response [ ] > ( to _ array ) . to _ list ( ) ; } finally { </%> <%> <-> } </%> <%> <+> return task . result . to _ list ( ) ; } , token ) ; </%> ", "before_line": " try { req . set _ item ( keywords . invoke _ verb , http _ methods . post ) ; req . request _ attributes & = ~ request _ attributes . reply ; req . request _ attributes | = request _ attributes . one _ way ; ", "after_ctx": " <%> <+> public task publish _ async ( object request _ dto , cancellation _ token token = new cancellation _ token ( ) ) </%>", "after_line": "req . set _ item ( keywords . invoke _ verb , http _ methods . post ) ; req . request _ attributes & = ~ request _ attributes . reply ; req . request _ attributes | = request _ attributes . one _ way ; try {", "predictions": ["req . set _ item ( keywords . invoke _ verb , http _ methods . post ) ;"]}, {"before_ctx": "<%> <-> = null </%> <%> <-> validate _ </%> <%> <*> _ without -> . validate </%> <%> <-> password ( </%> <%> <+> ( password </%> <%> <*> { var salted _ hash = host _ context . resolve < i _ hash _ provider > ( ) ; salted _ hash . get _ hash _ and _ salt _ string ( password , out hash , out salt ) ; } -> host _ context . resolve < i _ hash _ provider > ( ) . get _ hash _ and _ salt _ string ( password , out hash , out salt ) ; </%> ", "before_line": " { var digest _ helper = new digest _ auth _ functions ( ) ; digest _ hash = digest _ helper . create _ ha ( new _ user . user _ name , digest _ auth _ provider . realm , password ) ; } ", "after_ctx": " ", "after_line": "digest _ hash = new digest _ auth _ functions ( ) . create _ ha ( new _ user . user _ name , digest _ auth _ provider . realm , password ) ;", "predictions": ["var digest _ helper = digest _ helper . create _ ha ( new _ user . user _ name , digest _ auth _ provider . realm , password ) ;"]}, {"before_ctx": " ", "before_line": " if ( value . length > redis _ native _ client . one _ gb ) ", "after_ctx": " <%> <+> return get _ bytes ( key ) ; } public byte [ ] get _ bytes ( string key ) </%>", "after_line": "if ( value . length > one _ gb )", "predictions": ["if ( value . i _ status _ access -> _ <@> _ </@> . _ <@> _ int </%> _ </@> _ STR _ args _ </@> _ value )"]}, {"before_ctx": "<%> <+> var is _ mvc _ host = type . get _ type ( STR ) ! = null ; if ( is _ mvc _ host ) { set _ paths ( STR , null ) ; } } </%> ", "before_line": " if ( null = = handler _ path ) { return ; } if ( null = = location _ path ) ", "after_ctx": " ", "after_line": "if ( handler _ path = = null ) return ; if ( location _ path = = null )", "predictions": ["return ;"]}, {"before_ctx": " ", "before_line": " var stream = use _ scope . output _ stream ; using ( stream ) ", "after_ctx": " <%> <+> var stream = use _ scope . output _ stream ; </%>", "after_line": "using ( use _ scope . output _ stream )", "predictions": ["using ( use _ key )"]}, {"before_ctx": "<%> <*> list -> i _ enumerable </%> <%> <*> new list < string > { STR , STR , STR , STR , STR , STR , STR } -> all _ cache _ names </%> <%> <*> list < string > -> [ ] </%> ", "before_line": " caches = new list < string > ( name _ list ) ; ", "after_ctx": " ", "after_line": "caches = name _ list ;", "predictions": ["caches = name _ list ;"]}, {"before_ctx": "<%> <*> public class reverse _ service : service _ base < reverse > -> public class reverse _ service </%> <%> <+> : service _ base < reverse > </%> <%> <*> var value _ bytes = request . value . to _ char _ array ( ) ; -> return new reverse _ response { result = execute ( request . value ) } ; </%> <%> <+> } public static string execute ( string value ) { var value _ bytes = value . to _ char _ array ( ) ; </%> ", "before_line": " return new reverse _ response { result = new string ( value _ bytes ) } ; ", "after_ctx": " ", "after_line": "return new string ( value _ bytes ) ;", "predictions": ["return new string ( value _ bytes ) ;"]}, {"before_ctx": "<%> <*> if ( text _ serializer ! = null ) -> var stream _ serializer = text _ serializer as i _ string _ stream _ serializer ; </%> <%> <+> if ( stream _ serializer ! = null ) </%> ", "before_line": " var stream _ serializer = text _ serializer as i _ string _ stream _ serializer ; if ( stream _ serializer ! = null ) { return stream _ serializer . deserialize _ from _ stream < t > ( stream ) ; } ", "after_ctx": " ", "after_line": "return stream _ serializer . deserialize _ from _ stream < t > ( stream ) ;", "predictions": ["return stream _ serializer . deserialize _ from _ stream < ;"]}, {"before_ctx": "<%> <*> if ( text _ serializer ! = null ) -> var stream _ serializer = text _ serializer as i _ string _ stream _ serializer ; </%> <%> <+> if ( stream _ serializer ! = null ) </%> ", "before_line": " var stream _ serializer = text _ serializer as i _ string _ stream _ serializer ; if ( stream _ serializer ! = null ) { return stream _ serializer . deserialize _ from _ stream ( type , stream ) ; } ", "after_ctx": " ", "after_line": "return stream _ serializer . deserialize _ from _ stream ( type , stream ) ;", "predictions": ["return stream _ serializer . deserialize _ from _ stream ( type , </%> [ </%> [ <%> = ; = client = ) <%> <%> _ serializer ; _ ) ;"]}, {"before_ctx": " ", "before_line": " if ( string . is _ null _ or _ empty ( to . error _ code ) ) ", "after_ctx": " <%> <-> string . </%> <%> <-> if ( string . is _ null _ or _ empty ( error _ code ) ) </%>", "after_line": "if ( is _ null _ or _ empty ( to . error _ code ) )", "predictions": ["if ( string . is _ null _ or _ context <%> string <%> _ ; )"]}, {"before_ctx": "<%> <-> string . </%> ", "before_line": " if ( string . is _ null _ or _ empty ( to . message ) ) ", "after_ctx": " <%> <*> if ( string . is _ null _ or _ empty ( error _ code ) ) { if ( string . is _ null _ or _ empty ( to . error _ code ) ) { -> if ( is _ null _ or _ empty ( error _ code ) & & is _ null _ or _ empty ( to . error _ code ) ) </%>", "after_line": "if ( is _ null _ or _ empty ( to . message ) )", "predictions": ["if ( string . is _ null _ or _ x ( )"]}, {"before_ctx": "<%> <*> public override bool run _ as _ async ( ) { return true ; } -> public override bool run _ as _ async ( ) { return true ; } </%> ", "before_line": " var subscription _ id = req . query _ string [ STR ] ; req . try _ resolve < i _ server _ events > ( ) . pulse ( subscription _ id ) ; ", "after_ctx": " <%> <+> _ event </%> <%> <*> subscriptions -> subscribers </%> <%> <*> subscriptions -> event _ subscribers </%>", "after_line": "req . try _ resolve < i _ server _ events > ( ) . pulse ( req . query _ string [ STR ] ) ;", "predictions": ["req . try _ resolve < i _ server _ events > _ -> <@> <*> <%> <%> ( } ) <%> public query <%> ; . _ } ;"]}, {"before_ctx": "<%> <+> interlocked . increment ( ref </%> <%> <+> ) </%> ", "before_line": " ? ? STR + interlocked . increment ( ref anon _ user _ id ) ; ", "after_ctx": " ", "after_line": "? ? STR + anon _ user _ id ;", "predictions": ["? ? STR + interlocked . increment ( ref arg ( error , ref , page , page , </@> ) if <%> serializer ) event null string exception new exception <%> <%> ) ( ;"]}, {"before_ctx": "<%> <+> using service _ stack _ auth ; </%> ", "before_line": " namespace service _ stack _ auth ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": " ", "before_line": " public int? x _ forwarded _ port { get { throw new not _ implemented _ exception ( ) ; } } public string x _ forwarded _ protocol { get { throw new not _ implemented _ exception ( ) ; } } public string x _ real _ ip ", "after_ctx": " <%> <+> public string x _ forwarded _ protocol { get { throw new not _ implemented _ exception ( ) ; } } public string x _ real _ ip { get { throw new not _ implemented _ exception ( ) ; } </%>", "after_line": "public int? x _ forwarded _ port", "predictions": ["public int? x _ forwarded _ port { get { + var <%> ( . <%> _ ; _ provider ) = var = <+> ; _ bool _ < ( <%> ( ) _ </%> ) } <%> } } _ forwarded _ -> )"]}, {"before_ctx": "<%> <+> using service _ stack _ text ; </%> ", "before_line": " var request _ obj = reflection _ utils . populate _ object ( activator . create _ instance ( dto _ type ) ) ; ", "after_ctx": " ", "after_line": "var request _ obj = reflection _ utils . populate _ object ( dto _ type . create _ instance ( ) ) ;", "predictions": ["var request _ obj = populate . create _ </@> ( ; < get STR list , ) = null ( <%> _ <@> stream ) x"]}, {"before_ctx": " ", "before_line": " var var _ value = evaluate _ any _ bindings ( evaluate ( var , arg , scope _ context ) , scope _ context ) ; ", "after_ctx": " <%> <+> _ block </%>", "after_line": "var var _ value = evaluate _ any _ bindings ( evaluate ( arg , scope _ context , var ) , scope _ context ) ;", "predictions": ["var var _ value = evaluate _ any _ bindings ( t <%> </%> <%> <%> <%> <*> ;"]}, {"before_ctx": "<%> <+> _ block </%> <%> <*> filter -> block </%> <%> <+> _ block </%> ", "before_line": " var var _ value = evaluate _ any _ bindings ( evaluate ( var , arg , scope _ context ) , scope _ context ) ; ", "after_ctx": " <%> <+> _ block </%>", "after_line": "var var _ value = evaluate _ any _ bindings ( evaluate ( arg , scope _ context , var ) , scope _ context ) ;", "predictions": ["var var _ value = evaluate _ any _ bindings <*> value </%> . <%> _ null ( string empty x x x new get ; </%> _ = </%> _ > </%> _ <+> get _ <%> > time x x ( var ( var typeof . string date ( . . . . . . . . . . . . . . scope ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var ( var date typeof . string date ( . typeof ( ."]}, {"before_ctx": "<%> <*> var word = system . text . encoding . ut . get _ string ( packet , offset + NUM , word _ len ) ; -> var word = new byte [ word _ len ] ; </%> <%> <+> for ( int j = 0 ; j < word _ len ; j + + ) { word [ j ] = packet [ offset + NUM + j ] ; } </%> ", "before_line": " internal static byte [ ] encode _ packet ( bool from _ server , bool is _ response , uint id , string [ ] words ) ", "after_ctx": " ", "after_line": "internal static byte [ ] encode _ packet ( bool from _ server , bool is _ response , uint id , byte [ ] [ ] words )", "predictions": ["internal static byte [ ] encode _ packet ( bool from , { get { -> return uint request attribute attribute <%>"]}, {"before_ctx": " ", "before_line": " private static byte [ ] encode _ words ( string [ ] words ) ", "after_ctx": " <%> <-> ( system . text . encoding . ut . get _ bytes </%> <%> <-> ) </%> <%> <*> system -> word </%> <%> <*> text . encoding . ut . get _ byte _ count ( word ) -> length </%>", "after_line": "private static byte [ ] encode _ words ( byte [ ] [ ] words )", "predictions": ["private static byte [ ] encode _ words ( { set null )"]}, {"before_ctx": "<%> <+> scope _ args = scope _ args ? ? new dictionary < string , object > ( ) ; </%> ", "before_line": " var html = render _ in _ template _ if _ any ( markdown _ page . template _ path , scope _ args , html _ page ) ; ", "after_ctx": " ", "after_line": "var html = render _ in _ template _ if _ any ( markdown _ page , scope _ args , html _ page ) ;", "predictions": ["var html = render _ in _ template _ count STR = { = } _ ) -> _ page & ;"]}, {"before_ctx": "<%> <+> if ( typeof ( t ) = = typeof ( object ) ) { return jsv _ writer . write _ late _ bound _ object ; } </%> ", "before_line": " return ( w , x ) = > to _ string _ methods . write _ string ( w , ( string ) x ) ; ", "after_ctx": " <%> <-> if ( typeof ( t ) = = typeof ( date _ time ) ) return ( w , x ) = > to _ string _ methods . write _ date _ time ( w , ( date _ time ) x ) ; if ( typeof ( t ) = = typeof ( date _ time ? ) ) return ( w , x ) = > to _ string _ methods . write _ date _ time ( w , ( date _ time ? ) x ) ; if ( typeof ( t ) = = typeof ( guid ) ) return ( w , x ) = > to _ string _ methods . write _ guid ( w , ( guid ) x ) ; if ( typeof ( t ) = = typeof ( guid ? ) ) </%>", "after_line": "return ( w , x ) = > write _ string ( w , ( string ) x ) ;", "predictions": ["return ( w , x ) = > write _ string ( w ) = _ <%> = w = _ var = w = _ var = <%> ;"]}, {"before_ctx": "<%> <-> this . total _ normal _ messages _ received + + ; </%> <%> <*> last _ message -> if ( do </%> <%> <*> processed -> next ! </%> <%> <*> date _ time . utc -> null & & ! do </%> <%> <*> now ; -> next ( ) ) </%> <%> <-> if ( do _ next ! = null & & ! do _ next ( ) ) </%> ", "before_line": " var last _ ex = ex ; log . error ( STR + last _ ex . message , ex ) ; ", "after_ctx": " ", "after_line": "log . error ( STR + ex . message , ex ) ;", "predictions": ["log . error ( STR + ex _ ex . offset <+> <%> } ; } ; . <+> { ( </%> _ </%> get _ <%> ex typeof ;"]}, {"before_ctx": " ", "before_line": " public static void add < t > ( this i _ service _ routes service _ routes , string rest _ path , apply _ to verbs , params expression < func < t , object > > [ ] property _ expressions ) ", "after_ctx": " <%> <+> return </%>", "after_line": "public static i _ service _ routes add < t > ( this i _ service _ routes service _ routes , string rest _ path , apply _ to verbs , params expression < func < t , object > > [ ] property _ expressions )", "predictions": ["public static i _ service _ routes add < var scope <*> this _ ) _ ( ) </%> _ empty ( string is empty _ < , = _ routes ( { <-> _ ( filter _ public ( delegate <*> . STR . , ( binding = binding = binding = binding = binding = binding ! ex ( , = binding = , = binding = binding = binding = binding = binding = binding = binding = binding = binding = binding = binding ! ex = binding > = this ex _ ! ex _"]}, {"before_ctx": " ", "before_line": " i _ async _ result result = this . listener . begin _ get _ context ( new async _ callback ( web _ request _ callback ) , this . listener ) ; ", "after_ctx": " <%> <*> if ( listener ! = null ) -> if ( listener = = null ) return ; </%> <%> <+> try </%> <%> <+> } catch ( http _ listener _ exception ex ) </%>", "after_line": "i _ async _ result result = this . listener . begin _ get _ context ( web _ request _ callback , this . listener ) ;", "predictions": ["i _ async _ result result = this . listener ) _ get _ log _ STR <%> ( . -> _ ) ( . manager _ bytes provider provider provider provider provider ex ;"]}, {"before_ctx": "<%> <*> var required _ role _ attrs = auth _ attrs . of _ type < required _ role _ attribute > ( ) . to _ list ( ) ; var requires _ any _ role _ attrs = auth _ attrs . of _ type < requires _ any _ role _ attribute > ( ) . to _ list ( ) ; var required _ perm _ attrs = auth _ attrs . of _ type < required _ permission _ attribute > ( ) . to _ list ( ) ; var requires _ any _ perm _ attrs = auth _ attrs . of _ type < requires _ any _ permission _ attribute > ( ) . to _ list ( ) ; var has _ roles = required _ role _ attrs . count + requires _ any _ role _ attrs . count > 0 ; -> var has _ roles = op . required _ roles . count + op . requires _ any _ role . count > 0 ; </%> <%> <*> attr -> role </%> <%> <*> required _ role -> op . required </%> <%> <*> attrs -> roles </%> ", "before_line": " foreach ( var role in attr . required _ roles ) { sb _ roles . append ( STR + role ) ; } ", "after_ctx": " <%> <*> attr -> role </%> <%> <+> op . </%> <%> <-> _ attrs </%> <%> <-> foreach ( var role in attr . required _ roles ) { </%> <%> <-> } </%>", "after_line": "sb _ roles . append ( STR + role ) ;", "predictions": ["sb _ roles . append ( STR + role ) ;"]}, {"before_ctx": "<%> <*> public bool request _ filter _ executed { get ; set ; } public bool contextual _ request _ filter _ executed { get ; set ; } -> public bool inherited _ response _ filter _ executed { get ; set ; } </%> <%> <*> public class attribute _ filtered _ service : i _ service -> inherited _ request _ filter </%> <%> <+> inherited _ response _ filter public class attribute _ filtered _ service _ base : i _ service { } public class attribute _ attribute _ filtered _ service : attribute _ filtered _ service _ base </%> ", "before_line": " return new attribute _ filtered _ response ( ) { ", "after_ctx": " <%> <+> inherited _ request _ filter _ executed = request . inherited _ request _ filter _ executed , </%>", "after_line": "return new attribute _ filtered _ response {", "predictions": ["return new attribute _ filtered _ response {"]}, {"before_ctx": "<%> <-> request . </%> ", "before_line": " path _ info = request . raw _ url ; ", "after_ctx": " ", "after_line": "path _ info = raw _ url ;", "predictions": ["path _ info = raw _ url stack stack null <%>"]}, {"before_ctx": "<%> <+> private static readonly byte [ ] auth _ key = aes _ utils . create _ key ( ) ; </%> ", "before_line": " auth _ key = aes _ utils . create _ key ( ) , ", "after_ctx": " <%> <+> } test public void can _ manually _ create _ an _ authenticated _ user _ session _ in _ token ( ) { var jwt _ provider = create _ jwt _ auth _ provider ( ) ; var header = jwt _ auth _ provider . create _ jwt _ header ( jwt _ provider . hash _ algorithm ) ; var body = jwt _ auth _ provider . create _ jwt _ payload ( new auth _ user _ session { </%>", "after_line": "auth _ key = auth _ key ,", "predictions": ["auth _ key = create _ key ( ) ,"]}, {"before_ctx": "<%> <*> var mi = get _ type ( ) . get _ method ( STR , binding _ flags . instance | binding _ flags . non _ public ) -> var mi = get _ type ( ) . get _ non _ public _ instance _ method ( STR ) </%> ", "before_line": " response _ handler = ( action < exception , string > ) delegate . create _ delegate ( typeof ( action < exception , string > ) , this , mi ) ; ", "after_ctx": " <%> <*> if ( web _ ex ! = null & & web _ ex . status = = web _ exception _ status . protocol _ error ) -> if ( web _ ex ! = null </%> <%> <+> & & web _ ex . status = = web _ exception _ status . protocol _ error </%>", "after_line": "response _ handler = ( action < exception , string > ) mi . create _ delegate ( typeof ( action < exception , string > ) ) ;", "predictions": ["response _ handler = ( action < exception , string > ) delegate _ handler _ create _ create ) ; ; ; ; ;"]}, {"before_ctx": " ", "before_line": " var redis _ manager = app _ host . try _ resolve < i _ redis _ clients _ manager > ( ) ; if ( redis _ manager ! = null ) ", "after_ctx": " <%> <*> try -> var redis _ manager = app _ host . try _ resolve < i _ redis _ clients _ manager > ( ) ; </%> <%> <+> if ( redis _ manager ! = null ) </%> <%> <*> using ( var client = redis _ manager . get _ client ( ) ) -> try </%> <%> <+> using ( var client = redis _ manager . get _ client ( ) ) { </%>", "after_line": "if ( app _ host ! = null )", "predictions": ["if ( app _ host ! = null )"]}, {"before_ctx": "<%> <*> layout _ key -> keywords . template </%> ", "before_line": " return result ! = null ? result . item : null ; ", "after_ctx": " ", "after_line": "return result ? . item ;", "predictions": ["return result ! = null ? null : result ( var ;"]}, {"before_ctx": "<%> <+> using service _ stack _ common _ web ; </%> ", "before_line": " attribute _ usage _ attribute _ targets _ class _ attribute _ targets _ method _ inherited _ false _ allow _ multiple _ true ", "after_ctx": " <%> <+> public string content _ type { set { name = http _ headers . content _ type ; value = value ; </%>", "after_line": "attribute _ usage _ attribute _ targets _ class _ attribute _ targets _ method _ inherited _ true _ allow _ multiple _ true", "predictions": ["attribute _ usage _ attribute _ targets _ class _ ) _ <*> _ allow _ <@>"]}, {"before_ctx": "<%> <*> manager -> controller </%> ", "before_line": " public service _ manager service _ manager { get ; set ; } public service _ metadata metadata { get { return service _ manager . metadata ; } } public i _ service _ controller service _ controller { get { return service _ manager . service _ controller ; } } ", "after_ctx": " <%> <*> public i _ service _ routes routes { get { return service _ controller . routes ; } } -> public i _ service _ routes routes { get ; set ; } </%> <%> <+> public list < rest _ path > rest _ paths = new list < rest _ path > ( ) ; </%> <%> <-> service _ manager . </%>", "after_line": "public service _ metadata metadata { get ; set ; } public service _ controller service _ controller { get ; set ; }", "predictions": ["public service _ metadata service _ manager { get ; base service filter _ metadata . ex . & & ) . & )"]}, {"before_ctx": " ", "before_line": " var routes = ( service _ routes ) app _ host . routes ; assert . that ( routes . rest _ paths . count , is . equal _ to ( 0 ) ) ; ", "after_ctx": " <%> <*> routes -> app _ host </%>", "after_line": "assert . that ( app _ host . rest _ paths . count , is . equal _ to ( 0 ) ) ;", "predictions": ["assert . that ( app _ host . routes string add , <@> STR <+> = service _ </@> serializer _ run <%> async _ <%> <%> date _ ;"]}, {"before_ctx": "<%> <-> public static service _ manager service _ manager { get ; set ; } </%> ", "before_line": " return service _ manager ! = null ? service _ manager . metadata . get _ operation _ type ( operation _ name ) : host _ context . metadata . get _ operation _ type ( operation _ name ) ; ", "after_ctx": " ", "after_line": "return host _ context . metadata . get _ operation _ type ( operation _ name ) ;", "predictions": ["return service _ manager ? http _ . _ single result _ name new ( ( ( = = meta _ display address _ , <%> bytes _ name </%> </%> _ context </%> _ , <%> bytes _ name </%> = _ ) </%> = _ ) </%> = _ ) </%> = _ ) address"]}, {"before_ctx": "<%> <-> public static service _ manager service _ manager { get { return assert _ app _ host ( ) . service _ manager ; } } </%> ", "before_line": " get { return assert _ app _ host ( ) . service _ manager . service _ controller ; } ", "after_ctx": " ", "after_line": "get { return assert _ app _ host ( ) . service _ controller ; }", "predictions": ["get { return assert _ </%> _ { _ xml ) )"]}, {"before_ctx": "<%> <*> literal = literal . parse _ var _ name ( out var block _ name ) ; -> literal = literal . as _ span ( ) . parse _ var _ name ( out var block _ name _ span ) . to _ string _ segment ( ) ; </%> <%> <+> var block _ name = block _ name _ span . value ( ) ; </%> ", "before_line": " var block _ name _ string = block _ name . value ; if ( ! template _ config . dont _ evaluate _ blocks _ named . contains ( block _ name _ string ) ) ", "after_ctx": " ", "after_line": "if ( ! template _ config . dont _ evaluate _ blocks _ named . contains ( block _ name ) )", "predictions": ["if ( ! template _ -> info )"]}, {"before_ctx": "<%> <+> : redis _ client _ tests _ base </%> <%> <*> new -> get _ </%> <%> <-> test _ config . single _ host </%> ", "before_line": " var value _ string = encoding . ut . get _ string ( value _ bytes ) ; ", "after_ctx": " <%> <*> new -> get _ </%> <%> <-> test _ config . single _ host </%>", "after_line": "var value _ string = get _ string ( value _ bytes ) ;", "predictions": ["var value _ string = null throw response _ > ( out value _ new get _ <+> byte _ new get _ , 0 bytes _ , bytes _ , if ? ? return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return return"]}, {"before_ctx": "<%> <*> new -> get _ </%> <%> <-> test _ config . single _ host </%> ", "before_line": " var value _ string = encoding . ut . get _ string ( value _ bytes ) ; ", "after_ctx": " ", "after_line": "var value _ string = get _ string ( value _ bytes ) ;", "predictions": ["var value _ string = <%> _ ] ( content <%> <@> ;"]}, {"before_ctx": "<%> <+> if ( layout _ view ! = null ) { </%> <%> <+> return ; } </%> ", "before_line": " else { page . write _ to ( writer ) ; } ", "after_ctx": " ", "after_line": "page . write _ to ( writer ) ;", "predictions": ["page . write _ to _ new writer ) ( null ( user </%> ( ( ( ; ) ;"]}, {"before_ctx": "<%> <*> request -> http _ req </%> <%> <*> response -> http _ res </%> <%> <*> response -> http _ res </%> ", "before_line": " page . init ( view _ engine : this , http _ req : request , http _ res : response ) ; ", "after_ctx": " <%> <*> request -> http _ req </%> <%> <+> , dto </%>", "after_line": "page . init ( view _ engine : this , http _ req : http _ req , http _ res : http _ res ) ;", "predictions": ["page . init ( view _ </@> ; ( <@> base base base var ;"]}, {"before_ctx": "<%> <+> private endpoint _ attributes get _ ip _ address _ endpoint _ attributes ( ip _ address ip _ address ) { </%> <%> <*> port _ restrictions | = -> return </%> <%> <-> else </%> <%> <*> port _ restrictions | = -> return </%> ", "before_line": " else { port _ restrictions | = endpoint _ attributes . external ; } return port _ restrictions ; ", "after_ctx": " <%> <*> foreach ( var ipv _ address _ and _ mask in network _ interface _ ipv _ addresses ) -> var ip _ address _ bytes = ip _ address . get _ address _ bytes ( ) ; </%> <%> <+> switch ( ip _ address . address _ family ) </%> <%> <*> if ( ip _ address . is _ in _ same _ subnet ( ipv _ address _ and _ mask . key , ipv _ address _ and _ mask . value ) ) -> case address _ family . inter _ network : </%> <%> <+> foreach ( var local _ ipv _ address _ and _ mask in network _ interface _ ipv _ addresses ) </%>", "after_line": "return endpoint _ attributes . external ;", "predictions": ["return port _ restrictions | = endpoint _ attributes . external ;"]}, {"before_ctx": "<%> <+> } public static byte [ ] get _ network _ address _ bytes ( byte [ ] ip _ adress _ bytes , byte [ ] subnet _ mask _ bytes ) { </%> ", "before_line": " return new ip _ address ( broadcast _ address ) ; ", "after_ctx": " <%> <+> _ ipv </%> <%> <*> , ip _ address subnet _ mask ) -> ) </%> <%> <+> if ( address . address _ family ! = address _ family . inter _ network | | address . address _ family ! = address _ family . inter _ network ) { throw new argument _ exception ( STR ) ; } var address _ bytes = address . get _ address _ bytes ( ) ; var address _ bytes = address . get _ address _ bytes ( ) ; return is _ in _ same _ ipv _ subnet ( address _ bytes , address _ bytes ) ; </%>", "after_line": "return broadcast _ address ;", "predictions": ["return broadcast _ address ;"]}, {"before_ctx": "<%> <*> new soap _ service _ client ( service _ client _ base _ uri ) , new soap _ service _ client ( service _ client _ base _ uri ) -> new xml _ service _ client ( service _ client _ base _ uri ) , </%> <%> <+> new jsv _ service _ client ( service _ client _ base _ uri ) </%> ", "before_line": " var response = client . send < attribute _ filtered _ response > ( new attribute _ filtered ( ) { request _ filter _ executed = false } ) ; ", "after_ctx": " ", "after_line": "var response = client . send < attribute _ filtered _ response > ( new attribute _ filtered { request _ filter _ executed = false } ) ;", "predictions": ["var response = client . send <*> . name { . <+> _ [ { ? <*> _ -> _ write ? bytes ( ( and _ filtered , foreach _ else ( <%> _ else ( ( bytes _ uri _ response _ uri ( <%> _ else _ . _ uri ) ( ) : bytes : ( and _ else _ uri ( bytes _ uri _ response _ uri ( <%> _ else _ . _ uri ) ( ) : bytes : ( ( and _ else _ executed _ uri ( <%> _ else"]}, {"before_ctx": "<%> <*> public string subscription _ id { get { return connection _ info ! = null ? connection _ info . id : null ; } } public string connection _ display _ name { get { return connection _ info ! = null ? connection _ info . display _ name : STR ; } } -> public string subscription _ id = > connection _ info ? . id ; </%> <%> <+> public string connection _ display _ name = > connection _ info ! = null ? connection _ info . display _ name : STR ; </%> ", "before_line": " return meta ! = null ? meta . base _ uri : null ; ", "after_ctx": " ", "after_line": "return meta ? . base _ uri ;", "predictions": ["return null ;"]}, {"before_ctx": " ", "before_line": " container . register < i _ cache _ client > ( new memory _ cache _ client ( ) ) ; ", "after_ctx": " <%> <+> if ( configure _ fn ! = null ) { configure _ fn ( container ) ; } </%>", "after_line": "container . register ( new memory _ cache _ client ( ) ) ;", "predictions": ["container . register ( new service <%> { _ content info ( ( using _ -> _ to ( ) ) ) ( ) service . register . </@> . </@> . </@> _ block name ) ( ) ( . </@> ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) = get _ null _ . connection = get _ null _ . connection ( info info ) = get _ null = get = ;"]}, {"before_ctx": "<%> <*> get { return response . output _ stream ; } -> get { return buffered _ stream ? ? response . output _ stream ; } </%> <%> <+> } public bool use _ buffered _ stream { get { return buffered _ stream ! = null ; } set { buffered _ stream = value ? buffered _ stream ? ? new memory _ stream ( ) : null ; } } private void flush _ buffer _ if _ any ( ) { if ( buffered _ stream = = null ) return ; var bytes = buffered _ stream . to _ array ( ) ; response . output _ stream . write ( bytes , 0 , bytes . length ) ; buffered _ stream . position = 0 ; </%> ", "before_line": " var output _ stream = response . output _ stream ; output _ stream . write ( b _ output , 0 , b _ output . length ) ; ", "after_ctx": " ", "after_line": "output _ stream . write ( b _ output , 0 , b _ output . length ) ;", "predictions": ["output _ stream . write ( b _ output , 0 , response . ) </%> b _ ) </%>"]}, {"before_ctx": " ", "before_line": " service _ client . send < registration _ response > ( registration ) ; ", "after_ctx": " <%> <-> console . write _ line </%> <%> <+> ) . print ( </%> <%> <-> console . write _ line ( </%> <%> <+> print _ </%> <%> <-> ) </%>", "after_line": "service _ client . send ( registration ) ;", "predictions": ["service _ client . send content ;"]}, {"before_ctx": " ", "before_line": " service _ client . send < registration _ response > ( new _ user _ registration ) ; ", "after_ctx": " <%> <*> < assign _ roles _ response > ( -> ( </%>", "after_line": "service _ client . send ( new _ user _ registration ) ;", "predictions": ["service _ client . send request i _ send _ . get cache ; app _ </@> _ . <%> <%>"]}, {"before_ctx": " ", "before_line": " service _ client . send < content _ manager _ only _ response > ( new content _ manager _ only ( ) ) ; ", "after_ctx": " <%> <*> < assign _ roles _ response > ( -> ( </%>", "after_line": "service _ client . send ( new content _ manager _ only ( ) ) ;", "predictions": ["service _ client . send info info i _ <-> _ ) ( response using using using <%> <%> response response single STR }"]}, {"before_ctx": "<%> <*> < assign _ roles _ response > ( -> ( </%> ", "before_line": " var response = new _ user _ client . send < content _ manager _ only _ response > ( new content _ manager _ only ( ) ) ; ", "after_ctx": " <%> <-> < content _ permission _ only _ response > </%>", "after_line": "var response = new _ user _ client . send ( new content _ manager _ only ( ) ) ;", "predictions": ["var response = new _ user _ context ) . bytes . bytes _ </%> _ base _ . block name out"]}, {"before_ctx": "<%> <-> < content _ manager _ only _ response > </%> ", "before_line": " service _ client . send < content _ permission _ only _ response > ( new content _ permission _ only ( ) ) ; ", "after_ctx": " <%> <*> < assign _ roles _ response > ( -> ( </%>", "after_line": "service _ client . send ( new content _ permission _ only ( ) ) ;", "predictions": ["service _ client . send info info new : context ) ) ) test if"]}, {"before_ctx": "<%> <*> < assign _ roles _ response > ( -> ( </%> ", "before_line": " var response = new _ user _ client . send < content _ permission _ only _ response > ( new content _ permission _ only ( ) ) ; ", "after_ctx": " ", "after_line": "var response = new _ user _ client . send ( new content _ permission _ only ( ) ) ;", "predictions": ["var response = new _ user _ manager new private service _ <-> _ config _ </%> new base _ <%> _ = name <%> name name name name name ;"]}, {"before_ctx": " ", "before_line": " return to _ compressed _ bytes ( to _ serialized _ string ( result , serialize _ ctx ) , compression _ type ) ; ", "after_ctx": " <%> <+> public static byte [ ] to _ compressed _ bytes ( object result , i _ request _ context context ) { result . throw _ if _ null ( STR ) ; context . throw _ if _ null ( STR ) ; return to _ compressed _ bytes ( to _ serialized _ string ( result , context ) , context . compression _ type ) ; } </%>", "after_line": "return to _ compressed _ bytes ( result , serialize _ ctx ) ;", "predictions": ["return to _ compressed _ <%> client name var var ;"]}, {"before_ctx": "<%> <*> soap -> this . handler </%> <%> <*> type -> attributes </%> ", "before_line": " public override object create _ request ( extensions . i _ http _ request request , string operation _ name ) ", "after_ctx": " ", "after_line": "public override object create _ request ( i _ http _ request request , string operation _ name )", "predictions": ["public override object create _ ( only expr _ <@> _ ( </%> app </%> </%> try ? _ <@> )"]}, {"before_ctx": "<%> <+> using service _ stack _ html ; </%> <%> <-> using service _ stack _ markdown _ html ; </%> ", "before_line": " public service _ stack . markdown . mvc _ html _ string eval _ expr ( ) ", "after_ctx": " ", "after_line": "public mvc _ html _ string eval _ expr ( )", "predictions": ["public mvc _ html _ if <@> _ >"]}, {"before_ctx": " ", "before_line": " var directory _ nodes = backing _ dir _ info . get _ directories ( ) ", "after_ctx": " <%> <-> backing _ dir _ info . </%> <%> <+> } private file _ info [ ] get _ files ( ) { </%>", "after_line": "var directory _ nodes = get _ directories ( )", "predictions": ["var directory _ nodes = get _ console { </%> > </%> _ nodes <%> operation"]}, {"before_ctx": "<%> <-> backing _ dir _ info . </%> ", "before_line": " var file _ nodes = backing _ dir _ info . get _ files ( ) ", "after_ctx": " <%> <+> } private file _ info [ ] get _ files ( ) { try { return backing _ dir _ info . get _ files ( ) ; </%>", "after_line": "var file _ nodes = get _ files ( )", "predictions": ["var file _ nodes = )"]}, {"before_ctx": "<%> <-> using system _ text ; using system _ xml ; using system _ collections ; using system _ collections _ generic ; using system _ linq ; using system _ linq _ expressions ; </%> ", "before_line": " using service _ stack _ html ; using service _ stack _ markdown ; using service _ stack _ utils ; ", "after_ctx": " ", "after_line": "using service _ stack ;", "predictions": ["using service ;"]}, {"before_ctx": "<%> <-> using service _ stack _ web ; </%> ", "before_line": " namespace service _ stack _ utils ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": "<%> <-> using service _ stack _ clients ; </%> ", "before_line": " namespace service _ stack _ messaging ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ <%>"]}, {"before_ctx": "<%> <-> using service _ stack _ clients ; </%> ", "before_line": " namespace service _ stack _ clients ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ service"]}, {"before_ctx": "<%> <+> using service _ stack _ web ; </%> ", "before_line": " namespace service _ stack _ web ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ stack"]}, {"before_ctx": "<%> <-> using service _ stack _ utils ; </%> ", "before_line": " namespace service _ stack _ clients ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ <@>"]}, {"before_ctx": " ", "before_line": " namespace service _ stack _ clients ", "after_ctx": " <%> <-> : base ( ) </%>", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": "<%> <-> using service _ stack ; </%> ", "before_line": " using service _ stack _ utils ; namespace service _ stack _ clients ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ utils"]}, {"before_ctx": "<%> <-> try { </%> <%> <-> } catch ( exception ex ) { var msg = STR . fmt ( operation _ type , query _ string , ex ) ; throw new serialization _ exception ( msg ) ; } </%> ", "before_line": " try { return key _ value _ data _ contract _ deserializer . instance . parse ( http _ req . form _ data , operation _ type ) ; } catch ( exception ex ) { throw new serialization _ exception ( STR + http _ req . form _ data , ex ) ; } ", "after_ctx": " ", "after_line": "return key _ value _ data _ contract _ deserializer . instance . parse ( http _ req . form _ data , operation _ type ) ;", "predictions": ["return key _ value _ data _ contract _ deserializer . instance . int ( empty _ text . if . int ( empty _ name property or ) property ) = empty = ! if try ) ;"]}, {"before_ctx": "<%> <+> using service _ stack _ mini _ profiler _ data ; </%> <%> <*> mvc -> service _ stack </%> ", "before_line": " public mini _ profiler profiler { get ; private set ; } ", "after_ctx": " <%> <-> mini _ </%>", "after_line": "public profiler profiler { get ; private set ; }", "predictions": ["public profiler profiler { get ; private = = = = = = handler task"]}, {"before_ctx": "<%> <+> profiler . </%> ", "before_line": " internal mini _ profiler profiler { get ; private set ; } ", "after_ctx": " ", "after_line": "internal profiler profiler { get ; private set ; }", "predictions": ["internal mini _ profiler mini _ profiler send send send send send send { { data <%> base . type ) )"]}, {"before_ctx": "<%> <-> mini _ </%> ", "before_line": " storage = new storage . http _ runtime _ cache _ storage ( time _ span . from _ days ( 1 ) ) ; ", "after_ctx": " ", "after_line": "storage = new http _ runtime _ cache _ storage ( time _ span . from _ days ( 1 ) ) ;", "predictions": ["storage = new storage _ runtime _ </%> _ url ( . <@> _ <%> . <+> _ </@> <*> 1 </%> </%> web task web _ async http _ runtime _ task _ task all _ </%> . _ ; ) async"]}, {"before_ctx": " ", "before_line": " container . register < i _ cache _ client > ( service _ extensions . default _ cache ) ; ", "after_ctx": " <%> <-> service _ extensions . </%>", "after_line": "container . register < i _ cache _ client > ( default _ cache ) ;", "predictions": ["container . register < i _ cache _ from > 1 <%> ,"]}, {"before_ctx": "<%> <-> service _ extensions . </%> ", "before_line": " container . register ( service _ extensions . default _ cache ) ; ", "after_ctx": " ", "after_line": "container . register ( default _ cache ) ;", "predictions": ["container . register ( default _ cache <%> <%> <-> <-> <-> ) ;"]}, {"before_ctx": "<%> <*> ; -> . sanitize _ o _ auth _ url ( ) ; </%> ", "before_line": " { STR , photo _ url . sanitize _ o _ auth _ url ( ) } , ", "after_ctx": " ", "after_line": "{ STR , photo _ url } ,", "predictions": ["{ STR , photo _ url . <%> _ < _ -> _ . ) ,"]}, {"before_ctx": "<%> <*> operation -> application </%> <%> <*> operation -> application </%> ", "before_line": " service _ model _ finder = model _ info . instance , ", "after_ctx": " <%> <*> call -> operation </%> <%> <*> call -> operation </%> <%> <*> operation -> application </%> <%> <*> call -> operation </%> <%> <*> operation -> application </%>", "after_line": "service _ model _ finder = service _ model _ finder . instance ,", "predictions": ["service _ model _ finder = model _ info . finder ,"]}, {"before_ctx": "<%> <*> public bool include _ all _ types { get ; set ; } public xsd _ metadata ( service _ metadata metadata , bool flash = false , bool include _ all _ types = true ) -> public xsd _ metadata ( service _ metadata metadata , bool flash = false ) </%> <%> <-> include _ all _ types = include _ all _ types ; </%> ", "before_line": " if ( include _ all _ types ) all _ types . add _ range ( metadata . response _ types ) ; ", "after_ctx": " ", "after_line": "all _ types . add _ range ( metadata . response _ types ) ;", "predictions": ["if ( include _ all _ types ) all _ types . add _ <+> res return . </@> _ ( async . async ) return . </@> _ ( async end async ;"]}, {"before_ctx": "<%> <-> string property _ name = null ; string property _ text _ value = null ; </%> ", "before_line": " foreach ( var pair in key _ value _ pairs . where ( x = > ! string . is _ null _ or _ empty ( x . value ) ) ) ", "after_ctx": " <%> <-> try </%> <%> <+> if ( ! string . is _ null _ or _ empty ( pair . value ) ) </%> <%> <-> property _ name = pair . key ; property _ text _ value = pair . value ; if ( ! property _ setter _ map . try _ get _ value ( property _ name , out property _ serializer _ entry ) ) { if ( property _ name = = STR ) { int version ; </%>", "after_line": "foreach ( var pair in key _ value _ pairs )", "predictions": ["foreach ( var pair in key _ value _ pairs )"]}, {"before_ctx": "<%> <*> res . write ( async _ dto . to _ json ( ) ) ; res . end _ request ( skip _ headers : true ) ; return type _ constants . empty _ task ; -> return res . write _ async ( async _ dto . to _ json ( ) ) </%> <%> <+> . continue _ with ( t = > res . end _ request ( skip _ headers : true ) ) ; </%> ", "before_line": " res . write _ error ( new argument _ exception ( STR + pos ) ) ; return type _ constants . empty _ task ; ", "after_ctx": " ", "after_line": "return res . write _ error ( new argument _ exception ( STR + pos ) ) ;", "predictions": ["res . write _ error ( new argument _ exception ( STR + assembly <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> STR <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> < , ,"]}, {"before_ctx": "<%> <*> void -> task </%> <%> <+> _ async </%> ", "before_line": " wsdl . execute ( http _ req , http _ res ) ; return ; ", "after_ctx": " <%> <*> ; -> type _ constants . empty _ task ; </%> <%> <+> return type _ constants . empty _ task ; </%>", "after_line": "return wsdl . execute ( http _ req , http _ res ) ;", "predictions": ["return http _ req ;"]}, {"before_ctx": "<%> <*> void -> task </%> <%> <+> _ async </%> ", "before_line": " wsdl . execute ( http _ req , http _ res ) ; return ; ", "after_ctx": " <%> <*> ; -> type _ constants . empty _ task ; </%> <%> <+> return type _ constants . empty _ task ; </%>", "after_line": "return wsdl . execute ( http _ req , http _ res ) ;", "predictions": ["return http _ req ;"]}, {"before_ctx": "<%> <*> app _ host app -> static i </%> <%> <*> host -> log log </%> <%> <*> test _ fixture -> public integration </%> <%> <*> set -> test </%> <%> <*> up public virtual void test -> base ( ) : base ( STR , typeof ( movie </%> <%> <*> fixture -> rest </%> <%> <*> set _ up ( -> service ) . assembly </%> <%> <*> app _ host = new app _ host ( ) ; app _ host . init ( ) ; -> log _ manager . log _ factory = new debug _ log _ factory ( ) ; </%> <%> <+> log = log _ manager . get _ logger ( get _ type ( ) ) ; instance = null ; init ( ) ; </%> ", "before_line": " app _ host . start ( base _ url ) ; ", "after_ctx": " <%> <+> } public override void configure ( container container ) { container . register < i _ resource _ manager > ( new configuration _ resource _ manager ( ) ) ; container . register ( c = > new example _ config ( c . resolve < i _ resource _ manager > ( ) ) ) ; </%>", "after_line": "start ( base _ url ) ;", "predictions": ["app _ host . start ( base _ url ) ;"]}, {"before_ctx": " ", "before_line": " task < http _ web _ response > get _ async ( i _ return _ void request _ dto ) ; ", "after_ctx": " <%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%>", "after_line": "task get _ async ( i _ return _ void request _ dto ) ;", "predictions": ["http _ web _ response get _ , http _ </@> return async _ dto ;"]}, {"before_ctx": "<%> <*> task < http _ web _ response > -> task </%> ", "before_line": " task < http _ web _ response > delete _ async ( i _ return _ void request _ dto ) ; ", "after_ctx": " <%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%>", "after_line": "task delete _ async ( i _ return _ void request _ dto ) ;", "predictions": ["task delete _ async ( i _ return _ void request _ dto . ."]}, {"before_ctx": "<%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%> ", "before_line": " task < http _ web _ response > post _ async ( i _ return _ void request _ dto ) ; ", "after_ctx": " <%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%>", "after_line": "task post _ async ( i _ return _ void request _ dto ) ;", "predictions": ["task post _ async ( i _ return _ void request _ dto <-> <-> msg _ return <-> _ async <-> ) </%>"]}, {"before_ctx": "<%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%> ", "before_line": " task < http _ web _ response > put _ async ( i _ return _ void request _ dto ) ; ", "after_ctx": " <%> <*> task < http _ web _ response > -> task </%>", "after_line": "task put _ async ( i _ return _ void request _ dto ) ;", "predictions": ["task put _ async ( i _ return _ void request _ dto ) ;"]}, {"before_ctx": "<%> <*> task < http _ web _ response > -> task </%> <%> <*> task < http _ web _ response > -> task </%> ", "before_line": " task < http _ web _ response > custom _ method _ async ( string http _ verb , i _ return _ void request _ dto ) ; ", "after_ctx": " ", "after_line": "task custom _ method _ async ( string http _ verb , i _ return _ void request _ dto ) ;", "predictions": ["task custom _ method _ async ( string http _ verb , i _ return _ void </@> _ -> . types ) </%>"]}, {"before_ctx": " ", "before_line": " public virtual task < http _ web _ response > custom _ method _ async ( string http _ verb , i _ return _ void request _ dto ) ", "after_ctx": " <%> <*> http _ web _ response -> byte [ ] </%>", "after_line": "public virtual task custom _ method _ async ( string http _ verb , i _ return _ void request _ dto )", "predictions": ["public virtual http _ web _ response = = string _ is _ async . . string )"]}, {"before_ctx": "<%> <+> var log = endpoint _ host . config . log _ factory . get _ logger ( typeof ( xml _ handler _ base ) ) ; </%> ", "before_line": " operation _ type , request . query _ string , ex . message ) ; ", "after_ctx": " ", "after_line": "operation _ type , request . query _ string , ex ) ;", "predictions": ["operation _ type , ex . query _ string . res <%> <%> ; _ type task response _ type http task"]}, {"before_ctx": "<%> <+> var log = endpoint _ host . config . log _ factory . get _ logger ( typeof ( xml _ handler _ base ) ) ; </%> ", "before_line": " operation _ type , deserializer , form _ data , ex . message ) ; ", "after_ctx": " ", "after_line": "operation _ type , deserializer , form _ data , ex ) ;", "predictions": ["operation _ type , deserializer , form _ <@> > > get _ logger ; ; -> <@> > response _ type response response response response response response ) response ;"]}, {"before_ctx": "<%> <+> using microsoft _ extensions _ configuration ; using service _ stack _ configuration ; </%> ", "before_line": " using microsoft _ extensions _ configuration ; namespace service _ stack _ configuration ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace microsoft _ extensions _ configuration"]}, {"before_ctx": "<%> <+> var init _ collections = feature . should _ initialize _ collections ( type , config . initialize _ collections ) ; </%> ", "before_line": " init _ collections : ! type . is _ interface ( ) & & config . initialize _ collections , ", "after_ctx": " ", "after_line": "init _ collections : ! type . is _ interface ( ) & & init _ collections ,", "predictions": ["init _ collections : ! type . message _ logger ,"]}, {"before_ctx": "<%> <+> var init _ collections = feature . should _ initialize _ collections ( type , config . initialize _ collections ) ; </%> ", "before_line": " init _ collections : ! type . is _ interface ( ) & & config . initialize _ collections , ", "after_ctx": " ", "after_line": "init _ collections : ! type . is _ interface ( ) & & init _ collections ,", "predictions": ["init _ collections : ! type . handler ( ( <+> ) , </%> <*> )"]}, {"before_ctx": "<%> <+> throw service _ ex ; </%> ", "before_line": " private web _ request send _ request ( object request , string request _ uri ) ", "after_ctx": " ", "after_line": "private web _ request send _ request ( string request _ uri , object request )", "predictions": ["private web _ request send _ request ; string configuration _ uri )"]}, {"before_ctx": "<%> <-> sync _ reply _ </%> ", "before_line": " var client = send _ request ( request , request _ uri ) ; ", "after_ctx": " ", "after_line": "var client = send _ request ( request _ uri , request ) ;", "predictions": ["var client = send _ request ( request , request _ string using url </%> & collections _ ex return ( ;"]}, {"before_ctx": "<%> <+> private static readonly encoding encoding = encoding . ut ; </%> ", "before_line": " using ( var xw = new xml _ text _ writer ( ms , encoding . ut ) ) ", "after_ctx": " ", "after_line": "using ( var xw = new xml _ text _ writer ( ms , encoding ) )", "predictions": ["using ( var xw = new xml _ _ stack stack = <%> . log ; using xw . return web < web response < _ < web > < _ < _ </@> metadata _ _ ex ) )"]}, {"before_ctx": " ", "before_line": " using ( var xw = new xml _ text _ writer ( deflate _ stream , encoding . ut ) ) ", "after_ctx": " <%> <-> . ut </%>", "after_line": "using ( var xw = new xml _ text _ writer ( deflate _ stream , encoding ) )", "predictions": ["using ( var xw = new xml _ private null -> ; create _ context <%> }"]}, {"before_ctx": "<%> <-> . ut </%> ", "before_line": " using ( var xw = new xml _ text _ writer ( stream , encoding . ut ) ) ", "after_ctx": " ", "after_line": "using ( var xw = new xml _ text _ writer ( stream , encoding ) )", "predictions": ["using ( var xw = new xml _ stream ; content private ; </%> )"]}, {"before_ctx": "<%> <*> { typeof ( profiler ) , STR } , { typeof ( timing ) , STR } , { typeof ( sql _ timing ) , STR } , { typeof ( sql _ timing _ parameter ) , STR } -> { typeof ( profiler ) , STR } </%> ", "before_line": " var result = enable _ batch _ selects ? load _ in _ batch ( conn , id _ parameter ) : load _ individually ( conn , id _ parameter ) ; ", "after_ctx": " ", "after_line": "var result = load _ individually ( conn , id _ parameter ) ;", "predictions": ["var result = load _ individually ( conn , id _ parameter ) ;"]}, {"before_ctx": "<%> <-> var db _ cmd = db _ conn . create _ command ( ) ; </%> ", "before_line": " return db _ factory . exec ( db _ cmd = > db _ cmd . select < movie > ( ) ) ; ", "after_ctx": " ", "after_line": "return db _ cmd . select < movie > ( ) ;", "predictions": ["return db _ cmd . select < movie access movie format using ) ; ; -> </%> </%> <+> _ </%> <%> <+> _ <-> operation {"]}, {"before_ctx": " ", "before_line": " public task assign _ to ( template _ scope _ context scope , object value , string arg _ name ) ", "after_ctx": " <%> <*> type -> ignore </%> <%> <*> constants -> result </%> <%> <*> empty _ task -> value </%>", "after_line": "public object assign _ to ( template _ scope _ context scope , object value , string arg _ name )", "predictions": ["public string assign _ to ( template _ [ _ context : object , name using response , <-> arg case queue {"]}, {"before_ctx": "<%> <+> page . init ( ) ; } </%> <%> <*> void -> template _ pages _ context </%> ", "before_line": " template _ filters . add ( filter . init ( ) ) ; ", "after_ctx": " <%> <-> . init ( ) </%> <%> <+> return this ; </%>", "after_line": "template _ filters . add ( filter ) ;", "predictions": ["template _ filters . add ( filter ) ,"]}, {"before_ctx": "<%> <-> . init ( ) </%> ", "before_line": " code _ pages . add ( code _ page . init ( ) ) ; ", "after_ctx": " <%> <+> return this ; </%>", "after_line": "code _ pages . add ( code _ page ) ;", "predictions": ["code _ pages . add ( code _ response -> _ <@> ( <-> : ) . ( . ( . , <%> -> ( ( ( ( <%> . request <-> ( ( ( ( <-> <-> ( ( ( ( ( ( ( ( ( ( ( ( ( <-> <-> page ( ( ( ( page _ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ("]}, {"before_ctx": " ", "before_line": " if ( is _ alphanum ( the _ b ) ) { action ( 1 ) ; } else { action ( 2 ) ; } break ; ", "after_ctx": " <%> <*> case '\\n' -> default </%> <%> <-> switch ( the _ b ) { case '{' : case '[' : case '(' : case '+' : case '-' : </%>", "after_line": "action ( 1 ) ;      break ;", "predictions": ["action ( 2 ) ;"]}, {"before_ctx": "<%> <+> concurrent _ </%> <%> <+> concurrent _ </%> ", "before_line": " lock ( this . rwlock ) return this . memory . try _ get _ value ( key , out entry ) ; ", "after_ctx": " <%> <-> lock ( this . rwlock ) </%>", "after_line": "return this . memory . try _ get _ value ( key , out entry ) ;", "predictions": ["lock ( rwlock ) return memory . try db <-> . exception } out . </%> using </%> ? : : ) ?"]}, {"before_ctx": "<%> <-> lock ( this . rwlock ) </%> ", "before_line": " lock ( this . rwlock ) this . memory [ key ] = entry ; ", "after_ctx": " ", "after_line": "this . memory [ key ] = entry ;", "predictions": ["memory [ key ] = entry ;"]}, {"before_ctx": "<%> <+> } </%> ", "before_line": " string serialized _ dto = host _ context . content _ types . serialize _ to _ string ( request , response _ dto ) ; ", "after_ctx": " ", "after_line": "string serialized _ dto = serialize _ to _ string ( request , response _ dto ) ;", "predictions": ["string serialized _ dto = serialize _ to _ ) . serialize <%> return response _ collections _ string ( container _ context _ ) <-> type null }"]}, {"before_ctx": "<%> <-> params </%> <%> <*> [ ] filters -> filter </%> <%> <*> filters -> filter </%> <%> <*> [ ] filters -> filter </%> ", "before_line": " foreach ( var filter in filters ) filter . invoke ( container ) . invoke ( request , response , dto ) ; ", "after_ctx": " ", "after_line": "filter . invoke ( container ) . invoke ( request , response , dto ) ;", "predictions": ["foreach ( var filter in filters ) filter action ;"]}, {"before_ctx": " ", "before_line": " var init _ collections = feature . should _ initialize _ collections ( type , config . initialize _ collections ) ; if ( config . add _ implicit _ version = = null & & ! init _ collections ) ", "after_ctx": " <%> <*> init -> config . initialize </%>", "after_line": "if ( config . add _ implicit _ version = = null & & ! config . initialize _ collections )", "predictions": ["if ( type . add _ implicit _ </%> </%> . queue _ from _ </%> . thread _ initialize _ ) ;"]}, {"before_ctx": " ", "before_line": " var init _ collections = feature . should _ initialize _ collections ( type , config . initialize _ collections ) ; if ( config . add _ implicit _ version = = null & & ! init _ collections ) ", "after_ctx": " <%> <*> init -> config . initialize </%>", "after_line": "if ( config . add _ implicit _ version = = null & & ! config . initialize _ collections )", "predictions": ["if ( type . add _ implicit _ collections </%> : <-> ( type null ) _ ) using access using access <@> access msg ( -> ( ; ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ( ; ("]}, {"before_ctx": "<%> <*> return operation ! = null ? operation . request _ type . make _ array _ type ( ) : null ; -> return operation ? . request _ type . make _ array _ type ( ) ; </%> ", "before_line": " return operation ! = null ? operation . request _ type : null ; ", "after_ctx": " <%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%>", "after_line": "return operation ? . request _ type ;", "predictions": ["return operation . request _ type ;"]}, {"before_ctx": "<%> <*> return operation ! = null ? operation . request _ type . make _ array _ type ( ) : null ; -> return operation ? . request _ type . make _ array _ type ( ) ; </%> <%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%> ", "before_line": " return operation ! = null ? operation . service _ type : null ; ", "after_ctx": " <%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%>", "after_line": "return operation ? . service _ type ;", "predictions": ["return operation . service _ type ;"]}, {"before_ctx": "<%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%> ", "before_line": " return operation ! = null ? operation . service _ type : null ; ", "after_ctx": " <%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%>", "after_line": "return operation ? . service _ type ;", "predictions": ["return operation ? . service _ type ;"]}, {"before_ctx": "<%> <-> ! = null </%> <%> <-> operation </%> <%> <-> : null </%> ", "before_line": " return operation ! = null ? operation . response _ type : null ; ", "after_ctx": " ", "after_line": "return operation ? . response _ type ;", "predictions": ["return operation ? . response _ type ;"]}, {"before_ctx": " ", "before_line": " private readonly system . net . http _ listener _ response response ; ", "after_ctx": " <%> <-> public object original _ response { get { return response ; } </%>", "after_line": "private readonly http _ listener _ response response ;", "predictions": ["private readonly http _ listener _ response response ;"]}, {"before_ctx": " ", "before_line": " readonly bool [ ] components _ with _ separators ; private readonly string rest _ path ; private readonly string allowed _ verbs ; private readonly bool allows _ all _ verbs ; ", "after_ctx": " <%> <-> public string [ ] verbs { </%>", "after_line": "private readonly bool [ ] components _ with _ separators ;", "predictions": ["readonly string rest _ path ; private readonly <%> <@> <%> ) . _ allows _ all ("]}, {"before_ctx": " ", "before_line": " throw new not _ supported _ exception ( string . format ( STR ) ) ; ", "after_ctx": " <%> <-> string . format ( </%> <%> <*> STR , attr . path , request _ type . get _ operation _ name ( ) ) -> $ STR </%>", "after_line": "throw new not _ supported _ exception ( STR ) ;", "predictions": ["throw new not _ supported _ exception ( <-> collections config collections ( ; ) ) ? operation id id id id id id ;"]}, {"before_ctx": " ", "before_line": " public static funq . container container ", "after_ctx": " <%> <*> null -> new container ( ) </%>", "after_line": "public static container container", "predictions": ["public static container container"]}, {"before_ctx": "<%> <-> } </%> <%> <*> using ( request _ access ( ) ) -> var now = date _ time . utc _ now ; </%> <%> <+> while ( time _ out = = null | | ( date _ time . utc _ now - now ) < time _ out . value ) </%> <%> <*> now -> basic _ msg </%> <%> <*> date -> get </%> <%> <*> time . utc -> message ( queue </%> <%> <*> now ; while -> name , no _ ack : false ) ; if </%> <%> <*> time -> basic </%> <%> <*> out = -> msg ! </%> <%> <*> | | ( date _ time . utc _ now - now ) < time _ out . value ) -> ) </%> ", "before_line": " var basic _ msg = get _ message ( queue _ name , no _ ack : false ) ; if ( basic _ msg ! = null ) { return basic _ msg . to _ message < t > ( ) ; } thread . sleep ( NUM ) ; ", "after_ctx": " <%> <*> return null -> thread . sleep ( NUM ) </%> <%> <+> return null ; </%> <%> <-> using ( request _ access ( ) ) { </%>", "after_line": "return basic _ msg . to _ message < t > ( ) ;", "predictions": ["return basic _ msg . to _ message < t > ( ) ;"]}, {"before_ctx": "<%> <-> var basic _ msg = get _ message ( queue _ name , no _ ack : false ) ; if ( basic _ msg ! = null ) { </%> <%> <-> } thread . sleep ( NUM ) ; </%> <%> <*> return null -> thread . sleep ( NUM ) </%> <%> <+> return null ; </%> ", "before_line": " using ( request _ access ( ) ) { var basic _ msg = get _ message ( queue _ name , no _ ack : false ) ; return basic _ msg . to _ message < t > ( ) ; } ", "after_ctx": " ", "after_line": "var basic _ msg = get _ message ( queue _ name , no _ ack : false ) ; return basic _ msg . to _ message < t > ( ) ;", "predictions": ["var basic _ msg = get _ message ( queue _ name , no _ ack date | | . using _ ; ) <%> <%> <%> ( ( thread _ queue ) ( ) <%> ( ( return _ queue NUM ( ( request _ <*> no _ ; ( ( request _ <*> NUM time _ message ) ) ( ( . request _ <*> NUM ( ( request _ <*> no _ ; ( ( request _ <*> NUM ( return ( ( no _ ack date _ message date date _ ack date date _ ack"]}, {"before_ctx": "<%> <*> using ( request _ access ( ) ) -> var msg _ result = mq _ response as basic _ get _ result ; </%> <%> <+> if ( msg _ result ! = null ) </%> ", "before_line": " var msg _ result = mq _ response as basic _ get _ result ; if ( msg _ result ! = null ) { return msg _ result . to _ message < t > ( ) ; } return ( i _ message < t > ) mq _ response ; ", "after_ctx": " <%> <+> return ( i _ message < t > ) mq _ response ; </%>", "after_line": "return msg _ result . to _ message < t > ( ) ;", "predictions": ["return msg _ result . to _ message < t > ( ) ;"]}, {"before_ctx": " ", "before_line": " using ( request _ access ( ) ) { serialize _ request _ to _ stream ( request _ context , request , stream ) ; } ", "after_ctx": " <%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%>", "after_line": "serialize _ request _ to _ stream ( request _ context , request , stream ) ;", "predictions": ["serialize _ request _ to _ stream ( null _ context config = ( . context ) ; operation operation </%> return </%> operation ) load ;"]}, {"before_ctx": "<%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%> ", "before_line": " using ( request _ access ( ) ) { return stream _ deserializer ( type , from _ stream ) ; } ", "after_ctx": " <%> <-> using ( request _ access ( ) ) </%>", "after_line": "return stream _ deserializer ( type , from _ stream ) ;", "predictions": ["return stream _ deserializer ( type , from collections . <%> <%> ; ) {"]}, {"before_ctx": "<%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%> ", "before_line": " using ( request _ access ( ) ) { var message _ bytes = this . read _ write _ client . r _ pop ( queue _ name ) ; return message _ bytes . to _ message < t > ( ) ; } ", "after_ctx": " ", "after_line": "var message _ bytes = this . read _ write _ client . r _ pop ( queue _ name ) ; return message _ bytes . to _ message < t > ( ) ;", "predictions": ["var message _ bytes = read _ write _ </@> json object _ <@> <%> typeof ; . ; ;"]}, {"before_ctx": " ", "before_line": " using ( request _ access ( ) ) { return json _ object . parse ( json ) ; } ", "after_ctx": " <%> <+> obsolete _ no _ longer _ required _ use _ json _ from _ json </%> <%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%> <%> <+> obsolete _ no _ longer _ required _ use _ obj _ to _ json </%>", "after_line": "return json _ object . parse ( json ) ;", "predictions": ["return json _ object . parse ( json ) -> ;"]}, {"before_ctx": "<%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%> <%> <+> obsolete _ no _ longer _ required _ use _ json _ from _ json </%> ", "before_line": " using ( request _ access ( ) ) { return json . from _ json < t > ( ) ; } ", "after_ctx": " <%> <+> obsolete _ no _ longer _ required _ use _ obj _ to _ json </%> <%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%>", "after_line": "return json . from _ json < t > ( ) ;", "predictions": ["return json . from _ json < t > ( ) ;"]}, {"before_ctx": "<%> <+> obsolete _ no _ longer _ required _ use _ json _ from _ json </%> <%> <-> using ( request _ access ( ) ) { </%> <%> <-> } </%> <%> <+> obsolete _ no _ longer _ required _ use _ obj _ to _ json </%> ", "before_line": " using ( request _ access ( ) ) { return o . to _ json ( ) ; } ", "after_ctx": " ", "after_line": "return o . to _ json ( ) ;", "predictions": ["return o . to _ json ;"]}, {"before_ctx": "<%> <+> var utf _ bytes = inflate _ bytes ( gz _ buffer ) ; return encoding . ut . get _ string ( utf _ bytes , 0 , utf _ bytes . length ) ; } public byte [ ] inflate _ bytes ( byte [ ] gz _ buffer ) { </%> ", "before_line": " var utf _ bytes = zip _ stream . read _ fully ( ) ; return encoding . ut . get _ string ( utf _ bytes , 0 , utf _ bytes . length ) ; ", "after_ctx": " ", "after_line": "return zip _ stream . read _ fully ( ) ;", "predictions": ["return zip _ stream . read ) value ;"]}, {"before_ctx": "<%> <+> var utf _ bytes = g _ unzip _ bytes ( gz _ buffer ) ; return encoding . ut . get _ string ( utf _ bytes , 0 , utf _ bytes . length ) ; } public byte [ ] g _ unzip _ bytes ( byte [ ] gz _ buffer ) { </%> ", "before_line": " var utf _ bytes = zip _ stream . read _ fully ( ) ; return encoding . ut . get _ string ( utf _ bytes , 0 , utf _ bytes . length ) ; ", "after_ctx": " ", "after_line": "return zip _ stream . read _ fully ( ) ;", "predictions": ["return zip _ stream . public _ get _ get _ fully : host </%> http <%> http stack ) expression ;"]}, {"before_ctx": "<%> <+> using service _ stack _ support _ web _ host ; </%> ", "before_line": " using service _ stack _ web _ host _ endpoints _ support ; namespace service _ stack _ web _ host _ endpoints ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ . _ ( _ endpoints"]}, {"before_ctx": "<%> <+> using service _ stack _ web _ host ; </%> ", "before_line": " namespace service _ stack _ cors ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": "<%> <-> using service _ stack _ common ; </%> <%> <-> using service _ stack _ service _ host ; using service _ stack _ text ; </%> ", "before_line": " namespace service _ stack _ web _ host _ endpoints _ support ", "after_ctx": " ", "after_line": "namespace service _ stack _ support _ web _ host", "predictions": ["namespace service _ stack _ metadata _ <+> _ )"]}, {"before_ctx": "<%> <-> using service _ stack _ common ; </%> <%> <+> _ support </%> <%> <*> service -> web </%> <%> <+> using service _ stack _ web _ host ; using service _ stack _ web _ host _ asp _ net ; using service _ stack _ web _ host _ endpoints ; </%> ", "before_line": " using http _ request _ wrapper = service _ stack . web _ host . endpoints . wrappers . http _ request _ wrapper ; namespace service _ stack _ web _ host _ endpoints ", "after_ctx": " <%> <*> public class service _ stack _ http _ handler _ factory : i _ http _ handler _ factory -> public class http _ handler _ factory : i _ http _ handler _ factory </%>", "after_line": "namespace service _ stack", "predictions": ["namespace http _ request _ body this this _ ( </%> _ only new context ) namespace new exception _ )"]}, {"before_ctx": "<%> <+> using service _ stack _ metadata ; </%> <%> <+> _ support </%> <%> <*> service -> web </%> ", "before_line": " namespace service _ stack _ web _ host _ endpoints ", "after_ctx": " <%> <*> endpoint -> app </%> <%> <*> endpoint -> app </%> <%> <*> endpoint -> app </%>", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ end _ <@> _ <%>"]}, {"before_ctx": "<%> <-> using system _ web ; </%> ", "before_line": " using service _ stack _ service _ host ; namespace service _ stack _ web _ host _ endpoints _ support ", "after_ctx": " ", "after_line": "namespace service _ stack _ support _ web _ host", "predictions": ["namespace service _ stack _ host _ stack _ support"]}, {"before_ctx": "<%> <+> using service _ stack _ metadata ; </%> <%> <+> _ support </%> <%> <*> service -> web </%> ", "before_line": " using service _ stack _ web _ host _ endpoints _ formats ; using service _ stack _ web _ host _ endpoints _ support ; using service _ stack _ web _ host _ endpoints _ utils ; namespace service _ stack _ web _ host _ endpoints ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ ) _ <%> _ endpoints _ get"]}, {"before_ctx": " ", "before_line": " { var digest _ helper = new digest _ auth _ functions ( ) ; digest _ hash = digest _ helper . create _ ha ( new _ user . user _ name , digest _ auth _ provider . realm , password ) ; } ", "after_ctx": " <%> <+> new _ user . digest _ ha _ hash = digest _ hash ; </%>", "after_line": "digest _ hash = new digest _ auth _ functions ( ) . create _ ha ( new _ user . user _ name , digest _ auth _ provider . realm , password ) ;", "predictions": ["digest _ hash = digest _ helper ) <%> session using bytes _ byte ) ) enum ) enum . is _ > host <%> <%> _ memory result , _ auth _ return = . value date password _ auth _ return = . value date password _ auth _ } ) enum password { password ) { ]"]}, {"before_ctx": "<%> <+> filter _ session ( </%> <%> <+> , session _ id ) </%> ", "before_line": " if ( session _ id = = cached _ session . id ) return cached _ session ; if ( log . is _ debug _ enabled ) { log . debug ( STR . fmt ( cached _ session . id , session _ id ) ) ; } ", "after_ctx": " <%> <+> filter _ session ( </%> <%> <+> ) , session _ id </%>", "after_line": "return cached _ session ;", "predictions": ["log . debug ( STR ) <+> [ fmt . ( ; ( ) , ) </%> is _ public user _ public string string ) else <%>"]}, {"before_ctx": "<%> <-> private static cache _ entry normalize _ dates ( cache _ entry result ) { if ( result = = null ) return null ; if ( result . expiry _ date ! = null & & result . expiry _ date . value . kind = = date _ time _ kind . local ) result . expiry _ date = result . expiry _ date . value . to _ universal _ time ( ) ; if ( result . created _ date . kind = = date _ time _ kind . local ) result . created _ date = result . created _ date . to _ universal _ time ( ) ; if ( result . modified _ date . kind = = date _ time _ kind . local ) result . modified _ date = result . modified _ date . to _ universal _ time ( ) ; return result ; } </%> ", "before_line": " var cache = normalize _ dates ( db . single _ by _ id < cache _ entry > ( key ) ) ; ", "after_ctx": " ", "after_line": "var cache = db . single _ by _ id < cache _ entry > ( key ) ;", "predictions": ["var cache = normalize _ u return db ( db ( db ) ) ) ) ) value value ( readonly | <+> , private { db _ { . to _ { . to . to . to . to _ dates readonly <+> ( <+> ( <+> ( , context func context ) context ) context ) context . code _ name <*> , args context . created _ </%> <*> , </%> _ ;"]}, {"before_ctx": "<%> <*> return evaluate _ binding ( expr . to _ string _ segment ( ) , scope _ context ) ; } public object evaluate _ binding ( string _ segment expr , template _ scope _ context scope _ context ) { if ( expr . is _ null _ or _ white _ space ( ) ) -> if ( string . is _ null _ or _ white _ space ( expr ) ) </%> ", "before_line": " return get _ value ( expr . value , scope _ context ) ; ", "after_ctx": " <%> <*> ) -> . to _ string _ segment ( ) ) </%> <%> <+> . to _ string _ segment ( ) </%>", "after_line": "return get _ value ( expr , scope _ context ) ;", "predictions": ["return get _ value ( </%> using <%> using web string input input read ) context = < static . <@> _ context = result date date enum enum , . name _ ) < string , . name _ ) < object _ name ) < date , . = , }"]}, {"before_ctx": "<%> <*> failure . error _ code = ( error _ code _ source ! = null ) ? error _ code _ source . get _ string ( context . instance ) : original _ error _ source . resource _ name ; -> failure . error _ code = ( error _ code _ source ! = null ) </%> <%> <+> ? error _ code _ source . get _ string ( context . instance ) : get _ type ( ) . name ; </%> ", "before_line": " failure . custom _ state = custom _ state _ provider ( context . instance ) ; ", "after_ctx": " <%> <-> if ( this . custom _ format _ args ! = null & & </%> <%> <*> this . custom -> object string _ source _ context = error _ source is i _ context _ aware </%> <%> <*> format -> string </%> <%> <*> args -> source ? context : context </%> <%> <*> count > 0 ) { var additional _ arguments -> instance ; string error </%> <%> <*> custom _ format -> context . message </%> <%> <*> args -> formatter </%> <%> <*> select ( func = > func -> build _ message </%> <%> <*> context . instance , context -> error _ source </%> <%> <*> property -> get </%> <%> <*> value ) ) . to -> string ( string _ source </%> <%> <*> array ( -> context ) </%> <%> <-> context . message _ formatter . append _ additional _ arguments ( additional _ arguments ) ; } </%>", "after_line": "failure . custom _ state = custom _ state _ provider ( context ) ;", "predictions": ["failure . custom _ state = custom _ state _ provider ( context . instance ) ;"]}, {"before_ctx": " ", "before_line": " if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; ", "after_ctx": " <%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ; </%>", "after_line": "return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ;", "predictions": ["if ( typed _ value <+> , , < typed _ </%> stack _ = ) { <%> _ else , char _ type ) ;"]}, {"before_ctx": "<%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ; </%> ", "before_line": " if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; ", "after_ctx": " <%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ; </%>", "after_line": "return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ;", "predictions": ["return false ;"]}, {"before_ctx": "<%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ; </%> <%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ; </%> ", "before_line": " if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; ", "after_ctx": " <%> <*> if ( typed _ value < 0 ) { return false ; } return evaluate _ flag _ enum _ values ( convert . to _ u _ int ( typed _ value ) , enum _ type ) ; -> return evaluate _ flag _ enum _ values ( convert . to _ int ( typed _ value ) , enum _ type ) ; </%>", "after_line": "return evaluate _ flag _ enum _ values ( typed _ value , enum _ type ) ;", "predictions": ["return false ;"]}, {"before_ctx": "<%> <+> } else { break ; } } if ( current _ expr = = null | | current _ expr . node _ type ! = expression _ type . parameter ) { return null ; } </%> ", "before_line": " private static member _ expression remove _ unary ( expression to _ unwrap ) { ", "after_ctx": " <%> <-> as member _ expression </%> <%> <-> as member _ expression </%> <%> <*> public static string split _ pascal _ case ( this string input ) { if ( string . is _ null _ or _ empty ( input ) ) { -> public static string split _ pascal _ case ( this string input ) { </%> <%> <+> if ( string . is _ null _ or _ empty ( input ) ) </%>", "after_line": "private static expression remove _ unary ( expression to _ unwrap ) {", "predictions": ["private static member _ expression out out out param _ sharp param _ unary ( value ) ;"]}, {"before_ctx": " ", "before_line": " namespace service _ stack _ fluent _ validation { using system ; using system _ linq ; using service _ stack _ model ; using service _ stack _ validation ; using system _ collections _ generic ; using service _ stack _ fluent _ validation _ results ; using service _ stack _ text ; ", "after_ctx": " <%> <*> public class validation _ exception : argument _ exception , i _ response _ status _ convertible { -> serializable </%> <%> <+> public partial class validation _ exception { </%>", "after_line": "namespace service _ stack _ fluent _ validation { using system ;    using system _ collections _ generic ; using results ; using system _ linq ;", "predictions": ["using system ; using system _ </%> bytes bytes bytes _ expr _ model ; user _ : _ ; service stack _ < _ <%> _ return _ results ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ;"]}, {"before_ctx": "<%> <+> plugins . add ( new server _ html _ feature ( ) ) ; </%> ", "before_line": " template : alt - layout . html ", "after_ctx": " ", "after_line": "layout : alt - layout . html", "predictions": ["template : template - layout host host host host ;"]}, {"before_ctx": "<%> <+> obsolete _ use _ normal _ registration _ feature _ and _ have _ your _ i _ auth _ repository _ implement _ i _ custom _ user _ auth _ instead </%> <%> <*> public class register _ service : register _ service < user _ auth > { } -> public class register _ service < t _ user _ auth > : register _ service </%> <%> <+> where t _ user _ auth : class , i _ user _ auth { } </%> ", "before_line": " public class register _ service < t _ user _ auth > : service where t _ user _ auth : class , i _ user _ auth ", "after_ctx": " ", "after_line": "public class register _ service : service", "predictions": ["public class register _ service { string ;"]}, {"before_ctx": "<%> <-> _ page </%> ", "before_line": " static read _ only _ memory < char > parse _ template _ body ( this read _ only _ memory < char > literal , script _ context context , read _ only _ memory < char > block _ name , out list < page _ fragment > body ) ", "after_ctx": " ", "after_line": "static read _ only _ memory < char > parse _ template _ body ( this read _ only _ memory < char > literal , read _ only _ memory < char > block _ name , out read _ only _ memory < char > body )", "predictions": ["static read _ only _ hash < ( _ <%> ( _ </%> class this , , , <+> enum enum enum . : : script _ empty )"]}, {"before_ctx": " ", "before_line": " body = parse _ template _ page ( context , literal . slice ( 0 , pos ) . trim _ first _ new _ line ( ) ) ; ", "after_ctx": " <%> <-> parse _ template _ page ( context , </%> <%> <-> ) </%>", "after_line": "body = literal . slice ( 0 , pos ) . trim _ first _ new _ line ( ) ;", "predictions": ["body = parse _ template _ context < list web = literal ;"]}, {"before_ctx": "<%> <-> parse _ template _ page ( context , </%> <%> <-> ) </%> ", "before_line": " body = parse _ template _ page ( context , literal . slice ( 0 , pos ) . trim _ first _ new _ line ( ) ) ; ", "after_ctx": " <%> <*> static read _ only _ memory < char > parse _ template _ else _ block ( this read _ only _ memory < char > literal , script _ context context , string block _ name , out page _ else _ block statement ) -> static read _ only _ memory < char > parse _ template _ else _ block ( this read _ only _ memory < char > literal , string block _ name , </%> <%> <+> out read _ only _ memory < char > else _ argument , out read _ only _ memory < char > else _ body ) </%>", "after_line": "body = literal . slice ( 0 , pos ) . trim _ first _ new _ line ( ) ;", "predictions": ["body = parse _ template _ int ) <@> ;"]}, {"before_ctx": "<%> <*> var page _ result = new page _ result ( parsed _ script ) { -> var page = new sharp _ page ( context , block . body _ fragments ) ; </%> <%> <+> var page _ result = new page _ result ( page ) { </%> ", "before_line": " var len = math . min ( param _ values . length , args . count ) ; ", "after_ctx": " <%> <*> var discard = script _ context _ utils . get _ page _ result _ output ( page _ result ) ; if ( page _ result . return _ value = = null ) throw new not _ supported _ exception ( script _ context _ utils . error _ no _ return ) ; return page _ result . return _ value . result ; -> if ( page _ result . evaluate _ result ( out var return _ value ) ) </%>", "after_line": "var len = math . min ( param _ values . length , args . length ) ;", "predictions": ["var len = math . single result kind param date _ values date date _ values kind ! date enum </@> enum _ values ;"]}, {"before_ctx": "<%> <*> private static readonly dictionary < string , string > clr _ types _ to _ swagger _ scalar _ types = new dictionary < string , string > { { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } -> private static readonly dictionary < type , string > clr _ types _ to _ swagger _ scalar _ types = new dictionary < type , string > { </%> <%> <+> { typeof ( long ) , swagger _ type . long } , { typeof ( int ) , swagger _ type . int } , { typeof ( byte ) , swagger _ type . byte } , { typeof ( bool ) , swagger _ type . boolean } , { typeof ( string ) , swagger _ type . string } , { typeof ( date _ time ) , swagger _ type . date } </%> ", "before_line": " return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( type . name . to _ lower _ invariant ( ) ) | | type . is _ enum ; ", "after_ctx": " <%> <*> . name . to _ lower _ invariant ( ) ) -> ) </%> <%> <*> . name . to _ lower _ invariant ( ) ] -> ] </%>", "after_line": "return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( type ) | | type . is _ enum ;", "predictions": ["return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( type . = ( types } <+> <+> type ,"]}, {"before_ctx": "<%> <*> private static readonly dictionary < string , string > clr _ types _ to _ swagger _ scalar _ types = new dictionary < string , string > { { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } , { STR , STR } -> private static readonly dictionary < type , string > clr _ types _ to _ swagger _ scalar _ types = new dictionary < type , string > { </%> <%> <+> { typeof ( long ) , swagger _ type . long } , { typeof ( int ) , swagger _ type . int } , { typeof ( byte ) , swagger _ type . byte } , { typeof ( bool ) , swagger _ type . boolean } , { typeof ( string ) , swagger _ type . string } , { typeof ( date _ time ) , swagger _ type . date } </%> <%> <-> . name . to _ lower _ invariant ( ) </%> ", "before_line": " return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( lookup _ type . name . to _ lower _ invariant ( ) ) ? clr _ types _ to _ swagger _ scalar _ types [ lookup _ type . name . to _ lower _ invariant ( ) ] ", "after_ctx": " ", "after_line": "return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( lookup _ type ) ? clr _ types _ to _ swagger _ scalar _ types [ lookup _ type ]", "predictions": ["return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( lookup _ error <*> arguments <*> <@> instance <*> <@> _ args _ invariant context ) array"]}, {"before_ctx": "<%> <-> using system ; </%> <%> <-> using system _ web ; </%> ", "before_line": " using service _ stack _ web _ host _ end _ points _ formats ; using service _ stack _ web _ host _ endpoints _ support ; namespace service _ stack _ web _ host _ end _ points _ support _ markdown ", "after_ctx": " ", "after_line": "using service _ stack _ web _ host _ endpoints _ formats ; namespace service _ stack _ web _ host _ endpoints _ support _ markdown", "predictions": ["namespace service _ stack _ web _ ; _ using _ class _ ] _ formats"]}, {"before_ctx": "<%> <-> using system _ reflection _ emit ; </%> ", "before_line": " using service _ stack _ web _ host _ endpoints ; namespace service _ stack _ web _ host _ end _ points _ support _ markdown ", "after_ctx": " ", "after_line": "namespace service _ stack _ web _ host _ endpoints _ support _ markdown", "predictions": ["namespace service _ stack _ <-> _ stack _ ;"]}, {"before_ctx": "<%> <-> using system _ linq ; using system _ text ; </%> ", "before_line": " using service _ stack _ web _ host _ endpoints ; namespace service _ stack _ web _ host _ end _ points _ utils ", "after_ctx": " ", "after_line": "namespace service _ stack _ web _ host _ endpoints _ utils", "predictions": ["namespace service _ stack _ web _ . _ }"]}, {"before_ctx": "<%> <+> if ( ! ( filter is string s ) ) throw new not _ supported _ exception ( $ STR ) ; </%> <%> <-> if ( filter is string s ) { </%> <%> <+> { scope . scoped _ params [ STR ] = item ; var result = expr . evaluate ( scope ) ; if ( result ) </%> ", "before_line": " scope . scoped _ params [ STR ] = item ; var result = expr . evaluate ( scope ) ; if ( result ) { to . add ( item ) ; } ", "after_ctx": " ", "after_line": "to . add ( item ) ;", "predictions": ["to . add ( item ) ;"]}, {"before_ctx": "<%> <+> plugins . add ( new validation _ feature ( ) ) ; container . register _ validators ( typeof ( validate _ test _ mq _ validator ) . assembly ) ; </%> ", "before_line": " new string [ ] { app _ settings . get _ string ( STR ) ? ? STR } ) ) ; ", "after_ctx": " <%> <-> container . register < i _ message _ factory > ( c = > c . resolve < i _ message _ service > ( ) . message _ factory ) ; </%> <%> <+> mq _ server . register _ handler < validate _ test _ mq > ( service _ controller . execute _ message ) ; </%>", "after_line": "new [ ] { app _ settings . get _ string ( STR ) ? ? STR } ) ) ;", "predictions": ["new [ ] { app _ settings . get _ string ( : STR } . [ func func , token , <*> ) , <*> _ {"]}, {"before_ctx": "<%> <+> var http _ method = http _ req . http _ method ; var query _ string = http _ req . query _ string ; </%> ", "before_line": " catch ( system . exception ex ) ", "after_ctx": " <%> <*> var xml = new stream _ reader ( input _ stream ) . read _ to _ end ( ) ; -> var is _ form _ data = http _ req . has _ any _ of _ content _ types ( content _ type . form _ url _ encoded , content _ type . multi _ part _ form _ data ) ; </%> <%> <+> if ( is _ form _ data ) </%>", "after_line": "catch ( exception ex )", "predictions": ["catch ( exception ex )"]}, {"before_ctx": " ", "before_line": " using system _ net _ mime ; ", "after_ctx": " <%> <+> using system _ web ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": " ", "before_line": " var response = client . send < secured _ response > ( request ) ; ", "after_ctx": " <%> <-> < secured _ response > </%>", "after_line": "var response = client . send ( request ) ;", "predictions": ["var response = client . send ( new ) ;"]}, {"before_ctx": "<%> <-> < secured _ response > </%> ", "before_line": " response = new _ client . send < secured _ response > ( request ) ; ", "after_ctx": " ", "after_line": "response = new _ client . send ( request ) ;", "predictions": ["response = new _ client . send ( message bytes <+> system system . app public ) <*>"]}, {"before_ctx": " ", "before_line": " var response = jwt _ client . send < secured _ response > ( request ) ; ", "after_ctx": " <%> <-> < secured _ response > </%>", "after_line": "var response = jwt _ client . send ( request ) ;", "predictions": ["var response = jwt _ client . send </%> request -> ;"]}, {"before_ctx": "<%> <-> < secured _ response > </%> ", "before_line": " response = new _ client . send < secured _ response > ( request ) ; ", "after_ctx": " <%> <+> public void authenticating _ with _ jwt _ cookie _ does _ allow _ multiple _ authenticated _ requests ( ) { </%>", "after_line": "response = new _ client . send ( request ) ;", "predictions": ["response = new _ client . send ) STR"]}, {"before_ctx": " ", "before_line": " var response = client . send < secured _ response > ( request ) ; ", "after_ctx": " <%> <-> < secured _ response > </%>", "after_line": "var response = client . send ( request ) ;", "predictions": ["var response = client . send ( request ) ;"]}, {"before_ctx": "<%> <-> < secured _ response > </%> ", "before_line": " response = new _ client . send < secured _ response > ( request ) ; ", "after_ctx": " ", "after_line": "response = new _ client . send ( request ) ;", "predictions": ["response = new _ client . send ( request ;"]}, {"before_ctx": " ", "before_line": " var response = client . send < secured _ response > ( request ) ; ", "after_ctx": " <%> <-> < secured _ response > </%>", "after_line": "var response = client . send ( request ) ;", "predictions": ["var response = client . send ( request ) ;"]}, {"before_ctx": "<%> <-> < secured _ response > </%> ", "before_line": " response = new _ client . send < secured _ response > ( request ) ; ", "after_ctx": " ", "after_line": "response = new _ client . send ( request ) ;", "predictions": ["response = new _ client . send ( request ) <%> </@> </@> ; ; = } request request _ STR </%>"]}, {"before_ctx": "<%> <+> public string _ segment to _ string _ segment ( ) = > to _ string ( ) . to _ string _ segment ( ) ; </%> <%> <*> public static list < command > parse _ commands ( this string commands _ string , char separator = ',' , func < string , int , int? > at _ end _ index = null ) -> public static list < command > parse _ commands ( this string commands _ string ) </%> <%> <+> { return parse _ commands ( new string _ segment ( commands _ string ) , ',' ) ; } public static list < command > parse _ commands ( this string _ segment commands _ string , char separator = ',' , func < string _ segment , int , int? > at _ end _ index = null ) </%> ", "before_line": " if ( string . is _ null _ or _ empty ( commands _ string ) ) ", "after_ctx": " <%> <*> [ -> . get _ char ( </%> <%> <*> ] -> ) </%>", "after_line": "if ( commands _ string . is _ null _ or _ empty ( ) )", "predictions": ["if ( commands _ string . is _ null _ or _ empty ( ) )"]}, {"before_ctx": " ", "before_line": " string content _ type , http _ status _ code status _ code ) { response . status _ code = ( int ) status _ code ; ", "after_ctx": " <%> <*> http _ status _ code -> int </%>", "after_line": "string content _ type , int status _ code ) { response . status _ code = status _ code ;", "predictions": ["http _ status _ code status _ ; -> </%> _ > < ( ( ( _ ) ) = = , , dictionary _ = _ . = . . . = ( . . . = ) public bytes name _ . ( , , , ) . . . ) body . data _ . ; ; _ . ;"]}, {"before_ctx": " ", "before_line": " . where ( ctor = > ! ctor . is _ static ) . first ( ) ; ", "after_ctx": " <%> <-> var service _ type = typeof ( t _ service ) ; </%> <%> <*> service -> typeof ( t </%> <%> <*> type -> service ) </%>", "after_line": ". first ( ctor = > ! ctor . is _ static ) ;", "predictions": [". first ( ctor = > ! <+> = ctor page </%> <+> ) scope ;"]}, {"before_ctx": "<%> <*> processed -> failed </%> ", "before_line": " mq _ client . notify ( queue _ names < t > . out , message . to _ bytes ( ) ) ; ", "after_ctx": " ", "after_line": "mq _ client . notify ( queue _ names < t > . out , message ) ;", "predictions": ["mq _ client . notify ( queue , message _ client _ new _ </@> _ <+> ;"]}, {"before_ctx": "<%> <-> public void publish ( i _ message message ) { var message _ bytes = message . to _ bytes ( ) ; publish ( new queue _ names ( message . body . get _ type ( ) ) . in , message _ bytes ) ; } </%> ", "before_line": " var message _ bytes = message . to _ bytes ( ) ; publish ( message . to _ in _ queue _ name ( ) , message _ bytes ) ; ", "after_ctx": " <%> <*> public void publish ( string queue _ name , byte [ ] message _ bytes ) -> public void publish ( string queue _ name , i _ message message ) </%> <%> <+> var message _ bytes = message . to _ bytes ( ) ; </%> <%> <*> public void notify ( string queue _ name , byte [ ] message _ bytes ) -> public void notify ( string queue _ name , i _ message message ) </%>", "after_line": "publish ( message . to _ in _ queue _ name ( ) , message ) ;", "predictions": ["publish ( message , message _ bytes ) ;"]}, {"before_ctx": "<%> <-> page _ variable _ fragment var , </%> <%> <*> ) -> , page _ variable _ fragment var = null ) </%> <%> <-> var . parse _ literal ( arg , out </%> <%> <*> , out js _ binding binding ) ; -> ; </%> <%> <+> js _ binding binding ; if ( var = = null ) arg . parse _ next _ token ( out out _ value , out binding ) ; else var . parse _ next _ token ( arg , out out _ value , out binding ) ; </%> ", "before_line": " var value = evaluate ( var , expr , scope _ context ) ; ", "after_ctx": " <%> <-> if ( binding ! = null ) { </%> <%> <-> get _ value ( </%> <%> <*> . binding _ string , scope _ context ) ; -> ! = null </%> <%> <-> } </%> <%> <+> ? get _ value ( binding . binding _ string , scope _ context ) </%> <%> <*> return -> : </%> <%> <-> page _ variable _ fragment var , </%> <%> <*> ) -> , page _ variable _ fragment var = null ) </%>", "after_line": "var value = evaluate ( expr , scope _ context , var ) ;", "predictions": ["var value = evaluate ( var , expr , scope _ context ) ;"]}, {"before_ctx": "<%> <-> } </%> <%> <+> ? get _ value ( binding . binding _ string , scope _ context ) </%> <%> <*> return -> : </%> <%> <-> page _ variable _ fragment var , </%> <%> <*> ) -> , page _ variable _ fragment var = null ) </%> ", "before_line": " var var _ value = evaluate ( var , arg , scope _ context ) ; ", "after_ctx": " ", "after_line": "var var _ value = evaluate ( arg , scope _ context , var ) ;", "predictions": ["var var _ value = evaluate ( ;"]}, {"before_ctx": "<%> <+> private readonly string listening _ on ; </%> <%> <+> var port = host _ context . find _ free _ tcp _ port ( starting _ from : NUM ) ; if ( port < NUM ) throw new exception ( STR + port ) ; listening _ on = STR . fmt ( port ) ; </%> ", "before_line": " . start ( config . listening _ on ) ; ", "after_ctx": " <%> <*> config . service _ stack _ base -> listening </%> <%> <*> uri -> on </%>", "after_line": ". start ( listening _ on ) ;", "predictions": [". start ( config ) ;"]}, {"before_ctx": " ", "before_line": " public string raw _ url = > uri _ helper . get _ display _ url ( request ) ; public string absolute _ uri = > uri _ helper . get _ display _ url ( request ) ; ", "after_ctx": " <%> <*> = > request . path . value . replace ( STR , STR ) ; -> { get ; set ; } </%>", "after_line": "public string raw _ url = > request . get _ display _ url ( ) ; public string absolute _ uri = > request . get _ display _ url ( ) ;", "predictions": ["public string raw _ url = > <-> _ i ) ( is = <%> ) ( dictionary = > <%> _ public string > <%> _ public string _ </%> ) ( < < < < , < , ;"]}, {"before_ctx": "<%> <*> path _ variables = rest _ route . variables . to _ dictionary ( x = > x ) , data = rest _ route . query _ string _ variables . map ( x = > new postman _ data { key = x , value = STR , type = STR , } ) , -> path _ variables = ! verb . has _ request _ body ( ) </%> <%> <+> ? rest _ route . variables . concat ( route _ data . select ( x = > x . key ) ) . to _ dictionary ( x = > x ) : null , data = verb . has _ request _ body ( ) ? route _ data : null , </%> ", "before_line": " headers = STR + mime _ types . json , ", "after_ctx": " <%> <+> var request _ params = auto _ mapping _ utils . populate _ with ( empty _ request ) . to _ string _ dictionary ( ) . map ( a = > new postman _ data { </%>", "after_line": "headers = headers ,", "predictions": ["headers = STR + mime _ types . json ,"]}, {"before_ctx": "<%> <+> path _ variables = ! verb . has _ request _ body ( ) ? request _ params . select ( x = > x . key ) . to _ dictionary ( x = > x ) : null , </%> <%> <*> data = auto _ mapping _ utils . populate _ with ( empty _ request ) . to _ string _ dictionary ( ) . map ( a = > new postman _ data { key = a . key , value = a . value , type = STR , } ) , -> data = verb . has _ request _ body ( ) </%> <%> <+> ? request _ params : null , </%> ", "before_line": " headers = STR + mime _ types . json , ", "after_ctx": " ", "after_line": "headers = headers ,", "predictions": ["headers = STR + mime _ types . json ,"]}, {"before_ctx": "<%> <+> if ( model _ type = = null ) model _ type = new { } . get _ type ( ) ; </%> ", "before_line": " if ( template _ cache . contains _ key ( name ) ) template _ cache [ name ] = instance ; else template _ cache . add ( name , instance ) ; } ", "after_ctx": " ", "after_line": "template _ cache [ name ] = instance ;   }", "predictions": ["template _ cache . add ( name <%> </%> ;"]}, {"before_ctx": "<%> <+> using service _ stack _ text ; </%> ", "before_line": " var request _ obj = reflection _ utils . populate _ object ( activator . create _ instance ( dto _ type ) ) ; ", "after_ctx": " ", "after_line": "var request _ obj = reflection _ utils . populate _ object ( dto _ type . create _ instance ( ) ) ;", "predictions": ["var request _ obj = populate . <*> _ typeof response app get _ NUM ( i ( { ? ? ? ? ? ? activator ( ? . data = key = key = key = key = key = key ( <%> _ ] ( <%> _ ] ( <%> ( <%> ( <%> ( <%> ( <%> ( <%> ( <%> = </%> = </%> = </%> = </%> = </%> = </%> = </%> = request = request _ STR ( public _ this ( public ( public ( public ( public ( public <%> <%>"]}, {"before_ctx": "<%> <*> data -> text </%> <%> <*> data -> text </%> ", "before_line": " var encrypted _ bytes = encrypt ( public _ key _ xml , bytes , rsa _ key _ length ) ; ", "after_ctx": " ", "after_line": "var encrypted _ bytes = encrypt ( bytes , public _ key _ xml , rsa _ key _ length ) ;", "predictions": ["var encrypted _ bytes = encrypt ( request _ <%> ( cache ( ( _ <*> _ <-> , = = = = = = = = = = message ) ) ) ) _ <%> _ i ) ) _ <%> _ body a a a a . request _ <%> . request a a a . </%> > STR a a _ , string ) _ ; _ i ) _ ; _ i ) ) _ ; _ i ) _ x _ : request request request . x . x ) <%> ;"]}, {"before_ctx": "<%> <+> app _ host = new basic _ app _ host ( ) . init ( ) ; </%> ", "before_line": " var redis _ repo = new redis _ auth _ repository ( new basic _ redis _ client _ manager ( new string [ ] { app _ settings . get _ string ( STR ) ? ? STR } ) ) ; ", "after_ctx": " ", "after_line": "var redis _ repo = new redis _ auth _ repository ( new basic _ redis _ client _ manager ( new [ ] { app _ settings . get _ string ( STR ) ? ? STR } ) ) ;", "predictions": ["var redis _ repo = new redis _ </@> _ repository ( c . <@> string new dictionary has -> message _ <-> , public public body body body STR = ? _ body _ path = ( STR _ ) _ static _ ; > </%> ( </%> int list ( </%> _ end > int </%> int ( ) int ( </%> _ settings ) var <%> token token token <%> <%> var ) <%> <%> ( ) <%> <%> <%>"]}, {"before_ctx": "<%> <-> public static bool is _ white _ space ( char c ) = > c = = ' ' | | ( c > = ' \\ ' & & c < = ' \\ d ' ) | | c = = ' \\ ' | | c = = ' \\ ' ; method _ impl _ method _ impl _ options _ aggressive _ inlining </%> ", "before_line": " while ( i < literal . length & & is _ white _ space ( literal . get _ char ( i ) ) ) ", "after_ctx": " ", "after_line": "while ( i < literal . length & & literal . get _ char ( i ) . is _ white _ space ( ) )", "predictions": ["while ( i < literal . length result result & = container </%> name )"]}, {"before_ctx": "<%> <+> return template ? ? default _ layout ; } </%> <%> <+> public abstract class resharper _ view _ page < t > : view _ page < object > { public t dto = > ( t ) model ; } </%> ", "before_line": " public abstract class view _ page < t > : razor _ page < object > , i _ disposable ", "after_ctx": " ", "after_line": "public abstract class view _ page < t > : razor _ page < t > , i _ disposable", "predictions": ["public abstract class view _ page < ) -> </%> _ . filter _ <-> new ! i _ ( dictionary _ map"]}, {"before_ctx": " ", "before_line": " public i _ raw _ string validation _ summary ( script _ scope _ context scope , i _ enumerable < object > except _ fields ) = > ", "after_ctx": " <%> <-> i _ enumerable < </%> <%> <-> > </%>", "after_line": "public i _ raw _ string validation _ summary ( script _ scope _ context scope , object except _ fields ) = >", "predictions": ["public script _ scope _ context validation _ stack ; request _ ( script _ [ <%> namespace service </@> _ net </@> _ net ) _ </@> task <%> service"]}, {"before_ctx": "<%> <-> i _ enumerable < </%> <%> <-> > </%> ", "before_line": " public i _ raw _ string validation _ summary ( script _ scope _ context scope , i _ enumerable < object > except _ fields , object html _ attrs ) ", "after_ctx": " ", "after_line": "public i _ raw _ string validation _ summary ( script _ scope _ context scope , object except _ fields , object html _ attrs )", "predictions": ["public script _ scope _ context validation _ service . new signature _ new _ <@> string <%> i _ enumerable <+> _ member <%> script = _ >"]}, {"before_ctx": "<%> <-> { </%> <%> <-> } return host _ context . async . continue _ with ( req , task _ response , task = > { if ( task . is _ faulted ) { var ex = task . exception . unwrap _ if _ single _ exception ( ) ; var result = handle _ exception ( req , request _ dto , ex ) ; if ( result = = null ) return ex ; return result ; } response = task . get _ result ( ) ; log _ request ( req , request _ dto , response ) ; if ( response _ filters ! = null ) { </%> <%> <*> foreach ( var response _ filter in response _ filters ) { var attr _ instance = response _ filter . copy ( ) ; container . auto _ wire ( attr _ instance ) ; if ( attr _ instance is i _ has _ response _ filter filter ) filter . response _ filter ( req , req . response , response ) ; app _ host . release ( attr _ instance ) ; if ( req . response . is _ closed ) return null ; } } return response ; } ) ; -> await task _ response ; </%> <%> <+> response = task _ response . get _ result ( ) ; </%> ", "before_line": " else { log _ request ( req , request _ dto , response ) ; } ", "after_ctx": " ", "after_line": "log _ request ( req , request _ dto , response ) ;", "predictions": ["log _ request ( req , request _ ex ; . . ) stream"]}, {"before_ctx": "<%> <-> new [ ] </%> ", "before_line": " this . http _ methods = ( verbs ? ? string . empty ) . split ( new [ ] { ',' , ' ' } , string _ split _ options . remove _ empty _ entries ) ; ", "after_ctx": " ", "after_line": "this . http _ methods = ( verbs ? ? empty ) . split ( new [ ] { ',' , ' ' } , string _ split _ options . remove _ empty _ entries ) ;", "predictions": ["this . http _ methods = ( verbs host host { web _ string name scope tests service host _ split _ entries ;"]}, {"before_ctx": "<%> <*> using service _ stack _ logging ; using service _ stack _ logging _ support _ logging ; -> using service _ stack _ plugins _ proto _ buf ; </%> ", "before_line": " using config = service _ stack . web _ host . integration _ tests . tests . config ; namespace service _ stack _ web _ host _ endpoints _ tests _ proto _ buf _ tests ", "after_ctx": " ", "after_line": "namespace service _ stack _ web _ host _ integration _ tests _ tests", "predictions": ["using config = config _ stack . public _ model t { }"]}, {"before_ctx": " ", "before_line": " var q = auto _ query . create _ query ( dto , request . get _ request _ params ( ) , request ) ; ", "after_ctx": " <%> <-> . get _ request _ params ( ) </%>", "after_line": "var q = auto _ query . create _ query ( dto , request ) ;", "predictions": ["var q = auto _ query . create _ <-> stack dto web <%> service ( . ? ? </@> , . ? ( . ;"]}, {"before_ctx": "<%> <*> enum _ itens -> objs </%> <%> <*> enum _ itens -> objs </%> <%> <*> var template = target . to _ string ( ) ; var dynamic _ page = scope . context . one _ time _ page ( template ) ; scope . page . args . each ( ( x , y ) = > dynamic _ page . args [ x ] = y ) ; var page _ result = await new page _ result ( dynamic _ page ) { args = scope . page _ result . args } . init ( ) ; var item _ scope = new template _ scope _ context ( page _ result , scope . output _ stream , scope . scoped _ params = = null ? new dictionary < string , object > ( ) : new dictionary < string , object > ( scope . scoped _ params ) ) ; foreach ( var item in enum _ itens ) -> var item _ scope = scope . create _ scoped _ context ( target . to _ string ( ) ) ; </%> <%> <+> foreach ( var item in objs ) </%> ", "before_line": " await page _ result . write _ page _ async ( page _ result . page , item _ scope ) ; ", "after_ctx": " <%> <+> } else if ( items ! = null ) { throw new argument _ exception ( $ STR ) ; </%>", "after_line": "await item _ scope . write _ page _ async ( ) ;", "predictions": ["await page _ result . write _ ; _ has ) = has _ , request ; ; ; _ to _ string ; ;"]}, {"before_ctx": "<%> <+> using system _ collections _ generic ; using system _ linq ; using system _ text ; </%> ", "before_line": " public static categories category ( int id , string category _ name , string description , byte [ ] picture ) ", "after_ctx": " <%> <*> categories -> category </%> <%> <*> customers -> customer </%>", "after_line": "public static category category ( int id , string category _ name , string description , byte [ ] picture )", "predictions": ["public static categories category ( int id , , _ true , _ name , name description . = await await await await await await get </%> > >"]}, {"before_ctx": "<%> <*> public static shippers shipper ( int id , string company _ name , string phone _ no ) -> public static employee employee ( </%> <%> <+> int employee _ id , string last _ name , string first _ name , string title , string title _ of _ courtesy , date _ time ? birth _ date , date _ time ? hire _ date , string address , string city , string region , string postal _ code , string country , string home _ phone , string extension , byte [ ] photo , string notes , int? reports _ to , string photo _ path ) </%> <%> <*> return new shippers { -> return new employee { </%> <%> <+> id = employee _ id , last _ name = last _ name , first _ name = first _ name , title = title , title _ of _ courtesy = title _ of _ courtesy , birth _ date = birth _ date , hire _ date = hire _ date , address = address , city = city , region = region , postal _ code = postal _ code , country = country , home _ phone = home _ phone , extension = extension , photo = photo , notes = notes , reports _ to = reports _ to , photo _ path = photo _ path , } ; } public static shipper shipper ( int id , string company _ name , string phone _ no ) { return new shipper { </%> ", "before_line": " public static suppliers supplier ( ", "after_ctx": " <%> <*> suppliers -> supplier </%>", "after_line": "public static supplier supplier (", "predictions": ["public static suppliers supplier ("]}, {"before_ctx": "<%> <+> ship _ name = ship _ name , </%> ", "before_line": " public static products product ( ", "after_ctx": " <%> <*> products -> product </%>", "after_line": "public static product product (", "predictions": ["public static products product ("]}, {"before_ctx": "<%> <-> < t _ response > </%> <%> <*> i _ return < t _ response > -> object </%> ", "before_line": " throw new system . not _ implemented _ exception ( ) ; ", "after_ctx": " ", "after_line": "throw new not _ implemented _ exception ( ) ;", "predictions": ["throw new not _ implemented _ exception <%> <-> <-> <-> <-> <-> <@> ,"]}, {"before_ctx": "<%> <-> using service _ stack _ server ; using service _ stack _ support _ web _ host ; </%> ", "before_line": " using service _ stack _ web ; namespace service _ stack _ web _ host _ handlers ", "after_ctx": " ", "after_line": "namespace service _ stack _ web _ handlers", "predictions": ["namespace service _ stack _ web"]}, {"before_ctx": "<%> <-> using service _ stack _ server ; </%> ", "before_line": " using service _ stack _ web ; namespace service _ stack _ web _ host _ asp _ net ", "after_ctx": " ", "after_line": "namespace service _ stack _ web _ asp _ net", "predictions": ["namespace service _ stack _ web _ http _ </@> _ <@>"]}, {"before_ctx": "<%> <-> using service _ stack _ server ; </%> ", "before_line": " using service _ stack _ web ; using service _ stack _ web _ host _ asp _ net ; using service _ stack _ web _ host _ http _ listener ; namespace service _ stack _ web _ host _ handlers ", "after_ctx": " ", "after_line": "using service _ stack _ web _ asp _ net ; using service _ stack _ web _ http _ listener ; namespace service _ stack _ web _ handlers", "predictions": ["namespace service _ stack _ web _ system _ ( , <@> _ <%> _ tests _ ( service ) ) using service _ , _ = _ , _ request _ -> ; <*> ( <*> ( stream _ = , static _ = , static _ = , date , , date , , static , static date , static _ = , date , , static , static , , date , date , static , static , static , , date , , _ = , static _ = , )"]}, {"before_ctx": "<%> <-> using service _ stack _ server ; </%> ", "before_line": " using service _ stack _ web ; namespace service _ stack _ web _ host _ http _ listener ", "after_ctx": " ", "after_line": "namespace service _ stack _ web _ http _ listener", "predictions": ["namespace service _ stack _ web"]}, {"before_ctx": "<%> <-> using service _ stack _ server ; </%> ", "before_line": " using service _ stack _ web ; namespace service _ stack _ web _ host _ handlers ", "after_ctx": " ", "after_line": "namespace service _ stack _ web _ handlers", "predictions": ["namespace service _ stack _ web"]}, {"before_ctx": "<%> <-> using service _ stack _ server ; </%> ", "before_line": " using service _ stack _ web ; using service _ stack _ web _ host _ asp _ net ; namespace service _ stack _ web _ host _ handlers ", "after_ctx": " ", "after_line": "using service _ stack _ web _ asp _ net ; namespace service _ stack _ web _ handlers", "predictions": ["namespace service _ stack _ web _ </%> _ </@> _ context"]}, {"before_ctx": "<%> <-> using service _ stack _ server ; </%> ", "before_line": " using service _ stack _ web ; using service _ stack _ web _ host _ handlers ; namespace service _ stack _ web _ host ", "after_ctx": " ", "after_line": "using service _ stack _ web _ handlers ; namespace service _ stack _ web", "predictions": ["namespace service _ stack _ web _ get _ handlers"]}, {"before_ctx": " ", "before_line": " read _ data ( ) ; return ; ", "after_ctx": " <%> <*> expect -> return read </%> <%> <*> success -> data </%>", "after_line": "return read _ data ( ) ;", "predictions": ["return read _ data ( ) ;"]}, {"before_ctx": " ", "before_line": " public mvc _ razor _ format razor _ format { get ; set ; } ", "after_ctx": " <%> <*> public i _ razor _ template execute _ template < t > ( t model , string name ) { return execute _ template ( model , name , null ) ; } public i _ razor _ template execute _ template < t > ( t model , string name , string template _ path ) -> public i _ razor _ template execute _ template < t > ( t model , string name , string template _ path = null , i _ http _ response http _ res = null ) </%>", "after_line": "public razor _ format razor _ format { get ; set ; }", "predictions": ["public mvc _ razor _ format mvc _ <*> dynamic item item dynamic item item }"]}, {"before_ctx": "<%> <*> new rsa _ crypto _ service -> create </%> <%> <*> provider -> rsa </%> <%> <-> ( int ) </%> ", "before_line": " var verified = rsa . verify _ data ( data _ to _ verify , hash _ algorithm , signature ) ; ", "after_ctx": " ", "after_line": "var verified = rsa . verify _ data ( data _ to _ verify , signature , hash _ algorithm ) ;", "predictions": ["var verified = verify _ data ( empty _ this ? empty ? host host description ( private _ </@> _ task ( output scope using <*> = context scope scope _ null _ filter , is _ <%> , timeout = uri _ get _ reader ; uri _ get _ reader = timeout = uri _ get _ reader ;"]}, {"before_ctx": " ", "before_line": " using service _ stack _ web _ host _ http _ listener ; namespace service _ stack _ support _ web _ host ", "after_ctx": " <%> <+> system . net . </%>", "after_line": "namespace service _ stack _ web _ host _ http _ listener", "predictions": ["namespace service _ stack _ web _ service _ <*> _ <->"]}, {"before_ctx": "<%> <*> client . timeout = ( int ) this . timeout . value . total _ milliseconds ; } client . method = STR ; client . content _ type = content _ type ; using ( var writer = new stream _ writer ( client . get _ request _ stream ( ) ) ) -> using ( var writer = new stream _ writer ( stream ) ) </%> <%> <*> catch -> public override t deserialize _ from _ stream < t > </%> <%> <*> authentication _ exception ex -> stream stream </%> <%> <*> throw web _ request _ utils . create _ custom _ exception ( request _ uri , ex ) ? ? ex ; } using ( var response _ stream = client . get _ response ( ) . get _ response _ stream ( ) ) using ( var reader = new stream _ reader ( response _ stream ) ) -> using ( var reader = new stream _ reader ( stream ) ) </%> ", "before_line": " var response = type _ serializer . deserialize _ from _ reader < t > ( reader ) ; return response ; ", "after_ctx": " <%> <-> public void send _ one _ way ( object request ) { var request _ uri = this . async _ one _ way _ base _ uri + STR + request . get _ type ( ) . name ; var client = web _ request . create ( request _ uri ) ; try { if ( this . timeout . has _ value ) { </%>", "after_line": "return type _ serializer . deserialize _ from _ reader < t > ( reader ) ;", "predictions": ["return type _ serializer . deserialize _ path , reader , -> ,"]}, {"before_ctx": "<%> <+> route _ echoes _ pos api _ description _ echoes _ sentence </%> ", "before_line": " api _ member _ parameter _ type _ form _ name _ sentence _ description _ the _ sentence _ to _ echo _ data _ type _ string _ is _ required _ true _ allow _ multiple _ false ", "after_ctx": " <%> <+> route _ rockstars </%>", "after_line": "api _ member _ name _ sentence _ data _ type _ string _ description _ the _ sentence _ to _ echo _ is _ required _ true _ parameter _ type _ form _ allow _ multiple _ false", "predictions": ["api _ member _ parameter _ type _ </%> _ -> _ </@> _ </@> _ ex _ { . . task _ is _ t _ required , <%> , <%> , <%> , <%> )"]}, {"before_ctx": " ", "before_line": " mq _ server . register _ handler < hello _ intro > ( service _ controller . execute _ message ) ; ", "after_ctx": " <%> <-> service _ controller . </%>", "after_line": "mq _ server . register _ handler < hello _ intro > ( execute _ message ) ;", "predictions": ["mq _ server . register _ handler <-> stack _ host . namespace _ message <-> service _ , i _ message > <%> </%>"]}, {"before_ctx": "<%> <-> service _ controller . </%> ", "before_line": " var response = service _ controller . execute _ message ( m , req ) ; ", "after_ctx": " ", "after_line": "var response = execute _ message ( m , req ) ;", "predictions": ["var response = execute _ message ( m <%> req web web <-> ;"]}, {"before_ctx": " ", "before_line": " await write _ page _ fragment _ async ( fragment , page _ scope , output _ stream , token ) ; ", "after_ctx": " <%> <*> private async task write _ page _ fragment _ async ( page _ fragment fragment , script _ scope _ context scope , -> public async task write _ page _ fragment _ async ( script _ scope _ context scope , </%>", "after_line": "await write _ page _ fragment _ async ( page _ scope , fragment , output _ stream , token ) ;", "predictions": ["await write _ page _ fragment _ . using ;"]}, {"before_ctx": "<%> <+> using service _ stack _ commands ; </%> ", "before_line": " using service _ stack _ design _ patterns _ command ; ", "after_ctx": " ", "after_line": "using service _ stack ;", "predictions": ["using service ;"]}, {"before_ctx": "<%> <+> using service _ stack _ server ; </%> ", "before_line": " public override void serialize _ to _ stream ( service _ host . i _ request _ context request _ context , object request , system . io . stream stream ) ", "after_ctx": " ", "after_line": "public override void serialize _ to _ stream ( i _ request _ context request _ context , object request , system . io . stream stream )", "predictions": ["public override void serialize _ to _ < > > > > > -> _ to _ <%> using _ context </%> ] ; <%> <+> context"]}, {"before_ctx": "<%> <+> using service _ stack _ server ; </%> ", "before_line": " public override object create _ request ( service _ host . i _ http _ request request , string operation _ name ) ", "after_ctx": " ", "after_line": "public override object create _ request ( i _ http _ request request , string operation _ name )", "predictions": ["public override object create _ request ( exception service web _ http _ service service context <-> _ name ( service operation _ name ( <-> _ </@> _ request , token http _ = ) STR ) )"]}, {"before_ctx": "<%> <+> using service _ stack _ clients ; </%> <%> <-> using service _ stack _ service ; </%> ", "before_line": " service _ host _ api _ service _ description ", "after_ctx": " <%> <-> service _ host _ </%>", "after_line": "api _ service _ description", "predictions": ["service _ host _ api _ service _ description"]}, {"before_ctx": "<%> <-> service _ host _ </%> ", "before_line": " service _ host _ api ", "after_ctx": " ", "after_line": "api", "predictions": ["service _ host _ api"]}, {"before_ctx": " ", "before_line": " service _ host _ api ", "after_ctx": " <%> <-> service _ host _ </%>", "after_line": "api", "predictions": ["service _ host _ api"]}, {"before_ctx": "<%> <-> service _ host _ </%> ", "before_line": " service _ host _ api _ test ", "after_ctx": " <%> <-> service _ host _ </%>", "after_line": "api _ test", "predictions": ["service _ host _ api _ test"]}, {"before_ctx": "<%> <-> service _ host _ </%> ", "before_line": " service _ host _ api ", "after_ctx": " <%> <-> service _ host _ </%>", "after_line": "api", "predictions": ["service _ host _ api"]}, {"before_ctx": "<%> <-> service _ host _ </%> ", "before_line": " service _ host _ api ", "after_ctx": " <%> <-> service _ host _ </%>", "after_line": "api", "predictions": ["service _ host _ api"]}, {"before_ctx": "<%> <-> service _ host _ </%> ", "before_line": " service _ host _ api ", "after_ctx": " ", "after_line": "api", "predictions": ["service _ host _ api"]}, {"before_ctx": " ", "before_line": " public void parse _ next _ token ( string _ segment literal , out object value , out js _ binding binding ) ", "after_ctx": " <%> <+> return </%>", "after_line": "public string _ segment parse _ next _ token ( string _ segment literal , out object value , out js _ binding binding )", "predictions": ["public out js _ binding parse _ next _ token ( string _ definition base ) response response response _ context ( context _ segment ref <%> </@> value )"]}, {"before_ctx": "<%> <*> model -> context </%> ", "before_line": " string display _ name = get _ display _ name ( context . instance _ to _ validate ) ; ", "after_ctx": " <%> <+> if ( condition ! = null ) { if ( ! condition ( context ) ) { yield break ; </%>", "after_line": "string display _ name = get _ display _ name ( context ) ;", "predictions": ["string display _ name = get _ display _ name ( context . case _ result _ validate <%> <%> <%> <%> property ( </%> _ add _ validate <%> ) ; ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . credentials ! = null ) client . credentials = this . credentials ; if ( null ! = this . auth _ info ) { ", "after_ctx": " <%> <*> } else { -> else </%> <%> <-> } </%>", "after_line": "if ( this . credentials ! = null ) client . credentials = this . credentials ; if ( this . auth _ info ! = null )", "predictions": ["if ( credentials ! = null ) client . credentials = credentials ; <@> ;"]}, {"before_ctx": "<%> <-> client . credentials = this . credentials ; </%> <%> <*> if ( null ! -> client . credentials </%> <%> <*> auth _ info ) -> credentials ; </%> <%> <-> { </%> <%> <+> if ( this . auth _ info ! = null ) </%> ", "before_line": " } else { if ( this . always _ send _ basic _ auth _ header ) client . add _ basic _ auth ( this . user _ name , this . password ) ; } ", "after_ctx": " ", "after_line": "else if ( this . always _ send _ basic _ auth _ header ) client . add _ basic _ auth ( this . user _ name , this . password ) ;", "predictions": ["if ( this . always _ send _ basic _ auth _ header <%> date ( state _ name get async name _ host ) . password ) ) ) ) ) ) <%> ) request"]}, {"before_ctx": "<%> <-> private void request _ callback < t > ( i _ async _ result async _ result ) { var request _ state = ( request _ state < t > ) async _ result . async _ state ; try { var req = request _ state . web _ request ; var post _ stream = req . end _ get _ request _ stream ( async _ result ) ; stream _ serializer ( null , request _ state . request , post _ stream ) ; post _ stream . flush ( ) ; post _ stream . dispose ( ) ; post _ stream . close ( ) ; request _ state . web _ request . begin _ get _ response ( response _ callback < t > , request _ state ) ; } catch ( exception ex ) { handle _ response _ error ( ex , request _ state ) ; } } </%> ", "before_line": " var request _ state = ( request _ state < t > ) async _ result . async _ state ; ", "after_ctx": " ", "after_line": "var request _ state = ( async _ state < t > ) async _ result . async _ state ;", "predictions": ["var request _ state = ( request _ state ) async _ result . async _ . ; ;"]}, {"before_ctx": " ", "before_line": " var web _ response = pcl _ export . instance . get _ response ( client ) ; ", "after_ctx": " <%> <-> list < t _ response > response ; </%> <%> <*> pcl _ export . instance -> c </%> <%> <-> c </%>", "after_line": "var web _ response = client . get _ response ( ) ;", "predictions": ["var web _ response = client . get _ response ( ) ;"]}, {"before_ctx": " ", "before_line": " var web _ response = pcl _ export . instance . get _ response ( client ) ; ", "after_ctx": " <%> <-> t _ response response ; </%>", "after_line": "var web _ response = client . get _ response ( ) ;", "predictions": ["var web _ response = client . get _ response ( client _ <@> type type . types . < ) </%> </%> </%> </%> string <%> _ . field _ ) <%> ref pcl _ -> ) . app ) . app ) . app ) . app ) . app . app ) . app ) _ ( ) ) . get _ ( -> ) _ <*> ) . get _ ( state . > . > ( < var . pcl . > . > . > . > . > } _ request ,"]}, {"before_ctx": "<%> <+> _ response typed </%> <%> <*> ( t -> typed </%> <%> <-> response ) </%> ", "before_line": " var web _ response = pcl _ export . instance . get _ response ( client ) ; ", "after_ctx": " <%> <-> t _ response response ; </%>", "after_line": "var web _ response = client . get _ response ( ) ;", "predictions": ["var web _ response = client . get _ response ( ) ;"]}, {"before_ctx": " ", "before_line": " var web _ response = pcl _ export . instance . get _ response ( web _ request ) ; ", "after_ctx": " <%> <-> t _ response response ; </%> <%> <+> t _ response </%>", "after_line": "var web _ response = web _ request . get _ response ( ) ;", "predictions": ["web _ request web _ response = web _ request . get _ ) </%> <%> response </%>"]}, {"before_ctx": "<%> <*> expire _ tokens _ after = app _ settings . get ( STR , expire _ tokens _ after ) ; -> expire _ tokens _ in = app _ settings . get ( STR , expire _ tokens _ in ) ; </%> <%> <+> var date _ str = app _ settings . get _ string ( STR ) ; if ( ! string . is _ null _ or _ empty ( date _ str ) ) invalidate _ tokens _ issued _ before = date _ str . from _ jsv < date _ time > ( ) ; </%> <%> <*> is -> from </%> <%> <*> partial -> token </%> ", "before_line": " throw new system . not _ implemented _ exception ( STR ) ; ", "after_ctx": " ", "after_line": "throw new not _ implemented _ exception ( STR ) ;", "predictions": ["throw new not _ implemented _ exception ( STR ) ;"]}, {"before_ctx": "<%> <*> inject _ request _ context ( service , request _ context ) ; var endpoint _ attrs = request _ context ! = null ? request _ context . endpoint _ attributes : endpoint _ attributes . none ; try -> var response = service _ exec ( request _ context , dto ) ; return response ; } finally { if ( endpoint _ host . app _ host ! = null ) </%> <%> <*> var response = type -> endpoint </%> <%> <*> factory -> host . app </%> <%> <*> fn ( dto , -> host . release ( </%> <%> <-> , endpoint _ attrs </%> <%> <-> return response ; </%> <%> <-> finally </%> <%> <+> else </%> ", "before_line": " if ( endpoint _ host . app _ host ! = null ) {  endpoint _ host . app _ host . release ( service ) ; } else { using ( service as i _ disposable ) { } } } ", "after_ctx": " <%> <+> } </%> <%> <-> } ; try { request _ exec _ map . add ( request _ type , handler _ fn ) ; </%>", "after_line": "using ( service as i _ disposable ) { } }", "predictions": ["endpoint _ host . app _ host . release ( service ) ;"]}, {"before_ctx": " ", "before_line": " result [ text . string _ extensions . to _ camel _ case ( property _ name ) ] = new property _ route _ member ( property _ info ) ; ", "after_ctx": " <%> <*> text . string -> field </%> <%> <*> extensions -> name </%> <%> <-> field _ name </%>", "after_line": "result [ property _ name . to _ camel _ case ( ) ] = new property _ route _ member ( property _ info ) ;", "predictions": ["result [ property _ name ] = new property _ route _ member type </@> </@> <*> _ <+> <*> <*> <*> ;"]}, {"before_ctx": "<%> <*> text . string -> property </%> <%> <*> extensions -> name </%> <%> <-> property _ name </%> ", "before_line": " result [ text . string _ extensions . to _ camel _ case ( field _ name ) ] = new field _ route _ member ( field _ info ) ; ", "after_ctx": " ", "after_line": "result [ field _ name . to _ camel _ case ( ) ] = new field _ route _ member ( field _ info ) ;", "predictions": ["result [ field _ name ] = new field _ route _ member ( name ) </@> <-> ( <-> ( ref ( this </%> </%> </%> </%> </%> </%> </%> async </@> _ ex _ get _ ex _ get async async async input async < </@> _ result async </@> ; ) async < state _ result async </@> _ ex async get _ ex _ get ; ) callback } >"]}, {"before_ctx": "<%> <-> ( </%> <%> <-> ) </%> ", "before_line": " return ! type . is _ generic _ type _ definition ( ) & & ", "after_ctx": " ", "after_line": "return ! type . is _ generic _ type _ definition & &", "predictions": ["return ! type . is _ generic _ type _ definition & )"]}, {"before_ctx": " ", "before_line": " if ( type . is _ generic _ type ( ) ) ", "after_ctx": " <%> <-> _ type </%>", "after_line": "if ( type . is _ generic _ type )", "predictions": ["if ( is _ generic _ type )"]}, {"before_ctx": " ", "before_line": " var base _ type = validator . base _ type ( ) ; ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%> <%> <-> ( ) </%>", "after_line": "var base _ type = validator . base _ type ;", "predictions": ["var base _ type = validator . base _ type ;"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " while ( ! base _ type . is _ generic _ type ( ) ) ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "while ( ! base _ type . is _ generic _ type )", "predictions": ["while ( ! base _ type . is _ generic _ type )"]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%> ", "before_line": " base _ type = base _ type . base _ type ( ) ; ", "after_ctx": " ", "after_line": "base _ type = base _ type . base _ type ;", "predictions": ["base _ type = base _ type . base _ type ;"]}, {"before_ctx": " ", "before_line": " type cur = to _ check . is _ generic _ type ( ) ? to _ check . get _ generic _ type _ definition ( ) : to _ check ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "type cur = to _ check . is _ generic _ type ? to _ check . get _ generic _ type _ definition ( ) : to _ check ;", "predictions": ["type cur = to _ check . is _ generic _ type ( ) ? <%> _ context ;"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " to _ check = to _ check . base _ type ( ) ; ", "after_ctx": " ", "after_line": "to _ check = to _ check . base _ type ;", "predictions": ["to _ check = to _ check = <-> _ <%> </@> </%>"]}, {"before_ctx": " ", "before_line": " if ( type . base _ type ( ) ! = null ) ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%>", "after_line": "if ( type . base _ type ! = null )", "predictions": ["if ( type . base _ type ! = null )"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " if ( ! ref _ types . contains ( type . base _ type ( ) ) ) ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%>", "after_line": "if ( ! ref _ types . contains ( type . base _ type ) )", "predictions": ["if ( ! ref _ types . contains ( type ) )"]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%> ", "before_line": " ref _ types . add ( type . base _ type ( ) ) ; add _ referenced _ types ( type . base _ type ( ) , ref _ types ) ; ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( ) </%>", "after_line": "ref _ types . add ( type . base _ type ) ; add _ referenced _ types ( type . base _ type , ref _ types ) ;", "predictions": ["ref _ types . add ( type . base _ type ( ) . client <%> <%> <*> <*> <*> ) STR"]}, {"before_ctx": " ", "before_line": " if ( service _ type . is _ abstract ( ) | | service _ type . contains _ generic _ parameters ( ) ) ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%>", "after_line": "if ( service _ type . is _ abstract | | service _ type . contains _ generic _ parameters )", "predictions": ["if ( service _ type . is _ abstract | | service _ type . generic <%> <%> <%> )"]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%> ", "before_line": " if ( service _ type . is _ abstract ( ) | | service _ type . contains _ generic _ parameters ( ) ) ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%>", "after_line": "if ( service _ type . is _ abstract | | service _ type . contains _ generic _ parameters )", "predictions": ["if ( service _ type . is _ abstract | | service _ type . contains _ generic . stack ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ("]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%> ", "before_line": " if ( service _ type . is _ abstract ( ) | | service _ type . contains _ generic _ parameters ( ) ) ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%>", "after_line": "if ( service _ type . is _ abstract | | service _ type . contains _ generic _ parameters )", "predictions": ["if ( service _ type . is _ abstract | | service _ type . contains _ generic _ parameters )"]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%> ", "before_line": " if ( service _ type . is _ abstract ( ) | | service _ type . contains _ generic _ parameters ( ) ) ", "after_ctx": " ", "after_line": "if ( service _ type . is _ abstract | | service _ type . contains _ generic _ parameters )", "predictions": ["if ( service _ type . is _ abstract | | service _ type . contains _ if <%> parameters type type )"]}, {"before_ctx": " ", "before_line": " if ( ! pi . property _ type . is _ generic _ type ( ) ) continue ; ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%>", "after_line": "if ( ! pi . property _ type . is _ generic _ type ) continue ;", "predictions": ["if ( ! pi . property _ type . is _ generic _ type ) base ."]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> ", "before_line": " if ( ! ignore _ type _ fn ( type . base _ type ( ) ) | | ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "if ( ! ignore _ type _ fn ( type . base _ type ) | |", "predictions": ["if ( ! ignore _ type _ fn ( type ) | |"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " register _ type _ fn ( type . base _ type ( ) ) ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "register _ type _ fn ( type . base _ type ) ;", "predictions": ["register _ type _ fn ( type ) ;"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " if ( ! iface . is _ generic _ type ( ) & & ! iface . is _ system _ type ( ) & & ! iface . is _ service _ stack _ type ( ) ) ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%>", "after_line": "if ( ! iface . is _ generic _ type & & ! iface . is _ system _ type ( ) & & ! iface . is _ service _ stack _ type ( ) )", "predictions": ["if ( ! iface . is _ generic _ type & & ! iface . is _ system _ key type type type type . . . type type type : ( ( , _ stack ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ("]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " if ( ! type . is _ generic _ type ( ) ) ", "after_ctx": " ", "after_line": "if ( ! type . is _ generic _ type )", "predictions": ["if ( ! type . is _ generic _ type base )"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " if ( type . is _ generic _ type ( ) ) ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "if ( type . is _ generic _ type )", "predictions": ["if ( type . is _ generic _ type )"]}, {"before_ctx": "<%> <-> ( </%> <%> <-> ) </%> ", "before_line": " generic _ args = type . is _ generic _ type ( ) ? get _ generic _ args ( type ) : null , ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%>", "after_line": "generic _ args = type . is _ generic _ type ? get _ generic _ args ( type ) : null ,", "predictions": ["generic _ args = type . is _ generic _ type ? get _ generic _ args ( is _ service ) <@> |"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " is _ enum = type . is _ enum ( ) ? true : ( bool? ) null , ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%>", "after_line": "is _ enum = type . is _ enum ? true : ( bool? ) null ,", "predictions": ["is _ enum = type . is _ enum ? true : ( bool? ) null ,"]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> <%> <-> ( ) </%> ", "before_line": " meta _ type . inherits = to _ type _ name ( type . base _ type ( ) ) ; ", "after_ctx": " ", "after_line": "meta _ type . inherits = to _ type _ name ( type . base _ type ) ;", "predictions": ["meta _ type . inherits = to _ type _ name ( type ) ;"]}, {"before_ctx": " ", "before_line": " if ( pi . property _ type . is _ generic _ type ( ) ) ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%>", "after_line": "if ( pi . property _ type . is _ generic _ type )", "predictions": ["if ( pi . property _ type . is _ generic _ . )"]}, {"before_ctx": "<%> <-> ( </%> <%> <-> ) </%> ", "before_line": " if ( type . is _ generic _ type ( ) ) ", "after_ctx": " ", "after_line": "if ( type . is _ generic _ type )", "predictions": ["if ( type . is _ generic _ type )"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " is _ value _ type = pi . property _ type . is _ value _ type ( ) ? true : ( bool? ) null , ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "is _ value _ type = pi . property _ type . is _ value _ type ? true : ( bool? ) null ,", "predictions": ["is _ value _ type = pi . property _ type . is _ value & true <@> </@> </@>"]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> ( ) </%> ", "before_line": " is _ enum = pi . property _ type . is _ enum ( ) ? true : ( bool? ) null , ", "after_ctx": " ", "after_line": "is _ enum = pi . property _ type . is _ enum ? true : ( bool? ) null ,", "predictions": ["is _ enum = pi . property _ type . is _ enum ? true , _ generic |"]}, {"before_ctx": " ", "before_line": " is _ value _ type = pi . parameter _ type . is _ value _ type ( ) ? true : ( bool? ) null , ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "is _ value _ type = pi . parameter _ type . is _ value _ type ? true : ( bool? ) null ,", "predictions": ["is _ value _ type = pi . parameter _ type . is _ value _ assembly ? type enum <%> service"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " is _ enum = pi . parameter _ type . is _ enum ( ) ? true : ( bool? ) null , ", "after_ctx": " ", "after_line": "is _ enum = pi . parameter _ type . is _ enum ? true : ( bool? ) null ,", "predictions": ["is _ enum = pi . parameter _ type . is _ enum ? true , _ public _ typeof <-> . </%> type"]}, {"before_ctx": " ", "before_line": " var base _ type = type . base _ type ( ) ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "var base _ type = type . base _ type ;", "predictions": ["var base _ type = type . base _ type <%> ;"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " else if ( pi . property _ type . is _ array ( ) ) ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( ) </%>", "after_line": "else if ( pi . property _ type . is _ array )", "predictions": ["else if ( pi . property _ type . is _ array )"]}, {"before_ctx": "<%> <-> ( </%> <%> <-> ) </%> ", "before_line": " type . is _ class ( ) & & type ! = typeof ( string ) & & ! type . is _ generic _ type ( ) & & ", "after_ctx": " ", "after_line": "type . is _ class & & type ! = typeof ( string ) & & ! type . is _ generic _ type & &", "predictions": ["type . is _ class & & type ! = typeof ( string ) & ( </%> <%> . </@> </%> name & ( _ <%> <%> ( <%> ) ( ( is </%> if </%> <%> <%> . </@> <%> <%> ( is </%> <%> <%> <%> ) ( ( _ is is is is is is </%> <%> <%> <%> <%> <%> <%> ( is </%> <%> <%> <%> ) ( <%> . </@> <%> <%> <%> ) ( ( _ <%> <%> contains parameters ) ( ( _ is is is is is is <%> <%> <%>"]}, {"before_ctx": " ", "before_line": " public static readonly assembly ms _ cor _ lib _ assembly = typeof ( string ) . get _ assembly ( ) ; ", "after_ctx": " <%> <-> get _ </%> <%> <-> ( ) </%>", "after_line": "public static readonly assembly ms _ cor _ lib _ assembly = typeof ( string ) . assembly ;", "predictions": ["public static readonly assembly ms _ cor _ lib _ assembly = typeof ( string _ true ) <-> </%> | property ) = key ,"]}, {"before_ctx": "<%> <-> get _ </%> <%> <-> ( ) </%> ", "before_line": " public static readonly assembly system _ web _ assembly = typeof ( http _ context ) . get _ assembly ( ) ; ", "after_ctx": " ", "after_line": "public static readonly assembly system _ web _ assembly = typeof ( http _ context ) . assembly ;", "predictions": ["public static readonly assembly system _ web _ assembly = typeof ( http _ context ) . enum value value |"]}, {"before_ctx": "<%> <*> string format ; return clr _ types _ to _ swagger _ scalar _ formats . try _ get _ value ( lookup _ type , out format ) ? format : null ; -> return clr _ types _ to _ swagger _ scalar _ formats . try _ get _ value ( lookup _ type , out var format ) ? format : null ; </%> ", "before_line": " if ( ! type . is _ generic _ type ( ) ) return null ; ", "after_ctx": " ", "after_line": "if ( ! type . is _ generic _ type ) return null ;", "predictions": ["if ( ! type . is _ generic _ type ( ) ) return null ;"]}, {"before_ctx": " ", "before_line": " return type . is _ generic _ type ( ) & & type . get _ generic _ type _ definition ( ) = = typeof ( key _ value _ pair < , > ) ; ", "after_ctx": " <%> <-> _ type </%> <%> <-> _ type </%>", "after_line": "return type . is _ generic _ type & & type . get _ generic _ type _ definition ( ) = = typeof ( key _ value _ pair < , > ) ;", "predictions": ["return type . is _ generic _ type & & type . get _ generic _ type _ is <%> . typeof . <@> <-> abstract abstract typeof ) </@>"]}, {"before_ctx": " ", "before_line": " if ( ( ! is _ key _ value _ pair _ type ( schema _ type ) & & schema _ type . is _ value _ type ( ) ) | | schema _ type . is _ nullable _ type ( ) ) ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%>", "after_line": "if ( ( ! is _ key _ value _ pair _ type ( schema _ type ) & & schema _ type . is _ value _ type ) | | schema _ type . is _ nullable _ type ( ) )", "predictions": ["if ( ( ! is _ key _ value _ pair _ type ( schema _ type ) . . ; type null . ;"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " if ( ! schema _ type . is _ generic _ type ( ) ) ", "after_ctx": " ", "after_line": "if ( ! schema _ type . is _ generic _ type )", "predictions": ["if ( ! schema _ type . is _ generic _ <-> )"]}, {"before_ctx": " ", "before_line": " var base _ type = schema _ type . base _ type ( ) ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "var base _ type = schema _ type . base _ type ;", "predictions": ["var base _ type = schema _ type ;"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " base _ type = base _ type . base _ type ( ) ; ", "after_ctx": " ", "after_line": "base _ type = base _ type . base _ type ;", "predictions": ["base _ type = base _ type ;"]}, {"before_ctx": "<%> <*> dto -> check </%> <%> <*> gen -> service </%> <%> <*> test -> interface </%> <%> <*> dto -> check </%> <%> <*> gen -> service </%> <%> <*> test -> interface </%> <%> <*> dto -> check </%> <%> <*> gen -> service </%> <%> <*> test _ service -> interface </%> ", "before_line": " public class dto _ get _ test _ service : service _ stack . service ", "after_ctx": " ", "after_line": "public class dto _ get _ test _ service : service", "predictions": ["public class dto _ get _ test _ service : service _ stack . service"]}, {"before_ctx": "<%> <-> key . </%> <%> <+> key </%> <%> <-> dictionary _ value . </%> <%> <+> dictionary _ value </%> <%> <*> . to _ safe _ string ( ) ) -> ) </%> ", "before_line": " . append ( value _ string . to _ safe _ string ( ) ) ; ", "after_ctx": " ", "after_line": ". append ( value _ string ) ;", "predictions": [". append ( value _ string ) ;"]}, {"before_ctx": "<%> <*> using ( var xw = new xml _ text _ writer ( ms , encoding ) ) -> var xw = new xml _ text _ writer ( ms , encoding ) ; </%> <%> <+> if ( indent _ xml ) </%> ", "before_line": " if ( indent _ xml ) { xw . formatting = formatting . indented ; } serializer . write _ object ( xw , from ) ; xw . flush ( ) ; ", "after_ctx": " <%> <*> using ( var reader = new stream _ reader ( ms ) ) { -> var reader = new stream _ reader ( ms ) ; </%> <%> <-> } } </%>", "after_line": "xw . formatting = formatting . indented ; } serializer . write _ object ( xw , from ) ; xw . flush ( ) ;", "predictions": ["xw . write _ object ( xw . indented ) ; xw . flush ( ( ( is ( = ( ( ( ( ( ( ( is ( is ( = ( ( ( ( ( is ( from ( 1 ( from ( from ( from ; . all ( execute ) ) ) ) ( ) ( ( execute ( store ( ( ( execute ( from ( ( ( from ) ( ( execute ( 1 ( operation ( execute ( from ( from ( from ( from ( from ( from ( 1 ( operation"]}, {"before_ctx": "<%> <*> var store _ handler = new store _ new _ user _ handler ( db _ o _ manager ) ; var operation _ context = create _ operation _ context ( new store _ new _ user { -> var store _ request = new store _ new _ user { </%> <%> <*> } , endpoint _ attributes . none ) ; store _ handler . execute ( operation _ context ) ; -> } ; </%> <%> <+> var store _ handler = new store _ new _ user _ handler ( db _ o _ manager ) ; store _ handler . execute ( store _ request ) ; </%> ", "before_line": " var response = ( get _ all _ users _ response ) get _ all _ handler . execute ( create _ operation _ context ( new get _ all _ users ( ) , endpoint _ attributes . none ) ) ; ", "after_ctx": " <%> <-> protected override i _ operation _ context create _ operation _ context ( object request _ dto , endpoint _ attributes endpoint _ attributes ) { var request _ context = new request _ context ( request _ dto , endpoint _ attributes , new factory _ provider ( factory _ utils . object _ factory ) ) ; return new operation _ context ( application _ context . instance , request _ context ) ; } </%>", "after_line": "var response = ( get _ all _ users _ response ) get _ all _ handler . execute ( new get _ all _ users ( ) ) ;", "predictions": ["var response = ( get _ all _ users _ response ) get _ all _ handler . execute ( create _ operation _ context ( ) , endpoint _ attributes . none ) ;"]}, {"before_ctx": "<%> <+> if ( ! typeof ( t ) . is _ generic _ type | | typeof ( t ) . get _ generic _ type _ definition ( ) ! = typeof ( i _ service < > ) ) throw new argument _ exception ( STR . fmt ( typeof ( t ) . full _ name ) ) ; </%> ", "before_line": " public void register _ service ( type service _ type ) ", "after_ctx": " <%> <+> var generic _ service _ type = service _ type . get _ type _ with _ generic _ type _ definition _ of ( typeof ( i _ service < > ) ) ; if ( generic _ service _ type = = null ) throw new argument _ exception ( STR . fmt ( service _ type . full _ name ) ) ; </%> <%> <+> return generic _ service _ type ; </%>", "after_line": "public type register _ service ( type service _ type )", "predictions": ["public type register _ service ( type service _ type )"]}, {"before_ctx": "<%> <*> proto -> data </%> <%> <+> _ order </%> ", "before_line": " var response = new search _ reqstars _ response ( ) { ", "after_ctx": " <%> <*> results = new list < reqstar > ( ) -> results = new list < reqstar > </%> <%> <-> ( ) </%> <%> <-> ( ) </%>", "after_line": "var response = new search _ reqstars _ response {", "predictions": ["var response = new search _ reqstars _ response {"]}, {"before_ctx": " ", "before_line": " return instance . split _ case ( text ) ; ", "after_ctx": " <%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%>", "after_line": "return split _ case ( text ) ;", "predictions": ["return split _ case ( text ) ;"]}, {"before_ctx": "<%> <-> instance . </%> ", "before_line": " return instance . humanize ( text ) ; ", "after_ctx": " <%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%>", "after_line": "return humanize ( text ) ;", "predictions": ["return humanize ( text ) ;"]}, {"before_ctx": "<%> <-> instance . </%> <%> <-> instance . </%> ", "before_line": " return instance . title _ case ( text ) ; ", "after_ctx": " <%> <-> instance . </%> <%> <-> instance . </%>", "after_line": "return title _ case ( text ) ;", "predictions": ["return title _ case ( text ) ;"]}, {"before_ctx": "<%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%> ", "before_line": " return instance . pascal _ case ( text ) ; ", "after_ctx": " <%> <-> instance . </%>", "after_line": "return pascal _ case ( text ) ;", "predictions": ["return pascal _ case ( text ) ;"]}, {"before_ctx": "<%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%> <%> <-> instance . </%> ", "before_line": " return instance . camel _ case ( text ) ; ", "after_ctx": " ", "after_line": "return camel _ case ( text ) ;", "predictions": ["return camel _ case ( text ) ;"]}, {"before_ctx": "<%> <+> if ( get _ type ( ) = = typeof ( orm _ lite _ multitenancy _ stateless _ auth _ tests ) ) return ; </%> ", "before_line": " credentials = new network _ credential ( api _ key . id , STR ) , ", "after_ctx": " ", "after_line": "credentials = new network _ credential ( api _ key , STR ) ,", "predictions": ["credentials = new network _ credential ( api _ key , <@> <%> </%>"]}, {"before_ctx": " ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ api _ key _ auth ( api _ <+> ) </@>"]}, {"before_ctx": "<%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ <%> id id id </@>"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ api ( <%> ( api id api id ) ) </@>"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ value _ < _ stack interface <%> reader . ) reader reader"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ api ( value ( -> _ check ) ) _ check -> ) _ check -> ) _ check -> ) ) _ check -> . ) . ( typeof . ( generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic generic"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ api _ key _ <@> dictionary <-> -> _ < </%> new </%> _ data new request _ < <%> _ data new request _ filter -> ) . ) reader"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ api _ key _ auth ( value ( value ( value string string string string string string string string string string string string string string new -> _ test _ check _ stack interface test _ check ) ) _ check -> <%> ) _ check -> . ) . if _ . <*> . if _ . <*> _ ) reader _ _ _ _ _ ( <%> . ) . ) . <*> _ _ _ _ </%> ( <%> . ) . ) reader"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ api _ key _ id : api id </@>"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ,"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ,"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ bearer _ token ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ add _ token key , , , _ filter . id , , _ filter . id , , _ filter . id , , _ append _ request <*> <+> <%> <%> <*> <%> new results new request _ data new <+> _ <@> <->"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ bearer _ token ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ bearer _ token key > , , _ filter . id , , _ filter . id , , _ filter . id , , _ filter . ) <->"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ api _ key _ auth ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ api _ key _ auth </@> </@>"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ bearer _ token ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ bearer _ token ( > > > >"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ bearer _ token ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ bearer _ token ( api _ filter . id ) , , _ filter . id , , _ filter . id , , . = >"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ bearer _ token ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) , , _ filter . id , , _ filter . id , , . = >"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ bearer _ token ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ,"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%> <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ bearer _ token ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ add </%> token key , , </%>"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , ", "after_ctx": " <%> <-> . id </%>", "after_line": "request _ filter : req = > req . add _ bearer _ token ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ bearer _ reader i _ > ( = = ;"]}, {"before_ctx": "<%> <-> . id </%> <%> <-> . id </%> <%> <-> . id </%> ", "before_line": " request _ filter : req = > req . add _ bearer _ token ( api _ key . id ) ) , ", "after_ctx": " ", "after_line": "request _ filter : req = > req . add _ bearer _ token ( api _ key ) ) ,", "predictions": ["request _ filter : req = > req . add _ bearer _ token stream provider <%>"]}, {"before_ctx": "<%> <*> request _ context = request _ context -> request _ context = request _ context , </%> <%> <+> service _ exception _ handler = ( req , ex ) = > validation _ feature . handle _ exception ( new basic _ resolver ( ) , req , ex ) </%> ", "before_line": " return set _ validator _ handler ( service ) ; ", "after_ctx": " ", "after_line": "return service ;", "predictions": ["return service ;"]}, {"before_ctx": "<%> <*> ) -> , bool use _ fork = false ) </%> <%> <+> use _ fork & & </%> ", "before_line": " if ( repo . fork & & use _ fork _ parent ) { if ( repo . parent ! = null ) return repo . parent . full _ name ; } ", "after_ctx": " ", "after_line": "if ( repo . parent ! = null ) return repo . parent . full _ name ;", "predictions": ["if ( repo . fork & & use _ fork _ parent ) { ; types </%> ( , host <*> . <@> end </@> statement . static ( ( collection </%> type read list </%> ( <*> ( <*> ( type </%> </%> read _ list </%> ( <*> ( <*> _ ) </%> read _ list </%> ( <*> ( <*> ( type </%> </%> read _ list </%> ( <*> ( <*> _ name = content var = </%> , args generic generic generic <%> arg <%> STR ) ) ) ) , generic generic <%> arg"]}, {"before_ctx": "<%> <-> using service _ stack _ web _ host _ endpoints _ metadata ; </%> ", "before_line": " app _ host . register _ service ( typeof ( swagger _ resources _ service ) , new string [ ] { STR } ) ; app _ host . register _ service ( typeof ( swagger _ api _ service ) , new string [ ] { STR } ) ; ", "after_ctx": " ", "after_line": "app _ host . register _ service ( typeof ( swagger _ resources _ service ) , new [ ] { STR } ) ; app _ host . register _ service ( typeof ( swagger _ api _ service ) , new [ ] { STR } ) ;", "predictions": ["app _ host . register _ service ( typeof ( swagger _ resources _ <%> </%> ) i _ static new content content ( stream ; . _ <%> , </%> ) generic </%> <%> <%> </%> -> <%> <%> <%> 0 0 <%> </%> <-> <*> ] _ resources _ ( <%> generic <%> generic <%> <-> <-> <%> <%> , -> 0 <%> <%> <%> <%> <%> <%> ) </%> </%> </%> </%> . [ ] _ ( args generic generic generic generic generic generic generic generic ) . 0 . ] [ args STR [ } }"]}, {"before_ctx": " ", "before_line": " return get _ handler _ for _ path _ info ( http _ req . http _ method , path _ info , original _ path _ info , path _ translated ) ? ? not _ found _ http _ handler ; ", "after_ctx": " <%> <*> , string original _ path _ info ) -> ) </%>", "after_line": "return get _ handler _ for _ path _ info ( http _ req , path _ translated ) ? ? not _ found _ http _ handler ;", "predictions": ["return get _ handler _ for _ path _ info ( http _ reader . handler app -> <*> content _ ; . = = = _ translated ( . -> _ <@> name name ) </%> </%> format _ <-> _ <%> _ , ; _ request _ is _ , ; _ request _ is _ , ; _ <%> _ is _ , ; _ <%> ( ; _ request _ is _ > is ) is ) ;"]}, {"before_ctx": "<%> <*> STR -> http _ methods . post </%> <%> <*> STR -> http _ methods . patch </%> <%> <*> STR -> http _ methods . delete </%> ", "before_line": " . split ( new char [ ] { '/' } , string _ split _ options . remove _ empty _ entries ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%>", "after_line": ". split ( new [ ] { '/' } , string _ split _ options . remove _ empty _ entries ) ;", "predictions": [". split ( new [ ] { '/' } , string _ split _ metadata <%> remove ) + <%> + <*> _ <*> _ utility ) ) ) get _ ] _ </@> ) ) ) ) <%> _ type ( remove } 1 . type return 1 _ type ( append _ type ( 0 } ) ) ) ) ) , , _ type _ append _ <+> _ </@> ) ) ) ) ) ) ) <%>"]}, {"before_ctx": "<%> <-> char </%> ", "before_line": " operation _ id = name + path _ postfix + num . to _ string ( ) + verb _ postfix ; ", "after_ctx": " ", "after_line": "operation _ id = name + path _ postfix + num + verb _ postfix ;", "predictions": ["operation _ id = name + path _ postfix + num + verb _ ) ) ) ) <*> verb _ <%> request = = ;"]}, {"before_ctx": "<%> <-> app _ host . </%> ", "before_line": " if ( app _ host . apply _ response _ filters ( http _ req , http _ res , response ) ) ", "after_ctx": " ", "after_line": "if ( apply _ response _ filters ( http _ req , http _ res , response ) )", "predictions": ["if ( apply _ response _ filters ( http _ req , http _ filter <-> stream ) ) ;"]}, {"before_ctx": "<%> <+> , is _ mutlti _ request = is _ multi _ request </%> <%> <+> , is _ mutlti _ request = is _ multi _ request </%> ", "before_line": " var feature = content _ format . to _ feature ( content _ type ) ; ", "after_ctx": " <%> <*> request _ name = request _ name -> request _ name = request _ name , </%> <%> <+> is _ mutlti _ request = is _ multi _ request </%> <%> <-> request _ name = request _ name </%>", "after_line": "var feature = content _ type . to _ feature ( ) ;", "predictions": ["var feature = content _ type . to _ feature ( ) ;"]}, {"before_ctx": " ", "before_line": " { if ( end _ string _ pos = = - 1 ) throw new not _ supported _ exception ( $ STR ) ; } ", "after_ctx": " <%> <*> i + = original _ args . length - rewritten _ args . length ; i + = end _ pos ; -> i = end _ string _ pos = = end _ statement _ pos </%> <%> <+> ? end _ statement _ pos - 2 : end _ string _ pos ; </%>", "after_line": "throw new not _ supported _ exception ( $ STR ) ;", "predictions": ["throw new not _ supported _ exception ( $ STR ) ;"]}, {"before_ctx": " ", "before_line": " return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) ) ; ", "after_ctx": " <%> <*> type -> generic </%> <%> <*> alias -> arg </%> <%> <-> . generic _ arg ( ) </%> <%> <*> return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) , type _ alias ( generic _ args [ 1 ] . trim _ start ( '\\'' ) ) ) ; -> return STR . fmt ( </%> <%> <+> generic _ arg ( generic _ args [ 0 ] ) , generic _ arg ( generic _ args [ 1 ] ) ) ; </%>", "after_line": "return STR . fmt ( generic _ arg ( generic _ args [ 0 ] ) ) ;", "predictions": ["return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) ) ;"]}, {"before_ctx": "<%> <*> type -> generic </%> <%> <*> alias -> arg </%> <%> <-> . generic _ arg ( ) </%> ", "before_line": " return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) ) ; ", "after_ctx": " <%> <*> return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) , type _ alias ( generic _ args [ 1 ] . trim _ start ( '\\'' ) ) ) ; -> return STR . fmt ( </%> <%> <+> generic _ arg ( generic _ args [ 0 ] ) , generic _ arg ( generic _ args [ 1 ] ) ) ; </%>", "after_line": "return STR . fmt ( generic _ arg ( generic _ args [ 0 ] ) ) ;", "predictions": ["return STR . fmt ( generic _ args [ 0 ] . generic _ arg ( ) ) ;"]}, {"before_ctx": "<%> <*> type -> generic </%> <%> <*> alias -> arg </%> <%> <-> . generic _ arg ( ) </%> <%> <*> type -> generic </%> <%> <*> alias -> arg </%> <%> <-> . generic _ arg ( ) </%> ", "before_line": " return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) , type _ alias ( generic _ args [ 1 ] . trim _ start ( '\\'' ) ) ) ; ", "after_ctx": " <%> <-> type _ alias ( arg . </%> <%> <*> ) -> arg </%>", "after_line": "return STR . fmt ( generic _ arg ( generic _ args [ 0 ] ) , generic _ arg ( generic _ args [ 1 ] ) ) ;", "predictions": ["return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) STR STR STR _ args ( <%> _ ; create message t </%> , < result _ ( , < < ; , <%> _ ; , < result , <%> _ ; , < < , , <*> _ ; , < result </%> ) , <*> _ -> error 0 , < result , <%> _ ; , < result </%> ,"]}, {"before_ctx": "<%> <*> return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) , type _ alias ( generic _ args [ 1 ] . trim _ start ( '\\'' ) ) ) ; -> return STR . fmt ( </%> <%> <+> generic _ arg ( generic _ args [ 0 ] ) , generic _ arg ( generic _ args [ 1 ] ) ) ; </%> ", "before_line": " args . append ( type _ alias ( arg . generic _ arg ( ) ) ) ; ", "after_ctx": " ", "after_line": "args . append ( generic _ arg ( arg ) ) ;", "predictions": ["args . append ( type _ alias ( arg . generic _ arg ) ) ;"]}, {"before_ctx": "<%> <*> < t -> ( string error </%> <%> <*> request > ( t -> code , string error </%> <%> <*> request request -> message </%> <%> <+> i _ enumerable < </%> <%> <*> result -> field > </%> <%> <*> error -> errors </%> <%> <+> { var response _ status = create _ response _ status ( error _ code , error _ message , validation _ errors ) ; var response _ dto = create _ response _ dto ( null , response _ status ) ; return new http _ error ( response _ dto , http _ status _ code . bad _ request , error _ code , error _ message ) ; } public static object create _ error _ response ( object request , validation _ error _ result validation _ error ) </%> ", "before_line": " public static object create _ error _ response < t _ request > ( t _ request request , exception ex , response _ status response _ status ) ", "after_ctx": " ", "after_line": "public static object create _ error _ response ( object request , exception ex , response _ status response _ status )", "predictions": ["public static object create _ error _ response < t _ request > ( t _ request request , exception ex , response _ status response _ status )"]}, {"before_ctx": "<%> <*> content -> mime </%> <%> <*> type -> types </%> ", "before_line": " var csv _ rows = new stream _ reader ( res . get _ response _ stream ( ) ) . read _ lines ( ) . to _ list ( ) ; ", "after_ctx": " <%> <*> content -> mime </%> <%> <*> type -> types </%>", "after_line": "var csv _ rows = res . read _ lines ( ) . to _ list ( ) ;", "predictions": ["var csv _ rows = new stream _ reader ( res . get _ new _ type <%> <%> <%> . to + = = -> ) parse _ </@> request , func >"]}, {"before_ctx": "<%> <*> content -> mime </%> <%> <*> type -> types </%> ", "before_line": " var csv _ rows = new stream _ reader ( res . get _ response _ stream ( ) ) . read _ lines ( ) . to _ list ( ) ; ", "after_ctx": " <%> <*> content -> mime </%> <%> <*> type -> types </%> <%> <*> content -> mime </%> <%> <*> type -> types </%>", "after_line": "var csv _ rows = res . read _ lines ( ) . to _ list ( ) ;", "predictions": ["var csv _ rows = new stream _ reader ( res . get _ response ; handler ;"]}, {"before_ctx": "<%> <*> content -> mime </%> <%> <*> type -> types </%> <%> <*> content -> mime </%> <%> <*> type -> types </%> ", "before_line": " var csv _ rows = new stream _ reader ( res . get _ response _ stream ( ) ) . read _ lines ( ) . to _ list ( ) ; ", "after_ctx": " <%> <*> content -> mime </%> <%> <*> type -> types </%> <%> <-> new stream _ reader ( </%> <%> <-> . get _ response _ stream ( ) ) </%>", "after_line": "var csv _ rows = res . read _ lines ( ) . to _ list ( ) ;", "predictions": ["var csv _ rows = res . get _ response _ stream ( ) . var _ type ( ( . to _ reader </%> ) ;"]}, {"before_ctx": "<%> <*> content -> mime </%> <%> <*> type -> types </%> ", "before_line": " var csv _ rows = new stream _ reader ( res . get _ response _ stream ( ) ) . read _ lines ( ) . to _ list ( ) ; ", "after_ctx": " <%> <*> content -> mime </%> <%> <*> type -> types </%> <%> <*> content -> mime </%> <%> <*> type -> types </%>", "after_line": "var csv _ rows = res . read _ lines ( ) . to _ list ( ) ;", "predictions": ["var csv _ rows = new stream _ reader ( res . get _ response </%> <%> static ; <*> response name , content , content ;"]}, {"before_ctx": "<%> <*> content -> mime </%> <%> <*> type -> types </%> ", "before_line": " var csv _ rows = new stream _ reader ( res . get _ response _ stream ( ) ) . read _ lines ( ) . to _ list ( ) ; ", "after_ctx": " ", "after_line": "var csv _ rows = res . read _ lines ( ) . to _ list ( ) ;", "predictions": ["var csv _ rows = new stream _ reader ( res . get _ _ <-> path ) </%> ] ) </%> response </%> -> -> </@> ) ) ;"]}, {"before_ctx": " ", "before_line": " public static i _ comparer < object > get _ comparer ( object x , lisp . interpreter i ) ", "after_ctx": " <%> <*> if ( x is func < object , object , int > fn ) return new fn _ comparer ( fn ) ; -> if ( x is func < object , object , int > fn _ compare _ to ) </%> <%> <+> return new fn _ comparer ( fn _ compare _ to ) ; if ( x is func < object , object , bool > fn _ equals ) </%>", "after_line": "public static i _ comparer < object > get _ comparer ( object x , interpreter i )", "predictions": ["public static i _ comparer < object > get _ comparer ( object x , interpreter i )"]}, {"before_ctx": "<%> <-> i _ </%> <%> <*> new -> parse </%> <%> <*> name -> query </%> <%> <*> value _ collection ( -> string ( string query </%> ", "before_line": " return new name _ value _ collection _ wrapper ( new name _ value _ collection ( ) ) ; } public override i _ name _ value _ collection parse _ query _ string ( string query ) { return http _ utility . parse _ query _ string ( query ) . in _ wrapper ( ) ; ", "after_ctx": " ", "after_line": "return http _ utility . parse _ query _ string ( query ) ;", "predictions": ["return http _ utility . parse _ query _ string ( string query ) ;"]}, {"before_ctx": "<%> <-> pcl _ export _ client . instance . </%> <%> <-> _ </%> ", "before_line": " headers = new name _ value _ collection _ wrapper ( message . to _ headers ( ) . to _ name _ value _ collection ( ) ) ; ", "after_ctx": " <%> <-> pcl _ export _ client . instance . </%> <%> <-> _ </%> <%> <-> pcl _ export _ client . instance . </%> <%> <-> _ </%>", "after_line": "headers = message . to _ headers ( ) . to _ name _ value _ collection ( ) ;", "predictions": ["headers = new name _ value _ collection _ wrapper ( message ) ;"]}, {"before_ctx": " ", "before_line": " var static _ file _ handler = ( ( static _ file _ handler ) static _ file _ handler ) ; static _ file _ handler . set _ default _ file ( file . virtual _ path , file . read _ all _ bytes ( ) , file . last _ modified ) ; static _ file _ handler . virtual _ node = file ; ", "after_ctx": " <%> <+> new </%> <%> <*> ; -> { virtual _ node = file } ; </%>", "after_line": "static _ file _ handler . set _ default _ file ( file . virtual _ path , file . read _ all _ bytes ( ) , file . last _ modified ) ;", "predictions": ["var static _ file _ handler . set _ default _ file ( file . > + public <%> </%> request , object > > ) generic _ ( [ _ <+> _ . <%> </%> args _ </@> args ( ( arg _ ( </%> </%> ) arg ) args generic generic generic args generic generic generic generic _ -> generic </%> generic generic </%> ( </%> ) ( </%> ) ) ) ;"]}, {"before_ctx": "<%> <-> using service _ stack _ service _ host ; </%> <%> <+> using service _ stack _ text ; </%> ", "before_line": " var service _ factory = auto _ wire _ helpers . generate _ auto _ wire _ fn < t > ( ) ; ", "after_ctx": " <%> <-> auto _ wire _ helpers . </%>", "after_line": "var service _ factory = generate _ auto _ wire _ fn < t > ( ) ;", "predictions": ["var service _ factory = generate _ auto _ wire _ fn < return > string ) ( ;"]}, {"before_ctx": "<%> <-> auto _ wire _ helpers . </%> ", "before_line": " var service _ factory = auto _ wire _ helpers . generate _ auto _ wire _ fn < t > ( ) ; ", "after_ctx": " ", "after_line": "var service _ factory = generate _ auto _ wire _ fn < t > ( ) ;", "predictions": ["var service _ factory = auto _ wire _ helpers . generate _ _ . ) _ _ </@> <*> STR . } . <-> . get client _ <%> _ settings ) ,"]}, {"before_ctx": "<%> <*> var result = app _ settings . get _ or _ create ( STR , key = > key + + + i ) ; -> var key = STR ; </%> <%> <+> var result = app _ settings . get _ or _ create ( key , ( ) = > key + + + i ) ; </%> ", "before_line": " result = app _ settings . get _ or _ create ( STR , key = > key + + + i ) ; ", "after_ctx": " ", "after_line": "result = app _ settings . get _ or _ create ( key , ( ) = > key + + + i ) ;", "predictions": ["result = get _ or _ create ( STR , key = > key + _ _ get request request ( STR [ ; generic _ ] arg arg arg arg arg arg arg arg arg type </%> args </%> ] generic 0 arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg ) ) <%> -> ( generic ( generic arg arg arg arg arg arg generic </%> args arg ] generic arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg arg"]}, {"before_ctx": "<%> <*> auth -> authenticate </%> <%> <*> auth -> authenticate </%> ", "before_line": " private object authenticate ( auth request , string provider , i _ auth _ session session , i _ auth _ provider o _ auth _ config ) ", "after_ctx": " <%> <*> auth -> authenticate </%>", "after_line": "private object authenticate ( authenticate request , string provider , i _ auth _ session session , i _ auth _ provider o _ auth _ config )", "predictions": ["private authenticate authenticate ( auth request , string provider , i _ auth & stack -> -> methods , </%> <%> _ _ ; ;"]}, {"before_ctx": "<%> <*> auth -> authenticate </%> ", "before_line": " public override object authenticate ( i _ service _ base auth _ service , i _ auth _ session session , auth request ) ", "after_ctx": " ", "after_line": "public override object authenticate ( i _ service _ base auth _ service , i _ auth _ session session , authenticate request )", "predictions": ["public override object authenticate ( i _ service _ base auth _ service ) i . id )"]}, {"before_ctx": "<%> <*> auth -> authenticate </%> ", "before_line": " public override object authenticate ( i _ service _ base auth _ service , i _ auth _ session session , auth request ) ", "after_ctx": " ", "after_line": "public override object authenticate ( i _ service _ base auth _ service , i _ auth _ session session , authenticate request )", "predictions": ["public override object authenticate ( i _ service _ base <%> _ <-> _ base : <%> ( <%> _ description http <%> <%> <%> directory directory ;"]}, {"before_ctx": "<%> <*> auth -> authenticate </%> ", "before_line": " public override object authenticate ( i _ service _ base auth _ service , i _ auth _ session session , auth request ) ", "after_ctx": " ", "after_line": "public override object authenticate ( i _ service _ base auth _ service , i _ auth _ session session , authenticate request )", "predictions": ["public override object authenticate ( i _ service _ </@> . base . <-> ) <%> _ context . </%> </%> , parameter </%>"]}, {"before_ctx": " ", "before_line": " return type . is _ generic _ type ( ) & & type . get _ generic _ type _ definition ( ) = = typeof ( nullable < > ) ; ", "after_ctx": " <%> <-> ( ) </%> <%> <-> ( </%> <%> <-> ) </%>", "after_line": "return type . is _ generic _ type & & type . get _ generic _ type _ definition ( ) = = typeof ( nullable < > ) ;", "predictions": ["return type . is _ generic _ type & & type <@> </%> typeof -> -> typeof virtual"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " if ( model _ type . is _ value _ type ( ) | | model _ type . is _ nullable _ type ( ) ) ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%>", "after_line": "if ( model _ type . is _ value _ type | | model _ type . is _ nullable _ type ( ) )", "predictions": ["if ( model _ type . is _ value attribute </%> var generic | _ type . ; . ; </%> ->"]}, {"before_ctx": "<%> <-> ( ) </%> <%> <-> ( ) </%> ", "before_line": " if ( ! model _ type . is _ generic _ type ( ) ) ", "after_ctx": " ", "after_line": "if ( ! model _ type . is _ generic _ type )", "predictions": ["if ( ! model _ type . is _ request ;"]}, {"before_ctx": " ", "before_line": " var base _ type = model _ type . base _ type ( ) ; ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "var base _ type = model _ type . base _ type ;", "predictions": ["var base _ type = model _ type ;"]}, {"before_ctx": "<%> <-> ( ) </%> ", "before_line": " base _ type = base _ type . base _ type ( ) ; ", "after_ctx": " ", "after_line": "base _ type = base _ type . base _ type ;", "predictions": ["base _ type = base _ type ;"]}, {"before_ctx": " ", "before_line": " using service _ stack _ virtual _ path ; using service _ stack _ web _ host _ endpoints ; namespace service _ stack _ plugins _ embedded _ virtual _ path ", "after_ctx": " <%> <*> throw new not -> return child _ providers . first </%> <%> <*> implemented -> or </%> <%> <*> exception -> default </%> <%> <-> STR </%> <%> <+> . root _ directory </%>", "after_line": "namespace service _ stack _ virtual _ path", "predictions": ["namespace service _ stack _ web _ host _ endpoints"]}, {"before_ctx": "<%> <-> id _ utils . </%> ", "before_line": " return id _ utils . create _ urn < t > ( id ) ; ", "after_ctx": " <%> <*> string . format ( -> $ </%> <%> <*> , typeof ( t ) . name . to _ lower _ invariant ( ) , id ) ; -> ; </%>", "after_line": "return create _ urn < t > ( id ) ;", "predictions": ["return id _ utils . create _ urn ( id ) t service statement statement statement ( map _ urn ) request ;"]}, {"before_ctx": "<%> <-> if ( this . timeout . has _ value ) { client . timeout = ( int ) this . timeout . value . total _ milliseconds ; } </%> <%> <*> if ( this . credentials ! = null ) { client . credentials = this . credentials ; } -> if ( proxy ! = null ) client . proxy = proxy ; </%> <%> <+> if ( this . timeout . has _ value ) client . timeout = ( int ) this . timeout . value . total _ milliseconds ; if ( this . credentials ! = null ) client . credentials = this . credentials ; </%> ", "before_line": " { http _ web _ request _ filter ( client ) ; } ", "after_ctx": " ", "after_line": "http _ web _ request _ filter ( client ) ;", "predictions": ["http _ web _ request _ filter ( client ) ;"]}, {"before_ctx": "<%> <-> obsolete _ to _ avoid _ name _ conflicts _ with _ mv _ controller _ base _ this _ has _ been _ renamed _ to _ service _ stack _ controller public abstract class controller _ base < t > : service _ stack _ controller < t > where t : class , i _ auth _ session , new ( ) { } obsolete _ to _ avoid _ name _ conflicts _ with _ mv _ controller _ base _ this _ has _ been _ renamed _ to _ service _ stack _ controller public abstract class controller _ base : service _ stack _ controller { } </%> ", "before_line": " where t : class , i _ auth _ session , new ( ) ", "after_ctx": " ", "after_line": "where t : i _ auth _ session", "predictions": ["where t : i _ auth _ session , new ( )"]}, {"before_ctx": "<%> <+> using system _ linq ; </%> <%> <-> where t : class </%> <%> <*> foreach -> if ( fields . contains </%> <%> <*> var field in fields -> default ( t ) </%> <%> <+> ) </%> ", "before_line": " if ( field = = null ) { throw new argument _ null _ exception ( typeof ( t ) . name ) ; } ", "after_ctx": " ", "after_line": "throw new argument _ null _ exception ( typeof ( t ) . name ) ;", "predictions": ["throw new argument _ null _ exception ( typeof ( t <%> ( host request ) . name . field ) . name . <+> _ null ) http _ null http return </%> _ name http _ = _ for _ name ;"]}, {"before_ctx": "<%> <-> where t : class </%> ", "before_line": " byte [ ] compressed _ bytes = stream _ extensions . compress ( serialized _ dto , request _ context . compression _ type ) ; ", "after_ctx": " <%> <-> where t : class </%>", "after_line": "byte [ ] compressed _ bytes = serialized _ dto . compress ( request _ context . compression _ type ) ;", "predictions": ["byte [ ] compressed _ bytes = stream _ extensions : compress _ dto < request . type . new ( using _ first </%> request _ app request service service var var ( [ _ <@> . </@> _ get ( empty _ = . </@> . compression . filter if { if [ . compression if filter if { ;"]}, {"before_ctx": " ", "before_line": " def ( STR , 1 , a = > ( a [ 0 ] is string s ) ? s . to _ upper ( ) : a [ 0 ] ! = null ? throw new exception ( STR ) : STR ) ; ", "after_ctx": " <%> <*> def ( STR , 2 , a = > ( dynamic _ number . compare _ to ( a [ 0 ] , a [ 1 ] ) < 0 ) ? true : null ) ; -> def ( STR , 2 , a = > a [ 0 ] = = null | | a [ 1 ] = = null ? a [ 0 ] = = a [ 1 ] </%> <%> <+> : dynamic _ number . is _ number ( a [ 0 ] . get _ type ( ) ) ? ( object ) ( dynamic _ number . compare _ to ( a [ 0 ] , a [ 1 ] ) < 0 ? true : null ) : a [ 0 ] is i _ comparable c </%>", "after_line": "def ( STR , 1 , a = > ( a [ 0 ] is string s ) ? s . to _ upper ( ) : a [ 0 ] ! = null ? throw new lisp _ eval _ exception ( STR , a [ 0 ] ) : STR ) ;", "predictions": ["def ( STR , 1 , a = > ( a [ 0 ] is string ] context <@> ( http ; < http ; throw <@> http </%> ! session session context context context session session context context session session http ? . var ;"]}, {"before_ctx": "<%> <+> ! </%> <%> <-> http _ </%> ", "before_line": " http _ cookie . domain = ( string . is _ null _ or _ empty ( cookie . domain ) ? null : cookie . domain ) ; ", "after_ctx": " ", "after_line": "http _ cookie . domain = cookie . domain ;", "predictions": ["http _ cookie . domain = ( string . is </%> ) <@> _ _ _ names data data http _ ( ( contains <%> <%> <%> <%> <%> <-> -> request ) ? path * directory ( = = = = = = = cookie request request ) : x request request request ) ; . ? x x x . ? to _ to _ or base , , , , to _ to _ or . . . . . . . . . class to _ to _ or base , , , , to _"]}, {"before_ctx": " ", "before_line": " var html = markdown _ format . instance . transform ( markdown ) ; ", "after_ctx": " <%> <+> abstract </%> <%> <*> if -> eval </%> <%> <*> statement -> expr </%> <%> <*> expr -> statement </%> <%> <*> block -> base </%> <%> <*> public if -> protected eval </%> <%> <*> statement -> expr </%> <%> <*> expr -> statement </%> <%> <*> block -> base </%> <%> <-> this . param _ names = new list < string > ( ) ; </%>", "after_line": "var html = transform ( markdown ) ;", "predictions": ["var html = markdown . transform ( ) ;"]}, {"before_ctx": " ", "before_line": " public interface i _ user _ auth _ repository : i _ user _ auth _ repository < user _ auth > { } public interface i _ user _ auth _ repository < t _ user _ auth > : i _ auth _ repository where t _ user _ auth : class , i _ user _ auth ", "after_ctx": " <%> <*> t _ user _ auth create _ user _ auth ( t _ user _ auth new _ user , string password ) ; t _ user _ auth update _ user _ auth ( t _ user _ auth existing _ user , t _ user _ auth new _ user , string password ) ; bool try _ authenticate ( string user _ name , string password , out t _ user _ auth user _ auth ) ; bool try _ authenticate ( dictionary < string , string > digest _ headers , string private _ key , int nonce _ time _ out , string sequence , out t _ user _ auth user _ auth ) ; t _ user _ auth get _ user _ auth ( string user _ auth _ id ) ; new t _ user _ auth get _ user _ auth _ by _ user _ name ( string user _ name _ or _ email ) ; new t _ user _ auth get _ user _ auth ( i _ auth _ session auth _ session , i _ auth _ tokens tokens ) ; void save _ user _ auth ( t _ user _ auth user _ auth ) ; -> i _ user _ auth create _ user _ auth ( i _ user _ auth new _ user , string password ) ; </%>", "after_line": "public interface i _ user _ auth _ repository : i _ auth _ repository", "predictions": ["public interface i _ user _ auth _ repository : i _ user _ auth _ repository < user _ auth > { } public interface i _ user _ auth _ repository < t _ user _ auth > : i _ user _ auth"]}, {"before_ctx": "<%> <+> get { return string . is _ null _ or _ empty ( request . headers [ http _ headers . x _ real _ ip ] ) ? null : request . headers [ http _ headers . x _ real _ ip ] ; } } </%> ", "before_line": " return remote _ ip ? ? ( remote _ ip = request . headers [ http _ headers . x _ forwarded _ for ] ? ? ( request . headers [ http _ headers . x _ real _ ip ] ? ? request . user _ host _ address ) ) ; ", "after_ctx": " ", "after_line": "return remote _ ip ? ? ( remote _ ip = x _ forwarded _ for ? ? ( x _ real _ ip ? ? request . user _ host _ address ) ) ;", "predictions": ["return remote _ ip ? ? ( remote _ ip = request . ) ;"]}, {"before_ctx": "<%> <+> get { return string . is _ null _ or _ empty ( request . headers [ http _ headers . x _ real _ ip ] ) ? null : request . headers [ http _ headers . x _ real _ ip ] ; } } </%> ", "before_line": " return remote _ ip ? ? ( remote _ ip = request . headers [ http _ headers . x _ forwarded _ for ] ? ? ( request . headers [ http _ headers . x _ real _ ip ] ? ? request . user _ host _ address ) ) ; ", "after_ctx": " ", "after_line": "return remote _ ip ? ? ( remote _ ip = x _ forwarded _ for ? ? ( x _ real _ ip ? ? request . user _ host _ address ) ) ;", "predictions": ["return remote _ ip ? ? ( remote _ ip = request . headers [ http _ , . ( : a ( s ( : : : : a a [ [ a ( : a a a _ ] . </@> a ) . [ </@> a a . </@> . </@> a a . 0 . </@> a . </@> _ </%> _ address ) , string string user _ </%> _ address ) ) ) _ t _ headers user user ) ) , , string user _ </%> _ address ) ) ) ) _"]}, {"before_ctx": " ", "before_line": " var host _ directory _ path = append _ partial _ path _ modifier ! = null ? assembly _ directory _ path + append _ partial _ path _ modifier : assembly _ directory _ path ; ", "after_ctx": " <%> <*> * copied over into the / bin / folder with the dlls * / var map _ path = map _ absolute _ path ( relative _ path , null ) ; -> var map _ path = map _ absolute _ path ( relative _ path , string . format ( STR , path . directory _ separator _ char ) ) ; </%>", "after_line": "var host _ directory _ path = assembly _ directory _ path + append _ partial _ path _ modifier ;", "predictions": ["var host _ directory _ path = assembly _ directory _ path + null _ : . modifier timeout to _ partial _ path _ modifier to _ path to path ;"]}, {"before_ctx": "<%> <-> _ description </%> ", "before_line": " api _ member _ name _ sentence _ data _ type _ string _ description _ the _ sentence _ to _ echo _ is _ required _ true _ parameter _ type _ form _ allow _ multiple _ false ", "after_ctx": " ", "after_line": "api _ member _ description _ the _ sentence _ to _ echo _ parameter _ type _ form _ data _ type _ string _ is _ required _ true _ name _ sentence", "predictions": ["api _ member _ name _ sentence _ data _ type _ _ ) ( <+> <%> </@> <%> _ res _ res _ allow _ null _ false"]}, {"before_ctx": "<%> <*> void -> object </%> ", "before_line": " execute ( request ) ; return ; ", "after_ctx": " <%> <+> return create _ response _ dto ( request ) ; </%> <%> <*> void -> object </%> <%> <+> return </%>", "after_line": "return execute ( request ) ;", "predictions": ["return execute ( request ) ;"]}, {"before_ctx": "<%> <-> full _ </%> <%> <-> markdown _ </%> <%> <-> markdown _ </%> <%> <-> markdown _ </%> ", "before_line": " last _ modified = template _ file . last _ write _ time , service = template _ service , ", "after_ctx": " ", "after_line": "last _ modified = template _ file . last _ modified , service = template _ service ,", "predictions": ["last _ modified = template _ file . last _ write attribute . ctx </%> ctx <%> request context ;"]}, {"before_ctx": "<%> <*> http -> mock </%> <%> <*> request -> http </%> <%> <*> context -> request </%> ", "before_line": " return new http _ request _ context ( ctx , new mock _ http _ response ( ) , null , content _ format . get _ endpoint _ attribute ( http _ method ) ) ; ", "after_ctx": " ", "after_line": "return ctx ;", "predictions": ["return new http _ request _ context ( ctx , new t ( <%> _ response , assert ( path map map map directory directory ? ; . </@> ;"]}, {"before_ctx": "<%> <*> context -> ctx </%> <%> <+> var context = ctx . request . request _ context . http _ context ; </%> ", "before_line": " var http _ req = new asp _ net _ request ( path _ translated , context . request ) ; ", "after_ctx": " ", "after_line": "var http _ req = new asp _ net _ request ( context , path _ translated ) ;", "predictions": ["var http _ req = new asp _ net _ request ;"]}, {"before_ctx": "<%> <*> internal static object execute _ service ( object request , request _ attributes request _ attrs , i _ http _ request http _ req , i _ http _ response http _ res ) -> internal static object execute _ service ( object request , i _ request http _ req ) </%> ", "before_line": " return assert _ app _ host ( ) . service _ controller . execute ( request , new http _ request _ context ( http _ req , http _ res , request , request _ attrs ) ) ; ", "after_ctx": " ", "after_line": "return assert _ app _ host ( ) . service _ controller . execute ( request , http _ req ) ;", "predictions": ["return assert _ app _ host ( request , new http _ request _ <*> map ( , , ) { { filter this { = = = = ! ( ( ( ( . = . timeout ) _ ! ( ( ( ( _ < , : _ < class request class request class _ < request class request class request request request _ ) request request request request _ ) request request _ ) request request _ ) request request _ ) request request _ ) request request _ ) request request _ ) request _ )"]}, {"before_ctx": "<%> <*> mock -> basic </%> <%> <-> _ context </%> <%> <-> _ context </%> <%> <-> _ context </%> <%> <-> _ context </%> <%> <*> mock -> basic </%> <%> <-> _ context </%> <%> <*> o _ auth _ user _ session = request _ context . reload _ session ( ) ; var http _ req = request _ context . get < i _ http _ request > ( ) ; var http _ res = request _ context . get < i _ http _ response > ( ) ; o _ auth _ user _ session . id = http _ res . create _ session _ id ( http _ req ) ; http _ req . items [ service _ extensions . request _ items _ session _ key ] = o _ auth _ user _ session ; -> o _ auth _ user _ session = request . reload _ session ( ) ; </%> <%> <+> o _ auth _ user _ session . id = request . response . create _ session _ id ( request ) ; request . items [ service _ extensions . request _ items _ session _ key ] = o _ auth _ user _ session ; </%> ", "before_line": " request _ context . container = mock _ app _ host . container ; request _ context . container . register < i _ auth _ repository > ( user _ auth _ repository ) ; ", "after_ctx": " <%> <-> _ context </%> <%> <-> _ context </%> <%> <-> _ context </%> <%> <-> _ context </%>", "after_line": "mock _ app _ host . container . register < i _ auth _ repository > ( user _ auth _ repository ) ;", "predictions": ["request _ context . container = user _ auth _ repository ;"]}, {"before_ctx": " ", "before_line": " where t _ attribute : system . attribute ", "after_ctx": " <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>", "after_line": "where t _ attribute : attribute", "predictions": ["where t _ attribute : attribute"]}, {"before_ctx": "<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> ", "before_line": " where t _ attribute : system . attribute ", "after_ctx": " <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>", "after_line": "where t _ attribute : attribute", "predictions": ["where t _ attribute : attribute"]}, {"before_ctx": "<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> ", "before_line": " where t _ attribute : system . attribute ", "after_ctx": " <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>", "after_line": "where t _ attribute : attribute", "predictions": ["where t _ attribute : attribute"]}, {"before_ctx": "<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> ", "before_line": " where t _ attribute : system . attribute ", "after_ctx": " ", "after_line": "where t _ attribute : attribute", "predictions": ["where t _ attribute : attribute"]}, {"before_ctx": " ", "before_line": " where t _ attribute : system . attribute ", "after_ctx": " <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>", "after_line": "where t _ attribute : attribute", "predictions": ["where t _ attribute : attribute"]}, {"before_ctx": "<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> ", "before_line": " where t _ attribute : system . attribute ", "after_ctx": " <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>", "after_line": "where t _ attribute : attribute", "predictions": ["where t _ attribute : attribute"]}, {"before_ctx": "<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> ", "before_line": " where t _ attribute : system . attribute ", "after_ctx": " <%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%>", "after_line": "where t _ attribute : attribute", "predictions": ["where t _ attribute : attribute"]}, {"before_ctx": "<%> <*> where t _ attribute : system . attribute -> where t _ attribute : attribute </%> ", "before_line": " where t _ attribute : system . attribute ", "after_ctx": " ", "after_line": "where t _ attribute : attribute", "predictions": ["where t _ attribute : attribute"]}, {"before_ctx": "<%> <*> get -> internal </%> <%> <*> customer -> only </%> ", "before_line": " port _ typeof _ get _ customer _ endpoint _ attributes _ external _ endpoint _ attributes _ http _ get ", "after_ctx": " ", "after_line": "port _ typeof _ http _ get _ endpoint _ attributes _ external _ endpoint _ attributes _ http _ get", "predictions": ["port _ typeof _ get _ customer _ : _ using attribute attribute attribute attribute attribute attribute _ endpoint _ database _ < _ service"]}, {"before_ctx": "<%> <-> using system ; using system _ collections _ generic ; </%> <%> <-> using service _ stack _ service _ host ; </%> ", "before_line": " : i _ service < rest _ movies > , i _ rest _ get _ service < rest _ movies > , i _ rest _ put _ service < rest _ movies > , i _ rest _ post _ service < rest _ movies > , i _ rest _ delete _ service < rest _ movies > , i _ requires _ request _ context ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": ": i _ service , i _ requires _ request _ context", "predictions": [": i _ service < rest _ movies > , i _ rest _ get _ service < rest _ movies > , i _ rest _ put _ service < rest _ movies > , i _ rest _ delete _ service < rest _ movies > , i _ requires _ request _ context"]}, {"before_ctx": " ", "before_line": " public class cors _ feature _ service : i _ service < cors _ feature _ request > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class cors _ feature _ service : i _ service", "predictions": ["public class cors _ feature _ service service class execute _ service"]}, {"before_ctx": " ", "before_line": " public class global _ cors _ feature _ service : i _ service < global _ cors _ feature _ request > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class global _ cors _ feature _ service : i _ service", "predictions": ["public class global _ cors _ feature _ service i _ <*>"]}, {"before_ctx": " ", "before_line": " public class verb _ match _ service : i _ service < verb _ match > , i _ rest _ service < verb _ match > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class verb _ match _ service : i _ service", "predictions": ["public class verb _ match _ service </@> attributes : stack _ rest where attribute where"]}, {"before_ctx": " ", "before_line": " public class verb _ match _ service : i _ service < verb _ match > , i _ rest _ service < verb _ match > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class verb _ match _ service : i _ service", "predictions": ["public class verb _ match _ service : i _ request _ ;"]}, {"before_ctx": " ", "before_line": " : i _ service < requires _ context > , i _ requires _ request _ context ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": ": i _ service , i _ requires _ request _ context", "predictions": [": i _ requires _ request _ context"]}, {"before_ctx": " ", "before_line": " public class test _ service : i _ service < test > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class test _ service : i _ service", "predictions": ["public class test _ service : i _ service"]}, {"before_ctx": "<%> <-> using system ; </%> <%> <-> using service _ stack _ configuration ; </%> <%> <-> using service _ stack _ server ; </%> ", "before_line": " public class get _ customer _ service : i _ service < get _ customer > ", "after_ctx": " ", "after_line": "public class get _ customer _ service : i _ service", "predictions": ["public class get _ customer _ service : i attribute"]}, {"before_ctx": " ", "before_line": " public class hello _ service : i _ service < hello > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class hello _ service : i _ service", "predictions": ["public class hello _ service : i _ :"]}, {"before_ctx": " ", "before_line": " public class hello _ service : i _ service < hello > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class hello _ service : i _ service", "predictions": ["public class hello _ service : i _ test"]}, {"before_ctx": " ", "before_line": " public class hello _ service : i _ service < hello > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class hello _ service : i _ service", "predictions": ["public class hello _ service : i _ service"]}, {"before_ctx": "<%> <-> using service _ stack _ server ; </%> ", "before_line": " public class basic _ service : i _ service < basic _ request > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class basic _ service : i _ service", "predictions": ["public class basic _ service : i _ <%>"]}, {"before_ctx": " ", "before_line": " public class hello _ image _ service : i _ service < hello _ image > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class hello _ image _ service : i _ service", "predictions": ["public class hello _ image _ service -> request attribute attribute"]}, {"before_ctx": " ", "before_line": " public class hello _ image _ service : i _ service < hello _ image > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class hello _ image _ service : i _ service", "predictions": ["public class hello _ image _ service : i attribute system"]}, {"before_ctx": "<%> <-> using system ; using service _ stack _ server ; using service _ stack _ service _ host ; </%> ", "before_line": " public class reset _ movie _ database _ service : i _ service < reset _ movie _ database > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class reset _ movie _ database _ service : i _ service", "predictions": ["public class reset _ movie _ database _ service : i _ service"]}, {"before_ctx": " ", "before_line": " public class raw _ request _ service : i _ service < raw _ request > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class raw _ request _ service : i _ service", "predictions": ["public class raw _ request _ service : i _ t"]}, {"before_ctx": " ", "before_line": " public class ioc _ scope _ service : i _ service < ioc _ scope > , i _ disposable ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class ioc _ scope _ service : i _ service , i _ disposable", "predictions": ["public class ioc _ scope _ service -> : <%> _ execute"]}, {"before_ctx": "<%> <-> using service _ stack _ server ; using service _ stack _ service _ host ; </%> ", "before_line": " public class failing _ service : i _ service < failing _ request > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class failing _ service : i _ service", "predictions": ["public class failing _ service : i _ service"]}, {"before_ctx": " ", "before_line": " public class store _ customers _ service : i _ service < store _ customers > ", "after_ctx": " <%> <*> execute -> any </%> <%> <+> drop _ and _ </%> <%> <-> false </%>", "after_line": "public class store _ customers _ service : i _ service", "predictions": ["public class store _ customers _ service , i _ <*>"]}, {"before_ctx": " ", "before_line": " : i _ service < batch _ widget _ validation _ request > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": ": i _ service", "predictions": [": i _ service"]}, {"before_ctx": " ", "before_line": " : i _ service < widget _ validation _ request > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": ": i _ service", "predictions": [": i _ service"]}, {"before_ctx": "<%> <-> using service _ stack _ server ; using service _ stack _ service _ host ; </%> ", "before_line": " : i _ service < t _ request > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": ": i _ service", "predictions": [": i _ service"]}, {"before_ctx": " ", "before_line": " public class rest _ test _ service : i _ service < rest _ test > , i _ rest _ get _ service < rest _ test > , i _ rest _ put _ service < rest _ test > , i _ rest _ post _ service < rest _ test > , i _ rest _ delete _ service < rest _ test > ", "after_ctx": " <%> <*> execute -> any </%>", "after_line": "public class rest _ test _ service : i _ service", "predictions": ["public class rest _ test _ service : i _ service < rest _ test > , i _ rest _ get _ service < rest _ test > , i _ rest _ put _ service < rest _ test > , i _ rest _ delete _ service < rest _ test >"]}, {"before_ctx": " ", "before_line": " public class generic _ service < t > : i _ service < t > ", "after_ctx": " <%> <*> execute -> any </%> <%> <-> ( ) </%>", "after_line": "public class generic _ service < t > : i _ service", "predictions": ["public class generic _ service : i service , request </%>"]}, {"before_ctx": "<%> <-> < t > </%> <%> <*> execute -> any </%> ", "before_line": " return new generic _ response ( ) { data = request . get _ type ( ) . full _ name } ; ", "after_ctx": " ", "after_line": "return new generic _ response { data = request . get _ type ( ) . full _ name } ;", "predictions": ["return new generic _ response { data = request . get _ type ( ( ( ( value . file _ name } ) response ) . full _ name } . </@> _ set } } . from _ key } = = </@> ! <%> _ from list list ) . -> _ , } <"]}, {"before_ctx": " ", "before_line": " public string error _ response _ except ( template _ scope _ context scope , i _ enumerable < object > fields ) = > ", "after_ctx": " <%> <-> i _ enumerable < </%> <%> <-> > </%> <%> <+> var field _ names = context . default _ filters . to _ var _ names ( fields ) ; </%> <%> <-> var field _ names = new list < string > ( ) ; </%> <%> <+> _ name </%> <%> <*> fields -> field _ names </%>", "after_line": "public string error _ response _ except ( template _ scope _ context scope , object fields ) = >", "predictions": ["public string error _ response _ except ( template _ scope _ i <+> <@> for _ <+> <%> > <-> > >"]}, {"before_ctx": "<%> <-> i _ enumerable < </%> <%> <-> > </%> ", "before_line": " public string error _ response _ except ( template _ scope _ context scope , response _ status error _ status , i _ enumerable < object > fields ) ", "after_ctx": " <%> <+> var field _ names = context . default _ filters . to _ var _ names ( fields ) ; </%> <%> <-> var field _ names = new list < string > ( ) ; </%> <%> <+> _ name </%> <%> <*> fields -> field _ names </%> <%> <-> var field _ name = field . as _ string ( ) ; </%>", "after_line": "public string error _ response _ except ( template _ scope _ context scope , response _ status error _ status , object fields )", "predictions": ["public string error _ response _ except ( template _ scope _ context scope , -> _ <@> name _ <*> , , id"]}, {"before_ctx": "<%> <-> i _ enumerable < </%> <%> <-> > </%> <%> <-> i _ enumerable < </%> <%> <-> > </%> <%> <+> var field _ names = context . default _ filters . to _ var _ names ( fields ) ; </%> ", "before_line": " var field _ names = new list < string > ( ) ; foreach ( var field in fields ) { var field _ name = field . as _ string ( ) ; ", "after_ctx": " <%> <-> field _ names . add ( field _ name ) ; </%>", "after_line": "foreach ( var field _ name in field _ names ) {", "predictions": ["foreach ( var field in fields ) {"]}, {"before_ctx": " ", "before_line": " var response = new stream _ reader ( web _ req . get _ response ( ) . get _ response _ stream ( ) ) . read _ to _ end ( ) ; ", "after_ctx": " <%> <-> new stream _ reader ( </%> <%> <-> ) </%>", "after_line": "var response = web _ req . get _ response ( ) . get _ response _ stream ( ) . read _ to _ end ( ) ;", "predictions": ["var response = new stream _ reader ( web _ req ) ) ) ) test _ in _ </@> ( ( _ ( ( , <%> _ for . field </%> </%> </%> ) field ) field </%> </%> </%> </%> </%>"]}, {"before_ctx": "<%> <-> new stream _ reader ( </%> <%> <-> ) </%> ", "before_line": " var error _ response = new stream _ reader ( error _ web _ response . get _ response _ stream ( ) ) . read _ to _ end ( ) ; ", "after_ctx": " ", "after_line": "var error _ response = error _ web _ response . get _ response _ stream ( ) . read _ to _ end ( ) ;", "predictions": ["var error _ response = new stream _ reader ( error _ key _ ) . <@> _ ) <-> key _ in _ </@> ) ;"]}, {"before_ctx": "<%> <+> js _ config . ut _ </%> ", "before_line": " ms . seek ( 0 , seek _ origin . begin ) ; var reader = new stream _ reader ( ms ) ; return reader . read _ to _ end ( ) ; ", "after_ctx": " ", "after_line": "return ms . read _ to _ end ( ) ;", "predictions": ["return ms . seek ( 0 , seek _ origin . <@> . base _ . ) = id = id = </%> read <%> <%> . <*> = -> _ default _ string <%> ( </%> _ ) </%> ( var . ut ) _ i <%> names field field ) ( field field ) _ value ( <*> , _ model -> <*> user user user user user user user user user user user user user user user user user user user _ long user user user user user user user user user user user user user user"]}, {"before_ctx": " ", "before_line": " var expected _ contents = new stream _ reader ( uploaded _ file . open _ read ( ) ) . read _ to _ end ( ) ; ", "after_ctx": " <%> <-> new stream _ reader ( </%> <%> <-> ) </%>", "after_line": "var expected _ contents = uploaded _ file . open _ read ( ) . read _ to _ end ( ) ;", "predictions": ["var expected _ contents = new stream _ reader ( uploaded _ type rest _ attribute ) ) . class _ char _ </@> ( ; ; ; _ from ! open ( file ! ( open ( _ </%> ( _ </%> ) ( ( </%> _ = > </%> _ <+> </%> </%> <%> <%> <%> <%> ) ) </%> ) </%>"]}, {"before_ctx": " ", "before_line": " var value = redis _ exec ( r = > r . get _ value _ from _ hash ( hash _ id , test _ key ) ) ; ", "after_ctx": " <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>", "after_line": "var value = get _ value _ from _ hash ( hash _ id , test _ key ) ;", "predictions": ["var value = redis _ exec ( r = > r stream stream stream stream <-> ) </@> ,"]}, {"before_ctx": "<%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> ", "before_line": " var value = redis _ exec ( r = > r . get _ value _ from _ hash ( hash _ id , test _ key ) ) ; ", "after_ctx": " <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>", "after_line": "var value = get _ value _ from _ hash ( hash _ id , test _ key ) ;", "predictions": ["var value = redis _ exec ( r = > r </%> </%> ) ; string string <+> . <+> _ > _ for _ = ) entry entry entry instance _ model instance instance instance instance instance instance _ model instance . . _ n <%> . . instance . . . . . . _ n _ <+> _ long _ </%> client to binding <%> binding binding code ) to"]}, {"before_ctx": "<%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> ", "before_line": " var value = redis _ exec ( r = > r . get _ value _ from _ hash ( hash _ id , test _ key ) ) ; ", "after_ctx": " ", "after_line": "var value = get _ value _ from _ hash ( hash _ id , test _ key ) ;", "predictions": ["var value = redis _ exec ( r = > r . get _ value _ from _ hash ( test <%> > ) ! > <%> _ <@> ) set set _ value _ for _ </%> ) set set _ </%> ) string"]}, {"before_ctx": " ", "before_line": " redis _ exec ( r = > r . set _ entry ( test _ key , STR ) ) ; ", "after_ctx": " <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>", "after_line": "set _ entry ( test _ key , STR ) ;", "predictions": ["redis _ exec ( r = > test _ key . <@> ( <@> _ file </@> STR rest _ type ;"]}, {"before_ctx": "<%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> ", "before_line": " redis _ exec ( r = > r . set _ entry ( test _ key , STR ) ) ; ", "after_ctx": " ", "after_line": "set _ entry ( test _ key , STR ) ;", "predictions": ["redis _ exec ( r = > r . set _ entry ( STR ) ) ,"]}, {"before_ctx": " ", "before_line": " redis _ exec ( r = > r . set _ entry ( test _ key , test _ value ) ) ; ", "after_ctx": " <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>", "after_line": "set _ entry ( test _ key , test _ value ) ;", "predictions": ["redis _ exec ( r = > r . set _ entry ( , , hash _ key ) ) ; _ id </%> ;"]}, {"before_ctx": "<%> <*> string _ values . for _ each ( x = > redis _ exec ( r = > r . set _ entry ( x , test _ value ) ) ) ; -> string _ values . for _ each ( x = > set _ entry ( x , test _ value ) ) ; </%> ", "before_line": " redis _ exec ( r = > r . set _ entry ( test _ key , STR ) ) ; ", "after_ctx": " <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>", "after_line": "set _ entry ( test _ key , STR ) ;", "predictions": ["redis _ exec ( r = > test _ key . STR ) ;"]}, {"before_ctx": " ", "before_line": " redis _ exec ( r = > r . set _ entry ( test _ key , test _ value ) ) ; ", "after_ctx": " <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>", "after_line": "set _ entry ( test _ key , test _ value ) ;", "predictions": ["redis _ exec ( r = > r . set _ expected ) = </@> _ type <@> <@> <@> </%> <@> <@> _ id <@> _ value ;"]}, {"before_ctx": "<%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> ", "before_line": " redis _ exec ( r = > r . set _ entry ( test _ key , test _ value , expire _ in ) ) ; ", "after_ctx": " <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>", "after_line": "set _ entry ( test _ key , test _ value , expire _ in ) ;", "predictions": ["redis _ exec ( r = > r . set _ <@> ( value _ , & item _ -> var var > </%> </%> for _ name field _ values ) _ for ) ) ;"]}, {"before_ctx": "<%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> ", "before_line": " redis _ exec ( r = > r . set _ entry ( test _ key , test _ value ) ) ; ", "after_ctx": " <%> <*> string _ values . for _ each ( x = > redis _ exec ( r = > r . set _ entry ( x , x ) ) ) ; -> string _ values . for _ each ( x = > set _ entry ( x , x ) ) ; </%>", "after_line": "set _ entry ( test _ key , test _ value ) ;", "predictions": ["redis _ exec ( r = > r . set _ entry ( test _ -> </%> ) <%> i _ info <%> <%> <%> <%> client client _ <@> string ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( STR ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ( <*> _ < ("]}, {"before_ctx": " ", "before_line": " redis _ exec ( r = > r . set _ entry ( test _ key , test _ value ) ) ; ", "after_ctx": " <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%> <%> <-> redis _ exec ( r = > r . </%> <%> <-> ) </%>", "after_line": "set _ entry ( test _ key , test _ value ) ;", "predictions": ["redis _ exec ( r = > r . set _ entry ( test _ key ) ) <+>"]}, {"before_ctx": " ", "before_line": " var value = redis _ exec ( r = > r . get _ item _ from _ list ( list _ id , 0 ) ) ; ", "after_ctx": " <%> <*> string _ list . for _ each ( x = > redis _ exec ( r = > r . add _ item _ to _ list ( list _ id , x ) ) ) ; -> add _ range _ to _ list ( list _ id , string _ list ) ; </%>", "after_line": "var value = get _ item _ from _ list ( list _ id , 0 ) ;", "predictions": ["var value = redis _ exec ( r = > r < get < get ( ) ) field _ ; <-> enumerable field field ) <*> <*> <*> ) user ( id session ) user _ ; guid guid user user session guid user user user _ <@> _ <@> _ , client , 0 _ </%> client ;"]}, {"before_ctx": "<%> <*> string _ list . for _ each ( x = > redis _ exec ( r = > r . add _ item _ to _ list ( list _ id , x ) ) ) ; -> add _ range _ to _ list ( list _ id , string _ list ) ; </%> ", "before_line": " var value = redis _ exec ( r = > r . get _ item _ from _ list ( list _ id , 0 ) ) ; ", "after_ctx": " <%> <*> var a = new dictionary < string , string > ( ) ; string _ list . for _ each ( x = > redis _ exec ( r = > r . add _ item _ to _ list ( list _ id , x ) ) ) ; -> add _ range _ to _ list ( list _ id , string _ list ) ; </%>", "after_line": "var value = get _ item _ from _ list ( list _ id , 0 ) ;", "predictions": ["var value = redis _ exec ( r = > r . get _ item _ from _ list ( list _ id , 0 ) ) ;"]}, {"before_ctx": " ", "before_line": " var rest _ path = new rest _ path ( typeof ( simple _ type ) , new rest _ service _ attribute ( STR ) ) ; ", "after_ctx": " <%> <-> new rest _ service _ attribute ( </%> <%> <-> ) </%>", "after_line": "var rest _ path = new rest _ path ( typeof ( simple _ type ) , STR ) ;", "predictions": ["var rest _ path = new rest _ path ( typeof . config _ 0 ) , stream ( </@> ( <@> ) ( <@> ( _ from _ ; <%> context </%> </%> </%> </%> <%> </%> </%> <%> ) </%> var </%> ) = <-> entry entry entry ( simple _ for ) = , field _ service _ </%> ( set ) ."]}, {"before_ctx": "<%> <-> new rest _ service _ attribute ( </%> <%> <-> ) </%> ", "before_line": " var rest _ path = new rest _ path ( typeof ( simple _ type ) , new rest _ service _ attribute ( STR ) ) ; ", "after_ctx": " ", "after_line": "var rest _ path = new rest _ path ( typeof ( simple _ type ) , STR ) ;", "predictions": ["var rest _ path = new rest _ path ( typeof ( simple _ type ( STR _ read ) reader reader hash new new ) ( ( ( class ( to _ id ( to list x ( x ( x ( x </%> _ string <%> <%> <%> <%> <%> <%> <%> <%> ) ) ) entry </%> </%> </%> </%> <%> </%> ) ) x"]}, {"before_ctx": "<%> <-> _ engine </%> <%> <-> _ engine </%> ", "before_line": " var base _ class = string _ extensions . split _ on _ first ( ( string ) host . default _ base _ class , ( char ) '<' ) [ 0 ] ; ", "after_ctx": " ", "after_line": "var base _ class = host . default _ base _ class . split _ on _ first ( '<' ) [ 0 ] ;", "predictions": ["var base _ class = string _ extensions . split _ on _ first ( ( ( string ) host ) [ ;"]}, {"before_ctx": "<%> <-> using funq ; </%> ", "before_line": " using service _ stack _ service _ host ; namespace service _ stack _ web _ host _ endpoints ", "after_ctx": " ", "after_line": "namespace service _ stack _ service _ host", "predictions": ["namespace service _ stack _ web _ host _ endpoints"]}, {"before_ctx": " ", "before_line": " if ( class _ name ! = null ) sb . append ( STR ) . append ( class _ name ) . append ( STR ) ; ", "after_ctx": " <%> <*> if ( caption ! = null ) -> if ( caption ! = null & & ! scoped _ params . try _ get _ value ( STR , out ) ) </%> <%> <+> { </%> <%> <+> scoped _ params [ STR ] = true ; } </%>", "after_line": "sb . append ( STR ) . append ( class _ name ) . append ( STR ) ;", "predictions": ["sb . append ( STR ) . append ( STR ) item item item item . = <-> ; ) ;"]}, {"before_ctx": "<%> <*> operation -> application </%> <%> <*> operation -> application </%> ", "before_line": " service _ model _ finder = model _ info . instance , ", "after_ctx": " <%> <*> call -> operation </%> <%> <*> call -> operation </%> <%> <*> i _ sakila _ n _ hibernate _ service _ facade facade = new sakila _ n _ hibernate _ service _ facade ( operation _ context . instance ) ; -> i _ sakila _ n _ hibernate _ service _ facade facade = new sakila _ n _ hibernate _ service _ facade ( application _ context . instance ) ; </%> <%> <*> call -> operation </%> <%> <*> operation -> application </%>", "after_line": "service _ model _ finder = service _ model _ finder . instance ,", "predictions": ["service _ model _ finder = model _ info . finder ,"]}, {"before_ctx": "<%> <*> public string binding { get ; } public js _ binding ( string binding ) = > binding = binding ; public override string to _ raw _ string ( ) = > STR ; -> public virtual string _ segment binding { get ; } </%> <%> <+> public js _ binding ( ) { } public js _ binding ( string binding ) = > binding = binding . to _ string _ segment ( ) ; public js _ binding ( string _ segment binding ) = > binding = binding ; public override string to _ raw _ string ( ) = > STR + binding ; </%> ", "before_line": " public override int get _ hash _ code ( ) = > ( binding ! = null ? binding . get _ hash _ code ( ) : 0 ) ; ", "after_ctx": " <%> <+> , i _ enumerable < object > </%>", "after_line": "public override int get _ hash _ code ( ) = > binding . get _ hash _ code ( ) ;", "predictions": ["public override int get _ hash _ code ( ) = > ( 0 ) ;"]}, {"before_ctx": "<%> <+> * / </%> ", "before_line": " void remove _ client _ session ( long user _ id , i _ collection < guid > client _ session _ ids ) ; ", "after_ctx": " <%> <*> user _ client _ sessions _ tuple add _ client _ session ( long user _ id , string user _ name , string ip _ address , string base _ client _ modulus , guid user _ client _ global _ id ) ; -> user _ client _ session store _ client _ session ( </%> <%> <+> guid user _ id , string user _ name , string shard _ id , string ip _ address , string user _ agent , string base _ client _ modulus , guid user _ client _ global _ id ) ; </%>", "after_line": "void remove _ client _ session ( guid user _ id , i _ collection < guid > client _ session _ ids ) ;", "predictions": ["void remove _ client _ session ( long user _ id , i _ collection < guid > ( binding ) ( ( ; </@> binding string binding binding 0 _ get </@> string string string string _ ; _ get string _ get string string string string string string string string string _ ; _ get string string </%> _ guid _ <-> </%> _ guid _ <-> </%> < string > _ guid > _ guid > _ guid _ <-> </%> </%> </%> </%> </%> _ guid _ <-> </%> _ guid _ <-> </%> </%> </%>"]}, {"before_ctx": "<%> <*> void remove _ client _ session ( long user _ id , i _ collection < guid > client _ session _ ids ) ; -> void remove _ client _ session ( </%> <%> <+> guid user _ id , i _ collection < guid > client _ session _ ids ) ; </%> <%> <*> user _ client _ sessions _ tuple add _ client _ session ( long user _ id , string user _ name , string ip _ address , string base _ client _ modulus , guid user _ client _ global _ id ) ; -> user _ client _ session store _ client _ session ( </%> <%> <+> guid user _ id , string user _ name , string shard _ id , string ip _ address , string user _ agent , string base _ client _ modulus , guid user _ client _ global _ id ) ; </%> <%> <-> void add _ user _ session ( user _ session user _ session ) ; </%> <%> <*> long -> guid </%> <%> <*> long -> guid </%> <%> <+> , string shard _ id </%> ", "before_line": " user _ client _ session get _ user _ client _ session ( long user _ id , guid client _ session _ id ) ;       user _ client _ session get _ user _ secure _ client _ session ( long user _ id , guid client _ session _ id ) ; ", "after_ctx": " ", "after_line": "user _ client _ session get _ user _ client _ session ( guid user _ id , guid client _ session _ id ) ;", "predictions": ["user _ client _ session get _ user _ client _ session ( guid user _ id , guid client _ session _ id ) ; user _ client _ session get _ user _ secure _ client _ session ( long user _ id , guid client _ session _ id ) ;"]}, {"before_ctx": "<%> <+> route _ reqstars </%> <%> <*> req _ stars -> reqstar : i </%> <%> <*> service : service -> return < reqstars _ response > </%> <%> <+> public int id { get ; set ; } public string first _ name { get ; set ; } public string last _ name { get ; set ; } public int? age { get ; set ; } public reqstar ( ) { } public reqstar ( int id , string first _ name , string last _ name , int age ) { id = id ; first _ name = first _ name ; last _ name = last _ name ; age = age ; } } csv _ csv _ behavior _ first _ enumerable public class reqstars _ response { public int total { get ; set ; } public int? aged { get ; set ; } public list < reqstar > results { get ; set ; } } public class reqstars _ service : service { public static reqstar [ ] seed _ data = new [ ] { new reqstar ( 1 , STR , STR , NUM ) , new reqstar ( 2 , STR , STR , NUM ) , new reqstar ( NUM , STR , STR , NUM ) , } ; </%> ", "before_line": " db . insert ( reqstar . seed _ data ) ; ", "after_ctx": " ", "after_line": "db . insert ( seed _ data ) ;", "predictions": ["db . insert ( reqstar ) ;"]}, {"before_ctx": " ", "before_line": " using system _ io ; ", "after_ctx": " <%> <+> public delegate void handle _ uncaught _ exception _ delegate ( i _ http _ request http _ req , i _ http _ response http _ res , string operation _ name , exception ex ) ; public delegate object handle _ service _ exception _ delegate ( object request , exception ex ) ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": "<%> <*> throw _ if _ null _ or _ empty ( str _ value , null ) ; -> if ( obj = = null ) </%> <%> <+> throw new argument _ null _ exception ( var _ name ? ? STR ) ; return obj ; </%> <%> <*> public static void throw _ if _ null _ or _ empty ( this string str _ value , string var _ name ) -> public static string throw _ if _ null _ or _ empty ( this string str _ value ) </%> <%> <+> { return throw _ if _ null _ or _ empty ( str _ value , null ) ; } public static string throw _ if _ null _ or _ empty ( this string str _ value , string var _ name ) </%> <%> <+> return str _ value ; </%> ", "before_line": " public static void throw _ if _ null _ or _ empty ( this i _ collection collection ) ", "after_ctx": " <%> <+> return collection ; </%> <%> <*> void -> i _ collection </%>", "after_line": "public static i _ collection throw _ if _ null _ or _ empty ( this i _ collection collection )", "predictions": ["public static i _ collection throw _ = _ . _ )"]}, {"before_ctx": "<%> <*> void -> i _ collection </%> <%> <+> return collection ; </%> ", "before_line": " public static void throw _ if _ null _ or _ empty < t > ( this i _ collection < t > collection ) ", "after_ctx": " <%> <+> return collection ; </%> <%> <*> void -> i _ collection < t > </%>", "after_line": "public static i _ collection < t > throw _ if _ null _ or _ empty < t > ( this i _ collection < t > collection )", "predictions": ["public static i _ collection ;"]}, {"before_ctx": "<%> <+> return collection ; </%> <%> <*> void -> i _ collection < t > </%> <%> <+> return collection ; </%> ", "before_line": " public static void throw _ if _ null _ or _ empty < t > ( this i _ collection < t > collection , string var _ name ) ", "after_ctx": " <%> <+> return collection ; </%>", "after_line": "public static i _ collection < t > throw _ if _ null _ or _ empty < t > ( this i _ collection < t > collection , string var _ name )", "predictions": ["public static i _ collection ; handle { return null < < string </%> read this _ build config context context context context context _ <+> _ <+> combine _ <+> combine combine , new ;"]}, {"before_ctx": "<%> <*> string -> read </%> <%> <*> segment -> only _ memory < char > </%> <%> <*> private -> private read _ only _ memory < </%> <%> <*> [ ] -> > </%> <%> <*> bytes -> utf </%> <%> <*> public -> public read _ only _ memory < </%> <%> <*> [ ] -> > </%> <%> <*> bytes -> utf </%> <%> <*> bytes ? -> utf . is _ empty </%> <%> <*> bytes -> utf </%> <%> <-> _ bytes </%> <%> <*> ; -> : original _ text _ utf ; </%> ", "before_line": " public string _ segment binding { get ; set ; } public string binding _ string { get ; } ", "after_ctx": " <%> <*> string -> read </%> <%> <*> segment -> only _ memory < char > </%>", "after_line": "public string binding { get ; set ; }", "predictions": ["public string binding _ string { get </%> argument </%> name this = this )"]}, {"before_ctx": "<%> <*> . value -> _ string </%> ", "before_line": " var literal = fragment . argument . as _ span ( ) . advance _ past _ whitespace ( ) ; ", "after_ctx": " <%> <*> value -> to _ string </%> <%> <*> . value -> _ string </%>", "after_line": "var literal = fragment . argument . advance _ past _ whitespace ( ) ;", "predictions": ["var literal = fragment . <@> service </@> _ stack ( _ model ;"]}, {"before_ctx": "<%> <*> string -> fragment . argument </%> <%> <-> fragment . argument </%> ", "before_line": " var literal = fragment . argument . as _ span ( ) . advance _ past _ whitespace ( ) ; ", "after_ctx": " ", "after_line": "var literal = fragment . argument . advance _ past _ whitespace ( ) ;", "predictions": ["var literal = fragment . > _ as service ( service interface ; _ request _ stack ;"]}, {"before_ctx": "<%> <+> public static razor _ generator _ build _ task instance ; </%> <%> <*> host _ context . project _ dir = this . project _ dir ; host _ context . project _ target _ path = this . project _ target _ path ; host _ context . app _ config _ path = this . app _ config _ path ; -> instance = new razor _ generator _ build _ task ( ) ; </%> <%> <+> if ( app _ config _ path = = null ) { var config _ names = new [ ] { path _ utils . combine _ paths ( project _ dir , STR ) , path _ utils . combine _ paths ( project _ dir , STR ) , path _ utils . combine _ paths ( project _ dir , STR ) , path _ utils . combine _ paths ( project _ dir , STR ) , } ; app _ config _ path = config _ names . first _ or _ default ( file . exists ) ; } </%> ", "before_line": " using ( app _ config _ scope . change ( host _ context . app _ config _ path ) ) ", "after_ctx": " ", "after_line": "using ( app _ config _ scope . change ( app _ config _ path ) )", "predictions": ["using ( app _ config _ scope _ change _ change format _ path _ path ( <%> _ view _ path ( file _ view _ path ( project ( file _ view _ path ( project ( file _ view _ path ( { ; ( <%> _ path _ path ( { ; ) ( ) ( ) ( ) ) ( ) ( ) ) ( ) ( ) ) ( ) ( app ( file _ view _ path ( ( <%> _ path _ path ( { ; ; host _ new _ path"]}, {"before_ctx": "<%> <+> using service _ stack _ service _ interface _ service _ model ; </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ <%> _ namespace _ http _ ; _ i"]}, {"before_ctx": "<%> <+> using service _ stack _ service _ interface _ service _ model ; </%> <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " ", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ http _ void _ -> _ http _ ; _ i"]}, {"before_ctx": "<%> <+> using service _ stack _ service _ interface _ service _ model ; </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ http _ ( _ )"]}, {"before_ctx": "<%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " ", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace . argument _ </%> _ value"]}, {"before_ctx": "<%> <-> using system _ linq ; </%> <%> <+> using service _ stack _ service _ interface _ service _ model ; </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ >"]}, {"before_ctx": "<%> <-> using system _ linq ; </%> <%> <+> using service _ stack _ service _ interface _ service _ model ; </%> <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " ", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ http _ i _ void _ http _ http <%>"]}, {"before_ctx": " ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ http . <%> _ <->"]}, {"before_ctx": "<%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " ", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ http _ ) . <%> _ <*> _ </%> _ <%> _ < )"]}, {"before_ctx": "<%> <+> using service _ stack _ service _ interface _ service _ model ; </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ http _ schemas _ sericestack"]}, {"before_ctx": "<%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " ", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ http _ schemas _ sericestack"]}, {"before_ctx": "<%> <*> xml -> json </%> ", "before_line": " client . content _ type = STR ; ", "after_ctx": " <%> <*> xml -> json </%> <%> <*> xml -> json </%>", "after_line": "client . content _ type = content _ type ;", "predictions": ["client . content _ type <%> <*> types types ;"]}, {"before_ctx": "<%> <*> xml -> json </%> ", "before_line": " client . content _ type = STR ; ", "after_ctx": " <%> <*> xml -> json </%>", "after_line": "client . content _ type = content _ type ;", "predictions": ["client . content _ type http http <%> STR ;"]}, {"before_ctx": "<%> <+> using system ; </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " ", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ <%> -> </@> _ <@>"]}, {"before_ctx": "<%> <+> using service _ stack _ service _ interface _ service _ model ; </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " <%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%>", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ http _ schemas _ sericestack"]}, {"before_ctx": "<%> <-> _ namespace _ http _ schemas _ sericestack _ net _ examples _ types </%> ", "before_line": " data _ contract _ namespace _ http _ schemas _ sericestack _ net _ examples _ types ", "after_ctx": " ", "after_line": "data _ contract", "predictions": ["data _ contract _ namespace _ http _ schemas _ sericestack"]}, {"before_ctx": "<%> <-> try _ resolve < i _ http _ request > ( ) ? ? ( </%> <%> <*> null -> try _ resolve < i _ http _ request > ( </%> ", "before_line": " get { return response ? ? ( response = try _ resolve < i _ http _ response > ( ) ? ? ( request _ context ! = null ? request _ context . get < i _ http _ response > ( ) : null ) ) ; } ", "after_ctx": " ", "after_line": "get { return response ? ? ( response = request _ context ! = null ? request _ context . get < i _ http _ response > ( ) : try _ resolve < i _ http _ response > ( ) ) ; }", "predictions": ["get { return response ? ? ( request = only <%> or <%> string _ = _ set } _ public , get ; get ; get ; get ; get ; last ; public public ( get ; -> ; < set . name } public < name } public ( get ; -> ;"]}, {"before_ctx": "<%> <+> public static class markdown _ format _ extensions { public static void add _ file _ and _ view ( this razor _ format razor _ format , view _ page _ ref view _ page ) { var path _ provider = ( in _ memory _ virtual _ path _ provider ) razor _ format . virtual _ path _ provider ; path _ provider . add _ file ( view _ page . file _ path , view _ page . contents ) ; razor _ format . add _ page ( view _ page ) ; } public static void add _ file _ and _ template ( this razor _ format razor _ format , string file _ path , string contents ) { var path _ provider = ( in _ memory _ virtual _ path _ provider ) razor _ format . virtual _ path _ provider ; path _ provider . add _ file ( file _ path , contents ) ; razor _ format . add _ template ( file _ path , contents ) ; } } </%> <%> <*> public razor _ format create ( string website _ template , string page _ template ) -> protected razor _ format razor _ format ; </%> <%> <+> public razor _ format add _ page ( string website _ template , string page _ template ) </%> ", "before_line": " var razor _ format = new razor _ format ( ) ; razor _ format . add _ template ( STR , website _ template ) ; razor _ format . add _ page ( new view _ page _ ref ( razor _ format , STR , page _ name , page _ template ) { template = STR , ", "after_ctx": " <%> <*> create -> add _ page </%> <%> <-> var razor _ format = new razor _ format ( ) ; </%> <%> <+> new view _ page _ ref ( razor _ format , STR , page _ name , page _ template ) { service = razor _ format . template _ service } ) ; </%>", "after_line": "razor _ format . add _ template ( STR , website _ template ) ; razor _ format . add _ page ( new view _ page _ ref ( razor _ format , STR , page _ name , page _ template ) { template = STR ,", "predictions": ["razor = STR ,"]}, {"before_ctx": " ", "before_line": " handle _ unknown _ value public object end ( ) = > stop _ execution . value ; ", "after_ctx": " <%> <*> object -> stop _ execution </%>", "after_line": "handle _ unknown _ value public stop _ execution end ( ) = > stop _ execution . value ;", "predictions": ["handle _ unknown _ value public -> end ( _ execution <%> <-> ; _ service . ->"]}, {"before_ctx": "<%> <*> object -> stop _ execution </%> ", "before_line": " handle _ unknown _ value public object end ( object ignore ) = > stop _ execution . value ; ", "after_ctx": " ", "after_line": "handle _ unknown _ value public stop _ execution end ( object ignore ) = > stop _ execution . value ;", "predictions": ["handle _ unknown _ value public _ http ( ( _ http ( namespace contract ; _ </%> namespace ;"]}, {"before_ctx": " ", "before_line": " task < http _ web _ response > get _ async < t _ response > ( i _ return _ void request _ dto ) ; ", "after_ctx": " <%> <-> < t _ response > </%> <%> <-> < t _ response > </%>", "after_line": "task < http _ web _ response > get _ async ( i _ return _ void request _ dto ) ;", "predictions": ["task < http _ web _ <%> <%> <%> _ <-> <%> ( _ if _ model <@> _ read < _ read <%> < _ <%> < 2 -> <"]}, {"before_ctx": "<%> <-> < t _ response > </%> <%> <-> < t _ response > </%> ", "before_line": " task < http _ web _ response > post _ async < t _ response > ( i _ return _ void request _ dto ) ; ", "after_ctx": " <%> <-> < t _ response > </%>", "after_line": "task < http _ web _ response > post _ async ( i _ return _ void request _ dto ) ;", "predictions": ["task < http _ web _ </%> </%> _ using namespace </%> _ io delegate _ </%> < <%> _ <*> ( collection return _ , ( <+> _ <*> _ ) ( collection ; ) ;"]}, {"before_ctx": "<%> <-> < t _ response > </%> <%> <-> < t _ response > </%> ", "before_line": " task < http _ web _ response > put _ async < t _ response > ( i _ return _ void request _ dto ) ; ", "after_ctx": " ", "after_line": "task < http _ web _ response > put _ async ( i _ return _ void request _ dto ) ;", "predictions": ["task < http _ web _ response > put _ async ( i _ <@> _ string </@> _ <-> ) ) <%> <%> <%> void ) <%> ) memory . throw response <*> </@> . return var"]}, {"before_ctx": "<%> <+> razor _ format . instance = null ; </%> ", "before_line": " } ; razor _ format . init ( ) ; ", "after_ctx": " ", "after_line": "} . init ( ) ;", "predictions": ["} ;"]}, {"before_ctx": "<%> <-> using n _ unit _ framework _ syntax _ helpers ; </%> ", "before_line": " using service _ stack _ text ; namespace service _ stack _ common _ tests _ text ", "after_ctx": " ", "after_line": "namespace service _ stack _ text _ tests", "predictions": ["namespace service _ stack _ common _ text"]}, {"before_ctx": "<%> <+> using service _ stack _ razor _ managers ; </%> ", "before_line": " public view _ page razor _ page { get ; set ; } ", "after_ctx": " ", "after_line": "public razor _ page razor _ page { get ; set ; }", "predictions": ["public view _ page razor _ page { get ; set > > > <@> > <@> , get"]}, {"before_ctx": " ", "before_line": " throw _ response _ type _ exception < t _ response > ( request , sub _ ex , request _ uri ) ; ", "after_ctx": " <%> <-> < t _ response > </%> <%> <-> private void throw _ response _ type _ exception < t _ response > ( object request , exception ex , string request _ uri ) { </%>", "after_line": "throw _ response _ type _ exception ( request , sub _ ex , request _ uri ) ;", "predictions": ["throw _ response _ type _ exception ( request , sub _ ex , </%> . </@> typeof _ object <%> <%> _ uri <%> ) ; _ ; _ protected _ ; </%> . <%> </%> string _ type ex ex _ type ex ->"]}, {"before_ctx": "<%> <-> < t _ response > </%> ", "before_line": " throw _ response _ type _ exception < t _ response > ( request , ex , request _ uri ) ; ", "after_ctx": " <%> <-> private void throw _ response _ type _ exception < t _ response > ( object request , exception ex , string request _ uri ) { </%> <%> <*> if -> private void throw _ response _ type _ exception </%> <%> <+> object </%> <%> <*> = = null -> , exception ex , string request _ uri </%> <%> <-> throw _ web _ service _ exception < t _ response > ( ex , request _ uri ) ; </%>", "after_line": "throw _ response _ type _ exception ( request , ex , request _ uri ) ;", "predictions": ["throw _ response _ type _ exception ( request , ex , request _ uri ) ;"]}, {"before_ctx": " ", "before_line": " public object execute _ message < t > ( i _ message < t > mq _ message ) ", "after_ctx": " <%> <-> < t > </%> <%> <-> < t > </%>", "after_line": "public object execute _ message ( i _ message mq _ message )", "predictions": ["public object execute _ message ( i _ message mq _ text </@>"]}, {"before_ctx": "<%> <-> < t > </%> <%> <-> < t > </%> ", "before_line": " public object execute _ message < t > ( i _ message < t > dto , i _ request req ) ", "after_ctx": " ", "after_line": "public object execute _ message ( i _ message dto , i _ request req )", "predictions": ["public object execute _ message ( i _ message dto , i _ public names ;"]}, {"before_ctx": " ", "before_line": " object execute _ message < t > ( i _ message < t > mq _ message ) ; ", "after_ctx": " <%> <-> < t > </%> <%> <-> < t > </%>", "after_line": "object execute _ message ( i _ message mq _ message ) ;", "predictions": ["object execute _ message ( i _ message mq _ message ) </@> <@> = get <+> ( async <%> <%> parse property get property get property event , , , file <%> <*> </%> ) call _ <-> ( throw </%> ( <%> _ ( mq ( </%> ) <%> </%> ) <%> </%> ) <%> <%> ) ) <%> </%> ) ) <%> ) ) ) <%> </%> ) ) stack"]}, {"before_ctx": "<%> <-> < t > </%> <%> <-> < t > </%> ", "before_line": " object execute _ message < t > ( i _ message < t > dto , i _ request request _ context ) ; ", "after_ctx": " ", "after_line": "object execute _ message ( i _ message dto , i _ request request _ context ) ;", "predictions": ["object execute _ message ( i _ message < t > dto , memory > ) async ;"]}, {"before_ctx": "<%> <-> vfs . </%> <%> <*> vfile -> path </%> <%> <*> path -> vfile . get _ contents ( ) </%> ", "before_line": " vfs . write _ file ( path , rom _ chars . to _ string ( ) ) ; ", "after_ctx": " <%> <-> vfs . </%> <%> <-> memory _ provider . instance . to _ memory _ stream ( </%> <%> <-> . span ) </%>", "after_line": "write _ file ( path , rom _ chars ) ;", "predictions": ["vfs . write _ file ( path , rom _ chars ) ;"]}, {"before_ctx": "<%> <-> vfs . </%> <%> <-> . to _ string ( ) </%> ", "before_line": " vfs . write _ file ( path , memory _ provider . instance . to _ memory _ stream ( rom _ bytes . span ) ) ; ", "after_ctx": " <%> <+> } public virtual void append _ file ( string path , read _ only _ memory < char > text ) { if ( ! ( this is i _ virtual _ files vfs ) ) throw new not _ supported _ exception ( $ STR ) ; vfs . append _ file ( path , text . to _ string ( ) ) ; </%>", "after_line": "write _ file ( path , rom _ bytes ) ;", "predictions": ["vfs . write _ file ( path , memory _ provider . instance . to _ memory _ stream , rom _ </@> <%> response response response response response response response static"]}, {"before_ctx": "<%> <-> vfs . </%> <%> <*> open -> get </%> <%> <*> read -> contents </%> ", "before_line": " vfs . append _ file ( path , rom _ chars . to _ string ( ) ) ; ", "after_ctx": " <%> <-> vfs . </%> <%> <-> memory _ provider . instance . to _ memory _ stream ( </%> <%> <-> . span ) </%>", "after_line": "append _ file ( path , rom _ chars ) ;", "predictions": ["vfs . append _ file ( path , rom _ chars ) ;"]}, {"before_ctx": "<%> <-> vfs . </%> <%> <-> . to _ string ( ) </%> ", "before_line": " vfs . append _ file ( path , memory _ provider . instance . to _ memory _ stream ( rom _ bytes . span ) ) ; ", "after_ctx": " ", "after_line": "append _ file ( path , rom _ bytes ) ;", "predictions": ["vfs . append _ file ( path , memory _ provider . instance _ to ) ) ;"]}, {"before_ctx": "<%> <*> insenstive -> insensitive </%> <%> <*> insenstive -> insensitive </%> ", "before_line": " property _ names _ map . add ( property _ name . to _ lower _ invariant ( ) , property _ name ) ; ", "after_ctx": " <%> <-> . to _ lower _ invariant ( ) </%>", "after_line": "property _ names _ map . add ( property _ name , property _ name ) ;", "predictions": ["property _ names _ map . add ( property _ name , property _ name , ( -> -> </%> . </@> . </@> . </@> . </@> ) ,"]}, {"before_ctx": "<%> <-> . to _ lower _ invariant ( ) </%> ", "before_line": " property _ names _ map . add ( property _ name . to _ lower _ invariant ( ) , property _ name ) ; ", "after_ctx": " ", "after_line": "property _ names _ map . add ( property _ name , property _ name ) ;", "predictions": ["property _ names _ map . add ( property _ name , property < page ( ( </%> _ . </%> , target _ ) , , , file _ . -> -> </%> </%> </%> </%> , < to _ ) ) var ) var </%> stack _ <%> . text . text file _ <%> file _ <%> file memory _ <%> ) memory _ <%> memory _ <%> memory , ) t t < >"]}, {"before_ctx": "<%> <-> ( cancellation _ token </%> <%> <-> ) </%> ", "before_line": " await write _ page _ async _ internal ( page , new script _ scope _ context ( this , ms , scope . scoped _ params ) , token ) ; ", "after_ctx": " ", "after_line": "await write _ page _ async _ internal ( page , new script _ scope _ context ( scope , ms , scope . scoped _ params ) , token ) ;", "predictions": ["await write _ page _ async _ internal ( page , new script _ <*> _ <-> ( object default default default default default default default default default </%> token call _ instance request request request request </%> . <*> _ if ( page object target ; </%> t _ > _ -> response <%> <%> <%> <%> t <%> <%> t ) throw ex <%> ex <%> <%> <%> <%> <%> t _ default ;"]}, {"before_ctx": "<%> <+> using system _ reflection ; using funq ; </%> <%> <*> using service _ stack _ service ; -> using service _ stack _ service _ host ; </%> <%> <+> using service _ stack _ service _ interface ; </%> ", "before_line": " public abstract class http _ listener _ base : i _ service _ host , i _ disposable ", "after_ctx": " <%> <+> private readonly date _ time start _ time ; private readonly service _ manager service _ manager ; public static http _ listener _ base instance { get ; protected set ; } </%> <%> <+> protected http _ listener _ base ( ) </%>", "after_line": "public abstract class http _ listener _ base : i _ disposable", "predictions": ["public abstract class http _ listener _ base : i _ disposable"]}, {"before_ctx": "<%> <+> public string render _ dynamic _ page _ html ( string page _ name , dictionary < string , object > scope _ args ) { return render _ dynamic _ page ( get _ view _ page ( page _ name ) , scope _ args , true , true ) ; } </%> ", "before_line": " var markdown _ page = get _ view _ page ( page _ name ) ; return render _ dynamic _ page ( markdown _ page , model , render _ html , true ) ; ", "after_ctx": " <%> <+> return render _ dynamic _ page ( markdown _ page , scope _ args , render _ html , render _ template ) ; } public string render _ dynamic _ page ( markdown _ page markdown _ page , dictionary < string , object > scope _ args , bool render _ html , bool render _ template ) </%>", "after_line": "return render _ dynamic _ page ( get _ view _ page ( page _ name ) , model , render _ html , true ) ;", "predictions": ["return render _ dynamic _ page ( get _ view _ page ( page _ name ) , model , render _ html , true ) ;"]}, {"before_ctx": "<%> <+> if ( channels . count = = 0 ) channels = event _ subscription . unknown _ channel . to _ list ( ) ; </%> ", "before_line": " channels = channels . count > 0 ? channels . to _ array ( ) : event _ subscription . unknown _ channel , ", "after_ctx": " ", "after_line": "channels = channels . to _ array ( ) ,", "predictions": ["channels = channels . to _ array ( ) ,"]}, {"before_ctx": "<%> <+> static </%> <%> <+> static </%> <%> <+> static </%> <%> <+> static </%> ", "before_line": " this . default _ file _ path = default _ file _ path ; this . default _ file _ contents = default _ file _ contents ; this . default _ file _ modified = default _ file _ modified ; ", "after_ctx": " ", "after_line": "default _ file _ path = default _ file _ path ; default _ file _ contents = default _ file _ contents ; default _ file _ modified = default _ file _ modified ;", "predictions": ["default _ file _ path = default _ file _ path ; default _ </%> . to -> _ ) ; ( ( ( ( > ) ( object _ scope _ i = = ;"]}, {"before_ctx": "<%> <+> return s = > s ; return jsv _ reader . get _ parse _ fn ( property _ type ) ; } </%> ", "before_line": " var property _ parse _ string _ fn = jsv _ reader . get _ parse _ fn ( property _ type ) ; ", "after_ctx": " ", "after_line": "var property _ parse _ string _ fn = get _ parse _ fn ( property _ type ) ;", "predictions": ["var property _ parse _ string _ fn = get _ parse _ fn </%> <+> _ </@> <%> response response response response response response response response response _ memory . typeof _ ) ( . . ) object ;"]}, {"before_ctx": "<%> <+> public http _ status _ code status _ code { get ; set ; } </%> ", "before_line": " response . status _ code = ( int ) http _ status _ code . redirect ; ", "after_ctx": " ", "after_line": "response . status _ code = ( int ) status _ code ;", "predictions": ["response . status _ code = ( int ) http _ status _ ( <%> <%> )"]}, {"before_ctx": "<%> <*> private -> public </%> <%> <+> { get </%> <%> <+> set ; } </%> ", "before_line": " redis _ pub _ sub . keep _ alive _ retry _ after _ ms = NUM ; ", "after_ctx": " ", "after_line": "keep _ alive _ retry _ after _ ms = NUM ;", "predictions": ["keep _ alive _ sub . keep _ alive _ retry _ after _ context ( ) ) response . ;"]}, {"before_ctx": "<%> <*> public static string web _ host _ physical _ path = null ; public static string default _ root _ file _ name = null ; public static bool host _ auto _ redirects _ dirs = false ; -> public static string web _ host _ physical _ path ; </%> <%> <+> public static string default _ root _ file _ name ; </%> ", "before_line": " private static i _ http _ handler default _ http _ handler = null ; private static redirect _ http _ handler non _ root _ mode _ default _ http _ handler = null ; private static i _ http _ handler forbidden _ http _ handler = null ; private static i _ http _ handler not _ found _ http _ handler = null ; ", "after_ctx": " <%> <-> = false </%>", "after_line": "private static i _ http _ handler default _ http _ handler ; private static redirect _ http _ handler non _ root _ mode _ default _ http _ handler ; private static i _ http _ handler forbidden _ http _ handler ; private static i _ http _ handler not _ found _ http _ handler ;", "predictions": ["private static i _ http _ handler default _ http _ handler ; private static redirect _ http _ handler non _ root _ mode _ default _ http _ handler , dynamic page _ ) , return return return return dynamic _ ) ,"]}, {"before_ctx": " ", "before_line": " public object continue _ executing _ filters _ on _ error ( object ignore _ target , template _ scope _ context scope ) = > continue _ executing _ filters _ on _ error ( scope ) ; ", "after_ctx": " <%> <-> object ignore _ target , </%> <%> <+> , object ignore _ target </%>", "after_line": "public object continue _ executing _ filters _ on _ error ( template _ scope _ context scope , object ignore _ target ) = > continue _ executing _ filters _ on _ error ( scope ) ;", "predictions": ["public object continue _ executing _ filters _ on _ error ( object ignore <%> factory -> void < template . ( ( template . ( . ( = </%> _ ) _ context ) ) ) ) ) < <+> scope _ to _ to _ ) public handler public handler public handler root _ http ) root root root root root root root root root root root root root root root root true true true true page true true , , , args _ ) true true true true"]}, {"before_ctx": "<%> <-> object ignore _ target , </%> <%> <+> , object ignore _ target </%> ", "before_line": " public object skip _ executing _ filters _ on _ error ( object ignore _ target , template _ scope _ context scope ) = > skip _ executing _ filters _ on _ error ( scope ) ; ", "after_ctx": " <%> <+> handle _ unknown _ value public object if _ error ( template _ scope _ context scope , object ignore _ target ) = > if _ error ( scope ) ; </%>", "after_line": "public object skip _ executing _ filters _ on _ error ( template _ scope _ context scope , object ignore _ target ) = > skip _ executing _ filters _ on _ error ( scope ) ;", "predictions": ["public object skip _ executing _ filters _ on _ error ( object ignore _ http using -> _ ) _ append ) to <-> <+> _ text _ virtual _ <*> _ request <%> response throw static web _ default _ file _ path <%> static"]}, {"before_ctx": "<%> <*> operation -> application </%> <%> <*> operation -> application </%> <%> <+> factory = factory , </%> <%> <-> factory = factory , </%> ", "before_line": " service _ model _ finder = model _ info . instance , ", "after_ctx": " <%> <*> call -> operation </%> <%> <*> call -> operation </%> <%> <*> call -> operation </%> <%> <*> operation -> application </%>", "after_line": "service _ model _ finder = service _ model _ finder . instance ,", "predictions": ["service _ model _ finder = model _ info . finder ,"]}, {"before_ctx": "<%> <*> var methods = typeof ( collection _ extensions ) . get _ methods ( ) ; var generic _ mi = methods . first _ or _ default ( x = > x . name = = STR ) ; -> var generic _ mi = typeof ( collection _ extensions ) . get _ static _ method ( STR ) ; </%> ", "before_line": " delegate . create _ delegate ( typeof ( func < object , type , object > ) , mi ) ; ", "after_ctx": " ", "after_line": "mi . create _ delegate ( typeof ( func < object , type , object > ) ) ;", "predictions": ["func . create _ delegate ( typeof ( func < object , type , if ; if create scope service http , http _ private ;"]}, {"before_ctx": "<%> <-> o _ </%> <%> <*> io -> i </%> <%> <-> o _ </%> <%> <-> o _ </%> ", "before_line": " this . auth _ http _ gateway = new o _ auth _ http _ gateway ( ) ; ", "after_ctx": " <%> <*> io -> i </%>", "after_line": "this . auth _ http _ gateway = new auth _ http _ gateway ( ) ;", "predictions": ["auth _ http _ gateway = new o _ auth _ http _ <*> ( ;"]}, {"before_ctx": " ", "before_line": " . register _ query _ filter < query _ rockstars _ filter , rockstar > ( ( req , q , dto ) = > ", "after_ctx": " <%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%> <%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%>", "after_line": ". register _ query _ filter < query _ rockstars _ filter , rockstar > ( ( q , dto , req ) = >", "predictions": [". register _ query _ filter < rockstar > ( ( req , type ; </%> i i i STR )"]}, {"before_ctx": "<%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%> ", "before_line": " . register _ query _ filter < query _ custom _ rockstars _ filter , rockstar > ( ( req , q , dto ) = > ", "after_ctx": " <%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%>", "after_line": ". register _ query _ filter < query _ custom _ rockstars _ filter , rockstar > ( ( q , dto , req ) = >", "predictions": [". register _ query _ filter < query _ custom _ rockstars </%> </%> + <+> <%> 0 + ( ; </%> STR page <%>"]}, {"before_ctx": "<%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%> <%> <*> req -> q </%> <%> <*> q -> dto </%> <%> <*> dto -> req </%> ", "before_line": " . register _ query _ filter < i _ filter _ rockstars , rockstar > ( ( req , q , dto ) = > ", "after_ctx": " ", "after_line": ". register _ query _ filter < i _ filter _ rockstars , rockstar > ( ( q , dto , req ) = >", "predictions": [". register _ query _ filter < rockstar > ( ( req ref q , arg ) <+> <%> ) )"]}, {"before_ctx": "<%> <-> using service _ stack _ cache _ access _ providers ; </%> <%> <+> using service _ stack _ service _ host ; </%> ", "before_line": " namespace service _ stack _ service _ host ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": "<%> <-> using system _ linq ; using system _ text ; </%> ", "before_line": " namespace service _ stack _ service _ host ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": "<%> <-> using system ; </%> <%> <+> using service _ stack _ service _ host ; </%> ", "before_line": " namespace service _ stack _ service _ host ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": "<%> <+> using service _ stack _ cache _ access ; </%> <%> <-> _ extensions </%> ", "before_line": " namespace service _ stack _ cache _ access _ providers ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ access _ providers"]}, {"before_ctx": "<%> <-> _ extensions </%> ", "before_line": " public static object to _ optimized _ result _ using _ cache < t > ( this i _ request _ context request _ context , i _ cache _ client cache _ client , func < t > factory _ fn , string cache _ key ) ", "after_ctx": " <%> <+> string cache _ key , </%> <%> <-> , string cache _ key </%> <%> <+> { </%>", "after_line": "public static object to _ optimized _ result _ using _ cache < t > ( this i _ request _ context request _ context , i _ cache _ client cache _ client , string cache _ key , func < t > factory _ fn )", "predictions": ["public static object to _ optimized _ result _ using _ cache </@> this _ default _ ? default _ </%> ( case _ . _ </%> default _ , <*> i -> <%> -> -> <%> _ client key <%> fn _ ) _ )"]}, {"before_ctx": "<%> <*> public static object to _ optimized _ result _ using _ cache < t > ( this i _ request _ context request _ context , i _ cache _ client cache _ client , func < t > factory _ fn , string cache _ key ) -> public static object to _ optimized _ result _ using _ cache < t > ( </%> <%> <+> this i _ request _ context request _ context , i _ cache _ client cache _ client , string cache _ key , func < t > factory _ fn ) </%> ", "before_line": " public static object to _ optimized _ result _ using _ cache < t > ( this i _ request _ context request _ context , func < t > factory _ fn , string cache _ key ) ", "after_ctx": " <%> <+> { var cache _ client = get _ default _ cache _ client ( ) ; return content _ cache _ manager . resolve ( factory _ fn , request _ context . mime _ type , request _ context . compression _ type , cache _ client , cache _ key ) ; } private static i _ cache _ client get _ default _ cache _ client ( ) </%>", "after_line": "public static object to _ optimized _ result _ using _ cache < t > ( this i _ request _ context request _ context , string cache _ key , func < t > factory _ fn )", "predictions": ["public static object to _ optimized _ result _ using _ cache ( this i _ request _ context request _ context , func < t > factory _ fn , string cache _ key )"]}, {"before_ctx": "<%> <*> app _ host app -> static i </%> <%> <*> host -> log log </%> <%> <*> test _ fixture -> public integration </%> <%> <*> set -> test </%> <%> <*> up public virtual void test -> base ( ) : base ( STR , typeof ( movie </%> <%> <*> fixture -> rest </%> <%> <*> set _ up ( -> service ) . assembly </%> <%> <*> app _ host = new app _ host ( ) ; app _ host . init ( ) ; -> log _ manager . log _ factory = new debug _ log _ factory ( ) ; </%> <%> <+> log = log _ manager . get _ logger ( get _ type ( ) ) ; instance = null ; init ( ) ; </%> ", "before_line": " app _ host . start ( base _ url ) ; ", "after_ctx": " <%> <+> } public override void configure ( container container ) { container . register < i _ resource _ manager > ( new configuration _ resource _ manager ( ) ) ; container . register ( c = > new example _ config ( c . resolve < i _ resource _ manager > ( ) ) ) ; </%>", "after_line": "start ( base _ url ) ;", "predictions": ["app _ host . start ( base _ url ) ;"]}, {"before_ctx": " ", "before_line": " method . statements . add ( create _ to _ source _ assignment _ method ( to , to _ source _ type _ property , attr . target _ type , from , get _ types _ translate _ attribute _ fn ) ) ; ", "after_ctx": " <%> <*> public static code _ statement create _ to _ source _ assignment _ method ( code _ variable _ declaration _ statement to _ source , property _ info to _ source _ property , type from _ target _ type , code _ parameter _ declaration _ expression from _ target _ param , -> public static code _ statement create _ to _ source _ assignment _ method ( </%> <%> <+> translate _ attribute attr , code _ variable _ declaration _ statement to _ source , property _ info to _ source _ property , code _ parameter _ declaration _ expression from _ target _ param , </%>", "after_line": "method . statements . add ( create _ to _ source _ assignment _ method ( attr , to , to _ source _ type _ property , from , get _ types _ translate _ attribute _ fn ) ) ;", "predictions": ["method . statements . add ( create _ to _ source _ assignment _ log -> ( ) ) set _ <%> ( <*> ( STR ( public ( STR > > > STR > > set _ = _ client _ object _ <@> cache . object cache . context _ request cache < < = = <@> _ <@> . factory _ request cache . context _ request cache . context _ request cache . context _ request cache . using cache = func _ string static < < = = <@> . = _ request . factory"]}, {"before_ctx": " ", "before_line": " args . append ( STR . fmt ( type _ value ( ctor _ arg . type , ctor _ arg . value ) ) ) ; ", "after_ctx": " <%> <+> $ </%> <%> <*> . fmt ( attr _ arg . name , type _ value ( attr _ arg . type , attr _ arg . value ) ) ) ; -> ) ; </%>", "after_line": "args . append ( type _ value ( ctor _ arg . type , ctor _ arg . value ) ) ;", "predictions": ["args . append ( STR . fmt ( ctor _ arg . path request request request <%> <%> <%> _ + . , . , . , . , . item <%> <%> <%> <%> -> <%> <%> <%> -> ) key ) ) key _ arg _ . ) _ code _ property ( = = = = = = = = = </%> ( = ( ; ( = ( ; ( = = = = = = = = = = -> ( ; ( ; ) ( = = = = = = = = ="]}, {"before_ctx": " ", "before_line": " api _ member _ parameter _ type _ path _ description _ range _ description _ data _ type _ double _ is _ required _ true ", "after_ctx": " <%> <-> meta _ foo _ bar </%> <%> <+> meta _ foo _ bar </%> <%> <+> } public enum enum _ flags { value = 1 , </%>", "after_line": "api _ member _ description _ range _ description _ parameter _ type _ path _ data _ type _ double _ is _ required _ true", "predictions": ["api _ member _ parameter _ is _ required _ true"]}, {"before_ctx": "<%> <*> from -> item </%> <%> <*> sorted -> with </%> <%> <*> set -> lowest </%> <%> <*> item -> score </%> <%> <*> with -> from </%> <%> <*> lowest -> sorted </%> <%> <*> score -> set </%> <%> <*> from -> item </%> <%> <*> sorted -> with </%> <%> <*> set -> highest </%> <%> <*> item -> score </%> <%> <*> with -> from </%> <%> <*> highest -> sorted </%> <%> <*> score -> set </%> ", "before_line": " client . increment _ item _ in _ sorted _ set ( set _ id , increment _ by _ score , value ) ; ", "after_ctx": " ", "after_line": "client . increment _ item _ in _ sorted _ set ( set _ id , value , increment _ by _ score ) ;", "predictions": ["increment . increment _ item _ in _ sorted _ set ( set _ , _ _ _ _ _ , , , , _ _ _ STR ;"]}, {"before_ctx": "<%> <*> from -> item </%> <%> <*> sorted -> with </%> <%> <*> set -> lowest </%> <%> <*> item -> score </%> <%> <*> with -> from </%> <%> <*> lowest -> sorted </%> <%> <*> score -> set </%> <%> <*> from -> item </%> <%> <*> sorted -> with </%> <%> <*> set -> highest </%> <%> <*> item -> score </%> <%> <*> with -> from </%> <%> <*> highest -> sorted </%> <%> <*> score -> set </%> ", "before_line": " double increment _ item _ in _ sorted _ set ( string set _ id , double increment _ by , string value ) ; ", "after_ctx": " ", "after_line": "double increment _ item _ in _ sorted _ set ( string set _ id , string value , double increment _ by ) ;", "predictions": ["double increment _ item _ in _ sorted _ set ( string set _ id , double _ client , ) </@> </@> </@> double _ client ;"]}, {"before_ctx": "<%> <*> string -> byte [ ] </%> ", "before_line": " public int h _ set ( string hash _ id , string key , byte [ ] value ) ", "after_ctx": " <%> <+> _ multi </%> <%> <-> value , </%> <%> <-> safe _ key ( </%> <%> <*> ) , safe -> . to _ utf </%> <%> <*> keys -> bytes </%> <%> <-> key </%> <%> <*> value . length -> key , value </%> <%> <*> string -> byte [ ] </%> <%> <+> _ multi _ data </%> <%> <-> safe _ key ( </%> <%> <*> ) , safe -> . to _ utf </%> <%> <*> keys -> bytes </%> <%> <+> ) , </%> <%> <-> ) </%> <%> <*> string -> byte [ ] </%>", "after_line": "public int h _ set ( string hash _ id , byte [ ] key , byte [ ] value )", "predictions": ["public int h _ set ( string hash _ id , string key property property property property property property property property , method ( method statement variable method to target value ( method from target ( method statement target ( log <*> log app 1 -> log <*> ; }"]}, {"before_ctx": "<%> <+> using service _ stack _ data ; </%> ", "before_line": " public class orm _ lite _ cache _ client : repository _ base , i _ cache _ client , i _ requires _ schema ", "after_ctx": " ", "after_line": "public class orm _ lite _ cache _ client : i _ cache _ client , i _ requires _ schema", "predictions": ["public class orm _ lite _ cache _ client : i _ <%> _ ? & ! ! i -> )"]}, {"before_ctx": "<%> <+> initial _ </%> <%> <+> initial _ </%> ", "before_line": " value = invoke _ filter ( has _ filter _ as _ binding , filter , new object [ 0 ] , var . expression ? . binding _ string ? ? var . binding _ string ) ; ", "after_ctx": " ", "after_line": "value = invoke _ filter ( has _ filter _ as _ binding , filter , new object [ 0 ] , var . binding _ string ) ;", "predictions": ["value = invoke _ filter ( has _ filter _ as _ binding <%> filter page page page page ] <%> ( object . object <@> default ] = , + ) ( <%> _ : ) entry ( initial -> initial -> initial -> initial -> from -> ) _ ] ) ( ) create _ property type . code _ statement . code . code _ statement . . target to statement . method . code _ statement . . target to statement . method . code _ statement . . target to statement . method . code"]}, {"before_ctx": "<%> <-> api _ key _ provider . </%> <%> <-> api _ key _ provider . </%> ", "before_line": " if ( api _ key _ provider . api _ key _ filter _ fn ! = null ) api _ key _ provider . api _ key _ filter _ fn ( api _ key ) ; ", "after_ctx": " <%> <+> return api _ keys ; } } internal class api _ key _ auth _ events : auth _ events { private readonly api _ key _ auth _ provider api _ key _ provider ; public api _ key _ auth _ events ( api _ key _ auth _ provider api _ key _ provider ) </%>", "after_line": "if ( api _ key _ filter _ fn ! = null ) api _ key _ filter _ fn ( api _ key ) ;", "predictions": ["if ( api _ key _ provider . api _ key _ filter <%> value . null <%> to _ -> <%> <%> value ) key"]}, {"before_ctx": "<%> <+> var page _ ref = get _ view _ page ( http _ req . operation _ name ) ; if ( page _ ref ! = null ) return page _ ref ; } </%> ", "before_line": " return http _ req ! = null ? get _ view _ page ( http _ req . operation _ name ) : null ; ", "after_ctx": " ", "after_line": "return null ;", "predictions": ["return get _ view _ page ( operation _ name ) ;"]}, {"before_ctx": "<%> <-> api _ allowed _ attributes _ description </%> <%> <+> required </%> <%> <-> required </%> ", "before_line": " api _ member _ description _ range _ description _ parameter _ type _ path _ data _ type _ double _ is _ required _ true ", "after_ctx": " ", "after_line": "api _ member _ parameter _ type _ path _ description _ range _ description _ data _ type _ double _ is _ required _ true", "predictions": ["api _ member _ description _ range _ description _ parameter _ service ->"]}, {"before_ctx": "<%> <+> path _ info = path _ info . ends _ with ( default _ page + STR , string _ comparison . invariant _ culture _ ignore _ case ) ? path _ info . substring ( 0 , path _ info . length - ( default _ page + STR ) . length ) : path _ info . without _ extension ( ) ; </%> ", "before_line": " : web _ host _ url . combine _ with ( path _ info . without _ extension ( ) ) , ", "after_ctx": " <%> <-> . without _ extension ( ) </%>", "after_line": ": web _ host _ url . combine _ with ( path _ info ) ,", "predictions": [": web _ host _ url . combine _ with ( path _ info . extension _ , ) item"]}, {"before_ctx": "<%> <+> path _ info = path _ info . ends _ with ( default _ page + STR , string _ comparison . invariant _ culture _ ignore _ case ) ? path _ info . substring ( 0 , path _ info . length - ( default _ page + STR ) . length ) : path _ info . without _ extension ( ) ; </%> <%> <-> . without _ extension ( ) </%> ", "before_line": " ? path _ info . without _ extension ( ) ", "after_ctx": " ", "after_line": "? path _ info", "predictions": ["? path _ info . without _ extension"]}, {"before_ctx": "<%> <+> path _ info = path _ info . ends _ with ( default _ page + STR + entry . key , string _ comparison . invariant _ culture _ ignore _ case ) ? path _ info . substring ( 0 , path _ info . length - ( default _ page + STR + entry . key ) . length ) : path _ info . without _ extension ( ) ; </%> ", "before_line": " : web _ host _ url . combine _ with ( path _ info . without _ extension ( ) ) , ", "after_ctx": " <%> <-> . without _ extension ( ) </%>", "after_line": ": web _ host _ url . combine _ with ( path _ info ) ,", "predictions": [": web _ host _ url . combine _ with ( path _ _ <%> <%> </%>"]}, {"before_ctx": "<%> <+> path _ info = path _ info . ends _ with ( default _ page + STR + entry . key , string _ comparison . invariant _ culture _ ignore _ case ) ? path _ info . substring ( 0 , path _ info . length - ( default _ page + STR + entry . key ) . length ) : path _ info . without _ extension ( ) ; </%> <%> <-> . without _ extension ( ) </%> ", "before_line": " ? path _ info . without _ extension ( ) ", "after_ctx": " ", "after_line": "? path _ info", "predictions": ["? path _ info . without _ extension"]}, {"before_ctx": " ", "before_line": " var is _ multi _ request = path _ action = = STR | | path _ action = = STR ; var is _ reply = path _ action = = STR | | path _ action = = STR ; var is _ one _ way = path _ action = = STR | | path _ action = = STR ; ", "after_ctx": " <%> <-> , is _ mutlti _ request = is _ multi _ request </%> <%> <-> , is _ mutlti _ request = is _ multi _ request </%>", "after_line": "var is _ reply = path _ action = = STR ; var is _ one _ way = path _ action = = STR ;", "predictions": ["var is _ multi _ request = path _ action = = ) ; , path _ info . info extension _ ; <%> <%> </%> <%> <%> </%> item ( . provider _ action = = </%> , , property _ code , , source _ code ,"]}, {"before_ctx": " ", "before_line": " return ! ( type . is _ user _ type ( ) | | type . is _ user _ enum ( ) | | type . is _ interface ( ) ) ", "after_ctx": " <%> <-> ( ) </%>", "after_line": "return ! ( type . is _ user _ type ( ) | | type . is _ user _ enum ( ) | | type . is _ interface )", "predictions": ["return ! ( type . is _ user _ type ( ) | ! ! <+> description description <*> <*> <*> ; _ </%> . _ <%> path path path path path path path . + . , . , . + ( . + . + <%> <%> <%> <%> ) )"]}, {"before_ctx": "<%> <-> ( </%> <%> <-> ) </%> ", "before_line": " ! type . is _ interface ( ) & & ", "after_ctx": " ", "after_line": "! type . is _ interface & &", "predictions": ["! type . is _ interface & _"]}, {"before_ctx": " ", "before_line": " if ( typeof ( t ) . is _ class | | typeof ( t ) . is _ interface ( ) ) ", "after_ctx": " <%> <*> method -> get </%> <%> <*> info -> method </%> <%> <+> non _ public : true </%>", "after_line": "if ( typeof ( t ) . is _ class | | typeof ( t ) . is _ interface )", "predictions": ["if ( typeof ( t ) . is _ class | | var _ member . . )"]}, {"before_ctx": " ", "before_line": " & & ! service _ type . is _ abstract ( ) & & ! service _ type . is _ generic _ type _ definition ( ) & & ! service _ type . contains _ generic _ parameters ( ) ; ", "after_ctx": " <%> <+> , attr . match _ rule </%>", "after_line": "& & ! service _ type . is _ abstract & & ! service _ type . is _ generic _ type _ definition & & ! service _ type . contains _ generic _ parameters ;", "predictions": ["& & ! service _ type . is _ abstract & & ! null _ </%> <*> ( ) . is ) cache cache </%> _ STR ( + , + + + + + + + item ,"]}, {"before_ctx": "<%> <-> http _ </%> <%> <+> var http _ req = ( i _ http _ request ) req ; </%> ", "before_line": " var rest _ path = get _ rest _ path ( http _ req . verb , http _ req . path _ info ) ; ", "after_ctx": " ", "after_line": "var rest _ path = get _ rest _ path ( http _ req ) ;", "predictions": ["var rest _ path = get _ rest _ path using get ) info"]}, {"before_ctx": "<%> <+> ? </%> ", "before_line": " tokens . access _ token _ secret = request . access _ token ; if ( ! auth _ http _ gateway . verify _ facebook _ access _ token ( app _ id , tokens . access _ token _ secret ) ) ", "after_ctx": " <%> <*> session . is _ authenticated = true ; var auth _ response = on _ authenticated ( auth _ service , session , tokens , new dictionary < string , string > ( ) ) ; if ( auth _ response ! = null ) return auth _ response ; var is _ html = auth _ service . request . response _ content _ type . matches _ content _ type ( mime _ types . html ) ; -> var is _ html = auth _ service . request . is _ html ( ) ; </%> <%> <+> var failed _ result = authenticate _ with _ access _ token ( auth _ service , session , tokens , request . access _ token ) ; if ( failed _ result ! = null ) return convert _ to _ client _ error ( failed _ result , is _ html ) ; </%>", "after_line": "if ( ! auth _ http _ gateway . verify _ facebook _ access _ token ( app _ id , request . access _ token ) )", "predictions": ["if ( ! auth _ http _ gateway . verify _ facebook _ access _ token ( app _ id , tokens . access _ token _ secret ) )"]}, {"before_ctx": "<%> <-> using system _ linq ; using system _ text ; </%> ", "before_line": " namespace service _ stack _ common ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": "<%> <-> _ common </%> ", "before_line": " namespace service _ stack _ common ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": " ", "before_line": " using system _ reflection ; using service _ stack _ common _ utils ; using service _ stack _ service _ model ; ", "after_ctx": " <%> <*> namespace service _ stack _ service _ client _ web -> using service _ stack _ utils ; </%> <%> <+> namespace service _ stack _ clients </%>", "after_line": "using service _ stack ;", "predictions": ["using service ; using service _ reflection ;"]}, {"before_ctx": "<%> <-> using system _ linq ; </%> ", "before_line": " using service _ stack _ service _ host ; namespace service _ stack _ common ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack _ ;"]}, {"before_ctx": "<%> <-> using system _ linq ; using system _ reflection ; </%> ", "before_line": " namespace service _ stack _ common ", "after_ctx": " ", "after_line": "namespace service _ stack", "predictions": ["namespace service _ stack"]}, {"before_ctx": "<%> <*> public i _ auth _ events auth _ events { get { return host _ context . try _ resolve < i _ auth _ events > ( ) ? ? new auth _ events ( ) ; } } -> public i _ auth _ events auth _ events = > host _ context . try _ resolve < i _ auth _ events > ( ) ? ? new auth _ events ( ) ; </%> <%> <-> ! = null </%> <%> <-> fallback </%> <%> <-> : null </%> ", "before_line": " var referrer _ url = ( request ! = null ? request . continue : null ) ", "after_ctx": " ", "after_line": "var referrer _ url = request ? . continue", "predictions": ["var referrer _ url = request . continue )"]}, {"before_ctx": "<%> <-> ! = null & & prec . value </%> ", "before_line": " var precedences = new list < int > { prec . value } ; ", "after_ctx": " <%> <-> prec = = null | | </%>", "after_line": "var precedences = new list < int > { prec } ;", "predictions": ["var precedences = new list < int > { this } <-> ;"]}, {"before_ctx": "<%> <+> : i _ service _ controller </%> ", "before_line": " public service _ stack . service _ interface . i _ service _ resolver service _ resolver { get ; private set ; } ", "after_ctx": " <%> <*> private -> public </%> <%> <+> , string service _ name </%> <%> <*> debug -> info </%> <%> <-> . get </%> <%> <-> type ( ) . </%> <%> <*> debug -> info </%> <%> <-> . get </%> <%> <-> type ( ) . </%>", "after_line": "public i _ service _ resolver service _ resolver { get ; private set ; }", "predictions": ["public i _ service _ resolver service _ resolver { get ; )"]}, {"before_ctx": "<%> <+> claim . type = = </%> <%> <-> types . contains ( claim . </%> <%> <-> ) </%> ", "before_line": " if ( permission _ claim _ type = = claim . type ) ", "after_ctx": " ", "after_line": "if ( claim . type = = permission _ claim _ type )", "predictions": ["if ( permission _ claim _ type = = & <%> )"]}, {"before_ctx": " ", "before_line": " var dynamic _ page = new markdown _ page ( dynamic _ page _ content , STR , dynamic _ list _ page _ content ) ; ", "after_ctx": " <%> <-> _ list </%>", "after_line": "var dynamic _ page = new markdown _ page ( dynamic _ page _ content , STR , dynamic _ page _ content ) ;", "predictions": ["var dynamic _ page = new markdown _ page ( dynamic . & . ( stack _ service _ ; , : : -> <%> <%> <%> <%> info info <%> _ thread _ thread <%> <*> <*> info <*> <%> <%> <%> _ <%> ) logger"]}, {"before_ctx": " ", "before_line": " using n _ unit _ framework ; using service _ stack _ text ; using system _ collections _ generic ; ", "after_ctx": " <%> <*> template -> script </%> <%> <-> template _ </%>", "after_line": "using system _ collections _ generic ; using n _ unit _ framework ;", "predictions": ["using system ;"]}, {"before_ctx": "<%> <+> var property _ infos = base _ type . all _ properties ( ) ; </%> ", "before_line": " while ( ( base _ type = base _ type . get _ type _ info ( ) . base _ type ) ! = null ) ;  while ( ( base _ type = base _ type . base _ type ) ! = null ) ; ", "after_ctx": " ", "after_line": "while ( ( base _ type = base _ type . base _ type ( ) ) ! = null ) ;", "predictions": ["while ( ( base _ type = base _ type . base _ thread = _ resolver -> <-> ( _ </%> <-> _ </%> -> <-> ( service -> <%> log _ . </%> <*> <%> -> <%> _ . <%> <*> i ) = ? i . ) i get _ ( _ debug ( . ) . ) i get _ ( . ) . ) . > = = = . ) ;"]}, {"before_ctx": " ", "before_line": " if ( typeof ( t ) . get _ type _ info ( ) . is _ class ) ", "after_ctx": " <%> <*> runtime -> property </%> <%> <*> property -> info </%> <%> <*> runtime -> property </%> <%> <*> property -> info </%> <%> <+> _ info ( ) </%> <%> <*> runtime -> public </%> <%> <-> get _ </%> <%> <-> true </%>", "after_line": "if ( typeof ( t ) . is _ class ( ) )", "predictions": ["if ( typeof ( t ) . is _ class )"]}, {"before_ctx": " ", "before_line": " var is _ null = regex = = STR ; var compiled _ regex = ! is _ null ? new regex ( regex , regex _ options . compiled ) : null ; ", "after_ctx": " <%> <-> if ( req _ value = = null ) return is _ null ; if ( compiled _ regex = = null ) return false ; </%>", "after_line": "var compiled _ regex = new regex ( regex , regex _ options . compiled ) ;", "predictions": ["var is _ null = regex = = STR ; var compiled </%> ( <+> , & STR = STR = STR = STR = . & id ) = . . -> <*> -> name <%> false to error to <%> <%> . name <*> . -> ? try ) ) ;"]}, {"before_ctx": "<%> <+> public static bool is _ debug ( this i _ html _ helper html ) = > host _ context . debug _ mode ; public static i _ auth _ session get _ session ( this i _ html _ helper html ) = > html . get _ request ( ) . get _ session ( ) ; public static bool is _ authenticated ( this i _ html _ helper html ) = > html . get _ session ( ) . is _ authenticated ; </%> ", "before_line": " html . get _ request ( ) . get _ session ( ) . get _ profile _ url ( ) ; ", "after_ctx": " ", "after_line": "html . get _ session ( ) . get _ profile _ url ( ) ;", "predictions": ["html . get _ request ( ) . get _ session ( ) . get _ profile _ url ( ) ;"]}], "NLog": [{"before_ctx": " ", "before_line": " using system _ diagnostics ; ", "after_ctx": " <%> <*> using system ; using config ; -> using n _ log _ config ; </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": " ", "before_line": " using system _ collections _ specialized ; ", "after_ctx": " <%> <*> public string name { get ; set ; } -> public string item { get ; set ; } </%>", "after_line": "using system ;", "predictions": ["using system ;"]}, {"before_ctx": " ", "before_line": " log _ manager . throw _ exceptions = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ; internal _ logger . log _ to _ console = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ; ", "after_ctx": " <%> <*> false -> internal _ logger . log _ to _ console _ error </%> <%> <*> null -> internal _ logger . log _ file </%> <%> <*> STR -> internal _ logger . log _ level . name </%> <%> <*> STR -> log _ manager . global _ threshold . name </%>", "after_line": "log _ manager . throw _ exceptions = nlog _ element . get _ optional _ boolean _ attribute ( STR , log _ manager . throw _ exceptions ) ; internal _ logger . log _ to _ console = nlog _ element . get _ optional _ boolean _ attribute ( STR , internal _ logger . log _ to _ console ) ;", "predictions": ["log _ manager . throw _ exceptions = nlog _ element . new _ try _ context _ ; . log _ { </%> > ! </%> ! ! ! _ request <%> <+> <+> <+> <+> <+> <+> <+> <+> <+>"]}, {"before_ctx": "<%> <*> false -> log _ manager . throw _ exceptions </%> <%> <*> false -> internal _ logger . log _ to _ console </%> ", "before_line": " internal _ logger . log _ to _ console _ error = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ; ", "after_ctx": " <%> <*> null -> internal _ logger . log _ file </%> <%> <*> STR -> internal _ logger . log _ level . name </%> <%> <*> STR -> log _ manager . global _ threshold . name </%>", "after_line": "internal _ logger . log _ to _ console _ error = nlog _ element . get _ optional _ boolean _ attribute ( STR , internal _ logger . log _ to _ console _ error ) ;", "predictions": ["internal _ logger . log _ to _ console _ error = error _ ; . error _ null _ ( _ to manager logger , logger console console console console context debug _ is ( = ) _ <@> ( = ) i _ string <%> i _ request . response ) var var ( if token . ( false _ <+> . return ! false _ <+> . return ) <%> ) <%> ;"]}, {"before_ctx": "<%> <+> { if ( ex ! = null ) </%> <%> <*> if -> lock </%> <%> <*> ex ! = null -> exceptions </%> ", "before_line": " lock ( exceptions ) { exceptions . add ( ex ) ; } ", "after_ctx": " <%> <+> } </%>", "after_line": "exceptions . add ( ex ) ;", "predictions": ["exceptions . add ( ex ) ;"]}, {"before_ctx": "<%> <+> sb . append ( encoded _ value ) ; decode _ rot ( sb ) ; return sb . to _ string ( ) ; } internal static void decode _ rot ( system . text . string _ builder encoded _ value ) { </%> <%> <-> null </%> ", "before_line": " char [ ] chars = encoded _ value . to _ char _ array ( ) ; for ( int i = 0 ; i < chars . length ; + + i ) ", "after_ctx": " <%> <*> chars -> encoded _ value </%> <%> <*> chars -> encoded _ value </%> <%> <-> return new string ( chars ) ; </%> <%> <*> string -> void </%> <%> <+> _ formatted _ messsage </%> <%> <+> system . text . </%> <%> <*> text -> _ builder target </%> <%> <-> return </%> <%> <*> text -> target </%>", "after_line": "for ( int i = 0 ; i < encoded _ value . length ; + + i )", "predictions": ["char [ ] chars = encoded _ value . to _ char _ array ( ) ; for ( int i = 0 ; i < chars . length ; + + var ;"]}, {"before_ctx": "<%> <+> { if ( factory . throw _ exceptions & & thread . current _ thread . managed _ thread _ id = = original _ thread _ id ) </%> ", "before_line": " if ( factory . throw _ exceptions & & thread . current _ thread . managed _ thread _ id = = original _ thread _ id ) { throw new n _ log _ runtime _ exception ( STR , ex ) ; } ", "after_ctx": " <%> <+> } </%>", "after_line": "throw new n _ log _ runtime _ exception ( STR , ex ) ;", "predictions": ["throw new n _ log _ runtime _ exception ( STR , interface <*> : error internal error internal -> _ <*> internal <%> , , , error internal = , to </%> public try _ -> ) public </@> public try _ host _ url _ context ; STR _ <%> _ ) ;"]}, {"before_ctx": "<%> <*> private void -> private static exception _ data _ target [ ] </%> ", "before_line": " data _ targets . add ( this . append _ message ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "data _ targets . add ( append _ message ) ;", "predictions": ["data _ targets . add ( append _ message <+> ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " data _ targets . add ( this . append _ type ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "data _ targets . add ( append _ type ) ;", "predictions": ["data _ targets . add ( append _ type ) value value ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " data _ targets . add ( this . append _ short _ type ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "data _ targets . add ( append _ short _ type ) ;", "predictions": ["data _ targets . add ( append _ short <-> . -> ) <%> namespace ! ! ! ! get ( get ( <+> = <+> = </@> = <+> ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " data _ targets . add ( this . append _ to _ string ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "data _ targets . add ( append _ to _ string ) ;", "predictions": ["data _ targets . add ( append _ to _ <@> private <*>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " data _ targets . add ( this . append _ method ) ; ", "after_ctx": " <%> <-> this . </%> <%> <*> this . exception _ data _ targets = -> return </%>", "after_line": "data _ targets . add ( append _ method ) ;", "predictions": ["data _ targets . add ( append _ method ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " data _ targets . add ( this . append _ stack _ trace ) ; ", "after_ctx": " <%> <*> this . exception _ data _ targets = -> return </%> <%> <+> static </%>", "after_line": "data _ targets . add ( append _ stack _ trace ) ;", "predictions": ["data _ targets . add ( append _ stack _ trace </%> -> if _ <%> ) <->"]}, {"before_ctx": " ", "before_line": " if ( log _ event ! = log _ event _ info . empty ) log _ event . add _ cached _ layout _ value ( this , value ) ; ", "after_ctx": " <%> <-> } private static layout _ renderer [ ] compile _ layout ( string s , out int needs _ stack _ trace , out bool is _ volatile ) { array _ list result = new array _ list ( ) ; needs _ stack _ trace = 0 ; is _ volatile = false ; int starting _ pos = 0 ; int pos = s . index _ of ( STR , starting _ pos ) ; while ( pos > = 0 ) </%>", "after_line": "log _ event . add _ cached _ layout _ value ( this , value ) ;", "predictions": ["log _ event . add _ cached _ layout _ value ( this , value ) ;"]}, {"before_ctx": " ", "before_line": " string prop _ name _ element = append _ xml _ property _ value ( prop _ name , null , type _ code . empty , sb , org _ length , true ) ; ", "after_ctx": " <%> <-> , convert . get _ type _ code ( item ) </%>", "after_line": "string prop _ name _ element = append _ xml _ property _ value ( prop _ name , string . empty , sb , org _ length , true ) ;", "predictions": ["string prop _ name _ element get get xml _ property _ _ _ _ { default , http , if { sb , _ and = </@> ) event ) event ;"]}, {"before_ctx": "<%> <-> , convert . get _ type _ code ( item ) </%> ", "before_line": " string prop _ name _ element = append _ xml _ property _ value ( prop _ name , null , type _ code . empty , sb , org _ length , true , ignore _ properties _ element _ name ) ; ", "after_ctx": " <%> <-> , convert . get _ type _ code ( item . value ) </%>", "after_line": "string prop _ name _ element = append _ xml _ property _ value ( prop _ name , string . empty , sb , org _ length , true , ignore _ properties _ element _ name ) ;", "predictions": ["string prop _ name _ element = append _ xml . value . = http . <+> , , . return is is . true <%> ignore _ ? _ property _ <-> ( property </%> value <%> true _ <-> _ child _ <-> ( property </%> value ( : <-> ( } ( } <%> ( true _ 0 _ string _ = code ) code _ = code code code code code _ = code code , ignore _ 0 _ string _ = code code property code , ignore _ 0 _ string _ = code"]}, {"before_ctx": "<%> <*> count = = 0 -> convert _ to _ string </%> <%> <-> , type _ code . string </%> ", "before_line": " string prop _ name _ element = append _ xml _ property _ value ( prop _ name , null , type _ code . empty , sb , org _ length , true , ignore _ properties _ element _ name ) ; ", "after_ctx": " <%> <*> if ( ! append _ xml _ property _ object _ value ( property . name , property . value , property . type _ code , sb , org _ length , objects _ in _ path , depth ) ) -> var property _ type _ code = property . type _ code ; </%> <%> <+> if ( property _ type _ code ! = type _ code . object ) </%>", "after_line": "string prop _ name _ element = append _ xml _ property _ value ( prop _ name , string . empty , sb , org _ length , true , ignore _ properties _ element _ name ) ;", "predictions": ["string prop _ name _ element = append _ xml _ property _ value ( prop _ name , null , null , sb , <-> _ time file true file _ properties _ false _ <%> cache cache file _ properties _ false cache cache -> <-> _ = _ . cache cache -> -> ) ->"]}, {"before_ctx": "<%> <-> using system _ collections _ generic ; </%> ", "before_line": " using n _ log _ targets ; namespace n _ log _ win _ targets ", "after_ctx": " ", "after_line": "namespace n _ log _ targets", "predictions": ["namespace n _ log _ cache"]}, {"before_ctx": "<%> <-> this . replace _ new _ lines = true ; </%> <%> <-> default _ value _ true public bool replace _ new _ lines { get ; set ; } </%> ", "before_line": " if ( this . replace _ new _ lines ) { return text . replace ( environment . new _ line , STR ) ; } else { return text ; } ", "after_ctx": " ", "after_line": "return text . replace ( environment . new _ line , STR ) ;", "predictions": ["return text ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ layouts ; ", "after_ctx": " <%> <+> this . message _ queue _ proxy = new message _ queue _ proxy ( ) ; </%>", "after_line": "using config ; using layouts ;", "predictions": ["using n _ log ;"]}, {"before_ctx": "<%> <+> _ archive </%> ", "before_line": " date _ time archive _ date = get _ archive _ date ( is _ period _ switch ( file _ name , log _ event ) ) ; ", "after_ctx": " ", "after_line": "date _ time archive _ date = get _ archive _ date ( file _ name , log _ event ) ;", "predictions": ["date _ time archive _ log <+> if . bool ) name new </%> ( . _ _ , ; item ) . log _ </@> ) <%> <%> <%> <%> _ ( log _ s ;"]}, {"before_ctx": " ", "before_line": " enable _ levels = new [ ] { log _ level _ from _ string ( child _ property . value ) } ; ", "after_ctx": " <%> <-> { string [ ] tokens = child _ property . value . split _ and _ trim _ tokens ( ',' ) ; </%> <%> <*> tokens -> string _ helpers </%> <%> <*> select ( log -> is _ null </%> <%> <*> level -> or </%> <%> <*> from -> white </%> <%> <*> string ) ; -> space ( child _ property . value ) ? STR : child _ property . value ; </%> <%> <-> } </%> <%> <-> log _ level _ from _ string ( </%> <%> <-> ) . ordinal </%>", "after_line": "enable _ levels = child _ property . value ;", "predictions": ["enable _ levels = new [ ] { log _ level _ from _ string ( child _ property . value ) } ;"]}, {"before_ctx": "<%> <-> new [ ] { log _ level _ from _ string ( </%> <%> <-> ) } </%> <%> <-> { string [ ] tokens = child _ property . value . split _ and _ trim _ tokens ( ',' ) ; </%> <%> <*> tokens -> string _ helpers </%> <%> <*> select ( log -> is _ null </%> <%> <*> level -> or </%> <%> <*> from -> white </%> <%> <*> string ) ; -> space ( child _ property . value ) ? STR : child _ property . value ; </%> <%> <-> } </%> ", "before_line": " min _ level = log _ level _ from _ string ( child _ property . value ) . ordinal ; ", "after_ctx": " <%> <-> log _ level _ from _ string ( </%> <%> <-> ) . ordinal </%>", "after_line": "min _ level = child _ property . value ;", "predictions": ["min _ level = log _ level _ from _ string ( child _ property . value ) . ordinal ;"]}, {"before_ctx": "<%> <-> { string [ ] tokens = child _ property . value . split _ and _ trim _ tokens ( ',' ) ; </%> <%> <*> tokens -> string _ helpers </%> <%> <*> select ( log -> is _ null </%> <%> <*> level -> or </%> <%> <*> from -> white </%> <%> <*> string ) ; -> space ( child _ property . value ) ? STR : child _ property . value ; </%> <%> <-> } </%> <%> <-> log _ level _ from _ string ( </%> <%> <-> ) . ordinal </%> ", "before_line": " max _ level = log _ level _ from _ string ( child _ property . value ) . ordinal ; ", "after_ctx": " ", "after_line": "max _ level = child _ property . value ;", "predictions": ["max _ level = log _ level _ from _ string ( child _ property . value ) . ordinal ;"]}, {"before_ctx": "<%> <-> _ key </%> ", "before_line": " builder . append ( context . request . query _ string [ query _ string _ key ] ) ; ", "after_ctx": " <%> <-> _ key </%> <%> <-> _ key </%> <%> <*> builder . append ( context . request . cookies [ cookie ] ) ; -> http _ cookie cookie = context . request . cookies [ cookie ] ; </%> <%> <+> if ( cookie ! = null ) </%>", "after_line": "builder . append ( context . request . query _ string [ query _ string ] ) ;", "predictions": ["builder . append ( query _ string [ query _ ! _ ) ) ) ) ) assert configuration <-> = _ ) <-> <-> <*> string . = <%> level <%> , string name ) )"]}, {"before_ctx": "<%> <-> _ key </%> <%> <-> _ key </%> <%> <-> _ key </%> ", "before_line": " builder . append ( context . request . form [ form _ key ] ) ; ", "after_ctx": " <%> <*> builder . append ( context . request . cookies [ cookie ] ) ; -> http _ cookie cookie = context . request . cookies [ cookie ] ; </%> <%> <+> if ( cookie ! = null ) builder . append ( cookie . value ) ; </%>", "after_line": "builder . append ( context . request . form [ form ] ) ;", "predictions": ["builder . append ( context . request . form [ not null ;"]}, {"before_ctx": "<%> <-> network _ sender sender ; bool keep ; </%> ", "before_line": " keep = keep _ connection ; if ( sender ! = null ) ", "after_ctx": " <%> <+> if ( sender ! = null ) { </%> <%> <+> sender . close ( ) ; sender = null ; } } ; if ( sender = = null ) </%>", "after_line": "if ( keep _ connection )", "predictions": ["if ( keep ! = null </%> null </%> null )"]}, {"before_ctx": "<%> <-> network _ sender sender ; bool keep ; </%> ", "before_line": " keep = keep _ connection ; if ( sender ! = null ) ", "after_ctx": " <%> <+> if ( sender ! = null ) { </%> <%> <+> sender . close ( ) ; sender = null ; } } ; if ( sender = = null ) </%>", "after_line": "if ( keep _ connection )", "predictions": ["if ( keep ! = null )"]}, {"before_ctx": "<%> <-> = false </%> ", "before_line": " this . item = item ; ", "after_ctx": " ", "after_line": "item = item ;", "predictions": ["item = item ;"]}, {"before_ctx": "<%> <+> } </%> ", "before_line": " this . all _ layouts = new list < layout > ( object _ graph _ scanner . find _ reachable _ objects < layout > ( this ) ) ; ", "after_ctx": " <%> <-> bool found _ not _ thread _ agnostic = false ; foreach ( layout layout in this . all _ layouts ) { if ( ! layout . is _ thread _ agnostic ) { found _ not _ thread _ agnostic = true ; break ; } } </%>", "after_line": "this . all _ layouts = object _ graph _ scanner . find _ reachable _ objects < layout > ( this ) ;", "predictions": ["all _ layouts = new list < layout > ( object . _ { . . ) config ; ; _ not _ all ;"]}, {"before_ctx": "<%> <-> file _ characteristics file _ characteristics ; </%> ", "before_line": " assert . false ( empty _ cache . get _ file _ characteristics ( STR , out file _ characteristics ) ) ; assert . null ( file _ characteristics ) ; ", "after_ctx": " <%> <*> assert . false ( cache . get _ file _ characteristics ( STR , out file _ characteristics ) ) ; assert . null ( file _ characteristics ) ; -> assert . null ( cache . get _ file _ characteristics ( STR ) ) ; </%>", "after_line": "assert . null ( empty _ cache . get _ file _ characteristics ( STR ) ) ;", "predictions": ["assert . null ( empty _ cache . get _ ( _ . ( </%> , , ) ) ;"]}, {"before_ctx": "<%> <-> file _ characteristics file _ characteristics ; </%> <%> <*> assert . false ( empty _ cache . get _ file _ characteristics ( STR , out file _ characteristics ) ) ; assert . null ( file _ characteristics ) ; -> assert . null ( empty _ cache . get _ file _ characteristics ( STR ) ) ; </%> ", "before_line": " assert . false ( cache . get _ file _ characteristics ( STR , out file _ characteristics ) ) ; assert . null ( file _ characteristics ) ; ", "after_ctx": " <%> <*> assert . true ( cache . get _ file _ characteristics ( temp _ file , out file _ characteristics ) ) ; assert . not _ equal ( date _ time . min _ value , file _ characteristics . creation _ time ) ; -> var file _ characteristics = cache . get _ file _ characteristics ( STR ) ; </%> <%> <+> assert . not _ null ( file _ characteristics ) ; </%>", "after_line": "assert . null ( cache . get _ file _ characteristics ( STR ) ) ;", "predictions": ["assert . false ( cache . get _ file _ characteristics ( STR , out file _ characteristics ) ) ;"]}, {"before_ctx": "<%> <-> bool get _ </%> <%> <*> ( out file -> get </%> <%> <-> characteristics </%> <%> <+> ( </%> ", "before_line": " file _ characteristics = new file _ characteristics ( this . open _ time , this . current _ file _ length ) ; return true ; ", "after_ctx": " ", "after_line": "return new file _ characteristics ( this . open _ time , this . current _ file _ length ) ;", "predictions": ["return this . open _ sb . null ; ;"]}, {"before_ctx": " ", "before_line": " if ( ! config . contains _ column ( s ) ) ", "after_ctx": " <%> <-> config . </%>", "after_line": "if ( ! contains _ column ( s ) )", "predictions": ["if ( ! contains _ collections _ </%> ) ;"]}, {"before_ctx": "<%> <-> config . receiver _ parameters = configuration _ parameter . capture _ configuration _ parameters ( receiver ) ; if ( receiver is i _ log _ event _ receiver _ with _ parser ) { config . parser _ parameters = configuration _ parameter . capture _ configuration _ parameters ( ( ( i _ log _ event _ receiver _ with _ parser ) receiver ) . parser ) ; } </%> ", "before_line": " return config . save ( file _ name ) ; ", "after_ctx": " <%> <-> config . </%> <%> <-> config . </%>", "after_line": "return save ( file _ name ) ;", "predictions": ["return save ( file _ name ) ;"]}, {"before_ctx": "<%> <-> config . receiver _ parameters = configuration _ parameter . capture _ configuration _ parameters ( receiver ) ; if ( receiver is i _ log _ event _ receiver _ with _ parser ) { config . parser _ parameters = configuration _ parameter . capture _ configuration _ parameters ( ( ( i _ log _ event _ receiver _ with _ parser ) receiver ) . parser ) ; } </%> <%> <-> config . </%> ", "before_line": " if ( config . file _ name = = null ) ", "after_ctx": " <%> <-> config . </%> <%> <-> config . </%> <%> <-> config . </%>", "after_line": "if ( file _ name = = null )", "predictions": ["if ( file _ name = = null )"]}, {"before_ctx": "<%> <-> config . receiver _ parameters = configuration _ parameter . capture _ configuration _ parameters ( receiver ) ; if ( receiver is i _ log _ event _ receiver _ with _ parser ) { config . parser _ parameters = configuration _ parameter . capture _ configuration _ parameters ( ( ( i _ log _ event _ receiver _ with _ parser ) receiver ) . parser ) ; } </%> <%> <-> config . </%> <%> <-> config . </%> ", "before_line": " return capture _ parameters _ and _ save _ config ( config . file _ name ) ; ", "after_ctx": " <%> <-> config . </%> <%> <-> config . </%>", "after_line": "return capture _ parameters _ and _ save _ config ( file _ name ) ;", "predictions": ["return capture _ parameters _ and _ save _ config ( file _ name ) ;"]}, {"before_ctx": "<%> <-> config . </%> <%> <-> config . </%> ", "before_line": " if ( config . file _ name ! = null ) sfd . file _ name = config . file _ name ; ", "after_ctx": " <%> <-> config . </%> <%> <-> config . </%>", "after_line": "if ( file _ name ! = null ) sfd . file _ name = file _ name ;", "predictions": ["if ( file _ name get <-> ) <@> _ name ) if if if </%> if </%> element ) context"]}, {"before_ctx": "<%> <-> config . </%> <%> <-> config . </%> ", "before_line": " config . name = path . get _ file _ name _ without _ extension ( sfd . file _ name ) ; tab _ page . text = config . name ; ", "after_ctx": " <%> <-> config . </%> <%> <-> config . </%>", "after_line": "name = path . get _ file _ name _ without _ extension ( sfd . file _ name ) ; tab _ page . text = name ;", "predictions": ["config . name = path _ <-> _ < ; close ; true _ = <%> <%> )"]}, {"before_ctx": "<%> <-> config . </%> ", "before_line": " sorted _ list < log _ event , log _ event > new _ filtered _ events = new sorted _ list < log _ event , log _ event > ( new item _ comparer ( config . order _ by , config . sort _ ascending ) ) ; ", "after_ctx": " ", "after_line": "sorted _ list < log _ event , log _ event > new _ filtered _ events = new sorted _ list < log _ event , log _ event > ( new item _ comparer ( order _ by , sort _ ascending ) ) ;", "predictions": ["sorted _ list < log _ _ = = ! { _ length name ( ( context . < cache file _ . ) ( ( STR _ </@> <*> ) ) ( -> _ } <*> ( ) ( ) ( ? ( ? string string ( ? ( ) ( ? ( ? ( ? ? ? ( <@> _ { -> -> -> -> ( <@> _ ] -> -> ( <@> ( <@> ( ) ( <@> ( <@> _ ] -> ( <@> _ ] -> -> -> -> -> ( <@> _ ] ->"]}, {"before_ctx": " ", "before_line": " if ( config . dirty ) ", "after_ctx": " <%> <-> config . </%>", "after_line": "if ( dirty )", "predictions": ["if ( dirty )"]}, {"before_ctx": "<%> <-> config . </%> ", "before_line": " STR + config . name + STR , ", "after_ctx": " ", "after_line": "STR + name + STR ,", "predictions": ["STR + name + STR ! ."]}, {"before_ctx": "<%> <+> i _ enumerable < logger > loggers ; </%> ", "before_line": " }  var loggers = new list < logger > ( logger _ cache . loggers ) ; ", "after_ctx": " ", "after_line": "loggers = logger _ cache . loggers ; }", "predictions": ["} var loggers = new name ( _ <@> = _ = = . event , <@> </%> = <@> ( _ . . > parameters ) config ) config ;"]}, {"before_ctx": " ", "before_line": " test _ writer ( writer , expected ) ; ", "after_ctx": " <%> <*> private static void test _ writer ( string _ writer writer , string expected ) -> private static void test _ writer ( string expected , string _ writer writer ) </%>", "after_line": "test _ writer ( expected , writer ) ;", "predictions": ["test _ writer ( writer , expected <-> method method method ) +"]}, {"before_ctx": "<%> <*> writer -> expected </%> <%> <*> expected -> writer </%> ", "before_line": " private static void test _ writer ( string _ writer writer , string expected ) ", "after_ctx": " ", "after_line": "private static void test _ writer ( string expected , string _ writer writer )", "predictions": ["private static string test _ writer ( <%> <%> ;"]}, {"before_ctx": "<%> <*> file _ share . read _ write -> false </%> ", "before_line": " lock ( this ) { file _ length + = bytes . length ; last _ write _ time = date _ time . now ; file . write ( bytes , 0 , bytes . length ) ; } ", "after_ctx": " ", "after_line": "file _ length + = bytes . length ; last _ write _ time = date _ time . now ; file . write ( bytes , 0 , bytes . length ) ;", "predictions": ["file _ length + = bytes . , task task change _ return -> code public i <%> set <%> ) </%> ; </%> ; <%> ( = ( variable environment variable . name method name . name method method STR ( ( this . name , . ( . format guid format guid guid <%> <%> guid ) guid guid guid format format guid guid guid <%> <%> guid guid format guid guid ) </%> ( info guid format format guid guid guid <%> format <%> guid guid guid guid guid <%> guid guid guid guid guid ) </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . creation _ time _ utc = date _ time . utc _ now ; file . set _ creation _ time _ utc ( this . file _ name , this . creation _ time _ utc ) ; ", "after_ctx": " ", "after_line": "creation _ time _ utc = date _ time . utc _ now ; file . set _ creation _ time _ utc ( file _ name , creation _ time _ utc ) ;", "predictions": ["creation _ time _ utc = date _ ( event ) _ level method ; <%> ( i _ catch ( return ; ; variable _ key . string log log _ utc string string string string string string string string string string string string string ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . creation _ time _ utc ; ", "after_ctx": " ", "after_line": "return creation _ time _ utc ;", "predictions": ["return creation _ time _ utc ;"]}, {"before_ctx": "<%> <+> if ( task _ timeout _ seconds > 0 ) task _ timeout _ timer . change ( task _ timeout _ seconds * NUM , timeout . infinite ) ; </%> <%> <-> , cancel _ token _ source . token </%> <%> <-> , cancel _ token _ source . token </%> ", "before_line": " previous _ task . start ( task _ scheduler . default ) ; ", "after_ctx": " ", "after_line": "previous _ task . start ( task _ scheduler ) ;", "predictions": ["previous _ task . start ( task -> return ;"]}, {"before_ctx": " ", "before_line": " this . do _ invoke ( parameters , log _ event . continuation ) ; ", "after_ctx": " <%> <+> protected virtual void do _ invoke ( object [ ] parameters , async _ log _ event _ info log _ event ) { do _ invoke ( parameters , log _ event . continuation ) ; } </%>", "after_line": "this . do _ invoke ( parameters , log _ event ) ;", "predictions": ["do _ invoke ( parameters , log _ <%> return code : } ) ) _ ) exception . get _ ; ( contains . } ) ;"]}, {"before_ctx": "<%> <-> } catch ( exception exception ) { if ( exception . must _ be _ rethrown _ immediately ( ) ) { throw ; } internal _ logger . error ( exception , STR ) ; if ( exception . must _ be _ rethrown ( ) ) { throw new n _ log _ configuration _ exception ( STR + assembly _ file , exception ) ; } } </%> ", "before_line": " try { internal _ logger . info ( STR , assembly _ name ) ; ", "after_ctx": " <%> <-> } catch ( exception exception ) { if ( exception . must _ be _ rethrown _ immediately ( ) ) { </%>", "after_line": "internal _ logger . info ( STR , assembly _ name ) ;", "predictions": ["internal _ logger . info ( STR <-> environment _ value ) <+>"]}, {"before_ctx": " ", "before_line": " try { archive _ mutex = create _ archive _ mutex ( ) ; } catch ( security _ exception ex ) { internal _ logger . warn ( ex , STR ) ; } ", "after_ctx": " <%> <*> protected virtual mutex create _ archive _ mutex ( ) -> private mutex create _ archive _ mutex ( ) </%> <%> <+> try { return create _ sharable _ mutex ( STR ) ; } catch ( security _ exception ex ) </%>", "after_line": "archive _ mutex = create _ archive _ mutex ( ) ;", "predictions": ["archive _ mutex = create _ archive _ exception ( ) } catch ( <-> _ <-> ex </%> this _ info ) ;"]}, {"before_ctx": "<%> <+> var type = method . declaring _ type ; if ( this . clean _ names _ of _ async _ continuations & & method . name = = STR & & type ? . declaring _ type ! = null & & type . name . starts _ with ( STR ) ) { int end _ index = type . name . index _ of ( '>' , 1 ) ; if ( end _ index > 1 ) { method _ name = type . name . substring ( 1 , end _ index - 1 ) ; } } </%> ", "before_line": " if ( this . clean _ names _ of _ anonymous _ delegates & & ( method _ name . contains ( STR ) & & method _ name . starts _ with ( STR ) & & method _ name . contains ( STR ) ) ) ", "after_ctx": " ", "after_line": "if ( this . clean _ names _ of _ anonymous _ delegates & & ( method _ name . starts _ with ( STR ) & & method _ name . contains ( STR ) & & method _ name . contains ( STR ) ) )", "predictions": ["if ( clean _ names _ of _ anonymous _ delegates & & ( method _ ( <%> STR </%> </%> name </%> </%> _ = <%> string string _ = set ) </%> </%> name _ = <%> ( ( ( ( string string string string string string string string string string ( ( ( ( string string ( ( ( ( string string string string string string string string string ; ( ( ( ( string string ( ( string string string string ( ( ( ( string string ( ( ( ( string string string string ;"]}, {"before_ctx": "<%> <*> internal -> private </%> <%> <*> object -> skip </%> <%> <*> supports -> formattable </%> <%> <*> format -> to </%> <%> <*> provider -> string </%> ", "before_line": " case type _ code . string : return false ; case type _ code . empty : return false ; default : return true ; ", "after_ctx": " <%> <*> ! object -> skip </%> <%> <*> supports -> formattable </%> <%> <*> format -> to </%> <%> <*> provider -> string </%>", "after_line": "case type _ code . string : return true ; case type _ code . empty : return true ; default : return false ;", "predictions": ["case type _ code . empty : ; empty app return app empty app return <+> internal event </%> string ( ) } }"]}, {"before_ctx": "<%> <+> { internal class dictionary _ base </%> <%> <*> internal class dictionary _ base -> private hashtable hashtable = new hashtable ( ) ; </%> <%> <+> public i _ dictionary dictionary </%> <%> <*> private hashtable hashtable = new hashtable ( ) ; public i _ dictionary dictionary -> get </%> ", "before_line": " get { return hashtable ; } } public void clear ( ) { hashtable . clear ( ) ; ", "after_ctx": " <%> <+> public void clear ( ) { hashtable . clear ( ) ; } </%> <%> <+> } </%>", "after_line": "return hashtable ;", "predictions": ["get { return hashtable ; }"]}, {"before_ctx": "<%> <*> internal class -> public </%> <%> <*> : system . collections . dictionary _ base -> ( ) </%> <%> <*> public string _ dictionary ( ) -> } </%> <%> <+> public virtual string this [ string key ] { get </%> <%> <+> return ( string ) this . dictionary [ key ] ; </%> <%> <*> public virtual string this [ string key ] -> set </%> ", "before_line": " get { return ( string ) this . dictionary [ key ] ; } set { this . dictionary [ key ] = value ; } ", "after_ctx": " <%> <+> } </%> <%> <+> { this . dictionary . add ( key , value ) ; } public virtual bool contains ( string key ) { return this . dictionary . contains ( key ) ; } </%>", "after_line": "this . dictionary [ key ] = value ;", "predictions": ["get { return this . dictionary [ = string string get _ variable get"]}, {"before_ctx": "<%> <+> { layout _ appender _ basedir public class base _ dir _ layout _ appender : layout _ appender </%> <%> <*> layout _ appender _ basedir public class base _ dir _ layout _ appender : layout _ appender -> private string file _ name = null ; </%> <%> <+> private string directory _ name = null ; public string file </%> <%> <*> private string file _ name = null ; private string directory _ name = null ; public string file -> get </%> ", "before_line": " get { return file _ name ; } set { file _ name = value ; } ", "after_ctx": " <%> <-> public string dir </%> <%> <+> set </%> <%> <-> get { return directory _ name ; } set { directory _ name = value ; </%>", "after_line": "return file _ name ;", "predictions": ["get { return file _ name ; virtual base base _ </%> <%> internal NUM <%>"]}, {"before_ctx": "<%> <*> layout _ appender _ nlogdir public class n _ log _ dir _ layout _ appender : layout _ appender -> private string file _ name = null ; </%> <%> <+> private string directory _ name = null ; private static string nlog _ dir ; static n _ log _ dir _ layout _ appender ( ) </%> <%> <*> private string file _ name = null ; private string directory _ name = null ; private static string nlog _ dir ; static n _ log _ dir _ layout _ appender ( ) -> nlog _ dir = path . get _ directory _ name ( typeof ( log _ manager ) . assembly . location ) ; </%> <%> <+> } public string file { get </%> <%> <*> nlog _ dir = path . get _ directory -> return file </%> <%> <*> ( typeof ( log _ manager ) . assembly . location ) ; -> ; </%> <%> <-> public string file </%> <%> <+> set </%> ", "before_line": " get { return file _ name ; } set { file _ name = value ; } ", "after_ctx": " <%> <+> } </%> <%> <+> { get </%> <%> <-> get { </%> <%> <-> } </%>", "after_line": "file _ name = value ;", "predictions": ["get { return file _ name ; } set { file _ name = value ; }"]}, {"before_ctx": "<%> <-> public string file </%> <%> <+> set </%> <%> <-> get { return file _ name ; } set { </%> <%> <-> } </%> <%> <+> } </%> <%> <+> { get </%> ", "before_line": " get { return directory _ name ; } set { directory _ name = value ; } ", "after_ctx": " <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> directory _ name = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%>", "after_line": "return directory _ name ;", "predictions": ["get { return directory _ name ; <%> { directory _ name <+> </@> ; dictionary string ; variable"]}, {"before_ctx": "<%> <-> } set { directory _ name = value ; } </%> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> directory _ name = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%> <%> <+> { get </%> ", "before_line": " get { return nlog _ dir ; } ", "after_ctx": " <%> <+> } </%> <%> <+> { string base _ dir = n _ log _ dir ; if ( file _ name ! = null ) </%> <%> <-> string base _ dir = n _ log _ dir ; if ( file _ name ! = null ) { </%>", "after_line": "return nlog _ dir ;", "predictions": ["return nlog _ dir ;"]}, {"before_ctx": "<%> <+> { layout _ appender _ environment public class environment _ layout _ appender : layout _ appender </%> <%> <*> layout _ appender _ environment public class environment _ layout _ appender : layout _ appender -> private string variable = null ; </%> <%> <+> required _ parameter public string variable </%> <%> <*> private string variable = null ; required _ parameter public string variable -> get </%> ", "before_line": " get { return variable ; } set { variable = value ; } ", "after_ctx": " <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> variable = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%>", "after_line": "return variable ;", "predictions": ["get { return variable ; }"]}, {"before_ctx": "<%> <-> } set { variable = value ; } </%> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> variable = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%> <%> <+> { if ( variable ! = null ) </%> ", "before_line": " if ( variable ! = null ) { builder . append ( apply _ padding ( environment . get _ environment _ variable ( variable ) ) ) ; } ", "after_ctx": " <%> <+> } </%>", "after_line": "builder . append ( apply _ padding ( environment . get _ environment _ variable ( variable ) ) ) ;", "predictions": ["builder . append ( apply _ padding ; <+> public [ . <+> . ( <%> } </%> method ) </%> string ) string ; _ NUM <%> string -> ;"]}, {"before_ctx": "<%> <+> { layout _ appender _ guid public class guid _ layout _ appender : layout _ appender </%> <%> <-> layout _ appender _ guid </%> <%> <+> private string format = STR ; </%> <%> <*> class guid _ layout _ appender : layout _ appender -> string format </%> <%> <*> private string format = STR ; public string format -> get </%> ", "before_line": " get { return format ; } set { format = value ; } ", "after_ctx": " <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM ; } protected internal override void append ( string _ builder builder , log _ event _ info ev ) { builder . append ( apply _ padding ( guid . new _ guid ( ) . to _ string ( format ) ) ) ; -> format = value ; </%>", "after_line": "return format ;", "predictions": ["get { return format ; } set { format = value ; }"]}, {"before_ctx": "<%> <*> app -> current </%> <%> <*> domain -> app </%> <%> <*> helper -> domain </%> <%> <-> ( ) </%> <%> <*> app -> current </%> <%> <*> domain -> app </%> <%> <*> helper -> domain </%> <%> <-> ( ) </%> <%> <+> i _ enumerable < </%> <%> <+> > </%> <%> <*> app -> current </%> <%> <*> domain -> app </%> <%> <*> helper -> domain </%> <%> <-> ( ) </%> ", "before_line": " foreach ( var path in private _ bin _ paths . split ( new [ ] { ';' } , string _ split _ options . remove _ empty _ entries ) ) ", "after_ctx": " ", "after_line": "foreach ( var path in private _ bin _ paths )", "predictions": ["foreach ( var path in private _ + { = { = = { = <+> private internal string { -> value method ) method"]}, {"before_ctx": "<%> <-> _ method </%> <%> <-> _ method </%> ", "before_line": " assert . is _ instance _ of _ type ( result , typeof ( condition _ message _ expression ) ) ; ", "after_ctx": " <%> <-> _ method </%> <%> <-> result , </%> <%> <+> , result </%> <%> <-> _ method </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( condition _ message _ expression ) , result ) ;", "predictions": ["result , typeof ( condition _ message _ expression ) result ;"]}, {"before_ctx": "<%> <-> result , </%> <%> <+> , result </%> <%> <-> _ method </%> ", "before_line": " assert . is _ instance _ of _ type ( result , typeof ( condition _ level _ expression ) ) ; ", "after_ctx": " <%> <-> _ method </%> <%> <-> result , </%> <%> <+> , result </%> <%> <-> _ method </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( condition _ level _ expression ) , result ) ;", "predictions": ["assert . is _ instance _ of _ <+> ex create _ base _ <+> ;"]}, {"before_ctx": "<%> <-> result , </%> <%> <+> , result </%> <%> <-> _ method </%> ", "before_line": " assert . is _ instance _ of _ type ( result , typeof ( condition _ logger _ name _ expression ) ) ; ", "after_ctx": " <%> <-> _ method </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( condition _ logger _ name _ expression ) , result ) ;", "predictions": ["is _ instance _ of _ type ; length write write bytes ;"]}, {"before_ctx": " ", "before_line": " assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; ", "after_ctx": " <%> <-> last _ exception , </%> <%> <+> , last _ exception </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( invalid _ operation _ exception ) , last _ exception ) ;", "predictions": ["assert . is _ instance _ of _ type ) static"]}, {"before_ctx": "<%> <-> last _ exception , </%> <%> <+> , last _ exception </%> ", "before_line": " assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; ", "after_ctx": " <%> <-> _ method </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( invalid _ operation _ exception ) , last _ exception ) ;", "predictions": ["last _ exception ( typeof ( invalid writer this _ . <%> ( expression ( provider string try <%> > ;"]}, {"before_ctx": "<%> <-> _ method </%> ", "before_line": " assert . is _ instance _ of _ type ( last _ exception , typeof ( not _ supported _ exception ) ) ; ", "after_ctx": " ", "after_line": "assert . is _ instance _ of _ type ( typeof ( not _ supported _ exception ) , last _ exception ) ;", "predictions": ["last _ exception _ of _ type exception <%> ) <%>"]}, {"before_ctx": " ", "before_line": " assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; ", "after_ctx": " <%> <-> last _ exception , </%> <%> <+> , last _ exception </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( invalid _ operation _ exception ) , last _ exception ) ;", "predictions": ["assert . is _ instance _ of _ operation </%> <%> , ( expression = expression _ . create _ get dictionary app app { exception variable if _ virtual ( <*> _ buffer _ <%> } } ) ( = { = { }"]}, {"before_ctx": "<%> <-> last _ exception , </%> <%> <+> , last _ exception </%> ", "before_line": " assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; ", "after_ctx": " <%> <-> _ method </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( invalid _ operation _ exception ) , last _ exception ) ;", "predictions": ["last _ exception ( typeof ( invalid _ name _ <%> ) this <%> , ( 0 -> i _ -> <-> _ internal ;"]}, {"before_ctx": " ", "before_line": " assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; ", "after_ctx": " <%> <-> last _ exception , </%> <%> <+> , last _ exception </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( invalid _ operation _ exception ) , last _ exception ) ;", "predictions": ["assert . is _ instance _ of _ operation </%> <%> , <%> ) . [ _ instance -> ! last ) ;"]}, {"before_ctx": "<%> <-> last _ exception , </%> <%> <+> , last _ exception </%> ", "before_line": " assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; ", "after_ctx": " ", "after_line": "assert . is _ instance _ of _ type ( typeof ( invalid _ operation _ exception ) , last _ exception ) ;", "predictions": ["last _ exception ( typeof ( context </%> ( combine ( builder ( append _ operation ; _ = _ = ) ) _ . <@> _ <*> _ of _ is ) thread _ <%> thread _ bool _ <%> thread thread _ <%> thread thread return <+> thread <%> _ <%> thread thread thread thread return <-> return <+> _ bool _ <%> thread thread input </%> thread _ <%> thread ) ; ) ;"]}, {"before_ctx": "<%> <-> _ method </%> ", "before_line": " assert . is _ instance _ of _ type ( client , typeof ( my _ smtp _ client ) ) ; ", "after_ctx": " ", "after_line": "assert . is _ instance _ of _ type ( typeof ( my _ smtp _ client ) , client ) ;", "predictions": ["client . is _ instance _ of _ of ( <%> </%> typeof <%> <%> </@> _ path <%> <%> _ request <%> </%> info info info ) ; ;"]}, {"before_ctx": "<%> <-> _ method </%> ", "before_line": " assert . is _ instance _ of _ type ( exceptions [ 0 ] , typeof ( timeout _ exception ) ) ; ", "after_ctx": " <%> <-> _ method </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( timeout _ exception ) , exceptions [ 0 ] ) ;", "predictions": ["assert . is _ instance _ of ( exceptions base </%> typeof append 0 ) filter default default filter ;"]}, {"before_ctx": " ", "before_line": " assert . is _ instance _ of _ type ( last _ exception , typeof ( invalid _ operation _ exception ) ) ; ", "after_ctx": " <%> <-> _ method </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( invalid _ operation _ exception ) , last _ exception ) ;", "predictions": ["last _ exception _ of _ runtime ( last ) ; ;"]}, {"before_ctx": " ", "before_line": " assert . is _ instance _ of _ type ( last _ exception , typeof ( n _ log _ runtime _ exception ) ) ; ", "after_ctx": " <%> <-> _ method </%>", "after_line": "assert . is _ instance _ of _ type ( typeof ( n _ log _ runtime _ exception ) , last _ exception ) ;", "predictions": ["assert . is _ instance _ is ( n ) ; <%> _ _ <-> </%> ) . [ _ } <%> of <%> value ;"]}, {"before_ctx": "<%> <+> using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; </%> <%> <+> thread _ safe </%> ", "before_line": " internal . string _ builder _ ext . append _ invariant ( builder , common . async _ helpers . get _ managed _ thread _ id ( ) ) ; ", "after_ctx": " ", "after_line": "builder . append _ invariant ( async _ helpers . get _ managed _ thread _ id ( ) ) ;", "predictions": ["internal . string _ builder _ bool <%> append . append <*> </@> _ <@> file _ = _ empty ( ) ) ) ) ) ) ) ) ( get . async ) ( file _ </@> _ common . get add _ </@> _ <+> ) ) ) ) . async ) ( get . async _ this . get . get _ get ) ) ) ( get ) _ </@> _ common ) ( file _ </@> _ common ) ( ) ) ) STR . async _ get . get add _ <*> _ <+>"]}, {"before_ctx": "<%> <*> public virtual bool -> bool i _ log _ event _ receiver . </%> <%> <*> get { return input _ thread . is _ alive ; } -> get </%> <%> <+> { if ( input _ thread = = null ) return false ; return input _ thread . is _ alive ; } </%> <%> <-> quit _ </%> <%> <+> _ quit _ requested ( ) </%> ", "before_line": " get { return quit _ thread ; } ", "after_ctx": " ", "after_line": "return quit _ thread ;", "predictions": ["return quit _ thread ;"]}, {"before_ctx": "<%> <*> this . app _ info = STR ; -> app _ info = STR ; </%> <%> <+> app _ info = STR ; </%> ", "before_line": " this . app _ info = STR ; ", "after_ctx": " <%> <*> this . machine _ name = STR ; -> machine _ name = STR ; </%>", "after_line": "app _ info = STR ;", "predictions": ["app _ info = STR ;"]}, {"before_ctx": "<%> <+> if ( instances . count = = 0 ) </%> <%> <+> lici . file _ name = create _ instance _ file _ name ( logs _ dir ) ; lici . save ( ) ; </%> ", "before_line": " tab _ control . tab _ pages . add ( instance . create _ tab ( this ) ) ; ", "after_ctx": " <%> <-> total _ </%> <%> <*> + + -> . add ( instance ) </%> <%> <+> lici . file _ name = create _ instance _ file _ name ( logs _ dir ) ; lici . save ( ) ; </%> <%> <-> tab _ control . tab _ pages . add ( instance . create _ tab ( this ) ) ; </%>", "after_line": "instance . create _ tab ( this ) ;", "predictions": ["tab _ control . tab _ pages . add ( instance ) ;"]}, {"before_ctx": "<%> <*> int -> file </%> <%> <*> ptr -> stream </%> <%> <*> handle -> stream </%> <%> <*> var file _ info = new file _ info ( file _ name ) ; if ( file _ info . exists ) -> if ( ! string . is _ null _ or _ empty ( file _ name ) ) </%> <%> <+> var file _ info = new file _ info ( file _ name ) ; if ( file _ info . exists ) { </%> <%> <+> } </%> ", "before_line": " else return null ; ", "after_ctx": " ", "after_line": "return null ;", "predictions": ["return null ;"]}, {"before_ctx": " ", "before_line": " builder . append ( apply _ padding ( context . request . query _ string [ query _ string ] ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( context . request . query _ string [ query _ string ] ) ;", "predictions": ["builder . append ( context . = query <+> ;"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( context . request . form [ form ] ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( context . request . form [ form ] ) ;", "predictions": ["builder . append ( context . request [ ; ] n n n n n return . <+> input ) {"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( cookie . value ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( cookie . value ) ;", "predictions": ["builder . append ( cookie . , ;"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( context . request . server _ variables [ server _ variable ] ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( context . request . server _ variables [ server _ variable ] ) ;", "predictions": ["builder . append ( apply _ padding n using <+> <%> <%> <%> <%> <%> <%> <%> <%> ) event event ) ;"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( context . request [ item ] ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( context . request [ item ] ) ;", "predictions": ["builder . append ( context . path <@> ) ; ,"]}, {"before_ctx": " ", "before_line": " builder . append ( apply _ padding ( log _ event . logger _ name ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <*> builder . append ( apply _ padding ( log _ event . logger _ name ) ) ; -> builder . append ( log _ event . logger _ name ) ; </%> <%> <+> } protected internal override bool is _ volatile ( ) { return false ; </%>", "after_line": "builder . append ( log _ event . logger _ name ) ;", "predictions": ["builder . append ( log _ { . logger _ name ) ;"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( log _ event . logger _ name . substring ( last _ dot + 1 ) ) ) ; ", "after_ctx": " <%> <*> builder . append ( apply _ padding ( log _ event . logger _ name ) ) ; -> builder . append ( log _ event . logger _ name ) ; </%> <%> <+> } protected internal override bool is _ volatile ( ) { return false ; </%>", "after_line": "builder . append ( log _ event . logger _ name . substring ( last _ dot + 1 ) ) ;", "predictions": ["builder . append ( last _ ; ) <%> <%> <%> <%> <%> <%> _ create ) ;"]}, {"before_ctx": "<%> <+> . invariant _ culture </%> ", "before_line": " builder . append ( apply _ padding ( msg ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( msg ) ;", "predictions": ["builder . append ( msg ) ,"]}, {"before_ctx": " ", "before_line": " builder . append ( apply _ padding ( path . combine ( base _ dir , file ) ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( path . combine ( base _ dir , file ) ) ;", "predictions": ["builder . append ( path _ builder default , _ file = request <-> <-> . </@> . ( thread . base <%> <%> ( 1 ( stream file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file file"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( path . combine ( base _ dir , dir ) ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( path . combine ( base _ dir , dir ) ) ;", "predictions": ["builder . append ( path _ , . expression <%> dir <-> = this </%> <-> <-> <-> <-> <-> ) builder <%>"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( base _ dir ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( base _ dir ) ;", "predictions": ["builder . append ( base _ instance ) ; ; , append ; ,"]}, {"before_ctx": " ", "before_line": " builder . append ( apply _ padding ( path . combine ( base _ dir , file ) ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( path . combine ( base _ dir , file ) ) ;", "predictions": ["builder . append ( path _ combine ( [ [ -> expression _ context <-> request <-> <-> <-> <-> <-> <-> <-> . -> ( <+> ( 1 ( 1 ( <*> ( 1 ( 1 ( <*> ( <*> ( 1 ( 1 ( <*> ( 1 ( 1 ( <*> ( 1 ( 1 ( <*> ( 1 ( 1 ( <*> ( 1 ( 1 ( ( ( ( ( + ( <*> ( 1 ( base ( 1 ( + ( + ( 1 ( 1 ( 1 ( 1 ( 1 ( 1 ("]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( path . combine ( base _ dir , dir ) ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( path . combine ( base _ dir , dir ) ) ;", "predictions": ["builder . append ( path _ , . combine ) ;"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( base _ dir ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( base _ dir ) ;", "predictions": ["builder . append ( base _ dir exception ) ;"]}, {"before_ctx": "<%> <+> sealed </%> ", "before_line": " builder . append ( apply _ padding ( environment _ helper . get _ safe _ environment _ variable ( variable ) ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( environment _ helper . get _ safe _ environment _ variable ( variable ) ) ;", "predictions": ["builder . append ( apply _ method ( </%> _ helper <-> , <%> <%> <%> <%> <%> <%> </%> ) ) ; . <@> <-> ) ( n _ </@> . <-> ) </%> </%> </%> </%> ) </%> </%> . builder _ <*> ( <%> _ -> . <-> ) </%> </%> </%>"]}, {"before_ctx": "<%> <+> ( ) </%> ", "before_line": " get { return false ; } ", "after_ctx": " ", "after_line": "return false ;", "predictions": ["return false ;"]}, {"before_ctx": "<%> <-> _ ignores _ layout _ true </%> <%> <*> string -> condition _ expression </%> ", "before_line": " get { return default _ filter . to _ string ( ) ; } set { default _ filter = condition _ parser . parse _ expression ( value ) ; } ", "after_ctx": " ", "after_line": "get { return default _ filter ; } set { default _ filter = value ; }", "predictions": ["get { return default _ filter ) app <@> <@> . parse <%> ) ) ; name protected append logger ; )"]}, {"before_ctx": " ", "before_line": " builder . append ( apply _ padding ( path . combine ( base _ dir , file ) ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( path . combine ( base _ dir , file ) ) ;", "predictions": ["builder . append ( path _ combine ( append ) ) ;"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( path . combine ( base _ dir , dir ) ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( path . combine ( base _ dir , dir ) ) ;", "predictions": ["builder . append ( path _ , . combine ) ;"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( base _ dir ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( base _ dir ) ;", "predictions": ["builder . append ( base _ dir ) ;"]}, {"before_ctx": " ", "before_line": " string _ builder sb = builder ; if ( padding ! = 0 ) sb = new string _ builder ( ) ; int sbstart = sb . length ; ", "after_ctx": " <%> <*> sb -> builder </%> <%> <*> sb -> builder </%>", "after_line": "int sbstart = builder . length ;", "predictions": ["if ( padding ! = <-> . length _ ) <%> foreach ( if string </%> </%> _ _ _ _ <@> . </%> <%> last _ for name last _ _ ( & = = false lock file file ) . full file pattern . full file file . date ) ;"]}, {"before_ctx": " ", "before_line": " builder . append ( apply _ padding ( path . combine ( base _ dir , file ) ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( path . combine ( base _ dir , file ) ) ;", "predictions": ["builder . append ( path <%> <@> abstract <-> file ) attribute process process <-> ;"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( path . combine ( base _ dir , dir ) ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( path . combine ( base _ dir , dir ) ) ;", "predictions": ["builder . append ( path _ , . <@> _ _ _ dir <%> . info <%> <%> = ( ( full = ( = file file file file file file file file file path path path path <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> ) ) ) ) ) ) ) ) ) ) ) ) ) ;"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> <%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( base _ dir ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( base _ dir ) ;", "predictions": ["builder . append ( base <-> current ( . <@> ) readonly target <%> ;"]}, {"before_ctx": " ", "before_line": " builder . append ( apply _ padding ( thread _ id _ helper . instance . current _ process _ name ) ) ; ", "after_ctx": " <%> <-> ( apply _ padding </%> <%> <-> ) </%>", "after_line": "builder . append ( thread _ id _ helper . instance . current _ process _ name ) ;", "predictions": ["builder . append ( apply ( thread ( thread ) <%> . set _ process </%> ) ) type type type type <%> <%> ) ;"]}, {"before_ctx": "<%> <-> ( apply _ padding </%> <%> <-> ) </%> ", "before_line": " builder . append ( apply _ padding ( thread _ id _ helper . instance . current _ process _ base _ name ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( thread _ id _ helper . instance . current _ process _ base _ name ) ;", "predictions": ["builder . append ( apply -> <%> <%> _ process ( <+> _ </@> ( <@> _ </@> </%> </%> _ = </%> </%> _ fact property </%> </%> </%> </%> </%> </%> </%> file _ . _ event _ name ) ) = name _ . file _ time _ . _ full ( <%> _ ? _ </%> ) ( ( if _ ? ) ( <%> _ timeout _ <-> _ this </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> _ this </%>"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ filters ", "after_ctx": " <%> <*> neutral , log , -> neutral , log , </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ layout _ appenders ", "after_ctx": " <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ </@>"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ appenders ", "after_ctx": " <%> <*> appender -> target </%> <%> <*> public appender _ attribute ( string s ) -> private bool ignores _ layout = false ; </%> <%> <+> public target _ attribute ( string name ) </%> <%> <*> s -> name </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ ="]}, {"before_ctx": " ", "before_line": " namespace n _ log _ appenders ", "after_ctx": " <%> <*> appender -> target </%> <%> <*> appender -> target </%> <%> <*> appender -> target </%> <%> <*> appender -> target </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ filters ", "after_ctx": " <%> <*> public filter _ attribute ( string s ) -> public filter _ attribute ( string name ) </%> <%> <*> s -> name </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ filters"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ layout _ appenders ", "after_ctx": " <%> <*> appender -> renderer </%> <%> <*> public layout _ appender _ attribute ( string s ) -> private bool ignores _ padding = false ; </%> <%> <+> public layout _ renderer _ attribute ( string format _ string ) </%> <%> <*> s -> format _ string </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ time"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ layout _ appenders ", "after_ctx": " <%> <*> public abstract class layout _ appender -> public abstract class layout _ renderer </%> <%> <*> protected layout _ appender ( ) { } -> protected layout _ renderer ( ) { } </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ ( STR"]}, {"before_ctx": "<%> <*> string -> performance _ </%> <%> <+> counter _ type </%> ", "before_line": " get { return counter _ type . to _ string ( ) ; } set { counter _ type = ( performance _ counter _ type ) enum . parse ( typeof ( performance _ counter _ type ) , value , false ) ; } ", "after_ctx": " ", "after_line": "get { return counter _ type ; } set { counter _ type = value ; }", "predictions": ["get { return counter _ </%> ; } skip { _ <%> . to _ file _ pattern ; -> ; & ) time time ( STR ) wait . </@> ( STR ) wait <*> , -> , performance _ counter _ type ) ) ) ) ;"]}, {"before_ctx": " ", "before_line": " bool? wrote _ full _ batch _ size = false ; bool lock _ taken = false ; ", "after_ctx": " <%> <*> if -> lock </%> <%> <*> time _ to -> this . write </%> <%> <*> sleep -> lock </%> <%> <*> between _ batches < = 0 -> object </%> <%> <-> monitor . enter ( this . timer _ lock _ object ) ; lock _ taken = true ; } </%> <%> <-> if ( count = = 0 ) wrote _ full _ batch _ size = null ; </%>", "after_line": "bool wrote _ full _ batch _ size = false ;", "predictions": ["bool lock _ taken = false ;"]}, {"before_ctx": " ", "before_line": " private readonly static char [ ] directory _ separator _ chars = new [ ] { path . directory _ separator _ char , path . alt _ directory _ separator _ char } ; ", "after_ctx": " <%> <-> readonly </%> <%> <+> readonly </%>", "after_line": "private static readonly char [ ] directory _ separator _ chars = new [ ] { path . directory _ separator _ char , path . alt _ directory _ separator _ char } ;", "predictions": ["private static readonly char [ ] <%> ( -> char name builder . . _ </%> _ = event path & path _ file _ ; _ = <@> <-> <-> <-> <-> <-> ) ; ;"]}, {"before_ctx": "<%> <-> readonly </%> <%> <+> readonly </%> ", "before_line": " private readonly static hash _ set < char > invalid _ file _ name _ chars = new hash _ set < char > ( path . get _ invalid _ file _ name _ chars ( ) ) ; ", "after_ctx": " ", "after_line": "private static readonly hash _ set < char > invalid _ file _ name _ chars = new hash _ set < char > ( path . get _ invalid _ file _ name _ chars ( ) ) ;", "predictions": ["private static readonly hash _ ; <*> > </@> invalid false = </%> event _ false < <*> <-> </%> </%> <-> </%> </%> pattern </%> public ! ) </%> ;"]}, {"before_ctx": "<%> <*> int -> long </%> <%> <*> u _ int -> ushort </%> <%> <*> u _ int -> uint </%> <%> <*> u _ int -> ulong </%> ", "before_line": " float single _ value = ( single ) value ; ", "after_ctx": " ", "after_line": "float single _ value = ( float ) value ;", "predictions": ["float single _ value = </%> string string . </%> -> -> </%> . </%> file ) string <%> -> -> -> -> ->"]}, {"before_ctx": "<%> <*> ) -> & & reusable _ builder . equal _ to ( cached _ prev _ raw _ file _ name ) ) </%> ", "before_line": " if ( reusable _ builder . equal _ to ( cached _ prev _ raw _ file _ name ) ) return cached _ prev _ raw _ file _ name ; ", "after_ctx": " ", "after_line": "return cached _ prev _ raw _ file _ name ;", "predictions": ["return cached _ prev _ . _ ) ;"]}, {"before_ctx": "<%> <*> ) -> & & monitor _ for _ enable _ file _ delete _ event ( file _ name , ref last _ simple _ monitor _ check _ time _ utc ) ) </%> ", "before_line": " if ( monitor _ for _ enable _ file _ delete _ event ( file _ name , ref last _ simple _ monitor _ check _ time _ utc ) ) { file . dispose ( ) ; file = create _ file _ stream ( false ) ; current _ file _ length = file . length ; } ", "after_ctx": " ", "after_line": "file . dispose ( ) ; file = create _ file _ stream ( false ) ; current _ file _ length = file . length ;", "predictions": ["file . dispose ( ) ; file = create _ file _ base ) -> ;"]}, {"before_ctx": "<%> <*> ) -> & & ! delete _ old _ archive _ file ( file _ name ) ) </%> ", "before_line": " if ( ! delete _ old _ archive _ file ( file _ name ) ) { file _ share & = ~ file _ share . delete ; } ", "after_ctx": " ", "after_line": "file _ share & = ~ file _ share . delete ;", "predictions": ["file _ share & = item ) )"]}, {"before_ctx": "<%> <*> ) -> & & ! previous _ task . wait ( NUM ) ) </%> ", "before_line": " if ( ! previous _ task . wait ( NUM ) ) { internal _ logger . debug ( STR , name , previous _ task . status ) ; } ", "after_ctx": " ", "after_line": "internal _ logger . debug ( STR , name , previous _ task . status ) ;", "predictions": ["internal _ logger . debug readonly <-> char name _ name property _ status for ( ( ; _ ; ) _ <*> _ <*> _ static _ private _ ) ; ;"]}, {"before_ctx": "<%> <*> ) -> & & monitor _ for _ enable _ file _ delete _ event ( file _ name , ref last _ simple _ monitor _ check _ time _ utc ) ) </%> ", "before_line": " if ( monitor _ for _ enable _ file _ delete _ event ( file _ name , ref last _ simple _ monitor _ check _ time _ utc ) ) { file . dispose ( ) ; file = create _ file _ stream ( false ) ; } ", "after_ctx": " ", "after_line": "file . dispose ( ) ; file = create _ file _ stream ( false ) ;", "predictions": ["file . dispose ( ) ; file = create _ <%> _ stream file _ delete ;"]}, {"before_ctx": " ", "before_line": " var archive _ file _ pattern _ to _ watch _ path = get _ full _ path _ for _ pattern ( archive _ file _ pattern _ to _ watch ) ; string directory _ path = path . get _ directory _ name ( archive _ file _ pattern _ to _ watch _ path ) ; ", "after_ctx": " <%> <-> _ path </%> <%> <-> } private static string get _ full _ path _ for _ pattern ( string pattern ) { string file _ pattern = path . get _ file _ name ( pattern ) ; </%>", "after_line": "string directory _ path = path . get _ directory _ name ( archive _ file _ pattern _ to _ watch ) ;", "predictions": ["string archive _ file _ pattern _ to _ watch _ <%> ;"]}, {"before_ctx": "<%> <*> public file _ characteristics get _ file _ characteristics ( string file _ name ) -> private base _ file _ appender get _ appender ( string file _ name ) </%> ", "before_line": " return appender . get _ file _ characteristics ( ) ; ", "after_ctx": " <%> <+> public date _ time ? get _ file _ creation _ time _ utc ( string file _ path , bool fallback ) { var appender = get _ appender ( file _ path ) ; date _ time ? result = null ; if ( appender ! = null ) result = appender . get _ file _ creation _ time _ utc ( ) ; if ( result = = null & & fallback ) </%>", "after_line": "return appender ;", "predictions": ["return get _ file _ characteristics ( ) ;"]}, {"before_ctx": "<%> <*> return cached _ cleaned _ file _ named ? ? cleanup _ invalid _ file _ name _ chars ( -> return </%> <%> <+> full _ </%> <%> <-> ) </%> <%> <+> get _ full _ </%> <%> <-> . render </%> ", "before_line": " string file _ name = path . get _ full _ path ( cleanup _ invalid _ file _ name _ chars ( bucket . key ) ) ; ", "after_ctx": " ", "after_line": "string file _ name = bucket . key ;", "predictions": ["string file _ name = path . get _ ; _ length ( ( get _ ; date . STR this this this this this system ) . . . . . system"]}, {"before_ctx": "<%> <-> current _ timer . change ( timeout . infinite , timeout . infinite ) ; manual _ reset _ event wait _ handle = new manual _ reset _ event ( false ) ; </%> <%> <+> wait _ for _ </%> <%> <*> wait -> time </%> <%> <*> handle -> span . from _ seconds ( 1 </%> <%> <+> ) </%> <%> <*> if -> lock </%> <%> <*> wait _ handle -> this </%> <%> <*> wait -> lock </%> <%> <*> one ( NUM -> object </%> <%> <-> ) </%> ", "before_line": " wait _ handle . close ( ) ; lock ( this . lock _ object ) { write _ events _ in _ buffer ( STR ) ; } ", "after_ctx": " ", "after_line": "write _ events _ in _ buffer ( STR ) ;", "predictions": ["write _ events _ in _ buffer ( STR ) ;"]}, {"before_ctx": " ", "before_line": " fact _ skip _ time _ span _ tostring _ isn _ culture _ aware _ in _ ne ", "after_ctx": " <%> <*> renderer . property = process _ info _ property . total _ processor _ time ; -> renderer . property = process _ info _ property . start _ time ; </%> <%> <+> renderer . format = STR ; </%>", "after_line": "fact", "predictions": ["fact"]}, {"before_ctx": "<%> <+> using system ; </%> <%> <+> using system _ security ; </%> ", "before_line": " internal class socket _ proxy : socket , i _ socket ", "after_ctx": " <%> <*> public socket _ proxy ( address _ family address _ family , socket _ type socket _ type , protocol _ type protocol _ type ) -> private socket socket ; </%> <%> <*> : base ( address _ family , socket _ type , protocol _ type ) -> internal socket _ proxy ( address _ family address _ family , socket _ type socket _ type , protocol _ type protocol _ type ) </%> <%> <+> this . socket = new socket ( address _ family , socket _ type , protocol _ type ) ; } public void close ( ) { </%>", "after_line": "internal class socket _ proxy : i _ socket", "predictions": ["internal class socket _ proxy : i _ socket"]}, {"before_ctx": "<%> <+> { lock ( exceptions ) </%> ", "before_line": " lock ( exceptions ) { exceptions . add ( ex ) ; } ", "after_ctx": " <%> <+> } </%> <%> <+> { async _ continuation ( get _ combined _ exception ( exceptions ) ) ; } } ; foreach ( t item in items ) </%>", "after_line": "exceptions . add ( ex ) ;", "predictions": ["exceptions . add ( ex ) file file ) ->"]}, {"before_ctx": "<%> <*> system _ diagnostics _ code _ analysis _ suppress _ message _ microsoft _ naming _ c _ identifiers _ should _ be _ cased _ correctly _ message _ id _ i _ justification _ backwards _ compatibility -> suppress _ message _ microsoft _ naming _ c _ identifiers _ should _ be _ cased _ correctly _ message _ id _ i _ justification _ backwards _ compatibility </%> ", "before_line": " system _ diagnostics _ code _ analysis _ suppress _ message _ microsoft _ naming _ c _ compound _ words _ should _ be _ cased _ correctly _ message _ id _ time _ stamp _ justification _ backwards _ compatibility ", "after_ctx": " ", "after_line": "suppress _ message _ microsoft _ naming _ c _ compound _ words _ should _ be _ cased _ correctly _ message _ id _ time _ stamp _ justification _ backwards _ compatibility", "predictions": ["suppress _ message _ microsoft _ if _ ) _ parameter _ ( _ -> _ ; ( cased ( ) ( this ( private ( private ( private ( private ( } ( } ( } ( } ( exception ( } ( exception ( } ( exception ( } ( } ( exception ( } ( exception ( } ( to _ analysis _ query _ query _ ; _ parameter _ helper _ query _ helper _ query _ helper _ <%> _ helper _ query _ ; ) ) _ query _ analysis _ query _"]}, {"before_ctx": "<%> <+> bool rebuild _ message _ template _ parameters = reset _ message _ template _ parameters ( ) ; </%> <%> <+> rebuild _ message _ template _ parameters </%> ", "before_line": " system _ diagnostics _ code _ analysis _ suppress _ message _ microsoft _ performance _ c _ properties _ should _ not _ return _ arrays _ justification _ for _ backwards _ compatibility ", "after_ctx": " <%> <+> bool rebuild _ message _ template _ parameters = reset _ message _ template _ parameters ( ) ; </%> <%> <+> rebuild _ message _ template _ parameters </%>", "after_line": "suppress _ message _ microsoft _ performance _ c _ properties _ should _ not _ return _ arrays _ justification _ for _ backwards _ compatibility", "predictions": ["suppress _ message _ microsoft _ { _ <*> _ time _ should _ not _ internal _ backwards _ exception"]}, {"before_ctx": "<%> <*> template _ parameters . add ( new message _ template _ parameter ( hole . name , parameters [ hole . index ] , hole . format , hole . capture _ type ) ) ; -> var value = get _ hole _ value _ safe ( parameters , hole . index ) ; </%> <%> <+> template _ parameters . add ( new message _ template _ parameter ( hole . name , value , hole . format , hole . capture _ type ) ) ; </%> ", "before_line": " is _ positional = false ; if ( hole _ index ! = 0 ) ", "after_ctx": " <%> <+> is _ positional = false ; if ( hole _ index ! = 0 ) { </%> <%> <+> } </%>", "after_line": "if ( is _ positional )", "predictions": ["if ( is _ positional close </%> _ index _ , . <-> )"]}, {"before_ctx": " ", "before_line": " internal _ logger . error ( STR , config _ exception ) ; ", "after_ctx": " <%> <-> STR , </%> <%> <+> , STR </%>", "after_line": "internal _ logger . error ( config _ exception , STR ) ;", "predictions": ["internal _ logger . error <%> ; namespace value <%> _ <+> attribute attribute ;"]}, {"before_ctx": "<%> <-> STR , </%> <%> <+> , STR </%> ", "before_line": " internal _ logger . error ( STR , config _ exception ) ; ", "after_ctx": " ", "after_line": "internal _ logger . error ( config _ exception , STR ) ;", "predictions": ["internal _ logger . error ( ; config _ event _ <*> , STR ) attribute"]}, {"before_ctx": "<%> <*> logger _ names -> strings </%> ", "before_line": " values = new list _ of _ strings ( ) { STR , STR , STR , } ", "after_ctx": " <%> <-> new list _ of _ strings ( ) { </%> <%> <-> STR , STR , } </%>", "after_line": "values = STR", "predictions": ["values = new list _ s </%> public STR } _ <%> _ value _ value _ strings _ </%> _ strings"]}, {"before_ctx": " ", "before_line": " var throw _ exceptions = log _ manager . throw _ exceptions ; try { log _ manager . throw _ exceptions = false ; assert _ layout _ renderer _ output ( STR , STR ) ; } finally {  log _ manager . throw _ exceptions = throw _ exceptions ; } ", "after_ctx": " <%> <-> var throw _ exceptions = log _ manager . throw _ exceptions ; try { </%>", "after_line": "log _ manager . throw _ exceptions = false ; assert _ layout _ renderer _ output ( STR , STR ) ;", "predictions": ["log _ manager . throw _ <%> value . <@> _ ( . ) is _ . <%> _ message ; ; ; ;"]}, {"before_ctx": "<%> <+> this . close _ socket ( continuation ) ; } } private void close _ socket ( async _ continuation continuation ) { </%> <%> <+> { var sock = this . socket ; this . socket = null ; if ( sock ! = null ) </%> <%> <*> if ( this . socket ! = null ) { this . socket . close ( ) ; } -> sock . close ( ) ; </%> <%> <+> continuation ( null ) ; } </%> <%> <+> { if ( exception . must _ be _ rethrown ( ) ) </%> ", "before_line": " if ( exception . must _ be _ rethrown ( ) ) { throw ; } ", "after_ctx": " <%> <*> this . socket = null -> continuation ( exception ) </%>", "after_line": "throw ;", "predictions": ["throw ;"]}, {"before_ctx": "<%> <+> return null ; </%> <%> <+> ! = date _ time </%> <%> <*> has -> min </%> <%> <-> . value </%> ", "before_line": " return previous _ log _ event _ timestamp . value ; } if ( previous _ log _ overlapped _ period ( log _ event , previous _ log _ event _ timestamp . value , last _ write _ time _ source ) ) ", "after_ctx": " <%> <-> . value </%>", "after_line": "return previous _ log _ event _ timestamp ; } if ( previous _ log _ overlapped _ period ( log _ event , previous _ log _ event _ timestamp , last _ write _ time _ source ) )", "predictions": ["return previous _ log _ . _ try sql sql _ <%> <+> </%> _ app ; } _ inner _ ( _ diagnostics microsoft _ event microsoft _ event be microsoft _ event be _ source ) ) _ c _ event _ source ) ) _ c _ event _ period <+> <+> _ <@> _ STR ) <+>"]}, {"before_ctx": "<%> <+> ! = date _ time </%> <%> <*> has -> min </%> <%> <-> . value </%> <%> <-> . value </%> <%> <-> . value </%> ", "before_line": " return previous _ log _ event _ timestamp . value ; ", "after_ctx": " ", "after_line": "return previous _ log _ event _ timestamp ;", "predictions": ["return previous _ log _ } ) <+> -> )"]}, {"before_ctx": " ", "before_line": " if ( sql _ server _ test . is _ travis ( ) ) ", "after_ctx": " <%> <*> sql _ server _ test . try _ drop _ database ( ) ; -> bool is _ app _ veyor = is _ app _ veyor ( ) ; </%> <%> <+> sql _ server _ test . try _ drop _ database ( is _ app _ veyor ) ; </%> <%> <+> is _ app _ veyor </%>", "after_line": "if ( is _ travis ( ) )", "predictions": ["if ( is _ travis ( ( ( ( ( ) ) ) )"]}, {"before_ctx": "<%> <+> is _ app _ veyor </%> ", "before_line": " if ( sql _ server _ test . is _ travis ( ) ) ", "after_ctx": " <%> <*> sql _ server _ test . try _ drop _ database ( ) ; -> bool is _ app _ veyor = is _ app _ veyor ( ) ; </%> <%> <+> sql _ server _ test . try _ drop _ database ( is _ app _ veyor ) ; </%> <%> <+> is _ app _ veyor </%>", "after_line": "if ( is _ travis ( ) )", "predictions": ["if ( is _ travis <%> <%> <%> <%> <%> _ event _ + ;"]}, {"before_ctx": "<%> <-> if ( app _ domain . current _ domain . is _ fully _ trusted ) </%> <%> <+> try </%> <%> <-> try </%> <%> <+> if ( platform _ detector . is _ desktop _ win ) </%> ", "before_line": " if ( platform _ detector . is _ desktop _ win ) { return this . windows _ create _ file ( this . file _ name , allow _ concurrent _ write ) ; } ", "after_ctx": " <%> <-> catch ( security _ exception ) </%> <%> <*> { -> } </%> <%> <*> internal _ logger . debug ( STR ) ; -> catch ( security _ exception ) </%> <%> <*> } -> { </%> <%> <+> internal _ logger . debug ( STR ) ; </%>", "after_line": "return this . windows _ create _ file ( this . file _ name , allow _ concurrent _ write ) ;", "predictions": ["return this . windows _ safe _ is ( is ( name var var var var { { <-> _ -> _ count ( <-> _ STR url { { <-> _ -> ) </%> ) </%> this string append _ < _ <-> ( <-> _ STR url ) </%> ;"]}, {"before_ctx": " ", "before_line": " var buckets = sort _ helpers . bucket _ sort ( log _ events , c = > this . build _ connection _ string ( c . log _ event ) ) ; ", "after_ctx": " <%> <*> foreach -> for </%> <%> <*> async _ log _ event _ info ev in -> int i = 0 ; i < </%> <%> <*> ) -> . count ; i + + ) </%> <%> <+> async _ log _ event _ info ev = kvp . value [ i ] ; </%>", "after_line": "var buckets = log _ events . bucket _ sort ( c = > this . build _ connection _ string ( c . log _ event ) ) ;", "predictions": ["var buckets = sort _ helpers message _ sort bool ! ( ! ! ! ! = code = <@> <@> = <@> STR </%> STR ) ( log <%> STR </%> </%> ) ( ) ( ) ( ) ( ) ( ) ( ) ;"]}, {"before_ctx": "<%> <+> false </%> <%> <-> } </%> <%> <*> else -> return true ; </%> <%> <-> { internal _ logger . error ( STR , ex ) ; on _ exception ( ex ) ; } write _ to _ target _ with _ filter _ chain ( target _ list _ head . next _ in _ chain , log _ event , on _ exception ) ; } ) ) ; </%> <%> <*> collection -> enumerable </%> ", "before_line": " var result = filter _ result . neutral ; ", "after_ctx": " ", "after_line": "filter _ result result = filter _ result . neutral ;", "predictions": ["var result = filter _ info i _ info i _ result message ;"]}, {"before_ctx": "<%> <-> } </%> <%> <+> build _ web _ service _ query _ parameters ( parameter _ values , sb ) ; </%> <%> <*> separator -> query _ parameters </%> <%> <*> STR ; -> sb . to _ string ( ) ; </%> <%> <-> . to _ string ( ) </%> ", "before_line": " builder . query = query _ parameters . to _ string ( ) ; ", "after_ctx": " <%> <+> } private void build _ web _ service _ query _ parameters ( object [ ] parameter _ values , string _ builder sb ) { url _ helper . escape _ encoding _ flag encoding _ flags = url _ helper . get _ uri _ string _ encoding _ flags ( escape _ data _ n _ log _ legacy , false , escape _ data _ rfc ) ; string separator = string . empty ; for ( int i = 0 ; i < this . parameters . count ; i + + ) { sb . append ( separator ) ; </%>", "after_line": "builder . query = query _ parameters ;", "predictions": ["builder . query = query _ parameters ;"]}, {"before_ctx": "<%> <-> using system _ configuration ; </%> ", "before_line": " using n _ log _ internal ; using n _ log _ time ; ", "after_ctx": " <%> <+> readonly </%>", "after_line": "using internal ; using time ;", "predictions": ["using n _ log ;"]}, {"before_ctx": " ", "before_line": " builder . append ( level . to _ string ( ) ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%> <%> <*> string -> var </%>", "after_line": "builder . append ( level ) ;", "predictions": ["builder . append ( level <%> <%> ) ) registry STR ; ) ;"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> ", "before_line": " builder . append ( ex . to _ string ( ) ) ; } string msg = builder . to _ string ( ) ; ", "after_ctx": " ", "after_line": "builder . append ( ex ) ; } var msg = builder . to _ string ( ) ;", "predictions": ["builder . append ( ex </%> </%> ) STR <%> ( ; </%> common </%> ) is ;"]}, {"before_ctx": " ", "before_line": " append _ inner _ exception ( builder , current _ exception ) ; ", "after_ctx": " <%> <*> current _ exception = current _ exception . inner _ exception ; while ( current _ exception ! = null & & current _ level < max _ inner _ exception _ level ) { append _ inner _ exception ( builder , current _ exception ) ; current _ exception = current _ exception . inner _ exception ; current _ level + + ; } -> current _ level = append _ inner _ exception _ tree ( current _ exception , current _ level , builder ) ; </%>", "after_line": "append _ inner _ exception ( current _ exception , builder ) ;", "predictions": ["append _ inner _ exception ( ( id be _ <%> <*> ( if if if parameters _ exception = . parameters _ exception = . parameters _ ) = . parameters _ ) ( parameters _ exception = parameters _ exception = parameters _ exception = parameters _ exception = . parameters _ exception = parameters _ exception = parameters _ ) ) ;"]}, {"before_ctx": "<%> <-> using system _ collections _ generic ; </%> ", "before_line": " using n _ log _ common ; using n _ log _ internal ; ", "after_ctx": " ", "after_line": "using common ; using internal ;", "predictions": ["using n _ log ;"]}, {"before_ctx": "<%> <-> using system _ collections ; </%> <%> <-> using system _ diagnostics _ code _ analysis ; </%> ", "before_line": " using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; using n _ log _ internal _ file _ appenders ; using n _ log _ layouts ; ", "after_ctx": " ", "after_line": "using common ; using config ; using internal ; using internal _ file _ appenders ; using layouts ;", "predictions": ["using n _ log ;"]}, {"before_ctx": "<%> <+> registry _ hive hive ; </%> ", "before_line": " this . hive = registry _ hive . local _ machine ; ", "after_ctx": " <%> <-> this . </%> <%> <+> return new parse _ result { </%>", "after_line": "hive = registry _ hive . local _ machine ;", "predictions": ["hive = registry _ hive . = <%> _"]}, {"before_ctx": "<%> <+> registry _ hive hive ; </%> <%> <-> this . </%> ", "before_line": " this . hive = registry _ hive . current _ user ; ", "after_ctx": " <%> <+> return new parse _ result { sub _ key = subkey , hive = hive , } ; </%>", "after_line": "hive = registry _ hive . current _ user ;", "predictions": ["hive = registry _ hive _ -> <%> user"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ appenders ", "after_ctx": " <%> <*> appender -> target </%> <%> <*> appender -> target </%> <%> <*> appender -> target </%> <%> <*> appender -> target </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ filters ", "after_ctx": " <%> <*> neutral , log , -> neutral , log , </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ layout _ appenders ", "after_ctx": " <%> <*> appender -> renderer </%> <%> <*> public layout _ appender _ attribute ( string s ) -> private bool ignores _ padding = false ; </%> <%> <+> public layout _ renderer _ attribute ( string format _ string ) </%> <%> <*> s -> format _ string </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ <->"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ appenders ", "after_ctx": " <%> <*> appender -> target </%> <%> <*> public appender _ attribute ( string s ) -> private bool ignores _ layout = false ; </%> <%> <+> public target _ attribute ( string name ) </%> <%> <*> s -> name </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ ="]}, {"before_ctx": " ", "before_line": " namespace n _ log _ layout _ appenders ", "after_ctx": " <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%> <%> <*> appender -> renderer </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ </@>"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ layout _ appenders ", "after_ctx": " <%> <*> public abstract class layout _ appender -> public abstract class layout _ renderer </%> <%> <*> protected layout _ appender ( ) { } -> protected layout _ renderer ( ) { } </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ _ result"]}, {"before_ctx": " ", "before_line": " namespace n _ log _ filters ", "after_ctx": " <%> <*> public filter _ attribute ( string s ) -> public filter _ attribute ( string name ) </%> <%> <*> s -> name </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ filters"]}, {"before_ctx": " ", "before_line": " else if ( is _ archiving _ enabled ( ) ) ", "after_ctx": " <%> <*> private bool is _ archiving _ enabled ( ) { return archive _ above _ size ! = archive _ above _ size _ disabled | | archive _ every ! = file _ archive _ period . none ; } -> private bool is _ archiving _ enabled = > archive _ above _ size ! = archive _ above _ size _ disabled | | archive _ every ! = file _ archive _ period . none ; </%>", "after_line": "else if ( is _ archiving _ enabled )", "predictions": ["else if ( is _ archiving _ n ( instance instance ) instance )"]}, {"before_ctx": "<%> <+> delete _ old _ date _ archives ( pattern ) ; </%> <%> <*> archive -> archives </%> ", "before_line": " try { directory _ info directory _ info = new directory _ info ( dir _ name ) ; if ( ! directory _ info . exists ) { directory . create _ directory ( dir _ name ) ; return ; } ", "after_ctx": " <%> <*> list < string > -> var </%> <%> <-> ) . to _ list ( </%> <%> <*> list < string > -> var </%> <%> <-> ) . to _ list ( </%> <%> <*> for -> foreach </%> <%> <*> int index = 0 ; index < -> string next _ file in </%> <%> <-> . count ; index + + </%> <%> <*> files [ index ] -> next _ file </%>", "after_line": "directory _ info directory _ info = new directory _ info ( dir _ name ) ; if ( ! directory _ info . exists ) { directory . create _ directory ( dir _ name ) ; return ; }", "predictions": ["directory _ info directory _ info < xml _ get ] _ > ; return _ event _ return ) <%> <%> -> <%> <%> -> ;"]}, {"before_ctx": " ", "before_line": " this . request _ queue = new async _ request _ queue < log _ event _ info > ( NUM , async _ target _ wrapper _ overflow _ action . discard ) ; ", "after_ctx": " <%> <-> < log _ event _ info > </%>", "after_line": "this . request _ queue = new async _ request _ queue ( NUM , async _ target _ wrapper _ overflow _ action . discard ) ;", "predictions": ["this . request _ queue = false <*> id web _ io _ n using int _ </@> _ | ! private private _ = _ class _ from _ action file name < 2 ( NUM info info info ) <"]}, {"before_ctx": "<%> <-> < log _ event _ info > </%> ", "before_line": " this . request _ queue = new async _ request _ queue < log _ event _ info > ( NUM , async _ target _ wrapper _ overflow _ action . discard ) ; ", "after_ctx": " ", "after_line": "this . request _ queue = new async _ request _ queue ( NUM , async _ target _ wrapper _ overflow _ action . discard ) ;", "predictions": ["this . request _ queue = new async <%> _ ; </%> > > > > ( dictionary _ <@> _ wrapper _ </@> _ -> . ;"]}, {"before_ctx": "<%> <+> using n _ log _ internal ; </%> ", "before_line": " public class async _ request _ queue < t > ", "after_ctx": " <%> <*> t -> log _ event _ info </%> <%> <+> log _ event _ info _ </%> <%> <*> t -> log _ event _ info </%> <%> <*> private int batched -> private queue < async _ continuation > async _ continuations </%> <%> <*> items -> queue </%> <%> <*> 0 ; -> new queue < async _ continuation > ( ) ; </%>", "after_line": "public class async _ request _ queue", "predictions": ["public class async _ request _ ="]}, {"before_ctx": "<%> <*> using system _ io ; using system _ text ; using system _ xml ; using system _ reflection ; using system _ diagnostics ; -> using system _ component _ model ; </%> <%> <+> using system _ web ; </%> ", "before_line": " using system _ web ; using n _ log _ config ; using system _ component _ model ; ", "after_ctx": " <%> <-> private int buffer _ size = NUM ; </%> <%> <-> private bool grow _ buffer _ as _ needed = true ; </%>", "after_line": "using n _ log _ web ;", "predictions": ["using system _ component _ model ,"]}, {"before_ctx": " ", "before_line": " using system _ text ; using system _ reflection ; using system _ collections ; using n _ log _ config ; using system _ collections _ generic ; namespace n _ log _ internal ", "after_ctx": " <%> <-> public class extension _ utils { private static list < assembly > extension _ assemblies = new list < assembly > ( ) ; static extension _ utils ( ) { extension _ assemblies . add ( typeof ( n _ log . log _ manager ) . assembly ) ; } private extension _ utils ( ) { </%>", "after_line": "namespace n _ log", "predictions": ["namespace n _ log _ config"]}, {"before_ctx": "<%> <*> public string substring { get { return substring ; } set { substring = value ; } } -> public string substring { get ; set ; } </%> <%> <*> if -> if ( this . layout . get _ formatted _ message </%> <%> <*> ignore -> log </%> <%> <*> case -> event </%> <%> <+> . index _ of ( this . substring , this . ignore _ case ? string _ comparison . ordinal _ ignore _ case : string _ comparison . ordinal ) > = 0 ) </%> <%> <*> if ( layout . get _ formatted _ message ( log _ event ) . to _ lower ( ) . index _ of ( substring . to _ lower ( ) ) > = 0 ) return result ; else return filter _ result . neutral ; -> return this . action ; </%> ", "before_line": " if ( layout . get _ formatted _ message ( log _ event ) . index _ of ( substring ) > = 0 ) return result ; else return filter _ result . neutral ; ", "after_ctx": " ", "after_line": "return filter _ result . neutral ;", "predictions": ["return filter _ result . neutral ;"]}, {"before_ctx": "<%> <*> using system _ xml ; -> using system _ collections ; </%> <%> <+> using system _ collections _ generic ; using system _ component _ model ; </%> <%> <+> using system _ text ; </%> <%> <-> using system _ collections ; using system _ collections _ specialized ; using n _ log ; </%> ", "before_line": " using n _ log _ layouts ; using system _ component _ model ; using system _ collections _ generic ;  using system _ runtime _ interop _ services ; ", "after_ctx": " <%> <*> system -> n _ log </%> <%> <*> text -> layouts </%> <%> <+> private readonly log _ event _ comparer log _ event _ comparer ; private readonly dictionary < string , date _ time > initialized _ files = new dictionary < string , date _ time > ( ) ; private line _ ending _ mode line _ ending _ mode = line _ ending _ mode . default ; </%>", "after_line": "<DEL>", "predictions": ["using system ;"]}, {"before_ctx": "<%> <*> { get { return -> = > </%> <%> <-> } } </%> <%> <*> { get { return -> = > </%> <%> <-> } } </%> <%> <-> else </%> ", "before_line": " else return key _ collection ? ? ( key _ collection = new dictionary _ collection ( this , true ) ) ; ", "after_ctx": " <%> <-> else </%>", "after_line": "return key _ collection ? ? ( key _ collection = new dictionary _ collection ( this , true ) ) ;", "predictions": ["return key _ collection ? ? > > model n log system using </@> </%> = 0 file file ; ; ; STR ;"]}, {"before_ctx": "<%> <-> else </%> ", "before_line": " else return value _ collection ? ? ( value _ collection = new dictionary _ collection ( this , false ) ) ; ", "after_ctx": " <%> <*> { get { return -> = > </%> <%> <-> } } </%> <%> <*> { get { return -> = > </%> <%> <-> } } </%>", "after_line": "return value _ collection ? ? ( value _ collection = new dictionary _ collection ( this , false ) ) ;", "predictions": ["return value _ collection ? ? get get > null > > > > > > assembly log system using <@> </%> </@> static </@> </@> </@> </@> ; ; ; ;"]}, {"before_ctx": " ", "before_line": " else return new dictionary _ enumerator ( this ) ; ", "after_ctx": " <%> <-> else </%>", "after_line": "return new dictionary _ enumerator ( this ) ;", "predictions": ["return new dictionary _ </@> _ _ ( current ) ( <%> async 2 async < { <-> ) <-> </%> ) ->"]}, {"before_ctx": "<%> <-> else </%> ", "before_line": " else return new dictionary _ enumerator ( this ) ; ", "after_ctx": " ", "after_line": "return new dictionary _ enumerator ( this ) ;", "predictions": ["return new dictionary _ source . _ <@> </%> ."]}, {"before_ctx": "<%> <-> else </%> ", "before_line": " else throw new invalid _ operation _ exception ( ) ; ", "after_ctx": " <%> <-> ( </%> <%> <-> ) </%>", "after_line": "throw new invalid _ operation _ exception ( ) ;", "predictions": ["throw new invalid _ <@> . <-> attribute item log"]}, {"before_ctx": "<%> <+> var last _ write _ time _ source = time . time _ source . current . from _ system _ time ( file _ last _ modified _ utc . value ) ; </%> <%> <-> last _ write _ time _ source . has _ value & & </%> <%> <-> . value </%> ", "before_line": " if ( previous _ log _ overlapped _ period ( log _ event , previous _ log _ event _ timestamp . value , last _ write _ time _ source . value ) ) ", "after_ctx": " <%> <-> . value </%>", "after_line": "if ( previous _ log _ overlapped _ period ( log _ event , previous _ log _ event _ timestamp . value , last _ write _ time _ source ) )", "predictions": ["if ( previous _ log _ <@> _ timestamp directory < + _ info <-> <-> _ log n _ time _ using _ log <*> <*> collections _ = _ ( this -> _ string -> -> -> -> -> -> <%> -> -> -> -> ) ->"]}, {"before_ctx": "<%> <-> . value </%> ", "before_line": " return last _ write _ time _ source . value ; ", "after_ctx": " ", "after_line": "return last _ write _ time _ source ;", "predictions": ["return last _ write . <@> <%> </%> ->"]}, {"before_ctx": " ", "before_line": " private readonly condition _ tokenizer tokenizer = new condition _ tokenizer ( ) ; private configuration _ item _ factory configuration _ item _ factory ; ", "after_ctx": " <%> <*> . init -> = new condition </%>", "after_line": "private readonly condition _ tokenizer tokenizer ; private readonly configuration _ item _ factory configuration _ item _ factory ;", "predictions": ["private readonly condition _ tokenizer tokenizer . async _ ; , configuration _ } _ { async </%> _ = system _ <-> _ ) event < , condition _ time <-> log _ item _ </%> ) ) ) ) ;"]}, {"before_ctx": "<%> <+> using system ; </%> ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> var message = mapped _ diagnostics _ logical _ context . get ( item ) ; builder . append ( message ) ; </%>", "after_line": "using config ;", "predictions": ["using n _ log ;"]}, {"before_ctx": "<%> <*> i _ dictionary < string , object > combined _ properties = null ; -> return get _ context _ properties ( log _ event , null ) ; </%> <%> <+> } protected i _ dictionary < string , object > get _ context _ properties ( log _ event _ info log _ event , i _ dictionary < string , object > combined _ properties ) { </%> ", "before_line": " combined _ properties = capture _ context _ gdc ( log _ event , null ) ; ", "after_ctx": " ", "after_line": "combined _ properties = capture _ context _ gdc ( log _ event , combined _ properties ) ;", "predictions": ["combined _ properties = capture _ is _ class source source _ doc _ gdc </%> _ </%> ;"]}, {"before_ctx": "<%> <+> if ( instances . count = = 0 ) </%> <%> <+> lici . file _ name = create _ instance _ file _ name ( logs _ dir ) ; lici . save ( ) ; </%> ", "before_line": " tab _ control . tab _ pages . add ( instance . create _ tab ( this ) ) ; ", "after_ctx": " <%> <-> total _ </%> <%> <*> + + -> . add ( instance ) </%> <%> <+> lici . file _ name = create _ instance _ file _ name ( logs _ dir ) ; lici . save ( ) ; </%> <%> <-> tab _ control . tab _ pages . add ( instance . create _ tab ( this ) ) ; </%>", "after_line": "instance . create _ tab ( this ) ;", "predictions": ["tab _ control . tab _ file <%> </%> <%> <%> <%> <%> ;"]}, {"before_ctx": "<%> <+> culture _ info . invariant _ culture , </%> ", "before_line": " else { continue ; } ", "after_ctx": " <%> <+> culture _ info . current _ culture , </%> <%> <-> else </%>", "after_line": "continue ;", "predictions": ["continue ;"]}, {"before_ctx": "<%> <-> } </%> <%> <+> culture _ info . current _ culture , </%> ", "before_line": " else { continue ; } ", "after_ctx": " <%> <+> culture _ info . current _ culture , </%>", "after_line": "continue ;", "predictions": ["continue ;"]}, {"before_ctx": "<%> <+> culture _ info . current _ culture , </%> ", "before_line": " else { continue ; } ", "after_ctx": " ", "after_line": "continue ;", "predictions": ["continue ;"]}, {"before_ctx": "<%> <-> ( string ) </%> ", "before_line": " else { return new condition _ literal _ expression ( int . parse ( number _ string , culture _ info . invariant _ culture ) ) ; } ", "after_ctx": " ", "after_line": "return new condition _ literal _ expression ( int . parse ( number _ string , culture _ info . invariant _ culture ) ) ;", "predictions": ["return new condition _ literal _ <*> ;"]}, {"before_ctx": " ", "before_line": " n _ log . targets . wrappers . async _ target _ wrapper atw = new n _ log . targets . wrappers . async _ target _ wrapper ( ) ; ", "after_ctx": " <%> <+> culture _ info . invariant _ culture , </%>", "after_line": "async _ target _ wrapper atw = new async _ target _ wrapper ( ) ;", "predictions": ["async _ target _ wrapper atw = new event <%> <%> </%> </%> <*> <*>"]}, {"before_ctx": " ", "before_line": " foreach ( string config _ file in this . get _ candidate _ file _ names ( ) ) ", "after_ctx": " <%> <+> culture _ info . invariant _ culture , </%>", "after_line": "foreach ( string config _ file in get _ candidate _ file _ names ( ) )", "predictions": ["foreach ( string config _ . log info builder < else { else { {"]}, {"before_ctx": "<%> <+> culture _ info . invariant _ culture , </%> ", "before_line": " this . dump ( this . config ) ; ", "after_ctx": " ", "after_line": "dump ( this . config ) ;", "predictions": ["this . dump ( . config . current string n event <-> _ </%> event ;"]}, {"before_ctx": " ", "before_line": " this . dump ( this . config ) ; ", "after_ctx": " <%> <+> culture _ info . invariant _ culture , </%>", "after_line": "dump ( this . config ) ;", "predictions": ["dump ( config ) ;"]}, {"before_ctx": "<%> <*> public int sequence _ id { get { return this . sequence _ id ; } } -> public int sequence _ id { get ; private set ; } </%> ", "before_line": " return log _ event _ info . create ( log _ level . off , string . empty , null , string . empty ) ; ", "after_ctx": " ", "after_line": "return create ( log _ level . off , string . empty , null , string . empty ) ;", "predictions": ["return log _ event _ info </%> ? event ( is _ <@> . ! . value time null value time , private . instance + </@> ) </%>"]}, {"before_ctx": " ", "before_line": " if ( log _ event ! = log _ event _ info . empty ) log _ event . add _ cached _ layout _ value ( this , value ) ; ", "after_ctx": " <%> <-> } private static layout _ renderer [ ] compile _ layout ( string s , out int needs _ stack _ trace , out bool is _ volatile ) { array _ list result = new array _ list ( ) ; needs _ stack _ trace = 0 ; is _ volatile = false ; int starting _ pos = 0 ; int pos = s . index _ of ( STR , starting _ pos ) ; while ( pos > = 0 ) </%>", "after_line": "log _ event . add _ cached _ layout _ value ( this , value ) ;", "predictions": ["log _ event . add _ cached _ [ _ value </%> this {"]}, {"before_ctx": " ", "before_line": " public class null _ appender : n _ log . appender ", "after_ctx": " <%> <*> public -> protected internal </%>", "after_line": "public class null _ appender : appender", "predictions": ["public class null _ appender : <%>"]}, {"before_ctx": " ", "before_line": " using n _ log _ layout _ appenders ; namespace n _ log ", "after_ctx": " <%> <*> public -> protected internal </%> <%> <*> public -> protected internal </%> <%> <*> public -> protected internal </%>", "after_line": "namespace n _ log _ layout _ appenders", "predictions": ["namespace n _ log _ layout _ ->"]}, {"before_ctx": " ", "before_line": " public class console _ appender : n _ log . appender ", "after_ctx": " <%> <*> public -> protected internal </%>", "after_line": "public class console _ appender : appender", "predictions": ["public class console _ appender : appender"]}, {"before_ctx": "<%> <+> using n _ log _ appenders ; </%> ", "before_line": " public class asp _ net _ trace _ appender : n _ log . appender ", "after_ctx": " <%> <*> public -> protected </%>", "after_line": "public class asp _ net _ trace _ appender : appender", "predictions": ["public class asp _ net _ trace _ bytes <+>"]}, {"before_ctx": " ", "before_line": " public class memory _ appender : n _ log . appender ", "after_ctx": " <%> <*> public -> protected internal </%>", "after_line": "public class memory _ appender : appender", "predictions": ["public class memory _ appender : appender"]}, {"before_ctx": " ", "before_line": " public class trace _ appender : n _ log . appender ", "after_ctx": " <%> <*> public -> protected internal </%>", "after_line": "public class trace _ appender : appender", "predictions": ["public class trace _ appender : appender"]}, {"before_ctx": "<%> <-> context . expected _ headers </%> <%> <*> = null & & context . expected -> validate </%> <%> <*> . count > 0 -> ( ) </%> ", "before_line": " foreach ( var expected _ header in context . expected _ headers ) { if ( request . headers . get _ values ( expected _ header . key ) . first ( ) ! = expected _ header . value ) return ; } ", "after_ctx": " ", "after_line": "return ;", "predictions": ["if ( request . headers . get . values ) }"]}, {"before_ctx": "<%> <*> if ( internal _ logger . is _ trace _ enabled ) { internal _ logger . trace ( STR , log _ events . length ) ; } -> internal _ logger . trace ( STR , this , log _ events . length ) ; </%> ", "before_line": " if ( internal _ logger . is _ trace _ enabled ) { internal _ logger . trace ( STR , rule . exists ) ; } ", "after_ctx": " ", "after_line": "internal _ logger . trace ( STR , rule . exists ) ;", "predictions": ["internal _ logger . trace ( STR <+> <@> ) </%> <+> _ <+> <%> = log ( event _ = . 2 ) ; <%> _ } ;"]}, {"before_ctx": "<%> <-> var replacement = STR ; </%> ", "before_line": " var test _ cases = new list < tuple < string , string > > ", "after_ctx": " <%> <*> tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , tuple . create ( STR , STR ) , -> tuple . create ( STR , STR , STR ) , </%> <%> <+> tuple . create ( STR , STR , STR ) , </%>", "after_line": "var test _ cases = new list < tuple < string , string , string > >", "predictions": ["var test _ cases = new list name"]}, {"before_ctx": "<%> <+> { layout _ appender _ basedir public class base _ dir _ layout _ appender : layout _ appender </%> <%> <*> layout _ appender _ basedir public class base _ dir _ layout _ appender : layout _ appender -> private string file _ name = null ; </%> <%> <+> private string directory _ name = null ; public string file </%> <%> <*> private string file _ name = null ; private string directory _ name = null ; public string file -> get </%> ", "before_line": " get { return file _ name ; } set { file _ name = value ; } ", "after_ctx": " <%> <-> public string dir </%> <%> <+> set </%> <%> <-> get { return directory _ name ; } set { directory _ name = value ; </%>", "after_line": "return file _ name ;", "predictions": ["get { return file _ name ; virtual base ( = = int _ </%> <%> ) )"]}, {"before_ctx": "<%> <+> { internal class dictionary _ base </%> <%> <*> internal class dictionary _ base -> private hashtable hashtable = new hashtable ( ) ; </%> <%> <+> public i _ dictionary dictionary </%> <%> <*> private hashtable hashtable = new hashtable ( ) ; public i _ dictionary dictionary -> get </%> ", "before_line": " get { return hashtable ; } } public void clear ( ) { hashtable . clear ( ) ; ", "after_ctx": " <%> <+> public void clear ( ) { hashtable . clear ( ) ; } </%> <%> <+> } </%>", "after_line": "return hashtable ;", "predictions": ["get { return hashtable ; }"]}, {"before_ctx": "<%> <*> layout _ appender _ nlogdir public class n _ log _ dir _ layout _ appender : layout _ appender -> private string file _ name = null ; </%> <%> <+> private string directory _ name = null ; private static string nlog _ dir ; static n _ log _ dir _ layout _ appender ( ) </%> <%> <*> private string file _ name = null ; private string directory _ name = null ; private static string nlog _ dir ; static n _ log _ dir _ layout _ appender ( ) -> nlog _ dir = path . get _ directory _ name ( typeof ( log _ manager ) . assembly . location ) ; </%> <%> <+> } public string file { get </%> <%> <*> nlog _ dir = path . get _ directory -> return file </%> <%> <*> ( typeof ( log _ manager ) . assembly . location ) ; -> ; </%> <%> <-> public string file </%> <%> <+> set </%> ", "before_line": " get { return file _ name ; } set { file _ name = value ; } ", "after_ctx": " <%> <+> } </%> <%> <+> { get </%> <%> <-> get { </%> <%> <-> } </%>", "after_line": "file _ name = value ;", "predictions": ["get { return file _ name ; } set { file _ name = value ; }"]}, {"before_ctx": "<%> <-> public string file </%> <%> <+> set </%> <%> <-> get { return file _ name ; } set { </%> <%> <-> } </%> <%> <+> } </%> <%> <+> { get </%> ", "before_line": " get { return directory _ name ; } set { directory _ name = value ; } ", "after_ctx": " <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> directory _ name = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%>", "after_line": "return directory _ name ;", "predictions": ["get { return directory _ name ; <%> set </%> </%> _ name <+> <%> _ name ; dictionary {"]}, {"before_ctx": "<%> <-> } set { directory _ name = value ; } </%> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> directory _ name = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%> <%> <+> { get </%> ", "before_line": " get { return nlog _ dir ; } ", "after_ctx": " <%> <+> } </%> <%> <+> { string base _ dir = n _ log _ dir ; if ( file _ name ! = null ) </%> <%> <-> string base _ dir = n _ log _ dir ; if ( file _ name ! = null ) { </%>", "after_line": "return nlog _ dir ;", "predictions": ["return nlog _ dir ;"]}, {"before_ctx": "<%> <+> { layout _ appender _ guid public class guid _ layout _ appender : layout _ appender </%> <%> <-> layout _ appender _ guid </%> <%> <+> private string format = STR ; </%> <%> <*> class guid _ layout _ appender : layout _ appender -> string format </%> <%> <*> private string format = STR ; public string format -> get </%> ", "before_line": " get { return format ; } set { format = value ; } ", "after_ctx": " <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM ; } protected internal override void append ( string _ builder builder , log _ event _ info ev ) { builder . append ( apply _ padding ( guid . new _ guid ( ) . to _ string ( format ) ) ) ; -> format = value ; </%>", "after_line": "return format ;", "predictions": ["get { return format ; } set { format <*> print , print <*> , info object , info typeof location string )"]}, {"before_ctx": "<%> <+> { layout _ appender _ environment public class environment _ layout _ appender : layout _ appender </%> <%> <*> layout _ appender _ environment public class environment _ layout _ appender : layout _ appender -> private string variable = null ; </%> <%> <+> required _ parameter public string variable </%> <%> <*> private string variable = null ; required _ parameter public string variable -> get </%> ", "before_line": " get { return variable ; } set { variable = value ; } ", "after_ctx": " <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> variable = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%>", "after_line": "return variable ;", "predictions": ["get { return variable ; }"]}, {"before_ctx": "<%> <-> } set { variable = value ; } </%> <%> <-> protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) </%> <%> <+> set </%> <%> <*> return NUM -> variable = value </%> <%> <+> } protected internal override int get _ estimated _ buffer _ size ( log _ event _ info ev ) { return NUM ; } </%> <%> <+> { if ( variable ! = null ) </%> ", "before_line": " if ( variable ! = null ) { builder . append ( apply _ padding ( environment . get _ environment _ variable ( variable ) ) ) ; } ", "after_ctx": " <%> <+> } </%>", "after_line": "builder . append ( apply _ padding ( environment . get _ environment _ variable ( variable ) ) ) ;", "predictions": ["builder . append ( apply _ padding = get . <+> . ( <%> ( ( </%> </%> </%> </%> <%> ( ( </%> </%> guid </%> </%> ( ( </%> </%> name </%> private = </%> </%> ) </%> </%> ) ) </%> </%> ) </%> = NUM ) </%> NUM ) ;"]}, {"before_ctx": "<%> <*> internal class -> public </%> <%> <*> : system . collections . dictionary _ base -> ( ) </%> <%> <*> public string _ dictionary ( ) -> } </%> <%> <+> public virtual string this [ string key ] { get </%> <%> <+> return ( string ) this . dictionary [ key ] ; </%> <%> <*> public virtual string this [ string key ] -> set </%> ", "before_line": " get { return ( string ) this . dictionary [ key ] ; } set { this . dictionary [ key ] = value ; } ", "after_ctx": " <%> <+> } </%> <%> <+> { this . dictionary . add ( key , value ) ; } public virtual bool contains ( string key ) { return this . dictionary . contains ( key ) ; } </%>", "after_line": "this . dictionary [ key ] = value ;", "predictions": ["get { return this . dictionary [ = string { } = dictionary string string { } = ( , <%> <*> expected -> -> -> )"]}, {"before_ctx": " ", "before_line": " throw new n _ log _ configuration _ exception ( string . format ( STR , STR ) ) ; ", "after_ctx": " <%> <*> throw new n _ log _ configuration _ exception ( string . format ( STR , STR ) ) ; -> throw new n _ log _ configuration _ exception ( STR , STR ) ; </%> <%> <+> } if ( this . from = = null ) { throw new n _ log _ configuration _ exception ( required _ property _ is _ empty _ format , STR ) ; </%>", "after_line": "throw new n _ log _ configuration _ exception ( STR , STR ) ;", "predictions": ["throw new n _ log _ configuration _ <%> <%> ( <%> ;"]}, {"before_ctx": " ", "before_line": " if ( value is exception & & reference _ equals ( options , instance . serialize _ options ) ) ", "after_ctx": " <%> <+> var object _ property _ list = object _ reflection _ cache . lookup _ object _ properties ( value ) ; </%> <%> <+> _ object </%> <%> <*> value -> object _ property _ list </%>", "after_line": "if ( reference _ equals ( options , instance . serialize _ options ) & & value is exception )", "predictions": ["if ( value is exception & & null )"]}, {"before_ctx": "<%> <*> file _ share . read _ write -> false </%> ", "before_line": " lock ( this ) { file _ length + = bytes . length ; last _ write _ time = date _ time . now ; file . write ( bytes , 0 , bytes . length ) ; } ", "after_ctx": " ", "after_line": "file _ length + = bytes . length ; last _ write _ time = date _ time . now ; file . write ( bytes , 0 , bytes . length ) ;", "predictions": ["file _ length + = bytes . thread ( </@> _ ( 0 . <*> < _ this <%> variable ( ) = ) , private private , <%> ( } environment environment variable variable <%> variable variable <%> = variable <%> } <%> = variable = variable <%> ( format guid format guid ) </%> ( format guid format ( . ( format , format <%> guid guid guid guid guid guid guid guid guid guid guid guid guid guid guid guid guid ) </%> ( info guid format format guid guid guid , <%> ( . ( format"]}, {"before_ctx": "<%> <*> private static string create _ failed _ default _ value _ message ( type type , property _ info property _ info , object expected _ val , object current _ val ) -> if ( prop _ type = = typeof ( encoding ) ) </%> <%> <*> string message = -> if ( current _ val is ut _ encoding & & ( needed _ </%> <%> <*> format -> equals </%> <%> <+> string _ comparison . invariant _ culture _ ignore _ case ) | | needed _ string . equals ( STR , string _ comparison . invariant _ culture _ ignore _ case ) ) ) </%> <%> <*> type . full _ name , property _ info . name , print _ val _ for _ message ( expected _ val ) , print _ val _ for _ message ( current _ val ) ) -> return true </%> <%> <-> return message ; </%> <%> <+> } return needed _ val . equals ( current _ val ) ; </%> ", "before_line": " return STR + o . to _ string ( ) + STR ; ", "after_ctx": " ", "after_line": "return STR + o + STR ;", "predictions": ["return STR + o + STR ;"]}, {"before_ctx": "<%> <*> ) -> & & ! string . equals ( app _ domain _ base _ directory , assembly _ location , string _ comparison . ordinal _ ignore _ case ) ) </%> ", "before_line": " if ( ! string . equals ( app _ domain _ base _ directory , assembly _ location , string _ comparison . ordinal _ ignore _ case ) ) { assembly _ location = app _ domain _ base _ directory ; extension _ dlls = get _ n _ log _ extension _ files ( app _ domain _ base _ directory ) ; } ", "after_ctx": " ", "after_line": "assembly _ location = app _ domain _ base _ directory ; extension _ dlls = get _ n _ log _ extension _ files ( app _ domain _ base _ directory ) ;", "predictions": ["assembly _ location = app _ domain , return ;"]}, {"before_ctx": "<%> <*> ) -> & & async _ helpers . get _ managed _ thread _ id ( ) = = original _ thread _ id ) </%> ", "before_line": " if ( async _ helpers . get _ managed _ thread _ id ( ) = = original _ thread _ id ) { throw new n _ log _ runtime _ exception ( STR , ex ) ; } ", "after_ctx": " ", "after_line": "throw new n _ log _ runtime _ exception ( STR , ex ) ;", "predictions": ["throw new n _ log _ runtime _ private ) [ < async _ . _ { <%> <%> log = <*> ;"]}, {"before_ctx": " ", "before_line": " public void add _ to _ archive ( string archive _ file _ name , string file _ name , bool create _ directory _ if _ not _ exists ) ", "after_ctx": " <%> <+> false </%> <%> <+> false </%>", "after_line": "public bool add _ to _ archive ( string archive _ file _ name , string file _ name , bool create _ directory _ if _ not _ exists )", "predictions": ["public string add _ to _ archive list & STR ptr dictionary _ <@> _ app assembly _ <%> _ <-> ( { { event . 0 = -> <*> _ NUM _ buffer _ directory _ base get _ to get buffer get _ base get"]}, {"before_ctx": "<%> <+> result _ events = new async _ log _ event _ info [ count ] ; </%> <%> <*> if ( this . log _ event _ info _ queue . count < = 0 ) { break ; } result _ events . add ( this . log _ event _ info _ queue . dequeue ( ) ) ; -> result _ events [ i ] = this . log _ event _ info _ queue . dequeue ( ) ; </%> ", "before_line": " return result _ events . to _ array ( ) ; ", "after_ctx": " ", "after_line": "return result _ events ;", "predictions": ["return result _ events ;"]}, {"before_ctx": "<%> <+> } if ( visited _ objects . contains ( o ) ) </%> ", "before_line": " if ( visited _ objects . contains _ key ( o ) ) { return ; } visited _ objects . add ( o , 0 ) ; ", "after_ctx": " ", "after_line": "visited _ objects . add ( o ) ;", "predictions": ["return ; }"]}, {"before_ctx": " ", "before_line": " if ( this . new _ identity ! = null ) { return new context _ reverter ( this . new _ identity . impersonate ( ) ) ; } return null ; ", "after_ctx": " <%> <+> out int _ ptr handle </%> <%> <*> this . existing _ token _ handle = int _ ptr . zero ; this . duplicate _ token _ handle = int _ ptr . zero ; -> int _ ptr logon _ handle ; </%>", "after_line": "return new context _ reverter ( this . new _ identity . impersonate ( ) ) ;", "predictions": ["return new context _ reverter ( this ( assembly , <-> <-> = 1 = ) 0 ( private . value <%> internal <%> = = = int <%> guid string ( ) string string ( -> _ return ) string type ( -> _ return ) string ( type string _ return ) ) string ( type ) ( type ) ( <%> _ return expected _ val string ) string expected ( -> _ return ) string ( type string _ return string -> _ return ) string type ( -> _ return ) string ) ( ->"]}, {"before_ctx": " ", "before_line": " theory _ skip _ should _ be _ fixed _ in _ n _ log ", "after_ctx": " <%> <-> _ skip _ should _ be _ fixed _ in _ n _ log </%>", "after_line": "theory", "predictions": ["theory _ skip _ should _ -> ( )"]}, {"before_ctx": "<%> <-> _ skip _ should _ be _ fixed _ in _ n _ log </%> ", "before_line": " theory _ skip _ should _ be _ fixed _ in _ n _ log ", "after_ctx": " ", "after_line": "theory", "predictions": ["theory _ skip _ should _ be _ <%>"]}, {"before_ctx": "<%> <*> get { return filter _ result ; } -> get </%> <%> <+> { return filter _ result ; } </%> ", "before_line": " get { return action ; } set ", "after_ctx": " <%> <+> return action ; } set { </%>", "after_line": "get", "predictions": ["get { return action ; }"]}, {"before_ctx": " ", "before_line": " this . assert _ layout _ renderer _ output ( STR + file _ name + STR , content ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert _ layout _ renderer _ output ( STR + file _ name + STR , content ) ;", "predictions": ["assert _ layout _ renderer _ output ( </%> <%> file . name this <-> <-> true ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . assert _ layout _ renderer _ output ( STR , string . empty ) ; ", "after_ctx": " ", "after_line": "assert _ layout _ renderer _ output ( STR , string . empty ) ;", "predictions": ["assert _ layout _ renderer _ output ( factory </%> string <-> log _ empty </%> ;"]}, {"before_ctx": "<%> <*> get { return filter _ result ; } -> get </%> <%> <+> { return filter _ result ; } </%> ", "before_line": " get { return action ; } set ", "after_ctx": " <%> <+> return action ; } set { </%>", "after_line": "get", "predictions": ["get { return action ; }"]}, {"before_ctx": " ", "before_line": " var last = intermediate . skip _ while ( p = > ! is _ non _ user _ stack _ frame ( p . frame . get _ method ( ) , logger _ type ) ) . first _ or _ default ( ) ; ", "after_ctx": " <%> <-> - 1 </%>", "after_line": "var last = intermediate . first _ or _ default ( ) ;", "predictions": ["var last = intermediate . skip _ while ( p = > ! is _ non _ user _ stack _ frame ( p . frame ; expression = logger ;"]}, {"before_ctx": "<%> <*> ) -> & & ( sliding _ timeout | | count = = 1 ) ) </%> ", "before_line": " if ( sliding _ timeout | | count = = 1 ) { flush _ timer . change ( flush _ timeout , - 1 ) ; } ", "after_ctx": " ", "after_line": "flush _ timer . change ( flush _ timeout , - 1 ) ;", "predictions": ["flush _ timer . change ( flush _ timeout , - 1 ) ;"]}, {"before_ctx": "<%> <+> using system _ collections _ generic ; using common ; </%> ", "before_line": " this . left _ expression = left _ expression ; this . right _ expression = right _ expression ; this . relational _ operator = relational _ operator ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "left _ expression = left _ expression ; right _ expression = right _ expression ; relational _ operator = relational _ operator ;", "predictions": ["left _ expression = left _ expression ; right _ expression = right _ expression ; relational _ operator = relational _ operator ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return STR + this . left _ expression + STR + this . get _ operator _ string ( ) + STR + this . right _ expression + STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return STR + left _ expression + STR + get _ operator _ string ( ) + STR + right _ expression + STR ;", "predictions": ["return STR + left _ expression + STR + get _ operator _ string ( ) + STR + right _ expression + STR ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ; using internal ;", "predictions": ["using n _ log _ common ; </%> ( STR ) ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . parent _ factory = parent _ factory ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parent _ factory = parent _ factory ;", "predictions": ["parent _ factory = parent _ factory ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . register _ type ( t , prefix ) ; ", "after_ctx": " ", "after_line": "register _ type ( t , prefix ) ;", "predictions": ["register _ type ( t , prefix n ,"]}, {"before_ctx": " ", "before_line": " this . register _ definition ( item _ name _ prefix + attr . name , type ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "register _ definition ( item _ name _ prefix + attr . name , type ) ;", "predictions": ["register _ definition ( item _ name _ prefix <-> string . ; <@> type </@> default </@> type _ </@> <+> <%> = timeout this , default ( <@> ( <@> . expression ) get return get . STR ) expression ) ;"]}, {"before_ctx": " ", "before_line": " if ( ! this . try _ get _ definition ( item _ name , out type ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! try _ get _ definition ( item _ name , out type ) )", "predictions": ["if ( ! try _ get _ definition this <%> _ name , out out <%> out ) ( event ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . try _ create _ instance ( name , out result ) ) ", "after_ctx": " ", "after_line": "if ( try _ create _ instance ( name , out result ) )", "predictions": ["if ( try _ create _ instance ( if ! </%> ( out be . value this this this this this this return <@> return ; value this this this <%> value ( </@> . <+> . <@> . collections ; . <@> ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " string _ comparison comparison _ type = this . ignore _ case ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "string _ comparison comparison _ type = ignore _ case", "predictions": ["string _ comparison comparison _ type = ignore . attributes"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . layout . render ( log _ event ) . index _ of ( this . substring , comparison _ type ) > = 0 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( layout . render ( log _ event ) . index _ of ( substring , comparison _ type ) > = 0 )", "predictions": ["if ( layout . render ( log _ </@> } ; index <%> <*> <%> type -> set <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . action ; ", "after_ctx": " ", "after_line": "return action ;", "predictions": ["return action ;"]}, {"before_ctx": " ", "before_line": " this . init _ attributes ( ) ; return this . log _ factory ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "init _ attributes ( ) ; return log _ factory ;", "predictions": ["init _ attributes ( ) ; return log ) </@> this"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . attributes _ loaded = true ; this . log _ factory = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "attributes _ loaded = true ; log _ factory = value ;", "predictions": ["attributes _ loaded = true ; log _ attributes ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . init _ attributes ( ) ; return this . default _ log _ level ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "init _ attributes ( ) ; return default _ log _ level ;", "predictions": ["init _ attributes ( ) ; return default _ true _ log ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . attributes _ loaded = true ; this . default _ log _ level = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "attributes _ loaded = true ; default _ log _ level = value ;", "predictions": ["attributes _ loaded = true ; default _ <*> </%> set <+> <@> get <*> </%> </%> <+> <%> timeout timeout"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . init _ attributes ( ) ; return this . force _ log _ level ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "init _ attributes ( ) ; return force _ log _ level ;", "predictions": ["init _ attributes ( ) ; return force _ true _ log ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . attributes _ loaded = true ; this . force _ log _ level = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "attributes _ loaded = true ; force _ log _ level = value ;", "predictions": ["attributes _ loaded = true ; force _ log <%> = if <-> <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . init _ attributes ( ) ; return this . disable _ flush ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "init _ attributes ( ) ; return disable _ flush ;", "predictions": ["init _ attributes ( ) ; return disable ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . attributes _ loaded = true ; this . disable _ flush = value ; ", "after_ctx": " ", "after_line": "attributes _ loaded = true ; disable _ flush = value ;", "predictions": ["attributes _ loaded = true ; disable _ </@> name value <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . attributes _ loaded = true ; this . auto _ logger _ name = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "attributes _ loaded = true ; auto _ logger _ name = value ;", "predictions": ["attributes _ loaded = true ; auto _ logger _ name = value ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . process _ log _ event _ info ( this . default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "process _ log _ event _ info ( default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ;", "predictions": ["process _ log _ event _ info ( default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . process _ log _ event _ info ( this . default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "process _ log _ event _ info ( default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ;", "predictions": ["process _ log _ event _ info ( default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . process _ log _ event _ info ( log _ level . error , null , message , null , null , trace _ event _ type . error , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "process _ log _ event _ info ( log _ level . error , null , message , null , null , trace _ event _ type . error , null ) ;", "predictions": ["process _ log _ event _ info ( log _ level . error , null , message , null , null , trace _ event _ type . error , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . process _ log _ event _ info ( log _ level . error , null , message + STR + detail _ message , null , null , trace _ event _ type . error , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "process _ log _ event _ info ( log _ level . error , null , message + STR + detail _ message , null , null , trace _ event _ type . error , null ) ;", "predictions": ["process _ log _ event _ info ( log _ level . error , null , message + STR + detail _ message , null , null , trace _ event _ type . error , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( ! this . disable _ flush ) { if ( this . log _ factory ! = null ) { this . log _ factory . flush ( ) ; ", "after_ctx": " ", "after_line": "if ( ! disable _ flush ) { if ( log _ factory ! = null ) { log _ factory . flush ( ) ;", "predictions": ["if ( ! disable _ flush ) { if ( log _ factory ! = null ) { log id ; _ <%> . event <@> <@>"]}, {"before_ctx": " ", "before_line": " this . process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , sb . to _ string ( ) , data , id , event _ type , null ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , sb . to _ string ( ) , data , id , event _ type , null ) ;", "predictions": ["process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source this sb </%> </%> . to <%> <-> this this this this this this _ <-> this , <-> . info , <-> . error , process this error error this <-> . + _ + _ connection <%> = connection <%> = connection <%> connection <%> = connection <%> . connection _ type . connection <%> = connection <%> = connection <%> connection <%> = connection <%> = connection _ type ."]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , format , args , id , event _ type , null ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , format , args , id , event _ type , null ) ;", "predictions": ["process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , id , data , info , ) , process _ <-> , process log <@> <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , message , null , id , event _ type , null ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , message , null , id , event _ type , null ) ;", "predictions": ["process _ log _ event _ info ( translate _ log _ level ( event _ type ) , process , level , type , format , event _ ; , type ) </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . process _ log _ event _ info ( log _ level . debug , source , message , null , id , trace _ event _ type . transfer , related _ activity _ id ) ; ", "after_ctx": " ", "after_line": "process _ log _ event _ info ( log _ level . debug , source , message , null , id , trace _ event _ type . transfer , related _ activity _ id ) ;", "predictions": ["process _ log _ event _ info ( log _ level . debug , source , message , null , this , trace _ <@> _ this <-> <-> _ <@> _ this <-> <-> <-> ;"]}, {"before_ctx": " ", "before_line": " logger _ name = ( logger _ name ? ? this . name ) ? ? string . empty ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "logger _ name = ( logger _ name ? ? name ) ? ? string . empty ;", "predictions": ["logger _ name = ( logger _ name ? _ level . <%> ) _ _ name . empty </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . auto _ logger _ name ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( auto _ logger _ name )", "predictions": ["if ( auto _ logger _ name )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( method . declaring _ type = = this . get _ type ( ) ) ", "after_ctx": " ", "after_line": "if ( method . declaring _ type = = get _ type ( ) )", "predictions": ["if ( method . declaring _ type = = get get get level </%> this <%> this . open <%> )"]}, {"before_ctx": " ", "before_line": " if ( this . log _ factory ! = null ) { logger = this . log _ factory . get _ logger ( logger _ name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( log _ factory ! = null ) { logger = log _ factory . get _ logger ( logger _ name ) ;", "predictions": ["if ( log _ factory ! = null ) { ( ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " log _ level = this . force _ log _ level ? ? log _ level ; ", "after_ctx": " ", "after_line": "log _ level = force _ log _ level ? ? log _ level ;", "predictions": ["log _ level = force _ log _ level ;"]}, {"before_ctx": " ", "before_line": " if ( ! this . attributes _ loaded ) { this . attributes _ loaded = true ; foreach ( dictionary _ entry de in this . attributes ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ! attributes _ loaded ) { attributes _ loaded = true ; foreach ( dictionary _ entry de in attributes )", "predictions": ["if ( ! attributes _ loaded ) { attributes _ ) = true ; foreach <-> dictionary <%> in in in"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . default _ log _ level = log _ level . from _ string ( value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "default _ log _ level = log _ level . from _ string ( value ) ;", "predictions": ["default _ log _ level = log _ level . from _ string ( value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . force _ log _ level = log _ level . from _ string ( value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "force _ log _ level = log _ level . from _ string ( value ) ;", "predictions": ["force _ log _ level = log _ level . from ) ! entry ! ! ) </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . auto _ logger _ name = xml _ convert . to _ boolean ( value ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "auto _ logger _ name = xml _ convert . to _ boolean ( value ) ;", "predictions": ["auto _ logger _ name = xml _ convert . if _ </%> = value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . disable _ flush = boolean . parse ( value ) ; ", "after_ctx": " ", "after_line": "disable _ flush = boolean . parse ( value ) ;", "predictions": ["disable _ flush = boolean . parse ( value ( value open open open ( name = value level line line log ) log log log log log ( open ( open ( value ; ) ) ("]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ internal _ network _ senders ; using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using common ; using internal _ network _ senders ; using layouts ;", "predictions": ["using n _ log _ common ; using n . ( ) <%> ) <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " lock ( this . open _ network _ senders ) { remaining _ count = this . open _ network _ senders . count ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "lock ( open _ network _ senders ) { remaining _ count = open _ network _ senders . count ;", "predictions": ["lock ( open _ network _ senders ) { to . <%> logger </%> . this this this this . </%> . open . ( _ </%> . open . <%> ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " foreach ( var open _ sender in this . open _ network _ senders ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "foreach ( var open _ sender in open _ network _ senders )", "predictions": ["foreach ( var open _ sender in open _ </@> open )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . open _ network _ senders ) { foreach ( var open _ sender in this . open _ network _ senders ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( open _ network _ senders ) { foreach ( var open _ sender in open _ network _ senders )", "predictions": ["lock ( open _ network _ senders ) { foreach </@> var ; ; </@> this var this . <%> this this this . <%> this </%> this . </@> </%> this . lock )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . release _ cached _ connection ( sender _ node ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "release _ cached _ connection ( sender _ node ) ;", "predictions": ["release _ cached _ connection ( sender _ node ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . open _ network _ senders ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( open _ network _ senders )", "predictions": ["lock ( open _ network _ senders )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " switch ( this . on _ connection _ overflow ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "switch ( on _ connection _ overflow )", "predictions": ["switch ( on _ connection _ overflow )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " while ( this . open _ network _ senders . count > = this . max _ connections ) ", "after_ctx": " <%> <-> system . threading . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "while ( open _ network _ senders . count > = max _ connections )", "predictions": ["while ( open _ network _ senders . count </@> = in in </%> <@> ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " system . threading . monitor . wait ( this . open _ network _ senders ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "monitor . wait ( open _ network _ senders ) ;", "predictions": ["system . threading . monitor . wait ( open _ network _ open ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . open _ network _ senders ) { try _ remove ( this . open _ network _ senders , linked _ list _ node ) ; if ( this . on _ connection _ overflow = = network _ target _ connections _ overflow _ action . block ) ", "after_ctx": " <%> <-> system . threading . </%> <%> <-> this . </%>", "after_line": "lock ( open _ network _ senders ) { try _ remove ( open _ network _ senders , linked _ list _ node ) ; if ( on _ connection _ overflow = = network _ target _ connections _ overflow _ action . block )", "predictions": ["lock ( open _ network _ senders ) { try _ remove ( open _ network _ senders , linked _ list _ node ) ; if ( on _ connection _ overflow = = network _ target _ connections _ overflow _ action . block )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " system . threading . monitor . pulse _ all ( this . open _ network _ senders ) ; ", "after_ctx": " ", "after_line": "monitor . pulse _ all ( open _ network _ senders ) ;", "predictions": ["pulse _ all ( this . open _ network _ string log log _ = _ dictionary new pulse _ > ( _ ( _ ( _ ( this . open </@> </@> <-> <-> ( , <@> ( this . default _ = _ string log log ) null ) null ) null ) )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . new _ line ) { text = rendered + this . line _ ending . new _ line _ characters ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( new _ line ) { text = rendered + line _ ending . new _ line _ characters ;", "predictions": ["if ( new _ line ) { text = rendered </@> log ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . current _ sender _ cache ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( current _ sender _ cache )", "predictions": ["lock ( current _ sender _ cache )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . current _ sender _ cache . count > = this . connection _ cache _ size ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( current _ sender _ cache . count > = connection _ cache _ size )", "predictions": ["if ( current _ sender _ cache . count > = connection _ cache _ size )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " foreach ( var pair in this . current _ sender _ cache ) ", "after_ctx": " ", "after_line": "foreach ( var pair in current _ sender _ cache )", "predictions": ["foreach ( var pair in current _ sender _ cache )"]}, {"before_ctx": " ", "before_line": " this . release _ cached _ connection ( least _ recently _ used ) ; } } var sender = this . sender _ factory . create ( address , max _ queue _ size ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "release _ cached _ connection ( least _ recently _ used ) ; } } var sender = sender _ factory . create ( address , max _ queue _ size ) ;", "predictions": ["release _ cached _ connection ( least _ recently _ used ) ; } } var sender = sender _ factory . create ( address ) max . queue . create ( time time queue time file this this this this this this this _ max _ STR _ new = length . max . new <-> ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . open _ network _ senders ) { sender _ node = this . open _ network _ senders . add _ last ( sender ) ; } this . current _ sender _ cache . add ( address , sender _ node ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( open _ network _ senders ) { sender _ node = open _ network _ senders . add _ last ( sender ) ; } current _ sender _ cache . add ( address , sender _ node ) ;", "predictions": ["lock ( open _ network _ senders ) { sender _ node = open _ network _ senders . add _ last ( sender ) ; } current _ sender _ cache . add ( address , sender _ node ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . current _ sender _ cache ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( current _ sender _ cache )", "predictions": ["lock ( current _ sender _ cache )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . open _ network _ senders ) { if ( try _ remove ( this . open _ network _ senders , sender _ node ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( open _ network _ senders ) { if ( try _ remove ( open _ network _ senders , sender _ node ) )", "predictions": ["lock ( open _ network _ senders ) { if ( try _ remove ( open _ network _ senders , sender _ node ) )"]}, {"before_ctx": " ", "before_line": " if ( chunksize > this . max _ message _ size ) { if ( this . on _ overflow = = network _ target _ overflow _ action . discard ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( chunksize > max _ message _ size ) { if ( on _ overflow = = network _ target _ overflow _ action . discard )", "predictions": ["if ( chunksize > max _ message _ size ) { if ( on _ overflow = = network _ target _ overflow _ action _ node <-> )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . on _ overflow = = network _ target _ overflow _ action . error ) { continuation ( new overflow _ exception ( STR + this . max _ message _ size + STR + buffer . length + STR ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( on _ overflow = = network _ target _ overflow _ action . error ) { continuation ( new overflow _ exception ( STR + max _ message _ size + STR + buffer . length + STR ) ) ;", "predictions": ["if ( on _ overflow = = network _ target _ overflow _ action . error ) { continuation ( new overflow _ exception ( STR + max _ message _ size + STR + buffer . length + STR ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " chunksize = this . max _ message _ size ; ", "after_ctx": " ", "after_line": "chunksize = max _ message _ size ;", "predictions": ["chunksize = max _ message _ size ;"]}, {"before_ctx": " ", "before_line": " this . creation _ time _ utc = file . get _ creation _ time _ utc ( this . file _ name ) ; if ( this . creation _ time _ utc < date _ time . utc _ now - time _ span . from _ seconds ( 2 ) & & file _ position = = 0 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "creation _ time _ utc = file . get _ creation _ time _ utc ( file _ name ) ; if ( creation _ time _ utc < date _ time . utc _ now - time _ span . from _ seconds ( 2 ) & & file _ position = = 0 )", "predictions": ["creation _ time _ utc = file . get _ creation _ time _ utc ( file _ name ) ; if ( creation _ time _ utc < date _ time . utc _ now - time _ span . from _ seconds ( 2 ) & & file _ position = = 0 )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . creation _ time _ utc = file . get _ creation _ time _ utc ( this . file _ name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "creation _ time _ utc = file . get _ creation _ time _ utc ( file _ name ) ;", "predictions": ["creation _ time _ utc = file . get _ creation _ time _ utc ( file _ name ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . file _ stream = = null | | this . file _ characteristics _ helper = = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( file _ stream = = null | | file _ characteristics _ helper = = null )", "predictions": ["if ( file _ stream = = null | | file , exception , internal . . <-> ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return file _ characteristics _ helper . get _ file _ characteristics ( file _ name , this . file _ stream ) ; ", "after_ctx": " ", "after_line": "return file _ characteristics _ helper . get _ file _ characteristics ( file _ name , file _ stream ) ;", "predictions": ["return file _ characteristics _ helper . get _ file _ ) </@> <%> . name cache current . stream = _ size = _ message </@> </@> if message ,"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " interlocked . increment ( ref this . write _ count ) ; if ( this . throw _ exceptions ) ", "after_ctx": " ", "after_line": "interlocked . increment ( ref write _ count ) ; if ( throw _ exceptions )", "predictions": ["interlocked . increment ( ref write _ count ) ; if file _"]}, {"before_ctx": " ", "before_line": " assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert . true ( flush _ count < = write _ count ) ; write _ count + + ;", "predictions": ["assert . true ( flush _ count < = write _ <-> </@> _ ( ( ( ( ( ( ( ( ( ( ( cache _ <%> ) ) <%> this . ( ( <-> </%> <-> </%> </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ count + + ; ", "after_ctx": " ", "after_line": "flush _ count + + ;", "predictions": ["flush _ count + + ;"]}, {"before_ctx": " ", "before_line": " internal _ logger . debug ( STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . debug ( STR , name ) ;", "predictions": ["internal _ logger . debug ( STR , name <-> _ _ name this . logger <%> null <->"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " internal _ logger . debug ( STR , this . name , request _ queue . count + 1 ) ; ", "after_ctx": " ", "after_line": "internal _ logger . debug ( STR , name , request _ queue . count + 1 ) ;", "predictions": ["internal _ logger . debug ( STR , name , request <%> queue . internal _ ( ( ( ( name this ( ( ( 1 . name <%> queue ) ( ( </%> </%> . current cache ( current _ on _ lock ( ) </%> </%> </%> ) </%> ) </%> ) </%> ) </%> name this request this . exception this ) ) </%> <-> . </@> <-> STR _ STR _ </@> _ , _ address </%> address this . address this . , + ( current this . address this ( ( this . address"]}, {"before_ctx": " ", "before_line": " internal _ logger . debug ( STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . debug ( STR , name ) ;", "predictions": ["internal _ logger . debug ( STR , name ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " internal _ logger . debug ( STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . debug ( STR , name ) ;", "predictions": ["internal _ logger . debug ( STR , name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) ", "after_ctx": " ", "after_line": "lock ( sync _ root )", "predictions": ["lock ( sync _ root )"]}, {"before_ctx": " ", "before_line": " internal _ logger . warn ( completed _ task . exception , STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "internal _ logger . warn ( completed _ task . exception , STR , name ) ;", "predictions": ["internal _ logger . warn ( completed _ task . exception _ </%> _ name _ </%> file ) ) <@> name <@> <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " internal _ logger . info ( STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . info ( STR , name ) ;", "predictions": ["internal _ logger . info ( STR , name ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . warn ( completed _ task . exception , STR , this . name ) ; ", "after_ctx": " ", "after_line": "internal _ logger . warn ( completed _ task . exception , STR , name ) ;", "predictions": ["internal _ logger . warn ( completed _ task . exception ( STR ( throw ; STR ) < name ( return </%> ( get ) </@> ( name </@> ) . action = <@> = max = <@> = <@> ( <@> ; <@> _ time time time time time time . warn file file _ <%> <%> . exception . exception this node _ ) ;"]}, {"before_ctx": " ", "before_line": " internal _ logger . warn ( STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . warn ( STR , name ) ;", "predictions": ["internal _ logger . warn ( STR , name ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) ", "after_ctx": " ", "after_line": "lock ( sync _ root )", "predictions": ["lock ( sync _ root )"]}, {"before_ctx": " ", "before_line": " internal _ logger . debug ( STR , this . name , previous _ task . status ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . debug ( STR , name , previous _ task . status ) ;", "predictions": ["internal _ logger . debug ( STR , name , previous , name </%> ) +"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " internal _ logger . debug ( ex , STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . debug ( ex , STR , name ) ;", "predictions": ["internal _ logger . debug ( ex , STR , name ( stream ( name ) ) ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " internal _ logger . error ( ex , STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . error ( ex , STR , name ) ;", "predictions": ["internal _ logger . error ( ex , STR , name 1 ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) ", "after_ctx": " ", "after_line": "lock ( sync _ root )", "predictions": ["lock ( sync _ root )"]}, {"before_ctx": " ", "before_line": " using n _ log _ layout _ renderers ; using n _ log _ layouts ; using n _ log _ targets ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using layout _ renderers ; using layouts ; using targets ;", "predictions": ["using n _ log _ layouts ; using n _ log _ targets ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , STR , new object [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , STR , new object [ ] { value } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , STR , new object [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , STR , new [ ] { value } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , STR , new [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new [ ] { arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new [ ] { arg , arg } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new [ ] { arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new [ ] { arg , arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new [ ] { arg , arg , arg } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new [ ] { arg , arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , STR , new object [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , STR , new object [ ] { value } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , STR , new object [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , STR , new [ ] { value } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , STR , new [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg , arg } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , STR , new object [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , STR , new object [ ] { value } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , STR , new object [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , STR , new [ ] { value } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , STR , new [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg , arg } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , STR , new object [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , STR , new object [ ] { value } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , STR , new object [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , STR , new [ ] { value } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , STR , new [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg , arg } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , STR , new object [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , STR , new object [ ] { value } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , STR , new object [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , STR , new [ ] { value } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , STR , new [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg , arg } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , STR , new object [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , STR , new object [ ] { value } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , STR , new object [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , STR , new [ ] { value } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , STR , new [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg , arg } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , STR , new object [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , STR , new object [ ] { value } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , STR , new object [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , STR , new [ ] { value } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , STR , new [ ] { value } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg , arg } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg , arg } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg , arg } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument to ( ( argument to is . fatal ) ( log ) ( if [ ] { argument to ( ( if to fatal this argument to is . fatal ) log ) ( if to ] { argument to ( is this . if this if if this . if this . if this . if this ( if this . write ( level this ( new new new new"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , to object ( [ } ( [ } ( [ } ( logger } current this ( message ; ( object = STR , [ } ( ( object ( STR } ( [ } ( internal } ( logger } message ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " ", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) _ write this . write this . write this log lock new _ ] ; current } <-> write } </%> 1 </%> 1 1 ;"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert . true ( flush _ count < = write _ count ) ; write _ count + + ;", "predictions": ["assert . true ( flush _ count < to <@> <%> <@> <%> <-> if if . true <%> ) </%> </%> lock <%> </%> _"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . throw _ exceptions ) ", "after_ctx": " ", "after_line": "if ( throw _ exceptions )", "predictions": ["if ( throw _ exceptions )"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; if ( this . fail _ counter > 0 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ( fail _ counter > 0 )", "predictions": ["assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ( to <%> counter ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . fail _ counter - - ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "fail _ counter - - ;", "predictions": ["fail _ counter - - ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ count + + ; ", "after_ctx": " ", "after_line": "flush _ count + + ;", "predictions": ["flush _ count + + ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . fs _ normalize = true ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "fs _ normalize = true ;", "predictions": ["fs _ normalize = true ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . fs _ normalize ) ", "after_ctx": " ", "after_line": "if ( fs _ normalize )", "predictions": ["if ( fs _ normalize )"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( fallback _ group _ target ) ; ", "after_ctx": " ", "after_line": "optimize _ buffer _ reuse = get _ type ( ) = = typeof ( fallback _ group _ target ) ;", "predictions": ["optimize _ buffer _ reuse = get . type _ count this this </%> this this </%> this ;"]}, {"before_ctx": " ", "before_line": " lock ( this . lock _ object ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( lock _ object )", "predictions": ["lock ( lock _ object )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . current _ target ! = 0 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( current _ target ! = 0 )", "predictions": ["if ( current _ target ! = <@> </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . return _ to _ first _ on _ success ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( return _ to _ first _ on _ success )", "predictions": ["if ( return _ to _ first _ </@> , ["]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . debug ( STR , this . targets [ target _ to _ invoke ] ) ; this . current _ target = 0 ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "internal _ logger . debug ( STR , targets [ target _ to _ invoke ] ) ; current _ target = 0 ;", "predictions": ["internal _ logger . debug ( STR , targets [ target _ to _ invoke ] ) ; current _ target = 0 ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . lock _ object ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( lock _ object )", "predictions": ["lock ( lock _ object )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . current _ target = ( target _ to _ invoke + 1 ) % this . targets . count ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "current _ target = ( target _ to _ invoke + 1 ) % targets . count ;", "predictions": ["current _ target = ( target _ to _ invoke + 1 ) % targets . count ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " target _ to _ invoke = this . current _ target ; if ( try _ counter > = this . targets . count ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "target _ to _ invoke = current _ target ; if ( try _ counter > = targets . count )", "predictions": ["target _ to _ invoke = current _ target ; if ( try _ counter > = targets . count +"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . lock _ object ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( lock _ object )", "predictions": ["lock ( lock _ object )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " target _ to _ invoke = this . current _ target ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "target _ to _ invoke = current _ target ;", "predictions": ["target _ to _ invoke = current lock ;"]}, {"before_ctx": " ", "before_line": " this . include _ n _ log _ data = true ; this . ndc _ item _ separator = STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "include _ n _ log _ data = true ; ndc _ item _ separator = STR ;", "predictions": ["include _ n _ log _ data = true ; ndc _ item _ separator = STR ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . ndlc _ item _ separator = STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "ndlc _ item _ separator = STR ;", "predictions": ["ndlc _ item _ separator = STR ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . app _ info = string . format ( ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "app _ info = string . format (", "predictions": ["app _ info = string . format ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ;", "predictions": ["parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . machine _ name = environment . machine _ name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "machine _ name = environment . machine _ name ;", "predictions": ["machine _ name = environment . machine _ name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . machine _ name = string . empty ; } this . xml _ writer _ settings = new xml _ writer _ settings { indent = this . indent _ xml , ", "after_ctx": " ", "after_line": "machine _ name = string . empty ; } xml _ writer _ settings = new xml _ writer _ settings { indent = indent _ xml ,", "predictions": ["machine _ name = string . empty ; } xml _ writer _ settings = new xml _ writer _ settings { indent ( indent . ) </@>"]}, {"before_ctx": " ", "before_line": " if ( this . include _ source _ info ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( include _ source _ info )", "predictions": ["if ( include _ source _ info _ info"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . include _ call _ site ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( include _ call _ site )", "predictions": ["if ( include _ call _ site </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . append ( sb , log _ event ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "append ( sb , log _ event ) ;", "predictions": ["append ( sb , log _ event ) )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " using ( xml _ writer xtw = xml _ writer . create ( sb , this . xml _ writer _ settings ) ) ", "after_ctx": " ", "after_line": "using ( xml _ writer xtw = xml _ writer . create ( sb , xml _ writer _ settings ) )", "predictions": ["using ( xml _ writer xtw = xml _ writer this this this this this this this this this this this . ( ( ( ( settings _ this _ settings <%> <%> . ( ( ( <-> . if <%> <%> <%> <%> <%> . ( ( ( ( ( context <%> _ this _ context <%> <%> <%> <%> <%> <%> <%> <%> _ context <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> _ context <%> <%> <%> <%> <%> <%> <%> _ context <%> <%> <%> <%> <%> <%> <%>"]}, {"before_ctx": " ", "before_line": " if ( this . include _ ndc ) { ndc _ content = string . join ( this . ndc _ item _ separator , nested _ diagnostics _ context . get _ all _ messages ( ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( include _ ndc ) { ndc _ content = string . join ( ndc _ item _ separator , nested _ diagnostics _ context . get _ all _ messages ( ) ) ;", "predictions": ["if ( include _ ndc ) { ndc _ content = string . join ( ndc _ item _ separator , nested . n . log . new new new . messages . new . </%> </%> </%> </%> </%> </%> </%> </@> ) </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . include _ ndlc ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( include _ ndlc )", "predictions": ["if ( include _ ndlc )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " ndc _ content + = this . ndc _ item _ separator ; } ndc _ content + = string . join ( this . ndlc _ item _ separator , nested _ diagnostics _ logical _ context . get _ all _ messages ( ) ) ; ", "after_ctx": " ", "after_line": "ndc _ content + = ndc _ item _ separator ; } ndc _ content + = string . join ( ndlc _ item _ separator , nested _ diagnostics _ logical _ context . get _ all _ messages ( ) ) ;", "predictions": ["ndc _ content + = ndc _ item _ separator ; } ndc _ content + = string . join ( ndlc _ item _ separator , nested _ diagnostics _ logical _ context . get _ all _ messages ( ) ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . include _ source _ info ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( include _ source _ info )", "predictions": ["if ( include _ source _ info )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . include _ n _ log _ data ) ", "after_ctx": " ", "after_line": "if ( include _ n _ log _ data )", "predictions": ["if ( include _ n _ log . file </%>"]}, {"before_ctx": " ", "before_line": " if ( this . include _ all _ properties ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( include _ all _ properties )", "predictions": ["if ( include _ all _ properties )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . parameters . count > 0 ) { foreach ( n _ log _ viewer _ parameter _ info parameter in this . parameters ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( parameters . count > 0 ) { foreach ( n _ log _ viewer _ parameter _ info parameter in parameters )", "predictions": ["if ( parameters . count > 0 ) { foreach ( n _ log _ viewer _ parameter _ info parameter name . settings xml xml xml _ settings . settings xml xml )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " xtw . write _ attribute _ safe _ string ( STR , this . app _ info ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "xtw . write _ attribute _ safe _ string ( STR , app _ info ) ;", "predictions": ["xtw . write _ attribute _ safe _ string ( log <@> string this <@> this <@> this <@> <@> _ n = <@> = item = item = item ) <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " xtw . write _ attribute _ safe _ string ( STR , this . machine _ name ) ; ", "after_ctx": " ", "after_line": "xtw . write _ attribute _ safe _ string ( STR , machine _ name ) ;", "predictions": ["xtw . write _ attribute _ safe _ true ; <@> . machine . name . machine . STR ."]}, {"before_ctx": " ", "before_line": " using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using internal ;", "predictions": ["using n _ log _ internal ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . optimize _ buffer _ reuse = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "optimize _ buffer _ reuse = true ;", "predictions": ["optimize _ buffer _ reuse = true ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " native _ methods . output _ debug _ string ( base . render _ log _ event ( this . layout , log _ event ) ) ; ", "after_ctx": " ", "after_line": "native _ methods . output _ debug _ string ( render _ log _ event ( layout , log _ event ) ) ;", "predictions": ["native _ methods . output _ debug _ string ( base . render _ log _ event ( layout , log . parameter ) ) </@> </@> _ foreach _ string ( count _ event . { . { layout writer settings . settings xml _ ; </%> </%> </%> this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this"]}, {"before_ctx": " ", "before_line": " this . file = create _ file _ stream ( false ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "file = create _ file _ stream ( false ) ;", "predictions": ["file = create _ file _ stream ( false <-> ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . file = = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( file = = null )", "predictions": ["if ( file = = null )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . file = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( file = = null )", "predictions": ["if ( file = = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . file = = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( file = = null )", "predictions": ["if ( file = = null )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . file = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "file = null ;", "predictions": ["file = null ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . creation _ time _ utc ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return creation _ time _ utc ;", "predictions": ["return creation _ time _ utc ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . last _ write _ time _ utc ; ", "after_ctx": " ", "after_line": "return last _ write _ time _ utc ;", "predictions": ["return last _ write _ time _ utc ) ( <@> this ;"]}, {"before_ctx": " ", "before_line": " this . detect _ console _ available = false ; this . optimize _ buffer _ reuse = true ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "detect _ console _ available = false ; optimize _ buffer _ reuse = true ;", "predictions": ["detect _ console _ available = false ; optimize . item . true _ true </%> true </%> true . get ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " if ( this . header ! = null ) { this . write _ to _ output ( base . render _ log _ event ( this . header , log _ event _ info . create _ null _ event ( ) ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "if ( header ! = null ) { write _ to _ output ( render _ log _ event ( header , log _ event _ info . create _ null _ event ( ) ) ) ;", "predictions": ["if ( header ! = null ) { write _ to _ output ( base . render _ log _ event ( header , log _ event _ info . create _ null _ event ( ) ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> ", "before_line": " if ( this . footer ! = null ) { this . write _ to _ output ( base . render _ log _ event ( this . footer , log _ event _ info . create _ null _ event ( ) ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "if ( footer ! = null ) { write _ to _ output ( render _ log _ event ( footer , log _ event _ info . create _ null _ event ( ) ) ) ;", "predictions": ["if ( footer ! = null ) { write _ to _ output ( base . render _ log _ event ( footer , log _ event _ info . create _ null _ event ( ) ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ output ( base . render _ log _ event ( this . layout , log _ event ) ) ; ", "after_ctx": " ", "after_line": "write _ to _ output ( render _ log _ event ( layout , log _ event ) ) ;", "predictions": ["write _ to _ output ( ( true . n this this . layout <@> log this last this </@> value value value value value value , write , </@>"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ <@> +"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " string _ comparison comparison = this . ignore _ case ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "string _ comparison comparison = ignore _ case", "predictions": ["string _ comparison comparison = ignore log value"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " string result = this . layout . render ( log _ event ) ; if ( result . index _ of ( this . substring , comparison ) < 0 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "string result = layout . render ( log _ event ) ; if ( result . index _ of ( substring , comparison ) < 0 )", "predictions": ["string result = layout . render this log _ ; if <%> <@> . index value <%> substring <@> comparison <-> < < < <-> <"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . action ; ", "after_ctx": " ", "after_line": "return action ;", "predictions": ["return action ;"]}, {"before_ctx": " ", "before_line": " this . message = STR ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "message = STR ;", "predictions": ["message = STR ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " throw new invalid _ operation _ exception ( this . message ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "throw new invalid _ operation _ exception ( message ) ;", "predictions": ["throw new invalid _ operation _ exception ) <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . init _ count + + ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "init _ count + + ;", "predictions": ["init _ count + + <->"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . close _ count + + ; ", "after_ctx": " ", "after_line": "close _ count + + ;", "predictions": ["close _ count + + ."]}, {"before_ctx": " ", "before_line": " using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using internal ;", "predictions": ["using n _ log _ config <%>"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . normalize = true ; this . difference = false ; this . precision = NUM ; this . align _ decimal _ point = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "normalize = true ; difference = false ; precision = NUM ; align _ decimal _ point = true ;", "predictions": ["normalize = true ; difference = false <%> precision <-> NUM <%> v </%> point <-> <@> <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return ! this . raw ; } set { this . raw = ! value ; } ", "after_ctx": " ", "after_line": "get { return ! raw ; } set { raw = ! value ; }", "predictions": ["get { return ! raw ; } base ; ) < _ value ) , event"]}, {"before_ctx": " ", "before_line": " this . frequency = performance _ frequency ; this . first _ qpc _ value = qpc _ value ; this . last _ qpc _ value = qpc _ value ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "frequency = performance _ frequency ; first _ qpc _ value = qpc _ value ; last _ qpc _ value = qpc _ value ;", "predictions": ["frequency = performance _ frequency ; </@> . this . decimal . ; <-> . </%> ( last . </%> _ <%> . <%> ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . difference ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( difference )", "predictions": ["if ( difference )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " qpc _ value - = this . last _ qpc _ value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "qpc _ value - = last _ qpc _ value ;", "predictions": ["qpc _ value - = last _ ( point _ ) ( last if"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " else if ( this . normalize ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "else if ( normalize )", "predictions": ["else if ( normalize )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " qpc _ value - = this . first _ qpc _ value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "qpc _ value - = first _ qpc _ value ;", "predictions": ["qpc _ value - = first _ qpc _ value ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . last _ qpc _ value = v ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "last _ qpc _ value = v ;", "predictions": ["last _ qpc _ value = v )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . seconds ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( seconds )", "predictions": ["if ( seconds )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " double val = math . round ( qpc _ value / this . frequency , this . precision ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "double val = math . round ( qpc _ value / frequency , precision ) ;", "predictions": ["double val = math . round ( qpc _ value / frequency , precision ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . align _ decimal _ point ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( align _ decimal _ point )", "predictions": ["if ( align _ decimal _ value </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " string _ value + = STR + new string ( '0' , this . precision ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "string _ value + = STR + new string ( '0' , precision ) ;", "predictions": ["string _ value + = STR <%> new ) ; decimal decimal decimal </@> decimal ; ; ; ; <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " string _ value + = new string ( '0' , this . precision - ( string _ value . length - 1 - p ) ) ; ", "after_ctx": " ", "after_line": "string _ value + = new string ( '0' , precision - ( string _ value . length - 1 - p ) ) ;", "predictions": ["string _ value + = new string <%> ; of this . precision this </%> this . precision this </%> _ value . length this _ 1 this p ( ( <%> ; <-> _ </@> . length . length this </%> ( value this value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value ( value"]}, {"before_ctx": " ", "before_line": " log _ event _ info lei = log _ event _ info . create ( log _ level . info , this . name , null , message , par ) ; ", "after_ctx": " <%> <-> base . </%>", "after_line": "log _ event _ info lei = log _ event _ info . create ( log _ level . info , name , null , message , par ) ;", "predictions": ["log _ event _ info lei 1 last value _ </%> this this this this <%> this ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " base . log ( typeof ( my _ logger ) , lei ) ; ", "after_ctx": " ", "after_line": "log ( typeof ( my _ logger ) , lei ) ;", "predictions": ["log ( typeof ( my _ return <%> </%> log - - . first ) ) <%> _ ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ internal ) <%>"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " if ( this . universal _ time ) ", "after_ctx": " ", "after_line": "if ( universal _ time )", "predictions": ["if ( universal _ time <%>"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert . true ( flush _ count < = write _ count ) ; write _ count + + ;", "predictions": ["assert . true ( flush _ count < = write _ count ) ; write <-> <-> </%> _ _"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . throw _ exceptions ) ", "after_ctx": " ", "after_line": "if ( throw _ exceptions )", "predictions": ["if ( throw _ exceptions )"]}, {"before_ctx": " ", "before_line": " this . flush _ count + + ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "flush _ count + + ;", "predictions": ["flush _ count + + ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . written _ events = new list < log _ event _ info > ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "written _ events = new list < log _ event _ info > ( ) ;", "predictions": ["written _ events = new list < log _ event _ info > log log </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " assert . true ( this . flush _ count < = this . write _ count ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . true ( flush _ count < = write _ count ) ;", "predictions": ["assert . true ( flush _ count < = write _ count ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ count + + ; this . written _ events . add ( log _ event ) ; } if ( this . fail _ counter > 0 ) { this . fail _ counter - - ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write _ count + + ; written _ events . add ( log _ event ) ; } if ( fail _ counter > 0 ) { fail _ counter - - ;", "predictions": ["write _ count + + ; written _ events . add ( log _ event ) ; } if ( fail _ counter > 0 ) { fail _ counter - - ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ count + + ; ", "after_ctx": " ", "after_line": "flush _ count + + ;", "predictions": ["flush _ count + + ;"]}, {"before_ctx": " ", "before_line": " this . succeeded = succeeded ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "succeeded = succeeded ;", "predictions": ["succeeded = succeeded ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . succeeded = succeeded ; this . exception = exception ; ", "after_ctx": " ", "after_line": "succeeded = succeeded ; exception = exception ;", "predictions": ["succeeded = succeeded ; exception = exception <%>"]}, {"before_ctx": " ", "before_line": " this . left = left ; this . right = right ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "left = left ; right = right ;", "predictions": ["left = left ; right = right ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return STR + this . left + STR + this . right + STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return STR + left + STR + right + STR ;", "predictions": ["return STR + left + STR + right + STR ;"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . wrapped _ target = wrapped _ target ; this . condition = condition ; this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( filtering _ target _ wrapper ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "wrapped _ target = wrapped _ target ; condition = condition ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( filtering _ target _ wrapper ) ;", "predictions": ["wrapped _ target = wrapped _ target ; condition = condition ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( filtering _ target _ wrapper ) ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ filters ; using n _ log _ targets ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ; using filters ; using targets ;", "predictions": ["using n _ log _ filters ; using n _ log _ targets this"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . target = target ; this . filter _ chain = filter _ chain ; ", "after_ctx": " ", "after_line": "target = target ; filter _ chain = filter _ chain ;", "predictions": ["target = target ; filter _ chain = filter _ chain ;"]}, {"before_ctx": " ", "before_line": " this . log _ factory = log _ factory ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "log _ factory = log _ factory ;", "predictions": ["log _ factory = log _ factory )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . initialize ( reader , file _ name , ignore _ errors ) ; ", "after_ctx": " ", "after_line": "initialize ( reader , file _ name , ignore _ errors ) ;", "predictions": ["initialize ( reader , file _ name . ignore this ignore <%> throw ) ;"]}, {"before_ctx": " ", "before_line": " this . log _ factory = log _ factory ; this . initialize ( reader , file _ name , ignore _ errors ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "log _ factory = log _ factory ; initialize ( reader , file _ name , ignore _ errors ) ;", "predictions": ["log _ factory = log _ factory ; initialize ( reader , file _ name <%> ignore . errors ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . initialize ( reader , file _ name , false ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "initialize ( reader , file _ name , false ) ;", "predictions": ["initialize ( reader , file _ name , false ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . initialize ( reader , file _ name , ignore _ errors ) ; ", "after_ctx": " ", "after_line": "initialize ( reader , file _ name , ignore _ errors ) ;", "predictions": ["initialize ( reader , file _ name . ignore <%> file ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return new xml _ logging _ configuration ( this . original _ file _ name ) ; ", "after_ctx": " ", "after_line": "return new xml _ logging _ configuration ( original _ file _ name ) ;", "predictions": ["return new xml _ logging _ configuration ( original . file . name </%> ,"]}, {"before_ctx": " ", "before_line": " this . original _ file _ name = file _ name ; this . parse _ top _ level ( content , file _ name , auto _ reload _ default : false ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "original _ file _ name = file _ name ; parse _ top _ level ( content , file _ name , auto _ reload _ default : false ) ;", "predictions": ["original _ file _ name = file _ name ; parse _ top _ level ( content , file _ name , auto _ reload _ default : false ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . parse _ top _ level ( content , null , auto _ reload _ default : false ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parse _ top _ level ( content , null , auto _ reload _ default : false ) ;", "predictions": ["parse _ top _ level ( content , null , auto _ reload _ default : true ) <"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . check _ parsing _ errors ( content ) ; this . check _ unused _ targets ( ) ; ", "after_ctx": " ", "after_line": "check _ parsing _ errors ( content ) ; check _ unused _ targets ( ) ;", "predictions": ["check _ parsing _ errors ( content ) ; check _ unused _ targets ( <-> = ;"]}, {"before_ctx": " ", "before_line": " if ( this . initialize _ succeeded = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( initialize _ succeeded = = null )", "predictions": ["if ( initialize _ succeeded = = null </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ! this . file _ must _ auto _ reload _ lookup . contains _ key ( get _ file _ lookup _ key ( file _ name ) ) ) this . parse _ top _ level ( new n _ log _ xml _ element ( file _ name ) , file _ name , auto _ reload _ default ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! file _ must _ auto _ reload _ lookup . contains _ key ( get _ file _ lookup _ key ( file _ name ) ) ) parse _ top _ level ( new n _ log _ xml _ element ( file _ name ) , file _ name , auto _ reload _ default ) ;", "predictions": ["if ( ! file _ must _ auto _ reload _ lookup . contains _ key ( file _ name ) ) ) parse _ top _ level ( new n _ log _ xml _ element ( file _ name ) , file _ name , auto _ reload _ default ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . parse _ configuration _ element ( content , file _ path , auto _ reload _ default ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parse _ configuration _ element ( content , file _ path , auto _ reload _ default ) ;", "predictions": ["parse _ configuration _ element ( content , file _ path , auto _ reload . = </%> </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse _ n _ log _ element ( content , file _ path , auto _ reload _ default ) ; ", "after_ctx": " ", "after_line": "parse _ n _ log _ element ( content , file _ path , auto _ reload _ default ) ;", "predictions": ["parse _ n _ log _ element ( content , file _ path _ = . right </%> </%> </%> ( </@> <%> file _ path _ <@> n n n n _ _ </%> </@> <%> file _ type . auto <%> auto _ typeof _ <@> <%> <%> <%> <%> _ <@> _ <@> <%> 0 <-> path > fail . if this <-> . event . event . 2 ) </%>"]}, {"before_ctx": " ", "before_line": " this . parse _ n _ log _ element ( nlog _ element , file _ path , auto _ reload _ default ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parse _ n _ log _ element ( nlog _ element , file _ path , auto _ reload _ default ) ;", "predictions": ["parse _ n _ log _ element ( nlog _ element , file _ path this _ auto _ type _ child ( child ( child ( child _ to . directory <-> ( parse _ this _ STR <%> <%> <%> <%> . ] . ( element . element _ get . configuration , = ) ) ) . = ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . default _ culture _ info = culture _ info . invariant _ culture ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "default _ culture _ info = culture _ info . invariant _ culture ;", "predictions": ["default _ culture _ info = culture _ info . invariant _ culture ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . exception _ logging _ old _ style = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "exception _ logging _ old _ style = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ;", "predictions": ["exception _ logging _ old _ style = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse _ extensions _ element ( extensions _ child , path . get _ directory _ name ( file _ path ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parse _ extensions _ element ( extensions _ child , path . get _ directory _ name ( file _ path ) ) ;", "predictions": ["parse _ extensions _ element ( extensions _ child , path . get _ directory _ name ( attributes _ from this this this this this this this this this </%> <-> <-> . get _ configuration _ element <%> default _ path <-> <-> <-> <-> <-> <-> <-> _ path this this this this this this this this this this this this ( element target _ <@> _ create target <@> _ create this attribute _ new ( ( ( attribute _ new ( ( ( attribute _ new ( new _ configuration ( new target configuration <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse _ include _ element ( child , path . get _ directory _ name ( file _ path ) , auto _ reload _ default : auto _ reload ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parse _ include _ element ( child , path . get _ directory _ name ( file _ path ) , auto _ reload _ default : auto _ reload ) ;", "predictions": ["parse _ include _ element ( child , path . get _ directory _ name ( file _ path ) , auto _ reload _ default : auto _ reload ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse _ targets _ element ( child ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parse _ targets _ element ( child ) ;", "predictions": ["parse _ targets _ element ( child ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . parse _ variable _ element ( child ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parse _ variable _ element ( child ) ;", "predictions": ["parse _ variable _ element ( child ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . parse _ time _ element ( child ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parse _ time _ element ( child ) ;", "predictions": ["parse _ time _ element ( child ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse _ rules _ element ( rule _ child , this . logging _ rules ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parse _ rules _ element ( rule _ child , logging _ rules ) ;", "predictions": ["parse _ rules _ element ( rule _ child , logging _ rules ) </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . parse _ logger _ element ( logger _ element , rules _ collection ) ; ", "after_ctx": " ", "after_line": "parse _ logger _ element ( logger _ element , rules _ collection ) ;", "predictions": ["parse _ logger _ element ( logger _ element , rules _ collection ) <@>"]}, {"before_ctx": " ", "before_line": " this . parse _ filters ( rule , child ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parse _ filters ( rule , child ) ;", "predictions": ["parse _ filters ( rule , child ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse _ logger _ element ( child , rule . child _ rules ) ; ", "after_ctx": " ", "after_line": "parse _ logger _ element ( child , rule . child _ rules ) ;", "predictions": ["parse _ logger _ element ( child , rule . child _ rules ) ) ) logger"]}, {"before_ctx": " ", "before_line": " filter filter = this . configuration _ item _ factory . filters . create _ instance ( name ) ; this . configure _ object _ from _ attributes ( filter , filter _ element , false ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "filter filter = configuration _ item _ factory . filters . create _ instance ( name ) ; configure _ object _ from _ attributes ( filter , filter _ element , false ) ;", "predictions": ["filter filter = configuration _ item _ factory . filters . create _ instance ( name ) ; configure _ object _ from _ attributes ( filter , filter _ element , false ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " string value = this . expand _ simple _ variables ( variable _ element . get _ required _ attribute ( STR ) ) ; this . variables [ name ] = value ; ", "after_ctx": " ", "after_line": "string value = expand _ simple _ variables ( variable _ element . get _ required _ attribute ( STR ) ) ; variables [ name ] = value ;", "predictions": ["string value = expand _ simple _ variables ( variable _ element . get _ required _ attribute ( STR ) ) ; variables [ name ] = value ;"]}, {"before_ctx": " ", "before_line": " target new _ target = this . configuration _ item _ factory . targets . create _ instance ( type _ attribute _ val ) ; this . parse _ target _ element ( new _ target , target _ element , type _ name _ to _ default _ target _ parameters ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "target new _ target = configuration _ item _ factory . targets . create _ instance ( type _ attribute _ val ) ; parse _ target _ element ( new _ target , target _ element , type _ name _ to _ default _ target _ parameters ) ;", "predictions": ["target new _ target = configuration _ item _ factory . targets . create _ instance ( type _ attribute _ val ) ; parse _ target _ element ( new _ target , target _ element , type _ name _ to _ default _ target _ parameters ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " new _ target = this . wrap _ with _ default _ wrapper ( new _ target , default _ wrapper _ element ) ; ", "after_ctx": " ", "after_line": "new _ target = wrap _ with _ default _ wrapper ( new _ target , default _ wrapper _ element ) ;", "predictions": ["new _ target = wrap _ with _ default _ wrapper ( new _ target , default _ path _ file ;"]}, {"before_ctx": " ", "before_line": " this . parse _ target _ element ( target , defaults , null ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parse _ target _ element ( target , defaults , null ) ;", "predictions": ["parse _ target _ element ( target , defaults , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . configure _ object _ from _ attributes ( target , target _ element , true ) ; ", "after_ctx": " ", "after_line": "configure _ object _ from _ attributes ( target , target _ element , true ) ;", "predictions": ["configure _ object _ from _ attributes ( target , target _ element , true file </%> <-> ( target . <-> ( true ( true _ default target target _ <@> . true ) ("]}, {"before_ctx": " ", "before_line": " this . set _ property _ from _ element ( target , child _ element ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "set _ property _ from _ element ( target , child _ element ) ;", "predictions": ["set _ property _ from _ element ( target , child _ element ) ) ) ( ) ) )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse _ target _ element ( new _ target , child _ element , type _ name _ to _ default _ target _ parameters ) ; ", "after_ctx": " ", "after_line": "parse _ target _ element ( new _ target , child _ element , type _ name _ to _ default _ target _ parameters ) ;", "predictions": ["parse _ target _ element ( new _ target , child _ element , type _ name _ to _ <@> _ . _ with _ get </%> </%> _ <@> . to property helper parse <-> factory _ . ) <%> <%> _ . _ ( , create _ . filter this </@> _ <-> this get _ <-> this get _ <-> , factory _ attributes _ element _ = _ . , create _ . _ this ,"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse _ target _ element ( new _ target , child _ element , type _ name _ to _ default _ target _ parameters ) ; ", "after_ctx": " ", "after_line": "parse _ target _ element ( new _ target , child _ element , type _ name _ to _ default _ target _ parameters ) ;", "predictions": ["parse _ target _ element ( new _ target , child _ element , type _ name _ to _ default _ target _ parameters ) target target target target ; configure configure ,"]}, {"before_ctx": " ", "before_line": " this . configure _ from _ file ( file , auto _ reload _ default ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "configure _ from _ file ( file , auto _ reload _ default ) ;", "predictions": ["configure _ from _ file ( file , auto _ reload _ default ) ,"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " time _ source new _ time _ source = this . configuration _ item _ factory . time _ sources . create _ instance ( type ) ; this . configure _ object _ from _ attributes ( new _ time _ source , time _ element , true ) ; ", "after_ctx": " ", "after_line": "time _ source new _ time _ source = configuration _ item _ factory . time _ sources . create _ instance ( type ) ; configure _ object _ from _ attributes ( new _ time _ source , time _ element , true ) ;", "predictions": ["time _ source new _ time _ source = configuration _ item _ factory . time _ sources . create _ instance ( type ) ; configure _ object _ from _ attributes ( new _ time _ source , time _ element , true ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . add _ array _ item _ from _ element ( o , element ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( add _ array _ item _ from _ element ( o , element ) )", "predictions": ["if ( add _ array _ item _ from _ element ( o , ) <-> </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . set _ layout _ from _ element ( o , element ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( set _ layout _ from _ element ( o , element ) )", "predictions": ["if ( set _ layout _ from _ element ( o , element ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . set _ item _ from _ element ( o , element ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( set _ item _ from _ element ( o , element ) )", "predictions": ["if ( set _ item _ from _ element ( o , element ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var value = this . expand _ simple _ variables ( element . value ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var value = expand _ simple _ variables ( element . value ) ;", "predictions": ["var value = expand _ simple _ variables ( element . value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " property _ helper . set _ property _ from _ string ( o , element . local _ name , value , this . configuration _ item _ factory ) ; ", "after_ctx": " ", "after_line": "property _ helper . set _ property _ from _ string ( o , element . local _ name , value , configuration _ item _ factory ) ;", "predictions": ["property _ helper . set _ property _ from _ string ( o , element . local _ name , value , configuration _ item _ factory ) ;"]}, {"before_ctx": " ", "before_line": " this . configure _ object _ from _ attributes ( item , element , true ) ; this . configure _ object _ from _ element ( item , element ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "configure _ object _ from _ attributes ( item , element , true ) ; configure _ object _ from _ element ( item , element ) ;", "predictions": ["configure _ object _ from _ attributes ( item , element , true ) ; configure _ object . , . <-> _ </@> _ <-> this ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . set _ property _ from _ element ( target _ object , child ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "set _ property _ from _ element ( target _ object , child ) ;", "predictions": ["set _ property _ from _ element ( target _ object , child ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse _ target _ element ( wrapper _ target _ instance , default _ parameters ) ; ", "after_ctx": " ", "after_line": "parse _ target _ element ( wrapper _ target _ instance , default _ parameters ) ;", "predictions": ["parse _ target _ element ( wrapper _ target _ instance ( log . parameters ( = = level . parameters , get _ parameters this <%> default . parse ( ) ( ) ) level . this </%> <@> . for </%> ( <@> . </@> </%> </@> </@> </@> ] </%> </%> </@> format </%> </%>"]}, {"before_ctx": " ", "before_line": " return this . configuration _ item _ factory . layouts . create _ instance ( this . expand _ simple _ variables ( layout _ type _ name ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return configuration _ item _ factory . layouts . create _ instance ( expand _ simple _ variables ( layout _ type _ name ) ) ;", "predictions": ["return configuration _ item _ factory . layouts . create _ instance ( expand _ simple _ variables ( layout _ type . to _ to </%> </%> </%> </%> </%> </%> </%> </%> <-> <-> <-> <-> </%> ) ( </@> . <@> . format <-> </%> layout . type . variables <-> </%> type . name </%> </%> </%> </%> type ) _ info this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " if ( log _ event . properties . try _ get _ value ( this . parameter , out value ) ) ", "after_ctx": " ", "after_line": "if ( log _ event . properties . try _ get _ value ( parameter , out value ) )", "predictions": ["if ( log _ event . properties . try _ get _ value <%> parameter , <-> , <-> string this <-> ( parameter ) )"]}, {"before_ctx": " ", "before_line": " return this . get _ targets _ for _ level ( level ) ! = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return get _ targets _ for _ level ( level ) ! = null ;", "predictions": ["return get _ targets _ for _ level ( level ) ! = null </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( log _ event . level ) ) { this . write _ to _ targets ( log _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( log _ event . level ) ) { write _ to _ targets ( log _ event ) ;", "predictions": ["if ( is _ enabled ( log _ event . level ) ) { write _ to _ targets ( log _ </%> ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( log _ event . level ) ) { this . write _ to _ targets ( wrapper _ type , log _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( log _ event . level ) ) { write _ to _ targets ( wrapper _ type , log _ event ) ;", "predictions": ["if ( is _ enabled ( log _ event . level ) ) { write _ to _ targets ( wrapper _ type logger argument this , level this ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , null , value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , null , value ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , null , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , value ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , value ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , { { if _ enabled <%> level <-> <-> write <-> ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) )", "predictions": ["if ( is _ enabled ( level ) )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( level , null , message _ func ( ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write _ to _ targets ( level , null , message _ func ( ) ) ;", "predictions": ["write _ to _ targets ( level , null , message _ func ) </%> </%> </%> </%> log . parameter . 2 ) </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . log ( level , message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "log ( level , message , exception ) ;", "predictions": ["log ( level , message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , args ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message ( args </%> </%> <-> <-> <-> <-> <-> <-> <-> level </%> format </%> <@> <@> </%> {"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , null , message ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , null , message ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , null , message ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , args ) ; ", "after_ctx": " ", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , args ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , args ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , exception ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , exception , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , exception , message , args ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , exception , message , <@> ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , exception , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , exception , format _ provider , message , args ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , exception , format _ type this log _ <@> _ is <%> </@> _ _ message ) level , </@> ) level ) level ) name"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message ) {"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ; is } ( , } , type write event factory { ] to _ _ to to _ _"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new } configuration configuration ( factory <%> factory } configuration configuration ) args"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object ] ; argument ( argument to ] { argument ( argument to ] ( factory _ factory } = factory } , ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ enabled ( level ) ) { this . write _ to _ targets ( level , format _ provider , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message <%> new object factory info <@> ; ; ; ;"]}, {"before_ctx": " ", "before_line": " this . name = name ; this . factory = factory ; this . set _ configuration ( logger _ configuration ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ; factory = factory ; set _ configuration ( logger _ configuration ) ;", "predictions": ["name = name ; factory = factory ; set _ configuration ( logger _ configuration ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " logger _ impl . write ( this . logger _ type , this . get _ targets _ for _ level ( level ) , log _ event , this . factory ) ; ", "after_ctx": " ", "after_line": "logger _ impl . write ( logger _ type , get _ targets _ for _ level ( level ) , log _ event , factory ) ;", "predictions": ["logger _ impl . write ( logger _ type , get _ targets _ for _ level ( level ) , log <%> <@> ( ] , [ , ) {"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( level , this . factory . default _ culture _ info , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "write _ to _ targets ( level , factory . default _ culture _ info , message , args ) ;", "predictions": ["write _ to _ targets ( level , factory . default _ culture _ info , message , args ) ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . name = name ; this . layout = layout ; this . encode = encode ; ", "after_ctx": " ", "after_line": "name = name ; layout = layout ; encode = encode ;", "predictions": ["name = name ; layout = layout ; encode = encode this"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " string _ comparison comparison _ type = this . ignore _ case ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "string _ comparison comparison _ type = ignore _ case", "predictions": ["string _ comparison comparison _ type = ignore _ case"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . layout . render ( log _ event ) . equals ( this . compare _ to , comparison _ type ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( layout . render ( log _ event ) . equals ( compare _ to , comparison _ type ) )", "predictions": ["if ( layout . render ( log _ event <-> . <@> this ; ; ; ; length </%> <-> </@> ; ; <-> <%> <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . action ; ", "after_ctx": " ", "after_line": "return action ;", "predictions": ["return action ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ filters ; using n _ log _ targets ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using filters ; using targets ;", "predictions": ["using n _ log ; using n _ <%> . target _ this _ <@> ."]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . filters = new list < filter > ( ) ; this . child _ rules = new list < logging _ rule > ( ) ; this . targets = new list < target > ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "filters = new list < filter > ( ) ; child _ rules = new list < logging _ rule > ( ) ; targets = new list < target > ( ) ;", "predictions": ["filters = new list < filter > ( ) ; child _ rules = new list < logging _ rule > ( ) ; targets = <@> </@> match name <-> </%> _ </%> _ </%> _ </%> _ </%> _ filters ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . logger _ name _ pattern = logger _ name _ pattern ; this . targets . add ( target ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "logger _ name _ pattern = logger _ name _ pattern ; targets . add ( target ) ;", "predictions": ["logger _ name _ pattern = logger _ name _ pattern ; targets . add ( target ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . logger _ name _ pattern = logger _ name _ pattern ; this . targets . add ( target ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "logger _ name _ pattern = logger _ name _ pattern ; targets . add ( target ) ;", "predictions": ["logger _ name _ pattern = logger _ name _ pattern logger argument . = , > logger logger"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . logger _ name _ pattern = logger _ name _ pattern ; this . targets . add ( target ) ; ", "after_ctx": " ", "after_line": "logger _ name _ pattern = logger _ name _ pattern ; targets . add ( target ) ;", "predictions": ["logger _ name _ pattern = logger _ <@> this this <-> <-> targets . add position ( target ;"]}, {"before_ctx": " ", "before_line": " return this . logger _ name _ pattern ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return logger _ name _ pattern ;", "predictions": ["return logger _ name _ pattern ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . logger _ name _ pattern = value ; int first _ pos = this . logger _ name _ pattern . index _ of ( '*' ) ; int last _ pos = this . logger _ name _ pattern . last _ index _ of ( '*' ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "logger _ name _ pattern = value ; int first _ pos = logger _ name _ pattern . index _ of ( '*' ) ; int last _ pos = logger _ name _ pattern . last _ index _ of ( '*' ) ;", "predictions": ["logger _ name _ pattern = value ; int first _ pos = logger _ name _ pattern . index _ of ( '*' ) ; int last _ pos = logger _ name _ pattern . last _ index _ of ( '*' ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . logger _ name _ match _ mode = match _ mode . equals ; this . logger _ name _ match _ argument = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "logger _ name _ match _ mode = match _ mode . equals ; logger _ name _ match _ argument = value ;", "predictions": ["logger _ name _ match _ mode = match _ mode . equals ; logger _ name _ match _ argument = value ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . logger _ name _ match _ mode = match _ mode . starts _ with ; this . logger _ name _ match _ argument = before ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "logger _ name _ match _ mode = match _ mode . starts _ with ; logger _ name _ match _ argument = before ;", "predictions": ["logger _ name _ match _ mode = match _ mode . starts _ with ; logger _ name _ match _ argument = before ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . logger _ name _ match _ mode = match _ mode . ends _ with ; this . logger _ name _ match _ argument = after ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "logger _ name _ match _ mode = match _ mode . ends _ with ; logger _ name _ match _ argument = after ;", "predictions": ["logger _ name _ match _ mode = match _ mode . ends _ with ; logger _ name _ match _ argument = after ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . logger _ name _ match _ mode = match _ mode . none ; this . logger _ name _ match _ argument = string . empty ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "logger _ name _ match _ mode = match _ mode . none ; logger _ name _ match _ argument = string . empty ;", "predictions": ["logger _ name _ match _ mode = match _ mode . none ; logger _ name _ match _ argument = string . empty ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . enable _ logging _ for _ level ( log _ level . from _ ordinal ( i ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "enable _ logging _ for _ level ( log _ level . from _ ordinal ( i ) ) ;", "predictions": ["enable _ logging _ for _ level ( ] . name <-> i </%> </%> logger logger"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " sb . append _ format ( culture _ info . invariant _ culture , STR , this . logger _ name _ match _ argument , this . logger _ name _ match _ mode ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "sb . append _ format ( culture _ info . invariant _ culture , STR , logger _ name _ match _ argument , logger _ name _ match _ mode ) ;", "predictions": ["sb . append _ format ( culture _ info . invariant _ culture , STR , logger _ name _ match _ argument , logger _ = . </%> . mode </@> <@> . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = logger ( logger _ pattern ( this . logger ) ( logger _ pattern _ name _ pos"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " foreach ( target app in this . targets ) ", "after_ctx": " ", "after_line": "foreach ( target app in targets )", "predictions": ["foreach ( target app in targets )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " switch ( this . logger _ name _ match _ mode ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "switch ( logger _ name _ match _ mode )", "predictions": ["switch ( logger _ name _ match _ target ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return logger _ name . equals ( this . logger _ name _ match _ argument , string _ comparison . ordinal ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return logger _ name . equals ( logger _ name _ match _ argument , string _ comparison . ordinal ) ;", "predictions": ["return logger _ name . equals ( logger _ name _ match _ argument , string _ comparison . ordinal [ ordinal <@> <@> ) length"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return logger _ name . starts _ with ( this . logger _ name _ match _ argument , string _ comparison . ordinal ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return logger _ name . starts _ with ( logger _ name _ match _ argument , string _ comparison . ordinal ) ;", "predictions": ["return logger _ name . starts _ with ( logger _ </@> this . ; this . string <@> <@> <@> pattern pattern pattern pattern pattern . , ) name"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return logger _ name . ends _ with ( this . logger _ name _ match _ argument , string _ comparison . ordinal ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return logger _ name . ends _ with ( logger _ name _ match _ argument , string _ comparison . ordinal ) ;", "predictions": ["return logger _ name . ends _ with ( logger _ </%> . event . > log ( string pattern pattern ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return logger _ name . index _ of ( this . logger _ name _ match _ argument , string _ comparison . ordinal ) > = 0 ; ", "after_ctx": " ", "after_line": "return logger _ name . index _ of ( logger _ name _ match _ argument , string _ comparison . ordinal ) > = 0 ;", "predictions": ["return logger _ name . index _ of ( logger _ name _ string _ match , string ) match = return position return position return length position"]}, {"before_ctx": " ", "before_line": " this . text = text ; this . position = 0 ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "text = text ; position = 0 ;", "predictions": ["text = text ; position = 0 <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . text ; } ", "after_ctx": " ", "after_line": "get { return text ; }", "predictions": ["get { return text ; }"]}, {"before_ctx": " ", "before_line": " if ( this . position < this . text . length ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( position < text . length )", "predictions": ["if ( position < position < text . length )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . text [ this . position ] ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return text [ position ] ;", "predictions": ["return text [ position ] ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . position < this . text . length ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( position < text . length )", "predictions": ["if ( position < position < text . length )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . text [ this . position + + ] ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return text [ position + + ] ;", "predictions": ["return text [ position + + ] ;"]}, {"before_ctx": " ", "before_line": " this . write ( ( i _ list < async _ log _ event _ info > ) new [ ] { log _ event } ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write ( ( i _ list < async _ log _ event _ info > ) new [ ] { log _ event } ) ;", "predictions": ["write ( ( i _ list < async . _ . _ . to event ( . [ this this . [ [ <%> . = } this this _ _ } _ _ } _ _ _ info _ info _ none _ info this this <%> <%> . write ) <%> <%> </%> <%> <%> . async . async . async . </%> . info <%> <%> equals value { <%> . </%> } <%> <%> <%> ) <%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var buckets = log _ events . bucket _ sort ( c = > this . get _ smtp _ settings _ key ( c . log _ event ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var buckets = log _ events . bucket _ sort ( c = > get _ smtp _ settings _ key ( c . log _ event ) ) ;", "predictions": ["var buckets = log _ events . bucket _ sort ( <@> </@> > get . get . argument <-> <-> <-> <-> ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . process _ single _ mail _ message ( event _ infos ) ; ", "after_ctx": " ", "after_line": "process _ single _ mail _ message ( event _ infos ) ;", "predictions": ["process _ single _ mail _ message <-> match _ infos log log log log log log <%>"]}, {"before_ctx": " ", "before_line": " if ( this . header ! = null ) { body _ buffer . append ( this . header . render ( first _ event ) ) ; if ( this . add _ new _ lines ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( header ! = null ) { body _ buffer . append ( header . render ( first _ event ) ) ; if ( add _ new _ lines )", "predictions": ["if ( header ! = null ) { body _ > . </@> this string )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " body _ buffer . append ( this . layout . render ( event _ info . log _ event ) ) ; if ( this . add _ new _ lines ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "body _ buffer . append ( layout . render ( event _ info . log _ event ) ) ; if ( add _ new _ lines )", "predictions": ["body _ buffer . append ( layout . render ( event _ info . log _ event ) ) ; if ( add _ new _ lines )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . footer ! = null ) { body _ buffer . append ( this . footer . render ( last _ event ) ) ; if ( this . add _ new _ lines ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( footer ! = null ) { body _ buffer . append ( footer . render ( last _ event ) ) ; if ( add _ new _ lines )", "predictions": ["if ( footer ! = null ) { body _ buffer . append ( footer . render ( last _ event ) ) ; if <%> if if & if & if <%> if <%> )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . smtp _ server = = null & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( smtp _ server = = null & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )", "predictions": ["if ( smtp _ server = = null & & string . is _ null _ or _ empty ( pickup _ directory _ location ) ) ( <@> ( body ) ) ( </@> <%> null event ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . delivery _ method = = smtp _ delivery _ method . network & & this . smtp _ server = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( delivery _ method = = smtp _ delivery _ method . network & & smtp _ server = = null )", "predictions": ["if ( delivery _ method = = smtp _ delivery _ method . network & & smtp _ server = = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )", "predictions": ["if ( delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . smtp _ server ! = null & & this . delivery _ method = = smtp _ delivery _ method . network ) { var rendered _ smtp _ server = this . smtp _ server . render ( last _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( smtp _ server ! = null & & delivery _ method = = smtp _ delivery _ method . network ) { var rendered _ smtp _ server = smtp _ server . render ( last _ event ) ;", "predictions": ["if ( smtp _ server ! = null & & delivery _ method = = smtp _ delivery _ method . network ) { var rendered _ smtp _ server = smtp _ server . render ( last _ event ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " client . port = this . smtp _ port ; client . enable _ ssl = this . enable _ ssl ; if ( this . smtp _ authentication = = smtp _ authentication _ mode . ntlm ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "client . port = smtp _ port ; client . enable _ ssl = enable _ ssl ; if ( smtp _ authentication = = smtp _ authentication _ mode . ntlm )", "predictions": ["client . port = smtp _ port ; client . enable _ ssl = enable _ ssl ; if ( smtp _ authentication = = smtp _ authentication _ mode . ntlm )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( ! string . is _ null _ or _ empty ( this . pickup _ directory _ location ) & & this . delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ! string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory )", "predictions": ["if ( ! string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " client . delivery _ method = this . delivery _ method ; client . timeout = this . timeout ; ", "after_ctx": " ", "after_line": "client . delivery _ method = delivery _ method ; client . timeout = timeout ;", "predictions": ["client . delivery _ method = delivery _ method ; header . ; <-> <-> <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( ! this . use _ system _ net _ mail _ settings & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) & & this . delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! use _ system _ net _ mail _ settings & & string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory )", "predictions": ["if ( ! use _ system _ net _ mail _ settings & & string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery . method _ specified . specified . pickup . directory )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . from = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( from = = null )", "predictions": ["if ( from = = null )"]}, {"before_ctx": " ", "before_line": " var rendered _ from = this . from = = null ? null : this . from . render ( last _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var rendered _ from = from = = null ? null : from . render ( last _ event ) ;", "predictions": ["var rendered _ from = from = = null ? client timeout = = = event ( last </@> </@> </@> </@> </@> </@>"]}, {"before_ctx": " ", "before_line": " if ( this . condition = = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( condition = = null )", "predictions": ["if ( condition = = null )"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . flush _ count + + ; ", "after_ctx": " ", "after_line": "flush _ count + + ;", "predictions": ["flush _ count + + ;"]}, {"before_ctx": " ", "before_line": " this . log _ output = log _ output ; this . parameters = new dictionary < string , string > ( ) ; this . log _ level = log _ level . info ; this . throw _ exceptions = false ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "log _ output = log _ output ; parameters = new dictionary < string , string > ( ) ; log _ level = log _ level . info ; throw _ exceptions = false ;", "predictions": ["log _ output = log _ output ; parameters = new dictionary new <-> </@> > <@> from this . = this . = this . </%> this . </%> this . </%> this . <-> this . throw . string this this _ location & settings . location <%> false &"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . log ( log _ level . trace , message , arguments ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "log ( log _ level . trace , message , arguments ) ;", "predictions": ["log ( log _ level . trace , message , log </@> ("]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . log ( log _ level . debug , message , arguments ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "log ( log _ level . debug , message , arguments ) ;", "predictions": ["log ( log _ level . debug , message , method ; ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . log ( log _ level . info , message , arguments ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "log ( log _ level . info , message , arguments ) ;", "predictions": ["log ( log _ level . info , message , arguments ) <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . log ( log _ level . warn , message , arguments ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "log ( log _ level . warn , message , arguments ) ;", "predictions": ["log ( log _ level . warn , message , </@> null ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . log ( log _ level . error , message , arguments ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "log ( log _ level . error , message , arguments ) ;", "predictions": ["log ( log _ level . error , message , arguments ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . log _ output ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( log _ output ! = null )", "predictions": ["if ( log _ output ! = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . log _ output . close ( ) ; this . log _ output = null ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "log _ output . close ( ) ; log _ output = null ;", "predictions": ["log _ output . close ( ) ; log _ ) arguments ,"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " foreach ( var kvp in this . parameters ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "foreach ( var kvp in parameters )", "predictions": ["foreach ( var kvp in parameters )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( log _ level > = this . log _ level ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( log _ level > = log _ level )", "predictions": ["if ( log _ level > = log _ level ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ; using internal ;", "predictions": ["using n _ log _ common ; using n _ <%> . <-> _ <%> ."]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " get { return this . name _ to _ method _ info ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return name _ to _ method _ info ; }", "predictions": ["get { return name _ to _ method _ info ) )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . register _ type ( t , prefix ) ; ", "after_ctx": " ", "after_line": "register _ type ( t , prefix ) ;", "predictions": ["register _ type ( t , prefix <-> name name _ ) ( ) ;"]}, {"before_ctx": " ", "before_line": " this . register _ definition ( item _ name _ prefix + attr . name , mi ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "register _ definition ( item _ name _ prefix + attr . name , mi ) ;", "predictions": ["register _ definition ( item _ n this this ( <@> . <%> ( mi _ <%> ) mi ( ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . try _ create _ instance ( name , out result ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( try _ create _ instance ( name , out result ) )", "predictions": ["if ( try _ create _ instance ( name </@> out </@> out ) )"]}, {"before_ctx": " ", "before_line": " this . buffer = new log _ event _ info _ buffer ( this . buffer _ size , false , 0 ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "buffer = new log _ event _ info _ buffer ( buffer _ size , false , 0 ) ;", "predictions": ["buffer = new log _ event _ info _ buffer ( <-> <%> { target </%> ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ timer = new timer ( this . flush _ callback , null , timeout . infinite , timeout . infinite ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "flush _ timer = new timer ( flush _ callback , null , timeout . infinite , timeout . infinite ) ;", "predictions": ["flush _ timer = new timer ( flush _ callback , null , timeout . infinite , timeout . infinite ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var current _ timer = this . flush _ timer ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var current _ timer = flush _ timer ;", "predictions": ["var current _ timer = flush _ timer ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ timer = null ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "flush _ timer = null ;", "predictions": ["flush _ timer = null ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . lock _ object ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "lock ( lock _ object )", "predictions": ["lock ( lock _ object )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . flush _ timeout > 0 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( flush _ timeout > 0 )", "predictions": ["if ( flush _ timeout > 0 )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . sliding _ timeout | | count = = 1 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( sliding _ timeout | | count = = 1 )", "predictions": ["if ( sliding _ timeout | ( to _ name </@> ( <@> lock lock <@> _ _ = ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ timer . change ( this . flush _ timeout , - 1 ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "flush _ timer . change ( flush _ timeout , - 1 ) ;", "predictions": ["flush _ timer . change ( flush _ timeout lock - null = - ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . lock _ object ) { if ( this . flush _ timer = = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "lock ( lock _ object ) { if ( flush _ timer = = null )", "predictions": ["lock ( lock _ object ) { if ( flush </@> timer ; ; null </@> target _ _ )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . error ( exception , STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . error ( exception , STR , name ) ;", "predictions": ["internal _ logger . error ( exception name STR _ { { { { { { name 0 </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . wrapped _ target = = null ) { internal _ logger . error ( STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( wrapped _ target = = null ) { internal _ logger . error ( STR , name ) ;", "predictions": ["if ( wrapped _ target = = null ) { internal _ logger . error ( STR , name ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . lock _ object ) { async _ log _ event _ info [ ] log _ events = this . buffer . get _ events _ and _ clear ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( lock _ object ) { async _ log _ event _ info [ ] log _ events = buffer . get _ events _ and _ clear ( ) ;", "predictions": ["lock ( lock _ object ) { async _ log _ event _ info [ ] log _ events = buffer . get _ events _ and _ clear ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . trace ( STR , this . name , log _ events . length , reason ) ; this . wrapped _ target . write _ async _ log _ events ( log _ events ) ; ", "after_ctx": " ", "after_line": "internal _ logger . trace ( STR , name , log _ events . length , reason ) ; wrapped _ target . write _ async _ log _ events ( log _ events ) ;", "predictions": ["internal _ logger . trace ( STR , name , log _ events . length , reason ) ; wrapped _ target . write _ async _ log _ events ( log _ events ) ;"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . domain = STR ; this . log _ on _ type = security _ log _ on _ type . interactive ; this . log _ on _ provider = log _ on _ provider _ type . default ; this . impersonation _ level = security _ impersonation _ level . impersonation ; this . wrapped _ target = wrapped _ target ; ", "after_ctx": " ", "after_line": "domain = STR ; log _ on _ type = security _ log _ on _ type . interactive ; log _ on _ provider = log _ on _ provider _ type . default ; impersonation _ level = security _ impersonation _ level . impersonation ; wrapped _ target = wrapped _ target ;", "predictions": ["domain = STR ; log _ on _ type = security _ log _ on _ type . interactive ; log _ on _ provider = log _ on _ provider _ type . default ; impersonation _ level = security _ impersonation _ level . impersonation ; wrapped _ target = wrapped _ target ;"]}, {"before_ctx": " ", "before_line": " if ( ! this . revert _ to _ self ) { this . new _ identity = this . create _ windows _ identity ( out this . duplicate _ token _ handle ) ; } using ( this . do _ impersonate ( ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! revert _ to _ self ) { new _ identity = create _ windows _ identity ( out duplicate _ token _ handle ) ; } using ( do _ impersonate ( ) )", "predictions": ["if ( ! revert _ to _ self ) { new _ identity = create _ windows _ identity ( out duplicate _ token _ handle ) ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " using ( this . do _ impersonate ( ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using ( do _ impersonate ( ) )", "predictions": ["using ( do _ impersonate ( ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " using ( this . do _ impersonate ( ) ) { this . wrapped _ target . write _ async _ log _ event ( log _ event ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using ( do _ impersonate ( ) ) { wrapped _ target . write _ async _ log _ event ( log _ event ) ;", "predictions": ["using ( do _ impersonate ( ) ) { wrapped _ target . write _ async _ log _ event ( log _ event ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " using ( this . do _ impersonate ( ) ) { this . wrapped _ target . write _ async _ log _ events ( log _ events ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using ( do _ impersonate ( ) ) { wrapped _ target . write _ async _ log _ events ( log _ events ) ;", "predictions": ["using ( do _ impersonate ( ) ) { wrapped this this . wrapped this . write this ; this . write this . null this , timeout this . if ! handle ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " using ( this . do _ impersonate ( ) ) { this . wrapped _ target . flush ( async _ continuation ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using ( do _ impersonate ( ) ) { wrapped _ target . flush ( async _ continuation ) ;", "predictions": ["using ( do _ impersonate ( ) ) { wrapped , false . = _ </@> buffer ( ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . revert _ to _ self ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( revert _ to _ self )", "predictions": ["if ( revert _ to _ _ )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . user _ name , this . domain , this . password , ( int ) this . log _ on _ type , ( int ) this . log _ on _ provider , ", "after_ctx": " <%> <-> this . </%>", "after_line": "user _ name , domain , password , ( int ) log _ on _ type , ( int ) log _ on _ provider ,", "predictions": ["user _ name , domain , password , ( int ) log _ on _ type , ( int ) log _ on _ provider ,"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( ! native _ methods . duplicate _ token ( logon _ handle , ( int ) this . impersonation _ level , out handle ) ) ", "after_ctx": " ", "after_line": "if ( ! native _ methods . duplicate _ token ( logon _ handle , ( int ) impersonation _ level , out handle ) )", "predictions": ["if ( ! duplicate _ token ( logon _ handle , ( int ) impersonation _ level , out handle ) )"]}, {"before_ctx": " ", "before_line": " this . wic = windows _ impersonation _ context ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "wic = windows _ impersonation _ context ;", "predictions": ["wic = windows _ impersonation _ _ <%>"]}, {"before_ctx": " ", "before_line": " layout . initialize ( this . logging _ configuration ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "layout . initialize ( logging _ configuration ) ;", "predictions": ["layout . initialize ( logging _ </%> <-> <-> ( name <@> ) _ name ) ("]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ internal ; using n _ log _ config ; ", "after_ctx": " <%> <-> n _ log _ </%>", "after_line": "using common ; using internal ; using config ;", "predictions": ["using n _ log ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " using n _ log _ layouts ; ", "after_ctx": " ", "after_line": "using layouts ;", "predictions": ["using n _ log ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config this name name"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . trim _ white _ space = true ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "trim _ white _ space = true ;", "predictions": ["trim _ white _ space = true ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . trim _ white _ space ) ", "after_ctx": " ", "after_line": "if ( trim _ white _ space )", "predictions": ["if ( trim _ white _ space </%>"]}, {"before_ctx": " ", "before_line": " this . separator = STR ; this . bottom _ frames = - 1 ; this . top _ frames = - 1 ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "separator = STR ; bottom _ frames = - 1 ; top _ frames = - 1 ;", "predictions": ["separator = STR ; bottom _ frames = - - <%> <%> <%> top ( </%> _ <-> </%> this ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . top _ frames ! = - 1 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( top _ frames ! = - 1 )", "predictions": ["if ( top _ frames ! = - 1 </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " end _ pos = math . min ( this . top _ frames , messages . length ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "end _ pos = math . min ( top _ frames , messages . length ) ;", "predictions": ["end _ pos = math . min ( top _ frames <@> native _ get ) messages _ length </%> ) ) ) ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " else if ( this . bottom _ frames ! = - 1 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "else if ( bottom _ frames ! = - 1 )", "predictions": ["else if ( bottom _ frames ! = - 1 )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " start _ pos = messages . length - math . min ( this . bottom _ frames , messages . length ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "start _ pos = messages . length - math . min ( bottom _ frames , messages . length ) ;", "predictions": ["start _ pos = messages . length - math . min ( type this type _ type ) = = ; ) ( + fail + + . ) 0 0 0 0 0 0 0 0 0 0 0 0 ) . min name ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " current _ separator = this . separator ; ", "after_ctx": " ", "after_line": "current _ separator = separator ;", "predictions": ["current _ separator = separator ;"]}, {"before_ctx": " ", "before_line": " assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; if ( this . fail _ counter > 0 ) { this . fail _ counter - - ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ( fail _ counter > 0 ) { fail _ counter - - ;", "predictions": ["assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ; parameter <%> name ) { = parameter <%> name - ) { parameter <%> - - <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ count + + ; ", "after_ctx": " ", "after_line": "flush _ count + + ;", "predictions": ["flush _ count + + ;"]}, {"before_ctx": " ", "before_line": " this . events = new list < log _ event _ info > ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "events = new list < log _ event _ info > ( ) ;", "predictions": ["events = new list < log _ event _ info user <-> </%> ! </%> _"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . assert _ expected _ user ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert _ expected _ user ( ) ;", "predictions": ["assert _ expected _ user ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . assert _ expected _ user ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert _ expected _ user ( ) ;", "predictions": ["assert _ expected _ user ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . assert _ expected _ user ( ) ; this . events . add ( log _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert _ expected _ user ( ) ; events . add ( log _ event ) ;", "predictions": ["assert _ expected _ user ( ) ; events . add length log _ </@> n ( n ) ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . assert _ expected _ user ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert _ expected _ user ( ) ;", "predictions": ["assert _ expected _ user ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . assert _ expected _ user ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert _ expected _ user ( ) ;", "predictions": ["assert _ expected _ user ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . expected _ user ! = null ) ", "after_ctx": " ", "after_line": "if ( expected _ user ! = null )", "predictions": ["if ( expected _ user ! = null )"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ; using internal ;", "predictions": ["using n _ log _ internal ; using n . ) ( ) ( ) ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . separator = STR ; this . top _ frames = NUM ; this . format = stack _ trace _ format . flat ; ", "after_ctx": " ", "after_line": "separator = STR ; top _ frames = NUM ; format = stack _ trace _ format . flat ;", "predictions": ["separator = STR ; top _ frames = NUM ; format <-> <-> . trace <%>"]}, {"before_ctx": " ", "before_line": " int starting _ frame = log _ event . user _ stack _ frame _ number + this . top _ frames - 1 ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "int starting _ frame = log _ event . user _ stack _ frame _ number + top _ frames - 1 ;", "predictions": ["int starting _ frame = log _ event . user . user </%> top . get _ stack ; ; _ expected _ length ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " switch ( this . format ) ", "after_ctx": " ", "after_line": "switch ( format )", "predictions": ["switch ( format )"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ; using layouts ;", "predictions": ["using n _ log _ layouts ; using n _ ( ) ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . parameter _ type = typeof ( string ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parameter _ type = typeof ( string ) ;", "predictions": ["parameter _ type = typeof ( string ) ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> this . </%> ", "before_line": " this . parameter _ type = typeof ( string ) ; this . layout = layout ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parameter _ type = typeof ( string ) ; layout = layout ;", "predictions": ["parameter _ type = typeof ( string ) ; layout = layout ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . parameter _ type = typeof ( string ) ; this . name = parameter _ name ; this . layout = layout ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parameter _ type = typeof ( string ) ; name = parameter _ name ; layout = layout ;", "predictions": ["parameter _ type = typeof ( string ) ; name = parameter _ name ; layout = layout ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . parameter _ type = type ; this . name = name ; this . layout = layout ; ", "after_ctx": " ", "after_line": "parameter _ type = type ; name = name ; layout = layout ;", "predictions": ["parameter _ type = type ; name = name ; layout <-> </%> <%>"]}, {"before_ctx": " ", "before_line": " this . current _ process _ id = native _ methods . get _ current _ process _ id ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "current _ process _ id = native _ methods . get _ current _ process _ id ( ) ;", "predictions": ["current _ process _ id = native _ methods . get . = . name _ </%> </@> <@> add - ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . current _ process _ name = sb . to _ string ( ) ; this . current _ process _ base _ name = path . get _ file _ name _ without _ extension ( this . current _ process _ name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "current _ process _ name = sb . to _ string ( ) ; current _ process _ base _ name = path . get _ file _ name _ without _ extension ( current _ process _ name ) ;", "predictions": ["current _ process _ name = sb . to _ string ( ) ; current _ process _ base _ name = path . get _ file _ name _ without _ extension ( current _ process _ name ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . current _ process _ id ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return current _ process _ id ; }", "predictions": ["get { return current _ process _ id ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . current _ process _ name ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return current _ process _ name ; }", "predictions": ["get { return current _ process _ name ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . current _ process _ base _ name ; } ", "after_ctx": " ", "after_line": "get { return current _ process _ base _ name ; }", "predictions": ["get { return current _ process _ base this this . case encoding } } match"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . background _ color = console _ output _ color . no _ change ; this . foreground _ color = console _ output _ color . no _ change ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "background _ color = console _ output _ color . no _ change ; foreground _ color = console _ output _ color . no _ change ;", "predictions": ["background _ color = console _ output _ color . no _ change ; foreground _ color = console _ output _ color . no _ change ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . text = text ; this . foreground _ color = foreground _ color ; this . background _ color = background _ color ; ", "after_ctx": " ", "after_line": "text = text ; foreground _ color = foreground _ color ; background _ color = background _ color ;", "predictions": ["text = text ; foreground _ color = foreground _ color ; current <%> <-> . background json log n"]}, {"before_ctx": " ", "before_line": " if ( this . compiled _ regex = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( compiled _ regex = = null )", "predictions": ["if ( compiled _ regex = = null <->"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . compiled _ regex = new regex ( regexpression , regex _ options ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "compiled _ regex = new regex ( regexpression , regex _ options ) ;", "predictions": ["compiled _ regex = new regex ( regexpression ; this n encoding reader reader </@> empty ; ; <%> options ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . compiled _ regex ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return compiled _ regex ;", "predictions": ["return compiled _ regex ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . ignore _ case ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ignore _ case )", "predictions": ["if ( ignore _ case )"]}, {"before_ctx": " ", "before_line": " result . append ( ( char ) ( ( int ) this . foreground _ color + 'A' ) ) ; result . append ( ( char ) ( ( int ) this . background _ color + 'A' ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "result . append ( ( char ) ( ( int ) foreground _ color + 'A' ) ) ; result . append ( ( char ) ( ( int ) background _ color + 'A' ) ) ;", "predictions": ["result . append ( ( char ) ( ( int ) foreground _ color + </%> this this <%> this <%> ) this ( </@> this background ) . n <%> < < generic . ) <%> < ) . ) <->"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var regex = this . compiled _ regex ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var regex = compiled _ regex ;", "predictions": ["var regex = compiled _ regex ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return regex . replace ( message , this . match _ evaluator ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return regex . replace ( message , match _ evaluator ) ;", "predictions": ["return regex . replace ( message , match _ if system system _ <@> _"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return system . text . regular _ expressions . regex . replace ( message , expression , this . match _ evaluator , regex _ options ) ; ", "after_ctx": " ", "after_line": "return system . text . regular _ expressions . regex . replace ( message , expression , match _ evaluator , regex _ options ) ;", "predictions": ["return regex _ expressions . regex . replace ( message , expression <%> string <-> this this . match <%> options <%> ( file <%> all <%> this ( match this color this _ = <-> time time . ; _ system <-> ( = replace _ options . last this file this . last this _ </@> _ </@> file this file this file this . last this . regular this . last this file this . last this _ </@> _ </@> file this file this . last this . regular this file this file this . last"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . format = STR ; this . culture = culture _ info . invariant _ culture ; ", "after_ctx": " ", "after_line": "format = STR ; culture = culture _ info . invariant _ culture ;", "predictions": ["format = STR ; culture = culture _ = this this this , _ _ encoding <%> . n . _ <->"]}, {"before_ctx": " ", "before_line": " private key _ value _ pair < date _ time , string > cached _ utc _ time = new system . collections . generic . key _ value _ pair < date _ time , string > ( ) ; ", "after_ctx": " <%> <-> system . collections . generic . </%> <%> <-> this . </%>", "after_line": "private key _ value _ pair < date _ time , string > cached _ utc _ time = new key _ value _ pair < date _ time , string > ( ) ;", "predictions": ["private key _ value _ pair < date _ time , string > cached _ utc _ time = new key _ value _ pair < date _ time <%> <@> ;"]}, {"before_ctx": "<%> <-> system . collections . generic . </%> ", "before_line": " private key _ value _ pair < date _ time , string > cached _ local _ time = new system . collections . generic . key _ value _ pair < date _ time , string > ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "private key _ value _ pair < date _ time , string > cached _ local _ time = new key _ value _ pair < date _ time , string > ( ) ;", "predictions": ["private key _ value _ pair < date _ time , string > cached _ local _ time = new key _ value _ pair < date _ time , string > ( ) ; ) ; ) ) ) ) ) ) log log ( log . <%> <-> log ( log . <%> <-> ( <@> ( = ( <@> ( <@> ( <@> ( <@> ( <@> ( <@> . <%> ( <@> ( = . ) ( <@> ( = . <%> <-> ( = ( = . <%> <-> ( log . <%> <-> log"]}, {"before_ctx": "<%> <-> system . collections . generic . </%> <%> <-> system . collections . generic . </%> ", "before_line": " if ( this . universal _ time ) ", "after_ctx": " ", "after_line": "if ( universal _ time )", "predictions": ["if ( universal _ time )"]}, {"before_ctx": " ", "before_line": " this . text = text ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "text = text ;", "predictions": ["text = text ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " builder . append ( this . text ) ; ", "after_ctx": " ", "after_line": "builder . append ( text ) ;", "predictions": ["builder . append ( text ) ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using common ; using config ; using internal ; using layouts ;", "predictions": ["using n _ log _ common ; using n _ log _ layouts ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . encoding = encoding . default ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "encoding = encoding . default ;", "predictions": ["encoding = encoding . default ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> this . </%> ", "before_line": " this . last _ file _ name = string . empty ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "last _ file _ name = string . empty ;", "predictions": ["last _ file _ name = string . empty ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " string file _ name = this . file _ name . render ( log _ event ) ; if ( file _ name ! = this . last _ file _ name ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "string file _ name = file _ name . render ( log _ event ) ; if ( file _ name ! = last _ file _ name )", "predictions": ["string file _ name = file _ name . render ( log _ event ) ; if ( file _ name ! = last _ file _ name )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . current _ file _ contents = this . read _ file _ contents ( file _ name ) ; this . last _ file _ name = file _ name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "current _ file _ contents = read _ file _ contents ( file _ name ) ; last _ file _ name = file _ name ;", "predictions": ["current _ file _ contents = read _ file _ contents ( file _ name ) ; last _ file _ name = file _ name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " builder . append ( this . current _ file _ contents ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "builder . append ( current _ file _ contents ) ;", "predictions": ["builder . append ( current _ file _ contents ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return file . read _ all _ text ( file _ name , this . encoding ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return file . read _ all _ text ( file _ name , encoding ) ;", "predictions": ["return file . read _ all _ text ( file _ name , encoding ) color"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " using ( var reader = new stream _ reader ( file _ name , this . encoding ) ) ", "after_ctx": " ", "after_line": "using ( var reader = new stream _ reader ( file _ name , encoding ) )", "predictions": ["using ( var reader = new stream _ reader ( file _ name , <@> ; config <%> <%> <%> <%> file ; using ;"]}, {"before_ctx": " ", "before_line": " internal class json _ converter _ legacy : i _ json _ converter , n _ log . targets . i _ json _ serializer ", "after_ctx": " <%> <-> n _ log . targets . </%> <%> <-> n _ log . targets . </%>", "after_line": "internal class json _ converter _ legacy : i _ json _ converter , i _ json _ serializer", "predictions": ["internal class json _ converter _ legacy : i _ json _ converter , i . <%> . text"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . connection _ strings _ settings = configuration _ manager . connection _ strings ;  this . command _ type = command _ type . text ; this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( database _ target ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "connection _ strings _ settings = configuration _ manager . connection _ strings ;  command _ type = command _ type . text ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( database _ target ) ;", "predictions": ["connection _ strings _ settings = configuration _ manager . connection _ strings ; command _ type = command _ type . text ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( database _ target ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " this . run _ install _ commands ( installation _ context , this . install _ ddl _ commands ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "run _ install _ commands ( installation _ context , install _ ddl _ commands ) ;", "predictions": ["run _ install _ commands ( installation . create </@> </@> _ ddl _ log <@> ["]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . run _ install _ commands ( installation _ context , this . uninstall _ ddl _ commands ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "run _ install _ commands ( installation _ context , uninstall _ ddl _ commands ) ;", "predictions": ["run _ install _ commands ( installation this this . var this . true this factory = null <@> ; this . parameters ) </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . provider _ factory ! = null ) { connection = this . provider _ factory . create _ connection ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( provider _ factory ! = null ) { connection = provider _ factory . create _ connection ( ) ;", "predictions": ["if ( provider _ factory ! = null </@> { <@> database _ base . get db ( ) </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " connection = ( i _ db _ connection ) activator . create _ instance ( this . connection _ type ) ; ", "after_ctx": " ", "after_line": "connection = ( i _ db _ connection ) activator . create _ instance ( connection _ type ) ;", "predictions": ["connection = ( i _ db _ ( c c c </%> . create _ true _ provider _ <%> _ null _ <%> , this . this </%> _ = </%> </%> _ or ) ! </%> <%> this . <%> this . <%> this _ _ _ _ _ type ) event"]}, {"before_ctx": " ", "before_line": " if ( ! string . is _ null _ or _ empty ( this . connection _ string _ name ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ! string . is _ null _ or _ empty ( connection _ string _ name ) )", "predictions": ["if ( ! string . is _ null _ or _ empty ( connection _ ( _ name factory factory <@> factory <@> _ ) _ db ( ( ; ) ( ; ) _ = ) _ user base _ user base )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var cs = this . connection _ strings _ settings [ this . connection _ string _ name ] ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var cs = connection _ strings _ settings [ connection _ string _ name ] ;", "predictions": ["var cs = connection _ strings _ db </@> type _ connection _ STR <@> </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " throw new n _ log _ configuration _ exception ( STR + this . connection _ string _ name + STR ) ; } this . connection _ string = simple _ layout . escape ( cs . connection _ string ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "throw new n _ log _ configuration _ exception ( STR + connection _ string _ name + STR ) ; } connection _ string = simple _ layout . escape ( cs . connection _ string ) ;", "predictions": ["throw new n _ log _ configuration _ exception ( STR + connection _ string _ name + STR ) ; } connection _ string = simple <%> user <%> ( name . base <%> <%> event event event event event event event event event event event base event base . base <%> event event event event event event event base event base . base <%> ( name event base . base <%> ( event . base event event event event <%> event event event event <%> ( event event base . base <%> ( event event base event event"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . provider _ factory = db _ provider _ factories . get _ factory ( cs . provider _ name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "provider _ factory = db _ provider _ factories . get _ factory ( cs . provider _ name ) ;", "predictions": ["provider _ factory = db _ provider _ factories . get _ factory ( cs . base _ name event log event base _ name event ) </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( invariantname = = this . db _ provider ) { this . provider _ factory = db _ provider _ factories . get _ factory ( this . db _ provider ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( invariantname = = db _ provider ) { provider _ factory = db _ provider _ factories . get _ factory ( db _ provider ) ;", "predictions": ["if ( invariantname = = db _ provider ) { provider <%> = base <%> _ <%> _ ; . </@> _ log ( _ _ <-> factory this . _ this factory ( _ </%> ( _ </%> <%> ( _ </%> ( _ <%> ( _ <%> ( _ <%> ( _ _ </%> _ base base <%> <%> </%> _ </%> _ </%> _ null _ </%> _ base base base <%> <%> _ </%> _ </%> _ </%> _ base _ base _ base _ base _ base _ base _ base _ base _ base"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . set _ connection _ type ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "set _ connection _ type ( ) ;", "predictions": ["set _ connection _ type ( ) ( ) ("]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . connection _ type = assembly . get _ type ( STR , true , true ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "connection _ type = assembly . get _ type ( STR , true , true ) ;", "predictions": ["connection _ type = assembly . get _ type ( STR db ) db </%> = ( <@> <@> ( ( if get connection ( ) </@> ) </@> </@> ) <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . connection _ type = system _ data _ assembly . get _ type ( STR , true ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "connection _ type = system _ data _ assembly . get _ type ( STR , true ) ;", "predictions": ["connection _ type = system _ data _ <@> . null name </@> STR true true type ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . connection _ type = type . get _ type ( this . db _ provider , true ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "connection _ type = type . get _ type ( db _ provider , true ) ;", "predictions": ["connection _ type = type . get _ type ( assembly _ if connection null </@> true </@> base </@> true type )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . close _ connection ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "close _ connection ( ) ;", "predictions": ["close _ connection ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . write _ event _ to _ database ( log _ event ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write _ event _ to _ database ( log _ event ) ;", "predictions": ["write _ event _ to _ database ; write . ( write </%> ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . close _ connection ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "close _ connection ( ) ;", "predictions": ["close _ connection ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ! this . keep _ connection ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! keep _ connection )", "predictions": ["if ( ! keep _ connection )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . close _ connection ( ) ; ", "after_ctx": " ", "after_line": "close _ connection ( ) ;", "predictions": ["close _ connection ( ) ;"]}, {"before_ctx": " ", "before_line": " var buckets = log _ events . bucket _ sort ( c = > this . build _ connection _ string ( c . log _ event ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var buckets = log _ events . bucket _ sort ( c = > build _ connection _ string ( c . log _ event ) ) ;", "predictions": ["var buckets = log _ events . bucket . sort this _ _ var </%> STR data ) = if . ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . write _ event _ to _ database ( ev . log _ event ) ; ", "after_ctx": " ", "after_line": "write _ event _ to _ database ( ev . log _ event ) ;", "predictions": ["write _ event _ to _ database </%> ev this this this . context _ ( c </%> _ ] _ = _ <%> ) _"]}, {"before_ctx": " ", "before_line": " if ( ! this . keep _ connection ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! keep _ connection )", "predictions": ["if ( ! keep _ connection )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . close _ connection ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "close _ connection ( ) ;", "predictions": ["close _ connection ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " foreach ( database _ parameter _ info par in this . parameters ) ", "after_ctx": " ", "after_line": "foreach ( database _ parameter _ info par in parameters )", "predictions": ["foreach ( database _ parameter _ info par in parameters )"]}, {"before_ctx": " ", "before_line": " if ( this . connection _ string ! = null ) { return base . render _ log _ event ( this . connection _ string , log _ event ) ; ", "after_ctx": " <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( connection _ string ! = null ) { return render _ log _ event ( connection _ string , log _ event ) ;", "predictions": ["if ( connection _ string ! = null ) { return base . render _ <@> this </@> ( ! ! this if <@> this </@> <%> log ( , , event <%> log ( , <%> log ( , ( event <%> log ( , <%> log ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> ", "before_line": " sb . append ( base . render _ log _ event ( this . db _ host , log _ event ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "sb . append ( render _ log _ event ( db _ host , log _ event ) ) ;", "predictions": ["sb . append ( base . render _ log _ event ( db _ host <@> </@> base ) ( </@> base ( ( user base host </%> + ( configuration ) ( ( </%> ) ( + </%> ) ( ( configuration </%> host ; + </%> ) ( + </%> ) ( ( + ( ( ( render </%> + </%> </%> ) configuration ( configuration ( + </%> ) ( + </%> ) ( ( configuration </%> host ( + ( configuration </%> host ; + </%> ) ( ( </%> ) ( + </%> ) ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> ", "before_line": " if ( this . db _ user _ name = = null ) ", "after_ctx": " <%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "if ( db _ user _ name = = null )", "predictions": ["if ( db _ user _ name = = null )"]}, {"before_ctx": "<%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " sb . append ( base . render _ log _ event ( this . db _ user _ name , log _ event ) ) ; ", "after_ctx": " <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "sb . append ( render _ log _ event ( db _ user _ name , log _ event ) ) ;", "predictions": ["sb . append ( base . render _ log _ event ( db _ user _ name , log _ event ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> ", "before_line": " sb . append ( base . render _ log _ event ( this . db _ password , log _ event ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "sb . append ( render _ log _ event ( db _ password , log _ event ) ) ;", "predictions": ["sb . append ( base . render _ log _ event ( db _ password , log _ event ) ) ;"]}, {"before_ctx": "<%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> ", "before_line": " if ( this . db _ database ! = null ) ", "after_ctx": " <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( db _ database ! = null )", "predictions": ["if ( db _ database ! = null )"]}, {"before_ctx": "<%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " sb . append ( base . render _ log _ event ( this . db _ database , log _ event ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "sb . append ( render _ log _ event ( db _ database , log _ event ) ) ;", "predictions": ["sb . append ( base . render _ log _ event ( db _ database <@> </@> _ ; ) ) = </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> ", "before_line": " if ( this . active _ connection ! = null ) { if ( this . active _ connection _ string ! = connection _ string ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( active _ connection ! = null ) { if ( active _ connection _ string ! = connection _ string )", "predictions": ["if ( active _ connection ! = null ) { if ( active _ connection _ </@> event )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . close _ connection ( ) ; } } if ( this . active _ connection ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "close _ connection ( ) ; } } if ( active _ connection ! = null )", "predictions": ["close _ connection ( ) ; } } if ( active _ connection ! = i </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . active _ connection = this . open _ connection ( connection _ string ) ; this . active _ connection _ string = connection _ string ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "active _ connection = open _ connection ( connection _ string ) ; active _ connection _ string = connection _ string ;", "predictions": ["active _ connection = open _ connection ( connection _ string ) ; active _ connection _ string = connection _ string ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . active _ connection ! = null ) { this . active _ connection . close ( ) ; this . active _ connection . dispose ( ) ; this . active _ connection = null ; this . active _ connection _ string = null ; ", "after_ctx": " ", "after_line": "if ( active _ connection ! = null ) { active _ connection . close ( ) ; active _ connection . dispose ( ) ; active _ connection = null ; active _ connection _ string = null ;", "predictions": ["if ( active _ connection ! = null ) { active _ connection . close ( ) ; active _ connection . dispose ( ) ; active _ connection = null ; active _ connection _ string = null ;"]}, {"before_ctx": " ", "before_line": " cs = base . render _ log _ event ( command _ info . connection _ string , log _ event ) ; } else if ( this . install _ connection _ string ! = null ) ", "after_ctx": " <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "cs = render _ log _ event ( command _ info . connection _ string , log _ event ) ; } else if ( install _ connection _ string ! = null )", "predictions": ["cs = render _ log _ event ( command _ info . connection _ string , log _ event ) ; } else if ( install this this . install this this . install this ;"]}, {"before_ctx": "<%> <-> base . </%> <%> <-> this . </%> ", "before_line": " cs = base . render _ log _ event ( this . install _ connection _ string , log _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "cs = render _ log _ event ( install _ connection _ string , log _ event ) ;", "predictions": ["cs = base . render _ log _ event ( install _ connection _ string </@> ( ( install _ connection _ string </@> ( ) <@> ) </@> </@> </@> </@> </@> ) )"]}, {"before_ctx": "<%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> ", "before_line": " cs = this . build _ connection _ string ( log _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%>", "after_line": "cs = build _ connection _ string ( log _ event ) ;", "predictions": ["cs = build _ connection _ string ( log _ event ) ;"]}, {"before_ctx": "<%> <-> base . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . connection _ type = = null ) { this . set _ connection _ type ( ) ; } this . ensure _ connection _ open ( cs ) ; using ( var command = this . active _ connection . create _ command ( ) ) ", "after_ctx": " <%> <-> base . </%>", "after_line": "if ( connection _ type = = null ) { set _ connection _ type ( ) ; } ensure _ connection _ open ( cs ) ; using ( var command = active _ connection . create _ command ( ) )", "predictions": ["if ( connection _ type = = null ) { set _ connection _ type ( ) ; } ensure _ connection _ open ( cs ) ; using ( var command = active _ connection . create _ command ( ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " command . command _ text = base . render _ log _ event ( command _ info . text , log _ event ) ; ", "after_ctx": " ", "after_line": "command . command _ text = render _ log _ event ( command _ info . text , log _ event ) ;", "predictions": ["command . command _ text = render _ log _ event ( command _ info . file </@> ;"]}, {"before_ctx": " ", "before_line": " this . mutex = create _ sharable _ mutex ( STR ) ; this . file _ stream = create _ file _ stream ( true ) ; this . file _ characteristics _ helper = file _ characteristics _ helper . create _ helper ( parameters . force _ managed ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "mutex = create _ sharable _ mutex ( STR ) ; file _ stream = create _ file _ stream ( true ) ; file _ characteristics _ helper = file _ characteristics _ helper . create _ helper ( parameters . force _ managed ) ;", "predictions": ["mutex = create _ sharable _ mutex ( STR ) ; file _ stream = create _ file _ stream ( true ) ; file _ characteristics _ helper = file _ characteristics _ helper . create _ helper ( parameters . force _ managed ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . mutex = = null | | this . file _ stream = = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( mutex = = null | | file _ stream = = null )", "predictions": ["if ( mutex = = null | | file _ stream = = null )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . mutex ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( mutex ! = null )", "predictions": ["if ( mutex ! = null <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . mutex = null ; } } if ( this . file _ stream ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "mutex = null ; } } if ( file _ stream ! = null )", "predictions": ["mutex = null ; } } if ( file _ stream ! = null )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . file _ stream = null ; ", "after_ctx": " ", "after_line": "file _ stream = null ;", "predictions": ["file _ stream = null ;"]}, {"before_ctx": " ", "before_line": " get { return this . name ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return name ; }", "predictions": ["get { return name ; }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " get { return this . new _ line _ characters ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return new _ line _ characters ; }", "predictions": ["get { return new _ line _ characters ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; this . new _ line _ characters = new _ line _ characters ; ", "after_ctx": " ", "after_line": "name = name ; new _ line _ characters = new _ line _ characters ;", "predictions": ["name = name ; new _ line _ characters = new _ line _ characters file"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using common ; using internal ;", "predictions": ["using n _ log _ common ; using n _ log _ common ;"]}, {"before_ctx": " ", "before_line": " this . dispose ( true ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "dispose ( true ) ;", "predictions": ["dispose ( true ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . close ( ) ; ", "after_ctx": " ", "after_line": "close ( ) ;", "predictions": ["close ( ) ;"]}, {"before_ctx": " ", "before_line": " this . last _ write _ time _ utc = date _ time ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "last _ write _ time _ utc = date _ time ;", "predictions": ["last _ write _ time _ utc = date _ time ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . try _ create _ file _ stream ( allow _ file _ shared _ writing ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return try _ create _ file _ stream ( allow _ file _ shared _ writing ) ;", "predictions": ["return try _ create _ file _ stream ( allow _ file _ shared _ info log log log ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var directory _ name = path . get _ directory _ name ( this . file _ name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var directory _ name = path . get _ directory _ name ( file _ name ) ;", "predictions": ["var directory _ name = path . get _ directory _ name ( file _ null ) </@> </@> </@> <%> this ! } ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . try _ create _ file _ stream ( allow _ file _ shared _ writing ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return try _ create _ file _ stream ( allow _ file _ shared _ writing ) ;", "predictions": ["return try _ create _ file _ stream ( allow _ file _ shared _ writing ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " int actual _ delay = this . random . next ( current _ delay ) ; internal _ logger . warn ( STR , i , this . file _ name , actual _ delay ) ; ", "after_ctx": " ", "after_line": "int actual _ delay = random . next ( current _ delay ) ; internal _ logger . warn ( STR , i , file _ name , actual _ delay ) ;", "predictions": ["int actual _ delay = random . next ( current _ delay ) ; internal this this . warn ( <@> </%> i </%> </%> </%> db <%> name </%> , , ( db <%> name </%> <@> <%> ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . windows _ create _ file ( this . file _ name , allow _ file _ shared _ writing ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return windows _ create _ file ( file _ name , allow _ file _ shared _ writing ) ;", "predictions": ["return this . windows _ create _ file ( file _ name , allow _ </%> . shared . writing ) time time ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . file _ name , ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "file _ name ,", "predictions": ["file _ name ,"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " file _ info file _ info = new file _ info ( this . file _ name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "file _ info file _ info = new file _ info ( file _ name ) ;", "predictions": ["file _ info file _ info = new file _ info ( file _ name event event event event base event base event base event ! base base connection this . ( ) base connection this . ( )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " file . create ( this . file _ name ) . dispose ( ) ; this . creation _ time _ utc = date _ time . utc _ now ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "file . create ( file _ name ) . dispose ( ) ; creation _ time _ utc = date _ time . utc _ now ;", "predictions": ["file . create ( file _ name ) . dispose ( ) ; creation _ ! <%> = if this . active <%> <%> ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " file . set _ creation _ time _ utc ( this . file _ name , this . creation _ time _ utc ) ; ", "after_ctx": " ", "after_line": "file . set _ creation _ time _ utc ( file _ name , creation _ time _ utc ) ;", "predictions": ["file . set _ creation _ time _ utc ( file _ name , creation _ time _ utc </@> </@> </@> </@>"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ; using config ; using internal ;", "predictions": ["using n _ log _ common . expression ; using n _ log . internal this"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " var lra = this . get _ type ( ) . get _ custom _ attribute < layout _ renderer _ attribute > ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var lra = get _ type ( ) . get _ custom _ attribute < layout _ renderer _ attribute > ( ) ;", "predictions": ["var lra = get _ type ( ) . get _ custom _ attribute < layout _ renderer _ time <@> ( file . true data collection factory ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . get _ type ( ) . name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return get _ type ( ) . name ;", "predictions": ["return get _ type ( ) _ config <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . dispose ( true ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "dispose ( true ) ;", "predictions": ["dispose ( true ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " int initial _ length = this . max _ rendered _ length ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "int initial _ length = max _ rendered _ length ;", "predictions": ["int initial _ length = max </%> <@> ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . render _ append _ builder ( log _ event , builder ) ; if ( builder . length > this . max _ rendered _ length ) { this . max _ rendered _ length = builder . length ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "render _ append _ builder ( log _ event , builder ) ; if ( builder . length > max _ rendered _ length ) { max _ rendered _ length = builder . length ;", "predictions": ["render _ append _ builder ( log _ event , builder ) ; if ( builder . length > max _ rendered _ length ) { max _ rendered _ length STR ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . initialize ( configuration ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "initialize ( configuration ) ;", "predictions": ["initialize ( configuration ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . close ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "close ( ) ;", "predictions": ["close ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . logging _ configuration = = null ) this . logging _ configuration = configuration ; if ( ! this . is _ initialized ) { this . is _ initialized = true ; this . initialize _ layout _ renderer ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( logging _ configuration = = null ) logging _ configuration = configuration ; if ( ! is _ initialized ) { is _ initialized = true ; initialize _ layout _ renderer ( ) ;", "predictions": ["if ( logging _ configuration = = null ) logging _ configuration = configuration ; if ( ! is _ initialized ) { is _ initialized = true ; initialize _ layout _ renderer ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ initialized ) { this . logging _ configuration = null ; this . is _ initialized = false ; this . close _ layout _ renderer ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ initialized ) { logging _ configuration = null ; is _ initialized = false ; close _ layout _ renderer ( ) ;", "predictions": ["if ( is _ initialized ) { logging _ configuration = null ; is _ initialized = false ; close _ layout _ renderer ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( ! this . is _ initialized ) { this . is _ initialized = true ; this . initialize _ layout _ renderer ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! is _ initialized ) { is _ initialized = true ; initialize _ layout _ renderer ( ) ;", "predictions": ["if ( ! is _ initialized ) { is _ initialized = true ; initialize _ layout _ renderer ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . append ( builder , log _ event ) ; ", "after_ctx": " ", "after_line": "append ( builder , log _ event ) ;", "predictions": ["append ( builder , log _ type ) </%>"]}, {"before_ctx": " ", "before_line": " this . close ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "close ( ) ;", "predictions": ["close ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( culture = = null & & this . logging _ configuration ! = null ) { culture = this . logging _ configuration . default _ culture _ info ; ", "after_ctx": " ", "after_line": "if ( culture = = null & & logging _ configuration ! = null ) { culture = logging _ configuration . default _ culture _ info ;", "predictions": ["if ( culture = = null _ _ </%> </%> logging this ( </@> <@> this this . ; ( ( ( if <%> <-> this . { collection _ _ _ ( . default <%> <%> <%> ; ; this _ <%> empty . </%> type type type ( <-> this . ( default <%> <%> <%> </@> </@> </@> ) </@> ) is ) ) )"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ internal ; using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ; using internal ; using layouts ;", "predictions": ["using n _ log _ internal this this & culture . . culture . layouts"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . configuration _ item _ factory = configuration _ item _ factory ; this . tokenizer = new condition _ tokenizer ( string _ reader ) ; ", "after_ctx": " ", "after_line": "configuration _ item _ factory = configuration _ item _ factory ; tokenizer = new condition _ tokenizer ( string _ reader ) ;", "predictions": ["configuration _ item _ factory = configuration _ item _ factory ; tokenizer = new condition _ tokenizer ( string _ reader ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . tokenizer . get _ next _ token ( ) ; } this . tokenizer . expect ( condition _ token _ type . right _ paren ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "tokenizer . get _ next _ token ( ) ; } tokenizer . expect ( condition _ token _ type . right _ paren ) ;", "predictions": ["tokenizer . get _ next _ token ( ) ; } tokenizer . expect ( condition _ token _ type . right _ paren ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . tokenizer . token _ type = = condition _ token _ type . left _ paren ) { this . tokenizer . get _ next _ token ( ) ; condition _ method _ expression predicate _ expression = this . parse _ predicate ( keyword ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( tokenizer . token _ type = = condition _ token _ type . left _ paren ) { tokenizer . get _ next _ token ( ) ; condition _ method _ expression predicate _ expression = parse _ predicate ( keyword ) ;", "predictions": ["if ( tokenizer . token _ type = = condition _ token _ type . left _ paren ) { tokenizer . get _ next _ token ( ) ; condition . { . parse . parse ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . parse _ boolean _ expression ( ) ; ", "after_ctx": " ", "after_line": "return parse _ boolean _ expression ( ) ;", "predictions": ["return parse _ boolean _ expression ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ conditions ; using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using conditions ; using config ;", "predictions": ["using n _ log ; using <-> . log _ append this"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . exists = when _ exists _ expression ; this . filter = filter _ to _ apply ; ", "after_ctx": " ", "after_line": "exists = when _ exists _ expression ; filter = filter _ to _ apply ;", "predictions": ["exists = when _ exists _ internal log <-> _ to . </%> culture . </@> . ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ; using config ; using internal ;", "predictions": ["using n _ log _ common this this ( <-> . <%> _ <@> ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . counter _ type = performance _ counter _ type . number _ of _ items ; this . increment _ value = new simple _ layout ( STR ) ; this . instance _ name = string . empty ; this . counter _ help = string . empty ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "counter _ type = performance _ counter _ type . number _ of _ items ; increment _ value = new simple _ layout ( STR ) ; instance _ name = string . empty ; counter _ help = string . empty ;", "predictions": ["counter _ type = performance _ counter _ type . number _ of _ items ; increment _ value = new simple _ layout ( STR ) ; instance _ name ) ) . <%> _ name ( ; _ if </%> <-> this this this _ = <-> <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " counter _ creation _ data _ collection ccds = get _ counter _ creation _ data _ collection ( counters _ by _ category [ this . category _ name ] , out category _ type ) ; ", "after_ctx": " ", "after_line": "counter _ creation _ data _ collection ccds = get _ counter _ creation _ data _ collection ( counters _ by _ category [ category _ name ] , out category _ type ) ;", "predictions": ["counter _ creation _ data _ collection ccds = get _ counter _ creation _ data _ collection ( counters _ by _ category [ [ _ name true <@> out . type ) , out . type ("]}, {"before_ctx": " ", "before_line": " if ( ! performance _ counter _ category . exists ( this . category _ name ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ! performance _ counter _ category . exists ( category _ name ) )", "predictions": ["if ( ! performance _ counter & null . max length ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return performance _ counter _ category . counter _ exists ( this . counter _ name , this . category _ name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return performance _ counter _ category . counter _ exists ( counter _ name , category _ name ) ;", "predictions": ["return performance _ counter _ category . ) this . counter this . counter this . ( counter this ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . perf _ counter ! = null ) { this . perf _ counter . close ( ) ; this . perf _ counter = null ; } this . initialized = false ; ", "after_ctx": " ", "after_line": "if ( perf _ counter ! = null ) { perf _ counter . close ( ) ; perf _ counter = null ; } initialized = false ;", "predictions": ["if ( perf _ counter ! = null </@> { </%> ( close ; ) <%> </%> </%> <@> <%> } } <-> <%> this <%> <%>"]}, {"before_ctx": " ", "before_line": " if ( ! this . initialized ) { this . initialized = true ; if ( this . auto _ create ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ! initialized ) { initialized = true ; if ( auto _ create )", "predictions": ["if ( ! initialized ) { initialized = true ; if ( auto _ create )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . install ( context ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "install ( context ) ;", "predictions": ["install ( context ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . perf _ counter = new performance _ counter ( this . category _ name , this . counter _ name , this . instance _ name , false ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "perf _ counter = new performance _ counter ( category _ name , counter _ name , instance _ name , false ) ;", "predictions": ["perf _ counter = new performance _ counter ( category _ name , counter _ name , instance _ name , false ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . error ( exception , STR , this . category _ name , this . counter _ name , this . instance _ name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . error ( exception , STR , category _ name , counter _ name , instance _ name ) ;", "predictions": ["internal _ logger . error ( exception , STR , category _ name , counter _ name , instance _ name ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . perf _ counter ! = null ; ", "after_ctx": " ", "after_line": "return perf _ counter ! = null ;", "predictions": ["return perf _ counter ! = config ( queue if client <-> or <-> empty string"]}, {"before_ctx": " ", "before_line": " this . machine _ name = environment . machine _ name ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "machine _ name = environment . machine _ name ;", "predictions": ["machine _ name = environment . log this this . log this"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . machine _ name = string . empty ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "machine _ name = string . empty ;", "predictions": ["machine _ name = string . empty ."]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " builder . append ( this . machine _ name ) ; ", "after_ctx": " ", "after_line": "builder . append ( machine _ name ) ;", "predictions": ["builder . append ( machine _ name n n <-> <-> <-> <-> <-> <-> <-> ) this _ ) log"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ; using config ; using internal ;", "predictions": ["using n _ log _ common this this _ <-> . log _ < <%> _ <-> . config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . parameters = new list < method _ call _ parameter > ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parameters = new list < method _ call _ parameter > ( ) ;", "predictions": ["parameters = new list < method . is _ is > encoding ( ( ( method . buffer . call ? ( ( = = ) ) _ </%> . parameters method . parameters method . parameters msg . parameters ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . do _ invoke ( parameters , log _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%>", "after_line": "do _ invoke ( parameters , log _ event ) ;", "predictions": ["do _ invoke ( parameters , directory n = this this </@> ( not _ queue ( parameters </%> helper ( <@> </%> base , log name ) ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var parameter _ value = base . render _ log _ event ( param . layout , log _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var parameter _ value = render _ log _ event ( param . layout , log _ event ) ;", "predictions": ["var parameter _ value = render _ & encoding = if . layout , & & & <%> method = &"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> base . </%> ", "before_line": " using ( var target _ builder = this . optimize _ buffer _ reuse ? this . reusable _ layout _ builder . allocate ( ) : this . reusable _ layout _ builder . none ) ", "after_ctx": " ", "after_line": "using ( var target _ builder = optimize _ buffer _ reuse ? reusable _ layout _ builder . allocate ( ) : reusable _ layout _ builder . none )", "predictions": ["using ( var target _ builder </@> optimize this . reusable _ = _ reuse . is <-> <-> null </@> , , ( <%> this context this . none _ ) this . internal , var this . reusable _ = _ <%> . location </%> )"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ; using internal ;", "predictions": ["using n _ log _ internal this this name ;"]}, {"before_ctx": " ", "before_line": " this . message _ queue _ proxy = new message _ queue _ proxy ( ) ; this . label = STR ; this . encoding = encoding . ut ; this . check _ if _ queue _ exists = true ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "message _ queue _ proxy = new message _ queue _ proxy ( ) ; label = STR ; encoding = encoding . ut ; check _ if _ queue _ exists = true ;", "predictions": ["message _ queue _ proxy = new ( null <%> server this <%> this <%> this <%> this event <%> <%> ut <-> null <-> log . internal . , <-> new instance <-> true true"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " if ( this . queue = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( queue = = null )", "predictions": ["if ( queue = = null method )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . create _ queue _ if _ not _ exists ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( create _ queue _ if _ not _ exists )", "predictions": ["if ( create _ queue _ ( </%> </%> </%> encoding </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var msg = this . prepare _ message ( log _ event ) ; this . message _ queue _ proxy . send ( queue , msg ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var msg = prepare _ message ( log _ event ) ; message _ queue _ proxy . send ( queue , msg ) ;", "predictions": ["var msg = prepare _ message ( log _ event ) ; message _ queue _ proxy . send ( queue , msg ) ( ;"]}, {"before_ctx": " ", "before_line": " if ( string . is _ null _ or _ empty ( this . host ) & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( string . is _ null _ or _ empty ( host ) & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )", "predictions": ["if ( string . is _ ( . </@> . if this <%> <%> </%> </%> </@> _ console . encoding . <%> this this _ is . log . ( output . null <-> <-> <-> <-> </%> . is . ) <-> <-> <-> <-> write . ( empty _ <@> _ is <%> <%> <%> <%> location _ ) <%> <%> <%> <%> . ( location . ( _ ) <%> = empty <%> </%> </%> string . ( _ ) <%> <%> <%> <%> location location <%> <%> . ( _ ) <%> <%> ) <%>"]}, {"before_ctx": " ", "before_line": " if ( this . smtp _ server = = null & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( smtp _ server = = null & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )", "predictions": ["if ( smtp _ server = = , event , event string . console this this this . null this . pickup this . pickup this . pickup this pickup this . to this ,"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . delivery _ method = = smtp _ delivery _ method . network & & this . smtp _ server = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( delivery _ method = = smtp _ delivery _ method . network & & smtp _ server = = null )", "predictions": ["if ( delivery _ method = = context )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( this . pickup _ directory _ location ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )", "predictions": ["if ( delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( ! string . is _ null _ or _ empty ( this . pickup _ directory _ location ) & & this . delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory )", "predictions": ["if ( ! string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " client . delivery _ method = this . delivery _ method ; ", "after_ctx": " ", "after_line": "client . delivery _ method = delivery _ method ;", "predictions": ["client . delivery _ method = ( empty &"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return console _ target _ helper . get _ console _ output _ encoding ( this . encoding , this . is _ initialized , this . pause _ logging ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return console _ target _ helper . get _ console _ output _ encoding ( encoding , is _ initialized , pause _ logging ) ;", "predictions": ["return console _ target _ helper . </@> . </@> ( <@> ; is this . pause this ; this ; _ or , ) ( pause this </@> ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( console _ target _ helper . set _ console _ output _ encoding ( value , this . is _ initialized , this . pause _ logging ) ) ", "after_ctx": " ", "after_line": "if ( console _ target _ helper . set _ console _ output _ encoding ( value , is _ initialized , pause _ logging ) )", "predictions": ["if ( console _ target _ <@> _ set . set encoding true , STR STR if encoding _ <@> , </@> . location log . & & method & method . target . set . send name )"]}, {"before_ctx": " ", "before_line": " this . pause _ logging = false ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "pause _ logging = false ;", "predictions": ["pause _ logging = false ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . encoding ! = null & & ! this . pause _ logging ) console . output _ encoding = this . encoding ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( encoding ! = null & & ! pause _ logging ) console . output _ encoding = encoding ;", "predictions": ["if ( encoding ! = null & & _ pause method <@> ) ) . output <@> ( ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ output ( lei , base . render _ log _ event ( this . header , lei ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "write _ to _ output ( lei , render _ log _ event ( header , lei ) ) ;", "predictions": ["write _ to _ output ( lei , base . render _ log _ event ( header , lei ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ output ( lei , base . render _ log _ event ( this . footer , lei ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "write _ to _ output ( lei , render _ log _ event ( footer , lei ) ) ;", "predictions": ["write _ to _ output ( lei , base . render _ log _ event ( footer , lei ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ output ( log _ event , base . render _ log _ event ( this . layout , log _ event ) ) ; ", "after_ctx": " ", "after_line": "write _ to _ output ( log _ event , render _ log _ event ( layout , log _ event ) ) ;", "predictions": ["write _ to _ output ( log _ event , base . render _ log _ event ( layout , log _ event ) ) </@>"]}, {"before_ctx": " ", "before_line": " var console _ stream = this . error _ stream ? console . error : console . out ; if ( this . word _ highlighting _ rules . count = = 0 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "var console _ stream = error _ stream ? console . error : console . out ; if ( word _ highlighting _ rules . count = = 0 )", "predictions": ["var console _ stream = error _ stream ? <-> . _ _ length - <-> . start , <-> . start - <-> . out <%> <%> _ rules . count this _ ; ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " foreach ( console _ word _ highlighting _ rule hl in this . word _ highlighting _ rules ) ", "after_ctx": " ", "after_line": "foreach ( console _ word _ highlighting _ rule hl in word _ highlighting _ rules )", "predictions": ["foreach ( console _ word _ highlighting _ rule hl in . </%> . _ _ rules 1 1"]}, {"before_ctx": " ", "before_line": " foreach ( console _ row _ highlighting _ rule rule in this . row _ highlighting _ rules ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "foreach ( console _ row _ highlighting _ rule rule in row _ highlighting _ rules )", "predictions": ["foreach ( console _ row _ highlighting _ </%> </%> in in in ( </%> . <-> . this . <-> . <-> . rules event event _ <%> . rules ) = <-> . <%> . </%> . </%> . </%> . if ) )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . use _ default _ row _ highlighting _ rules ) ", "after_ctx": " ", "after_line": "if ( use _ default _ row _ highlighting _ rules )", "predictions": ["if ( use _ default _ row _ highlighting . rules this this this this this this . in _ <@> . row . if <-> else _ ( > > </@> . : . </@> . = = = = = = = = use this </@> <%> <%> _ count _ <@> _ highlighting _ buffer <%> <%> <%>"]}, {"before_ctx": " ", "before_line": " this . foreground _ color = foreground _ color ; this . background _ color = background _ color ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "foreground _ color = foreground _ color ; background _ color = background _ color ;", "predictions": ["foreground _ color = foreground _ color ; background this this . background this this this this this this this this . ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . background _ color ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return background _ color ; }", "predictions": ["get { return background _ color ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . foreground _ color ; } ", "after_ctx": " ", "after_line": "get { return foreground _ color ; }", "predictions": ["get { return foreground _ color ; }"]}, {"before_ctx": " ", "before_line": " this . stack = stack ; this . previous _ count = previous _ count ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "stack = stack ; previous _ count = previous _ count ;", "predictions": ["stack = stack ; previous _ count = previous ) ! ) ! ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " while ( this . stack . count > this . previous _ count ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "while ( stack . count > previous _ count )", "predictions": ["while ( stack . count > previous _ count )"]}, {"before_ctx": " ", "before_line": " var target _ attribute = this . get _ type ( ) . get _ custom _ attribute < time _ source _ attribute > ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var target _ attribute = get _ type ( ) . get _ custom _ attribute < time _ source _ attribute > ( ) ;", "predictions": ["var target _ attribute = get _ type ( </%> </%> this this this this this this this this this this this this this this _ error </@> _ <%> ( this > this this this <%> <-> <-> <-> <-> <-> <-> > <%> <%> ( </%> </%> . this <@> </%> <@> </%> </%> <@> empty </%> </%> <@> </%> </%> ( </%> . create . create . empty <@> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> <@> </%> </%> ( </%> . create . create <@> <@> </%> ."]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . get _ type ( ) . name ; ", "after_ctx": " ", "after_line": "return get _ type ( ) . name ;", "predictions": ["return get _ type ( ) . name ) </%> name </%>"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ;", "predictions": ["using n _ log _ common ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . async _ continuation = async _ continuation ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "async _ continuation = async _ continuation ;", "predictions": ["async _ continuation = async _ continuation ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var cont = interlocked . exchange ( ref this . async _ continuation , null ) ; ", "after_ctx": " ", "after_line": "var cont = interlocked . exchange ( ref async _ continuation , null ) ;", "predictions": ["var cont = interlocked . exchange ( ref n <@> in - null <%> </%> <%> </%> _ </@> ) <%>"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . repeat _ count = repeat _ count ; this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( repeating _ target _ wrapper ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "repeat _ count = repeat _ count ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( repeating _ target _ wrapper ) ;", "predictions": ["repeat _ count = repeat _ count ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( repeating _ to . wrapper ) ,"]}, {"before_ctx": " ", "before_line": " this . optimize _ buffer _ reuse = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "optimize _ buffer _ reuse = true ;", "predictions": ["optimize _ buffer _ reuse = true ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . header ! = null ) ", "after_ctx": " <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "if ( header ! = null )", "predictions": ["if ( header ! = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " debugger . log ( log _ level . off . ordinal , string . empty , base . render _ log _ event ( this . header , log _ event _ info . create _ null _ event ( ) ) + STR ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "debugger . log ( log _ level . off . ordinal , string . empty , render _ log _ event ( header , log _ event _ info . create _ null _ event ( ) ) + STR ) ;", "predictions": ["debugger . log ( log _ level . off . ordinal , string . empty , base . render _ log _ event ( header , log _ event _ info . create _ null _ event ( ) ) + STR ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " debugger . log ( log _ level . off . ordinal , string . empty , base . render _ log _ event ( this . footer , log _ event _ info . create _ null _ event ( ) ) + STR ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "debugger . log ( log _ level . off . ordinal , string . empty , render _ log _ event ( footer , log _ event _ info . create _ null _ event ( ) ) + STR ) ;", "predictions": ["debugger . log ( log _ level . off . ordinal , string . empty , base . render _ log _ event ( footer , log _ event _ info . create _ null _ event ( ) ) + STR ) ;"]}, {"before_ctx": "<%> <-> base . </%> <%> <-> this . </%> ", "before_line": " if ( this . optimize _ buffer _ reuse ) ", "after_ctx": " <%> <-> base . </%> <%> <-> this . </%>", "after_line": "if ( optimize _ buffer _ reuse )", "predictions": ["if ( optimize _ buffer _ reuse )"]}, {"before_ctx": "<%> <-> base . </%> <%> <-> this . </%> ", "before_line": " log _ message = base . render _ log _ event ( this . layout , log _ event ) + STR ; ", "after_ctx": " ", "after_line": "log _ message = render _ log _ event ( layout , log _ event ) + STR ;", "predictions": ["log _ message = base . render _ log . ; <%> target </@> ; source <@> <@> <@>"]}, {"before_ctx": " ", "before_line": " this . separator = STR ; this . bottom _ frames = - 1 ; this . top _ frames = - 1 ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "separator = STR ; bottom _ frames = - 1 ; top _ frames = - 1 ;", "predictions": ["separator = STR ; bottom _ frames = - count <%> top _ <-> this ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . top _ frames ! = - 1 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( top _ frames ! = - 1 )", "predictions": ["if ( top _ frames ! = - 1 )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " end _ pos = math . min ( this . top _ frames , messages . length ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "end _ pos = math . min ( top _ frames , messages . length ) ;", "predictions": ["end _ pos = math . min ( top error </%> ) . </@> ( if ( </@> ( if . </@> ( ? . = ) ) . length ( messages . length log </%> log _ get ( math _ get ( . ( length this . <@> ( <@> . <@> ( ) . <@> ( ( header ( create this ( header . <@> ( header . <@> ( create this ( header . <@> ( header . <@> ( header . <@> ( header . <@> ( header . <@> ( ) ( ) ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " else if ( this . bottom _ frames ! = - 1 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "else if ( bottom _ frames ! = - 1 )", "predictions": ["else if ( bottom _ frames ! = - ( event event ( this event this event event event event this . = = <%> ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " start _ pos = messages . length - math . min ( this . bottom _ frames , messages . length ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "start _ pos = messages . length - math . min ( bottom _ frames , messages . length ) ;", "predictions": ["start _ pos = messages . length - math . min ) header . ! </@> header ( ( ! </@> </@> . ! </@> ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " current _ separator = this . separator ; ", "after_ctx": " ", "after_line": "current _ separator = separator ;", "predictions": ["current _ separator = separator ;"]}, {"before_ctx": " ", "before_line": " this . last _ message = string . empty ; this . counter = 0 ; this . optimize _ buffer _ reuse = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "last _ message = string . empty ; counter = 0 ; optimize _ buffer _ reuse = true ;", "predictions": ["last _ message = string . event <%> _ empty <%> </@> <%> optimize </%> buffer </%> reuse <-> true <%> <%> ( ) <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . counter + + ; this . last _ message = this . render _ log _ event ( this . layout , log _ event ) ; ", "after_ctx": " ", "after_line": "counter + + ; last _ message = render _ log _ event ( layout , log _ event ) ;", "predictions": ["counter + + ; last _ thread = { last <%> = = layout , = <%> <%> </%> </%>"]}, {"before_ctx": " ", "before_line": " this . events = new list < log _ event _ info > ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "events = new list < log _ event _ info > ( ) ;", "predictions": ["events = new list < log _ event _ info > ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . events . add ( log _ event ) ; if ( this . throw _ exceptions ) ", "after_ctx": " ", "after_line": "events . add ( log _ event ) ; if ( throw _ exceptions )", "predictions": ["events . add ( log _ event <-> 0 <-> throw </@> _ if <->"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert . true ( flush _ count < = write _ count ) ; write _ count + + ;", "predictions": ["assert . true ( flush _ <-> < log log _ + ) <%> _ + ; log _ + ; ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . throw _ exceptions ) ", "after_ctx": " ", "after_line": "if ( throw _ exceptions )", "predictions": ["if ( throw _ exceptions )"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; if ( this . fail _ counter > 0 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ( fail _ counter > 0 )", "predictions": ["assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ( fail _ counter > 0 )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . fail _ counter - - ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "fail _ counter - - ;", "predictions": ["fail _ counter - - ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ count + + ; ", "after_ctx": " ", "after_line": "flush _ count + + ;", "predictions": ["flush _ count + + ;"]}, {"before_ctx": " ", "before_line": " if ( this . variable ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( variable ! = null )", "predictions": ["if ( variable ! = null </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var environment _ variable = environment _ helper . get _ safe _ environment _ variable ( this . variable ) ; ", "after_ctx": " ", "after_line": "var environment _ variable = environment _ helper . get _ safe _ environment _ variable ( variable ) ;", "predictions": ["var environment _ variable = environment . if . <@> . <@> <%> <-> </@> </@> </@> </@> </@> </@> </@> _"]}, {"before_ctx": " ", "before_line": " if ( ! this . thread _ agnostic ) { this . render ( log _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ! thread _ agnostic ) { render ( log _ event ) ;", "predictions": ["if ( ! thread _ agnostic ) { ( log <-> event <%> if ! </%> is <-> <-> <%> <%> ) ="]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( ! this . is _ initialized ) { this . initialize ( this . logging _ configuration ) ; } return this . get _ formatted _ message ( log _ event ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! is _ initialized ) { initialize ( logging _ configuration ) ; } return get _ formatted _ message ( log _ event ) ;", "predictions": ["if ( ! is _ initialized ) { initialize ( logging _ configuration ) ; } return get _ formatted _ message ( log _ event ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( ! this . thread _ agnostic ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ! thread _ agnostic )", "predictions": ["if ( ! thread _ agnostic )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ! this . is _ initialized ) { this . initialize ( this . logging _ configuration ) ; } if ( ! this . thread _ agnostic ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! is _ initialized ) { initialize ( logging _ configuration ) ; } if ( ! thread _ agnostic )", "predictions": ["if ( ! is _ initialized <-> { <%> logging </%> configuration <-> _ } <-> } <@> <%> ! thread"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " cache _ layout _ result = cache _ layout _ result & & ! this . thread _ agnostic ; ", "after_ctx": " ", "after_line": "cache _ layout _ result = cache _ layout _ result & & ! thread _ agnostic ;", "predictions": ["cache _ layout _ result = <-> . <%> . name this this _ <-> <-> 0 . message 0 0 <@>"]}, {"before_ctx": " ", "before_line": " if ( ! this . thread _ agnostic ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! thread _ agnostic )", "predictions": ["if ( ! thread _ agnostic </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " int initial _ length = this . max _ rendered _ length ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "int initial _ length = max _ rendered _ length ;", "predictions": ["int initial _ length = max _ rendered + <-> </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( sb . length > this . max _ rendered _ length ) { this . max _ rendered _ length = sb . length ; } if ( cache _ layout _ result & & ! this . thread _ agnostic ) ", "after_ctx": " ", "after_line": "if ( sb . length > max _ rendered _ length ) { max _ rendered _ length = sb . length ; } if ( cache _ layout _ result & & ! thread _ agnostic )", "predictions": ["if ( sb . length > max _ rendered _ length ) { max _ rendered _ length = sb . length ; } if ( cache _ layout . return ) )"]}, {"before_ctx": " ", "before_line": " this . initialize ( configuration ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "initialize ( configuration ) ;", "predictions": ["initialize ( configuration ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . close ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "close ( ) ;", "predictions": ["close ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . thread _ agnostic = object _ graph _ scanner _ list . all ( item = > item . get _ type ( ) . is _ defined ( typeof ( thread _ agnostic _ attribute ) , true ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "thread _ agnostic = object _ graph _ scanner _ list . all ( item = > item . get _ type ( ) . is _ defined ( typeof ( thread _ agnostic _ attribute ) , true ) ) ;", "predictions": ["thread _ agnostic = object _ graph _ scanner _ list . all ( item = > item . get _ type ( ) . is _ defined ( typeof ( thread _ agnostic _ attribute ) , true ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ initialized ) { this . logging _ configuration = null ; this . is _ initialized = false ; this . close _ layout ( ) ; ", "after_ctx": " ", "after_line": "if ( is _ initialized ) { logging _ configuration = null ; is _ initialized = false ; close _ layout ( ) ;", "predictions": ["if ( is _ initialized ) { logging _ configuration = null ; is _ initialized = false ; close _ layout ( ) ;"]}, {"before_ctx": " ", "before_line": " this . current _ file _ length = file _ info . length ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "current _ file _ length = file _ info . length ;", "predictions": ["current _ file _ length = ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . current _ file _ length = 0 ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "current _ file _ length = 0 ;", "predictions": ["current _ file _ length = <%> <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . file = this . create _ file _ stream ( false ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "file = create _ file _ stream ( false ) ;", "predictions": ["file = create _ file _ stream ( false ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . file ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( file ! = null )", "predictions": ["if ( file ! = null )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . file = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "file = null ;", "predictions": ["file = null ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . file = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( file = = null )", "predictions": ["if ( file = = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . creation _ time _ utc ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return creation _ time _ utc ;", "predictions": ["return creation _ time _ utc ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . last _ write _ time _ utc ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return last _ write _ time _ utc ;", "predictions": ["return last _ write _ time _ utc </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . current _ file _ length ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return current _ file _ length ;", "predictions": ["return current _ file _ length ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . file = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( file = = null )", "predictions": ["if ( file = = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . current _ file _ length + = count ; this . file . write ( bytes , offset , count ) ; ", "after_ctx": " ", "after_line": "current _ file _ length + = count ; file . write ( bytes , offset , count ) ;", "predictions": ["current _ file _ length + = count ; current . write file file <%> <@> <@> <-> <-> <-> <%> <%> > <%> <%> > = bytes _ write = bytes _ request > <%> <%> <%> ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . action = filter _ result . neutral ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "action = filter _ result . neutral ;", "predictions": ["action = filter _ result . neutral ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . check ( log _ event ) ; ", "after_ctx": " ", "after_line": "return check ( log _ event ) ;", "predictions": ["return check ( log _ event ) _ = null </%> </%> </@> this _ = </%> _ + <%> </%>"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ; using internal ;", "predictions": ["using n _ log _ internal ; using n <%> <%>"]}, {"before_ctx": " ", "before_line": " if ( this . class _ name ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( class _ name )", "predictions": ["if ( class _ name )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . method _ name ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( method _ name )", "predictions": ["if ( method _ name )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . file _ name ) ", "after_ctx": " ", "after_line": "if ( file _ name )", "predictions": ["if ( file _ name )"]}, {"before_ctx": " ", "before_line": " if ( this . clean _ names _ of _ async _ continuations & & method . name = = STR & & type . declaring _ type ! = null & & type . name . starts _ with ( STR ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( clean _ names _ of _ async _ continuations & & method . name = = STR & & type . declaring _ type ! = null & & type . name . starts _ with ( STR ) )", "predictions": ["if ( clean _ names _ of _ async _ continuations & & method . name = = STR & & type . declaring _ type ! = null & & type . name . starts _ with ( STR method method _ if method method method method method <-> <-> <-> _ = _ = <-> <-> <-> _ = _ target <-> <-> <-> _ = _ target <-> <-> <-> _ = _ target <-> <-> <-> _ = _ target <-> <-> <-> _ = _ target <-> <-> <-> _ = _ target <-> <->"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . clean _ names _ of _ anonymous _ delegates & & class _ name ! = null ) ", "after_ctx": " ", "after_line": "if ( clean _ names _ of _ anonymous _ delegates & & class _ name ! = null )", "predictions": ["if ( clean _ names _ of _ anonymous _ on . this this this <%> . length </%> return null = null ( null ( null . log . request . null ( log . clean . info . info ( info if name ) ) )"]}, {"before_ctx": " ", "before_line": " if ( this . class _ name ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( class _ name )", "predictions": ["if ( class _ name )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . clean _ names _ of _ async _ continuations & & method . name = = STR & & type ? . declaring _ type ! = null & & type . name . starts _ with ( STR ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( clean _ names _ of _ async _ continuations & & method . name = = STR & & type ? . declaring _ type ! = null & & type . name . starts _ with ( STR ) )", "predictions": ["if ( clean _ names _ of _ async _ continuations & & method . name = = STR & & type ? . declaring _ type ! = null & & type . name . starts _ with ( STR ) )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . clean _ names _ of _ anonymous _ delegates & & ( method _ name . starts _ with ( STR ) & & method _ name . contains ( STR ) & & method _ name . contains ( STR ) ) ) ", "after_ctx": " ", "after_line": "if ( clean _ names _ of _ anonymous _ delegates & & ( method _ name . starts _ with ( STR ) & & method _ name . contains ( STR ) & & method _ name . contains ( STR ) ) )", "predictions": ["if ( clean _ names _ of _ anonymous _ delegates & & ( method _ name . starts _ with ( STR ) & & method _ name . contains ( STR ) & & method _ name . = this ( <%> ( <%> ( <%> ( type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = type = ? ? ? ? type = type this = ? ?"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using common ;", "predictions": ["using n _ log _ common ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . request _ limit = request _ limit ; this . on _ overflow = overflow _ action ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "request _ limit = request _ limit ; on _ overflow = overflow _ action ;", "predictions": ["request _ limit = request _ limit ; on . on log . </%> </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . log _ event _ info _ queue . count > = this . request _ limit ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( log _ event _ info _ queue . count > = request _ limit )", "predictions": ["if ( log _ event _ info _ queue . count > = request _ limit )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " switch ( this . on _ overflow ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "switch ( on _ overflow )", "predictions": ["switch ( on _ overflow )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " while ( this . log _ event _ info _ queue . count > = this . request _ limit ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "while ( log _ event _ info _ queue . count > = request _ limit )", "predictions": ["while ( log _ event _ info _ queue . count > = request _ limit )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . on _ overflow = = async _ target _ wrapper _ overflow _ action . block ) ", "after_ctx": " ", "after_line": "if ( on _ overflow = = async _ target _ wrapper _ overflow _ action . block )", "predictions": ["if ( on _ overflow = = async _ target _ wrapper _ overflow _ action . block )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " result . add ( this . log _ event _ info _ queue . dequeue ( ) ) ; if ( this . on _ overflow = = async _ target _ wrapper _ overflow _ action . block ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "result . add ( log _ event _ info _ queue . dequeue ( ) ) ; if ( on _ overflow = = async _ target _ wrapper _ overflow _ action . block )", "predictions": ["result . add ( log _ event _ info _ queue . dequeue ( ) ) ; if ( on _ overflow = = async _ target _ wrapper _ overflow _ action . block )"]}, {"before_ctx": " ", "before_line": " if ( this . is _ authenticated ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ authenticated )", "predictions": ["if ( is _ authenticated )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " separator = this . separator ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "separator = separator ;", "predictions": ["separator = separator ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . auth _ type ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( auth _ type )", "predictions": ["if ( auth _ type )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " separator = this . separator ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "separator = separator ;", "predictions": ["separator = separator ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . name ) ", "after_ctx": " ", "after_line": "if ( name )", "predictions": ["if ( name )"]}, {"before_ctx": " ", "before_line": " this . name = name ; this . ordinal = ordinal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "name = name ; ordinal = ordinal ;", "predictions": ["name = name ; ordinal = ordinal <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . name ; } ", "after_ctx": " ", "after_line": "get { return name ; }", "predictions": ["get { return name ; }"]}, {"before_ctx": " ", "before_line": " return this . name ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return name ;", "predictions": ["return name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . ordinal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return ordinal ;", "predictions": ["return ordinal ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . ordinal = = other . ordinal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return ordinal = = other . ordinal ;", "predictions": ["return ordinal = = other . ordinal </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return other ! = null & & this . ordinal = = other . ordinal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return other ! = null & & ordinal = = other . ordinal ;", "predictions": ["return other ! = null & & ordinal = = </@> . ; ; ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . ordinal - level . ordinal ; ", "after_ctx": " ", "after_line": "return ordinal - level . ordinal ;", "predictions": ["return ordinal - level . this </%> this _ return ( ) this . _ _ this </%> <-> . _ }"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . throw _ on _ initialize ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( throw _ on _ initialize )", "predictions": ["if ( throw _ on _ initialize )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " assert . equal ( 0 , this . in _ blocking _ operation ) ; this . initialize _ count + + ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . equal ( 0 , in _ blocking _ operation ) ; initialize _ count + + ;", "predictions": ["assert . equal ( 0 , in _ blocking _ operation ) ; initialize _ count + + ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " assert . equal ( 0 , this . in _ blocking _ operation ) ; this . close _ count + + ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . equal ( 0 , in _ blocking _ operation ) ; close _ count + + ;", "predictions": ["assert . equal ( 0 , in _ blocking _ operation ) ; close _ count + + ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " assert . equal ( 0 , this . in _ blocking _ operation ) ; this . flush _ count + + ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . equal ( 0 , in _ blocking _ operation ) ; flush _ count + + ;", "predictions": ["assert . equal ( 0 , in _ blocking _ operation ) ; flush _ count + + ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " assert . equal ( 0 , this . in _ blocking _ operation ) ; this . write _ count + + ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;", "predictions": ["assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " assert . equal ( 0 , this . in _ blocking _ operation ) ; this . write _ count + + ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;", "predictions": ["assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " assert . equal ( 0 , this . in _ blocking _ operation ) ; this . write _ count + + ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;", "predictions": ["assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { this . in _ blocking _ operation + + ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { in _ blocking _ operation + + ;", "predictions": ["lock ( sync _ root ) { in _ blocking _ operation + + ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . in _ blocking _ operation - - ; ", "after_ctx": " ", "after_line": "in _ blocking _ operation - - ;", "predictions": ["in _ blocking _ operation - - ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ; using layouts ;", "predictions": ["using n _ log _ layouts ; using n _ ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " string msg = this . render _ inner ( log _ event ) ; builder . append ( this . transform ( msg ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "string msg = render _ inner ( log _ event ) ; builder . append ( transform ( msg ) ) ;", "predictions": ["string msg = render _ inner ( log _ event ) ; builder . append ( transform ( msg ) ) ;"]}, {"before_ctx": " ", "before_line": " this . previous _ culture _ info = thread . current _ thread . current _ culture ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "previous _ culture _ info = thread . current _ thread . current _ culture ;", "predictions": ["previous _ culture _ info = thread . current this . & = <-> </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " thread . current _ thread . current _ culture = this . previous _ culture _ info ; ", "after_ctx": " ", "after_line": "thread . current _ thread . current _ culture = previous _ culture _ info ;", "predictions": ["thread . current _ thread . current _ culture = previous . ; log . <%> _ this . ) ;"]}, {"before_ctx": " ", "before_line": " return ( t ) this . get _ logger ( name , typeof ( t ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return ( t ) get _ logger ( name , typeof ( t ) ) ;", "predictions": ["return ( t ) get _ logger ( name thread typeof . <-> this this ( & & & . <-> this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this <%> this this <%> this this this this this this this this this this this"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name ) ; ", "after_ctx": " ", "after_line": "return get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name ) ;", "predictions": ["return get _ logger ( frame . get _ method <%> <-> . on this . <@> <%> <%> </%> <-> <-> + </%> this <-> <-> <-> <-> ) + </%> this <-> <-> + </%> <->"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ; using internal ;", "predictions": ["using n _ log _ common ; </%> <-> . culture . = current . culture _ <@> ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . targets = new list < target > ( targets ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "targets = new list < target > ( targets ) ;", "predictions": ["targets = new list < target > ( targets ) ;"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . last _ log _ event = log _ event ; ", "after_ctx": " ", "after_line": "last _ log _ event = log _ event ;", "predictions": ["last _ log _ event = log . ;"]}, {"before_ctx": " ", "before_line": " this . events = new list < log _ event _ info > ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "events = new list < log _ event _ info > ( ) ;", "predictions": ["events = new list < log _ event - info > </@> _ _"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . throw _ exceptions - - > 0 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( throw _ exceptions - - > 0 )", "predictions": ["if ( throw _ exceptions - - > get <@> get </@> <@> </@> </@>"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ; using internal ;", "predictions": ["using n _ log _ internal this this . <-> . </%> . } ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . space _ as _ plus = true ; ", "after_ctx": " ", "after_line": "space _ as _ plus = true ;", "predictions": ["space _ as _ plus = . true . true . space . message . {"]}, {"before_ctx": " ", "before_line": " this . log = new string _ writer ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "log = new string _ writer ( ) ;", "predictions": ["log = new string _ writer <%> n </%> </%>"]}, {"before_ctx": " ", "before_line": " this . log = sender . log ; this . log . write _ line ( STR , address _ family , socket _ type , protocol _ type ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "log = sender . log ; log . write _ line ( STR , address _ family , socket _ type , protocol _ type ) ;", "predictions": ["log = sender . log ; log . write _ line ( STR , address _ family , socket _ type , protocol _ type ) ;"]}, {"before_ctx": " ", "before_line": " return ( system . net . sockets . address _ family ) NUM ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return ( address _ family ) NUM ;", "predictions": ["return ( address _ family log n <-> </%> </%> </%>"]}, {"before_ctx": "<%> <-> system . net . sockets . </%> ", "before_line": " return STR + this . uri + STR ; ", "after_ctx": " ", "after_line": "return STR + uri + STR ;", "predictions": ["return STR + uri + ) ;"]}, {"before_ctx": " ", "before_line": " this . properties = new properties _ dictionary ( message _ template _ parameters ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "properties = new properties _ dictionary ( message _ template _ parameters ) ;", "predictions": ["properties = new properties _ dictionary ( message this ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . level = level ; this . logger _ name = logger _ name ; this . message = message ; this . parameters = parameters ; this . format _ provider = format _ provider ; this . exception = exception ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "level = level ; logger _ name = logger _ name ; message = message ; parameters = parameters ; format _ provider = format _ provider ; exception = exception ;", "predictions": ["level = level ; logger _ name = logger _ name ; message = message ; parameters = parameters ; format _ provider = format _ provider ; exception = exception ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . calc _ formatted _ message ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "calc _ formatted _ message ( ) ;", "predictions": ["calc _ formatted _ message ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " get { return this . stack _ trace ! = null ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return stack _ trace ! = null ; }", "predictions": ["get { return stack _ trace ! = null ; }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " get { return ( this . stack _ trace ! = null ) ? this . stack _ trace . get _ frame ( this . user _ stack _ frame _ number ) : null ; } ", "after_ctx": " ", "after_line": "get { return ( stack _ trace ! = null ) ? stack _ trace . get _ frame ( user _ stack _ frame _ number ) : null ; }", "predictions": ["get { return ( stack _ trace ! = null ) } <%> . ) this this this this this this this this this this _ user = log . <%> = log . <-> . , . number </@> </@> </@> } </@> write . <-> ( <%> . <-> . <-> . write . log . log . log . write . log . log . log . ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . logger _ name . substring ( last _ dot + 1 ) ; } return this . logger _ name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return logger _ name . substring ( last _ dot + 1 ) ; } return logger _ name ;", "predictions": ["return logger _ name . substring ( last _ dot + ; ( format = format = provider _ provider _"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . message ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return message ; }", "predictions": ["get { return message ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . message = value ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "message = value ;", "predictions": ["message = value ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " get { return this . parameters ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return parameters ; }", "predictions": ["get { return parameters ; }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parameters = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parameters = value ;", "predictions": ["parameters = value ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . format _ provider ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return format _ provider ; }", "predictions": ["get { return format _ provider ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . format _ provider ! = value ) { this . format _ provider = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( format _ provider ! = value ) { format _ provider = value ;", "predictions": ["if ( format _ provider ! = value ) { format _ ) <@> trace <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . message _ formatter ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return message _ formatter ; }", "predictions": ["get { return message _ formatter ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . message _ formatter = value ? ? string _ format _ message _ formatter ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "message _ formatter = value ? ? string _ format _ message _ formatter ;", "predictions": ["message _ formatter = value ? ? string _ format _ ) properties ("]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . formatted _ message = = null ) { this . calc _ formatted _ message ( ) ; } return this . formatted _ message ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( formatted _ message = = null ) { calc _ formatted _ message ( ) ; } return formatted _ message ;", "predictions": ["if ( formatted _ message = = null ) { calc <%> ( <%> ; } <%> ) <@> ( ( ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . properties ! = null ) { return this . properties . count > 0 ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( properties ! = null ) { return properties . count > 0 ;", "predictions": ["if ( properties ! = null ) { return properties . <@> </@> return ( _ </@> </@> ( last name return ! )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal properties _ dictionary properties _ dictionary { get { return this . properties ; } set { this . properties = value ; } } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "internal properties _ dictionary properties _ dictionary { get { return properties ; } set { properties = value ; } }", "predictions": ["internal properties _ dictionary properties _ dictionary { get { return properties ; } set { properties = value ; } }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . properties = = null ) { interlocked . compare _ exchange ( ref this . properties , new properties _ dictionary ( ) , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( properties = = null ) { interlocked . compare _ exchange ( ref properties , new properties _ dictionary ( ) , null ) ;", "predictions": ["if ( properties = = null ) { interlocked . compare _ exchange ( ref properties , new properties _ dictionary ( ) , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . calc _ formatted _ message ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "calc _ formatted _ message ( ) ;", "predictions": ["calc _ formatted _ message ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . properties ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return properties ;", "predictions": ["return properties ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var log _ message _ formatter = this . message _ formatter ? . target as i _ log _ message _ formatter ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var log _ message _ formatter = message _ formatter ? . target as i _ log _ message _ formatter ;", "predictions": ["var log _ message _ formatter = message _ formatter ? . target as i _ log _ message _ formatter ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . properties ! = null & & this . properties . message _ properties . count > 0 ) { return new message _ template _ parameters ( this . properties . message _ properties ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( properties ! = null & & properties . message _ properties . count > 0 ) { return new message _ template _ parameters ( properties . message _ properties ) ;", "predictions": ["if ( properties ! = null & & properties . message _ properties . count > count > { > { new <-> <-> <-> ( ( . ; ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return new message _ template _ parameters ( this . message , this . parameters ) ; ", "after_ctx": " ", "after_line": "return new message _ template _ parameters ( message , parameters ) ;", "predictions": ["return new message _ template _ parameters = ( ( <-> null null , </%> string string ) ) ) ) ) ) ! </@> </%> <-> <-> <-> & </%> > ) buffer buffer buffer buffer buffer buffer buffer buffer buffer buffer buffer buffer buffer buffer user _ template _ ; = stack trace ;"]}, {"before_ctx": " ", "before_line": " return STR + this . logger _ name + STR + this . level + STR + this . formatted _ message + STR + this . sequence _ id ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return STR + logger _ name + STR + level + STR + formatted _ message + STR + sequence _ id ;", "predictions": ["return STR + logger _ name + STR + level + STR + ! message . _ . _ count <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . stack _ trace = stack _ trace ; this . user _ stack _ frame _ number = user _ stack _ frame ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "stack _ trace = stack _ trace ; user _ stack _ frame _ number = user _ stack _ frame ;", "predictions": ["stack _ trace = stack _ trace ; user _ stack _ frame _ number = user _ stack _ ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . layout _ cache = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( layout _ cache = = null )", "predictions": ["if ( layout _ cache = = ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . layout _ cache ) { if ( this . layout _ cache . count = = 0 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "lock ( layout _ cache ) { if ( layout _ cache . count = = 0 )", "predictions": ["lock ( layout _ cache ) { return layout = <@> . null </%> </%> ! properties"]}, {"before_ctx": " ", "before_line": " this . formatted _ message = this . message _ formatter ( this ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "formatted _ message = message _ formatter ( this ) ;", "predictions": ["formatted _ message = message _ formatter = . < <@> <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . formatted _ message = this . message ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "formatted _ message = message ;", "predictions": ["formatted _ message = message ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . formatted _ message = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "formatted _ message = null ;", "predictions": ["formatted _ message = null ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . calc _ formatted _ message ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "calc _ formatted _ message ( ) ;", "predictions": ["calc _ formatted _ message ( ) <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . properties ! = null & & has _ message _ template _ parameters ) { this . properties . message _ properties = null ; ", "after_ctx": " ", "after_line": "if ( properties ! = null & & has _ message _ template _ parameters ) { properties . message _ properties = null ;", "predictions": ["if ( properties ! = null & ) to _ string _ template this . <-> this . <-> this ;"]}, {"before_ctx": " ", "before_line": " this . grow _ as _ needed = grow _ as _ needed ; this . buffer = new async _ log _ event _ info [ size ] ; this . grow _ limit = grow _ limit ; this . get _ pointer = 0 ; this . put _ pointer = 0 ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "grow _ as _ needed = grow _ as _ needed ; buffer = new async _ log _ event _ info [ size ] ; grow _ limit = grow _ limit ; get _ pointer = 0 ; put _ pointer = 0 ;", "predictions": ["grow _ as _ needed = grow _ as _ needed ; buffer = new async _ log _ event _ info [ size ] ; grow _ limit = grow _ limit ; get _ pointer = 0 ; put _ pointer = 0 ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . count > = this . buffer . length ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( count > = buffer . length )", "predictions": ["if ( count > = buffer . length )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . grow _ as _ needed & & this . buffer . length < this . grow _ limit ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( grow _ as _ needed & & buffer . length < grow _ limit )", "predictions": ["if ( grow _ as _ needed & & buffer . length < grow _ limit )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " int cnt = this . count ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "int cnt = count ;", "predictions": ["int cnt = count ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . count = 0 ; this . get _ pointer = 0 ; this . put _ pointer = 0 ; ", "after_ctx": " ", "after_line": "count = 0 ; get _ pointer = 0 ; put _ pointer = 0 ;", "predictions": ["count = 0 ; get _ pointer <@> ; put = pointer <@> <-> </%>"]}, {"before_ctx": " ", "before_line": " using n _ log _ conditions ; using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using conditions ; using config ;", "predictions": ["using n _ log ; using n _ <%> . = . <-> ."]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . action ; ", "after_ctx": " ", "after_line": "return action ;", "predictions": ["return action ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . xml _ encode = true ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "xml _ encode = true ;", "predictions": ["xml _ encode = true ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . xml _ encode ? do _ xml _ escape ( text ) : text ; ", "after_ctx": " ", "after_line": "return xml _ encode ? do _ xml _ escape ( text ) : text ;", "predictions": ["return xml _ encode ? do _ </%> this _ new <%> ;"]}, {"before_ctx": " ", "before_line": " if ( this . value _ indexes ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( value _ indexes ! = null )", "predictions": ["if ( value _ indexes ! = null </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " foreach ( int index in this . value _ indexes ) ", "after_ctx": " ", "after_line": "foreach ( int index in value _ indexes )", "predictions": ["foreach ( int index in value _ indexes <-> <-> this this this <-> cache <-> <-> <@> properties"]}, {"before_ctx": " ", "before_line": " if ( this . value _ indexes ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( value _ indexes ! = null )", "predictions": ["if ( value _ indexes ! = null </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . value _ indexes = new list < int > ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "value _ indexes = new list < int > ( ) ;", "predictions": ["value _ indexes = new list < if </@> _ </@> <@>"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . json _ encode = true ; this . escape _ unicode = true ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "json _ encode = true ; escape _ unicode = true ;", "predictions": ["json _ encode = true ; escape . lock = ( <-> <-> = </@> <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . json _ encode ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( json _ encode )", "predictions": ["if ( json _ encode )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var result = targets . default _ json _ serializer . escape _ string ( target . to _ string ( ) , this . escape _ unicode ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var result = targets . default _ json _ serializer . escape _ string ( target . to _ string ( ) , escape _ unicode ) ;", "predictions": ["var result = targets . default _ json this . _ _ _ string this . = to . </@> _ ( if . to this . <@> </%> </%> </%> </%> </%> </%> this . = default this </%> . = = = targets this . ( ( ( ( </%> </%> </%> this . ( = = </%> _ get . 0 ; = </%> = </%> = this _ info = buffer . <@> . [ ; ) = event = </%> = this _ get = = = = </%> . </%> = </%> . </%>"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ; using internal ;", "predictions": ["using n _ log _ internal ; using this _ <%> ."]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . exception _ separator = environment _ helper . new _ line ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "exception _ separator = environment _ helper . new _ line ;", "predictions": ["exception _ separator = environment _ helper this this this this this this this this this this . <@> _ close option"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . raw ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( raw )", "predictions": ["if ( raw )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . with _ exception & & log _ event . exception ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( with _ exception & & log _ event . exception ! = null )", "predictions": ["if ( with _ exception & this log </%> = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " builder . append ( this . exception _ separator ) ; ", "after_ctx": " ", "after_line": "builder . append ( exception _ separator ) ;", "predictions": ["builder . append ( exception _ connection ;"]}, {"before_ctx": " ", "before_line": " this . cached = true ; this . clear _ cache = clear _ cache _ option . on _ init | clear _ cache _ option . on _ close ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "cached = true ; clear _ cache = clear _ cache _ option . on _ init | clear _ cache _ option . on _ close ;", "predictions": ["cached = true ; clear _ cache = clear _ cache _ option . on _ init | <-> . <%> . process _ base </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . cached _ value = null ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "cached _ value = null ;", "predictions": ["cached _ value = null ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . cached _ value = null ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "cached _ value = null ;", "predictions": ["cached _ value = null ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . cached ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( cached )", "predictions": ["if ( cached )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . cached _ value = = null | | this . rendered _ cache _ key ! = new _ cache _ key ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( cached _ value = = null | | rendered _ cache _ key ! = new _ cache _ key )", "predictions": ["if ( cached _ value = = null | | rendered _ cache _ key ! = new _ cache _ key )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . cached _ value = base . render _ inner ( log _ event ) ; this . rendered _ cache _ key = new _ cache _ key ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "cached _ value = base . render _ inner ( log _ event ) ; rendered _ cache _ key = new _ cache _ key ;", "predictions": ["cached _ value = base . render _ inner ( log _ event ) ; rendered _ cache _ key = new _ cache _ key ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . cached _ value ; ", "after_ctx": " ", "after_line": "return cached _ value ;", "predictions": ["return cached _ value ;"]}, {"before_ctx": " ", "before_line": " assert . equal ( STR , this . get _ connection _ string ( dt ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . equal ( STR , get _ connection _ string ( dt ) ) ;", "predictions": ["assert . equal ( STR , null <%> <%> </@> <%> <%> ) </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " assert . equal ( STR , this . get _ connection _ string ( dt ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert . equal ( STR , get _ connection _ string ( dt ) ) ;", "predictions": ["assert . equal ( STR , get n this n this log n n this n _ dt ) ; ; ) ; <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " assert . equal ( STR , this . get _ connection _ string ( dt ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert . equal ( STR , get _ connection _ string ( dt ) ) ;", "predictions": ["assert . equal ( STR , get _ connection _ string ( dt ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " assert . equal ( STR , this . get _ connection _ string ( dt ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert . equal ( STR , get _ connection _ string ( dt ) ) ;", "predictions": ["assert . equal ( STR , get _ connection _ string ( dt ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " assert . equal ( STR , this . get _ connection _ string ( dt ) ) ; ", "after_ctx": " ", "after_line": "assert . equal ( STR , get _ connection _ string ( dt ) ) ;", "predictions": ["assert . equal ( STR , get <%> <%> _ null <-> <%> . equal this <%> <%> <%> <%> <%> <%> <%> ) = <@> equal <-> <%>"]}, {"before_ctx": " ", "before_line": " ( ( mock _ db _ connection ) this . connection ) . add _ to _ log ( STR , this . param _ count ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "( ( mock _ db _ connection ) connection ) . add _ to _ log ( STR , param _ count ) ;", "predictions": ["( ( mock _ db _ connection ) connection ) . add _ to _ log ( STR , param _ count ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " ( ( mock _ db _ connection ) this . connection ) . add _ to _ log ( STR , this . command _ text ) ; if ( this . connection . connection _ string = = STR ) ", "after_ctx": " ", "after_line": "( ( mock _ db _ connection ) connection ) . add _ to _ log ( STR , command _ text ) ; if ( connection . connection _ string = = STR )", "predictions": ["( ( mock _ db _ connection ) connection ) . add _ to _ log ( STR , command _ text ) ; if ( connection . </%> _ string ( ( ) </%> ( ) </%> ( ) </%> ( _ ) </%> ( _ ) </%> ( _ ) </%> ( ) </%> </%> )"]}, {"before_ctx": " ", "before_line": " get { return this . parameter _ name ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return parameter _ name ; }", "predictions": ["get { return parameter _ name <%> }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parameter _ name = value ; ", "after_ctx": " ", "after_line": "parameter _ name = value ;", "predictions": ["parameter _ name = value ;"]}, {"before_ctx": " ", "before_line": " get { return this . parameter _ value ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return parameter _ value ; }", "predictions": ["get { return parameter _ value <%> }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parameter _ value = value ; ", "after_ctx": " ", "after_line": "parameter _ value = value ;", "predictions": ["parameter _ value = value ;"]}, {"before_ctx": " ", "before_line": " this . current _ process _ id = process . get _ current _ process ( ) . id ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "current _ process _ id = process . get _ current _ process ( ) . id ;", "predictions": ["current _ process _ id = <%> . get . , <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " get { return this . current _ process _ id ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return current _ process _ id ; }", "predictions": ["get { return current _ process = <@> </%> }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . get _ process _ name ( ) ; return this . current _ process _ name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get _ process _ name ( ) ; return current _ process _ name ;", "predictions": ["get _ process _ name ( ) ; return current _ process _ name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . get _ process _ name ( ) ; return this . current _ process _ base _ name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get _ process _ name ( ) ; return current _ process _ base _ name ;", "predictions": ["get _ process _ name ( ) ; return current _ process _ base _ name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . current _ process _ name = = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( current _ process _ name = = null )", "predictions": ["if ( current _ process _ assert </%> </%> event ! </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . current _ process _ name = process . get _ current _ process ( ) . main _ module . file _ name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "current _ process _ name = process . get _ current _ process ( ) . main _ module . file _ name ;", "predictions": ["current _ process _ name = process . get _ current _ process ( ) . main _ module . file _ name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . current _ process _ name = unknown _ process _ name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "current _ process _ name = unknown _ process _ name ;", "predictions": ["current _ process _ name = <@> this this . current this"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . current _ process _ base _ name = path . get _ file _ name _ without _ extension ( this . current _ process _ name ) ; ", "after_ctx": " ", "after_line": "current _ process _ base _ name = path . get _ file _ name _ without _ extension ( current _ process _ name ) ;", "predictions": ["current _ process _ base _ name = path . get _ file _ name _ without _ extension ( current _ process . <%> ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . throw _ exceptions ) ", "after_ctx": " ", "after_line": "if ( throw _ exceptions )", "predictions": ["if ( throw _ exceptions )"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ; using internal ;", "predictions": ["using n _ log _ internal ; using n _ log . internal this"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " if ( this . full _ name ) ", "after_ctx": " ", "after_line": "if ( full _ name )", "predictions": ["if ( full _ name )"]}, {"before_ctx": " ", "before_line": " using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using internal ;", "predictions": ["using n _ log _ internal ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . string _ reader = string _ reader ; this . token _ type = condition _ token _ type . beginning _ of _ input ; this . get _ next _ token ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "string _ reader = string _ reader ; token _ type = condition _ token _ type . beginning _ of _ input ; get _ next _ token ( ) ;", "predictions": ["string _ reader = string _ reader ; token _ type = condition _ token _ type this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this . exception _ next _ token ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " string s = this . token _ value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "string s = token _ value ;", "predictions": ["string s = token _ value ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . token _ type ! = token _ type ) { throw new condition _ parse _ exception ( STR + token _ type + STR + this . token _ type + STR + this . token _ value + STR ) ; } this . get _ next _ token ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( token _ type ! = token _ type ) { throw new condition _ parse _ exception ( STR + token _ type + STR + token _ type + STR + token _ value + STR ) ; } get _ next _ token ( ) ;", "predictions": ["if ( token _ type ! = token _ type ) { throw new condition _ parse _ exception ( STR + token _ type + STR + token _ type + STR + token _ value + STR ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . token _ type ! = condition _ token _ type . keyword ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( token _ type ! = condition _ token _ type . keyword )", "predictions": ["if ( token _ type ! = condition _ token _ type . keyword )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " string s = this . token _ value ; this . get _ next _ token ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "string s = token _ value ; get _ next _ token ( ) ;", "predictions": ["string s = token _ value ; get _ next _ token ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . token _ type ! = condition _ token _ type . keyword ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( token _ type ! = condition _ token _ type . keyword )", "predictions": ["if ( token _ type ! = condition _ token _ <@> . read </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . token _ type ! = condition _ token _ type . end _ of _ input ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( token _ type ! = condition _ token _ type . end _ of _ input )", "predictions": ["if ( token _ type ! = condition _ token _ type this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this . <-> _ </%> STR ! ! </@> _ </%> _ </%> . <@> _ exception _ input ( <-> ( <-> _ </%> _ </%> . <@> _ exception _ input ( <@> _ </%> _ input ( <-> _ </%> _"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . token _ type = = condition _ token _ type . number ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return token _ type = = condition _ token _ type . number ;", "predictions": ["return token _ type = = condition _ token _ type . = ("]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . token _ type = = token _ type ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return token _ type = = token _ type ;", "predictions": ["return token _ type = = token _ type ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . token _ type = = condition _ token _ type . end _ of _ input ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( token _ type = = condition _ token _ type . end _ of _ input )", "predictions": ["if ( token _ type = = condition _ token _ type . end _ of _ input )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . skip _ whitespace ( ) ; this . token _ position = this . token _ position ; int i = this . peek _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "skip _ whitespace ( ) ; token _ position = token _ position ; int i = peek _ char ( ) ;", "predictions": ["skip _ whitespace ( ) ; token _ position = token _ position ; int i = peek _ char token type ="]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . token _ type = condition _ token _ type . end _ of _ input ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "token _ type = condition _ token _ type . end _ of _ input ;", "predictions": ["token _ type = condition _ token _ type . end _ of _ input ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . parse _ number ( ch ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parse _ number ( ch ) ;", "predictions": ["parse _ number ( ch ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse _ single _ quoted _ string ( ch ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parse _ single _ quoted _ string ( ch ) ;", "predictions": ["parse _ single _ quoted _ string ( ch ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . parse _ keyword ( ch ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parse _ keyword ( ch ) ;", "predictions": ["parse _ keyword ( ch ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . token _ value = ch . to _ string ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "token _ value = ch . to _ string ( ) ;", "predictions": ["token _ value = ch . to _ string ( ) ! token ,"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . token _ type = tt ; this . token _ value = new string ( ch , 1 ) ; this . read _ char ( ) ; ", "after_ctx": " ", "after_line": "token _ type = tt ; token _ value = new string ( ch , 1 ) ; read _ char ( ) ;", "predictions": ["token _ type = tt ; token _ value = new string </%> ch = _ ; read <-> ) <%> read <%> _ read </%> _ _"]}, {"before_ctx": " ", "before_line": " this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "read _ char ( ) ; int next _ char = peek _ char ( ) ;", "predictions": ["read _ char ( ) ; int next _ char = peek = _ _ token ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . token _ type = condition _ token _ type . not _ equal ; this . token _ value = STR ; this . read _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ type = condition _ token _ type . not _ equal ; token _ value = STR ; read _ char ( ) ;", "predictions": ["token _ type = condition _ token _ type . not _ equal ; token _ value = STR ; read _ char </@> <@> char"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . token _ type = condition _ token _ type . less _ than _ or _ equal _ to ; this . token _ value = STR ; this . read _ char ( ) ; return true ; } this . token _ type = condition _ token _ type . less _ than ; this . token _ value = STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ type = condition _ token _ type . less _ than _ or _ equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . less _ than ; token _ value = STR ;", "predictions": ["token _ type = condition _ token _ type . less _ than _ or _ equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . less _ than ; token _ value = STR ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "read _ char ( ) ; int next _ char = peek _ char ( ) ;", "predictions": ["read _ char ( ) ; int next _ char = peek _ char ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . token _ type = condition _ token _ type . greater _ than _ or _ equal _ to ; this . token _ value = STR ; this . read _ char ( ) ; return true ; } this . token _ type = condition _ token _ type . greater _ than ; this . token _ value = STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ type = condition _ token _ type . greater _ than _ or _ equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . greater _ than ; token _ value = STR ;", "predictions": ["token _ type = condition _ token _ type . greater _ than _ or _ equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . greater _ than ; token _ value = STR ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "read _ char ( ) ; int next _ char = peek _ char ( ) ;", "predictions": ["read _ char ( ) ; int next _ char = peek _ char ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . token _ type = condition _ token _ type . not _ equal ; this . token _ value = STR ; this . read _ char ( ) ; return true ; } this . token _ type = condition _ token _ type . not ; this . token _ value = STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ type = condition _ token _ type . not _ equal ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . not ; token _ value = STR ;", "predictions": ["token _ type = condition _ token _ type . not _ equal ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . not ; token _ value = STR ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "read _ char ( ) ; int next _ char = peek _ char ( ) ;", "predictions": ["read _ char ( ) ; int next _ char = peek _ char ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . token _ type = condition _ token _ type . and ; this . token _ value = STR ; this . read _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ type = condition _ token _ type . and ; token _ value = STR ; read _ char ( ) ;", "predictions": ["token _ type = condition _ token _ type . and ; token _ value = STR ; read _ char ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "read _ char ( ) ; int next _ char = peek _ char ( ) ;", "predictions": ["read _ char ( ) ; int next _ char = peek _ char ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . token _ type = condition _ token _ type . or ; this . token _ value = STR ; this . read _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ type = condition _ token _ type . or ; token _ value = STR ; read _ char ( ) ;", "predictions": ["token _ type = condition _ token _ type . or ; token _ value = STR ; read _ char ( ) ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . read _ char ( ) ; int next _ char = this . peek _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "read _ char ( ) ; int next _ char = peek _ char ( ) ;", "predictions": ["read _ char ( ) ; int next _ char = peek _ char ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . token _ type = condition _ token _ type . equal _ to ; this . token _ value = STR ; this . read _ char ( ) ; return true ; } this . token _ type = condition _ token _ type . equal _ to ; this . token _ value = STR ; ", "after_ctx": " ", "after_line": "token _ type = condition _ token _ type . equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . equal _ to ; token _ value = STR ;", "predictions": ["token _ type = condition _ token _ type . equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . equal _ to ; token _ value = STR ;"]}, {"before_ctx": " ", "before_line": " this . token _ type = condition _ token _ type . string ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ type = condition _ token _ type . string ;", "predictions": ["token _ type = condition _ token _ type . string ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . read _ char ( ) ; while ( ( i = this . peek _ char ( ) ) ! = - 1 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "read _ char ( ) ; while ( ( i = peek _ char ( ) ) ! = - 1 )", "predictions": ["read _ char ( ) ; while ( ( i = peek _ char ( ) ) ! = - 1 )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " sb . append ( ( char ) this . read _ char ( ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "sb . append ( ( char ) read _ char ( ) ) ;", "predictions": ["sb . append ( ( char ) read _ char ( ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . peek _ char ( ) = = ( int ) '\\'' ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( peek _ char ( ) = = ( int ) '\\'' )", "predictions": ["if ( peek _ char ( ) = = ( int ) '\\'' )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . read _ char ( ) ; ", "after_ctx": " ", "after_line": "read _ char ( ) ;", "predictions": ["read _ char ( ) ;"]}, {"before_ctx": " ", "before_line": " this . token _ value = sb . to _ string ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ value = sb . to _ string ( ) ;", "predictions": ["token _ value = sb . to _ string ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . token _ type = condition _ token _ type . keyword ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ type = condition _ token _ type . keyword ;", "predictions": ["token _ type = condition _ token _ type . keyword ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . read _ char ( ) ; while ( ( i = this . peek _ char ( ) ) ! = - 1 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "read _ char ( ) ; while ( ( i = peek _ char ( ) ) ! = - 1 )", "predictions": ["read _ char ( ) ; while ( ( i = peek _ char ( ) ) <@> char _ append <-> <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " sb . append ( ( char ) this . read _ char ( ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "sb . append ( ( char ) read _ char ( ) ) ;", "predictions": ["sb . append ( ( char ) read _ char ( ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . token _ value = sb . to _ string ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ value = sb . to _ string ( ) ;", "predictions": ["token _ value = sb . to _ string ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . token _ type = condition _ token _ type . number ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "token _ type = condition _ token _ type . number ;", "predictions": ["token _ type = condition _ token _ type . number ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . read _ char ( ) ; while ( ( i = this . peek _ char ( ) ) ! = - 1 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "read _ char ( ) ; while ( ( i = peek _ char ( ) ) ! = - 1 )", "predictions": ["read _ char ( ) ; while ( ( i = peek _ char ( ) ) <@> = _ char <-> <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " sb . append ( ( char ) this . read _ char ( ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "sb . append ( ( char ) read _ char ( ) ) ;", "predictions": ["sb . append ( ( char ) read _ char ( ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . token _ value = sb . to _ string ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "token _ value = sb . to _ string ( ) ;", "predictions": ["token _ value = sb . to _ type ( </@> <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " while ( ( ch = this . peek _ char ( ) ) ! = - 1 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "while ( ( ch = peek _ char ( ) ) ! = - 1 )", "predictions": ["while ( ( ch = peek _ char . this this </@> ; <@> _ <@> this this ( char ! this this <%> read char this this this <%> ( ; ) this <%> ( ; next int read . this this <%> this <%> ( read int char int . <@> message . . . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . read _ char ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "read _ char ( ) ;", "predictions": ["read _ char ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . character = character ; this . token _ type = token _ type ; ", "after_ctx": " ", "after_line": "character = character ; token _ type = token _ type ;", "predictions": ["character = character ; token _ type = ) <%>"]}, {"before_ctx": " ", "before_line": " get { return this . x ; } set { this . x = value ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return x ; } set { x = value ; }", "predictions": ["get { return x ; } set { <-> = token <%> _ _ _ _"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . action ; ", "after_ctx": " ", "after_line": "return action ;", "predictions": ["return action ;"]}, {"before_ctx": " ", "before_line": " string _ comparison comparison _ type = this . ignore _ case ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "string _ comparison comparison _ type = ignore _ case", "predictions": ["string _ comparison comparison _ type = ignore <-> 1"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ! this . layout . render ( log _ event ) . equals ( this . compare _ to , comparison _ type ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! layout . render ( log _ event ) . equals ( compare _ to , comparison _ type ) )", "predictions": ["if ( ! layout . render ( log _ event ) . equals ( compare _ to char ; ; <%> ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . action ; ", "after_ctx": " ", "after_line": "return action ;", "predictions": ["return action ;"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . message _ limit = message _ limit ; this . interval = interval ; this . wrapped _ target = wrapped _ target ; this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( limiting _ target _ wrapper ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "message _ limit = message _ limit ; interval = interval ; wrapped _ target = wrapped _ target ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( limiting _ target _ wrapper ) ;", "predictions": ["message _ limit = message _ limit ; interval = interval ; wrapped _ target = wrapped _ target ; optimize _ buffer . reuse <%> get get get . <%> char char . limiting . limiting . _ _ wrapper ( ( typeof . limiting . _ . wrapper ( _ _ wrapper ( ( typeof . limiting . _ . wrapper ( _ _ wrapper ( ( typeof . limiting . _ ( wrapper ( _ _ _ wrapper ( ( typeof . limiting . _ . wrapper ( _ typeof ( limiting ( _ _ wrapper ("]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . message _ limit < = 0 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( message _ limit < = 0 )", "predictions": ["if ( message _ limit < = </@> <%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . interval < = time _ span . zero ) ", "after_ctx": " ", "after_line": "if ( interval < = time _ span . zero )", "predictions": ["if ( interval < = time <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . throw _ exceptions ) ", "after_ctx": " ", "after_line": "if ( throw _ exceptions )", "predictions": ["if ( throw _ exceptions )"]}, {"before_ctx": " ", "before_line": " assert . true ( this . flush _ count < = this . write _ count ) ; this . write _ count + + ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert . true ( flush _ count < = write _ count ) ; write _ count + + ;", "predictions": ["assert . true ( flush _ count < = ; ) ( ) ( ) ( + . <-> ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ count + + ; ", "after_ctx": " ", "after_line": "flush _ count + + ;", "predictions": ["flush _ count + + ;"]}, {"before_ctx": " ", "before_line": " this . open _ async ( null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "open _ async ( null ) ;", "predictions": ["open _ async ( null ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . invoke _ async ( this . on _ begin _ open , null , this . on _ end _ open , this . on _ open _ completed , user _ state ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "invoke _ async ( on _ begin _ open , null , on _ end _ open , on _ open _ completed , user _ state ) ;", "predictions": ["invoke _ async ( on _ begin _ open , null , on _ end _ file , factory <-> file <-> target * user <%> user open timeout open user user user user user ) timeout"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . close _ async ( null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "close _ async ( null ) ;", "predictions": ["close _ async ( null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . on _ end _ process _ log _ messages , this . on _ process _ log _ messages _ completed , ", "after_ctx": " <%> <-> this . </%>", "after_line": "on _ end _ process _ log _ messages , on _ process _ log _ messages _ completed ,", "predictions": ["on _ end _ process _ log _ messages ; file _ ! _ log _ <-> _ <@> )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . begin _ process _ log _ messages ( events , callback , async _ state ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return begin _ process _ log _ messages ( events , callback , async _ state ) ;", "predictions": ["return begin _ process _ log _ messages ( events ; callback ; null ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . end _ process _ log _ messages ( result ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "end _ process _ log _ messages ( result ) ;", "predictions": ["end _ process _ log _ messages ( result ( result </@> ) ) ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . process _ log _ messages _ completed ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( process _ log _ messages _ completed ! = null )", "predictions": ["if ( process _ log _ messages _ completed )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . process _ log _ messages _ completed ( this , new async _ completed _ event _ args ( e . error , e . cancelled , e . user _ state ) ) ; ", "after_ctx": " ", "after_line": "process _ log _ messages _ completed ( this , new async _ completed _ event _ args ( e . error , e . cancelled , e . user _ state ) ) ;", "predictions": ["process _ log _ messages _ completed ( this <%> source <%> source <%> current <%> </%> this this this this this this this this this this this this this this this this this this this , <-> this user <%> . user ) this <%> <%> . state ) ) <%> user . user ) ) <%> user . user ) ) <%> user . user ) this <%> <%> . user ) ) <%> user <%> ) ) ) <%> user ) ) ) user user . user ) ) <%> user . user ) ) this this"]}, {"before_ctx": " ", "before_line": " if ( this . open _ completed ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( open _ completed ! = null )", "predictions": ["if ( open _ completed ! = null </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . open _ completed ( this , new async _ completed _ event _ args ( e . error , e . cancelled , e . user _ state ) ) ; ", "after_ctx": " ", "after_line": "open _ completed ( this , new async _ completed _ event _ args ( e . error , e . cancelled , e . user _ state ) ) ;", "predictions": ["open _ completed ( this , new async _ this this process this _ <-> . error this <-> . cancelled <%> <%> . target _ source ( ( user . user . user ) ) _ user . error ) , null , , <%> this , <%> . user , <%> . user this , null , <%> . end this , <%> . user _ user , , null ) open open this . , _ on this , <%> . user , <%> . user _ user , , , state , ,"]}, {"before_ctx": " ", "before_line": " if ( this . close _ completed ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( close _ completed ! = null )", "predictions": ["if ( close _ completed ! = open _ null </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . close _ completed ( this , new async _ completed _ event _ args ( e . error , e . cancelled , e . user _ state ) ) ; ", "after_ctx": " ", "after_line": "close _ completed ( this , new async _ completed _ event _ args ( e . error , e . cancelled , e . user _ state ) ) ;", "predictions": ["close _ completed ( this , new async _ completed & mono & <@> is if process <%> <%> _ cancelled this <-> _ process . new ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " if ( this . file _ appender _ cache ! = null ) { this . file _ appender _ cache . check _ close _ appenders - = auto _ closing _ timer _ callback ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( file _ appender _ cache ! = null ) { file _ appender _ cache . check _ close _ appenders - = auto _ closing _ timer _ callback ;", "predictions": ["if ( file _ appender _ cache ! = user </@> { _ <%> _ <-> _ check _ ( auto . target _ timer _ callback </@> </@> auto . closing . timer . callback ; ) ."]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . cleanup _ initialized _ files ( time _ source . current . time . add _ days ( - file _ target . initialized _ files _ cleanup _ period ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "cleanup _ initialized _ files ( time _ source . current . time . add _ days ( - initialized _ files _ cleanup _ period ) ) ;", "predictions": ["cleanup _ initialized _ files ( time _ source . get . ; . full . add ( | file . target _ ) this on on on this <%> period factory factory factory factory ) <@> <@> factory ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> file _ target . </%> ", "before_line": " foreach ( var file in this . initialized _ files ) ", "after_ctx": " ", "after_line": "foreach ( var file in initialized _ files )", "predictions": ["foreach ( var file in initialized _ files <@> ;"]}, {"before_ctx": " ", "before_line": " if ( this . discard _ all ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( discard _ all )", "predictions": ["if ( discard _ all )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " else if ( ! this . keep _ file _ open ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "else if ( ! keep _ file _ open )", "predictions": ["else if ( ! keep _ file _ open )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " else if ( this . network _ writes ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "else if ( network _ writes )", "predictions": ["else if ( network _ writes )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " else if ( this . concurrent _ writes ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "else if ( concurrent _ writes )", "predictions": ["else if ( concurrent _ writes )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ! this . force _ mutex _ concurrent _ writes & & platform _ detector . is _ desktop _ win & & ! platform _ detector . is _ mono ) ", "after_ctx": " ", "after_line": "if ( ! force _ mutex _ concurrent _ writes & & platform _ detector . is _ desktop _ win & & ! platform _ detector . is _ mono )", "predictions": ["if ( ! force _ mutex _ concurrent _ writes . . , , , </%> . </%> this _ close . . <-> . _ . mono"]}, {"before_ctx": " ", "before_line": " return this . archive _ above _ size ! = file _ target . archive _ above _ size _ disabled | | this . archive _ every ! = file _ archive _ period . none ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return archive _ above _ size ! = archive _ above _ size _ disabled | | archive _ every ! = file _ archive _ period . none ;", "predictions": ["return archive _ above _ size ! = file . target . ) . ) close </@> , , ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> file _ target . </%> <%> <-> this . </%> ", "before_line": " this . appender _ factory = get _ file _ appender _ factory ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "appender _ factory = get _ file _ appender _ factory ( ) ;", "predictions": ["appender _ factory = get _ file _ appender _ factory ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . open _ file _ cache _ timeout * NUM , this . open _ file _ cache _ timeout * NUM ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "open _ file _ cache _ timeout * NUM , open _ file _ cache _ timeout * NUM ) ;", "predictions": ["open _ file _ cache _ timeout * NUM , open _ file _ cache _ timeout * NUM ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . auto _ closing _ timer = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "auto _ closing _ timer = null ;", "predictions": ["auto _ closing _ timer = null ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . file _ archive _ helper = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "file _ archive _ helper = null ;", "predictions": ["file _ archive _ helper = null ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var log _ file _ name = this . get _ full _ file _ name ( log _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var log _ file _ name = get _ full _ file _ name ( log _ event ) ;", "predictions": ["var log _ file _ name = get _ full </%> file </%> ( </%> <@> async async _ event async"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " byte [ ] bytes = this . get _ bytes _ to _ write ( log _ event ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "byte [ ] bytes = get _ bytes _ to _ write ( log _ event ) ;", "predictions": ["byte [ ] bytes = get _ bytes _ to _ write ( log _ event ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . full _ file _ name = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( full _ file _ name = = null )", "predictions": ["if ( full _ file _ name = = null )"]}, {"before_ctx": " ", "before_line": " byte [ ] bytes = this . get _ bytes _ to _ write ( ev . log _ event ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "byte [ ] bytes = get _ bytes _ to _ write ( ev . log _ event ) ;", "predictions": ["byte [ ] bytes = get _ bytes _ to _ write ( ev this this . log . log _ event </%> ,"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . flush _ current _ file _ writes ( file _ name , first _ log _ event , ms , out last _ exception ) ; ", "after_ctx": " ", "after_line": "flush _ current _ file _ writes ( file _ name , first _ log _ event , ms , out last _ exception ) ;", "predictions": ["flush _ current _ file _ writes ( file _ name , first _ log _ event , ms . out new . get . files ("]}, {"before_ctx": " ", "before_line": " this . write _ to _ file ( file _ name , bytes _ to _ write , initialized _ new _ file ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "write _ to _ file ( file _ name , bytes _ to _ write , initialized _ new _ file ) ;", "predictions": ["write _ to _ file ( file _ name , bytes _ to _ write , initialized _ new _ <%> </@> ) _ mode . this </@> <-> ) <->"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " builder . copy _ to _ stream ( work _ stream , this . encoding , transform _ buffer ) ; ", "after_ctx": " ", "after_line": "builder . copy _ to _ stream ( work _ stream , encoding , transform _ buffer ) ;", "predictions": ["builder . copy _ to _ stream ( work _ stream , encoding this transform . [ [ if = is ) </%> ; _ <-> bytes ; ) )"]}, {"before_ctx": " ", "before_line": " var cleanup _ archive _ files = file _ archive _ style . check _ archive _ cleanup ( archive _ file _ pattern , existing _ archive _ files , this . max _ archive _ files ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var cleanup _ archive _ files = file _ archive _ style . check _ archive _ cleanup ( archive _ file _ pattern , existing _ archive _ files , max _ archive _ files ) ;", "predictions": ["var cleanup _ archive _ files = check _ archive _ cleanup ( archive _ file _ pattern , existing _ archive _ <%> <-> on _ . _ , </%> archive _ <%> _ pattern this . max _ archive _ files ) name ( max _ file _ pattern </%> existing . this <%> <%> _ . _ <%> ( if _ . _ <%> ( file _ files _ max <-> file _ . _ <%> ( if _ . _ <%> <-> file _ . _ <%> ( if _ . _ <%> ( if _"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . full _ archive _ file _ name = = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( full _ archive _ file _ name = = null )", "predictions": ["if ( full _ archive _ file _ name = = null )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " archive _ file = this . get _ archive _ file _ name ( file _ name , ev , upcoming _ write _ size ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "archive _ file = get _ archive _ file _ name ( file _ name , ev , upcoming _ write _ size ) ;", "predictions": ["archive _ file = get _ archive _ file _ name ( file _ name , ev , upcoming _ write _ size </@> </@>"]}, {"before_ctx": " ", "before_line": " var validated _ archive _ file = this . get _ archive _ file _ name ( file _ name , ev , upcoming _ write _ size ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var validated _ archive _ file = get _ archive _ file _ name ( file _ name , ev , upcoming _ write _ size ) ;", "predictions": ["var validated _ archive _ file = get _ archive _ file _ name ( file _ name , ev , upcoming _ var _ size <%> <%> </@> </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . do _ auto _ archive ( archive _ file , ev , initialized _ new _ file ) ; ", "after_ctx": " ", "after_line": "do _ auto _ archive ( archive _ file , ev , initialized _ new _ file ) ;", "predictions": ["do _ auto _ archive ( archive _ file , ev , initialized _ new _ file ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . archive _ above _ size = = archive _ above _ size _ disabled ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( archive _ above _ size = = archive _ above _ size _ disabled )", "predictions": ["if ( archive _ above _ size = = archive _ above _ size _ disabled if <@> ! + _ ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var should _ archive = length . value + upcoming _ write _ size > this . archive _ above _ size ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var should _ archive = length . value + upcoming _ write _ size > archive _ above _ size ;", "predictions": ["var should _ archive = length . value + upcoming _ write _ size > archive _ above _ ; write"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . archive _ every = = file _ archive _ period . none ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( archive _ every = = file _ archive _ period . none )", "predictions": ["if ( archive _ every = = file _ archive _ period . byte </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " date _ time file _ create _ time = truncate _ archive _ time ( creation _ time _ source . value , this . archive _ every ) ; date _ time log _ event _ time = truncate _ archive _ time ( log _ event . time _ stamp , this . archive _ every ) ; ", "after_ctx": " ", "after_line": "date _ time file _ create _ time = truncate _ archive _ time ( creation _ time _ source . value , archive _ every ) ; date _ time log _ event _ time = truncate _ archive _ time ( log _ event . time _ stamp , archive _ every ) ;", "predictions": ["date _ time file _ create _ time = truncate _ archive _ time ( creation _ time _ source . value , archive _ every ) ; date _ time log _ event _ time = truncate _ archive _ time ( log _ event . time _ stamp , archive _ every ) ;"]}, {"before_ctx": " ", "before_line": " lock ( this . sync _ root ) { if ( ! this . is _ initialized ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { if ( ! is _ initialized )", "predictions": ["lock ( sync _ root ) { if ( ! is _ initialized )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " date _ time expire _ time = this . open _ file _ cache _ timeout > 0 ? date _ time . utc _ now . add _ seconds ( - this . open _ file _ cache _ timeout ) : date _ time . min _ value ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "date _ time expire _ time = open _ file _ cache _ timeout > 0 ? date _ time . utc _ now . add _ seconds ( - open _ file _ cache _ timeout ) : date _ time . min _ value ;", "predictions": ["date _ time expire _ time = open _ file _ cache _ timeout > 0 ? date _ time . utc _ now . add _ seconds ( - this . open _ file _ cache _ timeout ) : date _ time . min _ value ;"]}, {"before_ctx": " ", "before_line": " if ( this . replace _ file _ contents _ on _ each _ write ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( replace _ file _ contents _ on _ each _ write )", "predictions": ["if ( replace _ file _ contents _ on _ each _ write ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ header ( appender ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write _ header ( appender ) ;", "predictions": ["write _ header ( appender ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . auto _ flush ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( auto _ flush )", "predictions": ["if ( auto _ flush )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . initialized _ files [ file _ name ] = now ; this . initialized _ files _ counter + + ; ", "after_ctx": " <%> <-> this . </%> <%> <-> file _ target . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "initialized _ files [ file _ name ] = now ; initialized _ files _ counter + + ;", "predictions": ["initialized _ files [ file _ name ] = now ; initialized _ files _ counter + + ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . initialized _ files _ counter > = file _ target . initialized _ files _ counter _ max ) { this . initialized _ files _ counter = 0 ; this . cleanup _ initialized _ files ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( initialized _ files _ counter > = initialized _ files _ counter _ max ) { initialized _ files _ counter = 0 ; cleanup _ initialized _ files ( ) ;", "predictions": ["if ( initialized _ files _ counter > = file _ target . initialized _ files _ counter _ max ) { initialized _ files _ counter = 0 ; cleanup _ initialized _ files ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ( is _ archiving ) | | ( ! this . write _ footer _ on _ archiving _ only ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ( is _ archiving ) | | ( ! write _ footer _ on _ archiving _ only ) )", "predictions": ["if ( ( is _ archiving ) | | ( ! write _ footer _ on _ archiving _ only ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " array _ segment < byte > footer _ bytes = this . get _ layout _ bytes ( footer ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "array _ segment < byte > footer _ bytes = get _ layout _ bytes ( footer ) ;", "predictions": ["array _ segment < byte > footer _ bytes = get _ layout _ bytes ( footer ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ file ( file _ name , footer _ bytes , false ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write _ to _ file ( file _ name , footer _ bytes , false ) ;", "predictions": ["write _ to _ file ( file _ name , footer _ bytes , false ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . do _ auto _ archive ( file _ name , log _ event , true ) ; ", "after_ctx": " ", "after_line": "do _ auto _ archive ( file _ name , log _ event , true ) ;", "predictions": ["do _ auto _ archive ( file _ name , log _ event _ true </%> true </%> ;"]}, {"before_ctx": " ", "before_line": " if ( this . delete _ old _ file _ on _ startup ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( delete _ old _ file _ on _ startup )", "predictions": ["if ( delete _ old _ file _ on _ startup )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( file _ archive _ mode _ factory . should _ delete _ old _ archives ( this . max _ archive _ files ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( file _ archive _ mode _ factory . should _ delete _ old _ archives ( max _ archive _ files ) )", "predictions": ["if ( file _ archive _ mode _ factory . should _ delete _ old _ archives ( max _ archive _ is ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( file _ archive _ style . attempt _ cleanup _ on _ initialize _ file ( archive _ file _ pattern , this . max _ archive _ files ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( file _ archive _ style . attempt _ cleanup _ on _ initialize _ file ( archive _ file _ pattern , max _ archive _ files ) )", "predictions": ["if ( file _ archive _ style . attempt _ cleanup _ on _ initialize _ file ( archive _ file _ pattern file file _ <%> _ = name name name name name name name name name name name name ) name"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var cleanup _ archive _ files = file _ archive _ style . check _ archive _ cleanup ( archive _ file _ pattern , existing _ archive _ files , this . max _ archive _ files ) ; ", "after_ctx": " ", "after_line": "var cleanup _ archive _ files = file _ archive _ style . check _ archive _ cleanup ( archive _ file _ pattern , existing _ archive _ files , max _ archive _ files ) ;", "predictions": ["var cleanup _ archive _ files = file _ archive _ style . check _ archive _ cleanup ( archive _ file _ write </%> size _ . . target _ this . target . this <%> . this <%> . this <%> . if _ . _ <%> = check _ ) _ <%> this this . <@> _ time _ files ) _ time _ files ) log log log log log ) log _ time _ create . </%> </%> _ time _ = event time _ time ( </@> _ date _ create ( </@> _"]}, {"before_ctx": " ", "before_line": " array _ segment < byte > header _ bytes = this . get _ layout _ bytes ( header ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "array _ segment < byte > header _ bytes = get _ layout _ bytes ( header ) ;", "predictions": ["array _ segment < byte > header . get = get _ layout _ this </%> <-> error ( log _ type ) = get </%> </%> this <%> . method . byte > </%> _ <-> <@> get ( <%> log log ( <%> . <%> log . append <@> <%> log . <%> log log log . event </%> <%> log log log . event log . event <@> <%> log . <%> log . <%> <@> <%> log log . event <@> . event . <%> . event <@> <%> log . <%> log . event <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " array _ segment < byte > footer _ bytes = this . get _ layout _ bytes ( footer ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "array _ segment < byte > footer _ bytes = get _ layout _ bytes ( footer ) ;", "predictions": ["array _ segment < byte > footer _ bytes e get . get ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ! this . create _ dirs | | ! first _ attempt ) ", "after_ctx": " ", "after_line": "if ( ! create _ dirs | | ! first _ attempt )", "predictions": ["if ( ! create _ dirs | </%> . first ;"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( randomize _ group _ target ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "optimize _ buffer _ reuse = get _ type ( ) = = typeof ( randomize _ group _ target ) ;", "predictions": ["optimize _ buffer _ reuse = get _ type = log ) ) ) ) ! ) ) ! . typeof ) <@> <@> <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . random ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( random )", "predictions": ["lock ( random )"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ; using config ; using internal ;", "predictions": ["using n _ log _ common ; this"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " return base . to _ string ( ) + STR + this . wrapped _ target + STR ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return base . to _ string ( ) + STR + wrapped _ target + STR ;", "predictions": ["return base . to _ string ( ) + STR + wrapped _ target + STR ;"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( round _ robin _ group _ target ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "optimize _ buffer _ reuse = get _ type ( ) = = typeof ( round _ robin _ group _ target ) ;", "predictions": ["optimize _ buffer _ reuse = get _ type this ( ( ( method this method _ list _ group _ to STR this this this = = typeof current . round . </@> . target ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . lock _ object ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( lock _ object )", "predictions": ["lock ( lock _ object )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " selected _ target = this . current _ target ; this . current _ target = ( this . current _ target + 1 ) % this . targets . count ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "selected _ target = current _ target ; current _ target = ( current _ target + 1 ) % targets . count ;", "predictions": ["selected _ target = current _ target ; current _ target = ( current _ target + 1 ) % targets . count ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ; using layouts ;", "predictions": ["using n _ log _ layouts ; | this </%> . = ) ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . name = parameter _ name ; this . layout = parameter _ layout ; ", "after_ctx": " ", "after_line": "name = parameter _ name ; layout = parameter _ layout ;", "predictions": ["name = parameter _ name ; layout ) ) ) <-> ( <%> _ using log bytes bytes )"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ config ; using n _ log _ internal ; using n _ log _ layouts ; using n _ log _ log _ receiver _ service ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ; using config ; using internal ; using layouts ; using log _ receiver _ service ;", "predictions": ["using n _ log _ common ; using n _ log _ log _ receiver _ service ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . parameters = new list < method _ call _ parameter > ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parameters = new list < method _ call _ parameter > ( ) ;", "predictions": ["parameters = new list < method _ call _ parameter > </@> _ </%> _ names ."]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " this . write ( ( i _ list < async _ log _ event _ info > ) new [ ] { log _ event } ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write ( ( i _ list < async _ log _ event _ info > ) new [ ] { log _ event } ) ;", "predictions": ["write ( ( i _ list < async _ event _ , _ info </@> ) <@> = { . <-> } this this <-> <-> <%> <%> <%> . write ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . in _ call ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( in _ call )", "predictions": ["if ( in _ call )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . precalculate _ volatile _ layouts ( log _ events [ i ] . log _ event ) ; this . buffer . append ( log _ events [ i ] ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "precalculate _ volatile _ layouts ( log _ events [ i ] . log _ event ) ; buffer . append ( log _ events [ i ] ) ;", "predictions": ["precalculate _ volatile _ layouts ( log _ events [ i ] . log _ event ) ; buffer . append ( log _ events [ i ] ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var network _ log _ events = this . translate _ log _ events ( log _ events _ array ) ; this . send ( network _ log _ events , log _ events _ array , null ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var network _ log _ events = translate _ log _ events ( log _ events _ array ) ; send ( network _ log _ events , log _ events _ array , null ) ;", "predictions": ["var network _ log _ events = translate _ log _ events ( log _ events _ array ) ; send ( network _ log _ events , log _ events _ array , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . send _ buffered _ events ( async _ continuation ) ; ", "after_ctx": " ", "after_line": "send _ buffered _ events ( async _ continuation ) ;", "predictions": ["send _ buffered _ events ( async this </@> </%> ! _ </@> ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . client _ id ! = null ) { client _ id = this . client _ id . render ( log _ events [ 0 ] . log _ event ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( client _ id ! = null ) { client _ id = client _ id . render ( log _ events [ 0 ] . log _ event ) ;", "predictions": ["if ( client _ id ! = null ) { . <%> ( this _ <%> _ <%> _ render . </%> log log <%> <%> log <%> to log ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . merge _ event _ properties ( ev ) ; ", "after_ctx": " ", "after_line": "merge _ event _ properties ( ev ) ;", "predictions": ["merge _ event _ properties ( ev <-> <-> ;"]}, {"before_ctx": " ", "before_line": " network _ log _ events . events [ i ] = this . translate _ event ( ev . log _ event , network _ log _ events , string _ table ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "network _ log _ events . events [ i ] = translate _ event ( ev . log _ event , network _ log _ events , string _ table ) ;", "predictions": ["network _ log _ events . events [ i target = = _ </%> ) = _ </%> ) </@> ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ! this . on _ send ( events , async _ continuations ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! on _ send ( events , async _ continuations ) )", "predictions": ["if ( ! on _ send ( properties </@> config ; </@> <-> <-> <-> </@> ) <%> <%> < = = on"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " internal _ logger . error ( e . error , STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "internal _ logger . error ( e . error , STR , name ) ;", "predictions": ["internal _ logger . error ( e . error log log log log log log async async log </@> ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . send _ buffered _ events ( null ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "send _ buffered _ events ( null ) ;", "predictions": ["send _ buffered _ events ( null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . in _ call = true ; ", "after_ctx": " ", "after_line": "in _ call = true ;", "predictions": ["in _ call = true ;"]}, {"before_ctx": " ", "before_line": " if ( string . is _ null _ or _ empty ( this . endpoint _ configuration _ name ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( string . is _ null _ or _ empty ( endpoint _ configuration _ name ) )", "predictions": ["if ( string . is _ null . send . common log </@> _ <-> _ name <-> <-> ) ."]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . use _ binary _ encoding ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( use _ binary _ encoding )", "predictions": ["if ( use _ binary _ encoding <->"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , binding , new endpoint _ address ( this . endpoint _ address ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , binding , new endpoint _ address ( endpoint _ address ) ) ;", "predictions": ["client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , binding , new endpoint _ address ( endpoint _ address ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , this . endpoint _ configuration _ name , new endpoint _ address ( this . endpoint _ address ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , endpoint _ configuration _ name , new endpoint _ address ( endpoint _ address ) ) ;", "predictions": ["client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , endpoint _ configuration _ name , new endpoint _ address ( endpoint _ address ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . create _ wcf _ log _ receiver _ client ( ) ; ", "after_ctx": " ", "after_line": "return create _ wcf _ log _ receiver _ client ( ) ;", "predictions": ["return create _ wcf _ log _ from . </@> <-> ) public"]}, {"before_ctx": " ", "before_line": " lock ( this . sync _ root ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root )", "predictions": ["lock ( sync _ root )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var network _ log _ events = this . translate _ log _ events ( buffered _ events ) ; this . send ( network _ log _ events , buffered _ events , flush _ continuation ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "var network _ log _ events = translate _ log _ events ( buffered _ events ) ; send ( network _ log _ events , buffered _ events , flush _ continuation ) ;", "predictions": ["var network _ log _ events = translate _ log _ events ( buffered _ events ) ; send ( network _ log _ events , buffered _ events , flush _ continuation ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . in _ call = false ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "in _ call = false ;", "predictions": ["in _ call = false ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " internal _ logger . error ( exception , STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . error ( exception , STR , name ) ;", "predictions": ["internal _ logger . error ( exception this STR <%> <%> name ) public"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " internal _ logger . error ( exception , STR , this . name ) ; ", "after_ctx": " ", "after_line": "internal _ logger . error ( exception , STR , name ) ;", "predictions": ["internal _ logger . error ( exception this STR . name </%> ;"]}, {"before_ctx": " ", "before_line": " var config = new n _ log . config . logging _ configuration ( ) ; ", "after_ctx": " <%> <-> n _ log . config . </%>", "after_line": "var config = new logging _ configuration ( ) ;", "predictions": ["var config = new logging _ configuration </%> ) <@>"]}, {"before_ctx": "<%> <-> n _ log . config . </%> ", "before_line": " var config = new n _ log . config . logging _ configuration ( ) ; ", "after_ctx": " <%> <-> n _ log . config . </%>", "after_line": "var config = new logging _ configuration ( ) ;", "predictions": ["var config = new logging _ configuration ( </@> ->"]}, {"before_ctx": "<%> <-> n _ log . config . </%> ", "before_line": " var config = new n _ log . config . logging _ configuration ( ) ; ", "after_ctx": " ", "after_line": "var config = new logging _ configuration ( ) ;", "predictions": ["var config = new logging _ configuration ( </@> </@> ) <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . register _ items _ from _ assembly ( asm ) ; ", "after_ctx": " ", "after_line": "register _ items _ from _ assembly ( asm ) ;", "predictions": ["register _ items _ from _ assembly ( asm ) ;"]}, {"before_ctx": " ", "before_line": " get { return this . targets ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return targets ; }", "predictions": ["get { return targets ; }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " get { return this . filters ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return filters ; }", "predictions": ["get { return filters ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . layout _ renderers ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return layout _ renderers ;", "predictions": ["return layout _ renderers ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . layout _ renderers ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return layout _ renderers ; }", "predictions": ["get { return layout _ renderers ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . layouts ; } ", "after_ctx": " <%> <-> this . </%> <%> <*> public n _ log . targets . -> public </%> <%> <-> n _ log . targets . </%>", "after_line": "get { return layouts ; }", "predictions": ["get { return layouts ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . ambient _ properties ; } ", "after_ctx": " <%> <*> public n _ log . targets . -> public </%> <%> <-> n _ log . targets . </%>", "after_line": "get { return ambient _ properties ; }", "predictions": ["get { return ambient _ properties ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " public n _ log . targets . i _ json _ serializer json _ serializer { get { return json _ serializer as n _ log . targets . i _ json _ serializer ; } ", "after_ctx": " ", "after_line": "public i _ json _ serializer json _ serializer { get { return json _ serializer as i _ json _ serializer ; }", "predictions": ["public i _ json _ serializer json _ serializer { get { return <%> . ) as this"]}, {"before_ctx": " ", "before_line": " get { return this . time _ sources ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return time _ sources ; }", "predictions": ["get { return time _ sources ; exception"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " get { return this . condition _ methods ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return condition _ methods ; }", "predictions": ["get { return condition _ methods ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . register _ items _ from _ assembly ( assembly , string . empty ) ; ", "after_ctx": " ", "after_line": "register _ items _ from _ assembly ( assembly , string . empty ) ;", "predictions": ["register _ items _ from _ assembly <@> <-> <@> string . <@> public </@> public register <%> get"]}, {"before_ctx": " ", "before_line": " foreach ( i _ factory f in this . all _ factories ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "foreach ( i _ factory f in all _ factories )", "predictions": ["foreach ( i _ factory f in all </%> </%> _ factories </%> </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " foreach ( i _ factory f in this . all _ factories ) ", "after_ctx": " ", "after_line": "foreach ( i _ factory f in all _ factories )", "predictions": ["foreach ( i _ factory f in all this </%>"]}, {"before_ctx": " ", "before_line": " get { return this . x ; } set { this . x = value ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return x ; } set { x = value ; }", "predictions": ["get { return x ; } set </%> <%> return value <%> <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return STR + this . x ; ", "after_ctx": " ", "after_line": "return STR + x ;", "predictions": ["return STR + x ;"]}, {"before_ctx": " ", "before_line": " if ( this . padding ! = 0 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( padding ! = 0 )", "predictions": ["if ( padding ! = 0 )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . padding > 0 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( padding > 0 )", "predictions": ["if ( padding > 0 )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " s = s . pad _ left ( this . padding , this . pad _ character ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "s = s . pad _ left ( padding , pad _ character ) ;", "predictions": ["s = s . pad _ left ( return return -> -> _ <@> n this n ) this"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " s = s . pad _ right ( - this . padding , this . pad _ character ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "s = s . pad _ right ( - padding , pad _ character ) ;", "predictions": ["s = s . pad _ right ( - padding , pad _ character ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " int absolute _ padding = this . padding ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "int absolute _ padding = padding ;", "predictions": ["int absolute _ padding = padding ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . fixed _ length & & s . length > absolute _ padding ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( fixed _ length & & s . length > absolute _ padding )", "predictions": ["if ( fixed _ length & & s . length > = right event"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . alignment _ on _ truncation = = padding _ horizontal _ alignment . right ) ", "after_ctx": " ", "after_line": "if ( alignment _ on _ truncation = = padding _ horizontal _ alignment . right )", "predictions": ["if ( alignment _ on _ truncation = = <@> )"]}, {"before_ctx": " ", "before_line": " assert . equal ( this . get _ type ( ) . full _ name , logger . name ) ; ", "after_ctx": " <%> <-> n _ log . </%>", "after_line": "assert . equal ( get _ type ( ) . full _ name , logger . name ) ;", "predictions": ["assert . equal ( get _ type <%> <-> . { _ </%> ( s . ( <-> this <-> <-> . length this , . </%> this <-> <-> . </%> this <-> . </%> <-> <-> _ </%> <-> <-> . <@> this _ </%> <-> <-> <-> <-> . </%> this <-> . </%> this <-> <-> . </%> this <-> . </%> this <-> <-> . </%> <-> <-> . </%> this <-> logger . </%> <-> <-> <-> . </%> this <-> logger . </%> this <-> <-> . </%> <-> <-> . </%> this"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . max _ size = size ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "max _ size = size ;", "predictions": ["max _ size = size ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . logs = new queue < string > ( max _ size ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "logs = new queue < string > ( max _ size ) ;", "predictions": ["logs = new queue < string > ( max return size ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . logs = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "logs = null ;", "predictions": ["logs = null ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . logs = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( logs = = null )", "predictions": ["if ( logs = = null )"]}, {"before_ctx": " ", "before_line": " if ( log _ event . has _ properties & & log _ event . properties . try _ get _ value ( this . item , out value ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( log _ event . has _ properties & & log _ event . properties . try _ get _ value ( item , out value ) )", "predictions": ["if ( log _ event . has _ properties <-> <-> </@> this . <@> _ append . get . append . <-> . try </@> get this . <@> get this method method method out method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method <-> method method method method method method method method method method method method method method method method"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var format _ provider = get _ format _ provider ( log _ event , this . culture ) ; builder . append _ formatted _ value ( value , this . format , format _ provider ) ; ", "after_ctx": " ", "after_line": "var format _ provider = get _ format _ provider ( log _ event , culture ) ; builder . append _ formatted _ value ( value , format , format _ provider ) ;", "predictions": ["var format _ provider = get _ format _ </%> ; builder . append . append this = = <%> <-> <%> <-> ( <%> . </%> . <%> . <%> . <%> . <%> . culture ( culture <-> <%> <-> ( <%> . </%> . <%> . <%> ( log ( <%> . <%> <-> . culture ( <%> <-> <%> . <%> ( <%> . <%> ( culture ( <%> . <%> <-> </%> ( ; ( <%> . <%> . <%> . <%> ( <%> . <%> ( culture . <%> <-> ( <%> . </%>"]}, {"before_ctx": " ", "before_line": " this . socket = new socket ( address _ family , socket _ type , protocol _ type ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "socket = new socket ( address _ family , socket _ type , protocol _ type ) ;", "predictions": ["socket = new socket ( address _ log ( this . this <%> protocol . _ ) <-> . ) <-> <-> <-> ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . socket ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return socket ;", "predictions": ["return socket ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " ( ( i _ disposable ) this . socket ) . dispose ( ) ; ", "after_ctx": " ", "after_line": "( ( i _ disposable ) socket ) . dispose ( ) ;", "predictions": ["( ( i _ disposable ) socket <%> . dispose _ dispose this <%> <%> <%> length <%> ) ; dispose this <%> ( <%> </@> <-> format <@> format format format format ) ) ) ) ) ;"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " type target _ type = type . get _ type ( this . class _ name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "type target _ type = type . get _ type ( class _ name ) ;", "predictions": ["type target _ type = type . get _ type ( class _ name ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . method = target _ type . get _ method ( this . method _ name ) ; if ( this . method = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "method = target _ type . get _ method ( method _ name ) ; if ( method = = null )", "predictions": ["method = target _ type . get _ method ( method _ name ) ; if ( method = = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . needed _ parameters = this . method . get _ parameters ( ) . length ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "needed _ parameters = method . get _ parameters ( ) . length ;", "predictions": ["needed _ parameters = method . get _ parameters ) _ <@> value"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . method = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "method = null ;", "predictions": ["method = null ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . method = null ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "method = null ;", "predictions": ["method = null ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . method ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( method ! = null )", "predictions": ["if ( method ! = null )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " else if ( this . lhf = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "else if ( lhf = = null )", "predictions": ["else if ( lhf = = null <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . lhf = new layout _ with _ header _ and _ footer ( ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "lhf = new layout _ with _ header _ and _ footer ( )", "predictions": ["lhf = new layout _ with _ header this this this . ;"]}, {"before_ctx": " ", "before_line": " get { return this . is _ trace _ enabled ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return is _ trace _ enabled ; }", "predictions": ["get { return is _ trace _ <@> </%> }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " get { return this . is _ debug _ enabled ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return is _ debug _ enabled ; }", "predictions": ["get { return is _ debug _ = ( }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . is _ info _ enabled ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return is _ info _ enabled ; }", "predictions": ["get { return is _ info _ enabled ; max"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . is _ warn _ enabled ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return is _ warn _ enabled ; }", "predictions": ["get { return is _ warn _ enabled ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . is _ error _ enabled ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return is _ error _ enabled ; }", "predictions": ["get { return is _ error _ enabled ; if if if"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . is _ fatal _ enabled ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return is _ fatal _ enabled ; }", "predictions": ["get { return is _ fatal _ enabled ; }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , null , value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , null , value ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , null , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , value ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , value ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled )", "predictions": ["if ( is _ trace _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . trace , null , message _ func ( ) ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . trace , null , message _ func ( ) ) ;", "predictions": ["write _ to _ targets ( log _ level . trace </%> null </%> message . is <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> ( ( , if is is level is , format ] <%> . </@> this , , , , , ) , [ . , ) </%>"]}, {"before_ctx": " ", "before_line": " this . trace ( message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "trace ( message , exception ) ;", "predictions": ["trace ( message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , args ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , null , message ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , null , message ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , null , message ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , args ) ; ", "after_ctx": " ", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , args ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , args ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , exception ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , exception , message , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , message , null ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , message , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , exception , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , message , args ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , exception , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , format _ provider , message , args ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled )", "predictions": ["if ( is _ trace _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . trace ( message , exception _ candidate ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "trace ( message , exception _ candidate ) ;", "predictions": ["trace ( message , exception _ candidate ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;", "predictions": ["write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ trace _ enabled ) { this . write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , null , value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , null , value ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , null , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , value ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , value ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled )", "predictions": ["if ( is _ debug _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . debug , null , message _ func ( ) ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . debug , null , message _ func ( ) ) ;", "predictions": ["write _ to _ targets ( log _ level . func , null , null _ level ( ) ) ;"]}, {"before_ctx": " ", "before_line": " this . debug ( message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "debug ( message , exception ) ;", "predictions": ["debug ( message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , args ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , null , message ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , null , message ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , null , message ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , args ) ; ", "after_ctx": " ", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , args ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , args ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , exception ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , exception , message , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , message , null ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , message , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , exception , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , message , args ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , exception , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , format _ provider , message , args ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled )", "predictions": ["if ( is _ debug _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . debug ( message , exception _ candidate ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "debug ( message , exception _ candidate ) ;", "predictions": ["debug ( message , exception _ candidate ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;", "predictions": ["write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ debug _ enabled ) { this . write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , null , value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , null , value ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , null , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , value ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , value ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled )", "predictions": ["if ( is _ info _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . info , null , message _ func ( ) ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . info , null , message _ func ( ) ) ;", "predictions": ["write _ to _ targets ( log _ level . is </%> null null . if . if <%> <-> <-> <-> <-> <-> <-> <-> <-> ( ( , , level . level <%> , if ; ] <%> . ; ) </%> </%> , [ . <@> ) </%>"]}, {"before_ctx": " ", "before_line": " this . info ( message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "info ( message , exception ) ;", "predictions": ["info ( message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , args ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , null , message ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , null , message ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , null , message ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , args ) ; ", "after_ctx": " ", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , args ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , args ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , exception ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , exception , message , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , message , null ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , message , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , exception , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , message , args ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , exception , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , format _ provider , message , args ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled )", "predictions": ["if ( is _ info _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . info ( message , exception _ candidate ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "info ( message , exception _ candidate ) ;", "predictions": ["info ( message , exception _ candidate ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;", "predictions": ["write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ info _ enabled ) { this . write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , null , value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , null , value ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , null , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , value ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , value ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled )", "predictions": ["if ( is _ warn _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . warn , null , message _ func ( ) ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . warn , null , message _ func ( ) ) ;", "predictions": ["write _ to _ targets ( log _ level . warn </%> null </%> null . is <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> . ( , , <%> . <@> <%> , format <%> <%> <%> . ; ) </%>"]}, {"before_ctx": " ", "before_line": " this . warn ( message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "warn ( message , exception ) ;", "predictions": ["warn ( message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , args ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , null , message ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , null , message ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , null , message ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , args ) ; ", "after_ctx": " ", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , args ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , args ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , exception ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , exception , message , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , message , null ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , message , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , exception , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , message , args ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , exception , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , format _ provider , message , args ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled )", "predictions": ["if ( is _ warn _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . warn ( message , exception _ candidate ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "warn ( message , exception _ candidate ) ;", "predictions": ["warn ( message , exception _ candidate ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;", "predictions": ["write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ warn _ enabled ) { this . write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , null , value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , null , value ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , null , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , value ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , value ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled )", "predictions": ["if ( is _ error _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . error , null , message _ func ( ) ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . error , null , message _ func ( ) ) ;", "predictions": ["write _ to _ targets ( log _ level . func , null _ level ( ) ) ;"]}, {"before_ctx": " ", "before_line": " this . error ( message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "error ( message , exception ) ;", "predictions": ["error ( message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , args ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , null , message ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , null , message ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , null , message ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , args ) ; ", "after_ctx": " ", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , args ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , args ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , exception ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , exception , message , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , message , null ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , message , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , exception , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , message , args ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , exception , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , format _ provider , message , args ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled )", "predictions": ["if ( is _ error _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . error ( message , exception _ candidate ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "error ( message , exception _ candidate ) ;", "predictions": ["error ( message , exception _ candidate ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;", "predictions": ["write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ error _ enabled ) { this . write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , null , value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , null , value ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , null , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , value ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , value ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled )", "predictions": ["if ( is _ fatal _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . fatal , null , message _ func ( ) ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . fatal , null , message _ func ( ) ) ;", "predictions": ["write _ to _ targets ( log _ level . if </%> null null null . is . <%> <-> <-> <-> <-> <-> <-> <-> <-> ( ( , is . <%> <-> level <%> , ] . </@> _ , this , , , [ . , , , ) ,"]}, {"before_ctx": " ", "before_line": " this . fatal ( message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "fatal ( message , exception ) ;", "predictions": ["fatal ( message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , args ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , null , message ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , null , message ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , null , message ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , args ) ; ", "after_ctx": " ", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , args ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , args ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , exception ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , exception ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , exception ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , exception , message , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , message , null ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , message , null ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , exception , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , message , args ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , exception , format _ provider , message , args ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , format _ provider , message , args ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , format _ provider , message , args ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled )", "predictions": ["if ( is _ fatal _ enabled )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . fatal ( message , exception _ candidate ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "fatal ( message , exception _ candidate ) ;", "predictions": ["fatal ( message , exception _ candidate ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;", "predictions": ["write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument , argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument , argument } ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ fatal _ enabled ) { this . write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument , argument , argument } ) ; ", "after_ctx": " ", "after_line": "if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument , argument , argument } ) ;", "predictions": ["if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument _ <-> _ <-> } , <%> } , <-> to , <%> to </%> </%> </%> to </%> </%> </%> to </%> </%> to </%> </%> <%> </%> <%> to ] </%> </%> </%> </%> this . <%> to </%> _ enabled </%> </%> </%> </%> </%> </%> </%> <%> to ] </%> </%> </%> </%> <%> to </%> </%> to </%> </%> </%> </%> </%> </%> </%> </%> </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . to _ event _ info ( string . empty ) ; ", "after_ctx": " ", "after_line": "return to _ event _ info ( string . empty ) ;", "predictions": ["return to _ event _ info ( fixed . </%> , ;"]}, {"before_ctx": " ", "before_line": " this . implementation = implementation ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "implementation = implementation ;", "predictions": ["implementation = implementation ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " get { return this . implementation ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return implementation ; }", "predictions": ["get { return implementation ; }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . get _ enumerator ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return get _ enumerator ( ) ;", "predictions": ["return get _ enumerator ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . wrapped = wrapped ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "wrapped = wrapped ;", "predictions": ["wrapped = wrapped ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " get { return this . entry ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return entry ; }", "predictions": ["get { return entry ; }"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ; using layouts ;", "predictions": ["using n _ log _ layouts ; <-> ,"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . parameters = new list < database _ parameter _ info > ( ) ; this . command _ type = command _ type . text ; ", "after_ctx": " ", "after_line": "parameters = new list < database _ parameter _ info > ( ) ; command _ type = command _ type . text ;", "predictions": ["parameters = new list < database _ parameter _ int <@> ) <%> <%> <%> = = = = = = = = = log . text this"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ;", "predictions": ["using n _ log _ common ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . address _ family = address _ family ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "address _ family = address _ family ;", "predictions": ["address _ family = address _ family ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . close _ socket ( continuation ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "close _ socket ( continuation ) ;", "predictions": ["close _ socket ( continuation ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var sock = this . socket ; this . socket = null ; ", "after_ctx": " ", "after_line": "var sock = socket ; socket = null ;", "predictions": ["var sock = socket ; socket = _ <%> <%>"]}, {"before_ctx": " ", "before_line": " args . completed + = this . socket _ operation _ completed ; args . remote _ end _ point = this . endpoint ; if ( ! this . socket . send _ to _ async ( args ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "args . completed + = socket _ operation _ completed ; args . remote _ end _ point = endpoint ; if ( ! socket . send _ to _ async ( args ) )", "predictions": ["args . completed + = socket _ operation _ ; _ </%> . remote <%> end <%> point _ endpoint _ if _ max ! )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . socket _ operation _ completed ( this . socket , args ) ; ", "after_ctx": " ", "after_line": "socket _ operation _ completed ( socket , args ) ;", "predictions": ["socket _ operation _ completed ( socket = args </%> length </%> length ) length"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " get { return this . max _ message _ length ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return max _ message _ length ; }", "predictions": ["get { return max _ message _ return <-> null ; fixed"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . max _ message _ length = value ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "max _ message _ length = value ;", "predictions": ["max _ message _ length = value ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " get { return this . max _ kilobytes ; } ", "after_ctx": " <%> <-> this . </%>", "after_line": "get { return max _ kilobytes ; }", "predictions": ["get { return max _ kilobytes ; if }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . max _ kilobytes = value ; ", "after_ctx": " ", "after_line": "max _ kilobytes = value ;", "predictions": ["max _ kilobytes = value ;"]}, {"before_ctx": " ", "before_line": " event _ log . delete _ event _ source ( fixed _ source , this . machine _ name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "event _ log . delete _ event _ source ( fixed _ source , machine _ name ) ;", "predictions": ["event _ log . delete _ event _ <-> _ operation _ <-> ( operation . <-> ( machine . name . machine ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return event _ log . source _ exists ( fixed _ source , this . machine _ name ) ; ", "after_ctx": " ", "after_line": "return event _ log . source _ exists ( fixed _ source , machine _ name ) ;", "predictions": ["return event _ log . source _ exists this fixed . <%> . machine . machine . machine . machine . machine ."]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " string message = base . render _ log _ event ( this . layout , log _ event ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "string message = render _ log _ event ( layout , log _ event ) ;", "predictions": ["string message = base . render _ log _ event ( layout , log _ event ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( message . length > this . max _ message _ length ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( message . length > max _ message _ length )", "predictions": ["if ( message . length > max _ message </%> = event event log </%> = event event"]}, {"before_ctx": "<%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " message = message . substring ( 0 , this . max _ message _ length ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "message = message . substring ( 0 , max _ message _ length ) ;", "predictions": ["message = message . substring ( 0 , max ) close ) close ) close ) close ) close ) close ) close ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " for ( int offset = 0 ; offset < message . length ; offset + = this . max _ message _ length ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "for ( int offset = 0 ; offset < message . length ; offset + = max _ message _ length )", "predictions": ["for ( int offset = 0 ; offset < </@> . ) length _ _ _ _ length message message ( max ( max <-> </%> ) </@> ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " string chunk = message . substring ( offset , math . min ( this . max _ message _ length , ( message . length - offset ) ) ) ; ", "after_ctx": " ", "after_line": "string chunk = message . substring ( offset , math . min ( max _ message _ length , ( message . length - offset ) ) ) ;", "predictions": ["string chunk = message . substring ( offset , database _ list . list n <%> n this </%> . <%> _ this ( <@> <-> <-> this this . close . _ - <%> <%> <%> <%> </@> <%> <%> <%> <%> <%> . , </@> ; <%> ) <%> <%> . , </@> ;"]}, {"before_ctx": " ", "before_line": " if ( this . entry _ type ! = null ) ", "after_ctx": " <%> <-> base . </%> <%> <-> this . </%>", "after_line": "if ( entry _ type ! = null )", "predictions": ["if ( entry _ type ! = null )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var value = base . render _ log _ event ( this . entry _ type , log _ event ) ; ", "after_ctx": " ", "after_line": "var value = render _ log _ event ( entry _ type , log _ event ) ;", "predictions": ["var value = render _ log _ <%> _ name this this this this this this this this this ( = = message . for . <%> length &"]}, {"before_ctx": " ", "before_line": " event _ log _ instance . log = = this . log & & event _ log _ instance . machine _ name = = this . machine _ name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "event _ log _ instance . log = = log & & event _ log _ instance . machine _ name = = machine _ name ;", "predictions": ["event _ log _ instance . log = = <%> <-> <-> </%> _ <%> _ = . machine _ name ; ; machine <%> </@> <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " event _ log _ instance = new event _ log ( this . log , this . machine _ name , rendered _ source ) ; } if ( this . max _ kilobytes . has _ value ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "event _ log _ instance = new event _ log ( log , machine _ name , rendered _ source ) ; } if ( max _ kilobytes . has _ value )", "predictions": ["event _ log _ instance = new event _ log ( log , machine _ name , rendered _ source ) ; } if ( max _ kilobytes . has _ value )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . source ! = null ? base . render _ log _ event ( this . source , log _ event ) : null ; ", "after_ctx": " ", "after_line": "return source ! = null ? render _ log _ event ( source , log _ event ) : null ;", "predictions": ["return source ! = null ? base . render ( ) . ) ; ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " machine _ name = this . machine _ name ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "machine _ name = machine _ name", "predictions": ["machine _ name = machine _ name"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " machine _ name = this . machine _ name ", "after_ctx": " ", "after_line": "machine _ name = machine _ name", "predictions": ["machine _ name = machine _ name"]}, {"before_ctx": " ", "before_line": " this . process _ log _ messages ( log _ events ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "process _ log _ messages ( log _ events ) ;", "predictions": ["process _ log _ messages ( log . events ( name ."]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . log _ factory ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( log _ factory ! = null )", "predictions": ["if ( log _ factory ! = null ("]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ; using internal ;", "predictions": ["using n _ log _ internal ; </%> . <-> _ this . = <-> _ <%> . config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . property = process _ info _ property . id ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "property = process _ info _ property . id ;", "predictions": ["property = process _ info _ property . > )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . property _ info = typeof ( process ) . get _ property ( this . property . to _ string ( ) ) ; if ( this . property _ info = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "property _ info = typeof ( process ) . get _ property ( property . to _ string ( ) ) ; if ( property _ info = = null )", "predictions": ["property _ info = typeof ( process ) . get _ property ( property . to _ string ( ) ) ; if ( property _ info = = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " throw new argument _ exception ( STR + this . property _ info + STR ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "throw new argument _ exception ( STR + property _ info + STR ) ;", "predictions": ["throw new argument _ exception ( STR + property _ info + STR ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " late _ bound _ property _ get = reflection _ helpers . create _ late _ bound _ method ( this . property _ info . get _ get _ method ( ) ) ; this . process = process . get _ current _ process ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "late _ bound _ property _ get = reflection _ helpers . create _ late _ bound _ method ( property _ info . get _ get _ method ( ) ) ; process = process . get _ current _ process ( ) ;", "predictions": ["late _ bound _ property _ get = reflection _ helpers . create _ late _ bound _ method ( property _ info . get _ get _ method ( ) ) ; process = process . get _ current _ process ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . process ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( process ! = null )", "predictions": ["if ( process ! = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . process . close ( ) ; this . process = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "process . close ( ) ; process = null ;", "predictions": ["process . close ( ) ; process = null ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . late _ bound _ property _ get ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( late _ bound _ property _ get ! = null )", "predictions": ["if ( late _ bound _ property _ , event = null = bound ( bound ( late ) ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var value = this . late _ bound _ property _ get ( this . process , null ) ; builder . append _ formatted _ value ( value , this . format , format _ provider ) ; ", "after_ctx": " ", "after_line": "var value = late _ bound _ property _ get ( process , null ) ; builder . append _ formatted _ value ( value , format , format _ provider ) ;", "predictions": ["var value = late _ bound _ property _ get ) <@> <-> null = builder . array _ formatted _ ) object ) < </@> <%> </@> _ to ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . culture = culture _ info . invariant _ culture ; this . uppercase = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "culture = culture _ info . invariant _ culture ; uppercase = true ;", "predictions": ["culture = culture _ info . invariant _ ( ) list ( buffer name true name name log )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . uppercase ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( uppercase )", "predictions": ["if ( uppercase )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " culture _ info culture = this . culture ; ", "after_ctx": " ", "after_line": "culture _ info culture = culture ;", "predictions": ["culture _ info culture = culture ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ internal ; using n _ log _ layouts ; using n _ log _ targets ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ; using internal ; using layouts ; using targets ;", "predictions": ["using n _ log _ common ; using <%> . <%> _ <%> . STR this"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . logging _ rules = new list < logging _ rule > ( ) ; ", "after_ctx": " ", "after_line": "logging _ rules = new list < logging _ rule > ( ) ;", "predictions": ["logging _ rules = new list < name _ rule base ,"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . initialize _ all ( ) ; ", "after_ctx": " ", "after_line": "initialize _ all ( ) ;", "predictions": ["initialize _ all ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . config _ items = object _ graph _ scanner . find _ reachable _ objects < object > ( roots . to _ array ( ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "config _ items = object _ graph _ scanner . find _ reachable _ objects < object > ( roots . to _ array ( ) ) ;", "predictions": ["config _ items = object _ graph _ scanner . find _ reachable _ objects < object exception STR STR . to . to . to STR ) ) ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . info ( STR , this . config _ items . count ) ; foreach ( object o in this . config _ items ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . info ( STR , config _ items . count ) ; foreach ( object o in config _ items )", "predictions": ["internal _ logger . info ( STR , </@> _ source . ; </@> </@> foreach ) = ) = )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . validate _ config ( ) ; ", "after_ctx": " ", "after_line": "validate _ config ( ) ;", "predictions": ["validate _ config ( ) ;"]}, {"before_ctx": " ", "before_line": " this . initialize _ all ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "initialize _ all ( ) ;", "predictions": ["initialize _ all ( ) ;"]}, {"before_ctx": " ", "before_line": " this . logs = new list < string > ( ) ; this . optimize _ buffer _ reuse = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "logs = new list < string > ( ) ; optimize _ buffer _ reuse = true ;", "predictions": ["logs = new list < string > ( items _ </@> _ reuse event return return return process <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . logs . add ( base . render _ log _ event ( this . layout , log _ event ) ) ; ", "after_ctx": " ", "after_line": "logs . add ( render _ log _ event ( layout , log _ event ) ) ;", "predictions": ["logs . add ( base . render _ ; this . foreach , </@> _ ) ( </@> </@> </@> </@> ) format ) format"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . ignore _ case ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ignore _ case )", "predictions": ["if ( ignore _ case )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . whole _ words ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( whole _ words )", "predictions": ["if ( whole _ words )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . regex = new regex ( regex _ string , regex _ options ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "regex = new regex ( regex _ string , regex _ options ) ;", "predictions": ["regex = new regex ( regex _ string , regex _ options ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . text = text ; this . replace _ group _ name = replace _ group _ name ; this . replace _ with = replace _ with ; ", "after_ctx": " ", "after_line": "text = text ; replace _ group _ name = replace _ group _ name ; replace _ with = replace _ with ;", "predictions": ["text = text ; replace _ group _ name _ <%> _ ( . <%> </%> <%> . with . <%> </%> </%> </%> </%>"]}, {"before_ctx": " ", "before_line": " this . optimize _ buffer _ reuse = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "optimize _ buffer _ reuse = true ;", "predictions": ["optimize _ buffer _ reuse = true ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . format _ message ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( format _ message )", "predictions": ["if ( format _ message )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . render _ log _ event ( this . layout , log _ event ) ; ", "after_ctx": " ", "after_line": "render _ log _ event ( layout , log _ event ) ;", "predictions": ["render _ log _ event ( layout , log ; _ with </@> all"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ;", "predictions": ["using n _ log _ common <%>"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " var web _ request = web _ request . create ( new uri ( this . address ) ) ; ", "after_ctx": " ", "after_line": "var web _ request = web _ request . create ( new uri ( address ) ) ;", "predictions": ["var web _ request = web _ request <-> . list this <-> <%> group ( { is uri this <-> <%> <%> var <%> . var <%> <%> <%> <%> ( address <%> <%> <%> <%> . var <%> <%> <%> <%> <%> <%> <%> <%> . var <%> <%> <%> this <-> <%> . var <%> <%> <%> <%> <%> <%> <%> . var <%> <%> <%> <%> <%> <%> . = uri ) <%> _ </%> <@> web . new this <-> <%> . new uri ) _"]}, {"before_ctx": " ", "before_line": " this . sent _ messages = new list < message > ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "sent _ messages = new list < message > ( ) ;", "predictions": ["sent _ messages = new list < message > _ event value name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . queue _ exists _ called = true ; return this . queue _ exists ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "queue _ exists _ called = true ; return queue _ exists ;", "predictions": ["queue _ exists _ called = true ; is <@> <%> </@> <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . queue _ created = true ; ", "after_ctx": " ", "after_line": "queue _ created = true ;", "predictions": ["queue _ created = true ;"]}, {"before_ctx": " ", "before_line": " this . increment = 1 ; this . value = 1 ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "increment = 1 ; value = 1 ;", "predictions": ["increment = 1 ; value = <%> <->"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . sequence ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( sequence ! = null )", "predictions": ["if ( sequence ! = null )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " v = get _ next _ sequence _ value ( this . sequence . render ( log _ event ) , this . value , this . increment ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "v = get _ next _ sequence _ value ( sequence . render ( log _ event ) , value , increment ) ;", "predictions": ["v = get _ next _ sequence _ value ( sequence . render ( log _ options ( log ) ) ) ) </@> ) </@> </@> ( increment ( increment ( log _ log _ . render _ options ) ( increment ( increment ( increment ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " v = this . value ; this . value + = this . increment ; ", "after_ctx": " ", "after_line": "v = value ; value + = increment ;", "predictions": ["v = value ; value + = increment ;"]}, {"before_ctx": " ", "before_line": " if ( this . user _ name ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( user _ name )", "predictions": ["if ( user _ name )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . domain ) ", "after_ctx": " ", "after_line": "if ( domain )", "predictions": ["if ( domain )"]}, {"before_ctx": " ", "before_line": " get { return this . lock _ object ; } ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "get { return lock _ object ; }", "predictions": ["get { return lock _ object ( }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . is _ initialized ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ initialized )", "predictions": ["if ( is _ initialized )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { return this . is _ initialized ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { return is _ initialized ;", "predictions": ["lock ( sync _ root ) { return is _ all </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root )", "predictions": ["lock ( sync _ root )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " bool was _ initialized = this . is _ initialized ; this . initialize ( configuration ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "bool was _ initialized = is _ initialized ; initialize ( configuration ) ;", "predictions": ["bool was _ initialized = is _ initialized ; initialize + return <@> ; ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . close ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "close ( ) ;", "predictions": ["close ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . dispose ( true ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "dispose ( true ) ;", "predictions": ["dispose ( true ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { if ( ! this . is _ initialized ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { if ( ! is _ initialized )", "predictions": ["lock ( sync _ root ) { if <%> < <@> _ <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ async ( async _ continuation ) ; ", "after_ctx": " ", "after_line": "flush _ async ( async _ continuation ) ;", "predictions": ["flush _ async ( async _ is <@> <-> ! ) </@>"]}, {"before_ctx": " ", "before_line": " if ( this . all _ layouts _ are _ thread _ agnostic ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( all _ layouts _ are _ thread _ agnostic )", "predictions": ["if ( all _ layouts _ are _ thread _"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { if ( ! this . is _ initialized ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { if ( ! is _ initialized )", "predictions": ["lock ( sync _ root ) { if ( </@> is"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . all _ layouts ! = null ) { if ( this . optimize _ buffer _ reuse ) { using ( var target _ builder = this . reusable _ layout _ builder . allocate ( ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( all _ layouts ! = null ) { if ( optimize _ buffer _ reuse ) { using ( var target _ builder = reusable _ layout _ builder . allocate ( ) )", "predictions": ["if ( all _ layouts ! = null ) { if ( optimize _ buffer _ reuse ) { using ( var target _ builder = reusable _ layout _ builder . allocate ( ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " foreach ( layout layout in this . all _ layouts ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "foreach ( layout layout in all _ layouts )", "predictions": ["foreach ( layout layout in all _ layouts )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " foreach ( layout layout in this . all _ layouts ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "foreach ( layout layout in all _ layouts )", "predictions": ["foreach ( layout layout in all _ layouts <->"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var target _ attribute = this . get _ type ( ) . get _ custom _ attribute < target _ attribute > ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var target _ attribute = get _ type ( ) . get _ custom _ attribute < target _ attribute > ( ) ;", "predictions": ["var target _ attribute = get _ type ( ) . get _ get this _ ) < _ ) if _ ) if ! ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return target _ attribute . name + STR + ( this . name ? ? STR ) + STR ; } return this . get _ type ( ) . name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return target _ attribute . name + STR + ( name ? ? STR ) + STR ; } return get _ type ( ) . name ;", "predictions": ["return target _ attribute . name + STR + ( name ? ? ) <@> <%> ( if { if { . ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( ! this . is _ initialized ) { lock ( this . sync _ root ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ! is _ initialized ) { lock ( sync _ root )", "predictions": ["if ( ! is _ initialized ) { lock ( sync _ root ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . initialize _ exception ! = null ) { lock ( this . sync _ root ) { log _ event . continuation ( this . create _ init _ exception ( ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( initialize _ exception ! = null ) { lock ( sync _ root ) { log _ event . continuation ( create _ init _ exception ( ) ) ;", "predictions": ["if ( initialize _ exception ! = null ) { lock ( sync <%> root </%> <@> log <%> create . create <%> <%> <%> <%> <-> </%> </%> event <%> init <%> </@> <-> </%> </%> </%> </%> </%> </%> </%> <%> </%> </%> </%> </%> create <%> </@> = value </%> </%> </%> </%> create <%> </%> + ) current <%> current <%> <%> <%> <-> </%> current <%> <@> <%> <-> </%> </%> current <%> <%> <%> <-> </%> </%> current <%> <%> <%> <-> </%> </%> current <%> <%> <%> <-> </%> </%> current <%> <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ async _ thread _ safe ( wrapped _ log _ event ) ; ", "after_ctx": " ", "after_line": "write _ async _ thread _ safe ( wrapped _ log _ event ) ;", "predictions": ["write _ async _ thread _ safe ( wrapped _ log _ event ) ("]}, {"before_ctx": " ", "before_line": " if ( ! this . is _ initialized ) { lock ( this . sync _ root ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! is _ initialized ) { lock ( sync _ root )", "predictions": ["if ( ! is _ initialized ) { write ( sync <%> sync <->"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . initialize _ exception ! = null ) { lock ( this . sync _ root ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( initialize _ exception ! = null ) { lock ( sync _ root )", "predictions": ["if ( initialize _ exception ! = null ) { lock ( sync )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " log _ events [ i ] . continuation ( this . create _ init _ exception ( ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "log _ events [ i ] . continuation ( create _ init _ exception ( ) ) ;", "predictions": ["log _ events [ i ] . continuation ( create _ init _ exception ( ) ( ( ( ( ( ( name STR name _ _ ) ) ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . optimize _ buffer _ reuse ) ", "after_ctx": " ", "after_line": "if ( optimize _ buffer _ reuse )", "predictions": ["if ( optimize _ buffer _ reuse )"]}, {"before_ctx": " ", "before_line": " this . write _ async _ thread _ safe ( wrapped _ events ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "write _ async _ thread _ safe ( wrapped _ events ) ;", "predictions": ["write _ async _ thread _ safe ( wrapped _ events ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { this . logging _ configuration = configuration ; if ( ! this . is _ initialized ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { logging _ configuration = configuration ; if ( ! is _ initialized )", "predictions": ["lock ( sync _ root ) { logging _ configuration = configuration ; <@> attribute get </%> name"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . initialize _ target ( ) ; this . initialize _ exception = null ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "initialize _ target ( ) ; initialize _ exception = null ;", "predictions": ["initialize _ target ( ) ; initialize _ exception = null ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . initialize _ exception = exception ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "initialize _ exception = exception ;", "predictions": ["initialize _ exception = exception ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . is _ initialized = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "is _ initialized = true ;", "predictions": ["is _ initialized = true ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { this . logging _ configuration = null ; if ( this . is _ initialized ) { this . is _ initialized = false ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { logging _ configuration = null ; if ( is _ initialized ) { is _ initialized = false ;", "predictions": ["lock ( sync _ root ) { logging _ configuration = null ; event <-> ; ; ; ; ; ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . initialize _ exception = = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( initialize _ exception = = null )", "predictions": ["if ( initialize _ exception = = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . close _ target ( ) ; ", "after_ctx": " ", "after_line": "close _ target ( ) ;", "predictions": ["close _ target ( ) ;"]}, {"before_ctx": " ", "before_line": " lock ( this . sync _ root ) { if ( ! this . is _ initialized ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { if ( ! is _ initialized )", "predictions": ["lock ( sync _ root ) { if <%> _ _ <%> _ </%> _ exception <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write ( log _ event ) ; ", "after_ctx": " ", "after_line": "write ( log _ event ) ;", "predictions": ["write ( log _ event ) ;"]}, {"before_ctx": " ", "before_line": " this . write ( log _ events [ i ] ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write ( log _ events [ i ] ) ;", "predictions": ["write ( log _ events [ i ] <-> _ </%> ) _"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { if ( ! this . is _ initialized ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { if ( ! is _ initialized )", "predictions": ["lock ( sync _ root ) { if <%> = is is"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " async _ log _ event _ info [ ] log _ events _ array = this . optimize _ buffer _ reuse ? null : log _ events as async _ log _ event _ info [ ] ; if ( ! this . optimize _ buffer _ reuse & & log _ events _ array ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "async _ log _ event _ info [ ] log _ events _ array = optimize _ buffer _ reuse ? null : log _ events as async _ log _ event _ info [ ] ; if ( ! optimize _ buffer _ reuse & & log _ events _ array ! = null )", "predictions": ["async _ log _ event _ info [ ] log _ events _ array = optimize _ buffer _ reuse ? null : log _ events as async _ log _ event _ info [ ] ; if ( ! optimize _ buffer _ reuse & & log _ events _ array ! = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write ( log _ events _ array ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write ( log _ events _ array ) ;", "predictions": ["write ( log _ events _ array ) </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write ( log _ events ) ; ", "after_ctx": " ", "after_line": "write ( log _ events ) ;", "predictions": ["write ( log _ events ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . process _ exit _ event = = null & & this . current _ app _ domain ! = null ) this . current _ app _ domain . process _ exit + = on _ process _ exit ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( process _ exit _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . process _ exit + = on _ process _ exit ;", "predictions": ["if ( process _ exit _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . process _ exit + = on _ process _ exit ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . process _ exit _ event + = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "process _ exit _ event + = value ;", "predictions": ["process _ exit _ event + = value ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . process _ exit _ event - = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "process _ exit _ event - = value ;", "predictions": ["process _ exit _ event - = value ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . process _ exit _ event = = null & & this . current _ app _ domain ! = null ) this . current _ app _ domain . process _ exit - = on _ process _ exit ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( process _ exit _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . process _ exit - = on _ process _ exit ;", "predictions": ["if ( process _ exit _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . process _ exit - = on _ process _ exit ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . domain _ unload _ event = = null & & this . current _ app _ domain ! = null ) this . current _ app _ domain . domain _ unload + = on _ domain _ unload ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( domain _ unload _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . domain _ unload + = on _ domain _ unload ;", "predictions": ["if ( domain _ unload _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . domain _ unload + = on _ domain _ unload ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . domain _ unload _ event + = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "domain _ unload _ event + = value ;", "predictions": ["domain _ unload _ event + = value ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . domain _ unload _ event - = value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "domain _ unload _ event - = value ;", "predictions": ["domain _ unload _ event - = value ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . domain _ unload _ event = = null & & this . current _ app _ domain ! = null ) this . current _ app _ domain . domain _ unload - = on _ domain _ unload ; ", "after_ctx": " ", "after_line": "if ( domain _ unload _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . domain _ unload - = on _ domain _ unload ;", "predictions": ["if ( domain _ unload _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . domain _ unload - = on _ domain _ unload ;"]}, {"before_ctx": " ", "before_line": " this . optimize _ buffer _ reuse = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "optimize _ buffer _ reuse = true ;", "predictions": ["optimize _ buffer _ reuse = true = true = true ("]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> base . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " string log _ message = base . render _ log _ event ( this . layout , log _ event ) ; if ( this . raw _ write | | log _ event . level < = log _ level . debug ) ", "after_ctx": " ", "after_line": "string log _ message = render _ log _ event ( layout , log _ event ) ; if ( raw _ write | | log _ event . level < = log _ level . debug )", "predictions": ["string log _ message = render _ log _ event ( layout , log _ event ) ; if ( raw _ write | | log _ event . level < = this _ encoding . call ( </%> this _ encoding _ call ( layout write . this _ call _ ( debug _ <%> . debug _ debug _ debug _ debug _ <%> _ ( debug _ debug _ ( <%> this . <%> _ ( . debug _ ( <%> this . <%> _ ( _ debug _ debug _ layout _ debug _ debug )"]}, {"before_ctx": " ", "before_line": " this . protocol = web _ service _ protocol . soap ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "protocol = web _ service _ protocol . soap ;", "predictions": ["protocol = web _ service _ protocol . soap ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . encoding = new ut _ encoding ( write _ bom ) ; this . include _ bom = write _ bom ; this . optimize _ buffer _ reuse = true ; this . headers = new list < method _ call _ parameter > ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "encoding = new ut _ encoding ( write _ bom ) ; include _ bom = write _ bom ; optimize _ buffer _ reuse = true ; headers = new list < method _ call _ parameter > ( ) ;", "predictions": ["encoding = new ut _ encoding ( write _ bom ) ; include _ bom = write _ bom ; optimize _ buffer _ reuse = true ; headers = new list <@> . method . parameter text _ text <@> text if _ text <@> method . } <->"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " this . found _ enable _ group _ layout = false ; this . only _ enable _ group _ layout = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "found _ enable _ group _ layout = false ; only _ enable _ group _ layout = true ;", "predictions": ["found _ enable _ group _ layout = false ; only . fail . item . layout ;"]}, {"before_ctx": " ", "before_line": " if ( this . headers ! = null & & this . headers . count > 0 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( headers ! = null & & headers . count > 0 )", "predictions": ["if ( headers ! = null <-> <-> </%> . count . count > ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var header _ buckets = log _ events . bucket _ sort ( this . convet _ to _ header _ array _ delegate , array _ deep _ equality _ comparer < string > . default ) ; ", "after_ctx": " ", "after_line": "var header _ buckets = log _ events . bucket _ sort ( convet _ to _ header _ array _ delegate , array _ deep _ equality _ comparer < string > . default ) ;", "predictions": ["var header _ buckets = log _ events . bucket _ sort </@> convet . to . convet . to </@> + + . default ; ; . default . string . using </@> _ message </%> level </%> level </%> level </%> level </%> level </%> level </%> level </%> encoding <-> encoding equality _ call new string <@> encoding deep encoding <-> <-> encoding <-> <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> encoding <-> <-> encoding"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . pre _ authenticate ) ", "after_ctx": " ", "after_line": "if ( pre _ authenticate )", "predictions": ["if ( pre _ authenticate )"]}, {"before_ctx": " ", "before_line": " write _ stream _ and _ fix _ preamble ( post _ payload , stream , this . include _ bom , this . encoding ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write _ stream _ and _ fix _ preamble ( post _ payload , stream , include _ bom , encoding ) ;", "predictions": ["write _ stream _ and _ fix _ preamble ( post _ payload this </%> this <%> . { <-> ; <@> - header array header header header header header array header"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . error ( ex , STR , this . name ) ; ", "after_ctx": " ", "after_line": "internal _ logger . error ( ex , STR , name ) ;", "predictions": ["internal _ logger . error ( ex this this . name </@> <@> <%> ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . protocol ! = web _ service _ protocol . http _ get ) { return this . url ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( protocol ! = web _ service _ protocol . http _ get ) { return url ;", "predictions": ["if ( protocol ! = web _ service _ protocol . = </%> <@> ) { comparer ,"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " using ( var target _ builder = this . optimize _ buffer _ reuse ? this . reusable _ layout _ builder . allocate ( ) : this . reusable _ layout _ builder . none ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "using ( var target _ builder = optimize _ buffer _ reuse ? reusable _ layout _ builder . allocate ( ) : reusable _ layout _ builder . none )", "predictions": ["using ( var target _ builder = optimize _ buffer _ reuse ? reusable _ layout _ builder . allocate ( ) : reusable _ layout _ builder . none )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var builder = new uri _ builder ( this . url ) ; ", "after_ctx": " ", "after_line": "var builder = new uri _ builder ( url ) ;", "predictions": ["var builder = new uri _ builder ( url ) </@> </@> </@> fail fail fail fail"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . throw _ exceptions ) ", "after_ctx": " ", "after_line": "if ( throw _ exceptions )", "predictions": ["if ( throw _ exceptions )"]}, {"before_ctx": " ", "before_line": " this . buffered _ write _ count + + ; this . buffered _ total _ events + = log _ events . count ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "buffered _ write _ count + + ; buffered _ total _ events + = log _ events . count ;", "predictions": ["buffered _ write _ count + + ; buffered _ total this <-> = = value this = . <@> ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . fail _ counter > 0 ) { this . fail _ counter - - ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( fail _ counter > 0 ) { fail _ counter - - ;", "predictions": ["if ( fail _ counter > 0 ) { fail _ ; <-> <-> <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ count + + ; ", "after_ctx": " ", "after_line": "flush _ count + + ;", "predictions": ["flush _ count + + ;"]}, {"before_ctx": " ", "before_line": " this . configuration _ item _ factory = configuration _ item _ factory ; this . text = txt ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "configuration _ item _ factory = configuration _ item _ factory ; text = txt ;", "predictions": ["configuration _ item _ factory = <@> <%> base <%> left this and ; text ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . configuration _ item _ factory = configuration _ item _ factory ; this . set _ renderers ( renderers , text ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "configuration _ item _ factory = configuration _ item _ factory ; set _ renderers ( renderers , text ) ;", "predictions": ["configuration _ item _ factory = configuration _ item _ factory ; return return return ; return ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . layout _ text ; ", "after_ctx": " ", "after_line": "return layout _ text ;", "predictions": ["return layout _ text ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . set _ renderers ( renderers , txt ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "set _ renderers ( renderers , txt ) ;", "predictions": ["set _ renderers ( renderers , ex ) </@>"]}, {"before_ctx": " ", "before_line": " return STR + this . text + STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return STR + text + STR ;", "predictions": ["return STR + text + STR ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . fixed _ text = null ; } this . layout _ text = text ; if ( this . logging _ configuration ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "fixed _ text = null ; } layout _ text = text ; if ( logging _ configuration ! = null )", "predictions": ["fixed _ text = null ; } layout _ text = text ; if ( logging _ configuration ! = null )"]}, {"before_ctx": " ", "before_line": " return this . fixed _ text ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return fixed _ text ;", "predictions": ["return fixed _ text ;"]}, {"before_ctx": " ", "before_line": " this . left _ expression = left ; this . right _ expression = right ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "left _ expression = left ; right _ expression = right ;", "predictions": ["left _ expression = left ; right </@> <@> ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return STR + this . left _ expression + STR + this . right _ expression + STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return STR + left _ expression + STR + right _ expression + STR ;", "predictions": ["return STR + left _ expression <%> ; <%> <%> right <%> ;"]}, {"before_ctx": " ", "before_line": " this . events = new list < log _ event _ info > ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "events = new list < log _ event _ info > ( ) ;", "predictions": ["events = new list < log 0 event ( ; > log n n ) this ! header expression ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ; using layouts ;", "predictions": ["using n _ log _ layouts <%> <@> <%> _ ) <%>"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " get { return this . inner ; } set { this . inner = value ; } ", "after_ctx": " ", "after_line": "get { return inner ; } set { inner = value ; }", "predictions": ["get { return inner ; } set _ _ <-> right right . STR + value <%> <%> <%> <%> <%> this . ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ layout _ renderers ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using layout _ renderers ;", "predictions": ["using n _ log _ layout . append ."]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . renderer = new log _ j _ xml _ event _ layout _ renderer ( ) ; ", "after_ctx": " ", "after_line": "renderer = new log _ j _ xml _ event _ layout _ renderer ( ) ;", "predictions": ["renderer = new log _ j . new _ <@> . column . this <-> ) log"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using common ;", "predictions": ["using n _ log _ common )"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . address = url ; this . last _ send _ time = interlocked . increment ( ref current _ send _ time ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "address = url ; last _ send _ time = interlocked . increment ( ref current _ send _ time ) ;", "predictions": ["address = url ; last _ send _ time = interlocked this this this this this this this this this this this this this this _ ( ref . list . current . list . </@> = url this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . do _ initialize ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "do _ initialize ( ) ;", "predictions": ["do _ initialize ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . do _ close ( continuation ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "do _ close ( continuation ) ;", "predictions": ["do _ close ( continuation ) </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . do _ flush ( continuation ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "do _ flush ( continuation ) ;", "predictions": ["do _ flush ( continuation ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . last _ send _ time = interlocked . increment ( ref current _ send _ time ) ; this . do _ send ( bytes , offset , length , async _ continuation ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "last _ send _ time = interlocked . increment ( ref current _ send _ time ) ; do _ send ( bytes , offset , length , async _ continuation ) ;", "predictions": ["last _ send _ time = interlocked . increment ( ref current _ send _ time ) ; do _ send ( bytes , offset <-> length <-> <@> . info ; <@> . info <-> <@> . info ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . dispose ( true ) ; ", "after_ctx": " ", "after_line": "dispose ( true ) ;", "predictions": ["dispose ( true ) ;"]}, {"before_ctx": " ", "before_line": " if ( ! this . with _ header ) { this . header = null ; } switch ( this . delimiter ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ! with _ header ) { header = null ; } switch ( delimiter )", "predictions": ["if ( ! with _ header STR { left null time time time n </%> address"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . actual _ column _ delimiter = culture _ info . current _ culture . text _ info . list _ separator ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "actual _ column _ delimiter = culture _ info . current _ culture . text _ info . list _ separator ;", "predictions": ["actual _ column _ delimiter = culture _ info . current _ culture . text _ info . list _ separator ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . actual _ column _ delimiter = STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "actual _ column _ delimiter = STR ;", "predictions": ["actual _ column _ delimiter = STR ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . actual _ column _ delimiter = STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "actual _ column _ delimiter = STR ;", "predictions": ["actual _ column _ delimiter = STR ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . actual _ column _ delimiter = STR ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "actual _ column _ delimiter = STR ;", "predictions": ["actual _ column _ delimiter = STR ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " sb . append ( this . actual _ column _ delimiter ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "sb . append ( actual _ column _ delimiter ) ;", "predictions": ["sb . append ( actual _ column </%> ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " switch ( this . quoting ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "switch ( quoting )", "predictions": ["switch ( quoting )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( column _ value . index _ of _ any ( this . quotable _ characters ) > = 0 ) ", "after_ctx": " ", "after_line": "if ( column _ value . index _ of _ any ( quotable _ characters ) > = 0 )", "predictions": ["if ( column _ value . index . value . _ . { { { { </%> <%> <-> <-> _ name > = . log <%> ) = = <-> . _ <-> . _ . of . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . quotable . <-> , <%> , async , async . index . quotable . quotable . quotable . quotable . quotable , <-> , async , async , index . quotable . quotable"]}, {"before_ctx": " ", "before_line": " sb . append ( this . quote _ char ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "sb . append ( quote _ char ) ;", "predictions": ["sb . append ( quote _ char ( quote </@> inner inner inner ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " sb . append ( column _ value . replace ( this . quote _ char , this . double _ quote _ char ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "sb . append ( column _ value . replace ( quote _ char , double _ quote _ char ) ) ;", "predictions": ["sb . append ( column _ value _ replace <%> = = = = double this double this <-> . double this </%> </%> </%> </%> </%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " sb . append ( this . quote _ char ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "sb . append ( quote _ char ) ;", "predictions": ["sb . append ( quote _ = ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parent = parent ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "parent = parent ;", "predictions": ["parent = parent ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ layout _ renderers ; using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ; using layout _ renderers ; using layouts ;", "predictions": ["using n _ log _ layout <%> if header . layouts . renderers <%> = </@> _ ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ; this . renderer . parameters = this . parameters ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ; renderer . parameters = parameters ;", "predictions": ["parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ; renderer . parameters = parameters ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . layout ; ", "after_ctx": " ", "after_line": "return layout ;", "predictions": ["return layout ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; using n _ log _ conditions ; using n _ log _ config ; using n _ log _ internal ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using common ; using conditions ; using config ; using internal ;", "predictions": ["using n _ log _ common ; using n . _ . </@> . lock . _ ."]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . rules = new list < filtering _ rule > ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "rules = new list < filtering _ rule > ( ) ;", "predictions": ["rules = new list < filtering _ rule > ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . rules = new list < filtering _ rule > ( ) ; this . wrapped _ target = wrapped _ target ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "rules = new list < filtering _ rule > ( ) ; wrapped _ target = wrapped _ target ;", "predictions": ["rules = new list < filtering _ rule > + <%> file this ) <-> <%> </@> ) <%> ) _"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . name = name ; ", "after_ctx": " ", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": " ", "before_line": " result _ filter = this . default _ filter ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "result _ filter = default _ filter ;", "predictions": ["result _ filter = default _ <%> </%>"]}, {"before_ctx": " ", "before_line": " this . watcher = new multi _ file _ watcher ( ) ; this . watcher . file _ changed + = this . config _ file _ changed ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "watcher = new multi _ file _ watcher ( ) ; watcher . file _ changed + = config _ file _ changed ;", "predictions": ["watcher = new multi _ file _ watcher ( </@> ; ) . ) . _ ( </%> , ( config _ <-> this . get this this . = = if this this . config this . config this . config this . config this <@> this . config . <-> this . config _ <-> this . config ( new this . config this config this . config . </%> this . config this . config this . config this . config this config this . config . <-> this _ this _ config log new list <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . configuration = config ; ", "after_ctx": " ", "after_line": "configuration = config ;", "predictions": ["configuration = config ;"]}, {"before_ctx": " ", "before_line": " if ( this . config _ loaded ) return this . config ; lock ( this . sync _ root ) { if ( this . config _ loaded ) return this . config ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( config _ loaded ) return config ; lock ( sync _ root ) { if ( config _ loaded ) return config ;", "predictions": ["if ( config _ loaded ) return config ; lock ( sync _ root <%> new , ) </@> _ </@> </%> } <%> )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . config = = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( config = = null )", "predictions": ["if ( config = = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . config = xml _ logging _ configuration . app _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "config = xml _ logging _ configuration . app _ config ;", "predictions": ["config = xml _ logging _ configuration . app _ config ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . config = = null ) ", "after_ctx": " ", "after_line": "if ( config = = null )", "predictions": ["if ( config = = null </%>"]}, {"before_ctx": " ", "before_line": " if ( this . config ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( config ! = null )", "predictions": ["if ( config ! = null }"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . config _ loaded = true ; } } return this . config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "config _ loaded = true ; } } return config ;", "predictions": ["config _ loaded = true ; ( ( </@> ( ; ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { logging _ configuration old _ config = this . config ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { logging _ configuration old _ config = config ;", "predictions": ["lock ( sync _ root ) { logging _ configuration old _ config = logger configuration configuration configuration configuration t t t ,"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "flush ( ) ;", "predictions": ["flush ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . config = value ; if ( this . config = = null ) this . config _ loaded = false ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "config = value ; if ( config = = null ) config _ loaded = false ;", "predictions": ["config = value ; if ( config = = null ) config _ loaded = false ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . config . initialize _ all ( ) ; this . reconfig _ existing _ loggers ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "config . initialize _ all ( ) ; reconfig _ existing _ loggers ( ) ;", "predictions": ["config . initialize _ all ( ) ; reconfig _ existing _ loggers ( this ( this this this ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . config _ loaded = true ; } } this . on _ configuration _ changed ( new logging _ configuration _ changed _ event _ args ( value , old _ config ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "config _ loaded = true ; } } on _ configuration _ changed ( new logging _ configuration _ changed _ event _ args ( value , old _ config ) ) ;", "predictions": ["config _ loaded = true ; } } on _ configuration _ changed ( new . logging . app . </@> . new _ list </%> value false old . </@> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> old . </@> </%> </%> </%> ) ="]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . global _ threshold ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return global _ threshold ;", "predictions": ["return global _ threshold ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { this . global _ threshold = value ; this . reconfig _ existing _ loggers ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { global _ threshold = value ; reconfig _ existing _ loggers ( ) ;", "predictions": ["lock ( sync _ root ) { global _ threshold if value = reconfig this reconfig this this . reconfig <%> </%> config ) _ <%> _"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var configuration = this . configuration ; ", "after_ctx": " ", "after_line": "var configuration = configuration ;", "predictions": ["var configuration = configuration ;"]}, {"before_ctx": " ", "before_line": " return this . get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name ) ;", "predictions": ["return get _ logger ( frame . </%> this _ declaring _ declaring _ type . </@> _ name ( lock this _ <-> <-> ( <-> this ) <-> </%> . } _ </@> . = this <-> <-> this . </%> this <-> <-> <-> </%> this . </@> this . xml this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this . </%> this"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return ( t ) this . get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name , typeof ( t ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return ( t ) get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name , typeof ( t ) ) ;", "predictions": ["return ( t ) get _ logger ( frame . get _ method ( <%> . lock <-> type . root ( typeof this , typeof . changed <%> <%> <-> <%> <%> <%> <%> <%> <%> <%> <%> <%> </@> <%> <%> <%> <%> <%> <%> <%> <%> <%> this <%> <-> <-> typeof _ ( <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <%> ) <-> typeof _ ( > full _ ( ) <-> typeof _ ( ) <-> <-> </%> ) <"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name , logger _ type ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return get _ logger ( frame . get _ method ( ) . declaring _ type . full _ name , logger _ type ) ;", "predictions": ["return get _ logger ( frame . get _ method ( ) . declaring this this . full this . name this this this . </%> this _ = ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return ( t ) this . get _ logger ( new logger _ cache _ key ( name , typeof ( t ) ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return ( t ) get _ logger ( new logger _ cache _ key ( name , typeof ( t ) ) ) ;", "predictions": ["return ( t ) get _ logger ( new logger _ cache _ key this args config typeof this <-> <-> <-> <-> <-> <-> <-> </%> </%> > > > > > >"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . get _ logger ( new logger _ cache _ key ( name , logger _ type ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "return get _ logger ( new logger _ cache _ key ( name , logger _ type ) ) ;", "predictions": ["return get _ logger ( new logger _ cache _ key ( name , ) ( ) config config </@> </@> </@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { if ( this . config ! = null ) { this . config . initialize _ all ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { if ( config ! = null ) { config . initialize _ all ( ) ;", "predictions": ["lock ( sync _ root ) { if ( config ! = null ) </@> . initialize ) </@> _ > log config <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " logger . set _ configuration ( this . get _ configuration _ for _ logger ( logger . name , this . config ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "logger . set _ configuration ( get _ configuration _ for _ logger ( logger . name , config ) ) ;", "predictions": ["logger . set _ configuration ( get _ configuration _ for _ logger ( logger . new ; get ; </@> </%> config config </@> </@> ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush ( default _ flush _ timeout ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "flush ( default _ flush _ timeout ) ;", "predictions": ["flush ( default _ flush _ timeout _ <-> </@> <@> </@> <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " async _ helpers . run _ synchronously ( cb = > this . flush ( cb , timeout ) ) ; ", "after_ctx": " ", "after_line": "async _ helpers . run _ synchronously ( cb = > flush ( cb , timeout ) ) ;", "predictions": ["async _ helpers . run _ synchronously ( </%> = configuration _ from </@> <%> <%> <%> <%> _ helpers . run <%> _ <-> <%> <%> <%> <%> . run <%> ) ;"]}, {"before_ctx": " ", "before_line": " this . flush ( time _ span . from _ milliseconds ( timeout _ milliseconds ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "flush ( time _ span . from _ milliseconds ( timeout _ milliseconds ) ) ;", "predictions": ["flush ( time _ span . from _ milliseconds <-> timeout this </%> </%> </%> </%> ) </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . flush ( async _ continuation , time _ span . max _ value ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "flush ( async _ continuation , time _ span . max _ value ) ;", "predictions": ["flush ( async _ continuation , time _ file . max this this ) _"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush ( async _ continuation , time _ span . from _ milliseconds ( timeout _ milliseconds ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "flush ( async _ continuation , time _ span . from _ milliseconds ( timeout _ milliseconds ) ) ;", "predictions": ["flush ( async _ continuation , time _ span . from this timeout <%> , log this ! ) null null null null null null ; null ;"]}, {"before_ctx": " ", "before_line": " lock ( this . sync _ root ) { this . logs _ enabled - - ; if ( this . logs _ enabled = = - 1 ) { this . reconfig _ existing _ loggers ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { logs _ enabled - - ; if ( logs _ enabled = = - 1 ) { reconfig _ existing _ loggers ( ) ;", "predictions": ["lock ( sync _ root ) { logs _ enabled - _ <@> if if <%> current = = _ 1 </%> var <@> </%> <%> </%> <@> </%> </%> </%> <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) { this . logs _ enabled + + ; if ( this . logs _ enabled = = 0 ) { this . reconfig _ existing _ loggers ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { logs _ enabled + + ; if ( logs _ enabled = = 0 ) { reconfig _ existing _ loggers ( ) ;", "predictions": ["lock ( sync _ root ) { logs _ enabled + + ; if ( logs _ enabled = = 0 ) { reconfig _ existing _ loggers ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . logs _ enabled > = 0 ; ", "after_ctx": " ", "after_line": "return logs _ enabled > = 0 ;", "predictions": ["return logs _ enabled > = 0 ;"]}, {"before_ctx": " ", "before_line": " if ( this . reload _ timer = = null & & this . is _ disposing ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( reload _ timer = = null & & is _ disposing )", "predictions": ["if ( reload _ timer = = null <%> this is )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . sync _ root ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root )", "predictions": ["lock ( sync _ root )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . is _ disposing ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ disposing )", "predictions": ["if ( is _ disposing )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var current _ timer = this . reload _ timer ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var current _ timer = reload _ timer ;", "predictions": ["var current _ timer = reload _ timer )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . reload _ timer = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "reload _ timer = null ;", "predictions": ["reload _ timer = null ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . watcher . stop _ watching ( ) ; if ( this . configuration ! = configuration _ to _ reload ) ", "after_ctx": " ", "after_line": "watcher . stop _ watching ( ) ; if ( configuration ! = configuration _ to _ reload )", "predictions": ["watcher . stop _ watching ( ) ; if , <-> </@> file = to ! = )"]}, {"before_ctx": " ", "before_line": " if ( this . is _ disposing ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( is _ disposing )", "predictions": ["if ( is _ disposing )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . is _ disposing = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "is _ disposing = true ;", "predictions": ["is _ disposing = true ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . configuration _ reloaded = null ; if ( this . watcher ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "configuration _ reloaded = null ; if ( watcher ! = null )", "predictions": ["configuration _ reloaded = null ; if ( info )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . watcher . file _ changed - = this . config _ file _ changed ; }  if ( monitor . try _ enter ( this . sync _ root , NUM ) ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "watcher . file _ changed - = config _ file _ changed ; }  if ( monitor . try _ enter ( sync _ root , NUM ) )", "predictions": ["watcher . file _ changed - = config _ file _ changed ; } if ( monitor . try _ enter ( sync _ root , NUM ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var current _ timer = this . reload _ timer ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var current _ timer = reload _ timer ;", "predictions": ["var current _ timer = reload _ timer ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . reload _ timer = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "reload _ timer = null ;", "predictions": ["reload _ timer = null ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . watcher ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( watcher ! = null )", "predictions": ["if ( watcher ! = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . watcher . dispose ( ) ; }  var old _ config = this . config ; if ( this . config _ loaded & & old _ config ! = null ) ", "after_ctx": " ", "after_line": "watcher . dispose ( ) ; }  var old _ config = config ; if ( config _ loaded & & old _ config ! = null )", "predictions": ["watcher . dispose ( ) ; } var old _ config ) if ( <-> _ loaded configuration <-> <-> old <%> = ;"]}, {"before_ctx": " ", "before_line": " this . config = new xml _ logging _ configuration ( config _ file , this ) ; ", "after_ctx": " <%> <-> log _ factory . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "config = new xml _ logging _ configuration ( config _ file , this ) ;", "predictions": ["config = new xml _ logging _ configuration <@> ( ( this this <-> <-> _ file </@> <%> , <%> ) </@> ) </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " internal _ logger . info ( STR , log _ factory . reconfig _ after _ file _ changed _ timeout ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "internal _ logger . info ( STR , reconfig _ after _ file _ changed _ timeout ) ;", "predictions": ["internal _ logger . info ( STR , log this . reconfig this this this this . log this var <%> <@> <%> log configuration log ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> log _ factory . </%> ", "before_line": " lock ( this . sync _ root ) { if ( this . is _ disposing ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( sync _ root ) { if ( is _ disposing )", "predictions": ["lock ( sync _ root ) { if ( is _ ; & ! ! ! </%>"]}, {"before_ctx": "<%> <-> log _ factory . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . reload _ timer = = null ) { var configuration = this . configuration ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> log _ factory . </%>", "after_line": "if ( reload _ timer = = null ) { var configuration = configuration ;", "predictions": ["if ( reload _ timer = = null ) { var <-> - <-> ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " log _ factory . reconfig _ after _ file _ changed _ timeout , ", "after_ctx": " <%> <-> this . </%> <%> <-> log _ factory . </%>", "after_line": "reconfig _ after _ file _ changed _ timeout ,", "predictions": ["log _ factory . reconfig _ after _ _ </%> <@> </%> ,"]}, {"before_ctx": " ", "before_line": " this . name = name ; this . concrete _ type = concrete _ type ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ; concrete _ type = concrete _ type ;", "predictions": ["name = name ; concrete _ type = concrete </@> type <%>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return ( this . concrete _ type = = key . concrete _ type ) & & string . equals ( key . name , this . name , string _ comparison . ordinal ) ; ", "after_ctx": " ", "after_line": "return ( concrete _ type = = key . concrete _ type ) & & string . equals ( key . name , name , string _ comparison . ordinal ) ;", "predictions": ["return ( concrete _ type = = key . concrete <-> <%> = </@> this <-> <-> . equals <-> key . ! _ null _ ordinal _ </@> <%> { 1 , 0 _ if . root _ root . root _ if _ root _ config _ root _ root . root _ if _ root _ config _ if _ equals . root _ if . root _ config _ root _ changed _ root _ root . root _ if _ root _ config _ - </%> ;"]}, {"before_ctx": " ", "before_line": " this . factory = factory ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "factory = factory ;", "predictions": ["factory = factory ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using layouts ;", "predictions": ["using n _ log _ layouts ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . layout = layout ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "layout = layout ;", "predictions": ["layout = layout ;"]}, {"before_ctx": " ", "before_line": " return this . format ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return format ;", "predictions": ["return format ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . format = value ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "format = value ;", "predictions": ["format = value ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return this . inner _ format ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return inner _ format ;", "predictions": ["return inner _ format ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . inner _ format = value ; ", "after_ctx": " ", "after_line": "inner _ format = value ;", "predictions": ["inner _ format = value ;"]}, {"before_ctx": " ", "before_line": " foreach ( exception _ rendering _ format rendering _ format in this . formats ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "foreach ( exception _ rendering _ format rendering _ format in formats )", "predictions": ["foreach ( exception _ rendering _ <%> <-> . this ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " separator = this . separator ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "separator = separator ;", "predictions": ["separator = separator ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " while ( current _ exception ! = null & & current _ level < this . max _ inner _ exception _ level ) ", "after_ctx": " ", "after_line": "while ( current _ exception ! = null & & current _ level < max _ inner _ exception _ level )", "predictions": ["while ( current _ exception ! = null & & current _ </%> ( max . max . max . new . operation . max . process . process . </%> ;"]}, {"before_ctx": " ", "before_line": " sb . append ( this . inner _ exception _ separator ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "sb . append ( inner _ exception _ separator ) ;", "predictions": ["sb . append ( inner _ exception _ separator ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " foreach ( exception _ rendering _ format rendering _ format in this . inner _ formats ? ? this . formats ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "foreach ( exception _ rendering _ format rendering _ format in inner _ formats ? ? formats )", "predictions": ["foreach ( exception _ rendering _ format rendering _ format in inner this error this error this . ) . ! 0 if"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " separator = this . separator ; ", "after_ctx": " ", "after_line": "separator = separator ;", "predictions": ["separator = separator ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . increment _ usage _ count ( type . base _ type ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "increment _ usage _ count ( type . base _ type ) ;", "predictions": ["increment _ usage _ count ( type . base _ type <-> ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . increment _ usage _ count ( iface ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "increment _ usage _ count ( iface ) ;", "predictions": ["increment _ usage _ count ( in </@> ) </@> </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . increment _ usage _ count ( method . return _ type ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "increment _ usage _ count ( method . return _ type ) ;", "predictions": ["increment _ usage _ count ( method . return _ type ( <%> _ sb ) </@> </@> increment & <-> _ in ? ) ! <@> . async _ count ) </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . increment _ usage _ count ( p . parameter _ type ) ; ", "after_ctx": " ", "after_line": "increment _ usage _ count ( p . parameter _ type ) ;", "predictions": ["increment _ usage _ count ( p . parameter this </%> <-> _"]}, {"before_ctx": " ", "before_line": " this . increment _ usage _ count ( type . get _ generic _ type _ definition ( ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "increment _ usage _ count ( type . get _ generic _ type _ definition ( ) ) ;", "predictions": ["increment _ usage _ count ( type . get _ generic . ( . </%> . current current current <%> <%> <%> . = this <-> <-> <-> <-> <-> <-> <%> <%> <-> ) <-> <-> ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . increment _ usage _ count ( parm ) ; ", "after_ctx": " ", "after_line": "increment _ usage _ count ( parm ) ;", "predictions": ["increment _ usage _ count ( p this </%> </%> _ = increment </%> </%>"]}, {"before_ctx": " ", "before_line": " args . remote _ end _ point = this . parse _ endpoint _ address ( new uri ( this . address ) , this . address _ family ) ; args . completed + = this . socket _ operation _ completed ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "args . remote _ end _ point = parse _ endpoint _ address ( new uri ( address ) , address _ family ) ; args . completed + = socket _ operation _ completed ;", "predictions": ["args . remote _ end _ point = parse _ endpoint _ address ( new uri ( address ) , address _ family ) ; args . completed + = socket _ operation <%> }"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . async _ operation _ in _ progress ) { this . close _ continuation = continuation ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( async _ operation _ in _ progress ) { close _ continuation = continuation ;", "predictions": ["if ( async _ operation _ in _ progress ) { close _ continuation = continuation ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . close _ socket ( continuation ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "close _ socket ( continuation ) ;", "predictions": ["close _ socket ( continuation ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ! this . async _ operation _ in _ progress & & this . pending _ requests . count = = 0 ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! async _ operation _ in _ progress & & pending _ requests . count = = 0 )", "predictions": ["if ( ! async _ operation _ in _ progress & & pending this . count this )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ continuation = continuation ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "flush _ continuation = continuation ;", "predictions": ["flush _ continuation = continuation ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " var sock = this . socket ; this . socket = null ; ", "after_ctx": " ", "after_line": "var sock = socket ; socket = null ;", "predictions": ["var sock = socket ; socket ;"]}, {"before_ctx": " ", "before_line": " this . async _ operation _ in _ progress = false ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "async _ operation _ in _ progress = false ;", "predictions": ["async _ operation _ in _ progress <@> false ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . pending _ error = new io _ exception ( STR + e . socket _ error ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "pending _ error = new io _ exception ( STR + e . socket _ error ) ;", "predictions": ["pending _ error = new io _ exception ( STR + e . socket <-> </%> ! ! ! e _ ( ; ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " async _ continuation ( this . pending _ error ) ; } } this . process _ next _ queued _ item ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "async _ continuation ( pending _ error ) ; } } process _ next _ queued _ item ( ) ;", "predictions": ["async _ continuation ( pending _ error ) ; } } process _ next _ queued _ item ( ( ( ( ( ( = = = = = = = = = = = = ( ( ( ( count ( ( ( ( ( count ( ( count this ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ( count ( ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . async _ operation _ in _ progress ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( async _ operation _ in _ progress )", "predictions": ["if ( async _ operation _ in _ progress )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . pending _ error ! = null ) { while ( this . pending _ requests . count ! = 0 ) { args = this . pending _ requests . dequeue ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( pending _ error ! = null ) { while ( pending _ requests . count ! = 0 ) { args = pending _ requests . dequeue ( ) ;", "predictions": ["if ( pending _ error ! = null ) { while ( pending _ requests . count ! = 0 ) { args = ( ( ( ( _ </@> _ dequeue ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " async _ continuation ( this . pending _ error ) ; } } if ( this . pending _ requests . count = = 0 ) { var fc = this . flush _ continuation ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "async _ continuation ( pending _ error ) ; } } if ( pending _ requests . count = = 0 ) { var fc = flush _ continuation ;", "predictions": ["async _ continuation ( pending _ error ) ; } } if ( pending _ requests . count = = 0 ) { var fc = flush _ continuation ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . flush _ continuation = null ; fc ( this . pending _ error ) ; } var cc = this . close _ continuation ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "flush _ continuation = null ; fc ( pending _ error ) ; } var cc = close _ continuation ;", "predictions": ["flush _ continuation = null ; fc ( pending _ error ) ; } var cc = close _ continuation ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . close _ continuation = null ; this . close _ socket ( cc ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "close _ continuation = null ; close _ socket ( cc ) ;", "predictions": ["close _ continuation = null ; close _ socket ( cc ) ;"]}, {"before_ctx": " ", "before_line": " this . parse ( reader ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parse ( reader ) ;", "predictions": ["parse ( reader ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . parse ( reader ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "parse ( reader ) ;", "predictions": ["parse ( reader ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " foreach ( var ch in this . children ) ", "after_ctx": " ", "after_line": "foreach ( var ch in children )", "predictions": ["foreach ( var ch in children )"]}, {"before_ctx": " ", "before_line": " string value = this . get _ optional _ attribute ( attribute _ name , null ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "string value = get _ optional _ attribute ( attribute _ name , null ) ;", "predictions": ["string value = get _ optional _ attribute ( ) this this . object ( null ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " throw new n _ log _ configuration _ exception ( STR + attribute _ name + STR + this . local _ name + STR ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "throw new n _ log _ configuration _ exception ( STR + attribute _ name + STR + local _ name + STR ) ;", "predictions": ["throw new n _ log _ configuration _ exception ( <%> _ attribute . _ this this <%> . name this _ <%> 1 <-> <-> = <-> = <-> = <-> = <-> . , this <%> _ = _ local </@> <@> </@> <@> </@> <-> </@> <@> </@> </@> <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " throw new invalid _ operation _ exception ( STR + string . join ( STR , allowed _ names ) + STR + this . local _ name + STR ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "throw new invalid _ operation _ exception ( STR + string . join ( STR , allowed _ names ) + STR + local _ name + STR ) ;", "predictions": ["throw new invalid _ operation _ exception ( STR + string _ names , exception ) . <%> . logger . local ( new <-> <-> name . <%> ( <%> try <-> . <@> ; <%> size invalid _ this & this & full <%> if _ exception & this . full <%> this _ ( ( this _ string </%> this lock lazy ( ( ( </@> ( this ( 0 ( this ( local <%> lazy ( this lock ( this ( local <%> this ( local <%> lazy ( this lock local <%> lazy ( local"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " foreach ( var child _ element in this . children ) ", "after_ctx": " ", "after_line": "foreach ( var child _ element in children )", "predictions": ["foreach ( var child _ element in <-> <->"]}, {"before_ctx": " ", "before_line": " this . value + = reader . value ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "value + = reader . value ;", "predictions": ["value + = reader . value <%>"]}, {"before_ctx": " ", "before_line": " if ( this . machine _ name ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( machine _ name ! = null )", "predictions": ["if ( machine _ name ! = null )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . perf _ counter = new performance _ counter ( this . category , this . counter , this . instance , this . machine _ name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "perf _ counter = new performance _ counter ( category , counter , instance , machine _ name ) ;", "predictions": ["perf _ counter = new performance _ counter ( category , counter , instance , lock _ name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . perf _ counter = new performance _ counter ( this . category , this . counter , this . instance , true ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "perf _ counter = new performance _ counter ( category , counter , instance , true ) ;", "predictions": ["perf _ counter = new performance _ counter ( category , counter , instance , true ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . perf _ counter . close ( ) ; this . perf _ counter = null ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "perf _ counter . close ( ) ; perf _ counter = null ;", "predictions": ["perf _ counter . close ( ) ; perf _ counter = null </%>"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . stop _ lazy _ writer _ thread ( ) ; if ( monitor . try _ enter ( this . write _ lock _ object , NUM ) ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "stop _ lazy _ writer _ thread ( ) ; if ( monitor . try _ enter ( write _ lock _ object , NUM ) )", "predictions": ["stop _ lazy _ writer _ thread ( ) ; if ( monitor . try </%> ( int </%> </@> ; object close = = close close lock close object close = close ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " monitor . exit ( this . write _ lock _ object ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "monitor . exit ( write _ lock _ object ) ;", "predictions": ["monitor . exit ( write _ lock _ object ) name"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . timer _ lock _ object ) { if ( this . lazy _ writer _ timer ! = null ) { if ( this . time _ to _ sleep _ between _ batches < = 0 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( timer _ lock _ object ) { if ( lazy _ writer _ timer ! = null ) { if ( time _ to _ sleep _ between _ batches < = 0 )", "predictions": ["lock ( timer _ lock _ object ) { if ( lazy _ writer _ timer ! = null ) <@> ) ( ) <@> ( time this . time this time ( ( 0 _ batches instance ( ( 0 _ batches instance _ 0 _ ( 0 _ null _ ( 0 _ _ _ _ 0 )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . trace ( STR , this . name ) ; this . lazy _ writer _ timer . change ( 1 , timeout . infinite ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "internal _ logger . trace ( STR , name ) ; lazy _ writer _ timer . change ( 1 , timeout . infinite ) ;", "predictions": ["internal _ logger . trace ( STR , name ) ; lazy ! ! </@> , change . instance ( </@> . lazy ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . lazy _ writer _ timer . change ( this . time _ to _ sleep _ between _ batches , timeout . infinite ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "lazy _ writer _ timer . change ( time _ to _ sleep _ between _ batches , timeout . infinite ) ;", "predictions": ["lazy _ writer _ timer . change ( time _ to _ lazy <%> STR <%> if </@> </@> ) ) )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock _ taken = monitor . try _ enter ( this . write _ lock _ object ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock _ taken = monitor . try _ enter ( write _ lock _ object ) ;", "predictions": ["lock _ taken = monitor . try _ enter ( write , write"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . timer _ lock _ object ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( timer _ lock _ object )", "predictions": ["lock ( timer _ lock _ object )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . lazy _ writer _ timer ! = null ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( lazy _ writer _ timer ! = null )", "predictions": ["if ( lazy _ writer _ timer ! = get </@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " monitor . exit ( this . write _ lock _ object ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "monitor . exit ( write _ lock _ object ) ;", "predictions": ["monitor . exit ( write _ lock _ object ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . timer _ lock _ object ) { var current _ timer = this . lazy _ writer _ timer ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( timer _ lock _ object ) { var current _ timer = lazy _ writer _ timer ;", "predictions": ["lock ( timer _ lock _ object ) { var current . object current this . lazy this this . lazy this this . null this instance this . lock this . lock this . ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . lazy _ writer _ timer = null ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lazy _ writer _ timer = null ;", "predictions": ["lazy _ writer _ timer = null ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write ( log _ event ) ; ", "after_ctx": " ", "after_line": "write ( log _ event ) ;", "predictions": ["write ( log _ event ) ;"]}, {"before_ctx": " ", "before_line": " if ( this . lazy _ writer _ timer = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( lazy _ writer _ timer = = null )", "predictions": ["if ( lazy _ writer _ timer = = null ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . write _ lock _ object ) { int count = write _ events _ in _ queue ( this . batch _ size , STR ) ; if ( count = = this . batch _ size ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( write _ lock _ object ) { int count = write _ events _ in _ queue ( batch _ size , STR ) ; if ( count = = batch _ size )", "predictions": ["lock ( write _ lock _ object ) { int count = write _ events this in this . ) ; . </@> = full ( full ) ; . </@> )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( wrote _ full _ batch _ size & & this . time _ to _ sleep _ between _ batches < = 0 ) this . start _ instant _ writer _ timer ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( wrote _ full _ batch _ size & & time _ to _ sleep _ between _ batches < = 0 ) start _ instant _ writer _ timer ( ) ;", "predictions": ["if ( wrote _ full _ batch _ size & & time _ to _ sleep _ between _ batches < 0 if = start . start lock lazy . to . to ) lock = time . to ."]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . error ( exception , STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "internal _ logger . error ( exception , STR , name ) ;", "predictions": ["internal _ logger . error ( exception , STR , name </@> ; ) ; ) ,"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . time _ to _ sleep _ between _ batches < = 0 ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( time _ to _ sleep _ between _ batches < = 0 )", "predictions": ["if ( time _ to _ sleep _ between _ batches < = 0 )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( ! wrote _ full _ batch _ size & & this . request _ queue . request _ count > 0 ) this . start _ lazy _ writer _ timer ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! wrote _ full _ batch _ size & & request _ queue . request _ count > 0 ) start _ lazy _ writer _ timer ( ) ;", "predictions": ["if ( ! wrote _ full _ batch _ size & & request _ lazy . </%> _ count = ; start _ if _ time _ start <%> <-> <"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . start _ lazy _ writer _ timer ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "start _ lazy _ writer _ timer ( ) ;", "predictions": ["start _ lazy _ writer _ timer ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " lock ( this . write _ lock _ object ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( write _ lock _ object )", "predictions": ["lock ( write _ lock _ object )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . time _ to _ sleep _ between _ batches < = 0 & & this . request _ queue . request _ count > 0 ) this . start _ lazy _ writer _ timer ( ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( time _ to _ sleep _ between _ batches < = 0 & & request _ queue . request _ count > 0 ) start _ lazy _ writer _ timer ( ) ;", "predictions": ["if ( time _ to _ sleep _ between _ batches < = 0 <-> <-> <@> . queue this . . count write . lazy . start STR ( ( ( ( ( ( ( ( ( ("]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . error ( exception , STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "internal _ logger . error ( exception , STR , name ) ;", "predictions": ["internal _ logger . error ( exception , STR , name ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . wrapped _ target = = null ) { internal _ logger . error ( STR , this . name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( wrapped _ target = = null ) { internal _ logger . error ( STR , name ) ;", "predictions": ["if ( wrapped _ target = = null ) { internal _ logger . STR log log log log <%> <%> <-> ( logger ( logger ( logger ( logger ( logger ( full & full & full & queue 0 0 _ count 0 0 0 0 0 0 0 ) ) ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . trace ( STR , this . name , log _ events . length , reason ) ; this . wrapped _ target . write _ async _ log _ events ( log _ events ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "internal _ logger . trace ( STR , name , log _ events . length , reason ) ; wrapped _ target . write _ async _ log _ events ( log _ events ) ;", "predictions": ["internal _ logger . trace ( STR , name , log _ events . length , reason ) ; wrapped _ target . write _ async _ log _ events ( log _ events ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " internal _ logger . trace ( STR , this . name , log _ events . count , reason ) ; this . wrapped _ target . write _ async _ log _ events ( log _ events ) ; ", "after_ctx": " ", "after_line": "internal _ logger . trace ( STR , name , log _ events . count , reason ) ; wrapped _ target . write _ async _ log _ events ( log _ events ) ;", "predictions": ["internal _ logger . trace ( STR , name , log _ events . count <%> lazy ( lazy ( start . write ( </%> . <-> ( </%> . <-> ( lazy . logger <%> <%> . ( <%> , reason , ( ( </%> this , name , ( _ logger ) ) ) ( log ( log ( log ( log ( log ( log ( STR ( log ( log ( log ( log ( log ( log ( log ( log ( log ( log ( log ( log ( STR ( STR ( STR"]}, {"before_ctx": " ", "before_line": " assert _ layout _ renderer _ output ( $ STR , path . combine ( this . sys _ dir , STR ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "assert _ layout _ renderer _ output ( $ STR , path . combine ( sys _ dir , STR ) ) ;", "predictions": ["assert _ layout _ renderer _ output ( $ STR , path . combine STR sys this </%> </%> </%> </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " assert _ layout _ renderer _ output ( $ STR , path . combine ( this . sys _ dir , STR ) ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "assert _ layout _ renderer _ output ( $ STR , path . combine ( sys _ dir , STR ) ) ;", "predictions": ["assert _ layout _ renderer _ output ( $ STR , path . combine <-> sys this </%> </%> </%> <@>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " assert _ layout _ renderer _ output ( $ STR , path . combine ( this . sys _ dir , STR , STR ) ) ; ", "after_ctx": " ", "after_line": "assert _ layout _ renderer _ output ( $ STR , path . combine ( sys _ dir , STR , STR ) ) ;", "predictions": ["assert _ layout _ renderer _ output ( $ STR , path . combine _ , <%> <-> ( sys this <-> <%> <-> ) ) </@> <-> </@> ;"]}, {"before_ctx": " ", "before_line": " this . property = garbage _ collector _ property . total _ memory ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "property = garbage _ collector _ property . total _ memory ;", "predictions": ["property = garbage _ collector _ property . total this this . <%> <@> this , this . this $ $ assert ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " switch ( this . property ) ", "after_ctx": " ", "after_line": "switch ( property )", "predictions": ["switch ( property )"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " if ( this . short _ name ) ", "after_ctx": " ", "after_line": "if ( short _ name )", "predictions": ["if ( short _ name )"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " if ( this . universal _ time ) ", "after_ctx": " ", "after_line": "if ( universal _ time )", "predictions": ["if ( universal _ time )"]}, {"before_ctx": " ", "before_line": " this . happy _ path _ test ( false , line _ ending _ mode . crlf , STR , STR , STR ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "happy _ path _ test ( false , line _ ending _ mode . crlf , STR , STR , STR ) ;", "predictions": ["happy _ path _ test ( false , line _ ending _ mode . <@> . <@> . STR . STR </%> </@> < <-> </@> <@> </@> </@> <@> ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . happy _ path _ test ( true , line _ ending _ mode . crlf , STR , STR , STR ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "happy _ path _ test ( true , line _ ending _ mode . crlf , STR , STR , STR ) ;", "predictions": ["happy _ path _ test ( true , line _ ending _ mode . <@> . error . <-> . <-> </@> $"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . happy _ path _ test ( true , line _ ending _ mode . lf , STR , STR , STR ) ; ", "after_ctx": " ", "after_line": "happy _ path _ test ( true , line _ ending _ mode . lf , STR , STR , STR ) ;", "predictions": ["happy _ path _ test ( true , line _ ending _ mode . false . ( ( ( ( ( ( <-> </@> true . lf . lf . <-> . <-> . <-> , <-> <%> <%> <%> request request request request request _ </@> . > ) ! & & _ & </%> </@> </@> </@> </@> </@> <@> write <%> id <%> mode this <-> . log . <-> </@> </@> </@> </@> </@> </@> </@> <@> ) <@>"]}, {"before_ctx": " ", "before_line": " this . memory _ stream = new memory _ stream ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "memory _ stream = new memory _ stream ( ) ;", "predictions": ["memory _ stream = new memory _ stream ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . log . write _ line ( STR , this . id , this . address ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "log . write _ line ( STR , id , address ) ;", "predictions": ["log . write _ line ( STR , id , address ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . log . write _ line ( STR , this . id ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "log . write _ line ( STR , id ) ;", "predictions": ["log . write _ line ( STR , id ) ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using config ;", "predictions": ["using n _ log _ config ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . culture = culture _ info . invariant _ culture ; this . lowercase = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "culture = culture _ info . invariant _ culture ; lowercase = true ;", "predictions": ["culture = culture _ info . invariant _ culture ; lowercase = true ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . lowercase ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( lowercase )", "predictions": ["if ( lowercase )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " culture _ info culture = this . culture ; ", "after_ctx": " ", "after_line": "culture _ info culture = culture ;", "predictions": ["culture _ info culture = culture ;"]}, {"before_ctx": " ", "before_line": " this . name = name ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . wrapped _ target = wrapped _ target ; this . retry _ count = retry _ count ; this . retry _ delay _ milliseconds = retry _ delay _ milliseconds ; this . optimize _ buffer _ reuse = get _ type ( ) = = typeof ( retrying _ target _ wrapper ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "wrapped _ target = wrapped _ target ; retry _ count = retry _ count ; retry _ delay _ milliseconds = retry _ delay _ milliseconds ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( retrying _ target _ wrapper ) ;", "predictions": ["wrapped _ target = wrapped _ target ; retry _ count = retry _ count ; retry _ delay _ milliseconds = retry _ delay _ milliseconds ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( retrying _ target _ wrapper ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . retry _ sync _ object ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( retry _ sync _ object )", "predictions": ["lock ( retry _ sync _ object )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ! this . is _ initialized ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( ! is _ initialized )", "predictions": ["if ( ! is _ initialized )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . write _ async _ thread _ safe ( log _ events [ i ] ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "write _ async _ thread _ safe ( log _ events [ i ] ) ;", "predictions": ["write _ async _ thread _ safe ( log _ events [ i ] ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . retry _ sync _ object ) ", "after_ctx": " ", "after_line": "lock ( retry _ sync _ object )", "predictions": ["lock ( retry _ sync _ object )"]}, {"before_ctx": " ", "before_line": " internal _ logger . warn ( STR , this . wrapped _ target , ex , retry _ number , this . retry _ count ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "internal _ logger . warn ( STR , wrapped _ target , ex , retry _ number , retry _ count ) ;", "predictions": ["internal _ logger . warn ( STR , wrapped _ target , ex , retry _ number , retry _ count ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( retry _ number > = this . retry _ count ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( retry _ number > = retry _ count )", "predictions": ["if ( retry _ number > = retry _ count )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " for ( int i = 0 ; i < this . retry _ delay _ milliseconds ; ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "for ( int i = 0 ; i < retry _ delay _ milliseconds ; )", "predictions": ["for ( int i = 0 ; i < retry _ delay _ milliseconds ; )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " int retry _ delay = math . min ( NUM , this . retry _ delay _ milliseconds - i ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "int retry _ delay = math . min ( NUM , retry _ delay _ milliseconds - i ) ;", "predictions": ["int retry _ delay = math . min ( NUM , retry _ delay _ milliseconds - i ) ;"]}, {"before_ctx": " ", "before_line": " this . literal _ value = literal _ value ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "literal _ value = literal _ value ;", "predictions": ["literal _ value = literal _ value ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . literal _ value = = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( literal _ value = = null )", "predictions": ["if ( literal _ value = = null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return convert . to _ string ( this . literal _ value , culture _ info . invariant _ culture ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return convert . to _ string ( literal _ value , culture _ info . invariant _ culture ) ;", "predictions": ["return convert . to _ string ( literal _ value , culture _ info . invariant this this . <%> debug debug debug _ ex = literal _ value error </%> </%> _ out . output _ </%> = </%> _ <@> ( NUM . NUM ( culture this culture this culture this . culture this ( </@> this _ info . </@> manager manager manager _ </@> . = manager ) manager manager _ info _ </@> manager _ </@> _ </@> manager manager manager manager _ </@> manager manager manager _ string _ = . <@> manager manager"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . literal _ value ; ", "after_ctx": " ", "after_line": "return literal _ value ;", "predictions": ["return literal _ value ;"]}, {"before_ctx": " ", "before_line": " this . format = STR ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "format = STR ;", "predictions": ["format = STR ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . generated _ from _ log _ event ) ", "after_ctx": " ", "after_line": "if ( generated _ from _ log _ event )", "predictions": ["if ( generated _ from _ log . <@> this"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " builder . append ( guid . new _ guid ( ) . to _ string ( this . format ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( guid . new _ guid ( ) . to _ string ( format ) ) ;", "predictions": ["builder . append ( guid . new _ guid ( ( ( string ( has this <%> <%> <%> this this . value <%> <%> , <-> , count , <-> , count , count , count , count , count this . out this this . out this . out this this . out this . out this . <@> <%> <%> <%> _ </%> <%> <%> <%> <%> <%> this . <@> <%> <%> <%> _ _ NUM <%> . <@> <%> <%> <%> _ _ <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>"]}, {"before_ctx": " ", "before_line": " base . thread _ agnostic = false ; ", "after_ctx": " <%> <-> base . </%>", "after_line": "thread _ agnostic = false ;", "predictions": ["thread _ agnostic = false ;"]}, {"before_ctx": "<%> <-> base . </%> ", "before_line": " base . thread _ agnostic = false ; ", "after_ctx": " ", "after_line": "thread _ agnostic = false ;", "predictions": ["thread _ agnostic = false ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . include _ mdc ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( include _ mdc )", "predictions": ["if ( include _ mdc )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . include _ mdlc ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( include _ mdlc )", "predictions": ["if ( include _ mdlc )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( this . include _ all _ properties & & log _ event . has _ properties ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( include _ all _ properties & & log _ event . has _ properties )", "predictions": ["if ( include _ all _ properties & & log this event . has this </@> safe _ convert . = this )"]}, {"before_ctx": " ", "before_line": " if ( ! this . suppress _ spaces ) ", "after_ctx": " <%> <-> this . </%>", "after_line": "if ( ! suppress _ spaces )", "predictions": ["if ( ! suppress _ spaces )"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " if ( ! this . suppress _ spaces ) ", "after_ctx": " ", "after_line": "if ( ! suppress _ spaces )", "predictions": ["if ( ! suppress _ spaces )"]}, {"before_ctx": " ", "before_line": " public n _ log . targets . debug _ target get _ debug _ target ( string target _ name ) ", "after_ctx": " <%> <*> protected n _ log . targets . -> protected </%> <%> <-> n _ log . targets . </%>", "after_line": "public debug _ target get _ debug _ target ( string target _ name )", "predictions": ["public debug _ target get _ debug _ target ( string target _ name )"]}, {"before_ctx": "<%> <*> public n _ log . targets . -> public </%> ", "before_line": " protected n _ log . targets . debug _ target get _ debug _ target ( string target _ name , logging _ configuration configuration ) { var debug _ target = ( n _ log . targets . debug _ target ) configuration . find _ target _ by _ name ( target _ name ) ; ", "after_ctx": " ", "after_line": "protected debug _ target get _ debug _ target ( string target _ name , logging _ configuration configuration ) { var debug _ target = ( debug _ target ) configuration . find _ target _ by _ name ( target _ name ) ;", "predictions": ["protected n _ log . targets . debug _ target get _ debug _ target ( string target _ name , logging _ configuration configuration ) { var debug _ target = ( n _ log . targets . debug _ target ) configuration . find _ target _ by _ name ( target _ name ) ;"]}, {"before_ctx": " ", "before_line": " lock ( this . writer ) { this . writer . write ( value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( writer ) { writer . write ( value ) ;", "predictions": ["lock ( writer ) { writer . write ( value <-> <-> _"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . writer ) { this . writer . write _ line ( value ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "lock ( writer ) { writer . write _ line ( value ) ;", "predictions": ["lock ( writer ) { writer . write _ line ( value ) ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " lock ( this . writer ) { return this . writer . to _ string ( ) ; ", "after_ctx": " ", "after_line": "lock ( writer ) { return writer . to _ string ( ) ;", "predictions": ["lock ( writer ) { return writer . to _ has this ( & ) </@> ) ;"]}, {"before_ctx": " ", "before_line": " this . old _ console _ output _ writer = console . out ; this . old _ console _ error _ writer = console . error ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "old _ console _ output _ writer = console . out ; old _ console _ error _ writer = console . error ;", "predictions": ["old _ console _ output _ writer = console . out ; old _ console _ error _ writer = console . error ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . global _ threshold = log _ manager . global _ threshold ; this . throw _ exceptions = log _ manager . throw _ exceptions ; this . throw _ config _ exceptions = log _ manager . throw _ config _ exceptions ; ", "after_ctx": " ", "after_line": "global _ threshold = log _ manager . global _ threshold ; throw _ exceptions = log _ manager . throw _ exceptions ; throw _ config _ exceptions = log _ manager . throw _ config _ exceptions ;", "predictions": ["global _ threshold = log _ manager . global _ threshold ; throw _ exceptions = log _ manager . throw _ exceptions ; throw _ config _ exceptions = log _ manager . throw _ config _ exceptions ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using common ;", "predictions": ["using n _ log _ common ;"]}, {"before_ctx": "<%> <-> n _ log _ </%> ", "before_line": " this . async _ continuation = async _ continuation ; this . timeout _ timer = new timer ( this . timer _ elapsed , null , timeout , time _ span . from _ milliseconds ( - 1 ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "async _ continuation = async _ continuation ; timeout _ timer = new timer ( timer _ elapsed , null , timeout , time _ span . from _ milliseconds ( - 1 ) ) ;", "predictions": ["async _ continuation = async _ continuation ; timeout _ timer = new timer ( timer _ elapsed , null , timeout , time _ span . from _ milliseconds <+> ; . . time child i _ parameters child type type child time child _ target child type ) string string _ -> , i ) string"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . stop _ timer ( ) ; var cont = interlocked . exchange ( ref this . async _ continuation , null ) ; ", "after_ctx": " ", "after_line": "stop _ timer ( ) ; var cont = interlocked . exchange ( ref async _ continuation , null ) ;", "predictions": ["stop _ timer ( ) ; var cont = interlocked . count </%> ref ;"]}, {"before_ctx": " ", "before_line": " this . stop _ timer ( ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "stop _ timer ( ) ;", "predictions": ["stop _ timer ( ) ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " var current _ timer = this . timeout _ timer ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "var current _ timer = timeout _ timer ;", "predictions": ["var current _ timer = timeout _ timer ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . timeout _ timer = null ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "timeout _ timer = null ;", "predictions": ["timeout _ timer = null ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . function ( new timeout _ exception ( STR ) ) ; ", "after_ctx": " ", "after_line": "function ( new timeout _ exception ( STR ) ) ;", "predictions": ["function ( new timeout _ exception ( STR <-> <-> <-> <%> <%> ) <%> ) bound"]}, {"before_ctx": " ", "before_line": " this . expression = expression ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "expression = expression ;", "predictions": ["expression = expression ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " return STR + this . expression + STR ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "return STR + expression + STR ;", "predictions": ["return STR + expression + STR ;"]}, {"before_ctx": " ", "before_line": " using n _ log _ common ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "using common ;", "predictions": ["using n _ log _ common ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . accepts _ log _ event = true ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "accepts _ log _ event = true ;", "predictions": ["accepts _ log _ event = true ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " int actual _ parameter _ count = this . method _ parameters . count ; if ( this . accepts _ log _ event ) ", "after_ctx": " ", "after_line": "int actual _ parameter _ count = method _ parameters . count ; if ( accepts _ log _ event )", "predictions": ["int actual _ parameter _ count = method _ parameters . ! </@> method _ parameters . ! default _ event </@>"]}, {"before_ctx": " ", "before_line": " this . late _ bound _ method = internal . reflection _ helpers . create _ late _ bound _ method ( method _ info ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "late _ bound _ method = internal . reflection _ helpers . create _ late _ bound _ method ( method _ info ) ;", "predictions": ["late _ bound _ method = internal . reflection _ helpers this this this this this this this <@> this <@> <@> <@> <@>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " this . late _ bound _ method _ default _ parameters = new object [ formal _ parameters . length - method _ parameters . count ] ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "late _ bound _ method _ default _ parameters = new object [ formal _ parameters . length - method _ parameters . count ] ;", "predictions": ["late _ bound _ method _ default _ parameters = parameters [ parameters this . if ] ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " this . late _ bound _ method _ default _ parameters = null ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "late _ bound _ method _ default _ parameters = null ;", "predictions": ["late _ bound _ method _ default _ parameters = logger </%>"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " sb . append ( this . condition _ method _ name ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "sb . append ( condition _ method _ name ) ;", "predictions": ["sb . append ( condition _ method _ name ) ,"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . accepts _ log _ event ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( accepts _ log _ event )", "predictions": ["if ( accepts _ log _ event )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " if ( this . late _ bound _ method _ default _ parameters ! = null ) ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%>", "after_line": "if ( late _ bound _ method _ default _ parameters ! = null )", "predictions": ["if ( late _ bound _ method _ default _ parameters ( event null </@> null )"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> <%> <-> this . </%> ", "before_line": " return this . late _ bound _ method ( null , call _ parameters ) ; ", "after_ctx": " ", "after_line": "return late _ bound _ method ( null , call _ parameters ) ;", "predictions": ["return late _ bound _ method ( null , call </%> logger . _ . level ) ( null ( null _ = </%> count ( if ) ( ) ) <@> ) <@>"]}, {"before_ctx": " ", "before_line": " using n _ log _ config ; using n _ log _ layouts ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "using config ; using layouts ;", "predictions": ["using n _ log _ layouts ; <-> </%> STR"]}, {"before_ctx": "<%> <-> n _ log _ </%> <%> <-> n _ log _ </%> ", "before_line": " this . layout = STR ; ", "after_ctx": " ", "after_line": "layout = STR ;", "predictions": ["layout = STR ;"]}, {"before_ctx": "<%> <+> valid _ </%> <%> <-> string name = child _ element . name ; </%> ", "before_line": " parse _ compound _ target ( type _ name _ to _ default _ target _ parameters , name , child _ element , compound , null ) ) ", "after_ctx": " <%> <+> wrapper , child _ element , </%> <%> <-> , name , child _ element , wrapper </%>", "after_line": "parse _ compound _ target ( compound , child _ element , type _ name _ to _ default _ target _ parameters , null ) )", "predictions": ["parse _ compound _ target ( type _ name _ to _ default _ target _ parameters , name , child _ element , compound , null ) )"]}, {"before_ctx": "<%> <+> valid _ </%> <%> <-> string name = child _ element . name ; </%> <%> <+> compound , child _ element , </%> <%> <-> , name , child _ element , compound </%> ", "before_line": " parse _ target _ wrapper ( type _ name _ to _ default _ target _ parameters , name , child _ element , wrapper ) ) ", "after_ctx": " <%> <*> dictionary < string , i _ logging _ configuration _ element > type _ name _ to _ default -> wrapper </%> <%> <*> parameters -> base wrapper </%> <%> <-> string name , </%> <%> <*> i _ logging -> validated </%> <%> <*> wrapper -> dictionary < string , validated _ configuration _ element > type _ name _ to _ default </%> <%> <*> base wrapper -> parameters </%>", "after_line": "parse _ target _ wrapper ( wrapper , child _ element , type _ name _ to _ default _ target _ parameters ) )", "predictions": ["parse _ target _ wrapper ( name _ name _ to _ default _ target _ parameters , name , child _ element , wrapper ) )"]}, {"before_ctx": " ", "before_line": " logger . error ( STR , ex ) ; ", "after_ctx": " <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>", "after_line": "logger . error ( ex , STR ) ;", "predictions": ["logger . error ( STR , ex ) STR"]}, {"before_ctx": "<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> ", "before_line": " logger . log ( log _ level . error , STR , ex ) ; ", "after_ctx": " <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>", "after_line": "logger . log ( log _ level . error , ex , STR ) ;", "predictions": ["logger . log ( STR , log _ level . error ) <@> <@> </@> <@> </@> </@> . . . . . . . . . this ( this ; . . . - , _ , , , , , , , , , , , , , , , , , , , , , , , , false ) ) target ) target target ;"]}, {"before_ctx": "<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> ", "before_line": " logger . trace ( STR , ex ) ; ", "after_ctx": " <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>", "after_line": "logger . trace ( ex , STR ) ;", "predictions": ["logger . trace ( STR , ex ) ;"]}, {"before_ctx": "<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> ", "before_line": " logger . debug ( STR , ex ) ; ", "after_ctx": " <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>", "after_line": "logger . debug ( ex , STR ) ;", "predictions": ["logger . debug ( STR , ex ) ;"]}, {"before_ctx": "<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> ", "before_line": " logger . info ( STR , ex ) ; ", "after_ctx": " <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>", "after_line": "logger . info ( ex , STR ) ;", "predictions": ["logger . info ( STR , ex ) ;"]}, {"before_ctx": "<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> ", "before_line": " logger . warn ( STR , ex ) ; ", "after_ctx": " <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>", "after_line": "logger . warn ( ex , STR ) ;", "predictions": ["logger . warn ( STR , ex ) ;"]}, {"before_ctx": "<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> ", "before_line": " logger . error ( STR , ex ) ; ", "after_ctx": " <%> <*> STR -> ex </%> <%> <*> ex -> STR </%>", "after_line": "logger . error ( ex , STR ) ;", "predictions": ["logger . error ( STR , ex ) ;"]}, {"before_ctx": "<%> <*> STR -> ex </%> <%> <*> ex -> STR </%> ", "before_line": " logger . fatal ( STR , ex ) ; ", "after_ctx": " ", "after_line": "logger . fatal ( ex , STR ) ;", "predictions": ["logger . fatal ( STR , ex ) ;"]}, {"before_ctx": "<%> <+> if ( file ! = null & & file . ends _ with ( STR , string _ comparison . invariant _ culture _ ignore _ case ) ) { return true ; } </%> ", "before_line": " var class _ names = new hash _ set < string > ( ) ; ", "after_ctx": " ", "after_line": "hash _ set < string > class _ names = new hash _ set < string > ( ) ;", "predictions": ["var class _ names = new hash _ set date . null key j continue . [ hash _ ( , , value ) ) ;"]}, {"before_ctx": " ", "before_line": " throw new system . not _ supported _ exception ( STR ) ; ", "after_ctx": " <%> <-> system . </%>", "after_line": "throw new not _ supported _ exception ( STR ) ;", "predictions": ["throw new not _ supported _ exception ( false <-> ,"]}, {"before_ctx": "<%> <-> system . </%> ", "before_line": " throw new system . not _ supported _ exception ( STR ) ; ", "after_ctx": " ", "after_line": "throw new not _ supported _ exception ( STR ) ;", "predictions": ["throw new not _ supported _ exception ( STR ) </%> </%> = </%> web <+>"]}, {"before_ctx": "<%> <*> protected internal -> public </%> <%> <-> if ( ! this . is _ initialized ) { internal _ logger . warn ( STR , this , this . get _ hash _ code ( ) ) ; } else { internal _ logger . trace ( STR , this , this . get _ hash _ code ( ) ) ; } foreach ( layout l in this . all _ layouts ) { l . close ( ) ; } this . is _ initialized = false ; </%> ", "before_line": " if ( this . is _ initialized ) { this . close ( ) ; } ", "after_ctx": " <%> <+> public override string to _ string ( ) { var target _ attribute = ( target _ attribute ) attribute . get _ custom _ attribute ( this . get _ type ( ) , typeof ( target _ attribute ) ) ; if ( target _ attribute ! = null ) { return target _ attribute . name + STR + ( this . name ? ? STR ) + STR ; } return this . get _ type ( ) . name ; </%>", "after_line": "this . close ( ) ;", "predictions": ["if ( is _ initialized ) { close ( ) ;"]}, {"before_ctx": "<%> <+> public layout layout { get ; private set ; } </%> ", "before_line": " return STR + this . layout . text + STR ; }     public override void populate _ layouts ( i _ collection < layout > layouts ) { this . layout . populate _ layouts ( layouts ) ; ", "after_ctx": " ", "after_line": "return STR + this . layout + STR ;", "predictions": ["return STR + layout . text + STR ) ) <%> return void _ _ _ <%> </@> <%> . set NUM <+> <+> , log ;"]}, {"before_ctx": " ", "before_line": " internal void add _ cached _ layout _ value ( layout layout , string value ) ", "after_ctx": " <%> <+> return value ; </%>", "after_line": "internal string add _ cached _ layout _ value ( layout layout , string value )", "predictions": ["internal string add _ cached _ layout _ -> <%> <%> layout web true <%> . context _ ;"]}, {"before_ctx": "<%> <-> _ key </%> ", "before_line": " builder . append ( context . request . query _ string [ query _ string _ key ] ) ; ", "after_ctx": " <%> <-> _ key </%> <%> <-> _ key </%> <%> <*> builder . append ( context . request . cookies [ cookie ] ) ; -> http _ cookie cookie = context . request . cookies [ cookie ] ; </%> <%> <+> if ( cookie ! = null ) </%>", "after_line": "builder . append ( context . request . query _ string [ query _ string ] ) ;", "predictions": ["builder . append ( query _ string [ 0 ) <-> key key ( ;"]}, {"before_ctx": "<%> <-> _ key </%> <%> <-> _ key </%> <%> <-> _ key </%> ", "before_line": " builder . append ( context . request . form [ form _ key ] ) ; ", "after_ctx": " <%> <*> builder . append ( context . request . cookies [ cookie ] ) ; -> http _ cookie cookie = context . request . cookies [ cookie ] ; </%> <%> <+> if ( cookie ! = null ) builder . append ( cookie . value ) ; </%>", "after_line": "builder . append ( context . request . form [ form ] ) ;", "predictions": ["builder . append ( context . request . to , to . to _ form <%> index </%> </%> </%> </%> ) ->"]}, {"before_ctx": "<%> <*> ) -> & & ! is _ format _ name _ syntax ( queue ) & & ! message _ queue _ proxy . exists ( queue ) ) </%> <%> <*> ! is -> create </%> <%> <*> format -> queue </%> <%> <*> name -> if </%> <%> <*> syntax ( queue -> not _ exists </%> <%> <-> & & ! message _ queue _ proxy . exists ( queue ) ) </%> ", "before_line": " if ( create _ queue _ if _ not _ exists ) { message _ queue _ proxy . create ( queue ) ; } else { return ; } ", "after_ctx": " ", "after_line": "message _ queue _ proxy . create ( queue ) ; } else { return ;", "predictions": ["return ;"]}, {"before_ctx": " ", "before_line": " nlog _ event . message _ ordinal = this . get _ string _ ordinal ( context , string _ table , event _ info . formatted _ message ) ; ", "after_ctx": " <%> <-> this . </%> <%> <-> this . </%>", "after_line": "nlog _ event . message _ ordinal = get _ string _ ordinal ( context , string _ table , event _ info . formatted _ message ) ;", "predictions": ["nlog _ event . message _ ordinal = get ; 1 . variable ) <+> . e . </@> _ <+> <+> ; . & . ;"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " nlog _ event . logger _ ordinal = this . get _ string _ ordinal ( context , string _ table , event _ info . logger _ name ) ; ", "after_ctx": " <%> <-> this . </%>", "after_line": "nlog _ event . logger _ ordinal = get _ string _ ordinal ( context , string _ table , event _ info . logger _ name ) ;", "predictions": ["nlog _ event . logger _ ordinal = get ( info <%> new variable ) </%> . info . ; _ } <+>"]}, {"before_ctx": "<%> <-> this . </%> <%> <-> this . </%> ", "before_line": " int string _ index = this . get _ string _ ordinal ( context , string _ table , value ) ; ", "after_ctx": " <%> <-> } private int get _ string _ ordinal ( n _ log _ events context , dictionary < string , int > string _ table , string value ) { int string _ index ; if ( ! string _ table . try _ get _ value ( value , out string _ index ) ) { string _ index = context . strings . count ; </%>", "after_line": "int string _ index = get _ string _ ordinal ( context , string _ table , value ) ;", "predictions": ["int string _ index = get _ string _ is ( if ) ) STR"]}, {"before_ctx": "<%> <*> . to _ lower ( culture _ info . invariant _ culture ) ; -> ; </%> ", "before_line": " if ( this . is _ target _ element ( name ) ) ", "after_ctx": " <%> <*> nlog -> configuration </%> <%> <*> factories . target -> item </%> <%> <+> . targets </%>", "after_line": "if ( is _ target _ element ( name ) )", "predictions": ["if ( is _ target _ element ( i . i ;"]}, {"before_ctx": " ", "before_line": " if ( this . is _ target _ element ( name ) ) ", "after_ctx": " <%> <*> nlog -> configuration </%> <%> <*> factories . target -> item </%> <%> <+> . targets </%>", "after_line": "if ( is _ target _ element ( name ) )", "predictions": ["if ( is _ target _ element ( name . name <%> <%> <%> <%> -> ) . <@> ) )"]}, {"before_ctx": " ", "before_line": " http _ web _ request request = ( http _ web _ request ) web _ request . create ( new uri ( this . url ) ) ; ", "after_ctx": " <%> <+> , string _ comparison . ordinal </%>", "after_line": "http _ web _ request request = ( http _ web _ request ) web _ request . create ( this . url ) ;", "predictions": ["http _ web _ request request = ( </%> , </%> , info <%> <%> . ) <-> builder ) var var configuration ;"]}, {"before_ctx": " ", "before_line": " builder . append ( this . get _ item ( request . get _ query _ string ( ) , this . query _ string ) ) ; ", "after_ctx": " <%> <-> this . </%> <%> <+> , culture _ info . invariant _ culture </%>", "after_line": "builder . append ( get _ item ( request . get _ query _ string ( ) , this . query _ string ) ) ;", "predictions": ["builder . append ( get _ item ( request . { ) ) {"]}, {"before_ctx": "<%> <-> this . </%> ", "before_line": " builder . append ( this . get _ item ( request . get _ form ( ) , this . form ) ) ; ", "after_ctx": " <%> <+> , culture _ info . invariant _ culture </%> <%> <-> this . </%>", "after_line": "builder . append ( get _ item ( request . get _ form ( ) , this . form ) ) ;", "predictions": ["builder . append ( get _ item ( request _ <+> . this _ , time add sb sb sb _ <%> _ [ ) . level . <-> -> ! . . . name queue queue queue _ internal ( get ( info this _ this _ get ( get ( this _ this _ this this _ _ this this _ _ get ( ) this _ get ( STR _ get ( STR this _ get ( STR this _ get ( ) this _ get ( name this _ get ( ) this _ get ("]}, {"before_ctx": "<%> <-> this . </%> <%> <+> , culture _ info . invariant _ culture </%> ", "before_line": " builder . append ( this . get _ item ( request . get _ server _ variables ( ) , this . server _ variable ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( get _ item ( request . get _ server _ variables ( ) , this . server _ variable ) ) ;", "predictions": ["builder . append ( get _ item ( item . culture _ _ _ name ( & _ <*> </%> = null = null = </%> _ _ <%> string . <%> string . <%> string . ; , server queue queue & & server queue queue queue queue queue queue & server <%> & server & server queue queue & syntax _ ! & server queue queue { & queue queue { & server queue <*> & server queue queue & & server queue queue queue & & server ) & server queue queue & & server queue {"]}, {"before_ctx": "<%> <-> & & value is string </%> ", "before_line": " else { new _ value = null ; return false ; } ", "after_ctx": " ", "after_line": "new _ value = null ; return false ;", "predictions": ["new _ value = null ; return false ;"]}, {"before_ctx": "<%> <-> if ( sb ! = null ) </%> <%> <-> continue ; } if ( sb = = null ) { sb = new string _ builder ( text . length ) ; for ( int j = 0 ; j < i ; + + j ) sb . append ( text [ j ] ) ; </%> ", "before_line": " return sb ! = null ? sb . to _ string ( ) : text ; ", "after_ctx": " <%> <-> } </%>", "after_line": "return sb . to _ string ( ) ; }", "predictions": ["return sb . to _ string ( ) <%>"]}, {"before_ctx": " ", "before_line": " internal _ logging _ config _ test ( log _ level . trace , true , true , log _ level . warn , true , true , STR ) ; ", "after_ctx": " <%> <+> , false </%> <%> <+> , false </%>", "after_line": "internal _ logging _ config _ test ( log _ level . trace , true , true , log _ level . warn , true , true , STR , true ) ;", "predictions": ["internal _ logging _ config _ test ( log . info , ( ; ( get _ var = configuration . item , ; <%> . _ . ) . request . ; . ; . request . request , equal 2 2 ;"]}, {"before_ctx": "<%> <+> , true </%> ", "before_line": " { internal _ logging _ config _ test ( log _ level . error , false , false , log _ level . info , false , false , STR ) ; ", "after_ctx": " <%> <+> , false </%>", "after_line": "{ internal _ logging _ config _ test ( log _ level . error , false , false , log _ level . info , false , false , STR , false ) ;", "predictions": ["internal _ logging _ config _ test ( <-> </%> system ) . append . configuration . ) _ ) . & . <%> . _ ) text ] 2 , STR level level ] 2 ) 2"]}, {"before_ctx": " ", "before_line": " return ( async _ continuation cont , t argument ) = > ", "after_ctx": " <%> <*> cont -> argument </%> <%> <*> argument -> cont </%>", "after_line": "return ( t argument , async _ continuation cont ) = >", "predictions": ["return ( t _ continuation cont , t . STR cont target false ( )"]}, {"before_ctx": " ", "before_line": " var changed = this . configuration _ changed ; ", "after_ctx": " <%> <+> protected virtual void on _ configuration _ reloaded ( logging _ configuration _ reloaded _ event _ args e ) { var reloaded = configuration _ reloaded ; if ( reloaded ! = null ) { </%>", "after_line": "var changed = configuration _ changed ;", "predictions": ["var changed = configuration _ changed ;"]}, {"before_ctx": "<%> <*> ) -> & & layout ! = null ) </%> ", "before_line": " if ( layout ! = null ) {  layout . initialize ( logging _ configuration ) ; } ", "after_ctx": " ", "after_line": "layout . initialize ( logging _ configuration ) ;", "predictions": ["layout . initialize ( logging _ configuration ) <+> <+>"]}, {"before_ctx": "<%> <*> ) -> & & cached _ time . key = = timestamp . date . add _ hours ( timestamp . hour ) ) </%> ", "before_line": " if ( cached _ time . key = = timestamp . date . add _ hours ( timestamp . hour ) ) { builder . append ( cached _ time . value ) ; return ; } ", "after_ctx": " ", "after_line": "builder . append ( cached _ time . value ) ; return ;", "predictions": ["builder . append ( cached _ time . <@> _ request ) </%> <-> <-> ;"]}, {"before_ctx": "<%> <+> this . status _ strip . dock = system . windows . forms . dock _ style . none ; </%> ", "before_line": " this . status _ strip . location = new system . drawing . point ( 0 , NUM ) ; ", "after_ctx": " ", "after_line": "this . status _ strip . location = new system . drawing . point ( 0 , 0 ) ;", "predictions": ["this . status _ strip . location = variable ;"]}, {"before_ctx": "<%> <+> 2 , </%> <%> <-> , 2 </%> <%> <+> NUM , </%> <%> <-> , NUM </%> <%> <+> NUM , </%> <%> <-> , NUM </%> <%> <+> NUM , </%> <%> <-> , NUM </%> <%> <+> NUM , </%> <%> <-> , NUM </%> ", "before_line": " assert . equal ( log _ level . fatal . compare _ to ( level _ max ) , 0 ) ; assert . equal ( log _ level . off . compare _ to ( level _ max ) , 1 ) ; ", "after_ctx": " ", "after_line": "assert . equal ( 0 , log _ level . fatal . compare _ to ( level _ max ) ) ; assert . equal ( 1 , log _ level . off . compare _ to ( level _ max ) ) ;", "predictions": ["assert . equal ( 0 , log _ <%> ( <%> ) ; if ( ; ; = = = = get ; this this STR ) }"]}, {"before_ctx": "<%> <*> equal -> single </%> <%> <-> 1 , </%> <%> <-> . count </%> ", "before_line": " assert . equal ( msg . body , STR ) ; ", "after_ctx": " ", "after_line": "assert . equal ( STR , msg . body ) ;", "predictions": ["assert . equal ( STR , msg . configuration -> _ create ) string string </%> <*> single . append </%> info . append changed ;"]}, {"before_ctx": " ", "before_line": " assert . equal ( t . name , STR ) ; ", "after_ctx": " <%> <*> equal -> single </%> <%> <-> 1 , </%> <%> <-> . count </%> <%> <*> ( typeof ( -> < </%> <%> <*> ) , -> > ( </%>", "after_line": "assert . equal ( STR , t . name ) ;", "predictions": ["assert . equal ( STR , t . name system </%> item <%> ) . is equal _ <%> ;"]}, {"before_ctx": " ", "before_line": " assert . equal ( t . name , STR ) ; ", "after_ctx": " <%> <*> equal -> single </%> <%> <-> 1 , </%> <%> <-> . count </%> <%> <*> ( typeof ( -> < </%> <%> <*> ) , -> > ( </%>", "after_line": "assert . equal ( STR , t . name ) ;", "predictions": ["assert . equal ( STR </%> level STR ] ] STR ( info STR ) ;"]}, {"before_ctx": " ", "before_line": " assert . equal ( t . name , STR ) ; ", "after_ctx": " <%> <*> ( typeof ( -> < </%> <%> <*> ) , -> > ( </%> <%> <*> ( typeof ( -> < </%> <%> <*> ) , -> > ( </%> <%> <*> ( typeof ( -> < </%> <%> <*> ) , -> > ( </%>", "after_line": "assert . equal ( STR , t . name ) ;", "predictions": ["assert . equal ( STR { <%> target target target target target ( name <*> get get ] ) string get get _ _ get string _ _ object _ return get get _ set get _ { & & & change file _ <*> file file file file file = change file file file file file file file file file file ) <%>"]}, {"before_ctx": " ", "before_line": " assert . equal ( t . name , STR ) ; ", "after_ctx": " <%> <+> STR , </%> <%> <-> , STR </%>", "after_line": "assert . equal ( STR , t . name ) ;", "predictions": ["assert . equal ( STR bool name <%> <@> = </@> </@> ) = count <%> ] ]"]}, {"before_ctx": "<%> <+> if ( message = = null ) { return ; } </%> ", "before_line": " if ( message ! = null ) { mq . send ( message ) ; } ", "after_ctx": " ", "after_line": "mq . send ( message ) ;", "predictions": ["mq . send ( message ) , 0 ) -> ;"]}, {"before_ctx": "<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> ", "before_line": " write _ to _ targets ( log _ level . trace , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . trace , format _ provider , value ) ;", "predictions": ["write _ to _ targets ;"]}, {"before_ctx": "<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> ", "before_line": " write _ to _ targets ( log _ level . debug , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . debug , format _ provider , value ) ;", "predictions": ["write _ to _ targets ( format ( format _ } log _ empty _ ] <%> <%> _ : <%> <*> <*> <%> ! return return return = <@> method ! ! return return logger this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this"]}, {"before_ctx": "<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> ", "before_line": " write _ to _ targets ( log _ level . info , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . info , format _ provider , value ) ;", "predictions": ["write _ to _ targets ( null , log ( log ( . info target ) _ this _ </@> _ this _ this _ } _ this ) ) <-> -> <-> -> ;"]}, {"before_ctx": "<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> ", "before_line": " write _ to _ targets ( log _ level . warn , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . warn , format _ provider , value ) ;", "predictions": ["write _ to _ targets ( level _ level . value , format -> <@> _ </@> target target target <%> -> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> & this ! ! not _ < { this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this"]}, {"before_ctx": "<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> ", "before_line": " write _ to _ targets ( log _ level . error , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . error , format _ provider , value ) ;", "predictions": ["write _ to _ targets ( info _ provider , null , new [ ! string string target if empty if = { <@> target if <*> _ is append ) to . <*> target . <*> { -> ;"]}, {"before_ctx": "<%> <*> STR -> null </%> <%> <-> new object [ ] { </%> <%> <-> } </%> ", "before_line": " write _ to _ targets ( log _ level . fatal , format _ provider , STR , new [ ] { value } ) ; ", "after_ctx": " ", "after_line": "write _ to _ targets ( log _ level . fatal , format _ provider , value ) ;", "predictions": ["write _ to _ targets ( null _ level . format , format _ provider log exception log array array array array array buffer array array array array array array array array array array array array if <*> & <*> target ) <->"]}, {"before_ctx": "<%> <*> should -> is </%> <%> <*> skip -> non </%> <%> <*> type -> user </%> <%> <*> type declaring -> [ not </%> <%> <*> type -> null ] method _ base method </%> <%> <+> [ not _ null ] </%> <%> <*> if ( -> var </%> <%> <*> = null ) return false -> method . declaring _ type </%> <%> <+> var assembly = declaring _ type ! = null ? declaring _ type . assembly : method . module . assembly ; </%> <%> <-> declaring _ type . </%> ", "before_line": " return logger _ type ! = null & & logger _ type . is _ assignable _ from ( declaring _ type ) ; ", "after_ctx": " ", "after_line": "return declaring _ type ! = null & & logger _ type . is _ assignable _ from ( declaring _ type ) ;", "predictions": ["return logger _ type . < _ 1 _ </@> )"]}, {"before_ctx": "<%> <*> this . watchers . add ( watcher ) ; -> if ( this . watcher _ map . contains _ key ( file _ name ) ) </%> <%> <+> return ; var watcher = new file _ system _ watcher { path = directory , filter = path . get _ file _ name ( file _ name ) , notify _ filter = notify _ filters } ; watcher . created + = this . on _ watcher _ changed ; watcher . changed + = this . on _ watcher _ changed ; watcher . deleted + = this . on _ watcher _ changed ; watcher . enable _ raising _ events = true ; internal _ logger . info ( STR , watcher . path , watcher . filter ) ; this . watcher _ map . add ( file _ name , watcher ) ; </%> <%> <*> lock -> if </%> <%> <*> ) -> . on _ change ! = null ) </%> ", "before_line": " if ( this . on _ change ! = null ) { this . on _ change ( source , e ) ; } ", "after_ctx": " ", "after_line": "this . on _ change ( source , e ) ;", "predictions": ["this . on _ change ( source , e ) ;"]}, {"before_ctx": "<%> <+> public bool async _ flush { get { return async _ flush ? ? true ; } set { async _ flush = value ; } } private bool? async _ flush ; </%> ", "before_line": " this . name = name ; ", "after_ctx": " <%> <*> this . wrapped _ target = wrapped _ target ; -> wrapped _ target = wrapped _ target ; </%> <%> <+> } protected override void initialize _ target ( ) { base . initialize _ target ( ) ; if ( ! async _ flush . has _ value & & wrapped _ target is buffering _ target _ wrapper ) </%>", "after_line": "name = name ;", "predictions": ["name = name ;"]}, {"before_ctx": "<%> <-> this . </%> <%> <*> this . wrapped _ target = wrapped _ target ; -> wrapped _ target = wrapped _ target ; </%> <%> <+> } protected override void initialize _ target ( ) { base . initialize _ target ( ) ; if ( ! async _ flush . has _ value & & wrapped _ target is buffering _ target _ wrapper ) { async _ flush = false ; } </%> ", "before_line": " if ( this . condition = = null | | this . condition . evaluate ( log _ event . log _ event ) . equals ( true ) ) ", "after_ctx": " <%> <*> async _ continuation current _ continuation = log _ event . continuation ; async _ continuation wrapped _ continuation = ( ex ) = > -> if ( async _ flush ) </%> <%> <+> async _ continuation current _ continuation = log _ event . continuation ; async _ continuation wrapped _ continuation = ( ex ) = > { </%> <%> <-> this . </%>", "after_line": "if ( condition = = null | | condition . evaluate ( log _ event . log _ event ) . equals ( true ) )", "predictions": ["if ( condition = = null | | condition . evaluate ( log _ changed . name _ changed = internal = internal = internal = internal = internal = internal = ) = add ;"]}, {"before_ctx": "<%> <+> dir = path . get _ full _ path ( dir ) ; </%> ", "before_line": " dir = path . get _ directory _ name ( root _ dir ) ; ", "after_ctx": " ", "after_line": "dir = path . get _ directory _ name ( dir ) ;", "predictions": ["dir = root _ dir <-> <-> ( </@> _ , <-> <-> <-> <-> <-> ) [ </@> _ , [ <*> </%> </@> _ , <-> <-> [ new new new </@> _ , </%> ) ) {"]}, {"before_ctx": " ", "before_line": " using system _ windows ; ", "after_ctx": " <%> <-> message _ box . show ( message , caption , message _ box _ button . ok ) ; </%>", "after_line": "<DEL>", "predictions": ["using system ;"]}, {"before_ctx": "<%> <-> using system _ windows ; </%> ", "before_line": " message _ box . show ( message , caption , message _ box _ button . ok ) ; ", "after_ctx": " ", "after_line": "<DEL>", "predictions": ["message _ box . show ( ( ( bool ( bool string ( bool _ STR _ -> </%> ] <%> , . ; ) <-> ] ] ,"]}, {"before_ctx": " ", "before_line": " public static bool equals ( string first _ value , string second _ value ) ", "after_ctx": " <%> <-> bool ic = false ; </%>", "after_line": "<DEL>", "predictions": ["public static bool equals ( , , = name . path second string <%> <%> STR )"]}, {"before_ctx": "<%> <-> public static bool equals ( string first _ value , string second _ value ) </%> ", "before_line": " bool ic = false ; ", "after_ctx": " <%> <-> public static bool contains ( string haystack , string needle ) </%>", "after_line": "<DEL>", "predictions": ["bool ic = false ;"]}, {"before_ctx": "<%> <-> bool ic = false ; </%> ", "before_line": " public static bool contains ( string haystack , string needle ) ", "after_ctx": " <%> <-> bool ic = true ; </%>", "after_line": "<DEL>", "predictions": ["public static bool contains ( ) haystack <+> ) ) ) ) STR ;"]}, {"before_ctx": "<%> <-> public static bool contains ( string haystack , string needle ) </%> ", "before_line": " bool ic = true ; ", "after_ctx": " <%> <-> public static bool starts _ with ( string haystack , string needle ) </%>", "after_line": "<DEL>", "predictions": ["bool ic = true ;"]}, {"before_ctx": "<%> <-> bool ic = true ; </%> ", "before_line": " public static bool starts _ with ( string haystack , string needle ) ", "after_ctx": " <%> <-> bool ic = true ; </%>", "after_line": "<DEL>", "predictions": ["public static bool starts _ with <%> </%> for </%> - - >"]}, {"before_ctx": "<%> <-> public static bool starts _ with ( string haystack , string needle ) </%> ", "before_line": " bool ic = true ; ", "after_ctx": " <%> <-> public static bool ends _ with ( string haystack , string needle ) </%>", "after_line": "<DEL>", "predictions": ["bool ic = true ;"]}, {"before_ctx": "<%> <-> bool ic = true ; </%> ", "before_line": " public static bool ends _ with ( string haystack , string needle ) ", "after_ctx": " <%> <-> bool ic = true ; </%>", "after_line": "<DEL>", "predictions": ["public static bool ends _ with ! </%> equals value value"]}, {"before_ctx": "<%> <-> public static bool ends _ with ( string haystack , string needle ) </%> ", "before_line": " bool ic = true ; ", "after_ctx": " ", "after_line": "<DEL>", "predictions": ["bool ic = true ;"]}, {"before_ctx": "<%> <+> this . message = message ; this . parameters = parameters ; this . format _ provider = format _ provider ; this . exception = exception ; </%> <%> <+> if ( need _ to _ preformat _ message ( parameters ) ) { this . calc _ formatted _ message ( ) ; </%> <%> <+> } public int sequence _ id { get ; private set ; } </%> ", "before_line": " get { return this . stack _ trace ! = null ; } ", "after_ctx": " <%> <-> virtual </%> <%> <*> { -> { get ; set ; } </%> <%> <-> get { return null ; } </%>", "after_line": "get { return stack _ trace ! = null ; }", "predictions": ["get { return stack _ user not = _ [ [ [ [ [ & & <+> _ is ) _ & log target _ target ( ) ;"]}, {"before_ctx": "<%> <+> return this . logger _ name . substring ( last _ dot + 1 ) ; } return this . logger _ name ; } } public string message { get ; set ; } public object [ ] parameters { get ; set ; } public i _ format _ provider format _ provider { get ; set ; } </%> <%> <*> public abstract string formatted _ message { get ; } -> public string formatted _ message </%> <%> <+> { get { if ( this . formatted _ message = = null ) { this . calc _ formatted _ message ( ) ; } return this . formatted _ message ; } } </%> ", "before_line": " public i _ dictionary < string , object > context ", "after_ctx": " <%> <+> hybrid _ </%> <%> <-> < string , object > </%>", "after_line": "public i _ dictionary context", "predictions": ["public object context"]}, {"before_ctx": " ", "before_line": " try { async _ log _ event _ info [ ] log _ events _ array = optimize _ buffer _ reuse ? null : log _ events as async _ log _ event _ info [ ] ; if ( ! optimize _ buffer _ reuse & & log _ events _ array ! = null ) { ", "after_ctx": " <%> <-> } } catch ( exception exception ) { if ( exception . must _ be _ rethrown ( ) ) </%>", "after_line": "async _ log _ event _ info [ ] log _ events _ array = optimize _ buffer _ reuse ? null : log _ events as async _ log _ event _ info [ ] ; if ( ! optimize _ buffer _ reuse & & log _ events _ array ! = null ) {", "predictions": ["async _ log _ event . info ( ) target _ events ;"]}, {"before_ctx": "<%> <*> if ( ex . target _ site ! = null ) { sb . append ( ex . target _ site . to _ string ( ) ) ; } -> sb . append ( ex . target _ site ? . to _ string ( ) ) ; </%> ", "before_line": " if ( ! string . is _ null _ or _ empty ( ex . stack _ trace ) ) sb . append ( ex . stack _ trace ) ; ", "after_ctx": " ", "after_line": "sb . append ( ex . stack _ trace ) ;", "predictions": ["if ( ! string . base ;"]}, {"before_ctx": " ", "before_line": " int expected _ growing _ number = 0 ;  expected _ growing _ number = logged _ event _ count - queue _ limit ;  expected _ growing _ number = NUM ; ", "after_ctx": " <%> <-> _ for _ event _ tests </%>", "after_line": "int expected _ growing _ number = NUM ;", "predictions": ["int expected _ growing _ . <%> new </%> _ <-> , </%> _ <-> _ STR ] -> ( <*> ( <*> ( STR < name <*> ( name -> ( name -> ( name log . stack . </%> = & this _ </%> <%> ;"]}, {"before_ctx": "<%> <*> string -> performance _ </%> <%> <+> counter _ type </%> ", "before_line": " get { return counter _ type . to _ string ( ) ; } set { counter _ type = ( performance _ counter _ type ) enum . parse ( typeof ( performance _ counter _ type ) , value , false ) ; } ", "after_ctx": " ", "after_line": "get { return counter _ type ; } set { counter _ type = value ; }", "predictions": ["get { return counter _ type ; } set { counter _ </%> . to _ ( + ( <%> _ ( ) -> count </%> message ) if or filter _ -> </%> message </%> message ) if or filter if ( + filter _ ( performance _ ( ) <%> </%> <-> <-> ) _ ( performance _ ( ) _ ( ) _ ) ) _ ) ) ) _ ) ) _ ) ) ) _ ) < performance _ ( ) _ ( ) _ ( ) _ ( ) _ ( ) _ ("]}, {"before_ctx": "<%> <-> public bool is _ token ( object [ ] tokens ) { for ( int i = 0 ; i < tokens . length ; + + i ) { if ( tokens [ i ] is string ) { if ( this . is _ keyword ( ( string ) tokens [ i ] ) ) { return true ; } } else { if ( this . token _ type = = ( condition _ token _ type ) tokens [ i ] ) { return true ; } } } return false ; } public bool is _ punctuation ( ) { return this . token _ type > = condition _ token _ type . first _ punct & & this . token _ type < condition _ token _ type . last _ punct ; } </%> ", "before_line": " if ( this . ignore _ white _ space ) { this . skip _ whitespace ( ) ; } ", "after_ctx": " <%> <-> if ( ! this . ignore _ white _ space & & char . is _ white _ space ( ch ) ) { </%>", "after_line": "this . skip _ whitespace ( ) ;", "predictions": ["this . skip _ whitespace ( ) ;"]}, {"before_ctx": "<%> <-> using system _ configuration ; </%> ", "before_line": " using n _ log _ internal ; using n _ log _ time ; ", "after_ctx": " <%> <+> readonly </%>", "after_line": "using internal ; using time ;", "predictions": ["using n _ log ;"]}, {"before_ctx": " ", "before_line": " builder . append ( level . to _ string ( ) ) ; ", "after_ctx": " <%> <-> . to _ string ( ) </%> <%> <*> string -> var </%>", "after_line": "builder . append ( level ) ;", "predictions": ["builder . append ( level ) ) ) ) <%> ) ) <-> <%>"]}, {"before_ctx": "<%> <-> . to _ string ( ) </%> ", "before_line": " builder . append ( ex . to _ string ( ) ) ; } string msg = builder . to _ string ( ) ; ", "after_ctx": " ", "after_line": "builder . append ( ex ) ; } var msg = builder . to _ string ( ) ;", "predictions": ["builder . append ( ex <%> <%> <%> <%> ; </@> </%> default </@> system . <-> <%> encoding encoding encoding <%> encoding </%> </%> </%>"]}, {"before_ctx": "<%> <-> if ( ! string . is _ null _ or _ empty ( filter _ count _ message _ append _ format ) ) { </%> <%> <*> if ( -> if ( ! string . is _ null _ or _ empty ( filter _ count _ message _ append _ format ) & & </%> <%> <-> } </%> ", "before_line": " else { filter _ info . refresh ( log _ event . level , log _ event . time _ stamp , filter _ info . filter _ count + 1 ) ; return action ; } ", "after_ctx": " <%> <+> private </%>", "after_line": "filter _ info . refresh ( log _ event . level , log _ event . time _ stamp , filter _ info . filter _ count + 1 ) ; return action ;", "predictions": ["filter _ info . refresh ( log _ event . level , <*> _ , ) _ false if public bool . . . this bool log is _ [ ) is 0 { public 0 is 0 is is ( log _ [ ) )"]}, {"before_ctx": " ", "before_line": " else { return ( log _ event _ time - last _ filter _ time ) . total _ seconds > timeout _ seconds & & has _ expired ( log _ event _ time , timeout _ seconds * 2 ) ; } ", "after_ctx": " <%> <*> public -> private </%> <%> <-> private </%> <%> <*> public -> private </%> <%> <-> private </%>", "after_line": "return ( log _ event _ time - last _ filter _ time ) . total _ seconds > timeout _ seconds & & has _ expired ( log _ event _ time , timeout _ seconds * 2 ) ;", "predictions": ["return ( log _ event _ time - last _ filter _ <%> if <+> _ seconds > timeout _ seconds <%> <%> be _ ] </%> <+> _ new _ time -> timeout _ seconds , <*> ) <-> find _ new _ time <->"]}, {"before_ctx": "<%> <-> else { </%> <%> <-> } </%> ", "before_line": " public date _ time last _ log _ time { get ; private set ; } public date _ time last _ filter _ time { get ; private set ; } ", "after_ctx": " <%> <+> private </%> <%> <*> public -> private </%>", "after_line": "private date _ time last _ log _ time { get ; set ; } private date _ time last _ filter _ time { get ; set ; }", "predictions": ["public date _ time last _ log _ time system . </@> { get encoding ) )"]}, {"before_ctx": "<%> <-> using system ; using system _ collections ; using system _ collections _ generic ; using system _ reflection ; using n _ log _ config ; </%> <%> <+> using system _ collections ; using system _ collections _ generic ; using system _ reflection ; using n _ log _ common ; using n _ log _ config ; </%> ", "before_line": " internal class object _ graph _ scanner < t > where t : class ", "after_ctx": " <%> <*> private readonly dictionary < object , bool > visited _ objects = new dictionary < object , bool > ( ) ; private readonly queue < in _ log _ configuration _ item > queue = new queue < in _ log _ configuration _ item > ( ) ; public t [ ] scan ( ) -> public static t [ ] find _ reachable _ objects < t > ( params in _ log _ configuration _ item [ ] root _ objects ) </%> <%> <+> where t : class </%> <%> <+> internal _ logger . trace ( STR , typeof ( t ) ) ; </%> <%> <-> while ( this . queue . count > 0 ) </%>", "after_line": "internal class object _ graph _ scanner", "predictions": ["internal class object _ graph _ scanner where t : class"]}, {"before_ctx": "<%> <*> wrapper _ layout _ renderer _ base -> var </%> <%> <-> lr . </%> <%> <+> lr </%> ", "before_line": " new _ renderer . inner = new simple _ layout ( new layout _ renderer [ ] { lr } , string . empty ) ; ", "after_ctx": " <%> <+> private static bool can _ be _ converted _ to _ literal ( layout _ renderer lr ) { foreach ( i _ renderable renderable in object _ graph _ scanner . find _ reachable _ objects < i _ renderable > ( lr ) ) { if ( renderable . get _ type ( ) = = typeof ( simple _ layout ) ) { </%>", "after_line": "new _ renderer . inner = new simple _ layout ( new [ ] { lr } , string . empty ) ;", "predictions": ["new _ renderer . inner = new simple _ layout ( lr [ </%> type > > > > > > > > > > >"]}, {"before_ctx": " ", "before_line": " else { return - 1 ; } ", "after_ctx": " <%> <-> else { </%>", "after_line": "return - 1 ;", "predictions": ["return - 1 ;"]}, {"before_ctx": "<%> <-> else { </%> <%> <-> } </%> ", "before_line": " else { return - 1 ; } ", "after_ctx": " ", "after_line": "return - 1 ;", "predictions": ["return - 1 ;"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " ", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <+> using system _ component _ model ; </%> <%> <-> not _ supported _ runtime _ framework _ runtime _ framework _ dot _ net _ compact _ framework </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " ", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <+> i _ collection < </%> <%> <*> _ collection -> > </%> ", "before_line": " system _ component _ model _ default _ value _ auto ", "after_ctx": " ", "after_line": "default _ value _ auto", "predictions": ["default _ value _ auto"]}, {"before_ctx": " ", "before_line": " public i _ layout layout ", "after_ctx": " <%> <-> i _ </%>", "after_line": "public layout layout", "predictions": ["public layout layout"]}, {"before_ctx": "<%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> _ layout . text </%> <%> <-> _ layout </%> <%> <-> new layout ( </%> <%> <-> ) </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> _ layout . text </%> <%> <-> _ layout </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " ", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <*> string -> encoding </%> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " public string encoding { get { return encoding . web _ name ; } set { encoding = system . text . encoding . get _ encoding ( value ) ; } ", "after_ctx": " <%> <-> system _ component _ model _ </%> <%> <-> system _ component _ model _ </%>", "after_line": "public encoding encoding { get { return encoding ; } set { encoding = value ; }", "predictions": ["public string encoding { get { return encoding . web _ name </%> { false ; event , <%> </%> -> <-> log </%> <*> event else <*> event <%> </%> -> _ - <*> > event <%> <*> <-> </%> <*> _ - <*> >"]}, {"before_ctx": "<%> <*> string -> encoding </%> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " ", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": " ", "before_line": " accepts _ layout public string archive _ file _ name { get { if ( auto _ archive _ file _ name = = null ) return null ; return auto _ archive _ file _ name . text ; } set { auto _ archive _ file _ name = new layout ( value ) ; } ", "after_ctx": " <%> <-> system _ component _ model _ </%> <%> <-> system _ component _ model _ </%>", "after_line": "public layout archive _ file _ name { get { return auto _ archive _ file _ name ; } set { auto _ archive _ file _ name = value ; }", "predictions": ["set { auto _ archive <%> <-> <%> _ _ ) ) return ) } return ) } <-> _ <%> _ </%> _ </%> ; <+> ( new ( new ( new ( new ( new ( new ( new ( new ) = if { if ( -> { if ( -> { if ( -> { if ( -> { if = if = if ( -> { if ( -> { if ( -> { if = -> name name { } _ return _ </%> _ name name { } _ return _ </%> _"]}, {"before_ctx": "<%> <*> accepts _ layout public string archive _ file _ name { get -> public layout archive _ file _ name </%> <%> <*> if ( -> get { return </%> <%> <*> = = null ) return null -> ; } set { auto _ archive _ file _ name = value </%> <%> <*> return auto _ archive _ file _ name . text ; -> } </%> <%> <-> } set { auto _ archive _ file _ name = new layout ( value ) ; } </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <*> if ( -> get { return </%> <%> <*> = = null ) return null -> ; } set { auto _ archive _ file _ name = value </%> <%> <*> return auto _ archive _ file _ name . text ; -> } </%> <%> <-> } set { auto _ archive _ file _ name = new layout ( value ) ; } </%> <%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " ", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": " ", "before_line": " public string encoding ", "after_ctx": " <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%>", "after_line": "public encoding encoding", "predictions": ["public string encoding"]}, {"before_ctx": "<%> <*> string -> encoding </%> ", "before_line": " get { return encoding . web _ name ; } set { encoding = system . text . encoding . get _ encoding ( value ) ; } ", "after_ctx": " ", "after_line": "get { return encoding ; } set { encoding = value ; }", "predictions": ["get { return encoding . web </%> -> <%> -> generic generic <%> <%> file . file . file . file . file </%> <-> ) <-> label <-> <-> <-> <-> <-> <-> <-> <-> <-> <%> </%> get _ text <->"]}, {"before_ctx": "<%> <+> using system _ component _ model ; using n _ log _ layout _ renderers ; </%> <%> <-> supported _ runtime _ o _ runtime _ o _ windows supported _ runtime _ o _ runtime _ o _ windows _ n </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " ", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <+> using system _ component _ model ; </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " ", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " ", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ empty ", "after_ctx": " <%> <*> system _ component _ model _ default _ value _ empty supported _ runtime _ framework _ runtime _ framework _ dot _ net _ framework _ min _ runtime _ version -> default _ value _ empty </%>", "after_line": "default _ value _ empty", "predictions": ["default _ value _ empty"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> compiled _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> not _ supported _ runtime _ framework _ runtime _ framework _ dot _ net _ compact _ framework </%> ", "before_line": " system _ component _ model _ default _ value _ flat ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ flat", "predictions": ["default _ value _ flat"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " ", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " ", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <+> using system _ collections _ generic ; using n _ log _ layouts ; using n _ log _ targets ; </%> <%> <-> supported _ runtime _ framework _ runtime _ framework _ dot _ net _ framework supported _ runtime _ framework _ runtime _ framework _ dot _ net _ compact _ framework _ min _ runtime _ version </%> ", "before_line": " private layout label = new layout ( STR ) ; ", "after_ctx": " <%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> . text </%>", "after_line": "private layout label = STR ;", "predictions": ["private layout label = new -> return public value name name name name"]}, {"before_ctx": "<%> <-> new layout ( </%> <%> <-> ) </%> ", "before_line": " accepts _ layout public string queue { get { return queue . text ; } set { queue = new layout ( value ) ; } ", "after_ctx": " <%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%>", "after_line": "public layout queue { get { return queue ; } set { queue = value ; }", "predictions": ["accepts _ layout public string ( ( ( ( ( ( ( ( ) label label label label label label label label ) <*> ) <*> </@> ( value ( value ( _ ( system ( value ( value ( 1 ( ( ( queue ; return file file ) ) )"]}, {"before_ctx": "<%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> accepts _ layout </%> ", "before_line": " public string label { get { return label . text ; } set { label = new layout ( value ) ; } ", "after_ctx": " <%> <-> system _ component _ model _ </%> <%> <*> string -> encoding </%> <%> <-> . web _ name </%>", "after_line": "public layout label { get { return label ; } set { label = value ; }", "predictions": ["public set { label = new } ( return new } ( return new runtime ( net net using ) net ;"]}, {"before_ctx": "<%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <*> string -> encoding </%> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%> ", "before_line": " public string encoding { get { return encoding . web _ name ; } set { encoding = system . text . encoding . get _ encoding ( value ) ; } ", "after_ctx": " <%> <-> system _ component _ model _ </%> <%> <-> system _ component _ model _ </%>", "after_line": "public encoding encoding { get { return encoding ; } set { encoding = value ; }", "predictions": ["public string encoding { get ( get ( return . return <%> <%> ; </@> value text = . string . encoding . -> } ( ( -> } ( -> } -> } return default } ( -> } -> = return -> runtime runtime _ </@> net value n n n { n _ </@> ) n { net { ) )"]}, {"before_ctx": "<%> <*> string -> encoding </%> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <*> layout -> i </%> <%> <+> < layout > </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <+> i _ collection < </%> <%> <*> _ collection -> > </%> <%> <+> list < </%> <%> <*> _ collection -> > </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " ", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <+> using system _ collections _ generic ; using n _ log _ layouts ; </%> <%> <+> simple _ </%> <%> <*> string -> simple _ layout </%> ", "before_line": " layout = new layout ( layout ) ; ", "after_ctx": " <%> <*> layout -> i </%> <%> <+> < layout > </%>", "after_line": "layout = layout ;", "predictions": ["layout = layout ;"]}, {"before_ctx": "<%> <*> compiledlayout -> layout </%> ", "before_line": " accepts _ layout public string layout ", "after_ctx": " <%> <*> get { return compiledlayout . text ; } set { compiledlayout = new layout ( value ) ; } } public layout compiled _ layout { get { return compiledlayout ; } set { compiledlayout = value ; } -> get { return layout ; } </%> <%> <+> set { layout = value ; } </%>", "after_line": "public layout layout", "predictions": ["public string layout"]}, {"before_ctx": "<%> <+> using system _ component _ model ; using n _ log _ config ; </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " ", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> i _ </%> <%> <-> , i _ layout _ with _ header _ and _ footer </%> <%> <-> i _ </%> <%> <-> i _ </%> <%> <-> i _ </%> ", "before_line": " public i _ layout layout ", "after_ctx": " <%> <-> i _ </%> <%> <-> i _ </%>", "after_line": "public layout layout", "predictions": ["public layout layout"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <+> i _ collection < </%> <%> <*> _ collection -> > </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> not _ supported _ runtime _ framework _ runtime _ framework _ dot _ net _ compact _ framework </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " ", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> accepts _ layout </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " accepts _ layout public string event _ id { get { return convert . to _ string ( event _ id ) ; } set { event _ id = new layout ( value ) ; } ", "after_ctx": " <%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> convert . to _ string ( </%> <%> <-> ) </%> <%> <-> new layout ( </%> <%> <-> ) </%>", "after_line": "public layout event _ id { get { return event _ id ; } set { event _ id = value ; }", "predictions": ["accepts _ layout public string event _ id { get { return value ; } set { event _ id = value ; }"]}, {"before_ctx": "<%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> convert . to _ string ( </%> <%> <-> ) </%> <%> <-> new layout ( </%> <%> <-> ) </%> ", "before_line": " accepts _ layout public string category { get { return convert . to _ string ( category ) ; } set { category = new layout ( value ) ; } ", "after_ctx": " ", "after_line": "public layout category { get { return category ; } set { category = value ; }", "predictions": ["accepts = value ;"]}, {"before_ctx": "<%> <-> accepts _ layout </%> ", "before_line": " public string layout ", "after_ctx": " <%> <*> get { return compiledlayout . text ; } set { compiledlayout = new layout ( value ) ; } } public layout compiled _ layout { get { return compiledlayout ; } set { compiledlayout = value ; } -> get { return layout ; } </%> <%> <+> set { layout = value ; } </%>", "after_line": "public layout layout", "predictions": ["public layout layout"]}, {"before_ctx": "<%> <+> using n _ log _ layouts ; </%> ", "before_line": " layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , base _ dir ) ; ", "after_ctx": " <%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ; -> assert _ layout _ renderer _ output ( STR , path . combine ( base _ dir , STR ) ) ; </%>", "after_line": "assert _ layout _ renderer _ output ( STR , base _ dir ) ;", "predictions": ["layout l = new layout ( STR ) ;"]}, {"before_ctx": "<%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , base _ dir ) ; -> assert _ layout _ renderer _ output ( STR , base _ dir ) ; </%> ", "before_line": " layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ; ", "after_ctx": " <%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ; -> assert _ layout _ renderer _ output ( STR , path . combine ( base _ dir , STR ) ) ; </%>", "after_line": "assert _ layout _ renderer _ output ( STR , path . combine ( base _ dir , STR ) ) ;", "predictions": ["layout l = new layout ( STR ) ;"]}, {"before_ctx": "<%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , base _ dir ) ; -> assert _ layout _ renderer _ output ( STR , base _ dir ) ; </%> <%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ; -> assert _ layout _ renderer _ output ( STR , path . combine ( base _ dir , STR ) ) ; </%> ", "before_line": " layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ; ", "after_ctx": " ", "after_line": "assert _ layout _ renderer _ output ( STR , path . combine ( base _ dir , STR ) ) ;", "predictions": ["layout l = new layout ( STR ) ;"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " ", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ discard ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ discard", "predictions": ["default _ value _ discard"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " ", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <+> using system _ component _ model ; </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " ", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " ", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <+> using n _ log _ layouts ; </%> ", "before_line": " layout l = new layout ( STR ) ; ", "after_ctx": " <%> <+> unformatted _ </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <+> unformatted _ </%>", "after_line": "layout l = STR ;", "predictions": ["layout l = new layout ) ;"]}, {"before_ctx": "<%> <*> accepts _ layout public string caption -> public layout caption </%> ", "before_line": " get { return caption . text ; } set { caption = new layout ( value ) ; } ", "after_ctx": " <%> <*> layout -> i </%> <%> <+> < layout > </%> <%> <+> if ( caption ! = null ) </%> <%> <-> compiled _ </%>", "after_line": "get { return caption ; } set { caption = value ; }", "predictions": ["get { return value ; ( } set = text = value = text <%> = text = set ) = text = text = null ; ; set ; ; . caption ) ; = = _ text ; ; ; ; ; ; ; ; output ;"]}, {"before_ctx": "<%> <+> simple _ </%> <%> <-> new layout ( </%> <%> <-> ) </%> ", "before_line": " layout l = new layout ( STR ) ; ", "after_ctx": " <%> <+> simple _ </%> <%> <-> new layout ( </%> <%> <-> ) </%>", "after_line": "layout l = STR ;", "predictions": ["layout l = STR ;"]}, {"before_ctx": " ", "before_line": " accepts _ layout public string layout { get { return compiledlayout . text ; } set { compiledlayout = new layout ( value ) ; } }    public layout compiled _ layout ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "public layout layout", "predictions": ["set { get { return { </@> ) text ; ; ; return string ; return text ; ; ; ; ; ; ; ; </@> combine )"]}, {"before_ctx": "<%> <-> accepts _ layout public string layout { get { return compiledlayout . text ; } set { compiledlayout = new layout ( value ) ; } } </%> <%> <*> public layout compiled _ layout -> public layout layout </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " ", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> accepts _ condition </%> <%> <-> string </%> <%> <+> _ expression condition </%> <%> <*> get { if ( condition = = null ) return null ; else return condition . to _ string ( ) ; } set { if ( value ! = null ) condition = condition _ parser . parse _ expression ( value ) ; else condition = null ; } -> get { return condition ; } </%> <%> <+> set { condition = value ; } </%> ", "before_line": " system _ component _ model _ default _ value _ no _ change ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ no _ change", "predictions": ["default _ value _ no _ string"]}, {"before_ctx": "<%> <*> get { if ( condition = = null ) return null ; else return condition . to _ string ( ) ; } set { if ( value ! = null ) condition = condition _ parser . parse _ expression ( value ) ; else condition = null ; } -> get { return condition ; } </%> <%> <+> set { condition = value ; } </%> <%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ no _ change ", "after_ctx": " <%> <*> string -> condition _ expression </%>", "after_line": "default _ value _ no _ change", "predictions": ["default _ value _ no _ change"]}, {"before_ctx": " ", "before_line": " private layout db _ host _ layout = new layout ( STR ) ; ", "after_ctx": " <%> <-> compiled _ </%> <%> <+> i _ collection < </%> <%> <*> _ collection -> > </%> <%> <+> list < </%> <%> <*> _ collection -> > </%>", "after_line": "private layout db _ host _ layout = STR ;", "predictions": ["private layout db _ host _ <%> <@> new model ( false new string new string new . . . . . ( <@> get _ <*> _ . . layout ( new new layout ( new layout ( new layout } else <-> <-> _ if _ </%> = = } <-> get _ if _ </%> = string </%> } } ) <->"]}, {"before_ctx": "<%> <-> compiled _ </%> <%> <+> i _ collection < </%> <%> <*> _ collection -> > </%> <%> <+> list < </%> <%> <*> _ collection -> > </%> ", "before_line": " system _ component _ model _ default _ value _ sqlserver ", "after_ctx": " ", "after_line": "default _ value _ sqlserver", "predictions": ["default _ value _ sqlserver"]}, {"before_ctx": " ", "before_line": " accepts _ layout public string connection _ string { get { return convert . to _ string ( connection _ string ) ; } set { connection _ string = new layout ( value ) ; } ", "after_ctx": " <%> <-> system _ component _ model _ </%> <%> <-> system _ component _ model _ </%>", "after_line": "public layout connection _ string { get { return connection _ string ; } set { connection _ string = value ; }", "predictions": ["connection _ string = new layout <-> value <*> . ;"]}, {"before_ctx": "<%> <-> accepts _ layout </%> <%> <*> string -> layout </%> <%> <-> convert . to _ string ( </%> <%> <-> ) </%> <%> <-> new layout ( </%> <%> <-> ) </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <-> convert . to _ string ( </%> <%> <-> ) </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> accepts _ layout public string db _ host </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <*> accepts _ layout public string db _ host -> public layout db _ host </%> ", "before_line": " set { db _ host _ layout = new layout ( value ) ; } ", "after_ctx": " <%> <*> accepts _ layout public string db _ user _ name -> public layout db _ user _ name </%>", "after_line": "set { db _ host _ layout = value ; }", "predictions": ["db _ host _ layout = value <*> public get set ; public set model <-> <%> ( ) } ;"]}, {"before_ctx": "<%> <-> new layout ( </%> <%> <-> ) </%> <%> <*> accepts _ layout public string db _ user _ name -> public layout db _ user _ name </%> ", "before_line": " set { db _ user _ name _ layout = new layout ( value ) ; } ", "after_ctx": " <%> <-> accepts _ layout </%>", "after_line": "set { db _ user _ name _ layout = value ; }", "predictions": ["set { db _ user _ name _ <%> <@> get model <%> text <%> value ; value </@> <%> <%> value _ ( , </@> model ) )"]}, {"before_ctx": "<%> <-> accepts _ layout </%> ", "before_line": " set { db _ password _ layout = new layout ( value ) ; } ", "after_ctx": " <%> <-> accepts _ layout </%>", "after_line": "set { db _ password _ layout = value ; }", "predictions": ["set { db _ password _ -> = </@> model <-> <-> false <*> get _ </@> <%> = </@> ) ) ;"]}, {"before_ctx": "<%> <-> accepts _ layout </%> ", "before_line": " set { db _ database _ layout = new layout ( value ) ; } ", "after_ctx": " <%> <-> accepts _ layout </%>", "after_line": "set { db _ database _ layout = value ; }", "predictions": ["set { db _ database _ layout = </@> model model model <-> <-> <-> <-> <-> get false <*> <*> <*> ) )"]}, {"before_ctx": "<%> <+> using system _ component _ model ; using n _ log _ config ; </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " ", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " ", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ no _ change ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ no _ change", "predictions": ["default _ value _ no _ <@>"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ no _ change ", "after_ctx": " ", "after_line": "default _ value _ no _ change", "predictions": ["default _ value _ no _ change"]}, {"before_ctx": " ", "before_line": " layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , system . environment . get _ environment _ variable ( STR ) ) ; ", "after_ctx": " <%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , system . environment . get _ environment _ variable ( STR ) ) ; -> assert _ layout _ renderer _ output ( STR , system . environment . get _ environment _ variable ( STR ) ) ; </%>", "after_line": "assert _ layout _ renderer _ output ( STR , system . environment . get _ environment _ variable ( STR ) ) ;", "predictions": ["layout l = new layout ( string </%> value value } } } } } ;"]}, {"before_ctx": "<%> <*> layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , system . environment . get _ environment _ variable ( STR ) ) ; -> assert _ layout _ renderer _ output ( STR , system . environment . get _ environment _ variable ( STR ) ) ; </%> ", "before_line": " layout l = new layout ( STR ) ; assert _ layout _ renderer _ output ( l , system . environment . get _ environment _ variable ( STR ) ) ; ", "after_ctx": " ", "after_line": "assert _ layout _ renderer _ output ( STR , system . environment . get _ environment _ variable ( STR ) ) ;", "predictions": ["layout l = new layout ( STR ) <*> _ <%> _ return _ <-> ( ) ) ) ) ;"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> compiled _ </%> <%> <+> , culture _ info . invariant _ culture </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": " ", "before_line": " private layout subject = new layout ( STR ) ; ", "after_ctx": " <%> <*> string -> layout </%> <%> <*> string -> layout </%> <%> <*> string -> layout </%>", "after_line": "private layout subject = STR ;", "predictions": ["private layout subject = new layout <%> </%>"]}, {"before_ctx": "<%> <*> string -> layout </%> <%> <*> string -> layout </%> ", "before_line": " public string from { get { return from . text ; } set { from = new layout ( value ) ; } ", "after_ctx": " <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%>", "after_line": "public layout from { get { return from ; } set { from = value ; }", "predictions": ["public string from { get { get new return assert , output system variable <@> , <@> ) system system system system system system ) . ;"]}, {"before_ctx": "<%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> ", "before_line": " public string to { get { return to . text ; } set { to = new layout ( value ) ; } ", "after_ctx": " <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%>", "after_line": "public layout to { get { return to ; } set { to = value ; }", "predictions": ["public string to { get { </%> output system . value . get -> model . = string = string = string <%> . = = </@> STR STR"]}, {"before_ctx": "<%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> ", "before_line": " public string cc { get { return cc . text ; } set { cc = new layout ( value ) ; } ", "after_ctx": " <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%>", "after_line": "public layout cc { get { return cc ; } set { cc = value ; }", "predictions": ["public string cc { get { return to { -> ) ) . model <@> = = = = = = = string . <%> . <+> = string = string <%> . <%> . <+> ) . } </%>"]}, {"before_ctx": "<%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> <%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> ", "before_line": " public string bcc { get { return bcc . text ; } set { bcc = new layout ( value ) ; } ", "after_ctx": " <%> <-> system _ component _ model _ </%> <%> <*> string -> layout </%> <%> <-> . text </%>", "after_line": "public layout bcc { get { return bcc ; } set { bcc = value ; }", "predictions": ["public string bcc { get { return ( to system return . environment ) . environment ) . environment ) ) variable ;"]}, {"before_ctx": "<%> <*> string -> layout </%> <%> <-> . text </%> <%> <-> new layout ( </%> <%> <-> ) </%> ", "before_line": " system _ component _ model _ default _ value _ message _ from _ n _ log _ on _ machinename public string subject { get { return subject . text ; } set { subject = new layout ( value ) ; } ", "after_ctx": " <%> <-> system _ component _ model _ </%> <%> <*> string -> layout </%> <%> <-> system _ component _ model _ </%> <%> <*> string -> encoding </%>", "after_line": "default _ value _ message _ from _ n _ log _ on _ machinename public layout subject { get { return subject ; } set { subject = value ; }", "predictions": ["layout = value ; }"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> <%> <*> string -> encoding </%> <%> <-> . web _ name </%> <%> <-> system . text . encoding . get _ encoding ( </%> <%> <-> ) </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <*> string -> layout </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false _ </@> <%> <%>"]}, {"before_ctx": "<%> <*> string -> layout </%> ", "before_line": " system _ component _ model _ default _ value _ none ", "after_ctx": " <%> <*> set { assert _ fields _ support ( STR ) ; smtp _ authentication = value ; } -> set { smtp _ authentication = value ; } </%>", "after_line": "default _ value _ none", "predictions": ["default _ value _ none"]}, {"before_ctx": "<%> <-> assert _ fields _ support ( STR ) ; </%> <%> <*> smtp _ username = value ; } -> set { smtp _ username = value ; } </%> <%> <*> string -> layout </%> <%> <-> set { assert _ fields _ support ( STR ) ; </%> <%> <*> smtp _ password = value ; } -> set { smtp _ password = value ; } </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <*> set { if ( value ! = NUM ) assert _ fields _ support ( STR ) ; smtp _ port = value ; } -> set { smtp _ port = value ; } </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <+> using system _ component _ model ; using n _ log _ config ; </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <-> compiled _ </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": " ", "before_line": " public string layout ", "after_ctx": " <%> <*> get { return compiledlayout . text ; } set { compiledlayout = new layout ( value ) ; } } public layout compiled _ layout { get { return compiledlayout ; } set { compiledlayout = value ; } -> get { return layout ; } </%> <%> <+> set { layout = value ; } </%>", "after_line": "public layout layout", "predictions": ["public layout layout"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> <%> <*> private -> public </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ <+>"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " ", "after_line": "default _ value _ true", "predictions": ["default _ value _ >"]}, {"before_ctx": "<%> <+> using system _ component _ model ; using n _ log _ config ; </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " ", "after_line": "default _ value _ false", "predictions": ["default _ value _ = <@>"]}, {"before_ctx": "<%> <*> string -> layout </%> <%> <-> . text </%> ", "before_line": " address _ layout = new layout ( value ) ; ", "after_ctx": " <%> <-> public layout address _ layout { get { return address _ layout ; } </%>", "after_line": "address _ layout = value ;", "predictions": ["address _ layout = runtime format _ if _ _ <-> <-> address address ! if _ _ ;"]}, {"before_ctx": "<%> <-> new layout ( </%> <%> <-> ) </%> <%> <-> public layout address _ layout { get { return address _ layout ; } set { address _ layout = value ; } } </%> ", "before_line": " system _ component _ model _ default _ value _ true ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value _ true", "predictions": ["default _ value _ <+>"]}, {"before_ctx": "<%> <-> public layout address _ layout { get { return address _ layout ; } set { address _ layout = value ; } } system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " ", "after_line": "default _ value _ false", "predictions": ["default _ value _ = <@>"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " <%> <+> i _ collection < </%> <%> <*> _ collection -> > </%>", "after_line": "default _ value _ false", "predictions": ["default _ value _ false"]}, {"before_ctx": "<%> <*> accepts _ condition public string exists -> public condition _ expression exists </%> ", "before_line": " get { return exists . to _ string ( ) ; } set { exists = condition _ parser . parse _ expression ( value ) ; } ", "after_ctx": " <%> <*> accepts _ condition public string filter { get { return filter . to _ string ( ) ; } set { filter = condition _ parser . parse _ expression ( value ) ; } } public condition _ expression filter _ condition -> public condition _ expression filter </%>", "after_line": "get { return exists ; } set { exists = value ; }", "predictions": ["get { return exists ( public public public value value value value get <%> expression ) get 0 n ; </%>"]}, {"before_ctx": "<%> <*> accepts _ condition public string exists -> public condition _ expression exists </%> <%> <-> . to _ string ( ) </%> <%> <-> condition _ parser . parse _ expression ( </%> <%> <-> ) </%> ", "before_line": " accepts _ condition public string filter { get { return filter . to _ string ( ) ; } set { filter = condition _ parser . parse _ expression ( value ) ; } }    public condition _ expression filter _ condition ", "after_ctx": " <%> <-> public condition _ expression exists _ condition { get { return exists ; } set { exists = value ; } } </%>", "after_line": "public condition _ expression filter", "predictions": ["accepts _ expression filter _ ;"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " ", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value ", "after_ctx": " <%> <-> system _ component _ model _ </%>", "after_line": "default _ value", "predictions": ["default _ value"]}, {"before_ctx": "<%> <-> system _ component _ model _ </%> ", "before_line": " system _ component _ model _ default _ value _ false ", "after_ctx": " ", "after_line": "default _ value _ false", "predictions": ["default _ value _ true"]}, {"before_ctx": "<%> <*> STR ) -> null | | s . length = = 0 ) </%> ", "before_line": " else return s ; ", "after_ctx": " ", "after_line": "return s ;", "predictions": ["return s ;"]}, {"before_ctx": "<%> <+> using system _ component _ model ; using n _ log _ layouts ; namespace n _ log _ targets </%> <%> <-> i _ </%> <%> <*> compiledlayout -> layout </%> ", "before_line": " accepts _ layout system _ component _ model _ default _ value _ longdate _ level _ uppercase _ true _ logger _ message public virtual string layout ", "after_ctx": " <%> <*> get { return convert . to _ string ( compiledlayout ) ; } set { compiledlayout = new layout ( value ) ; } } public virtual i _ layout compiled _ layout { get { return compiledlayout ; } set { compiledlayout = value ; } -> get { return layout ; } </%> <%> <+> set { layout = value ; } </%>", "after_line": "default _ value _ longdate _ level _ uppercase _ true _ logger _ message public virtual layout layout", "predictions": ["string layout"]}, {"before_ctx": " ", "before_line": " system _ component _ model _ default _ value _ empty ", "after_ctx": " <%> <*> system _ component _ model _ default _ value _ empty supported _ runtime _ framework _ runtime _ framework _ dot _ net _ framework _ min _ runtime _ version -> default _ value _ empty </%>", "after_line": "default _ value _ empty", "predictions": ["default _ value _ </%> _ i _ = ;"]}, {"before_ctx": "<%> <+> if ( x > 0 & & ! negative | | x > 1 ) return negative ? - i : i ; </%> ", "before_line": " else { break ; } } has _ digits = true ; ", "after_ctx": " <%> <-> if ( ! has _ digits ) </%> <%> <-> return negative ? - i : i ; </%>", "after_line": "break ; }", "predictions": ["break ; }"]}, {"before_ctx": "<%> <-> else { </%> <%> <-> } has _ digits = true ; </%> ", "before_line": " if ( ! has _ digits ) throw new template _ parser _ exception ( STR , position , template ) ; return negative ? - i : i ; ", "after_ctx": " ", "after_line": "throw new template _ parser _ exception ( STR , position , template ) ;", "predictions": ["return new template _ parser _ public <%> [ [ key name , ) , } ; ) ; . <%> ; ; ; ; ; ; ; ; ; ; ;"]}, {"before_ctx": "<%> <-> private object lock _ object = new object ( ) ; </%> ", "before_line": " lock ( this . lock _ object ) { this . logs . add ( msg ) ; } ", "after_ctx": " ", "after_line": "this . logs . add ( msg ) ;", "predictions": ["this . logs . true <%> get <%> <%> <%> <%> <%> value value <->"]}, {"before_ctx": " ", "before_line": " lock ( this ) { if ( this . sender ! = null ) { this . sender . close ( ) ; } ", "after_ctx": " <%> <*> lock -> if </%> <%> <+> . keep _ connection </%>", "after_line": "if ( this . sender ! = null ) { this . sender . close ( ) ;", "predictions": ["this . sender . return <%> ) </%> } _ version default . } value _ | i <%> > this _ set } ;"]}, {"before_ctx": "<%> <+> fast _ </%> <%> <-> log _ event , </%> <%> <+> fast _ </%> <%> <-> log _ event , </%> <%> <+> ( get _ or _ allocate _ ordinal </%> <%> <+> ) </%> ", "before_line": " foreach ( log _ event ev in filtered _ events . keys ) ", "after_ctx": " <%> <-> ev , </%>", "after_line": "foreach ( log _ event ev in filtered _ events )", "predictions": ["foreach ( log _ { model ] <*> _ -> timeout timeout )"]}, {"before_ctx": "<%> <-> string key = file _ name ; string key = path . get _ full _ path ( file _ name ) ; this . visited _ file [ key ] = true ; </%> ", "before_line": " this . parse _ top _ level ( content , path . get _ directory _ name ( file _ name ) ) ; ", "after_ctx": " ", "after_line": "this . parse _ top _ level ( content , file _ name ) ;", "predictions": ["this . parse _ top { lock _ </@> _ to { value . expression expression expression expression expression expression expression expression expression . ;"]}, {"before_ctx": " ", "before_line": " throw new n _ log _ runtime _ exception ( string . format ( required _ property _ is _ empty _ format , STR ) ) ; ", "after_ctx": " <%> <-> ( string . format </%> <%> <-> ) </%>", "after_line": "throw new n _ log _ runtime _ exception ( required _ property _ is _ empty _ format , STR ) ;", "predictions": ["throw new n _ false _ runtime _ exception i ) : , , , ;"]}, {"before_ctx": "<%> <-> ( string . format </%> <%> <-> ) </%> ", "before_line": " throw new n _ log _ runtime _ exception ( string . format ( required _ property _ is _ empty _ format , STR ) ) ; ", "after_ctx": " ", "after_line": "throw new n _ log _ runtime _ exception ( required _ property _ is _ empty _ format , STR ) ;", "predictions": ["throw new n _ log _ if _ </@> ( ;"]}, {"before_ctx": "<%> <*> lock ( this ) -> var current _ timer = interlocked . exchange ( ref timeout _ timer , null ) ; </%> <%> <+> if ( current _ timer ! = null ) </%> ", "before_line": " var current _ timer = timeout _ timer ; if ( current _ timer ! = null ) { timeout _ timer = null ; current _ timer . wait _ for _ dispose ( time _ span . zero ) ; } ", "after_ctx": " ", "after_line": "current _ timer . wait _ for _ dispose ( time _ span . zero ) ;", "predictions": ["timeout _ timer = ( ( . ( ( ( ( _ timer } ( ( ( ( </@> _ timer } <%> _ timer public </@> _ public _ model ( <-> _ virtual value } { ) { = = _ ; { = null { = null { = null { = null _ ; { = ( _ ; { = ( _ ; { = ( { = null _ ; { = ( _ ; { = ( { = null _ ; { = ( _ ; { = ( { = null"]}, {"before_ctx": " ", "before_line": " public class trace _ appender : n _ log . appender ", "after_ctx": " <%> <*> public -> protected internal </%>", "after_line": "public class trace _ appender : appender", "predictions": ["public class trace _ appender <-> appender"]}, {"before_ctx": " ", "before_line": " public class memory _ appender : n _ log . appender ", "after_ctx": " <%> <*> public -> protected internal </%>", "after_line": "public class memory _ appender : appender", "predictions": ["public class memory _ appender : <%> . ( ( exception _ - , n"]}, {"before_ctx": " ", "before_line": " public class console _ appender : n _ log . appender ", "after_ctx": " <%> <*> public -> protected internal </%>", "after_line": "public class console _ appender : appender", "predictions": ["public class console _ appender : appender"]}, {"before_ctx": "<%> <+> using n _ log _ appenders ; </%> ", "before_line": " public class asp _ net _ trace _ appender : n _ log . appender ", "after_ctx": " <%> <*> public -> protected </%>", "after_line": "public class asp _ net _ trace _ appender : appender", "predictions": ["public class asp _ net _ trace _ appender </@>"]}, {"before_ctx": " ", "before_line": " using n _ log _ layout _ appenders ; namespace n _ log ", "after_ctx": " <%> <*> public -> protected internal </%> <%> <*> public -> protected internal </%> <%> <*> public -> protected internal </%>", "after_line": "namespace n _ log _ layout _ appenders", "predictions": ["namespace n _ log _ layout _ appenders"]}, {"before_ctx": " ", "before_line": " public class null _ appender : n _ log . appender ", "after_ctx": " <%> <*> public -> protected internal </%>", "after_line": "public class null _ appender : appender", "predictions": ["public class null _ appender : appender"]}, {"before_ctx": " ", "before_line": " return new property _ value ( fast _ lookup [ index ] . name , fast _ lookup [ index ] . value _ lookup ( owner , null ) , fast _ lookup [ index ] . type _ code ) ; ", "after_ctx": " <%> <*> properties [ index ] . name -> owner </%> <%> <-> . get _ value ( owner , null ) , type _ code . object </%>", "after_line": "return new property _ value ( owner , fast _ lookup [ index ] ) ;", "predictions": ["return new property _ value ( fast _ lookup </%> ) </%> file info file <*> </%> system <%> ( <%> property ;"]}, {"before_ctx": "<%> <-> ( fast _ lookup [ index ] . name , fast _ lookup [ index ] . value _ lookup </%> <%> <-> , null ) </%> <%> <-> . type _ code </%> ", "before_line": " return new property _ value ( properties [ index ] . name , properties [ index ] . get _ value ( owner , null ) , type _ code . object ) ; ", "after_ctx": " ", "after_line": "return new property _ value ( owner , properties [ index ] ) ;", "predictions": ["return new property _ value ( properties [ index ( owner </%> <%> append <-> owner </%> stack . var <-> = owner _ : case ? log _ local xml ( ( <%> ) -> ;"]}, {"before_ctx": "<%> <*> var linked _ list _ node = this . open _ network _ senders . add _ last ( sender ) ; -> linked _ list _ node = this . open _ network _ senders . add _ last ( sender ) ; </%> <%> <+> } </%> <%> <+> { try _ remove ( this . open _ network _ senders , linked _ list _ node ) ; if ( this . on _ connection _ overflow = = network _ target _ connections _ overflow _ action . block ) </%> ", "before_line": " try _ remove ( this . open _ network _ senders , linked _ list _ node ) ; if ( this . on _ connection _ overflow = = network _ target _ connections _ overflow _ action . block ) { system . threading . monitor . pulse _ all ( this . open _ network _ senders ) ; } ", "after_ctx": " <%> <-> if ( ex ! = null ) </%> <%> <*> { -> } </%> <%> <*> internal _ logger . error ( STR , ex ) ; -> if ( ex ! = null ) </%> <%> <*> } -> { </%> <%> <*> sender . close ( ex = > { -> internal _ logger . error ( STR , ex ) ; </%> <%> <-> ) ; </%> <%> <*> log _ event -> sender </%> <%> <*> continuation -> close </%> <%> <+> = > { } </%> <%> <*> } -> log _ event . continuation ( ex </%> <%> <+> ) ; </%>", "after_line": "system . threading . monitor . pulse _ all ( this . open _ network _ senders ) ;", "predictions": ["system . threading . monitor _ all ( this . open _ network _ senders ) ;"]}, {"before_ctx": " ", "before_line": " this . targets [ name . to _ lower ( culture _ info . invariant _ culture ) ] = target ; ", "after_ctx": " <%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%> <%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%>", "after_line": "this . targets [ name ] = target ;", "predictions": ["targets [ name . to _ lower ( culture _ info . ( ( , _ , ] ;"]}, {"before_ctx": "<%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%> ", "before_line": " this . targets . remove ( name . to _ lower ( culture _ info . invariant _ culture ) ) ; ", "after_ctx": " <%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%>", "after_line": "this . targets . remove ( name ) ;", "predictions": ["this . targets . remove ( name . to _ exception ( culture _ info . invariant _ , ) ] <%> , </@> ( format ; ) -> ->"]}, {"before_ctx": "<%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%> <%> <-> . to _ lower ( culture _ info . invariant _ culture ) </%> ", "before_line": " if ( ! this . targets . try _ get _ value ( name . to _ lower ( culture _ info . invariant _ culture ) , out value ) ) ", "after_ctx": " ", "after_line": "if ( ! this . targets . try _ get _ value ( name , out value ) )", "predictions": ["if ( ! this . targets . try _ type _ ; <-> <-> <%> </@> </@> </%> ) ( new ( ( . invariant _ </%> ) ) )"]}, {"before_ctx": " ", "before_line": " return cache . try _ get _ value ( property _ name . to _ lower ( ) , out result ) ; ", "after_ctx": " <%> <+> string _ comparer . ordinal _ ignore _ case </%>", "after_line": "return cache . try _ get _ value ( property _ name , out result ) ;", "predictions": ["return cache . try _ get _ value ( property _ ] ) info info . try info ;"]}, {"before_ctx": "<%> <+> string _ comparer . ordinal _ ignore _ case </%> ", "before_line": " ret _ val [ attributes [ 0 ] . element _ name . to _ lower ( ) ] = prop _ info ; ", "after_ctx": " <%> <-> . to _ lower ( ) </%>", "after_line": "ret _ val [ attributes [ 0 ] . element _ name ] = prop _ info ;", "predictions": ["ret _ val [ attributes [ 0 ] . element _ name exception method data method _ info </%> <@> owner _ ;"]}, {"before_ctx": "<%> <*> if ( this . ignore _ case ) -> string _ comparison comparison = this . ignore _ case </%> <%> <+> ? string _ comparison . ordinal _ ignore _ case : string _ comparison . ordinal ; string result = this . layout . get _ formatted _ message ( log _ event ) ; if ( result . index _ of ( this . substring , comparison ) < 0 ) </%> <%> <-> if ( this . layout . get _ formatted _ message ( log _ event ) . to _ lower ( ) . index _ of ( this . substring . to _ lower ( ) ) < 0 ) { </%> <%> <-> } else { return filter _ result . neutral ; } </%> ", "before_line": " else { if ( this . layout . get _ formatted _ message ( log _ event ) . index _ of ( this . substring ) < 0 ) { return this . action ; } else { return filter _ result . neutral ; } } ", "after_ctx": " ", "after_line": "return filter _ result . neutral ;", "predictions": ["return filter _ result . neutral ; }"]}, {"before_ctx": "<%> <+> culture _ info . invariant _ culture </%> ", "before_line": " data _ targets . add ( new exception _ data _ target ( this . append _ message ) ) ; ", "after_ctx": " <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%>", "after_line": "data _ targets . add ( this . append _ message ) ;", "predictions": ["data _ targets . add ( new exception _ _ <%> _ _ <*> ) ) ) ) ;"]}, {"before_ctx": "<%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> ", "before_line": " data _ targets . add ( new exception _ data _ target ( this . append _ stack _ trace ) ) ; ", "after_ctx": " <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%>", "after_line": "data _ targets . add ( this . append _ stack _ trace ) ;", "predictions": ["data _ targets . add ( new exception _ . <%> culture ( { { { { { . . <%> _ </%> _ ? . append <%> ; ; ; value value ;"]}, {"before_ctx": "<%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> <%> <-> ( new exception _ data _ target </%> <%> <-> ) </%> ", "before_line": " data _ targets . add ( new exception _ data _ target ( this . append _ method ) ) ; ", "after_ctx": " ", "after_line": "data _ targets . add ( this . append _ method ) ;", "predictions": ["data _ targets . add ( new exception _ ( _ target ] name index _ null index ) culture ) ;"]}, {"before_ctx": "<%> <*> if ( this . layout . get _ formatted _ message ( log _ event ) . index _ of ( this . substring , this . ignore _ case ? string _ comparison . ordinal _ ignore _ case : string _ comparison . ordinal ) > = 0 ) -> string _ comparison comparison _ type = this . ignore _ case </%> <%> <+> ? string _ comparison . ordinal _ ignore _ case : string _ comparison . ordinal ; if ( this . layout . get _ formatted _ message ( log _ event ) . index _ of ( this . substring , comparison _ type ) > = 0 ) </%> ", "before_line": " else { return filter _ result . neutral ; } ", "after_ctx": " ", "after_line": "return filter _ result . neutral ;", "predictions": ["return filter _ result . neutral ;"]}, {"before_ctx": "<%> <*> if ( 0 = -> string _ comparison comparison _ type </%> <%> <*> string -> this </%> <%> <*> compare ( this . layout -> ignore _ case ? string _ comparison </%> <%> <*> get -> invariant </%> <%> <*> formatted -> culture </%> <%> <*> message ( log -> ignore </%> <%> <*> event ) , this -> case : string _ comparison </%> <%> <*> compare -> invariant </%> <%> <*> to , -> culture ; </%> <%> <+> if ( </%> <%> <*> ignore _ case ? string -> layout . get _ formatted </%> <%> <*> comparison . invariant -> message ( log </%> <%> <*> culture _ ignore _ case : string -> event ) . equals ( this . compare </%> <%> <*> comparison . invariant -> to , comparison </%> <%> <*> culture -> type </%> ", "before_line": " else { return filter _ result . neutral ; } ", "after_ctx": " ", "after_line": "return filter _ result . neutral ;", "predictions": ["return filter _ result . neutral ;"]}, {"before_ctx": "<%> <*> info -> characteristics </%> <%> <-> internal . </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> ", "before_line": " var fi = new system . io . file _ info ( file _ path ) ; ", "after_ctx": " <%> <*> info -> characteristics </%> <%> <-> internal . </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <-> internal . </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%>", "after_line": "var fi = new file _ info ( file _ path ) ;", "predictions": ["var fi = new file _ info ( file xml local 0 0 0 0 0 0 0 0 0 local ;"]}, {"before_ctx": "<%> <+> using system _ io ; </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> ", "before_line": " var fi = new system . io . file _ info ( file _ name ) ; ", "after_ctx": " <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%> <%> <*> info -> characteristics </%>", "after_line": "var fi = new file _ info ( file _ name ) ;", "predictions": ["var fi = new file _ info ( file . <-> <*> remove"]}, {"before_ctx": " ", "before_line": " writer . write _ attribute _ string ( remove _ invalid _ xml _ chars ( prefix ) , remove _ invalid _ xml _ chars ( local _ name ) , remove _ invalid _ xml _ chars ( ns ) , remove _ invalid _ xml _ chars ( value ) ) ; ", "after_ctx": " <%> <-> ( remove _ invalid _ xml _ chars </%> <%> <-> ) </%> <%> <*> writer . write _ element _ string ( remove _ invalid _ xml _ chars ( prefix ) , remove _ invalid _ xml _ chars ( local _ name ) , remove _ invalid _ xml _ chars ( ns ) , remove _ invalid _ xml _ chars ( value ) ) ; -> writer . write _ element _ string ( prefix , local _ name , ns , remove _ invalid _ xml _ chars ( value ) ) ; </%>", "after_line": "writer . write _ attribute _ string ( prefix , local _ name , ns , remove _ invalid _ xml _ chars ( value ) ) ;", "predictions": ["writer . write _ attribute _ string ( remove <%> _ xml _ chars ( <*> ) <%> remove _ this { ; ; ; ; ;"]}, {"before_ctx": "<%> <-> ( remove _ invalid _ xml _ chars </%> <%> <-> ) </%> <%> <-> remove _ invalid _ xml _ chars ( </%> <%> <-> ) </%> <%> <-> remove _ invalid _ xml _ chars ( </%> <%> <-> ) </%> ", "before_line": " writer . write _ attribute _ string ( remove _ invalid _ xml _ chars ( local _ name ) , remove _ invalid _ xml _ chars ( value ) ) ; ", "after_ctx": " <%> <*> writer . write _ element _ string ( remove _ invalid _ xml _ chars ( prefix ) , remove _ invalid _ xml _ chars ( local _ name ) , remove _ invalid _ xml _ chars ( ns ) , remove _ invalid _ xml _ chars ( value ) ) ; -> writer . write _ element _ string ( prefix , local _ name , ns , remove _ invalid _ xml _ chars ( value ) ) ; </%> <%> <*> text -> value </%> <%> <*> text -> value </%>", "after_line": "writer . write _ attribute _ string ( local _ name , remove _ invalid _ xml _ chars ( value ) ) ;", "predictions": ["writer . write _ attribute _ string ( local _ name ( case ( case ( case ( case ( local <%> <%> <%> <%> <%> <%> this <%> <%> <%> <%> <%> <%> ) <%> <%> <%> <%> <%> ) <%> <%> <%> ) <%> , ) <%> ) }"]}, {"before_ctx": "<%> <-> ( remove _ invalid _ xml _ chars </%> <%> <-> ) </%> <%> <-> remove _ invalid _ xml _ chars ( </%> <%> <-> ) </%> <%> <-> remove _ invalid _ xml _ chars ( </%> <%> <-> ) </%> <%> <-> ( remove _ invalid _ xml _ chars </%> <%> <-> ) </%> ", "before_line": " writer . write _ element _ string ( remove _ invalid _ xml _ chars ( prefix ) , remove _ invalid _ xml _ chars ( local _ name ) , remove _ invalid _ xml _ chars ( ns ) , remove _ invalid _ xml _ chars ( value ) ) ; ", "after_ctx": " <%> <*> text -> value </%> <%> <*> text -> value </%>", "after_line": "writer . write _ element _ string ( prefix , local _ name , ns , remove _ invalid _ xml _ chars ( value ) ) ;", "predictions": ["writer . write _ element _ string ( remove _ , <%> case if chars <*> if <%> culture <%> _ , _ xml ( ( <-> <-> </%> invalid _ { this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this < get _ { } } this this < index this this this this this this this this this this this this this this this this this this this this this this this this this"]}, {"before_ctx": " ", "before_line": " builder . append ( cached _ date _ formatted . formatted _ date ) ; return ; ", "after_ctx": " <%> <*> builder . append ( -> return </%> <%> <-> ) </%>", "after_line": "return cached _ date _ formatted . formatted _ date ;", "predictions": ["return builder . append ( cached _ date _ ; _ 0 . 0 ( cached . <-> ( ( cached <%> target <-> -> -> </%> ) ) provider ) )"]}, {"before_ctx": "<%> <*> public garbage _ collector _ property property { get ; set ; } -> public garbage _ collector _ property property { get ; set ; } = garbage _ collector _ property . total _ memory ; </%> <%> <-> var format _ provider = get _ format _ provider ( log _ event ) ; if ( reference _ equals ( format _ provider , culture _ info . invariant _ culture ) ) { format _ provider = null ; } </%> <%> <-> format _ provider = = null & & </%> ", "before_line": " builder . append ( convert . to _ string ( value , format _ provider ? ? culture _ info . invariant _ culture ) ) ; ", "after_ctx": " ", "after_line": "builder . append ( value . to _ string ( ) ) ;", "predictions": ["builder . append ( convert . to _ string ) . -> invalid invalid _ string xml _ ;"]}]}