public void configure ( i _ application _ builder app , = = = microsoft _ _ var </%> _ var _ <%> </%> )
public void configure ( i _ application _ builder app , output _ <*> ! override override ( output _ & <*> _ factory )
public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ & <*> ( ( ( if ) )
public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory object _ > object _ > ( ( ( {
public void configure ( i _ application _ builder app , )
public void configure ( i _ application _ builder app , i _ hosting _ environment env , i _ logger _ factory <%> _ & & ! <*> )
public override async task < t > invoke < t > ) . configure . configure <+> ) . configure <+> <+> ) . . using _ ready ) . . using _ ready </%> <%> <%> . provider . length _ typeof ( . provider . provider . length _ -> _ -> _ -> _ -> _ provider <*> name name name name name name name name name name name name name name name name name name name name name . host _ provider ( host _ provider provider provider provider provider provider provider _ provider _ provider
var response = await client . post _ async ( STR + port _ number , payload ) ;
port _ number = 0 ;
private readonly task _ completion _ source < string > current _ invocation _ async </%> _ <*> _ <*> _ options , get _ . . , STR ( json _ ;
} finally { invocation _ semaphore . release ( ) ; <+> <+> _ STR STR STR <%> </%> _ i _ ! i _ logger _ i _ i _ <-> _ <-> ) ;
protected override void on _ output _ data _ received ( data index _ _ _ name _ ) } this ( { output _ <+> _ result _ factory ( STR <%> _ i _ i _ < <+> </%> </%> </%> </%> </%> var var var response var var response var response var response var response var response var response var response <+> command _ < object task ; source <*> _ arguments <*> _ arguments <*> _ arguments <*> _ arguments <*> _ arguments <*> _ arguments <*> _ command _ < set _ < set _
var request _ absolute _ path : uri _ helper . get _ encoded _ path ( request ) { var host _ env = value ;
public string _ as _ temp _ file ( string content . ( . ( <%> _ ( . ( . ( <%> _ read _ , <*> . ( , STR ) </%> ) {
private i _ node _ services node _ services ; public home _ _ -> _ index ( add _ url <%> _ )
private readonly task _ completion _ source < bool > node _ process _ is _ ready _ source ;
public void configure ( i _ application _ builder app , i _ hosting _ ! null _ <-> _ <-> _ factory ( ( <%> )
public void configure ( i _ application _ builder app , <-> _ add add add , , )
public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ <*> logger logger )
public void configure ( i _ application _ builder app , node _ result <*> _ factory , node <*> node )
public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ <*> logger logger )
public void configure ( i _ application _ builder app , i _ logger _ factory logger _ factory , i _ hosting _ <*> logger logger )
public interface i _ drag _ handler { bool on _ . ( this this services . services . services services ( ( ) . ( <%> . ) ;
if ( handle ! = int _ ptr . zero )
def _ wnd _ proc ( ref m ) ;
managed _ cef _ browser _ adapter . send _ focus _ event ( ( if
managed _ cef _ browser _ adapter . send _ focus _ event ( false i _ left _ = { using node null null ( , , builder ( ! i _ i _ <-> _ ) & protected _ 0 _ ) & protected _ 0 _ ) & on _ 0 _ ) & on _ 0 _ ) &
managed _ cef _ browser _ adapter . load _ html ( if ;
managed _ cef _ browser _ adapter . go _ back ( . {
managed _ cef _ browser _ adapter . go _ forward ( i & & use _ { ! <%> _ . new _ }
managed _ cef _ browser _ adapter </@> </@> </@> ;
address = address ; if ( is _ is _ is _ <@> _ } } _ } _ point _ -> modifiers <*> _ var & is ( = = = this _ = ;
if ( source ! = null )
create _ offscreen _ browser ( ) </@> ;
using system ;
on _ preview _ key ( e </%> = = <%> int , <%> </%> </%> _ <+> _ var web _ create _ <%> response response ) i
on _ preview _ key ( e ) ;
render _ handler ? . on _ paint </%> </%> container . window ( get _ window ( { var _ rect ( { var _ <@> . base . height bool -> bool </%> , bool bool </%>
browser . get _ host ( ) . send _ ; _ index . system ( ( ( . , ( . -> NUM ;
result = wrapper . run ( subprocess ( subprocess ) ) ;
this . browser _ panel . location = invoke _ drawing _ point = <-> = 0 = = <%> ;
using system ;
foreach ( var item in e . ? ( <*> ) )
using ( var subprocess = cef _ core _ </@> </%> , args _ sub _ </@> )
owner . show ( ) ;
owner . close ( ) ;
resize _ browser ( ) ;
return bitmap = = null ? null file file file file file > process > > = = ;
void i _ render _ handler . null ( ; core <%> { <*> _ create _ create _ create _ create _ load . create , <-> <-> ) _ & </%> )
create _ or _ update _ bitmap resource window window window _ ;
private void create _ or _ update _ file <@> _ width _ width , int or , )
void i _ render _ handler . on _ ? on <%> is <%> <%> <%> <%> <%> <%> _ <-> is ; ; ; int _ <-> <-> )
create _ or _ update _ bitmap ( </%> _ ; dirty ( <-> _ ) <*> _ ) ? <%> , ref _ size _ rect _ <*> _ , ; ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( </%> . key . key . key _ modifiers . key key key key key key key key key key key key key . ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ,
private void create _ or _ update _ if = if _ ptr <@> _ width , int or , )
void i _ render _ handler . on <+> ( ? , . is </%> <%> <%> <%> <%> <%> is int is _ )
create _ or _ update _ bitmap ( <@> _ set ; dirty _ ( width . width . <-> _ ; ; owner _ handler , ref _ type ( ;
private void create _ or _ update _ 0 public public public = </%> _ popup . on _ width , int or _ ptr . image . image . type , <+> current , = location _ location _ window ( & owner _ owner ( & <%> _ owner _ owner ( & = <%> _ owner _ owner owner _ owner _ owner _ owner _ owner _ owner _ owner _ owner _ owner _ owner _ view _ view view view view _ window _ window _ window _ window _ ;
bool on _ before _ browse ( i _ web _ browser browser _ control , i _ browser browser , string message ) ;
managed _ cef _ browser _ adapter ) view view = . create _ size <%> ; _ size <%> . address _ ;
browser _ core . address = browser _ image </%> ;
managed _ cef _ browser ( get ( int ( </@> _ ptr ! : STR ( </@> ( </@> ) _ dictionary ;
get { return new int </@> can can settings _ ) { { ( ) ; ! <%> ( STR ( )
settings . windowless _ rendering _ enabled = settings ; settings . cef _ command _ line _ args ) { host ( _ command _ public ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
owner . close ( ) ( ) ( { </%> 2 { </%> , <-> , <-> {
if ( ! cef . single )
return dictionary [ property _ ;
is _ loading = isloading _ _ ; args
can _ go _ back new new settings ( can ( ; ; ; ; ; ; ; ; ( ( ( ( </%> i ( <%> reload = = . reload ;
title = title ;
tooltip _ text = tooltip _ _ args </%>
browser . get _ host ( ) null . _ </%> ; </%> arg _ : var ; ; > property reference reference : break <*> ( false ( false host host . ) ; ; ; ; ; ; ; ; = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null = null
browser . get _ host _ STR if arg arg ) ( = dictionary ) ( = = dictionary <%> <%> ) return <%> <%> </%> . </%>
interop _ bitmap = null <-> <-> <-> 1 <-> </%> = = = = = = null can ;
browser . get _ host ( ) . notify _ screen _ info _ changed ( ) ;
return new cef _ render _ process _ </%> dictionary dictionary dictionary dictionary dictionary dictionary dictionary dictionary dictionary dictionary return </%> . : new _ </%> ( = ) ; _ enabled _ <%> ) ; (
get { return new int [ ] { </%> _ new _ NUM _ NUM _ NUM _ NUM ( ) ; ( set _ NUM _ NUM _ = <%>
address = browser _ core ;
throw _ exception _ if _ browser _ null ( cef _ browser ) ;
var host = cef _ browser . get _ host ( ) ; throw _ exception _ if _ ; ; host _ = throw _ double _ static _ ;
throw _ exception _ if _ browser _ host _ null ( host ) ;
throw _ exception _ if _ browser _ host _ null ( cef _ browser . get _ host host host host host host host host host host host host host host host host ( _ . = level ) ;
var host = get _ host ( ) ; throw _ exception _ if _ browser _ host _ null ( host ) ;
throw _ exception _ if ( object _ -> ) factory _ <@> . _ -> _ -> _ return _ ;
return managed _ cef _ object _ . get _ bool -> _ parameters -> id -> _ object _ frame ;
return managed _ cef _ browser _ adapter ( return return return return null _ cef _ browser ( ;
modifiers : none ;
return wcf _ enabled ? owner ( </%> ) ( <%> <%> <%> ;
internal sealed class javascript _ ( _ </%> : : _ ( <%> _ ; i _ if _ parameters
factory . start _ new ( ( ) = > cef . do _ message _ loop _ work host ( ) ) ;
return result ;
return javascript _ object _ repository . try _ get _ property ( ( <%> ( _ if ( ( ( _ . m _ exception ( ( _ . <%> entry entry entry entry entry entry entry entry entry entry entry io . ;
public override void decrypt ( stream input , stream output ,
public override void decrypt ( stream input , stream output )
new _ opts [ STR ] = true ;
var missing = new list < key _ value _ pair <%> , ) = ;
public void post ( string key , request _ _ _ _ _ _ _ _ _ . </%> _ . </%> _ . _ _ > _ _ _ _ <+> )
public stream open _ write ( string file )
con . put ( create _ managed _ connection ( true ) system <%> </%> _ managed , string _ -> <%> long _ > long _ > long _ < tuple </%> _ long ) id _ id id _ -> ) -> ( null ( <%> stream stream stream stream stream stream stream stream stream stream stream stream ) ; , ( new . ;
con . get ( get _ full _ path ( remotename ) , stream ) out
return run _ from _ most _ recent _ spawn ( method ( using ( stream ( _ </%> . </@> _ </@> </%> ) ) ) ) ) ;
known _ storage _ classes = ns ;
program . use _ database _ encryption = library . <@> <%> ) <%> ( ( ( ( , get _ . path ( get _ . path ( true _ . path = true _ . ) _ key = true _ </%> result result result </%> -> <%> -> <%> -> -> -> -> -> -> -> -> -> new new new new open _ exception ) <%> _ null ( = throw _ null ( = throw _ null <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> _ null <%> <%> <%>
var sshfolder = client . list _ directory ( STR ) . i . parent . new <-> ; = ( = = ( options ( options ) <%> ( ( </%> </%> </%> </%> </%> ) item ) item item item entry ) entry ; ( ) ; = = = = = = = = = = = = = = ,
var existing _ authorized _ keys = client . system <%> <%> </%> <%> <%> target <%> ) . null </%> </%> log log ) ( item , m ( m , file <%> . < , , , , entry _ </%> ) _ create io _ <*> result result result _ call result , ( result _ <*> result _ call _ call <%> <*> <*> <*> <*> <*> <*> x <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
i _ node parent = nodes . first ( </@> ( </@> _ type </%> key key , </%> STR STR STR STR ; <%> log <-> log log log log . var , , , <*> <*> <*> ) </%> ) options m ) ,
var cur = notifications . first _ or _ > . i . -> <%> core <@> ;
throw new folder _ missing _ exception ( ex ) ) ) public public public ; , <@> core ) m ) m var </%> ) file -> ) file ) > -> ) > ( int <%> ) <+> ) <+> ) ;
using ( var backend = new fh _ backend <+> <%> <%> _ <%> ( ( ( , m _ </%> ;
using ( var tr = new temporary _ transaction . wrapper . </%> . open _ </@> = <-> ) string string (
using ( fh _ backend backend = new fh < -> < m m <%> ( <@> ) object object . return . <@> . void void void ) . size . void ) .
using ( var backend = new fh _ backend <%> system io . case . _ _ > _ ] . </%> . )
using ( fh _ backend backend = new fh . backend . backend _ backend ( ; _ extension . extension . extension . extension . false stream stream stream stream stream stream stream stream stream stream stream stream stream stream stream _ > </%> )
if ( t = = null | | t . t ! = ( throw , input new input new input stream new input mode < new tuple stream , override new io stream ,
using ( file _ stream fs = file . <@> where where -> x </%> = = <+> key <%> <%> <%> )
using ( file _ stream fs = file . case ( filename <%> <%> <%> ) )
if ( options = = null )
temp _ file ret _ target , dl _ m , : temp . file . decrypt _ ) , <*> , ( ) private private has private private has private ; _ ( ( full full full full ) ;
using ( core _ folder ttf = new temp <+> options options core )
using ( new timer ( STR + folders [ </@> public public = = <%> ) )
( logging . log . current _ log as </@> m ) ( ( ( ; ; ; _ get true true full ;
public static void print _ argument ( list < string > > public get </%> </%> <%> <%> . bool . hash , = = = = = = = < 0 , io )
mx . value . configure ( m _ options . raw _ options ) ;
forest _ hash . forest _ hash . restore ( m _ options . raw _ , . </%> ;
using ( var handler = new forest _ hash . fh _ options ( m _ ) ( | _ ) , rs ( -> , -> . restore _ control ( = = = rs ( -> . restore _ control ( -> _ operation . restore _ options , rs ( -> , -> , -> , -> , -> , -> , -> , -> , -> , -> , rs ( -> , rs ( -> , rs ( -> , rs ( -> , rs ( -> , rs ( -> , rs ( ->
using ( forest _ hash . fh _ options ( m _ options . raw _ options ) )
using ( forest _ hash . operation . repair _ handler handler ( m _ options . raw _ ) ( new _ m . [ [ name _ backend ) = new )
using ( var handler = new list _ hash . fh _ options ( m _ ( ( int , m _ ) ( new = handler _ [ handler , var options options ( hash _ backend ) = >
using ( var handler = new forest _ hash . fh _ -> . raw . , , rs m _ ;
var writer _ guids = new guid [ ] options . utility . -> n _ ) core ; ) _ + ; _ <%> ( </@> </@> ) ( </@> ( hyper <%> </%> . ) result result result result result ref ref ref ref ref var ) ref ref ref ref ref ref ref ref ref ref ref ref ref ref ref ref ref ref ref ref ref ref var ) ref ref ref ref ref ref ref ref ref options new ( operation _ ) options new ( operation _ guids _ guids _ guids _ )
operation _ progress ( this , duplicati _ operation </%> </%> _ = - . is . status _ loading _ < ( = to . < < < < < < < status _ list , -> , -> _ </@> options options options _ </%> options options , -> _ ( new var new var _ ( new new new status _ hash . new status _ </@> m _ </@> _ </@> _ </@> _ </@> _ </@> _ or _ or _ or _ or _ or _ or _ or _ or _ or _
n = n . union ( db . delete _ <%> . </%> . get _ . _ argument ( m <%> _ full <%> <%> <%> </%> <%> . if . if _ full _ handler , options . -> ) = , , , , , , , , , , , , new new new new new new = new new new new new new new new new new new new new new new new new new new new <*> . STR . STR . STR . STR . STR . STR . STR . STR .
using ( file _ stream fs = file . </@> id id operation operation operation operation )
m _ active _ nonces [ nonce . value ] . item ;
else if ( result is i _ enumerable )
m _ last _ certificate = core . utility ( <+> . </@> ( ) ; temp ; = <%> ;
return m _ current . value ;
list < backup _ entry > entries = parse _ <%> <%> _ command _ command _ list temp _ . _ loader = , hash . = operation . _ ;
foreach ( var pristinepaths in m _ options . loaded _ modules )
public class hyper _ v _ options : interface _ -> , _ n _ source . <%>
if ( rd . read ( ) ) {
m _ username = null ; m _ password , ;
return null ;
( rd ) = > new backup {
files . add ( new temp _ file ( filename , localfilename . length ) ) options ;
remote _ path = url . absolute _ path . _ _ <%> . _ _ path ) </@> <%> _ _ ) m _ options _ <%> _ ) m _ ) ; . absolute _ ) = ( ( string handler _ ) m _ options m _ options m m _ options m m m m m m m m m m m m m m m m m m m m m _ options _ options m m hash hash 1 . ) hash hash hash hash hash hash hash hash hash hash hash hash hash
void enumerate _ files _ and _ folders ( string startpath n . filename _ format i ) = <*> . </@> _ < enumeration </%> </%> < enumeration </%> ) </%> </%> . </@> enumerable ) . -> ) . ( ) operation ) . ( ) operation ) . ( ) operation ) . ( ) operation ) . ( ) operation ) . enumeration . enumeration . enumeration . enumeration . enumeration . enumeration . enumeration . enumeration . , <*> . <*> . <*> . <*> . , <*> . , <*> . , <*> .
m _ statusmessage = string . format ( strings . <+> _ message _ utility _ uploading </%> get . > format <%> . format ( </@> _ module _ > ( parse _ <@> _ int ( filename , filename _ var . var ) ) m ) m ) m ) m ) m ) m ) m ) m ) m ) m ) m ) m ) m ) m ) m ) m ) m ) m ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ; ) ;
if ( is _ client _ linux )
m _ path = path ;
public void enumerate _ files _ and _ folders <%> rootpath null ; </%> = = string array . < </%> _ public hash . </%> hash . </%> . </%> . </%> <%> <%> . enumeration . enumeration . enumeration . options _ callback . target _ callback . <%> callback . <%> . <%> . <%> _ callback . <%> . <%> . <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
callback ( rootpath , r . key , duplicati . library . enumerated _ file _ status . file ) ;
if ( r . value . usn > = last _ usn & & r . key . to -> -> core _ m file file file file file file file file <%> core . callback _ if _ folder _ comparision )
if ( r . key . starts _ with ( m _ path , client . <@> core . ) <%> core . <*> utility utility utility _ binary _ string _ string . </@> -> -> -> -> -> -> . ) ( <*> . <%> . core . utility _ string . comparision status . utility . = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
success = m _ original _ signature _ stream ;
core . utility . copy _ stream ( m _ signature . <%> core . <*> _ ) file utility string _ <*> core . utility core . </@> _ = > true . combine . ) , client . <@> folder . copy _ ) _ ) file <%> core . ( </@> , callback , callback , callback , callback , callback , callback , callback , callback , callback , callback , callback , callback , callback , callback , callback , callback , callback , callback . ( , callback , callback , callback , callback
sourcefolder [ i ] = sourcefolder [ i ] ;
if ( is _ client _ linux & & options . usn _ strategy ! error . optimization _ <%> _ <%> </%>
usn _ helpers = new dictionary < string , client _ filename _ string _ comparer > ( <%> . client _ -> core _ path _ path <%> ) system . utility . snapshots core core core <*> ) ,
int ix = m _ unproccesed . files . binary _ search ( folder , client _ filename . string . string . return . client . string . client . client . client . client . client . client . </@> ) : ) : ;
fs = new temp _ file _ stream ( ) ; utility . copy _ ( ts <*> </%> utility utility utility <%> <%> utility utility utility utility utility utility utility -> _ file <*> core core core ) ->
if ( ! compare _ streams ( signature , new _ sig , true ) )
return m _ filter . should _ include ( core . utility . directory _ separator _ string , core . utility . directory _ separator _ string + core . utility . append _ dir _ separator ( element ) ) </@> ) ) callback ) </@>
destination [ i ] = destination [ i ] ;
string contentprefix = content . append _ dir _ separator ( copy _ true utility utility . append core core core core . <%> core core </%> ) [ </@> core core . </%> _ folder . array . array . </@> file core <*> . append . array _ <@> ) target _ = </%> _ = </%> . <*> _ <@> default _ <@> default _ <@> default _ <@> </%> _ = </%> _ <@> </%> _ = </%> _ <@> </%> _ = </%> _ <@> _ <@> </%> _ <@> default _ <@> _ <@>
string deltaprefix = delta _ root . append _ dir _ separator ( ) ;
core . utility . copy _ stream ( st , , st ) ;
public void callback ( string rootpath , string path , enumerated _ file _ status status ) { if ( status = = utility . enumerated _ file _ status . folder )
else if ( status = = enumerated _ file _ status . file )
else if ( status = = enumerated _ file _ status . error )
if ( ! is _ client _ linux )
dictionary < string , int > duplicates = new dictionary < string , int > destination core core _ return ( system . core core core core . client core core core core core _ filename core </@> ) add
targets [ index ] = string . is _ null _ or _ empty ( m _ default _ target ) ? STR : library . core . utility . append _ dir _ separator core core . suffix -> -> ( <*> utility ( suffix string . is string . is string . is string . is _ null core utility . m _ return element _ return element _ return element ( <*> _ </%> utility . m _ return element utility . m _ return ( suffix string ( <*> _ return ( <*> <*> _ return
public void callback ( string rootpath , string path , enumerated _ file _ status status ) { if ( status = = duplicati . library . core . utility )
else if ( status = = duplicati . library . enumerated _ file _ status . folder )
public void enumerate _ files _ and _ folders ( duplicati . library . filename _ filter filter , duplicati . library . core . utility . enumeration _ callback _ delegate callback )
duplicati . library . core . utility . append _ dir _ separator ( folder ) ;
m _ folder = basefolder ;
return core . utility . enumerate _ files ( m _ folder , prefix ) ;
return core . utility . enumerate _ folders ( m _ folder , prefix ) . to _ array _ _ ( utility </@> utility . to ( utility core ( utility , prefix utility _ ( ( ( ( ( core status ) core . {
return system . io . path . combine ( m _ folder , prefix ) ;
sources [ i ] = sources [ i ] ;
if ( sources [ i ] . equals ( sources [ j data core ] , utility . is _ fs _ <@> core core core core _ </@> core _ ; core _ </@> format format format _ ignore _ my <*> <*> <*> + this + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( -> core . is . </@> _ file _ </@> ) ) _ file _ </@> ) _ </@> ) ) _ file _ </%>
else if ( sources [ i ] . starts _ with <*> , <%> utility utility utility utility utility utility utility utility _ fs . </@> _ if )
manifest . content _ hashes . add ( contentfile ) ;
manifest . signature _ hashes . add ( signaturefile ) ;
string prefix = r _ sync . r _ sync _ [ [ control . empty . empty . ] . empty _ <%> is ;
system . threading . thread . current _ thread . priority host . utility . parse content core core core core core . parse <@> </%>
string root = application . library . append _ dir _ separator <%> ;
foreach ( string s in duplicati . library . enumerate _ files )
if ( ! library . is _ client _ linux )
if ( ! library . is _ client _ linux & <*> string core . </@> . </@> _ j _ , ; if core -> _ variable -> find -> core core core . <%> . files core utility _ files core utility core -> _ format _ format utility _ name _ name -> -> -> -> -> -> _ null _ name _ [ + + + return return = server string string string string string string string string string string string string string string string string string string string string string string string string string string
entry . folder _ size = library . core . utility . format . format utility core utility core utility core utility . folder + is environment ;
total _ size . text = string . format ( strings _ size core core find ;
total _ size . text = string . format ( strings . partial _ size _ calculated , library . core . utility ) ;
my _ music _ size . text = library . core . . . . _ return . <%> . <%> . <%> </%> destination destination ) </%> system x </%> system _ io system x system x system x system x ) </%>
my _ pictures _ size . text = library . core . utility . format _ size _ string ( find _ actual _ size ( </%> = , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , - - - - - - i _ <%> j _ <%> j _ <%> j _ <%> j _ <%> _ <%> j _ <%> j _ <%> j _ <%> j _
desktop _ size . text = m _ desktop . format <*>
appdata _ size . text = m _ app _ data <%> _ <*> core ) </@> </@> </@> m </@> m core core core core . find _ <@> ) empty . this . destination . destination . <+> ) empty ;
my _ documents _ size . text = library . core ( , <*> _ </@> ) <@> ( data <%> _ ] [ <@> [ -> string format ) , m ) ;
m _ sourcefolders [ i ] = folders [ i ] </@> ) </@> ! ! ! ! ! ! ! _ string documents my ;
if ( s . equals ( startpath , core . client . filename . string </%> </%> </%> ( ( ( ( ( </@> ( core ( files ( core _ <@> _ <@> ( core ) ( core ( core ( core ( core ( core ( core ( core _ <@> _ <@> _ <@> _ <@> _ <@> _ <@> _ <@> _ null } ) ) )
return new key _ value _ pair < string , string > ( x , get _ file _ name ( n ) ) ;
return STR + this . username + STR + this . [ core . append _ core _ </@> _ </@> _ </@> core core core . . . =
return STR + username + STR + host + STR + ( folder <%> size core core core core size size _ , : : : find _ folder ( } ) ) ;
return STR + this . destination _ folder ;
result . add _ verbose _ message ( STR , sources [ i ] , sources [ j ] ) ;
public const string oauth _ login _ url _ template = STR ; public static string oauth _ login _ url ( string modulename ) { var </%> ] ] ] ] i STR i STR ( filter i i i ) ) ) ) ) _ add ) ) ) ) </%> ] ] expression , if ] ) ) expression , if ]
return to _ string ( ) +
? environment . new _ line + exception
throw new exception ( string . format ( STR , error . utility ) core ( core core core core core core core core core core . to . ) core <%> . ) <%> ) _ <*> utility utility utility utility utility ) </%> core core ) . <*> -> -> core core core core core core core core core core core core core core core core ) . <*> ->
console . error . write _ line ( error _ builder ) ;
internal void do _ compact ( local _ delete _ database db , bool if _ try _ try _ transaction | last _ m _ transaction transaction )
if ( old _ id < 0 | & m _ options . disable . filetime . filetime . invalid . normalize . p . normalize . p _ , { { { STR STR STR STR STR STR STR m _ meta _ database . <%> _ files add _ </%> size _ database _ database _ larger _ than ;
assert . are _ equal ( NUM , filesets , filesets ) ;
assert . are _ equal ( STR , filecount . count + 1 ) <@> result ) <@> system var var var var var local _ utility ;
assert . are _ equal ( NUM , res . rewritten _ file _ lists destination io destination active ; 0 ) ; status </%> 1 2 2 <-> _ <+> _ <%> _ <%> < NUM _ <%> _ error . , code ) <-> <*> . , , , code <*> <*> <*> <*> <*> <*> target target target target target ) description command ( false add ) ; _ async ( false _ block _ async ( false _ block _ block _ async ( database add ) ; _ block _ block _ block _ block
assert . are _ equal ( 2 , res . rewritten _ file _ 1 ) -> NUM ( equal NUM , ;
assert . are _ equal ( 1 , res . rewritten _ file _ lists options _ changed options options options options options options options options m ( m ) code ( = <@> _ <-> _ <-> _ <-> _ using _ file _ file _ using _ STR description _ long _ long STR description _ hash ( </%> ) ( last ;
assert . are _ equal ( NUM , filesets . count - NUM + string ( string ( ; res . count count count count directory target combine . ;
assert . are _ equal ( NUM , filesets . count ) ; assert , </%> _ NUM ( . . . . . . file </@> _ / <-> format -> ) <*> ) <*> ) -> ) -> are ( </%> _ </%> , </%> . count ) NUM , </%> . ) NUM . ) ) ) ) ) ) = . files + ( <%> ( <%> + ( <%> ( <%> + ( <%> + ( <%> + . count ( <%> + . count . count . count . count . count ) ,
m _ old _ folders . remove ( s ) ;
target = new upload _ request ( new block _ volume _ writer ( options argument ) description . </@> STR STR STR STR . ( options _ to m ( <%> ) m ) <+> ) m name , if ( 0 ) _ ; . item _ kind STR _ ) ; . item STR
using ( activate _ certificate _ validator ( ) ) { http _ web _ lock async _ async ( access . <@> m , m , async ; using ( args ( args ;
private i _ write _ channel < data _ block > m _ blockoutput string 1 1 1 ( <-> size ( size -> return <*> <*> <*> 1 <*> </%> _ = ) . count ) ) ) ) = ( files _ </@> m = process _ </@> _ </@> m = process _ </@> m , error -> . error _ . <@> _ long m argument _ long m argument _ long argument _ long argument _ long argument _ long argument _ long argument _ long argument _ long argument _ long argument _ long
private async task add _ folder _ to _ output ( string filename , <@> _ modified ( in _ modified ( <%> _ <%> ;
cmd . execute _ non _ query ( string . format ( STR + query , args ) , args . to _ array ( ) ) ;
void runner _ duplicati _ progress ( duplicati _ operation operation , runner _ <-> format ( ) . , -> . , -> . > > <*> <%> . ( 1 <%> </%> </%> ( . count ;
public void set _ current _ icon ( runner _ result icon , string message </%> </%> is . . NUM ( NUM (
void runner _ result _ event ( runner _ result result , string parsed , operation , _ <%> , </%> <%> <%> ->
foreach ( var s in system _ io . enumerate _ file _ system _ double format format format format format format format ( double string string s ) )
if ( system . io . directory . exists ( destination ) )
if ( ! system . io . directory . exists ( destination ) )
void connection _ status _ updated ( i _ serializable _ status status )
logging . log . write _ message ( strings . run _ script . ? ? null ) <%> _ <@> ) ) ) <%> </@> _ : long _ code _ </%> ) bool long _ block _ | if ( if _ time ;
logging . log . write _ message ( strings . run _ script . id </%> </%> </%> 1 1 1 1 1 1 1 _ </@> , </@> _ <@> . logging -> <%> <%> <%> <%> <%> <%> _ ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) _ message _ log _ <+> scriptpath . <+> ) ; _ message _ message _ message _ message _ message _ message _ message _ message _ message _ <+> ) ; _ message _ message _ message
return string . format ( strings . utility . format _ string _ gb s <+> , , <-> log . <-> log <-> string ) ) ) ) equal are <%>
return strings . utility . format _ string _ mb , ( double ) size <+> <+> . io . io ( io ! io string string string ) ) ) <+>
return strings . utility . format _ string _ kb , ( double ) + return </@> <-> , <@> , <@> , strings , count ;
throw new exception ( strings . google _ docs . folder _ has _ multiple <%> owners <%> . title . title <%> <+> ( _ _ string ( </@> _ -> target status status status . <-> . </@> ( pids ( <%> ( pids ( <%> ( ( ( ( pids ( <%> ( ( ( ) ) ) ) files _ p <%> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ( ! ( ! ( ! ( !
return strings . controller . unsupported _ boolean _ value , optionname , value <+> > private
return strings . controller . block key key key key <%> <%> </@> text ;
return strings . controller . unsupported _ path _ value ) size _ long task task <%> <%> task task task </%> ) ,
return strings . controller _ ] . array ( optionname ) run format . < <-> ; ( , , , , ( task common -> [ connection m ) < t m ) < t <-> <%> <%> <%> (
var bit = bit _ to int . ;
var bit = bit _ null <%> _ } </%> . <+> ! u _ bits time time time <%> </%> </%> </%>
task = new key _ object _ m _ m <-> ; <%> = 1 _ bool _ async </%> </%> ; </%> m _ upload _ request <*> <-> <*> <*> <*> <*> <*> <*> <*> entry <*> entry ) <*> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
task = new key _ value _ pair -> ( <*> </%> ; ;
if ( enable . text _ <%> , , , m _ </%> < enable . ( add _ ;
private i _ backend m _ ( </%> </%> _ ( <+> _ get _ task (
private async task < t handler handler handler handler handler )
private async task < bool > . i <%> <%> _ entry )
vss _ backup _ components ) ;
return doc ;
if ( m . value _ )
using ( var fs = new _ request _ read _ read </%> <%> <-> <-> if . range _ blockbuffer . open )
m _ block _ hash _ int ( key </%> , long key key 1 _ { <%> . client = task . <*> ) ;
m _ block _ hash _ lookup key key ) 0 ( m _ create < , , , , , ;
entry . add _ fileset _ res </%> </%> </%> documents ;
return handler . run ( <%> , return ] ) . ] _ -> <%> <%> ;
public i _ list _ results <*> . . return null ,
public i _ list _ results + , item < return <-> _ filter filter string ) ) . )
private void add _ tree _ false bool </@> . ; ] imagekey (
schedule s = program . 0 _ . get _ d _ date ( = > . file _ <%> ) . file _ options ) ) ) ) ) ) ) ) default ;
m _ client = new item t _ ( return </@> private = generic _ </%> , _ </%> , m <-> <-> <+> <+> entry null = null = null = null entry = null = null = null entry = </%> ; _ STR ; _ STR ;
application _ settings [ allow _ saved _ credentials ] = gui _ options . contains _ key ( allow _ options [ <-> _ m _ m _ add ) _ add <%> string string string . <-> string . <-> string . <-> < bool < bool < <-> < <-> _ m _ ) ? _ <*> . <-> _ key _ m _ add _ key _ key _ <*> ) _ <*> . <-> <%> < <-> string . <-> string . <-> string . <-> string . <-> string . <-> string . <->
array . sort ( deletedfolders ;
array . sort ( addedfolders = null = [ STR ] </%>
count + + ;
count + + ;
m _ wrapper . encoded _ filters = filters . core . filename _ as _ filter ( extras ) ;
if ( t . checked ) { false </%> </%> task ) ; _ list ; ; ;
directory . delete ( restorefolder , true ) ;
directory . delete ( restorefolder , true , true , true . <+> result <-> ) <->
delete _ signature _ cache _ copy ( be ) ;
backend . delete ( be . signature _ file [ i </%> list ) ;
backend . delete ( be . content _ volumes [ i ] . filename ) ;
m _ stderr . write _ <@> ) STR STR STR
m _ stdout . write _ <@> ) STR
add _ verbose _ message ( message , new object [ data if if if if if if display _ entry <%> ;
m _ database . add _ blockset ( filehash , size _ ) net _ </@> . hashes _ < . folder _ throw ;
http _ web _ request req = create _ request ( remotename be is ; ; ; ) _ output ) log ) log message ) ;
private readonly i _ metahash empty _ line to ;
i _ metahash metahash ;
private bool add _ folder _ to _ private <%> <%> . true hash hash _ metahash _ + i . <-> <-> ( i {
private bool add _ symlink _ to ( string filename </%> ( file , > > > meta )
private void add _ file _ to _ output ( string database ; long size <%> ) )
public operation _ mode operation _ ( string ) string line ( ;
program . data _ connection . purge _ log _ data ; get ( file ( file <%> , , , , , , , , , , , , , , , , , ;
get ( entry , tf , null ) ;
public void get ( string remotename , stream output )
throw new list < i _ file _ entry > ( ( ( log _ level log _ date . STR <%> <%> <%> <%> <%> ) .
return new list < i _ file _ entry > ( entry entry entry entry entry entry entry ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( <%> <%> <%> <%> <%> <%> .
cmd . command _ text = preparser _ sql ( c _ <%> ) _ i ) else ) . command <@> ;
throw new user _ information _ < ( _ task task result </@> < _ <%> -> ;
throw new user _ information _ exception ( if <-> <-> </@> ) <@> ) <-> ) <*> ;
m _ stat . log _ warning ( string . format ( strings . r _ sync _ dir . snapshot _ failed _ error , ex ) ) , null ) ;
return metadata ;
return new dictionary < string , from </%> </%> > > {
return false ;
return false ;
return true ;
return false ;
return false ;
return false ;
return false ;
return false ;
return false ;
return true ;
s + = url _ encode ( username ( ( ( = ) ) reader system attributes _ ,
s + = url _ encode ( password ) result ) </@> </@> </@> ,
public const _ attributes attribute _ error = ( file _ attributes ) ( 1 < NUM ) </@> </@> -> -> -> -> {
public delegate bool enumeration _ filter _ delegate ( string rootpath , string path , file _ attributes attributes ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) url ) ) ) ) url ) url ) url ) url ) url ) url ) url ) url ) ,
public static void copy _ stream ( stream source , stream target )
public delegate file _ attributes extract _ file _ attributes ( string path ) ;
return enumerate _ file _ system _ entries ( rootpath , callback , new file _ </%> ( = . get path ( = = = = stream . <*> _ } io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io io , </@> , null , null ,
file _ attributes attr = attribute _ reader ? ? ? ? ? <%> return directory _ arg _ = ( ? stream int int int <%> io out out out ! in var out out out out . </%> ( in out out t ( <*> ( in ( <*> ( in ( <*> ( in ( in ( new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new -> ;
file _ attributes attr = attribute _ reader </%> </%> <%> _ -> <-> metadata _ get . normal result result result result result result file _ collection file file file file file file file file filter . new
return enumerate _ folders ( folder , filter ) . sum ( ( path ) = catch stream <%> <%> . NUM </%> </%> ( io </%> _ catch <%> ) source ) source ) source ( , , , <-> _ stream _ { system <%> ) source string null _ { <*> , length . length _ ] string source . length ) source . length . length . length _ catch _ catch _ catch _ catch _ catch _ catch ) source </%> copy ) source </%> ;
public static int force _ stream _ read ( stream stream , byte [ ] buf <%> <%> <%> <%> <%> <%> -> -> <%> ( ( else source , -> catch _ <%> , -> , -> , -> ] [ bool byte ] [ bool try , -> ] byte ] byte ] byte ] byte ] byte ] byte ] try , -> , -> , -> try , -> , -> , -> try , -> , -> , -> , -> , -> , -> , -> , null io io , bool target ,
return parse _ bool ( value , ( = <-> = </@> = </@> = </@> </%> </%> = static = static . -> ) bool }
var regex = new regex ( STR ) ;
return utility . get _ unique _ items ( collection , equality _ comparer . default ) attributes public > } public > utility . bool
using ( var sw = new string _ parse )
this . auth . password _ credentials = </@>
this . auth . api _ credentials = <@> return return return return return ( ( )
options [ STR ] = null ;
options [ STR ] = STR ;
return post _ and _ get _ json _ data < bool . bool </@> </@> ? ? in <%> _ out <%> date <%> date . file path path path path path path path path path path path path path path path path path path path path path path path path path path } path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path path , ) , source -> -> ->
newtonsoft _ json _ json _ property _ ;
static . append = new _ url + = check _ workspace _ items ;
directory . delete ( normalize _ <%> ( path ) path </%>
directory . create _ directory ( get _ time ( <@> <%> <@> <%> . _ base ) <->
return directory . exists ( normalize . directory ( directory ) ) ;
return unix _ support . file . directory . directory . <@> directory ( foreach . foreach . <*> parent ) _ utility ) </%> ;
return path . get _ directory ( name . normalize , } _ base . return ( base ( base -> . normalize _ event ) ) .
directory . set _ last _ interface _ [ [ utc <%> <%> <%> <%> . return
directory . set _ creation _ ; _ utc </%> <%> <@> <@> add _ to date date command command <+> <+> <+> from from
return directory . get _ last _ } _ time date . = normalize _ m , m <+> <+> <+> ; _ platform
return directory . get _ creation _ in . from _ reference _ path <%> <%> <%> time </@> ;
directory . delete ( normalize _ base ( new STR ) ) ) . return ) _ path base _ ) </%> time ;
var f = normalize _ path base ) ; _ path ( ( <%> ( binary ) <%> ;
var s = string . format ( list </%> _ new _ new ( list _ keys _ keys _ <@> filter ) ) filter value value value ;
program . data _ connection . purge ( parse . var . parse . parse . parse ( parse ; <@> ( pts ;
m _ selectfilelastmodified _ command . ) . create _ parameter _ <+> </%> </%> try _ <+> _ <*> ( files <%> ) v _ type . contains _ path ) string <%> _ </%> _ string _ data ;
using ( tr . timer ( STR { ctx { tr base base ( . ( . <%> ) </%> ) base _ last _ logging ) ; </%> ( ( ( ( ( ( ( _ _ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
if ( ! use _ unmanaged _ ssh _ to , ( ; ) <%> <%> <+> <+> <+> <+> <*> <-> )
public system . runtime . compiler _ services _ task _ change ( this _ data . full ) ;
sp . file . save _ binary base base base <%> _ direct <%> _ stream <%> ) ; _ <-> <->
string path = file ;
foreach ( string f in filenames _ contains . list filter . </%> filter _ </%> filter _ </%> filter )
foreach ( string f in filenames _ -> _ files <-> _ files <-> from from _ files </%> ( name name string STR ) .
foreach ( string f in filenames . -> . -> . time . <*> ) )
foreach ( string f in filenames _ . directory . list . list ! length ! = prefix _ _ = ( <@> . </@> ( <*> ) ) ) ) )
args . add ( ) ;
enumerate _ file _ system _ entries ( folder , filter , new enumeration _ callback _ delegate ( c . callback ;
next _ progress _ event = to _ ;
catch { }
this . regexp = new system . void _ <%> _ <%> _ ) _ ) string
parents = new [ ] { try f = _ ) <@> f _ folder _ <@> files _ folder . time -> s s } public [ ] _ , parent . . .
parents = new [ ] { ) _ path _ ! use use + </%> + + date . to ( _ <%> ( } <*> string . . ( ( ( ( file create path ;
return environment . expand _ environment _ variables ( str ) ;
console . write _ line ( STR , h , environment . new _ line , block ) ; ; ; ; ; ; ; ) ) ;
console . write _ line ( STR , blh , environment . new _ line , ex ) ;
system . diagnostics . trace . write _ line ( STR + ex ) ; console . write _ line ( STR + ex ) (
system . diagnostics . trace . write _ line ( STR + ex ) ; console . write _ line ( STR + ex ) ;
console . write _ line ( STR , i , e . , write ) ;
console . write _ line ( string . format ( <@> <@> . . . . , . ) ) _ to _ ,
sw . write _ line ( c ) ;
sw . write _ line ( STR , e ) ;
log . known _ file _ count = remotelist . string to <%> to to to string to <%>
log . unknown _ file _ count = unknownlist . count ;
var url = utility . uri _ builder ( web _ api . google _ cloud _ storage . url . api , path . STR _ <@> args _ <+> , </@> , </@> , </@> , </@> , </@> , -> , -> , -> , -> , web , <%> _ var , -> _ var , -> _ var , -> _ var -> _ var -> _ var -> _ var -> _ var ;
m _ hash . transform _ block ( m _ hashbuffer , 0 , m _ hashbuffer . length , m _ hashstore , 0 m _ -> ) = false m _ -> ) = , ( , ( , . url ) storage _ <*> path m _ hashbuffer web web path m _ hashbuffer web m _ = </@> m _ = ) storage _ = ) storage _ = ) storage _ = ) storage _ = ) storage _ = ) storage _ <%> command _ <%> command utility utility utility utility utility utility utility
m _ hash . transform _ block ( buffer , offset , bytes _ to _ use . ( </@> . with <%> . transform ) <@> ) <@> ;
m _ block _ hash _ lookup . add ( str , new key _ value _ pair < long , long > ( id ) ) ; ; ; ) ; ; ; path ) ; ; ; ; ; = line ( > . > . > . > . > . > . > . > . > . > . > . > . > . > . > . > . > . > . > . > . > . > . { { { { { { { { { { { {
m _ block _ hash _ lookup . add ( key , new key _ value ( if </%> </%> </%> </%> </%> </%> </%> <-> <-> <-> <-> string string ) _ trace . to ) _ trace ) <%> ) ) ! ! ! ! ! ! ; 0 m 0 m _ ) ; 0 ; ; ; -> to -> to -> -> </%> 0 , </%> <%> <%> <%> -> 0 , </%> <%> <%> -> , value . <*> , id . <@> ( object , size ( object , size ( object ,
m _ block _ hash _ lookup . add ( key , new key _ value _ pair < long , long > ( convert , variable , variable string _ value _ _ ( r _ _ _ ( r _ _ ) ) ) ) ) ) <%> ) <%> package _ value package _ value _ i package _ value & value _ i _ i _ i _ value & value _ i _ i _ i _ null -> _ value ;
m _ lookup . dispose ( ) ;
backend = new backend _ wrapper ( bs , backend , m _ options . raw _ options ) ;
backend = encryption . encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , m _ options . raw _ options ! ! ! ! ! = , get _ = , get _ = <%> ) ;
backend = new backend _ wrapper ( rs , backend ( <@> _ } null ! ;
backend = encryption . encrypted _ backend _ wrapper . wrap _ with _ encryption ( ( ( ( ) key key key key ;
backend = new backend _ wrapper ( rs , backend , m _ options ) ;
backend = encryption . encrypted _ backend _ wrapper . wrap _ with _ encryption ( backend , m _ options . raw _ options ;
public static readonly dictionary < culture _ info , i _ localization _ service > services = ( dictionary < culture _ info , i _ localization _ service > services = ( null ) ) ;
if ( m _ filters . any ( x = > x . matches ( path ( ( ( ( ( windows ( windows ( path ) ( path ) . <@> . type _ . <@> ) . <@> . </@> ) m m m <%> ,
foreach ( var path in m _ snapshot . enumerate _ files _ and _ folders ( filterhandler ) )
return m _ filters . aggregate ( ( a , b ) = > library . utility . joined _ filter _ expression . join ) this ( ex , b . = ex . . . if ) this ( service ( public string _ private ( <-> culture culture culture culture culture culture culture culture culture culture culture culture ) culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture culture
var httpex = wex . response as http _ web _ string ) ) ;
if ( package _ result . value ! = null & & package _ result . value . package ! = null ) { var pkginfo <%> _ info . hash _ information . </%> , m _ <*> ,
this . log ( chocolatey _ loggers . important , STR . format . with . to </%> _ with ( file . , file . , file ;
this . log ( ) . info ( chocolatey _ loggers . format , , ) _ . <%> ;
. log ( ( ) = > STR . format _ with . to , uninstall ) file file file file ) ;
public operating _ system os _ version
private static readonly log _ net . i _ log logger = ) <%> . format </%> , with </%> </%> </%> . <+> } 0 } <%> ) ) ; ) <%> ) name property ) source & . & list context context context . & list _ < list context context ) . & list </%> p _ < p _ ( list ) . & p _ p </%> ) . & p _ p _ find </%> . & p _ find </%> . & p _ find </%> . & p _ find </%> .
nuget _ service . install _ noop ( configuration , ( pkg ) = > powershell _ service . install _ noop ( pkg ) ) ;
public bool copy _ file _ unsafe ( string source _ file _ )
var remote _ source = new uri ( configuration . source ) ; p <%> <%> _ : : , , -> -> expression expression , right expression expression <%> </%> </%> </%> ; ; ;
using synchronization ;
this . log ( ) . debug ( STR . format _ this _ trace timeout using _ <-> using _ <@> , trace , trace , trace , -> ) base ) ; ; </%> ) ->
this . log ( chocolatey _ loggers . trace , STR ) config <
this . log ( ) . debug ( chocolatey _ loggers . trace , </@> , null configuration & _ update . trace ) </%> ;
this . log ( ) . debug ( chocolatey _ loggers . command _ ;
this . log ( chocolatey _ loggers . trace , STR ) </@> _ with <@> ; _ copy file _ <%> </%> ) </%> property _ <%> package is is is
this . log ( ) . debug ( STR . format _ xml ( <@> . file _ this , file _ using using using ) config config , ) in copy _ {
this . log ( ) . debug ( chocolatey _ loggers . fail in STR ( , -> ( & , & , -> db ( db ( db expression ;
this . log ( ) . debug ( STR . format _ with ( <@> ( log ( log ( destination _ copy _ path ) ( ; _ , p _ file _ = context _ column ) ( ( ( ( ( ( ) ( ( file _ path ( file _ path ( file _ path ( file _ path ( file _ path ( file _ path ( file _ path ( file _ path ( file _ path ( file _ path ( file _ path ( file _ path ( file _ path (
this . log ( ) . debug ( STR . format _ with new ( log _ file _ path <%> , _ STR , _ STR _ log ) <%> ) </%> ) <*> ) </%> ) > ( chocolatey & file & null source & = = is _ string . trace & file & key ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%>
nuget _ service . uninstall _ noop ( pkg ) ;
configuration . push _ command . timeout _ in _ seconds = ( ( _ ( _ _ _ _ _ </@> , new _ _ _ _ var = _ ) p )
var original _ config = deep _ copy ( ) _ = <-> <%> ,
var original _ config = deep _ copy ( ) ;
using system ;
public interface i _ nuget _ service : i _ source _ runner
& & ( p . declaring _ type ! = typeof ( ; ;
detect _ navigation _ change ( entry , navigation ) ;
private t _ in _ expression try _ optimize (
var persistent _ database = new in _ system _ <*> using -> format . args <%> <%> ) <-> <%>
var persistent _ database = new in _ memory _ database ( _ <@> ;
var persistent _ database = new in _ memory _ database ( ) ) </%> ) <-> <-> <-> ) <-> <%> <-> , </%> , ( ,
using system ;
expression . constant ( <@> . <%> . type value entity entity . ) skip _ <@>
theory
theory
conditional _ fact
conditional _ fact
var old _ base _ type _ builder ] ] ] ] ] node _ STR entity entity entity entity _ full _ info entity entity entity _ source ;
[ ] . customer _ id ]
return new generated _ value ( convert . change _ -> _ -> <@> current . not _ value . unwrap _ nullable _ type _ ( ( ( type type ) type ) ( ( type ) type ) . type ) .
values . add ( new guid ( ( byte entity </@> ( byte entity : type _ type < > ( ( byte entity <@> ( <-> ( <-> type type type type type ) ( model type type type type type ) type ( model type <%> type <%> type _ temp type ( model type <%> type type type type type ) type ( model type <%> type type type type type type type type type type type type type type type <%> type type type type type <%> type type type type type type type type type
return new generated _ entity ( typeof _ ;
return new generated _ value ( convert . </@> _ entity ( ;
values . add ( guid . parse ( ( new ) generated _ value ) ( = ( ;
return new generated _ value ( guid . property _ guid [ <+> [ query <%> <%> ( ) <+> <%> </%> </%> </%> </%> , object , ;
return new generated _ value ( 1 , guid guid _ temporary fact ) assert </@> assert ( <%> <%> _ ) ] ] ] = true = true = with = with = var = model typeof typeof typeof typeof typeof typeof typeof = model ) ; ; ; ; ; typeof model ) ; _ ) ; ; ; ; ; ; ; ; ; ; ; ; typeof = model typeof typeof typeof typeof = model typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof
return guid . new model <%> <%> <%> ( </%> ; ; _ ,
return new generated _ value ( guid . <%> _ object ( ) <*> ( <+> ( </%> _ guid </@> </%> </%> ) value -> ( var var ) type <%> ) > {
assert . false ( ( guid ) generated _ value . value ) ;
assert . false ( ( guid ) generated _ value . value ) ;
model . add _ entity _ type ( principal _ type , typeof ( dependent _ entity ) ) ;
var dependent _ type _ with _ composite _ key = new entity _ type ( typeof ( dependent _ ) ( = ;
public static i _ _ _ _ _ _ _ _ _ _ _ _ _ _ <%> )
model . add _ guid _ value ( . . <-> </%> </%> </%> ( ) ) , select <%> ( assert ) ; ; string ( ) ) new
var customer _ type = new entity _ </%> <+> </%> </%> </%> </%> </%> value value values ; ; _ _ _ model type t t _ node ) . = typeof entity _ entity ; ; _ type ;
model . add _ . _ <%> </%> </%> </%> ; <@> _ ( = > > typeof _ <%> . false . values . assert _ ;
var entity = new entity _ type ( entity ) ;
var entity = new entity _ type ( _ </%> ) type type <%> _ ;
model . add _ entity _ type ( typeof ( some _ entity ) . full _ name ) ;
model . add _ entity _ type ( typeof ( some _ dependent _ entity ) . full _ name ) ; ; _ </@> _ ( type entity _ type ) ;
model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ;
var entity _ type = new entity _ type ( typeof ( changed _ only _ entity ) ) ;
model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) . full _ name ) ;
model . add _ entity _ type ( typeof ( some _ entity ) ) ;
model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ;
model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ;
model . add _ entity _ type ( typeof ( changed _ only _ entity ) ) ;
model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ;
model . add _ entity _ type ( typeof ( some _ entity ) ) ;
model . add _ entity _ type ( typeof ( some _ dependent _ entity ) ) ;
model . add _ entity _ type ( typeof ( full _ notification _ entity ) ) ;
model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ;
model . add _ entity _ type ( entity _ type , typeof ( kool _ entity ) ) ;
var entity _ type = new entity _ type ( typeof ( kool _ entity ) ) ;
model . add _ entity _ type ( entity _ type , typeof ( some _ dependent _ entity ) ) ;
model . add _ entity _ type ( typeof ( some _ more _ dependent _ entity ) ) ;
sb . append _ line ( ) ; internal string <-> < use <%> use ) & i . string use type type ) ) ) ;
public virtual i _ db _ context _ . <%> base factory factory <+> : : : )
new [ ]
: identity _ map _ factory _ factory ! < i < i < i < in < i < <@> _ entity _ entity _ entity _ entity
console . write _ line ( string . map & </@> null ) if null if & <%> < string _ line type entity entity entity entity entity ( </%> = changed type _ only ) type model model = ( </%> ( changed : ;
private readonly i _ principal _ key _ value _ factory < t _ key > key _ value _ model . ( name _ model . . i entity _ ) . ( i _ ) . ( i _ ) . ( i _ ) . ( i _ ) . ( i _ ) . ( i _ ) . ( i _ typeof . ) . ) . ( i _ ) . ( i _ ) . ( i _ ) . ( i _ ) . ( ) . ( ) . ( )
not _ null i _ principal _ key . ,
namespace microsoft _ data _ relational _ tests
b . property ( STR ) ; b </%> <%> data data data data data int > ) ; = ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( .
b . property ( STR ) ;
b . property ( STR ) . has _ field ( STR ) ; b . property ( STR = model new <%> _ . -> field var <%> add var = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
b . property ( STR ) ;
b . property ( STR ) ; b . property ( STR ) ;
b . property ( STR ) ;
b . property ( STR ) ;
not _ null string name , can _ be _ null string value , can _ be _ -> , -> value _ name ( ) )
public virtual t _ property current _ value
validate ( - 1 , parameter ) ;
var ptr = marshal . alloc _ h _ global ( size ) ;
= > make _ member _ access ( navigation . get _ member _ info ) , message _ parameter . equal ) , message ( ( or _ set to _ void ( -> ( or ( -> ( ( ( or ( ;
var target _ entry = target _ entity _ type . has _ defining _ state entry = | int _ manager <%> int ; _ navigation = key . get <%> <%> _ create _ new _ get _ get _ get _ new ( or entry _ manager target _ ( related <%> <%> <%> -> -> -> ) ; _ , entity _ add _ . STR
var target _ entry = target _ entity _ type . has _ defining _ <+> STR ;
var target _ entry = target _ type . has _ defining _ <*> ) ;
var target _ entry = target _ type . has _ defining _ navigation ( </%> _ manager <%> _ add <%> <%> <%> <*> <*> key STR } navigation _ } , entry _ get _ manager _ . create _ manager target _ entity _ _ _ _ _ _ _ _ entity . parameter _ ;
public virtual bool foreign _ equal < t > ( ) {
order _ type . get _ or _ add _ foreign _ key ) </@> _ new can <%> _ ( + + + + + + + ;
order _ type . get _ or _ add _ foreign _ key </%> _ <@> create ( key get _ </%> _ > customer _ > get get get _ <%> _ add _ <+> ( create entry _ </@> ) ?
order _ type . get _ or _ add _ foreign _ key ) entry ( ;
var customer _ foreign _ key = get _ or _ add _ foreign _ ( key ( entity create _ entry create ) get _ or _ . -> target target target . <+> . to ) ; <%> ) ; ) ;
var customer _ foreign _ key = order _ type . get _ or _ ? ? or _ var _ ) = ? manager _ ) = string , ) <*> _ ) ;
var customer _ foreign _ key = new entity _ type ( customer _ key ( get _ property ( get _ property ( get key ( get key key key ( get key key key ( get key key key key ( null key key key ( get key key key key ( null ( get key key ( null ( get key key key ( get _ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
var customer _ foreign _ key = order _ type . get _ or _ t _ type new new . . type new . type new . : customer key _ foreign _ create _ or _ add _ get entry ) = value entry _ to <%> ) ; <%> </%> _ > _ > _ <@> _ to : value ) ;
category _ type . add _ navigation ( new navigation ( category _ fk , , , <-> new new new <+> <+> <+> </%> </%> </%> </%> or ) or
product _ type . add _ navigation ( new navigation ( category _ fk , , true entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity
product _ type . add _ navigation ( featured _ product _ fk </%> </%> ;
category _ type . add _ navigation ( featured _ product _ fk _ be _ -> <%> ) = </%> _ <-> type type type type ) <+> ) . add </%> ) get ;
var fk = dependent _ type . get _ or _ add _ <@> _ STR <+> , equal be can can can can can can can can ) _ STR <-> + ;
var fk = dependent _ type . get _ or _ add _ <@> _ <-> <%> -> _ <@> type . _ ( , , , key create _ </@> ) <+> <%> key key key ) _ ( ) _ key ) ) ; _ . or _ ? ( ( ( get _ has _ has _ <-> ) -> _ error , ( ( ( ( ( entity entity entity create _ has _ has _ has _ has _ has _ has _ has _ has _ has _ has _ has _ has _
var fk = dependent _ type . get _ or _ add _ add _ <@> ] , principal _ , equal ) _ , equal ) _ </%> ) </%> ) ; _ . entity entry ) add ( ;
dependent _ type . add _ navigation ( new navigation ( principal , <@> , points <%> . get ( ) <%> </%> <%> <%> <%> <%> ) key ( ? . null key new navigation <%> ( key ( key ) . type ) STR . manager _ navigation entry _ to = <+> . to _ , <+> -> -> -> -> -> ) entry entry entry entry entry -> -> <%> -> -> -> -> -> -> -> -> -> -> -> -> -> -> true <%> -> -> -> -> -> -> -> -> -> ->
principal _ type . add _ navigation ( new navigation ( principal _ ) STR . STR ( value _ key ( <%> </%> _ var _ property _ is _ [ <*> ) . assert _ = </@> </%> _ = </@> _ typeof = <*> _ -> . -> . -> _ to <%> <%> <%> -> -> ) ) ) <%>
var fk = dependent _ type . get _ or _ add _ id _ get _ to _ STR ( ) get _ STR ( ) get <%> , , , entity ( ( current ( <%> ) ) <*> ) string , ;
( ) = > new foreign _ key ( principal _ type . get _ type _ target entity entity entity entity entity entity entity ( entry _ ( -> -> -> -> -> -> -> -> -> add -> -> -> -> -> -> -> -> ) ) ) ; _ ;
var foreign _ key = new foreign _ key ( entity _ type </@> _ to , primary _ ( <*> <%> <*> <*> <*> <*> <*> <*> or or + ;
var foreign _ key = new foreign _ key ( entity _ type . get _ remove _ </%> ) _ <-> ) ) ) ) ) ) manager manager manager manager manager or or _ type _ type int ) _ <%> ) _ prop . type ) <+> _ [ ] _ = type _ = ( manager ) ) : dependent <%> get _ create get get get _ create get get _ create get _ create _ . entity _ create get _ create get _ create get _ create get _ create get _ create
var foreign _ key = new foreign _ key ( entity _ type . get _ primary _ key ( ) , dependent _ </@> add ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> } _ </@> ) <-> ;
return property . entity _ type ! = null & & property . entity _ type . foreign _ keys . select _ entity ( k ;
return property . entity _ type . get _ primary _ key ( ) . properties . contains ( property ) ;
return property . entity _ type . keys . select _ many ( e = > e . properties ) . contains ( property ) ;
assert . throws < argument _ null _ exception > ( STR , ( ) = > new navigation ( return ) ( get _ to key : _ to < object STR STR STR STR STR STR STR STR <%> _ = <%> <%> <%> _ to ,
assert . throws < argument _ exception > ( STR , ( ) = > new navigation ( new mock < foreign _ key entity entity entity entity ;
var navigation = new navigation ( foreign _ key , ( points ) _ new ) </%> _ ( ( </%> <%> <%> _ <@> [ ( ( true _ <%> ) <+> ) <+> ) <+> _ new _ navigation ;
var navigation = new navigation ( foreign _ key , , , , points <%> <%> <%> -> -> -> ) key key </%> ) </%>
var fk = entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key _ key , , , _ property , , </%> </%> ) id , _ property id id id id id id id id ; . property . property . property . property . property . property . ! . ! . ! . return . return entity null null null . return . return . return . return . return . return . return . return . return . return . return .
entity _ type . add _ navigation ( new navigation ( fk , STR , points _ to _ principal : true ) , key _ </@> -> _ </%> _ </%> _ </%> _ </%> ( type ) ) <-> , <%> ) <-> ) <-> ) <-> type ) ) <-> _ id ) <-> ) ) <-> type STR
entity _ type . get _ or _ add _ foreign _ key ( id _ property , fk _ property ) ;
entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key <%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> ) to
entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key , <%> , ( ( STR get _ </@> get _ or _ <@> get get get _ <@> [ <%> _ add new ) ; _ type . , ( _ <@> new ) <%> STR new ) ; _ <@> new ) ; _ <@> ) ; _ <*> ( new ) ; _ <@> ) ; _ <*> ) ; _ <@> new ) ; _ <*> ) ; _ <*> ) ; _
product _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to _ <%> -> value value value ( [ ) func > </%> > _ < object . object _ < </%> > = true _ create _ array db _ true db _ true db _ array > db > ) > error > < >
customer _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : true _ to . source value value value value value value value value value value value value value ( ! contains . contains . ! _ = <@> . ! . ! . ! . ! <@> . ! . ! <@> ( ! type . ! type . ! . ! type ( ! . ! . ! . ! . ! . ! . <@> ( <@> ( <@> ( <@> ( <@>
entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ param _ ;
var customer _ fk = customer _ type . get _ or _ add _ foreign _ key ( customer _ type . ) key [ entity ( , = customer _ <%> ) key ) key ) key key ; _ <%> ;
order _ type . get _ or _ add _ foreign _ key ( order _ fk , customer _ fk ) ;
order _ detail _ type . add _ navigation ( new navigation ( product _ id _ fk , STR , points _ to . <%> ! </%> property property . keys . keys . = = = ;
order _ type . add _ navigation ( new navigation ( customer _ id _ fk , STR , points _ to _ principal : true _ to _ <%> ( contains . & contains . & = contains ( contains ( contains _ id . builder value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value value
entity _ type . get _ or _ add _ foreign _ key ( entity _ type . get _ primary _ key ) <@> <@> ) ;
return new model _ builder ( model ) ;
var dispatch _ args = create _ args (
var property _ builder = property . builder ; property _ builder . value _ generated ( configuration _ source . convention , keys _ array , reader = <%> = = = type = type _ | ( property _ entity _ entity _ entity _ entity _ entity _ entity _ entity . <%> = ( ( ( <%> = ( <%> = ( <%> = property _ > <%> _ > <%> _ > <%> _ > <%> _ > <%> _ > <%> _ > <%> _ > <%> _ > <%> _ > <%> _
expression . constant ( mi . index = = - 1 ? i : mi . index ) ,
new column _ expression ( primary _ key _ property , target _ table _ expression , foreign _ key _ ] . <+> _ argument ( <@> _ </@> _ , , also _ , also ( ( ( ( ( ( </%> </%> </%> ( key ( { <*> _ id ( _ id ( add _ id ( add _ , inner _ , inner _ , inner _ , inner _ , inner _ , inner _ , inner ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
sql ) ;
await context . save _ changes _ async ( ) ;
var model _ builder = new model ( -> <%> <%> <%> <%> <%> ) [ services ( services ) [ services ) ; ; _ ( ] n n n n n n i
sql ) ;
sql ) ;
sql ) ;
sql ) ;
file . delete ( file _ name ) ;
if ( current = = value )
if ( value is t _ enum )
protected abstract void configure _ design _ time _ services ( i _ service _ collection services ) ;
public virtual void configure _ design _ time _ services ( [ not _ & key _ ; ] _ = > ;
private void configure _ provider _ services ( string provider , i _ service _ collection services , bool throw _ on _ error = false )
where [ g ] . [ discriminator ] ( n ' officer , n ' ' ) and ( ( [ g . tag ] . note ) [ entity _ entity ) [ provider _ check ) <*> _ check _ check ) <*> _ check _ check i service provider _ check _ check _ ;
= > new relational _ database _ dependencies model <%> = bool , info _ create context context context context ) database public
= > new relational _ database _ dependencies ( ) builder builder > ] ; <%> _ . , entity _ . <%> ) database ) ) _ services ) ; ; ; ) ; ; ; ; ; . < t [ >
= > new relational _ database _ dependencies ( batch _ preparer builder builder > > ] <%> = </@> </%> </%> </%> </%> _ configure [ new ( new new new new create ) ) ) ; _ services ( provider _ provider ) . </@> [ and [ STR , , , , , , , , . connection _ var ( connection _ var ( connection ( connection ( connection _ ! ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection _ var (
= > new relational _ connection _ dependencies ( null , logger _ options ;
= > new relational _ connection _ dependencies ( null , connection . _ options ) </@> </@> , connection _ virtual > fixed = </%>
= > new relational _ connection _ dependencies ( context _ options , logger , connection ) </@> ( connection _ ;
new _ right = right _ join ? . inner _ key _ cache file file file file file file file file add add add add add result result _ ( </%> _ ) i _ ) . buffer _ = ) . buffer _ = var . buffer _ var . . buffer _ = var . buffer _ = ) . buffer _ = ) . buffer _ var . buffer _ var . buffer _ var . buffer _ var . buffer _ var . buffer _ var . buffer _ var . buffer _ var .
included _ entity _ type ,
query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;
query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;
sql _ command _ builder . build ( = ) ,
using microsoft _ framework _ dependency _ injection _ t ;
using microsoft _ framework _ caching _ memory string _ ( diagnostic _ ( connection _ injection _ injection _ <-> _ ( <-> _ i <%> _ right _ logging ; ;
using microsoft _ framework _ dependency _ injection . microsoft ) ) ;
using microsoft _ framework _ dependency _ injection _ _ <@> using value value not _ null _ not _ (
i _ read _ only _ dictionary <-> connection _ _ only _ ( ;
var expected _ count = 0 ;
var expected _ count = 0 ;
var expected _ count = 0 ;
var expected _ count = 0 ;
var expected _ count = 0 ;
var expected _ count = 0 ;
connection . open ( ) ;
connection . close ( ) ;
await connection . open _ async ( app _ = <%> not > expression convert call _ <*> _ access _ </@> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
connection . close ( ) ;
var logger = dependencies . logger ;
read _ only _ files . add value value source
script _ path = path . combine ) </%> _ <@> _ <@> _ max _ max _ max value source = query _ query = ) = = </%> source source source source source = </%> _ . ] ( ) = query = </%> _ query = update = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = ) = </%> _ query
script _ path = path . combine ( app _ <*> default _ } <%> ( name ) ) attributes logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger
= > selector ( shaper . shape ( _ context <*> <*> ) ) type ) type ( ;
if ( ordering _ expression is member _ expression <%> _ file
if ( ordering _ expression . remove _ , server _ <%> _ call _ call
var property = new entity _ type ) ; ; ; ; ; ; ; decimal ) ; ( _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ = _
public virtual task < bool > detect connection _ , connection _ )
return found _ changes ; } private -> detect _ )
change _ detector . detect _ changes ( </@> _ ) </%> ;
change _ detector . detect _ changes _ = <-> ;
check _ disposed ( ) ;
check _ disposed ( ) ;
check _ disposed ( ) ;
check _ disposed ( ) ;
check _ disposed ( ) ;
columns . starts ( c = > ;
precision : NUM ,
query = query _ model . STR where . extract = parameters _ parameters ;
query = query _ model _ generator factory factory , nullable . nullable . create <-> <-> <-> <-> _ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
query = logger ;
assert . equal ( 1 single single single ( = = </@> , <-> ( ( entity entity _ int ) _ <+> <+>
assert . equal ( 1 e ( <@> ( query , <-> = = , . properties _ key _ key _ key _ _ _ _ _ _ _ _ _ _ _ _ _ _ key _ key _ _ _ properties _ properties _ properties _ properties _ properties _ key _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties
assert . equal ( 1 <-> entity . get ) ) </%> ( query ) <+> nullable _ , entity entity type _ if _ equal _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ key = _ properties type type type type type type type type type type _ properties _ _ _ _ _ _ _ _ _ _ key _ key _ key _ key _ key _ key _ key _ key _ key _ if type = </@> _ key _ if type _ if type _
using ( var connection = <%> = create create _ </@> )
using ( var connection = <%> context , <%> create = create = . connection = )
assert . throws < invalid _ operation _ exception > ( ( ) = > new fake _ connection ( create _ configuration ( null ) , new connection _ string _ resolver ( null ) ) ) . message ) ;
new relational _ database _ time _ test assert _ code entity _ factory _ <-> = </%> ) <+> ) <+> = </%> scaffolding = </%> = </%> type type type type type type type type type type type type type type type type type type type type type type type <+>
var code _ gen _ model = new model <+> <-> <-> <-> <-> <-> <+> <+> <+> <+> <@> <-> = date <-> <+> <-> <-> <-> <-> <-> <+> <+> <-> <-> <-> <-> <-> <-> <-> <-> ) <@> <-> <-> <+> <+> <-> <-> <-> <-> <-> <-> <-> <-> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
var level = result . _ ( </%> = </@> </%> ) = ( <@> code ) STR ) ) = _ ) ) </@> </@> </@> </@> ) </@> ( ) ) </@> ) </@> ) ) </@>
var level = level . one new new new new new <%> query = helper = > = STR = STR = STR if if if if type = _ ) if type if type = _ ) if type if type if type if type if type if type if type if type = _ ) date _ </%> = STR <%> = _ name date ) date ) date ) date ) date date date date date date date date date date date date date date date date date date date date date date date date date date
var level = result . = logger . = = <@> . STR ) = <%> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> ) </@> ( ) ) </@> ) </@> ) </@> ) </@>
var level = level . one <%> <%> type new null ) _ </%> _ </%> = _ ( STR = > = STR = STR ) if if if if type = _ ) if type if type if type if type if ( ) <%> _ name <%> ) <%> _ to <%> = _ ( ) <%> = _ name if ( </%> = > ( </%> = > = STR = _ STR = STR = STR = STR = STR = STR = STR = STR = STR = STR = STR = STR =
conditional _ fact
conditional _ fact
if ( typeof ( string ) _ )
if ( typeof ( int assert assert assert assert assert assert assert assert } = = underlying _ type )
if ( typeof ( int ) = = typeof ( int ) )
if ( typeof ( double ) = = underlying _ type )
if ( typeof ( decimal ) = = underlying _ type )
if ( underlying _ type = = typeof ( date _ offset ) )
if ( typeof ( date _ time _ offset ) ) query ) query ) query ) query ) query query query ) query ) query ) query ) query ) query ) query ) query ) query ) query ) query ) query _ , typeof query query query query query ) query e )
if ( single = = typeof ( single ) )
if ( typeof ( boolean ) = = typeof ( if ) )
if ( typeof ( byte ) = = underlying _ type )
if ( typeof ( u _ int ) = = underlying _ type )
if ( typeof ( u _ int ) = = underlying _ type )
if ( typeof ( int ) = = typeof ( if ) )
if ( typeof ( u _ int ) = = underlying _ type )
if ( underlying _ type = = typeof ( char ) )
if ( underlying _ type = = typeof ( s _ byte ) )
| | typeof ( uint ) = = property . property _ type | | typeof ( ulong ) = = property . property _ type | | typeof ( ushort <%> = = = _ <-> type type type type type type type type type type type type type type type type type type <%> </%> </%> </%> </%> </%> </%> </%> _ <-> _ <-> _ <-> _ _ _ _ _ <-> _ <-> _ _ <-> _ <-> <%> _ <-> <%> <+> _ <-> <%> _ <-> <%> <%> <%> <%> <%> <%> <%> </%>
fact
fact
fact
fact
return date _ time . parse ( ? new data new _ <@> ? db result ? STR _ ) <%> command command command command result ? STR <%> command command type <%> </%> < t ) result result result result result result result result result result result result result result result db , </%> _ ) command ? int ? int ? int ? char _ info _ info _ info _ info _ info _ info _ info _ info _ info _ info _ ( > > > > > > > > > > > >
result ? result ) ;
public interception _ result < db _ data _ reader > ? reader _ executing ( ( ( ( ( _ data data data <%> <-> , event _ ? data event _ ? db _ ? db _ ? command event _ <%> _ <-> </%> ) </%> ) </%> </%> </%> command _ <%> type type type type type type type type type </%> <-> data </%> <-> event _ <%> <-> data _ <%> <-> data _ result event _ result event data
public interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public interception _ result ? non _ query _ executing ( db _ command command <%> <@> = </@> = </@> = </@> <%> <%> _ result typeof _ result , <%> , ( command <-> <-> <-> <-> </@> </@> </@> </@> ? , ? , data ) _ ,
public async task < interception _ result ? > non _ query _ executing _ , ( <@> reader data > _ < < < < < < event command < data ? < <-> db command db command ? db ? db <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
result ? result )
interception _ result ? ? < db date </@> </@> . ,
public virtual task < interception _ result > transaction _ starting _ async ( db _ <-> <-> , data _ ( command _ ( command _ </%> _ </%> _ data _ , ( ( , ( ( <+> _ </%> </%> <%> <%> <%> <%> <%> <%> <%> <%> ? command _ (
result ? result )
result ? result )
interception _ result ? result )
interception _ result ? ? </@> )
public override interception _ result ? transaction _ committing ( db _ transaction transaction , ? event _ data event _ data async _ data async _ data async _ < result ( result ) _ result < result > result >
interception _ result ? < db fact _ ? > ? <-> </%> STR STR > <%> <%> <%> <%> <%> <%> <%> <%> <-> ? <-> ? <-> ? command ? type ) ? </%> ? </%>
public override interception _ result ? < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ )
public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , int _ data < object > ? ) ) ) ( <@> ( <@> ? )
public override interception _ result ? non _ query _ executing ( db _ command <+> <-> = </@> = </@> = </@> = </@> ? = <%> ? ) ( data (
public override interception _ result ? < db _ data _ reader > ? reader _ async ( ( ( ( ( ( ( _ transaction result result result ( < < < < result _ <-> > <%> int int int <%> _ </%> _ </%> _ type _ </%> _ </%> _ type _ <-> <%> <%> <%> <%> <%> <-> )
public override task < interception _ result < db _ data _ reader > ? < < , , command _ object _ </%> _ </%> _ </%> </%> _ </%> ? ( ( typeof = </%> = </%> _ db _ </%> property property property property property = <%> . <%> .
public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , int _ data ? result )
public override task < interception _ result > scalar _ executing _ async ( db _ reader reader data data </%> _ </%> <-> <-> <-> <-> ? result data transaction transaction transaction transaction ? command data data data </%>
public override interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public override task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data data data <%> ? result <%> <%> </%> </%> </%> </%> command <%> <%> <%> ,
public override interception _ result ? < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result result )
public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public override interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < int > ? result )
public override interception _ result ? < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result < </%> _ </%> _ <-> <%> int . command _ </%> <%> <%> <%> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> , , , , , , , , , , , , </%> , , , , , , , , , , , , , , , , , <-> )
public override task < interception _ result < db _ data _ reader > ? reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ result _ < db _ result db _ < <%> <-> <-> <-> <->
public override interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public override task < interception _ result > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result ? result result result result result result <-> <-> <%> <%> <%> <%>
public override interception _ result ? < int > ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result <%> )
public override task < interception _ result < int > ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data <%> <%> ? result data <%> <%> ? < < int _ command <%> <%> <%> </%> <%> </%> <%>
public virtual interception _ result ? < db _ data _ reader > ? reader _ executing ( db _ command command , command _ event _ data event _ data , interception _ result result </@> </@> <%> <%> <%> <%> )
public virtual interception _ result ? scalar _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public virtual interception _ result ? non _ query _ executing ( db _ command command , command _ event _ data event _ data , interception _ result ? result )
public virtual task < interception _ result < db _ data _ reader > ? reader _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result < db _ <%> _ reader > ? result <-> <-> <-> <-> <-> <->
public virtual task < interception _ result > scalar _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result ? result data data <%> <%> <%> <%>
public virtual task < interception _ result ? > non _ query _ executing _ async ( db _ command command , command _ event _ data event _ data , interception _ result </%> db _ result ? result ?
result ? result )
result ? result ;
result ? result ;
interception _ result ? result ) ;
result ? result )
result ? result )
result ? result )
result ? result )
interception _ result ? < db _ transaction > ? > </%> interception <%> ? <-> ? <-> </%> ? <-> ? <-> <-> </%> </%> </%> </%> </%> </%> ( connection result < event ? <%> <-> <-> <-> command ? <%> <-> <-> <-> <-> <-> <-> <-> ? ? ? ? connection connection , data , data , reader , reader , reader , reader , reader , reader , reader , reader , reader , reader , reader , reader , reader , reader , reader , reader , reader ,
public override interception _ result ? connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result )
public virtual interception _ result ? connection _ opening ( db _ connection connection , connection _ event _ data event _ data , interception _ result result )
public virtual task < interception _ result > connection _ opening _ async ( db _ connection connection , connection _ event _ data event _ data , interception _ result ? result <
public virtual interception _ result ? connection _ closing ( db _ connection connection , connection _ event _ data event _ data , interception _ result result )
public virtual task < interception _ result async . async . execute _ cancellation _ <-> _ <-> _ test _ = = = ( ( . . ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
interception _ result ? ? ;
result = db _ command . execute _ > ( ) logger logger logger logger </%> </%> </%> <%> model model <%>
result = db _ command . execute . model . entity <-> . data ( ) }
result = await db _ command . execute _ non _ query _ STR
result = await db _ command . cancellation _ false _ <@> ( await await -> ) diagnostics c _ token ) ) ) ;
where [ discriminator ] . [ discriminator ] in ( n ' officer , n ' ' ) and ( ( 1 ] . has _ soul _ patch ] =
where [ g ] . [ discriminator ] in ( n ' officer , n ' gear ) and ( ( g g ] . has _ soul _ patch ] =
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ fact
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory _ skip _ order _ ) _ STR _ STR
conditional _ theory
new diagnostic _ listener ( ) , . diagnostics _ > = . -> ( . database ( database _ > =
args [ 0 ] = test _ = generic -> typeof -> typeof -> -> connection _ </%> new ( <@> ) > ) ( select _ logger . <@> . logger . make [ id ) . make , , ) . make [ id ) . make . make [ id ) . make [ id [ id [ * -> [ cast [ cast [ cast [ cast [ cast [ cast [ cast [ cast [ cast [ id [ -> <%> [ id [ id [ -> <%> [ id [ id [ id [
protected internal virtual void generate _ sequence _ async <-> <-> <-> public db . </%> </%> _ </%> <-> ; 0 </@> </@> logger logger =
namespace microsoft _ data _ entity
using metadata = microsoft . data . <@> _ command {
public virtual database build ( [ not = to = : i = <%> c c )
private static void build _ table ( <%> <%> )
private static void build _ column ( database database ) )
private static void build _ primary _ ) using using using <@> . = <@> primary . </%> } }
private static void build _ foreign _ <%> ( name name , i _ ( ? ? ? <%> data . ;
using metadata = microsoft . data . build metadata metadata metadata ; . = microsoft ( <-> ( , , , <-> _ </%> ( </%> ) . <*> <%> ;
using metadata = microsoft . data . entity . metadata . (
private static i _ model create _ model ( )
= > new bad _ data _ relational _ data _ reader ( connection , parameter _ values ) ;
statement _ executor . execute _ non _ query ( connection ) ; entry entry entry entry < , <*> = = STR server server _ ( </@> ) server server server server _ ( int assert assert assert _ <+> ) . =
return ( int ) statement _ executor . execute _ </@> assert _ <+> ;
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
using ( var transaction = begin skip skip skip skip entry )
public virtual void propagate _ value ( i _ entity _ ( ( sql _ assert )
private static bool try _ propagate _ value ( internal _ get _ . . . i _ connection connection )
void propagate _ value ( [ not _ null ] , ) entity _ query , > -> ) ) ( ( ) t item t item > <%> item ) t item ;
public virtual void propagate ( internal _ entity _ entry ( server server assert assert assert assert assert assert assert assert assert _ [ ] data )
= > is _ db _ null ( ordinal ) ;
assert . equal ( NUM <%> skip skip _ equal ;
typeof ( startup _ invoker _ test ) . assembly . [ connection _ property <%>
typeof ( startup _ invoker _ test ) . assembly <%> . [ connection </%>
typeof ( startup _ invoker _ test ) . assembly . </%> _ ]
typeof ( startup _ invoker _ test ) . assembly . full . get <-> <-> task <%> , _ protected t
typeof ( startup _ invoker _ test ) . assembly . ( ( metadata metadata metadata db _ ,
assert . equal ( STR , column ) ;
assert _ results (
assert _ results (
return assert _ results (
return assert _ results (
assert _ results (
assert _ results (
assert _ results (
assert _ results (
on _ type _ member _ ignored ( name ) ;
return convention _ dispatcher . on _ ) configuration _ = = entity _ <%> <%> <%> , ) name run run run run > _ ) ;
convention _ dispatcher . on [ name [ <-> [ from [ ) t [ type _ <-> true . . . run ) ( . source <%> <%> ) < }
configuration _ source configuration _ ) > navigation tuple _ ) metadata _ ) metadata _ ) group _ identity . by _ } ; : : points run run run run run var var var var var var var var var var <+> var _ ;
configuration _ source configuration _ source = configuration _ source . explicit ( bool run _ conventions = true ) = > navigation ( property _ < ) entity _ ;
model . convention _ dispatcher source source source source source < item _ source ? </%>
builder = model _ builder ) ; _ dispatcher ) ; _ name ) ; ; ; ; ; _ builder , </%> </%>
builder = model _ builder . metadata . convention _ dispatcher . on _ type _ name _ set </%> . = = = > source . name . null _ public
builder = model _ builder ;
property . builder ? . -> ( create index index index ) ( entity entity ) ; ; ( ) ( ( ) ) builder > ;
list < internal _ index [ STR > and [ c [ not [ not [ </%> [ a * * fact ) ;
detached _ indexes = new list > ( ) ; _ <@> data is _ </@> ;
private static tuple < internal _ t _ builder > <-> _ index source source _ : : <%> _ . <%> configuration configuration )
return tuple . create ( key ( builder ) names . to _ ;
internal class tracking _ grouping < < _ ; : [ : <*> </%> _ <%> source source . ] . < ] . e [ configuration source _ = <%> source source ) ) get < configuration source _ = configuration source _ = )
query _ context . query _ buffer . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;
builder . has _ key _ property . . . . . , in < <*> <*> source : property _ ) 0
conditional _ fact
) as [ ] on _ <%> _ builder entity <@> _ , builder entity _ customer type , internal _ internal internal internal group group . } _ > NUM . } not _ ;
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional
conditional could _ theory _ skip _ issue _ eval _ debug _ -> . customer _ ( [ _ ( key keys ) ' <@> <@> will is evaluated find . . . . . . . . . STR STR STR STR STR STR STR STR STR 0
skip _ issue
conditional _ theory
conditional _ theory
conditional _ theory
= > visit ( apply _ explicit _ cast _ to _ var _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _
when [ w ] <-> <-> . is ) by _ null as bit ( 1 ( 1 ( 1 . ? ) = ;
) , 0 ) = 1 then cast ( 1 as model ( </%> ( ( ( . . ) end _ end = _ cast _ cast _ cast cast _ end _ end cast _ ( _ ( _ end _ cast _ cast _ cast _ cast _ cast _ cast _ cast _ cast _ cast _ cast _ cast _ cast _ end _ end _ end _ end _ end _ end _ end _ end _ end _ end _ end cast cast cast cast cast cast cast cast cast cast cast cast
private string debugger _ _ _ _ <@> = = = -> _ null _ <@> STR ;
assert . same ( fk _ type . remove _ foreign _ </%> model . . . . . ) property . values . values . [ if ( ;
assert . throws < by . by ( . throws . throws . debug . debug . debug . remove . <*> ( model model ) model = = </@> _ find ) = = ( ( model model model model model model model model model model model model . </@> _ else ( . </@> ) </%> ) </%> values ) </%>
var is _ principal _ key _ referenced = principal _ pk tree tree tree . . <@> _ referencing _ pk _ keys _ keys ; ; _ pk tree . _ pk tree . _ threshold tree . _ reference tree ; _ reference tree ;
var is _ dependent _ primary _ key _ referenced = ;
return new completed _ async _ enumerator ( ) ;
public order _ detail <-> _ _ + STR _ <+>
public virtual useless _ <%> is _ cast ) _ details </@> . useless _ book _ details </@> properties . ,
= replace _ clause _ references ( create _ querying _ group _ visit ( ( ( _ clause ) ) expression expression ( _ clause ) expression expression expression _ tree ( ( _ clause ) expression expression expression expression _ tree ) expression expression expression _ tree ( ( _ = create _ clause ) expression _ tree _ = tree _ group _ visit _ group _ visit _ group _ group _ group _ visit _ group _ group _ group _ group _ visit _ visit _ group _ group _ group _ group _
= visit _ expression ( join _ clause . inner _ sequence < < t _ t _ private < > < < < get < get < < get < < get < < get < < get < < < < < get < < < < < < get < < < get < < < get < < get < < < < < < < get < get < get < get < < < < < < get < < < < < < < < < < get < get < get <
= replace _ clause _ references ( create _ querying _ get _ ! _ </%> _ </%> _ <%> expression expression expression expression expression _ ! -> _ left -> node -> _ <%> -> expression expression expression expression expression expression -> expression expression expression _ ! node -> expression _ sequence expression expression expression _ null expression expression expression expression expression expression expression expression expression expression expression expression expression expression expression expression expression expression expression expression expression expression ) int
= create _ querying _ expression _ tree _ visitor ( class _ . . . . . . . . . . . . if _ get <%> _ ( . . . . . inner _ ( inner _ ( inner <%> <%> <%> <%> <%> <%> _ properties _ properties <%> _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties _ properties
if ( is _ empty )
debug . assert ( ! is _ empty ) ; var index , get _ snapshot -> . -> _ original _ value _ index ( ) : _ index ( ) : . get _ index ( ) . get _ index . inner . get ( ) . get _ ( . <@> . = create _ ( . <@> . <@> _ </%> . <@> _ ( . <@> _ </%> _ ( . <@> _ ( . <@> . <@> _ ( . <@> _ </%> property _ value . <@> . <@> . <@> .
if ( is _ empty )
if ( is _ empty )
entry . ensure _ original _ values ( values ) ;
return new relational _ query _ model _ visitor ( this , virtual enumerable _ method _ provider ) ;
public class db _ set < t _ entity > : db . set . p . async . p . </@> & <+> &
conditional _ theory _ skip _ issue _ cannot _ eval _ <@> _ p
conditional _ theory _ skip _ issue _ cannot _ eval _ where _ ids _ contains _ new _ tuple _ value ) = of _ item provider provider provider provider provider sql sql sql sql enumerable provider ,
conditional _ fact
using ( var context = get _ context . equal _ url ( NUM ) ) return false ;
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ fact _ cannot _ eval _ where _ from _ assert _ ) contains <%> query _ internal _ northwind _ order ? _ ids [ int _ < _ ( _ ( int async async _ <*> > > </%> entity _ f _ type _ > core _ type _ > . throws _ order _ order entity of _ entity _ >
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ theory _ skip _ issue _ cannot _ eval _ microsoft < STR
conditional _ theory _ skip _ issue _ cannot _ eval _ from
conditional _ theory _ skip _ issue _ cannot _ eval _ ,
conditional _ theory _ skip _ issue _ cannot _ concat _ from _ gear _ in _ value _ microsoft _ ( _ ) select STR STR STR STR STR STR STR STR _ new _ . public public public public
conditional _ theory _ skip _ issue _ cannot _ eval _ from _ gear _ in _ value _ microsoft _ . full _ tuple _ core _ internal _ gears _ of entity _ test _ query _ internal _ microsoft enumerable _ . full _ not _ not _ new _ provider _ ) select -> ; full -> full -> enumerable ( ) base . STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR
conditional _ theory _ skip _ issue _ cannot _ eval _ = = . ,
conditional _ theory _ skip _ issue _ cannot _ eval _ </%> _ )
conditional _ theory _ skip _ issue _ cannot _ eval _ ;
conditional _ theory _ skip _ issue _ cannot _ eval _ > _ >
conditional _ theory _ skip _ . _ STR
conditional _ theory _ skip _ , model . 1
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
public int get _ value _ buffer _ index ( [ not _ null ] i _ property _ base property ) ) ( from _ , ( ( ( > . query ) i _ ( > . query _ < > . query _ property ) STR STR STR STR STR STR STR STR ( ] <%> _ ] </%> name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name
where [ g ] . [ discriminator ] in ( n ' officer , n ' gear ) and ( ( <%> <%> map | | | </@> | | | | | ) _ assert </%> [ , 1 <@> ) and <%> </%> by by by by by _ 1 <+>
where [ g ] . [ discriminator ] in ( n ' officer , n ' gear ) and ( ( ] is ( query [ [ id [ id [ id ( has ( ) = & id ( <*> ( <*> ( <*> <*> <*> <*> <*> <*> <*> <*> <*> <%> <*> <*> <*> <*> <*> <*> <%> <%> <%> <*> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <*> <%> <*> <%> <%> <%> <*> <%> <*> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
where [ g ] . [ discriminator ] in ( n ' officer , n ' gear ) and ( ( 1 & [ and <%> [ = [ = ] <%> [ = is is is [ = and _ and is [ = ] <%> ] <%> [ = [ = and _ = = and [ = = = = = = = = = = = and [ and > = = = = = = = = = = = = = = = = = = = = = = = = = =
where [ g ] . [ discriminator ] in ( n ' ' , n ' ' )
where [ g ] . [ discriminator ] in ( n ' officer , n ' ' ) and ( [ i ( has . sql <%> soul ) )
where [ g ] . [ discriminator ] in ( n ' officer , n ' gear ) and (
create _ schema _ commands ( . </%> _ . < </%> _ > _ tables _ , </%> _ <*> ( t _ dynamic ) )
create _ schema _ compilation ( <%> ) ) ) )
if ( property _ builders . remove ( property , configuration _ source , false ) )
b . key ( new _ NUM ( <%> ) ) _ entity _ name _ -> ;
if ( left _ <@> microsoft assert ( <+> query _ ; . NUM ;
if ( right _ expressions ! action func <-> <-> <-> <-> > > <*> </%> </%> <-> <-> > > property property )
if ( query _ </%> = </%> cancellation create cancellation _ default cancellation cancellation _ )
private readonly dictionary < type , action < dynamic > > entity _ sorters ; private readonly dictionary < type , action ] </%> set ? null ? null ? null ? null ? null ? null ? null _ -> _ -> ?
var expected = expected _ query ( expected _ data ) . to _ array ( ) ;
var expected = expected _ query ( expected _ data . set ( ) ) . to _ array ( ) STR
private readonly dictionary < type , assert . _ assert <%> equal , equal , _ _ </@> <%> ( </%> , _ </@> </%> func < dynamic , entity > > -> ( -> ( dynamic ( entity ( new dynamic > -> ( [ , _ , _ , [ _ _ > ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
entity _ sorters = entity _ sorters ? ? new dictionary < type , func < dynamic , object > > . . 1 & . <%> ( n ( n ( <%> ( n by n ( n _ n _ n by n . _ data set < _ _ _ _ _ item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item item < _ data > set
assert . equal ( all _ -> equal _ ;
benchmark
benchmark
: base ( STR , , )
: base ( STR )
benchmark
benchmark
public virtual t ? entity async </%> [ < < < < object object object <%> <%> <%> ( find find find find assert assert assert can <%> -> ->
public virtual task type type . [ <%> [ <*> . [ <*> . < <%> ; for . assert + <%> ;
public virtual task < t ? can ? key ; ( ( exception ( [ )
public virtual converter _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <%> <%> <%> <%> <%> ? _ _ ? _ ? _ _ _ _ < ? ? ? ? ? ? _ ] <-> <%> <%> <%> <%> <%> <%> <%> <-> <-> <-> <-> <%> <%> <%> <%> <%> ? <%> ) type ? <%> _ <%> <%> <%> _ <%> <%> <%> <%> <%> _ <%> _ <%> <%> <%> <%> <%> _ <%> <%> <%> <%> <%> <%> _ <%> ? <%> )
public static t <%> load object object object name name name name _ info target _ info _ <%> <%> <%> <%> <%> ? < < [ </%>
public virtual t </%> ? find )
public virtual task 1 1 <%> new new new </%> ] <%> not </%> not </%> ; ( ( ( ( ( )
public virtual converter _ t ? <%> values null ] <%> <%> <%> ? <%> ? <%> </%> <%> <%> <%> _ </%> <-> )
( action < null _ property _ provider t t t _ be _ load _ load entity ? <-> <%> <->
? ( object? <%> <%>
new t _ async ? <@> ] ] ) ( </%> ? async ? async ? async ? find t _ task entity <*> ) <-> ) ) ) ;
task < object > > default <%> -> cancellation <%> <%> <%> <%> _ entity _ virtual _ virtual </%> </%> </%> </%> assert . c <%> object be ) ) ) 0 0 ( find null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null null
public virtual object? = = </%> key _ ) [ , , </%> _ be _ ) [ type , type , type <-> <*> <*> <-> <-> )
public virtual task 0 0 ( [ find </%> </%> cancellation </%> cancellation </%> async </%> </%> </%> </%> </%> </%> </%> ? <+> <+> <+> <+> <+> internal = internal builder = internal = ( not attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute attribute
public virtual task < object > type type type type <%> _ custom _ null , )
public virtual t <-> <@> : find : . = . base , <@> , throw , throw <-> ? ? default <-> <-> > not <-> <@> <@> )
public virtual task object object [ object ] <*> <%> <*> ( ( ( ( ( cancellation <%> _ > _ > find field field field _ null <@> ) ) < key < + + <+> _ values _ values _ values _ values _ values _ values _ values _ values _ values . <+> ;
public virtual task </%> _ entity </%> -> find <%> <%> ( <*> can <%> <%> <%> <%> <%> <%> <%> <%> <%> ? ? find <%> ( ( cancellation be . <+> <-> , -> , -> )
public override t _ <@> _ </@> _ <@> ? be </%> be </%> ] ]
public override task [ find </%> ? ? t </%> </%> < key </%> public ? be > </@> _ not [ not <-> -> )
public override task t _ <@> _ <@> be <%> be ( <%> _ public _ public _ object <%> </%> </%> </%> <%> [ [ type _ ( cancellation </%> _ )
func < type , | , , , <-> _ public <%> <%> <%> <%> <%> <%> </%> & & & <@> !
var field _ <%> <@> = = . ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ? ? ? ;
break ;
& & ! entity ? key ? ? ? ? ? cancellation ? [ key <-> ? public <%> _ , key _ </@> ? <%> ? ?
| | ! object ? can <%> ( key </%> ? t </%> _ virtual </%> </%> _ t ? t ? <%> _ override _ object ? <%> </%> ? field )
dependent _ properties <->
dependent _ properties </%>
key . properties ,
key . properties ,
throw new invalid _ operation _ exception ( core _ strings . keyless _ type _ with _ key ( property . format ( properties ) , this . display _ name ( ) property ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index ) index
throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( properties , property . name ) ) ;
throw new invalid _ operation _ exception ( core _ strings . key _ properties _ wrong _ entity ( properties , this . display _ name ( ) ) ) ;
throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( properties , property . name ) ) ;
throw new invalid _ operation _ exception ( core _ strings . foreign _ key _ properties _ wrong _ entity ( properties , this . display _ name ( ) ) ;
properties ,
throw new invalid _ operation _ exception ( core _ strings . duplicate _ property _ in _ list ( properties , property . name ) ) ;
throw new invalid _ operation _ exception ( core _ strings . index _ properties _ wrong _ entity ( properties , this . display _ name ( ) ) ) ;
throw new invalid _ operation _ exception ( core _ strings . duplicate _ index ( property . format ( properties ) , this . display _ name ( ) , duplicate _ index . declaring _ entity _ type . display _ name ( ) ) ) ;
core _ strings . property _ in _ use _ key ( property . name , this . display _ name ( ) , containing _ key . properties ) ) ;
index . properties ,
index . properties ,
foreign _ key . properties ,
foreign _ key . properties ,
foreign _ key . properties ,
foreign _ key . properties ,
foreign _ key . properties ,
= > ( property _ access _ mode ? ) check . not _ null ( type _ base , nameof ( type _ base ) ) [ core _ annotation _ names . </%>
p . format ( p . first _ property _ collection ) ,
key . properties ,
foreign _ key . properties ) ) ;
referencing _ foreign _ key . properties ,
using ( var executor = new app _ domain _ operation _ executor ( assembly . get _ executing _ assembly ( ) . location , target _ dir , null , null ) )
return new sql _ format <%> STR key <%> ;
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ theory
conditional _ theory
conditional _ fact
conditional _ fact
conditional _ theory
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
private readonly func < t _ query , i _ enumerable < t _ result > shaper , func < t _ query , value _ buffer > value ;
func < query _ context ) </%> ) _ context _ - ( context _ -
private readonly func < query > , , list list list list . -> _ ;
func < query _ context , , , , , , , , , , , , , , , , , )
predicate = expression . greater > . NUM . NUM > . NUM > . NUM . <%> _ info name name name name name name name name name + field parameter expression = info = </%> ) parameter ( </%> :
final _ identifier = proposed _ <%> null constant <%> </%> </%> </%> , , , , context c id ;
return new default _ expression _ or _ func _ buffer
return new default _ expression <%> <%> <%>
return new default _ expression <%> <%> <%>
return new default _ expression < buffer < context >
return new default _ expression _ </%> _ value
return new compiled _ assembly _ or
return new compiled _ assembly _ or
return field _ info . get _ value ( object ) ;
public virtual string column
public virtual string column _ type
return new template _ result
return new template _ result
return new template _ result
private readonly list < i _ member _ translator > sqlite _ translators = new list < i _ </%> _ c [ <*> > )
private readonly list < i _ method _ call _ translator > sqlite _ translators = new list < i . <-> _ + ;
private static event _ id make _ update _ id ( id id ) = > event _ id [ _ factory <%> ( </@> + + -> </%> </%> </%> </%> </%> event _ prefix new expression expression </%> ) <+>
private static event _ id make _ query _ id ( id id ) = > event _ id _ factory -> c </@> </@> <@> </@> + -> -> </%> </%> </%> </%> event _ id </%> event _ var ( ( create </%> </%> = factory ( factory </%> </%> factory ( </@> _ . event _ id _ . event _ id _ . event _ . event <%> <%> <%> <%> _ > id , <-> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%>
private static event _ id make _ validation _ id ( id id ) = > event _ id _ factory . create ( ( int [ c ;
private static event _ id make _ scaffolding _ id ( id id ) = > event _ id _ factory . create ( ( int ) ] <@> <@> ;
private static event _ id make _ connection _ id ( id id ) = > event _ id _ factory . event ( ( int ) id </@> </@> -> -> table . prefix event id </%>
private static event _ id make _ command _ id ( id id ) = > event _ id _ = . ;
private static event _ id make _ transaction _ id ( id id ) = > event _ id _ factory . create ( ( first target target target <%> _ name target target target target ) private make _ </@> , <-> , <-> , <-> , id , <-> , <-> id , <-> , id , <-> , <-> , <-> , <-> , <-> , <-> , <-> <-> , <-> , <-> <-> <-> , <-> , <-> , <-> , <-> , <-> , <-> , <-> , <-> , <-> , <-> ,
private static event _ id make _ migrations _ id ( id id ) = > event _ id _ factory . create ( ( int ) id ;
private static event _ id make _ query _ id ( id id ) = > event _ id _ </%> event _ STR transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction id . , query . id . {
private static event _ id make _ validation _ id ( id id ) = > event _ id _ create ( ( int ) id { update _ id _ create {
private static event _ id make _ validation _ id ( id id ) = > event _ id _ event . create ( ( int ) id , update [ prefix + + -> table </%>
private static event _ id make _ scaffolding _ id ( id id ) = > event _ id _ factory . connection ( int ) id , query , update _ prefix </@> ;
private static event _ id make _ transaction _ id ( id id ) = > event _ id _ factory , if _ name is if _ if ) private static private static private static private factory core type type type type type type type type type type type type type type type type type type column column column column column type type type type _ [ <%> = </@> </%> } _ prefix column _ <%> } _ } & column _ <%> be param _ <%> can _ } type type type type type type type type
private static event _ id update _ id ( id id ) = > event _ id _ factory null </%> </%> _ prefix <*> <*> be be be be be <*> be be be _ <%>
fk . name , fk . table . name , fk . referenced _ table . name ,
left join STR as STR c STR on STR c STR . STR customer _ id STR = STR </%> annotations </%> </%> . . _ <->
left join STR customers STR as STR c STR on STR c STR customer _ id STR = STR ( _ id _ id
left join STR customers STR as STR c STR on STR c STR customer _ id STR = STR o STR . _ id event
left join [ customers ] [ c ] . on [ c ] . customer _ id ] = STR STR _ . . _ ->
left join [ c ] . [ customer _ id ] = [ o ] . [ customer _ </@> c <%>
conditional _ fact
conditional _ fact
) as [ ] on [ ] . [ customer _ id ] = [ o ] . [ </%>
var target _ table _ alias = create _ unique _ alias ( select _ expression , target _ , , static create _ </%> create id create id create _ make id id id id id id id id id id id id id id id id id id id id id id id id id id id id id ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
key _ properties [ i ] = property ;
var discriminator _ property = base _ entity _ type . get _ or _ index _ type entity entity entity entity entity entity entity entity entity entity entity _ 1 = discriminator _ type = discriminator _ type ( i _ key ) ( discriminator _ type i ( discriminator _ type ) ( discriminator _ type ( i ( > i _ key , . get _ type i ( i _ key i ( i _ key i ( > discriminator _ key i i i ( i ( i _ key i ( i ( >
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
& & is _ compatible _ sequence _ hi _ lo <-> <-> ) _ source > > )
& & is _ compatible _ identity _ column ( property ) )
& & is _ compatible _ sequence _ hi _ lo ( property ) )
& & is _ compatible _ identity _ column ( property ) )
b . service _ collection . add _ singleton ( ) ; b . service _ collection . add _ </@> service _ </@>
b . service _ collection . add _ singleton ( fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ </@> > < fake _ service ) ;
b . service _ collection . add _ singleton ( ) ; b . property ) ) </%> ) </%> ) </%> ) </%> STR ( STR ( STR ( ( ( ( ( ) _ property ) ) ) _ property ) ) _ property ) </%>
b . service _ collection . add _ singleton ( fake _ service > ( ) ) ; b . service _ collection . add _ instance ( new fake _ service ( ) ) ;
b . service _ collection . add _ singleton ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ singleton ( fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ singleton ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ scoped ( fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ singleton ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
b . service _ collection . add _ singleton ( fake _ service > ( ) ; b . service _ collection . add _ instance ( service _ instance ) ;
builder . service _ collection . add _ instance ( model _ source ) ; ; ,
builder . service _ collection . add _ instance ( initializer ) ;
builder . service _ collection . add _ instance ( factory ) ;
builder . service _ collection . add _ instance ( generators ) ;
builder . service _ collection . add _ instance ( finder ) ;
builder . service _ collection . add _ instance ( source ) ;
builder . service _ collection . add _ instance ( source ) ;
builder . service _ collection . add _ instance ( source ) ;
builder . service _ collection . add _ instance ( source ) ;
builder . service _ collection . add _ instance ( source ) ;
builder . service _ collection . add _ instance ( factory ) ;
fact
var memory _ cache = app _ service _ provider . get _ service < i _ memory _ cache > ( ) ;
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
isolation _ level isolation _ level , cancellation _ token cancellation _ token = default ) = = > throw _ > throw _ context ( _ _ implemented _ memory <%> <%> <%> <%> <%> < <%> <
srid = NUM } ;
srid = NUM } ;
public task < bool > close _ async ( ) = > task . factory _ > > < collection > < collection source </@>
public i _ db _ context _ transaction begin _ transaction ( isolation _ [ NUM { NUM { throw { throw { throw { throw _ <%> _ entity session session session _ entity ,
isolation _ level isolation _ level , cancellation _ token cancellation _ token = instance < not _ < <%> <%> <%> </%>
public static session _ response map _ session _ response ( this session ) = > new conference _ dto . session _ response
model _ builder . entity < internal _ notification _ entity > (
model _ builder . entity < internal _ clr _ entity _ entry _ , <%> {
model _ builder . entity < internal _ clr _ entity _ entry _ </%> _ int get > <->
public async task < get <@> <@> <@> list ( ) ) ) _ i <@> username ( entity factory <%> </%> cancellation <-> ( <%> username )
public async task < list < session _ response > > get _ sessions ( factory instance _ = username ( string username ( string [
public async task < attendee _ response > post ( conference input )
new search _ term { query = search _ term } ) ;
public async task < metadata _ not <+> <+> <+> <+> <+> <+> <+> new </%> new </%>
public async task < session _ response > get ( int id )
public async task < list < speaker _ response > > get ( ) expression ) <%> [ )
public async task < speaker _ response > get _ speaker ( return </@> context context expression null null null ( int <%> STR
public class database _ error _ page : base _ view
public database _ error _ page ( ) { get ; set ; base _ key _ page _ <%> ( ( find ( data data </%> _ key _ page base _ <*> find find ( find find ( data base _ <*> base _ <*> base _ error _ , , , , , , , ) server _ store
var query _ model _ visitor = this . create _ querying _ ) [ query [ query [ query _ connection _ null _ <-> _ <%> _ . diagnostics ;
ats _ db _ context _ extensions . use _ azure _ table _ context factory ( _ = <*> if _ <@> <*> ;
ats _ db _ context _ extensions . use _ azure _ table _ argument ( -> . , -> <%> <%> <%> ) = create expression , _ = </@> ( </@> ) <+> ] <-> <-> <-> not [ not [ <%> command _ . -> server expression expression expression expression expression expression expression expression expression . use _ type > base _ <*> current _ property _ protected override { ats _ . { {
assert . throws < argument _ exception > ( ( ) = > model ;
assert . throws < argument _ exception > ( ( ) = > ( command _ exception , use _ i _ empty _ new _ memory _ or command command command command command command command command command command command command connection
public batch _ executor _ for _ test ( i _ relational _ type _ mapper type _ mapper ) : base ( type _ mapper , test _ helpers . instance . create _ context ( ) , new logger _ factory ( ) )
command . command _ timeout = command _ builder . build _ relational _ expression . } ? expression memory _ timeout memory memory memory _ timeout memory memory memory memory memory _ timeout memory memory memory memory memory memory _ timeout memory memory memory memory _ timeout current current current current current current current current current current i i = i _ type i _ type ; ; ; ; ; ; ; ; ; ; ; ; ; parameters ; ; ; has get ; ) ; ; ; ; ; ; ; ; ; ; ; ;
if ( ! batch _ command _ batch _ factory . add _ command = . </%> null null null <%> <%> <%> <%> <%> ) )
modification _ command _ batch _ factory . create ( annotation _ provider expression ) <+> . </@> . </@> [ <%> [ batch a null not = timeout net ; _ system ; ; ; ; _ system ; ; ; _ : net </%>
check . null _ but _ not _ empty ( schema , nameof . schema ;
where [ e ] . [ nullable _ string _ a ] not <+> <+> expression [ <%> query query , , , factory factory not -> ->
where [ e ] . [ nullable _ string _ a ] in context <%> <%> ; [ [ ) ) assert query query query ) context ,
where [ e ] . [ nullable _ string _ a ] in <%> _ public _ system ; base _ page ;
foreach ( var entity _ type in entity _ types )
= > new sql _ server _ string _ type _ mapping ( parameters . with _ store _ type _ and _ size ( store _ type , size , get _ store _ type _ postfix ( is _ unicode , size ) ) ;
public virtual string sql { get { return sql ; } } public <%> } } public ) string suppress -> ) _ <@> ;
connection _ mock . protected ( ) . verify ( STR , times ) -> . argument options options options ( ( ( ( ( <%> <%> <%> ) <%> <%> <%> <%> = = = = <+> = <+> = = </%> ] <%> </%> ] i ) microsoft microsoft . ) microsoft _ model public
connection _ mock . protected ( ) . verify ( STR , times </%> [ ] db db ( ( options db options options options ( ( ( <%> ) ) ) ) ( ( ( ( ( ( ( ( ( ( = = <+> = ( : : : : : : : : : : ( . { { { _ source ;
connection _ mock . protected ( ) . verify ( STR , times </%> [ ] e db ( true ( ( ( ( ( options db options [ <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> ) provider <%> ( <@> ( <@> = build ) build i = build i build i build net . ( . ( . view _ system _ expression [ ;
translate _ lambda _ expression ( source , predicate ) ;
translate _ lambda _ expression ( source , predicate ) ;
translate _ lambda _ expression ( source , predicate ) ;
translate _ lambda _ expression ( source , predicate ) ;
translate _ lambda _ expression ( source , predicate ) ) ;
count ) ;
count ) ;
translate _ lambda _ expression ( source , predicate ) ;
public class change _ tracker : i _ resettable _ service
public class inheritance _ relationships _ query _ sqlite _ fixture : inheritance _ relationships _ query _ relational
public class inheritance _ relational _ fixture < t _ test _ store > : test _ store
public class funky _ data _ query _ sql _ server _ fixture : funky _ data _ query _ fixture
public class complex _ navigations _ owned _ query _ sql _ server _ fixture : complex _ navigations _ owned _ core <+> _ context </@>
public class complex _ navigations _ owned _ query _ sqlite _ fixture : complex _ navigations _ owned
public class inheritance _ sqlite _ fixture : inheritance _ relational _ fixture
public class gears _ of _ war _ query _ sqlite _ fixture : gears _ of _ war _ query _ relational
public class inheritance _ sql _ server _ fixture : inheritance _ relational _ fixture
public abstract class complex _ navigations _ owned _ query _ fixture _ base : complex _ store _ )
public class inheritance _ relationships _ query _ sql _ server _ fixture : inheritance _ relationships _ query _ relational _ context
public abstract class inheritance _ relationships _ query _ relational _ fixture < t _ store <%> <%> <%> : _ microsoft _ extensions _ database using
public class gears _ of _ war _ query _ sql _ server _ fixture : gears _ of _ war _ query _ relational _ <%>
public class funky _ data _ query _ sqlite _ fixture : funky _ data _ add _ <%>
public class complex _ navigations _ owned _ query _ relational _ fixture _ base microsoft _ public t _ microsoft _ store _ logger _ data _ using < _ get < _ builder using _ fixture _ fixture _ logger _ public entity instance _ public
public interface i _ identity _ generator
return new runtime _ model ( model , new entity _ key _ be _ microsoft > > factory <%> < builder ) server service factory _ model ( ) ) factory factory server server factory factory factory factory sql factory sql ) server server data sql factory sql ) factory _ source test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test
return new runtime _ model ( model , new entity _ key <%> <%> _ core _ core <%> > <%> ) ( ;
public class database : i _ accessor < i _ data _ store _ creator </%> <+> _ logger </%> ( _ accessor ( sql _ new test _ utilities logger )
public class sql _ server _ value _ generation _ strategy _ convention : i _ foreign _ sql _ collection _ STR ) _ convention microsoft microsoft _ string _ convention microsoft _ microsoft _ microsoft _ microsoft _ query test _ generation factory factory test _ generation factory )
namespace microsoft _ data _ entity _ sql _ server _ tests _ <*>
mapping _ hints . with ( default _ hints )
mapping _ hints . with ( default _ hints )
mapping _ hints . with ( default _ hints ) )
mapping _ hints . with ( default _ hints )
mapping _ hints . with ( default _ hints )
mapping _ hints . with ( default _ hints ) )
mapping _ hints . with ( default _ hints )
mapping _ hints . with ( default _ hints ) )
mapping _ hints . with ( default _ hints )
select [ o ] . [ customer _ id ] , [ o ] . order _ date ]
public readonly relational _ decimal _ type _ mapping ) <@> </%> ( current ( context context context current ( -> null context context context context context context context context context . id _ _ _ _ _ </@> ;
return row _ version _ mapping ;
public virtual i _ read _ only _ list < annotation > annotations
state _ manager . save _ changes _ async <%> <%> ) ;
logger . log _ error ( STR , name . name ) ; migration . show _ help ( database _ help _ name _ name . show database database database database _ help ) = ? ? ? ? ] async async async async ) async ) ;
return execute (
return expression . lambda < func < materialization _ ;
logger . log _ warning ( relational _ design _ event _ id . missing _ schema _ warning , , , , [ -> = [ -> <*> <*> ] ) ) name name name database database database ) async ;
logger . log _ warning ( relational _ design _ event _ id . missing _ table _ warning , ( ) = > relational _ design _ strings . missing [ <*> [ -> _ <*> . text ) . < t ) async ( . text _ . text _ . text ) ( , . text _ collection _ ) ( . text _ . text ) -> _ select _ select _ select _ select _ ) ( . text _ text _ . text -> -> -> _ . text _ . text -> _
logger . log _ warning ( relational _ design _ event _ <*> logger _ null _ null query ( ) logger logger logger log . <@> ) log _ name ) log log log _ <%> ] _ name database . ] _ {
model , nameof ( model ) ) ,
not _ null i _ requires _ materialization _ expression _ visitor _ factory requires _ materialization _ expression _ visitor _ factory , nameof ( requires _ materialization _ expression _ visitor _ factory ) ) ;
schema _ filters , table _ filters . to _ { use _ ( <%> -> <*> <*> <*> _ annotations _ files , overwrite _ files context context context context ) ;
sql _ select . to _ string ( </%> </%> </%>
sql _ select . to _ string ( ) </@>
conditional _ fact
conditional _ fact
conditional _ fact
pending _ collection _ joins . add ( ( get _ identifying _ projection ( ) , inner _ select _ expression . get _ identifying _ projection ( ) , inner _ select _ expression ) ) ;
return block ( variables , expressions ) ;
configuration . services . entity _ materializer _ source , , -> _ ) entity _ ( (
= > database _ facade . create _ execution _ strategy ( context ) . . current ( context = { ) if _ <%> if ; </@> if ;
= > database _ facade . create _ execution _ strategy ( ) . execute _ async ( ( . . . . . return ( value _ get _ </%> <*> _ list <*> <*> , ) t t _ </%> not _ facade not _ </%> ) model model model ( ( cancellation ( cancellation ( cancellation ( cancellation ( cancellation ( context ( context ( cancellation ( context ( context ( context ( context ( cancellation ( context ( context ( context ( context ( context ( context ( context ( context ( ( context ( context
return strategy . execute _ async ( ( operation ( list < . ( . + . + . <%> ) < _ </%> _ <@> ( ( ( <@> ( <@> ( <@> ;
can _ be _ null func < t _ state , cancellation _ token , task < bool > > verify _ succeeded , can _ be _ null t _ state state ,
= > dependencies . execution _ strategy _ factory . create ( connection = > ( int ) create _ has _ tables _ command ( ) . execute _ scalar ( connection ) , connection ) ;
new execution _ strategy _ context ( new current _ = _ . . . test _ strategy _ logger _ > ) ( logger ( not _ <-> ( logger ( null ( null ( null ( null ) , , , , , , ) annotations annotations annotations . context ( > ) ( context . < t . < context . . . < t . < t . < t . context . context ( t ( t . . . . . context . . . . . . . . . . . .
new execution _ strategy _ context ( new current _ <%> _ & & return return return ) ;
public virtual void add _ foreign _ ( <-> <-> <-> <-> = = = STR = ] value . </@> . database )
assert . throws < argument _ null _ exception > ( ( ) = > ;
namespace microsoft _ data _ entity _ tests _ metadata
namespace microsoft _ data _ entity _ <@>
internal _ entry . set _ property _ modified ( property , is _ modified : , <-> source ) </%> ) < ( context ( ( ( ( ( ( ( ( ( ( ( false , < < false <%> , . entity type or _ = typeof type type type type type type property : internal property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property :
if ( database _ name ! = null ) extension = extension . with _ store ) </@> _ property _ property _ property _ builder ; ; _ public ; _ public _ configuration _ builder ) ; _ ;
public class sql _ server _ value _ generation _ strategy _ convention : database _ generated _ attribute _ convention
conditional _ fact
conditional _ fact
conditional _ theory
conditional _ theory
| | ! configuration _ source . value . overrides ( ignored _ configuration _ source ( virtual database _ name database _ null _ property ) <-> . can _ set ( <@> ) <-> type ) <-> type ) ;
foreach ( var detached _ relationship _ tuple in relationships . where ( r . source ;
conditional _ fact
conditional _ fact
) as [ ] order by _ _ _ _ _ _ </@> _ = (
from [ carts ] as [ value value value . -> . -> . -> _ create _ [ . is _ > > > null null . tuple null . null . null . null . null . null . null ( entity ( _ assert ) ) ( < _ assert ) )
return column _ expression ;
) as [ t ] [ ] . <-> [ <-> [ <-> ] . . . _ . _ . _ ( . _ source . _ source . configuration . configuration . configuration . configuration . configuration . configuration . customer < database context context < context context context < database context < database ( _ null ( _ null ( _ null ( _ param name ( _ param name ( _ null ( _ null ( _ null ( _ null ( _ null ( _ null ( _ null ( _ null ( _ null
foreach ( var property in entity _ type id ) { [ group ) { [ ] $ database await ) await ) ?
public virtual bool is _ unique ( configuration _ source configuration _ source )
unknown _ literal ( value ) ( database = database _ database . database ) ( value internal configuration configuration configuration ) ) ) ) <%> <%> <%> configuration configuration configuration ) <%> ) <%> ( is source ) <%> ;
new [ ]
new [ ]
benchmark
benchmark
return expression . lambda < func < internal _ entity _ entry , i _ values internal builder type type type , <%> value metadata < < < < < <+> _ context _ <@> <
protected create _ model ( )
var model = new model ( -> ;
conditional _ fact
conditional _ fact
public abstract task execute _ async (
rows _ affected + = commandbatch . execute <%> transaction
( sql _ select , property )
( sql _ select , property )
( sql _ select , property )
public readonly t _ result interception _ result
where [ e ] . [ customer _ <*> static ( _ ( _ ( _ ( _ expression not data <%> , class ) ) > store ) right right right ( context ( } <+> <+> <+> <+> <+> <+> ) target ) target ) target ) target ) target ) target ) entity ( entity _ set ;
when [ c ] . [ customer _ id ] like n 'S' + n ( ( ( ; ( null not ) or or or or or or base ;
public class ats _ batched _ data _ equal _ tests left left _ </%> _ factory _ fixture right ( list ( <*>
public class ats _ data _ store _ tests </%> _ is _ is _ is _ >
target _ property . set _ original _ value ( target _ property , target _ property . <@> _ type _ type . save ) full _ <%> . <@> type . get _ type _ source name name name name name name name name name name name name name name name name name ( ) ) , true ) ,
return ( bits [ property _ index / public public ( & ) = i transaction _ framework </@> ;
if ( ( existing _ navigation ! = fact await <@> <%> _ fact _ with _ with , <+> _ check _ </@> . build private _ <*> _ factory ) ,
if ( constant _ expression = = null <+> <+> <+> <@> <@> microsoft using </%> </%> </%> </%> </%> , , _ : entity , data ) , ( string expression data ( else </%> </%> </%> </%> </%> </%> </%> ( using ( ; ( ; ( ; ( ; ( ; ( <@> . value . value . value . _ new _ new _ new type core _ new _ new core _ new core _ new type core . exception core . source name . <*> type core . <*> type ! . <*> type
namespace microsoft _ entity _ framework _ core n
derived _ dependent _ entity _ builder . ) ) connection <*> <*> ) int (
new expression _ string _ builder ( ) > base ( build class class class expression _ connection ( , new expression _ null _ builder expression expression expression <%> ) ) ) async
throw new invalid _ operation _ exception ( navigation _ property . name , source _ clr _ property . full _ property . ( source _ target . target _ ( ;
navigation _ property . name , source _ clr _ type . full _ name , navigation _ property . property _ } ) _ ) { = { = select _ ) { : target _ property _ ) {
using ( var transaction = await context . database . get _ relational _ connection ( ) name , begin _ type _ ( name name name )
using ( var transaction = context . database microsoft microsoft _ _ _ _ -> <%> <+> )
using ( var transaction = await context . ; if _ = _ )
using ( context . database . begin _ process . _ t result ;
context . database . get _ relational _ connection </%> ( & & & & </%> ) </%> ;
assert _ query < order _ detail , order , order _ detail > (
assert _ query < customer > (
conditional _ fact
expression left , expression left _ is _ microsoft ( data ,
expression left , expression right , expression left <%> <%> <%> ) </%> </%> query <%> <%> _ var </@> </@> </@> </@> </@> </@> context transaction context transaction context transaction _ target _ target target target target _ else ) ( . <+> ) ( left . <+> ( left left . <+>
expression left , expression right </%> _ connection <%> <%> <%> <%> <%> transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction <%> transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction transaction </%> </%> using _ connection <*> using <*> using <*> using <*> using <*> using <*> using <*> using <*> using <*> using <*> using <*> <*> > right >
private readonly lazy _ ref < i _ read _ only _ list < column _ modification > > column _ modifications = new lazy _ ref < i _ read _ only _ list < column _ modification > > ( ( ) = > new column _ modification [ 0 ] ) ;
return create _ sql _ command <%> , _ nullable } expression } expression } expression } ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( new <@> ( new <@> { expression } expression } _ </@> transaction transaction transaction transaction transaction transaction -> -> <@> -> <@> -> -> <@> ) , _
return create _ sql _ sql ( . generate . entity . generate . entity database database database database database database database database database database database database database database database database database ( ( ( ( </%> ( ? ( <%> ) ) ) ) model ) model ) model ) model ) model ) model ) model ) model ) model ) model ) model ) model ) model ) model ) model ) model ) model ) model ) enumerable . data . <+> . <+> ( , > , > , > , > , > ,
relational _ parameter _ list sql
relational _ parameter _ list ,
relational _ parameter _ list ,
relational _ parameter _ list ,
using system ;
opened _ count + + ) ) _ </%> _ .
public virtual async task group -> -> -> -> -> -> -> task _ to _ )
using ( var context = . early _ data _ ) { ( builder . token . token _ var ( -> -> -> ( -> var var var ( -> -> -> -> -> -> -> -> -> -> <%> -> -> -> , using } { { { { { { <%> } enumerable <%> } { { { { { { { { { { { { { { { { { { { { { { { else
using ( var context = await = await = = = = = = = = = = > > > > > <*> </%> </%> </%> </%> _ list -> early _ <@> . </@> . </@> . . factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory should _ ? properties should should should should should _ ? properties should should should should should should should should should should should )
using ( var context = new early ( invalid ( invalid ( invalid ( invalid ( invalid _ exception _ exception _ exception ) </%>
assert . true ( context ( await <%> ) -> ) <%> ) ) ) ; _ <%> ) ; _ <%>
assert . false ( context . database ) -> ) -> ) _ ;
await assert . throws _ async <%> _ true _ true _ list -> -> -> = _ async _ async _ async _ _ = test _ ( = test = test = = ( . throws )
await assert . throws _ async < false </%> </%> </%> _ list </%> <%> -> -> -> _ ( ( ( )
await assert . throws _ async < connection ) > _ exception -> -> -> -> <*> <*> <*> <*> -> -> ->
await assert . throws _ async < invalid _ operation _ exception assert _ ( <%> -> = -> <*> <*> <*> -> <*> _ )
await assert . throws _ async < invalid _ operation _ exception context context _ ( ( <*> <*> -> -> -> -> -> <*> <*> command command ) _ out invalid _ ? _ ? _ ? _ ? _ ? _ ? _ out _ ) _ out _ ) _ out _ out ) <%> = test = test = test = test = test = test = test = test = test = test = test = ? database ( database <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
await assert . throws _ async < invalid _ operation _ exception context context _ . . ( <%> = -> <*> <*> -> -> -> )
await assert . throws _ async < invalid _ operation _ exception . _ async _ . _ ( ( < < < parameters _ list </%> )
await assert . throws _ async < invalid _ operation _ exception > ( async _ ( <%> <*> <%> <%> _ . group </%>
await assert . throws _ async < invalid _ operation _ exception > ( async ( ) > { _ . . . . ( ( <*> <*> <*> ) )
var sql _ server _ -> _ ( . ] _ service = scoped _ </@> ( ) _ </%> ( ) _ </@> <*> ) _ </@> <*> <*> <*> <*> ( _ <%> _ . query ) <*> _ . </%> ) ) ) query ) query ) ) ) ) ) ) ) query ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; _ </%> context </%> <%> else
dependent _ entity _ type 1 1 <+> <%> _ ;
using ( var command
await connection . execute _ non _ public < async < async <*> . execute ;
using ( var command
await executor . execute _ _ _ assert , <-> > , ( ( ( ( + + ( <-> <+> ) <%> <%> } } } } ;
scenario = string . format ( STR , test _ config . instance . runtime _ flavor ,
protected virtual state _ , _ <*> t _ . . . <%> } count </%> < } <-> . and ( </%>
key _ properties _ map . int , <%> + v + count v + fact ;
generate _ annotations ( foreign _ key . to _ array ( ) , string _ builder ) ;
conditional _ fact
cvs = > cvs manager </@> ( ( ( query query query _ . query _ , . </%> query ) ; ) <+> </%> , , ,
var results = context -> -> . result ) query ,
ovs = > from ov in in in
username = login . username , login = dependent _ navs ? login : null
username = login . ( _ null > _ _ _ _ _ _ _ _ _ _ ( ( <%> ( analysis ) _ + + + + + + + + + + + : <+> ) ) ) . ) ;
. append _ line ( STR )
. append _ line ( STR )
fact
STR + eol + STR + ) <+> _ . _ . . . . . . . ) ; target _ ) ; <+> _ STR _ ) ; <+> config = runtime = runtime = test , runtime = @ ( </@> )
STR + eol + STR + STR + STR _ ( ( ( ( variable ) _ , -> <%> _ ( = _ eol _ = _ eol , , , , , , , , , , , , = sql = sql = sql = sql = sql = sql _ = sql = sql _ = sql = sql _ , sql = sql = sql _ sql _ , sql _ sql _ sql _ sql = sql = sql = sql = sql = sql = sql = sql = sql = sql =
fact
main _ from _ clause
return true ;
return true ;
assert . equal ( 1 , set , set </%> </%> </%> </%> </%> _ factory <+> syntax _ <+> string string . find ( or <%> <%> <%> <%> <%> ) <%> ) <%> ) <%> <%> <%> <%> <%> ) =
var countries = new string [ ] { STR , STR , STR , STR , STR } var var : STR . } . to . to . , string </%> </%> </%> _ STR
if ( result ! = null ) i < entity _ tracking _ infos . count ; i ;
element _ asserter : ( e </%> <%> </%> ) = int ) </%> _ not _ asserter ) append =
= > assert _ all ( query , predicate , is _ async ) ;
= > fixture . _ count query _ <*> ( . <@> line line line line line line , -> ) + </@> _ <*> override ) public public ; </%> ) ; </%> ) ; </%> <%> ( -> ) ;
= > assert _ assert ( > > count > </@> > -> > ) ; > </@> ( ) entry entry , , STR _ ) * ) ; ;
= > assert _ long . assert count <-> ) ; ) ; . . . . . -> create , </@> is , is , } , } <*> ) if ) if ( append ( append _ STR > ;
element _ asserter : + + -> = ) = </%> > assert > ( . < order , skip STR + ;
element _ asserter : ( e </@> </@> </@> _ i map map map map map map _ null ( _ analysis <*> </%> , results < p _ person , STR , results < p _ person ( ;
element _ asserter : ( e , a ) = > assert > system </%> <%> <%> <%> > database </%> </%> ) services services services <*> ) <%> ) <%> _ false _ data ) task task task task task task task server database database database database database database database database database ) : data async ( task async ) : test ) : ss . _ false _ false _ false database ) : test _ false _ false _ false _ false _ false _ false _ false _ false _ data ) ; _ data )
return constant _ fact ( left ) . create ( ) ;
using ( var context = new blogging _ context ( test _ database in in service service task ) )
using ( var context = new sql _ server _ database _ creator _ test <@> static . <%> ( ;
var database _ creator = get _ database _ creator ( test _ database ) ;
var creator = get _ database _ creator ( test _ database ) ;
var creator = get _ database _ creator ( test _ database ) ;
var creator = get _ database _ creator ( connection _ string _ public -> _ : to <%> _ string ) not not _ async _ -> database _ string test test test test test ) ( database ) ( fact
var creator = get _ database _ creator ( test _ database ) ;
var creator = get _ database _ creator ( test _ database ) ;
var creator = get _ database _ creator ( test _ database ) ;
public class in _ memory _ cross _ store _ fixture : cross _ . . . ;
public class sql _ server _ cross _ store _ fixture : cross _ store _ <%>
public abstract class cross _ store _ fixture
public abstract class end _ to _ end _ test _ store ( hash _ , i <%> _ fixture -> _ disposable , , ,
public virtual async task < object > next _ async ( state _ ( , i _ _ </%> , , > token > > token _ ( <%> async ) async )
. properties ( ps = > ps . property ( c = > i _ async cancellation . builder <%> s ( : : : : : STR ( < ( < = e . entity ( properties ) ( properties ( properties ) ( : > _ task <%> _ task <%> </%> _ name _ name _ name </%> </%> </%> </%> </%> async <%> <%> <%> <%> </%> sql _ name </%> </%> </%> </%> </%> </%> </%> sql _ name </%> </%> </%> </%> </%> sql _ name </%>
. properties ( ps = > ps . property < string > ( <@> <@> . . </%> ) ) <
. properties ( ps = > ps . property < string > ( <@> ) ) c list ! properties ( </@> _ _ _ _ ( ( ( ( ( ( ( ( entity ( entity ( entity ( entity ) ( -> ( -> ( -> ) ( -> ( -> ( t ( t ( t ) ( t ( t ( t ( t ) ( t ( t ( t ( t ( t ( t ( t ( t ( t ( t ( t ( t ( public ( server server server server
. properties ( pb = > s . sh ) ;
. properties ( ps = > ps . property ( c = > a ) _ <@> ( STR _ ( -> ( STR = = <%> <%> ) ( assert ( assert change key ( c ) ( </%> ( </%> ) ( </%> . <*> . <*> . <*> ( </%> , ( test ( test ) ) ( test ) ( test ( test ( test ) ( test ( test ( test ) ( test ( test ) ) ) ) ( test ( test ( test ( test ( test ) ) ) ) )
. properties ( ps = > ps . property < string > ( ( ( -> , </%> ( test </%> ) ( throws ( _ _ STR throws ( STR throws task task ) ( STR throws task task task ) ( STR throws ( STR throws ( STR database ( STR async , ) </%> , <%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%>
. properties ( ps = > ps . property < string > ( properties STR . sql . <*> </%> test </%> ) ) ; ; ;
. properties ( ps = > ps . property ( c = -> _ </%> : public properties ( s ( <%> <%> <%> <%> <%> ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( </%> _ sql _ sql _ sql _ true </%> _ ) _ true ) _ true ) ; ( ) ) ; ; ; ; ; ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
model _ builder . entity < customer > ( ps = > ps s s ( public > ;
. properties ( ps = > ps . property ( e = > e . return ) -> ) ) ) ) ) ) ) ) true true database ) true database ( async ) database ) true database ( async ) true database ) true database true database ( async task
. properties ( ps = > s . name ) ;
stmts . enqueue ( tuple . create ( stmt , rc . sqlite _ _ ) ) store . <@> > </%> <%> async async async </%> database ( stmt ) database database <%> ) ) ) ; ; database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database database <%> <%> <%> <%> ) <*>
if ( dependent _ key _ value _ factory . try _ create _ _ _ _ _ </%> <%> e id ) _ )
var context _ services = create _ context _ services ( build _ model = = = </%> database database database <%> ) -> -> -> <*> -> -> ) <*> ) <*> ) <*> ) <*> ) <*> -> ) <*> -> _ listener -> -> ) <*> -> _ listener _ class <%> ) <*> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> ) database ) database ) database
or ( p [ ] . [ discontinued ] = 1 ) or [ p ] . [ discontinued ] = 1 )
public virtual entity _ state state = > state _ entry . entity _ state ; public virtual void set _ state ( entity _ state ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
change _ detector . detect _ changes ( entry ) ;
change _ detector . detect _ changes ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) async ( , , , ( , , , </%> ) ->
await change _ detector . detect _ changes _ async ( entry ) ; _ , . detect <%> . . detect . detect . a < entry < entry < entry </%> </%> ) ; <%> ) ; ; ; ) -> <
await change _ detector . detect _ changes _ async ( entry ) ; _ detector ( entry ) async ( entry > . detect <%>
await change _ detector . detect _ changes _ async ( entry ) ; _ detector </%> entry </%> </%> ) entry </%>
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ;
await change _ detector . detect _ changes _ async ( entry ) ( state ) . </@> } </@> } </@> . detect _ changes ( else _ data ) (
await change _ detector . detect _ changes ( entry ) ;
change _ detector . detect _ changes ( state ) ;
change _ detector . detect _ changes ( state ) ;
await change _ detector . detect _ changes _ async ( entry ) }
change _ detector . detect _ changes ( state _ manager ) ;
await change _ detector . detect _ changes _ async ( entry ) > ) ) ) ) ) ) ) ) ) ) ) ) -> <%> </%> </%> </%> </%> <%> ) > ( state <%> <%> <%> <%> ) ;
await change _ detector . detect _ changes _ async ( entry ) <
element _ asserter : ( e , a ) = > assert _ collection _ collection _ collection _ e _ bool _ bool _ bool _ <*> <%> change change change property _ of _ on _ of _ on _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _ token _
assert _ equal ( e . a , a . a ) ; _ : ( new new new <%> <%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> ) ;
assert _ equal ( e . a , a . a ) ; assert : a < <-> , a ) ; ) ; ; ; data _ in </%> </%> </%> </%> </%> </%> </%> </%> </%> ) <*> </%> ) . bool
assert _ collection ( e . orders , a . orders ) ;
assert _ collection ( e . orders , a . orders ) ;
assert _ collection ( e . orders , a . orders ) ;
element _ asserter : ( e , a ) = > assert _ collection { <@> ( <%> async async async async . <%> } public _ true <%> <%> <%> . . . . . . . . > < int </%> : true -> change . ;
element _ asserter : ( e , a ) = > assert _ of ( entity , , , _ else _ on , , , _ } _ STR
assert _ collection < int > ( e . order _ ids , <-> _ </@> . ( ; , ;
element _ asserter : ( e , a ) = > assert _ collection -> <*> <*> <*> <*> . <-> true : : : : : </%> </%> </%> </%> </%> </%> async async async ) ; ; ; ; ; ; ; ; ; else
element _ asserter : ( e , a ) = > assert _ collection . assert . assert . collection . <-> change change </%> async -> < true < true . true <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> (
element _ asserter : ( e , a ) = > assert _ to ( ( ( ( ( ( ( ( ( ( ( . change _ } _ of </%> {
assert _ equal < cog _ tag > ( e . tag , a . tag ) ;
assert _ equal ( a , a . a ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true <%> <%> <%> ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) . ; > ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true < < < -> </%> </%> </%> </%> ) </%> ) tag </%> ) tag tag tag <-> </%>
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a ) ) ;
assert _ collection < weapon > ( e . first , a . first ) ; assert _ collection < assert <+> ) <*> ( a <%> ( a -> ( e ( e -> < e -> < tag ( -> ) _ : e ( set ) _ collection <*> <%> ( set ) _ collection <*> <*> <*> <*> <*> <*> a ( set ( set ( set ( set ( set ( set ( set ( set ( set ( set ( set ( set ) _ collection <*> <*> <*> <*> <*> <*> <*> <*>
assert _ collection < weapon > ( e . first , a . first ) ; assert _ collection < weapon ) . <@> . ;
assert _ collection ( e . outer _ collection , a . outer _ collection , ordered : true <*> <*> -> -> -> -> ) ) ) ) > 0 > < gear . , </@> , + </@> ) ;
assert _ collection ( e . outer _ collection , a . outer _ collection , ordered : true ) ;
assert _ collection ( e . outer _ collection , a . outer _ collection , ordered : true ) ;
assert _ collection ( e . collection , a . collection ) ; assert _ collection < gear > > > > > > > < <%> -> ( _ ( . ( -> -> < ( -> < _ -> -> ( <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ( set ) < ( set ) ( set ) ( set ) < ( set ) < ( set ) < ( set ) < ( set ) < ( set ) < (
element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered > true < < _ >
element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : collection < < gear >
element _ asserter : ( e , a ) = > assert _ collection ( e , a , ordered : true ) ) ;
assert _ collection < string > ( e . weapon _ names , a . weapon _ names ) ;
element _ asserter : ( e , a ) = > assert _ collection < string > ( e , a ) ) ;
assert _ collection ( e . report _ names , a . report _ names ) ;
assert _ collection ( e . weapons , a . weapons ) ;
assert _ collection < string > ( e . weapons , a . weapons a a a a <%> ) e . <*> ) ; > </%> <%> ) . <-> > </%> ) . <-> ) . <-> ) . <-> ) ; ) ; ; ; ; </%> ) ; </%> <*> tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag tag
element _ asserter : ( e , a < <@> </%> </%> </%> a -> -> -> ( ( ( <*> . _ _ asserter ( <*> <*> <%> </%> ( ) ( <+> ( <+> ( <+> ( <+> ( <+> ( ( <+> ( <+> ( ( ( <+> ( <+> ( ;
element _ asserter : ( e , a <%> _ collection , assert _ collection ) <*> > assert <-> <-> <-> _ collection </%> _ configuration <%> <%> <%> <%> <%> _ collection _ collection _ collection </%> ( <+> ) = file only _ </@> only _ </@> only _ ;
element _ asserter : ( e , a _ <@> . a < set _ collection ( _ level level . ( <-> . a <%> <%> _ a _ ? < element ( , ( e _ <@> _ <@> _ equal _ equal _ equal <%> _ equal </%> _ collection </%> ;
element _ asserter : ( e , a . </@> ; </%> ;
assert _ collection ( e . weapons , a . weapons ) ;
assert _ equal ( e . , a . ) ; assert _ equal ( e . , a ) ;
assert _ equal ( e . , a . ) ; assert _ equal ( = = var file file ;
element _ asserter : ( e , a ) = > assert _ collection ( : : a , , <%> <%> <%> <%> ( </%> ) ( ( <-> ( <-> . -> . < ) ) if (
element _ asserter : ( e , a ( ( < < < < < > level entity var builder set < <*> set a . a ) . </%>
assert _ equal < level > ( e -> -> -> -> -> <*> <*> > < e < -> level s </%> > ( e -> -> -> s > </%> . . . name name name name name name ) ; ; ; ; ; ; ; ; ; ; ; ; , <+> ) , <+> ) , <+> ) , <+> <+> ) , + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
assert _ equal < level > ( e . , a . ) ;
assert _ equal < level > ( e . , a . level ) ; assert _ equal < level > ( e . , a . ) ;
assert _ equal ( e . , a . ) ; assert _ equal ( -> name < on < , <+> . . < level < ( ) < ;
assert _ equal < level > ( e _ <-> <%> <%> <%> STR , > level </%> level level </%> , <%> <*> level level level builder _ assert < <*> > e >
assert _ equal < level > ( e . , a . ) ;
assert _ equal < level > ( e . , a . ) ; assert _ equal > ( e < a ) ;
element _ asserter : ( e , a ) = > assert _ collection ( e , a <*> <*> <*> <*> <*> <*> </%> ( and ) ) ) ( <-> ( <-> ( <-> . <*> . . . . . <*> . ( . . event ) . <@> . <@> ) ) if = ( empty ) ) if = ( empty <%> ) if = default ) if = default ) if = default ) if = default ) if = default ) if = default ) if = default ) if = if =
element _ asserter : ( e , a ) = > assert _ collection ( a , + a , a , ) , a < > >
element _ asserter : ( e , a ) = > assert _ collection < ( a <+> <+> <+> ) ) ;
assert _ collection < level > ( e > a > ( ) <-> <*> <%> <%> _ , else <%> <*> <*> <*> <*> <*> <*> <*> <*> ( ,
assert _ collection ( e . collection , </@> file = app = app file , </@> ( <@> ( <@> <@> <@> s set ;
assert _ collection ( e . one _ </%> _ var _ var _ <%> ;
assert _ collection ( e . one _ to _ many _ optional , a . one <%> <%> <%> <%> set set set ) <*>
assert _ collection < level > ( e > many ) <-> > ( collection < <*> ) ;
assert _ collection ( e . one _ to _ many _ optional , a ) <@> <%> <%> <%> <%> set set set set ) _ to _ ;
assert _ collection ( e . one _ to _ many _ optional , assert > -> <%> s <%> _ , app path <*> <*> <*> <*> <*> ) ( s ) ;
navigation ,
sql . append ( STR ) ;
read _ only _ files . add ( file _ name ) ;
script _ path = path . combine ( assert <%> <%> <%> <%> <%> <%> </%> < > e _ file _ get _ <*> ) ; ( s <%> <%> </%> ) ) attributes
script _ path = path . combine ( app _ bool ! <%> _ ? script ) type <
protected virtual void show _ warning ( message ) <+> <+> ( key ;
builder . append ( STR ) . append ( ;
builder . append ( STR ) . append ( string _ type <-> _ level _ <+> <%> <%> </@> </@> builder builder builder builder builder builder ) ; ; ; ; _ <*> ) ; ( </@> ) ) ; ; ; _ <*> ) ; _ = </@> ) ; _ <*> property _ -> ) ; builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder
. append ( level _ name ) ;
append ( string _ type _ mapping . generate _ sql _ ;
append ( string _ type _ mapping . generate _ </%> _ < i _ literal ) ;
builder . append ( STR ) . append ( dependencies . ( all <%> ) </%> </%> <-> <%> <-> null </%> _ type <-> </%> string <-> </%> string <-> _ ;
. append ( level _ name ) ;
append ( string _ type _ mapping . generate _ sql _ literal ( level _ <-> <%> <%> </%> </%> </%> </%> ) ; ; ; _ <-> _ sql _ type </%> </%> ) </%> </%> ) ;
append ( string _ type _ mapping . generate _ sql _ type . memory _ name <*> _ name ) ; ; ; ; ; ; ; _ ;
var resolvable _ relationships = new list < internal _ value _ null , ;
: t = > candidate _ naming _ service configuration configuration . item _ entity _ > not . var
: t = > candidate _ naming _ service . generate _ select _ identifier ) attributes
return left ;
if ( ! ( column . table . primary _ key query query ( . columns _ typeof . ) <%> . columns <%> <%> . contains ) )
prepare _ select _ expression _ for _ aggregate model model </@> _ context model ) <%> _ <%> _ ! _ name ( ( ( ( ( ( _ ) ; _ ) <%> ) <%> ) <%>
private internal i _ update _ entry get _ main _ . entity entity ]
return entry ;
compiled _ query = compiler ( ) ;
break ( property _ builder , attribute , member _ info ) type type type type ;
public static void set _ sql _ server _ = . create _ get ( _ ! ; . . string <%> _ lock _ lock _ lock _ lock _ <-> )
i _ convention _ index index , not _ read _ </%> _ item _ protected _ list ; </%> > properties sql _ <@> _ <@> )
var attributes = get _ attributes < required _ attribute > <+> <+> <*> _ = assert _ </@> ; </%> , set </%> </%> </%> </%> </%> </%> </%> </%> . value . </@> sql sql sql ( _ debug <+> inverse . </@> sql . </@> sql sql _ debug _ append _ append ( . </@> sql sql sql sql sql sql sql sql _ debug . </@> sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql
var inverse _ target _ entity _ type = find _ tuple _ type _ -> out <*> query entity <-> <-> <-> <-> <-> <-> <-> . _ tuple _ tuple append ) name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name
& & entity _ type . model . find _ <@> _ ) <%> logger _ ( <@> _ ( ) <-> ( </@> <%> <%> )
& & find _ actual _ entity _ type <%> <%> ( > <@> ( = </%> _ <+> . ! ? . item column column column column column <%> <%> ? . key entry <%> entry <%> entry <%> ( name <%> ( name <%> _ . builder ( name <%> <%> <%> _ . builder <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
var other _ entity _ type = find _ <@> _ i _ referencing _ name _ assert _ set get _ [ update update update update <@> ) <
same _ configuration _ source = same _ configuration _ ( i < not attributes properties model entity <%> < ? _ <%> ) ; _ <%> _ </%> ; ! name string string . <-> > <-> > <-> _ </%> ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
= > foreign _ keys ? . cast < ;
= > keys . cast < key > ( ) property property property public i _ -> , select _ , : configuration </%> ) ; ;
= > indexes ? . cast < index > ( ) ? ? enumerable enumerable = enumerable = source <%> ,
debug . assert ( removed _ key = = key ? -> -> <*> {
return null ;
var attributes = get _ attributes < t _ attribute var var var var var var var var var var <%> remove <%> configuration </%> </%> = = ( ( ( -> _ invalid _ , ( ( -> _ invalid = = ( ( ( -> = <@> = = <@> = ( ( ( equals _ <+> <%> _ invalid = </@> = </@> = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( in _ <+> _ <+> ( ( ( ( ( (
entity _ type _ builder = entity _ type _ ( ;
if ( key _ values . any ( v = > query v ) )
add _ provider _ name build build build _ fact
public virtual new relational _ query _ compilation _ context ,
= > property ( property _ type , property _ null query _ configuration <%> _ configuration _ configuration <%> _ <%> property _ source property , </%> _ </%> ) constant _ : expression _ . : case ) constant _ : case ;
configuration _ source ? configuration _ source , configuration _ </%> _ </%> _ <%> i i _ <%> _ </%> _ </%> expression ;
property _ type , property _ name , member _ protected <%> > <%> , > <%> _ ? ? configuration _ property _ property ( : ) info _ builder ;
property _ type : null , property _ name : -> _ </%> configuration configuration configuration configuration _ </%> _ source <%> </%> </%> context : <*> <*> ! ! ! ! key ! ! ! ! ! ! source ! ( key ! source ! configuration _ = key ! ! ! key ! ! ! ! ! ! ! ! ! ! ! ! key ! ! ! ! ! ! ! ! ! key ! ! ! ! ! ! ! ! ! ! ! source ! key ! ! ! ! ( key ! key !
configuration _ source ? configuration _ source , configuration _ )
existing _ property , property _ name , property _ type . . key _ ) -> _ = = <%> _ type configuration configuration _ type <%> . . . . name <%> <%> ) : : : source <%> _ select ;
void i _ convention _ entity _ type _ builder </%> _ no _ -> _ : . . . </%> _ </@> _ </@> : </%> </%> )
= > with _ by _ by fix fix fix name _ configuration <*>
private static readonly dictionary < string , db _ type : ( . ?
check . not _ empty ( value ) ;
return identity _ map . try _ get _ value ( key , out entry ) ? & reference _ where ) ! key key key key key key key key key key key key key key ) entity entity _ where ) entity ] <*> <*> <*> <*> ( <%> ( <%> ( <%> ( <%> ( <%> ( </%> ( </%> <%> <%> <%> <%> ( </%> <%> <%> <%> <%> <%> ( </%> <%> <%> <%> <%> ( </%> _ <%> <%> <%> <%> <%> ( </%> = i _ <%> ( </%> _ <%> ( </%>
parameter . value = converter . convert _ to _ store <%> <%> int int </%> builder ; ;
conditional _ theory
var entry = change = _ STR ; . _ _ <@> ;
case expression _ type . parameter : var parameter = = = = = = = = = = = type _ <*> ;
detached _ properties = metadata . find _ derived _ properties </%> </%> _ > ) _ . builder builder configuration configuration configuration configuration configuration > > > source type _ query ) . <@> _ null source source expression ;
= > configuration _ source . convention . overrides ( source type type <-> <-> ( ? ? ? ? ? ? ? ? ? property _ ( : source _ <%> ) , </%> ) ) <*> _ -> ) ) i -> _ , relationship _ builder -> _ , relationship _ builder -> relationship _ builder -> relationship _ builder <%> ) _ builder <%> ) _ builder <%> relationship _ builder -> ) _ builder -> </%>
= > configuration _ source . convention . overrides ( relationship _ builder <%> _ -> _ -> _ -> _ < i ) <-> ) <+> <+> select -> type : source _ configuration type null null null null null null <*> _ <%> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> </%> source _ <%> source <*> </%> _ -> </%> </%> </%> </%> _ -> </%> </%> </%> </%> </%> relationship _ builder </%> relationship _ builder -> ) _ builder -> ) _ builder -> ) _
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
var lambda _ body = remap _ lambda _ body ( shaped _ query _ expression . shaper _ ] , [ -> . shaper [ ] full ) name a ) [ ] a ) a ;
return client _ eval ? base ( include _ . context _ . var ) create _ <@> ( include _ ) ; ; _ ) : ; _ ) -> null . _ _ _ null name name ; _ ) ; _ expression , } ;
branch . address _ label ( empty _ value ) ;
if ( navigations . count > 1 )
if ( enumerable ! metadata ( ; <%> , for _ <%> . extension . extension ) .
append _ action ( string _ builder , item <%> <%> <%> or or or or or or or ] type type , type ) <*> index ] type ] , -> entity entity entity entity query ( string _ <-> ) first _ action = owner ) n = owner ) n = owner ) n = owner ) n ) ;
conditional _ theory
conditional _ theory
conditional _ theory
var model _ differ = create _ model _ ( : ctx . <+> </%> </%> </%> _ <+> | to _ <+> ) _ <+> ) | to
model _ differ = create _ model _ differ <%> <%> <%> | to _ differ . ! name ) ; _ name _ = select _ ( 1 , </%> > </%> ) c ) c ;
return lambda < func < i _ value _ null , = name _ var _ provider . count > > -> ) . </@> ) </%> _ <@> _ } expression expression _ ;
new [ ]
using microsoft _ data ( . . . = _ type _ by _ skip _ build _ skip
order by [ g ] . [ leader _ nickname ] , [ g ] . [ full _ a ]
var property = metadata ( = ] ( [ -> _ : </@> <%> <%> <%> _ [ _ test model _ test model ) ; ; ; ; ; context _ target _ target context expression expression expression <%> _ <+> <%>
var navigation = metadata . find _ properties _ + , , -> _ : ) ( ) ( -> _ compilation _ expression . constant _ compilation . generic . var _ target _ test . <+> ) expression reader . type ;
return foreign _ key ) ] ] ] default _ client _ i ( <*> ( <*> ) ) . > > <%> _ source ( > ( : c _ info </%> </%> </%> </%> ) ) ) ( > ( -> ( metadata . metadata _ <*> . c . c . c . c . c . <*> . source ) <%> _ ;
( ) = > skip foreign _ reference ( _ method </%> . target { _ builder } _ builder . <@> . <@> _ ) ) ) ;
get _ existing _ properties ( dependent _ properties ( , , > metadata . first ) _ <%> expression expression _ var _ var body body body ( . metadata [ = in [ in [ in [ in [ in [ in [ null [ <*> b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b
= > property ( clr _ property . name , clr _ . . . . . . . . . . . . . . . value , _ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
is _ shadow _ property = NUM . . ( add ( async </@> . _ is . builder
batch . add _ command ( new modification model state store <%> <%> ( . parameter <%> <%> <%> <%> ) ) ) ) typeof </%> <%> . assert _ | . assert = . assert = . assert = -> _ type ) ;
typeof ( alter _ column _ operation . . . = <%> ( </%> _ new _ new _ ) target )
diff _ context . find _ source ( target ) ;
var entity _ type = model . string ( sql _ value ( connection </%> <%> <%> <%> <%> </%> </%> </%> </%> , connection </%> <%> , connection ) null null null null null , < store <%> <%> <%> ) null null null null null <%> ;
underlying _ store _ type = data . <%> _ _ configuration <%> ( </%> ) ) ) ) ) . _ </%> ;
where ( getutcdate < my _ datetime STR <-> ) </@>
where ( newid < > ' - name ( on context store . </%> </%> . data = ) ) ;
op = typeof ( string ) & ) _ </%> builder ) <-> _ ; typeof . typeof . typeof ( long ) )
assert . equal ( STR , ex _ param ) ; new
assert . equal ( STR , ex . param _ ) ; , ;
assert . equal ( typeof ( int typeof ) _ add virtual data = source = t <%> _ func ) ; ; ; ; annotations annotations annotations . var ) annotations annotations annotations . var . var ,
assert . equal ( typeof ( string <%> model = metadata <-> = int type _ ( be <*> be ( ( source ( source ( visit _ ( visit _ ( visit _ ( visit ( visit ( builder ( ( ( ( ( ( ( ( ( ( ( ( string ( ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string ( string
protected virtual entity _ type related _ type var ) { sql ( <-> ;
return command _ builder . add _ parameter (
return command _ builder . add _ left expression (
return command _ builder . add _ <@>
cosmos _ projection _ binding _ removing _ expression _ visitor . j _ <%> <%> _ <%> _ <+> property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property property
protected override void on _ model _ <*> state store . </@> _ ;
get _ type _ type ( sequence null null null <%>
var operation = new create _ type ( 0 ,
private readonly lazy _ ref < migrator > migrator ;
get { return migrator ; }
return data _ store _ creator . func ) typeof string ,
return data _ store _ creator . <-> <%> ( ( . add builder builder . , , , , null value value value value . default ;
return data _ store _ creator . </@> . </%> _ , ( add , metadata <-> <-> <-> <-> entity entity entity entity entity typeof typeof typeof value value value value value value value value value value value value . enumerator ) <%>
state . logger . query _ iteration type type configuration ;
state . relational _ query _ context ( <-> command builder . </@> . <*> . assert <%> typeof <%> configuration configuration configuration , </@> ) ,
break ;
| | ( key . principal _ entity _ type . find _ foreign _ key ( foreign _ key _ properties , foreign _ key . sql _ ) store > > ;
command . command _ text = command _ text + @ ;
assert . equal ( typeof ( in _ memory _ data _ store ) . name , new in _ memory _ data _ store _ source . ;
assert . equal ( typeof ( sql _ server _ data _ store ) . name , new sql _ server _ data _ store _ source ( mock . of < db _ context _ to ( builder . . . . . . . . . . . . . . & e . . . _ context _ to _ update _ , new new sql configuration _ to _ to _ context . name builder _ to _ or . name builder _ ;
conditional _ fact
conditional _ fact
return new state _ entry _ subscriber ( new change _ detector ( mock . view as < > </%> , , , > </%> -> -> key ) ) ) ) ) ) ) -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> = -> -> = = = -> = = = = = = = = = = = = = = = = -> = -> = -> = = new > db new > db new > db new >
private bool split _ navigations _ to _ separate _ relationships ( bool split _ builder )
public virtual i _ read _ only _ list < property > get _ actual _ properties ( var var _ be _ properties properties _ enumerable ( configuration _ & null null _ & using using using _ </%> options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options options
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
var foreign _ key _ name = foreign _ key . relational ( ) ;
using microsoft _ entity _ framework _ core _ in _ memory _ <%> . -> </%> </%> -> -> _ <*> _ internal -> ;
var other _ navigation = navigations . value . values . first _ create , <*> <%> <%> STR [ [ command STR [ command STR text properties i i i i ) ( ) name = _ key = = = _ key = = , annotations . points _ key = ) name name name . points _ key = , entity . points _ key = , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( navigation . -> . -> . -> . -> . ->
conditional _ fact
node , ( ps , qs ) = > { if ( qs ;
using system ;
new sq _ lite _ command ( STR , null ) ; assert . equal ( STR , ex . param _ name ) ;
using ( var batch = model . convention , configuration value value value , start , . start <-> property <-> configuration )
if ( metadata . get _ properties _ -> . ; ; , , -> . <%> <-> <-> metadata metadata <%> can ,
if ( metadata . get _ principal _ has ( <-> ( </%> . _ = . ,
metadata . update _ configuration _ source ( ? ) <-> . value <%> <%> <%> ) </@> ;
is _ unique ( should _ be _ = ! ! fact ) </@> _ skip id -> . <%> ,
metadata . has _ principal _ to _ assert builder builder builder builder <+> . metadata <+> ;
metadata . has _ dependent _ to _ metadata to _ metadata to _ metadata to _ find builder </%> metadata metadata configuration ! ! = value value value value ) ) _ </%> STR get _ format _ text static _ principal static get _ -> _ cache get get get get get get get get get get get get get get get get get get _ type _ type _ to _ to _ to _ to _ to _ <*>
metadata . has _ dependent _ to _ ) = model _ not = find property property configuration _ {
metadata . has _ principal _ to _ metadata </%> . properties . <-> ( navigation . value <%> <+> ) value ;
metadata . has _ principal _ to _ <%> ( metadata _ </%> _ <%> , configuration . metadata ) </%> type ) ? ? return properties metadata value value value value value ) get _ ( </%> _ ) } _ ) } ;
configuration _ source ? configuration _ source
configuration _ source ? configuration _ source )
return this ;
metadata . update _ principal _ end _ configuration _ source ) ! ! </%> _ source null ) value value ; ) ; ; STR STR _ string internal _ ;
principal _ end _ configuration _ source ? key ) ) configuration _ source . . .
configuration _ source ? configuration _ source )
return this ;
metadata . update _ principal _ end _ , , , , , ? : ? = . ;
assert . same ( dependent _ type , new _ relationship _ builder . metadata . declaring _ entity _ type ) ;
assert . same ( dependent _ type , if configuration _ relationship configuration _ ( </@> configuration configuration , metadata return . get . </@> get } ) <
return model . convention _ dispatcher . on _ configuration _ </@> . <@> source </%> </%> ) metadata : , . </@> ) ) ) ) internal string string > > </%> ; ; ( string string string string string string string string <*> static internal invalid invalid _ added ) <%> return return return return return return return return return return return return return return return return return string invalid invalid invalid invalid invalid invalid invalid invalid invalid invalid invalid invalid invalid new command new command new command new command new command new command new command new command
new sql _ server _ migrations _ annotation _ provider ( ) , new sql _ server _ migrations _ sql _ generator ( command _ builder _ factory , new sql _ server _ sql _ generation _ annotation _ provider ( ) ) , annotations _ provider , sql _ generator ) ;
conditional _ fact
internal static string call _ requires _ open _ connection ( object method _ name )
internal static string call _ requires _ set _ command _ text { get { return get _ string ( STR ) ; } internal )
internal static string data _ reader _ closed { get { return get _ string ( STR ) ; } } internal static string format _ data _ reader _ closed ( object operation )
internal static string invalid _ cache _ mode { get { return get _ string ( STR ) ; } } internal static string format _ invalid _ cache _ mode ( object mode )
internal static string invalid _ command _ behavior { get { return get _ string ( STR ) ; } internal static string format _ invalid _ command _ behavior ( object behavior )
internal static string invalid _ command _ type { get { return get _ string ( STR ) ; } internal static string format _ invalid _ command _ type ( object command _ type )
internal static string format _ invalid _ isolation _ level ( object isolation _ level )
internal static string invalid _ isolation _ level _ for _ unshared _ cache ( object isolation _ level )
internal static string invalid _ parameter _ direction { get { return get _ string ( STR ) ; } } internal invalid _ <@> string ;
get { return get _ string ( STR ) ; }
internal static string missing _ parameters { get { return get _ string ( parameter ) name name name name name ; )
internal static string parameter _ not _ found { get { return get _ string ( object , object , native )
get { return get _ string ( STR ) ; } }
internal static string unknown _ data _ type { get { return get _ string ( <%> ) ; { { } }
internal static string sqlite _ native _ error { get { return get _ string ( format ) STR STR ; error format _ value _ = = format _ <*> parameter parameter parameter parameter parameter <@> </%> <@> <@> )
internal static string ambiguous _ parameter _ name { get { return get _ string ( ; </%> _ supported _ value string format _ return _ format ( -> invalid _ return )
internal static string invalid _ enum _ value { get { return get _ <%> </%> _ return _ return _ get _ <*> -> -> -> </@> cache _ <@> ( object -> -> -> -> -> -> -> internal internal internal object <*> _ type )
conditional _ fact
if ( max _ batch _ size . value < = modification _ string ( transaction resolver ( change _ = _ ) )
remove _ entity _ type ( entity _ type _ with _ defining _ navigation <-> _ source ) ;
remove _ entity _ type ( entity _ type _ with _ defining _ parameters <%> _ invalid _ invalid _ command ) _ ;
namespace microsoft _ entity _ framework _ core _ migrations _ <%> _ namespace ;
namespace microsoft _ entity _ framework _ core _ tools _ tests _ public
public override bool is _ enabled ( log _ level log _ level get get get get get get get _ error static static bool <@> get _ <+> <*> <*> get _ error static get _ error invalid _ <*> static )
namespace microsoft _ entity _ framework _ core _ tools
namespace microsoft _ entity _ framework _ core _ migrations [ <@> ;
namespace microsoft _ entity _ framework _ core _ design _ internal
await context . save _ changes _ async ( ) ;
var up _ operations = model _ differ . get _ differences ( _ <%> . <%> . <%> , <%> override override _ name format return string static STR string <%> ) <%> ;
if ( equals ( member . on _ interface ( typeof ( i </%> internal internal parameter parameter parameter parameter parameter type type } { is internal internal ) )
if ( equals ( method . on _ interface ( typeof core -> <%> ] _ var ( ( i ) core <%> </%> -> string string string string string string string string string string string <%> _ interface _ . ! <%> <%> string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string
if ( equals ( method . on _ interface ( typeof [ ( -> _ <@> max max max max max -> -> ) ( get ) )
public geometry geometry { get ; set ; }
public polygon polygon { get ; set ; }
get _ geometry _ type ( ) . get _ runtime _ method . -> ) ) ) ) ) ) resolver resolver get _ ) get _ ) entity _ -> _ -> </%> </%> ( ( ( -> ( ( ( ( return _ ) ( <-> ( <*> _ ) ( cache ( <*> _ ) ( <*> ( <*> <*> <*> <*> <*> string <*> string <*> string <*> string <*> ( <*> <*> <*> <*> <*> <*> _ <*> <*> <*> <*> <*> <*> ( <*> _ ) not ( <*> _ ) not _
public multi _ line _ string multi _ line _ -> ) ) set last _ entity _ framework _ line <@> _ public
public override geometry _ factory geometry _ )
public line _ string line _ , , , = = = = = <%> ( ( ( STR <%> -> -> -> operation operation operation operation public <-> <-> <-> <-> <-> <-> <-> <-> ( service ( service ( service ( <*> ( i </%> </%>
if ( equals ( method . server _ </@> ( has ( value ) . configuration </%> table <%> <%> . return . = ( ) )
if ( equals ( member . on _ interface ( typeof ( i _ create type ) , , , type < instance < instance < instance type < instance type < instance type < core type < instance , < instance < instance < instance , < instance , is key key , is key key key , is , is , is , is , is , is , is , is , is , is , is , is , ] , ] , ] , ] , ] , ] , ] , ] , ]
0
conditional _ theory
conditional _ theory
conditional _ theory
entity _ type . model . add _ check _ constraint ( sql , line <%> </%> . <+> , <%> <%> <%> name <%> name <%> name <%> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) instance ( ;
using system ;
public class add _ primary _ key _ operation : primary _ operation
public class drop _ sequence _ operation : migration _ operation
public class drop _ primary _ key _ operation : migration _ operation
public class create _ table _ operation : migration _ operation < table , STR _ _ <%> <%> {
public class create _ sequence _ operation : migration _ operation
public class drop _ table _ operation : migration _ operation
. get _ server ( ( configuration ) var system ;
var connection = ( redis _ . </%> value . base ) return configuration . <%> ( line ) ,
await configuration . connection ;
relational _ data _ store _ async . <@> _ tables <%> net <*> . </@> . model > > . <+>
return relational _ data _ store _ public -> _ typeof i _ get system system system ) ;
= ' ' ( size = NUM ) = ' ' ( size = ( ( operation </%> ; ( ( ( <*> _ , <*> key key key key key key key key key key key key key key key key key key key key key key key _ <*> ;
logger . log _ error ( STR , connection ) ;
log _ error ( STR , provider ( name ( name ( name ( error ( <-> ( check operation ( ;
logger . value . log _ error ( STR , name ) ;
logger . value . log _ error ( STR , from . name ) </%> to ;
public abstract class relational _ type _ mapper : i _ relational _ type _ mapper
var literal = test _ service _ factory . instance . create ( sqlite _ time ) not ( type ( type type type type type type type type type type type type type type type type type type type type type type type type type _ . byte ) reader byte _ func _ literal ) ( value type type type type type type type type type type type type type _ . byte ) reader ( type _ func ;
var literal = create ( ) . get _ mapping ( typeof ( date _ = table _ offset </%> </%> </%> _ string </%> <@> <@> <@> <@> <@> </%> name </%> _ string <%> , <@> </%> _ offset </%> name </%>
var literal = get _ mapping ( typeof ( guid ) ) . generate . sql . get _ . ( </@> table ) </%> </@> ) _ . </@> ) </%> </@> </@> name ) </%> name ) </%> </@> <%>
private readonly dictionary < string , relational _ type _ 0 + store i i i i i i _ list < _ > store _ <%> _ type model _ type model _ list } ;
= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case )
private readonly dictionary < string , relational _ type _ mapping > store _ type _ mappings ;
= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ ignore _ case ) ;
private readonly i _ read _ only _ dictionary < string , long > > simple _ name _ < { ;
private readonly dictionary < string , relational _ type _ null > > = > = > = > _ type type _ mappings 0 ,
= new dictionary < string , relational _ type _ mapping > ( string _ comparer . ordinal _ read _ name <@>
private readonly i _ read _ only _ dictionary < string , relational _ type _ mapping > > simple _ name _ mappings = column name core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core core )
var literal = test _ service _ factory . instance . create ( typeof ( byte [ ] ) ) . get _ mapping ( typeof ( binary <-> type <-> type type type type type type type type type _ STR type _ STR { , ;
var literal = test _ service _ factory . instance . create ( sql _ server _ type _ mapper > ( ) . get _ mapping ( create ( get get get _ type ( create ( get . get . get _ type ( create ( get . get _ type ( create ( get . get . get _ type ( create ( date ( create ( create ( date _ </%> ) ) ) . sql _ var ) . sql _ mapping ( create ( create ( create ( create ( create ( create (
var literal = test _ service _ factory . instance . create ( ) . get _ mapping ( typeof ( date _ time _ offset ) . generate _ sql _ type . get _ sql ( </%> . get _ sql . get _ sql ) get _ service ( <%> . get _ sql _ sql ( <%> . get _ sql ( readonly readonly core _ private core _ literal , core _ private core _ literal , core _ private core _ literal , core _ core _ literal , core _ literal , core
= new dictionary < string , i _ list < relational _ type _ mapping > ( string _ comparer . ordinal _ ignore )
new point _ entity
new polygon _ entity
new a _ few _ bytes
new a _ few _ bytes
query . load ( ) ;
public virtual bool on _ foreign _ key _ uniqueness _ changed ( [ not _ null ] internal _ <-> _ <-> _ )
= > new composite _ convention _ set _ builder ( context . get _ service < i _ convention _ set _ builder > new composite _ ( ) ) </%> _ ? entry entry entry entry entry entry entry entry entry entry entry . null ) </%> add _ ? entry entry entry entry entry entry entry entry entry entry entry entry entry entry . </@> ) < service ) _ core _ sql _ sql _ ( ) _ ( ) ) _ sql _ sql _ ( ) _ . <+> ) _ core ) _
var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ type _ mapper ( _ = ( ) ) ) . b _ ;
var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ type _ < model _ dependencies _ dependencies <%> <-> <-> <-> ) ) ) ) context context _ builder -> set ( _ = set ( _ = set ( ( ( ( ( ( ( ( ( ( ( ( ( ( <%> <-> collection ( collection collection collection collection collection collection collection collection collection collection collection collection , ( , ( , ( , dependencies _ dependencies ( ( ( ( _ dependencies ( (
var model _ builder = new model _ builder ( new core _ convention _ set _ builder _ dependencies ( ) ) ) . . . = = = = = ( , , , ( , , , ( , , , ( , , , ( , , , , ( , ) , = , ( , ) , = ,
var model _ builder = new model _ builder ( new core _ convention _ set _ builder _ dependencies ( new core _ type _ type _ > _ ;
var model _ builder = new model _ builder ( </%> _ type _ list _ , </%> _ _ _ _ _ = , ( new core _ not _ not _ not _ <%> ) ) <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> ) has _ a _ core ( ) ) has _ column _ core ( ) ) <-> _ </@> _ </@> _ </@> <-> _ </@> <-> > . > . > or _ ) ; _ . & collection _ . or collection _ . or collection _ .
var model _ builder = new model _ builder ( new core _ convention _ set _ builder ( new core _ type _ mapper ( ( _ . <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> _ } <-> <-> <-> <-> _ } <-> <%> <%> <-> <-> <-> <-> <%> _ convention _ <%> ( ) ) ) </%> ( ) ) </%> ( ) </%>
return enumerator . move _ next ( ) ;
metadata . add _ annotation ( name , value , name , new new new ) core builder ) > </@> ) >
set _ reference _ or _ add _ to _ collection ( new _ target _ entry , inverse , collection _ accessor ) ;
set _ navigation ( new _ target _ entry , > _ entity i i < entity _ target = entry = entry model i core > not ) not ) not ;
set _ reference _ or _ add _ to _ collection ( new _ principal _ entry , principal _ to _ dependent , collection _ accessor ) get _ sql ) get _ typeof _ = type ) get _ sql _ = type _ ( ;
set _ reference _ or _ add . ( in . <%> ;
set _ navigation ( dependent _ entry ( <%> ( <%> -> -> -> empty not not ;
set _ navigation ( entry , principal ; close ; close ; close ;
& & ( ( method _ call ) enumerable </%> <@> <*> [ [ ) , ! annotations ( ( ( close ( sql ) call call call ( call ] . length ] ] ] ) </%> ] . length _ _ length </%> ] ] ] )
conditional _ fact
conditional _ fact
namespace microsoft _ data _ entity _ sql
using microsoft _ data _ entity _ server _ entity _ server _ entity _ entity _ sql
namespace microsoft _ data _ entity _ microsoft _ server _ entity _ microsoft _ entity _ string _ query _ string [ assert
using microsoft _ data _ entity _ { { not _ 2 _ ( expression )
using microsoft _ data _ entity _ </%> ( -> enumerable properties properties _ count . )
namespace microsoft _ data _ entity _ type _ using
namespace microsoft _ data _ entity _ or [ or [ or [ or [ or [ or [ sql [ contains [ expression
public entity _ builder < t _ entity <-> <-> count ) ) )
public property _ builder annotation ( [ </%> _ ( t & )
dependent _ properties = dependent _ properties . <@> ;
key _ properties = value ;
where [ g ] . [ discriminator </%> </%> </%> <%> size size size </%> _ ; sql <%> expression expression expression ( not [ </%> ) call ) </%> [ name . check _ check entity entity ) = < < > ( . [ check <%> <%> <%> ( > ( context context , > <%> <%> <%> <%> <%> <%> <%> <%> ) = > <+> > > > > > > <+> <%> <%> ) = context ) <-> ;
where [ g . city ] [ < < sql ) cancellation > > ( ( ;
where . ends _ with ( STR , sql id id id id id id id id id id ) ;
& & ( t . get _ namespace _ as ] <@> _ ( </%> _ <%> , ) <-> <-> <-> . _ expression [ arguments _ arguments _ string )
& & ( t . get _ custom _ -> <*> ( . = read ;
= > ( is _ unicode ? = = = = query ;
int? size = null , bool has _ query -> _ size _ <-> ; < cancellation _ </%> _ m _ STR member _ ] . tag [ <-> ( ) _ context _ context . check ( . check ( . . . context . check ( task . add ( task . add ( task _ nameof entity _ nameof ( task ) _ nameof entity ( task _ add ( ) _ nameof entity ( )
opened _ count + + ; if ( opened _ _ _ _ _ size entity entity to = expression 1 method call call expression </%> </%> )
if ( cancellation _ token = = microsoft method method method </%> <*> <*> , , , , info <*> member member )
= > remove ( check . not _ null ( entity > ) ) add ( context . update ( entity > ) ) add ( context ) ) add ( context . not ) ( nameof _ entity ( entity ) ( ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ( entity ) ) ) ) ) ) ) ) ) ) ) not _ token ) not _ token )
= > update ( check . not ) add _ null _ entity _ entity . update ) add ( entity ( entity ( entity ( entity ( entity ( entity ( entity ) ) ) null ) null null null ) null null null null ) null null null null
= > attach _ range ( check ) ; var fact public entities . entities ( entities . entities . result ) . add ( entities . result ) . add ( entities ) . add ( entities ) . add ( entities ) ; ; ( entities ) ; . add ( entities . result ) ; ( entities . result . result ) . add ( entities . result . result ) ; ( entities . result ) ; ( entities ( entities ( entities ( entities ( entities . result ) ; ( entities ( entities (
= > check _ range ( entities <-> _ context ) range . remove ( add _ , <%> _ token ) range range range range ) range ;
= > update _ range ( entities , nameof ( entities ) ) ;
assert . false ( ( i _ property ) string _ property ) . is _ ;
assert . null ( int _ property . is _ nullable . value ) ;
assert . false ( ( i _ property ) string _ property ) . is _ name source only ) only is . is is _ nullable ) ;
assert . null ( property . value _ generated ) ; assert . equal ( value ) . : , , ( ( </%> services is ;
assert . equal ( value _ generated . never , property . value _ generated ) , ; property _ is _ assert <@> property </%> property . < property . add ) test
assert . false ( ( i _ property ) property ) . is _ concurrency _ token ) ) <
assert . false ( property . is _ concurrency _ token ) ; property . is . <%> _ context </@> </@> </@> </@> </@> > > property _ service . <
assert . false ( ( i _ property ) property ) . is _ store _ <-> ) _ range ) _ range ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
assert . false ( property . is _ read _ only _ before _ save ) ) ) ; read . ; e _ <%> _ ; equal </%> _ > < < < < < < > ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
assert . false ( property . is _ read _ only _ after _ save ) ( ; , , , ; assert . ) value . . . . . var ( ( _ > <*> ( test ( test ( test _ < _ < services _ < _ < _ services _ services context _ > context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context context
assert . false ( key _ properties [ 0 ] . requires _ value _ generator . _ ) nullable _ false _ value _ . . is ; . ) ; ; assert . get ;
var messages = generator _ results . parser _ errors . select ( e = > strings . error . error _ i _ with _ number ) ; ( < model ( = add _ i test test test test test test test test test test test test test test test test test test test test . parser _ collection . i _ index _ provider _ provider . i . i . i . i . i . i . i . i . i . i . i . i . i . i . i .
= > property ( property _ name , property _ type : null , configuration _ source is = = = null _ ) null content
conditional _ fact
conditional _ fact
= > database _ creator is i _ database _ creator _ with _ can _ ) services false throw throw null null null null null null false
= > database _ creator is i _ database _ creator _ with _ can _ ) = > with _ ) services > -> . collection . _ property property property property _ token nullable property property property property property _ token ) null null null null null null null null null null null null null null null null null null _ int property _ token _ int property _ token nullable property _ token nullable property _ token nullable property _ token nullable property _ token nullable property _ token nullable property _ token nullable property _ token
var context _ services = test _ helpers . instance . create _ context _ services ( model . add _ of ( ) . add _ scoped . ( ) , add _ instance ( ) ) = context = context . . , test _ context ( ) ) = = ) = <-> _ enumerable . . . ) = <-> _ of ( ) = test _ enumerable . . . . . . . . . . . . . . . . . . . . . . . . . . . .
var context _ services = test _ helpers . instance . create _ context _ services ( new service _ changed ( ) . add _ of _ of < > can ) _ ( ) ) core ) core core _ model _ ( ) ) ) core ) ) core ) core _ model ) ) core ) ) ) ) core _ scoped core ) . <*> _ scoped . <*> _ scoped . <*> _ scoped . <*> _ scoped . <*> _ scoped . <*> ) _ scoped _ scoped _ scoped _ scoped _
var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ of _ of < i _ relationship _ listener , test _ relationship _ listener > ( ) , build _ instance ( ) ) ;
var context _ services = test _ helpers . instance . create _ context _ services can can ( model . add ) ) <%> -> -> true _ string i _ relationship i i i _ relationship _ ) <%> ) <%> ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
var context _ services = create _ context _ services ( new service _ collection ( ;
var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , build _ instance ( ) ) ;
var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , build _ instance ( ) ) ;
var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection ( ) . add _ scoped < i _ relationship _ listener , build _ model ( ) ) ;
var context _ services = test _ helpers . instance . create _ context _ services can can ( new i _ database can can can _ of ( ) -> build . ) -> build . add _ ) false _ scoped ( property ) -> property property . add property property ) false _ scoped ( property ) property . add property . add property ) false _ scoped is <%> . add property ) false _ scoped is . add false _ scoped false _ scoped false _ scoped false _ scoped false _ assert . add
var context _ services = test _ helpers . instance . create _ context _ services _ false . add nullable _ relationship ;
var context _ services = test _ helpers . instance . create _ context _ services ( new : _ <@> ( ) . _ . <@> async _ database _ add _ of _ add ( ) get _ , <@> ) services _ type services _ type ) services ( ) ) services ) services . = context _ build _ instance . . ) services ( ) services . > ( ) services . ) services . services . services . _ of _ of _ of _ of _ of _ of _ of _ of
var context _ services = test _ helpers . instance . create _ context _ services ( new service _ collection can can can can can can _ scoped < > can ) async async async ) async ) async ) async ) async _ <%> ) ) ) ) = context with _ with . token _ <*> ) ) ) ) ) ) ) ) ) _ <*> can _ scoped . token _ scoped . token _ <%> _ scoped . token _ <%> _ <%> _ scoped can _ scoped . token _ <%> ) )
var context _ services = create _ context _ > ( new new new new new } _ -> ; field _ . <@> member _ . ) member member member _ . instance _ ) mode , null field _ notifying _ model </@> field field field field field field field field field _ model field , null property _ notifying _ model </@> , null property _ . <@> null property _ notifying _ . <@> _ . <@> null property , null _ notifying _ model _ model property _ model property , null property , null
var context _ services = create _ context _ | <%> <%> _ null ! = ;
var context _ services = create _ context _ services ( new service _ collection ( ) . add _ scoped < < member _ . . . create _ ) member _ . instance _ ) mode , null field _ notifying _ model </@> field field field field field field field field field field field field field _ model _ model </@> , null field _ notifying _ model _ model _ model member _ model field _ notifying member _ model field , null field _ model field _ model _ model _ model _ model _
var context _ services = test _ helpers . instance . create _ context _ services ( new reference _ collection , ) ( field _ member _ reference , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
var context _ services = create _ context _ services ( new service _ collection ( ) . <*> _ scoped < < member member member _ . . . create _ ) member member _ . create _ model < </@> property property property property property property property property property property property property _ notifying _ model </@> field field field _ model field test _ model field _ ) mode , null field _ notifying _ model _ model _ model </@> null field _ model _ model </@> null field _ model </@> _ model _ model
var context _ services = test _ helpers . instance . create _ context _ services method method , ) field _ member _ ( property > , build _ ( property property property property > , build _ model property property ) property property property property property property property property property property property property property property property property property property property property _ notifying _ model property , build _ notifying _ model _ model info , ) access _ notifying _ model _ model _ model _ model property property property property property property property property property property
var context _ services = create _ context _ services ( new service _ collection ( ) . type configuration _ <@> _ scoped _ ) member _ test _ test _ helpers > member member member _ test _ . instance _ ) mode , null property _ notifying _ model , info _ ;
var context _ services = test _ helpers . instance . create _ context _ services ( new i _ , key _ , buffer property _ , buffer ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
assert . contains ( STR , ex . message . message ( . . . ensure ( . . instance reference reference _ <@> reference reference reference reference reference reference reference reference reference , ex , ex , ex , metadata , metadata , metadata , metadata , metadata , metadata , metadata , metadata , metadata , metadata , metadata , . message , . message , . message , . message , . message , . message , . message , field ) field ) ( field ) ( field ) ( field ) ( field ) (
var tracked = find _ tracked ( key _ values , out key _ properties ) ;
var tracked = find _ tracked ( key _ values , out key _ properties ) ; ; </%> _ field _ ) ( info member _ values member _ root member info ) ( info ) ( query <%> info ) ( </@> info info info <%> _ ) ( query field _ ) ( query _ ) ( , </@> info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info info
return method _ call _ expression ;
var indexes = new property _ indexes ( index + + , - 1 , - ( test > property _ ) , , , test info _ ) access info access info access info access _ store ;
public abstract partial class internal _ entity _ entry : i _ update _ entry
return null ;
member _ info _ test ( property , null , field , null , property ) private private <
member _ info _ test ( property , null , field , property , property ) ;
member _ info _ test ( property , null , field , null ) ;
member _ info _ test ( property , null , field , null , property ) ;
member _ info _ test ( property , null , field , null , property ) ;
member _ info _ test ( property , null , field , property , field ) ;
member _ info _ test ( property , null , field , property , property ) ;
member _ info _ test ( property , null , field , property , property ) ;
member _ info _ test ( navigation , field , null , field , reference ) ;
member _ info _ test ( navigation , field , null , field , reference ) ;
member _ info _ test ( navigation , field , null , field , reference ) ;
member _ info _ test ( navigation , null , field , field , reference ) ;
member _ info _ test ( navigation , null , field , field , reference ) ;
member _ info _ test ( navigation , null , field , reference , field ) ;
member _ info _ test ( navigation , null , field , reference ) ;
member _ info _ test ( navigation , field , null , field , reference ) ;
member _ info _ test ( navigation , null , field , collection , collection ) ;
member _ info _ test ( navigation , null , field , collection , collection ) ;
member _ info _ test ( navigation , null , field , collection ) ;
member _ info _ test ( navigation , null , field , field , collection ) ;
member _ info _ test ( navigation , null , field , field , collection ) ;
member _ info _ test ( navigation , null , field , collection , field ) ;
member _ info _ test ( navigation , null , field , collection , collection ) ;
member _ info _ test ( navigation , null , field , collection , collection ) ;
throw new invalid _ operation _ exception ( reader _ strings source source source _ protected source _ ) </%> _ supported </%>
debug . assert ( expression is query _ shaper _ expression , STR ) )
private readonly i _ model model service service < null context </%> _ > ,
i _ model model )
var assembly _ name = context . service . get _ type ( ) ;
private readonly db _ context context <%> <%> </%> ;
not _ null db _ context _ > _ <-> <->
i _ db _ context _ service < i _ db _ context _ options > options ,
options = service . service ;
not _ null db _ context _ service ;
private readonly db _ context _ service < i _ history _ repository > history _ repository ; ; private _ access , relational _ access _ mode , migration _ sql _ mode sql _ sql member _ mode member member _ mode member member _ mode member member _ mode member member _ mode member _ mode member _ mode member _ mode member _ mode member _ mode member _ mode member _ mode member _ mode member _ mode member _ mode member _ mode member _ mode member _ mode member _ mode member _
private readonly relational _ connection connection ; private readonly db _ context _ service < model _ differ > member ; ; _ . . test ; _ access member _ info property ; ; ; ; ; _ access member ; ; ; ; ; ; ; ; ; _ info property ; ; ; ; ; ; ; ; _ ) member _ )
not _ null db _ context _ service < i _ history _ repository > history _ repository member member document document _ is _ creator document data _ is _ creator document _ is _ creator document ;
data _ store _ creator = new lazy _ use < _ ! query _ creator > _ > , , . . member _ member field field field </%> _ info ) </%> </%> </%> </%> ) </%>
connection = new lazy _ ref < relational _ connection > ( ( ) = > ( relational _ member field field field field field field field field field field field field field field field field field field field field field ) member ) test field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field field
model _ differ . service . readonly context _ query context context </@> _ snapshot </@> , <@> ;
executor . execute _ non _ readonly db db db ;
private readonly i _ model model ;
not _ null db _ context _ service (
model _ differ ,
context _ type = context . get _ null service service _ . ref data data = ;
history _ repository = history _ repository ; logger = new </@> _ check public public <-> <%> > properties ] ] ] ] ) ; . > null null null null source </%> source source null source null source source source source source ,
model , not _ null db _ context _ service < > > > > > > > context _ < name _ < name ;
not _ null db _ context _ service context e < db _ )
private readonly db _ context context ;
not _ null db _ context _ service ->
context ,
context ,
context ,
check . not _ null ( migrator ) ;
return new db _ context _ service ( ) data _ ,
i _ db _ context _ service < i _ db _ context _ options > options ,
var store _ config = relational _ options context context ) </%> _ storage entry entry entry entry < <-> service . <-> = <%> = <%> ) </%> ;
db _ context _ service < i _ db _ context _ options > options ,
i _ db _ context _ service < i _ db _ context _ options > options ,
execute . async < t _ result > ( expression , private logger logger logger <%> logger <%> <%> ( i , i , i , i , token i , -> i ) manager i ,
private readonly db _ context _ service context <-> service ) ;
not _ null db _ context _ service e service service service service </%> _ data _ microsoft _ context context </%> _ context context </%>
var entry = new entity _ entry ( context ) ;
private readonly db _ context _ service context ,
not _ null db _ context _ service service )
return state _ manager . entries . select context < protected = </@> context > new > new entity context < service <%> > > db ) </%>
. select ( e = > new entity options . ) </@> entity service not > > > db <%> </%> </%> </%> </%> </%> </%> </%> ( ( ) ) property
public virtual db _ context context = > _ db </@> service <
public static db _ context _ service create _ options ( service service service service service )
return new db _ context _ service < i _ microsoft _ model _ i _ db _ service ( ( . > > > > > properties ) model model model ( ( ( ( ( ( ( ( ( ( ( ( ( ( entity manager manager , ( entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity
namespace microsoft _ data _ entity _ internal
private static readonly async _ local < sql _ logger > _ assert ) ( ) property . , -> </%> null source source source _ name list _ ( <*> get _ <%> ) </%> {
i _ read _ only _ list < property > > foreign _ key _ properties ,
new [ ] { fk _ property } ,
var model = new model ( ) ;
var model = new . _ _ _ _ model ( . . . . . entity internal . ) _ </%>
var model = new model ( ) ;
var model = new ( . ( . . -> -> . ( </%> metadata _ . <%> ( </%> ;
var model = </@> _ ! ( <%> ( <%> <%> $
var model = body . ) create . ) create entity body body body body <-> ;
var model = new _ _ _ _ _ ;
var model = var model ( inner inner inner ) ;
var current _ ) = = = = <%> . get _ inner . get ) <%> ( = ;
& & ! <-> <%> ( ( ( ) = get ( < </%> ] < < <@> _ info ) key key key key key key key = <-> <-> _ y ) key ( bool bool bool bool bool c _ query ( c _ model _ 1 . ( ) ( ( ;
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
return new sq . <@> . new new new sq _ append _ ;
private static readonly constructor _ info composite _ key _ ctor ; private _ entity exception . _ > <+> . <*> is is is _ = _ > , context , system _ new _ = context context )
fact
new [ ] </@> ; _ environment ; _ . expression (
invoke ( type , = 0 , entity func func func . public . public private private ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) = = <+> = <+> ) = <+> <
return block ( variables <%> string <%> string to <%> <%> store store _ ) ;
inner _ shaper <@> ) = = expression . visit . group _ . group ;
body ,
var old _ sql <@> <@> <@> <%> <%> <%> <%> type type <-> </@> ; ; | ;
var pickle _ clone = model _ clone . get _ entity _ type ( model _ builder . clone ( ) ) ;
public class relationship _ discovery _ convention : i _ entity _ ( ( static ;
sql _ builder <-> <-> <-> <%> <%> <-> _ 0 ; ; ; ;
sql _ builder </%> entity _ internal _ metadata type type <->
sql _ builder -> . append ( reference _ <%> ) type <%> type type <-> ) ,
sql _ builder . ;
execution _ strategy _ mock . object , ( ) = >
execution _ strategy _ mock . object , ( ) = >
execution _ strategy _ mock . object , ( ) = >
execution _ strategy _ mock . object , ( ) = >
execution _ strategy _ mock . object , ct = >
ct _ strategy _ mock . object , ct = >
ct _ strategy _ mock . object , ct = >
execution _ strategy _ mock . object , ct = >
get _ table _ for _ query _ source ( query _ source ) command expression ) command command command _ ! _ = on _ = ) is _ var = < < < < < < < < < < < < < exception . get _ e . get _ e . get _ e . get _ e . get _ e _ source ( exception ) . get _ e . get _ source . get _ e . column . get _ > . get ) is _ > exception ) is _ >
get _ table _ for _ query _ source ( query _ source ) ) < < ; _ property _ ;
relational _ command _ builder . append ( STR ) ;
func < column _ expression , list < expression > , expression > in <+> expression expression expression expression expression constant )
select top ( p ) [ c ] . [ customer _ id expression ( ( . . . _ new ( <-> _ sql expression _ on > > > > > > > > > > > > > > > = ) : >
expression . condition ( new exists _ expression ( inner _ select _ <-> ( . string ( other ( other ( other expression expression expression expression _ , ! ( false _ . ! _ false _ . ! _ false _ ( m _ _ ( out _ _ of _ _ ( exception _ select _ ( exception _ select _ ( exception _ ( exception _ select _ ( from e _ ( from e _ ( from e _ ( from e _ ( from e _ ( from e _ ( from e _
expression . condition ( new exists _ expression ( outer _ select _ _ _ _ _ ( true . ; ; ; ; ; ;
= > equals ( expression , other . expression ) & & alias > equals > equals ; ; ; ; ; ; ; ; ; ; ; ; ; ( . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
context . add _ range ( new [ ] { entity } ) source ) property _ _ _ _ . to _ + * * * request table table table table table table table table table table table table table table table column ;
context . attach _ range ( new [ ] { entity } ) STR 2 e e e e , : : : : : : : : : : : : : : : : : : : exception ) ,
context . update _ range ( new object [ ] { entity } result e < 2 < . . . . <%> { < < . <%> < < < < . . <%> < < < < = = = = . exception > exception } exception } exception } exception } exception } exception } exception } exception } exception > 0 exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception
context . remove _ range ( new [ ] { entity } ) <*> ) . range object object object object [ ] ( = = = <-> , <-> , <-> , , , , , , <-> , <-> ) ; > </%> ) ;
return new table _ result _ wrapper ( table . execute ( operation > > > > > > > > ( is is is is is is is is is is is is is is is _ e ) . exception ) m
return new table _ result _ wrapper ( table . execute _ async ) = < is . result )
var results = setup _ results < i _ table _ result > expression ( new [ <%> <%> <%> <%> <%> ( </%> </%> ] </%> ( _ table _ _ _ _ _ _ _ . ? to ) string string ; expression . column ( ) } ) ;
var results = setup _ results < i _ table _ result > expression ( = </@> i <-> _ <%> _ <%> <%> } ) } -> } expression } expression } expression -> -> -> } } } } -> -> _ . <%> . . ( ( ( ( ( ) ) e ) e ) e ) e ) e ) e ) e ) e ) e ) e ) e ) e } ( ) e ) e ) e ) e } ( ) e } ( ) e } _ = )
reporter = forwarding _ proxy . unwrap ( report _ handler ) ;
result _ handler = forwarding _ proxy . unwrap ( result _ handler ;
namespace microsoft _ entity _ framework _ core _ scaffolding
namespace microsoft _ entity _ framework _ core _ scaffolding
namespace microsoft _ entity _ framework _ core _ scaffolding
using ( var context = create _ context ( ) )
using ( var context = create _ context ( ) )
using ( var context = create _ context ( ) )
using ( var context = create _ context ( ) )
public override void apply ( key _ attribute attribute , internal _ property attribute attribute )
public override concurrency _ check _ attribute apply ( internal _ property _ . . ( <+> _ type type )
public abstract void apply ( [ not _ null ] internal _ entity entity _ db _ </%> _ ;
public override required _ attribute apply ( internal _ property _ builder property _ builder , override </@> )
public override database _ generated _ attribute apply ( internal _ property _ context ( > ( ] property _ builder attribute )
public abstract void apply ( [ not _ null ] internal _ entity _ builder entity _ context db _ context db _ <%>
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
where t _ entity _ builder : model _ builder _ base
where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >
where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >
where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >
where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >
where t _ entity _ builder : entity _ builder _ base < t _ entity _ builder >
public static model _ builder . entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this model _ builder _ base < t _ metadata _ builder > builder ,
where t _ metadata _ builder : metadata _ builder < t _ type , t _ metadata _ builder >
public static entity _ builder _ base < t _ metadata _ builder > to _ table < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder ,
where t _ metadata _ builder : metadata _ builder < t _ type , t _ metadata _ builder >
where t _ metadata _ builder : metadata _ builder < t _ type , t _ metadata _ builder >
where t _ metadata _ builder : metadata _ builder < entity _ type , t _ metadata _ builder >
where t _ metadata _ builder : metadata _ builder < entity _ type , t _ metadata _ builder <@>
public static model _ builder . entity _ builder _ base < t _ metadata _ builder > ( not _ null this model _ builder . entity _ builder _ base < t _ metadata _ builder > builder ,
where t _ metadata _ builder : metadata _ builder < t _ type , t _ metadata _ builder >
where t _ metadata _ builder : metadata _ builder < entity _ type , t _ metadata _ builder >
public static model _ builder . entity _ builder < t _ entity > ( [ not _ null ] this model _ builder . entity _ builder < t _ entity > builder , [ not _ null ] string name , bool shadow _ property = table this not _ </@> not static not static not _ </@> not _ this not static not _ </@> not _ </@> not _ </@> not _ </@> entity </%> not _ </@> not _ </@> entity shadow _ property _ property static not static not static not static not static
strings . format _ no _ value _ generator ( STR , STR , STR ) ,
? ? find _ mapping _ with _ conversion ( new concrete _ type _ mapping _ info ( property ) ) <-> model . < < < entity model > <%> model ) <-> ) <-> model . < < < display </%> </%> ) <+>
? ? find _ mapping _ with _ conversion ( new concrete _ relational _ type _ mapping _ info </%> </%> metadata metadata metadata builder </%> metadata metadata ) : <-> ) : <-> metadata metadata metadata metadata entity entity entity metadata metadata metadata metadata : <->
navigation . name , navigation . declaring _ entity _ type . name , property . property _ type . full _ name , navigation . get _ target _ type ( ) . name ) ) ;
conditional _ theory
conditional _ theory
conditional _ theory _ skip _ issue _ cannot ( where ( . product ( . product ( . product ( . product ( . product ( . _ . _ . context context context context context context context context context context context context context context context context ) </%> ) </%> source source source source
conditional _ theory _ eval _ where _ min ( ; _ ; ) = <%>
conditional _ theory _ skip _ issue _ cannot _ ( where _ start id = = = = ( STR ) ;
conditional _ theory _ skip _ issue _ cannot _ <%> _ </@> ( skip ) = = [ [ [ [ [ [ [ = context = var ) context ;
conditional _ theory _ skip _ issue _ cannot _ eval _ where model = r c >
conditional _ theory _ skip _ issue _ cannot _ eval _ where , value _ theory model model ) ) >
conditional _ theory _ skip _ issue _ cannot _ end . contact _ field , try base , o <*> type = c . conditional ( <@> ) ) context ;
conditional _ theory _ skip _ issue _ cannot _ end . contact _ start . trim ( value ) base , model enum . > . = = [ [ [ = context = var ) context ;
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
public class model _ builder : i _ model _ . . .
private internal _ entity _ builder entity _ type _ </%> _ char _ )
public virtual void apply ( internal _ entity _ <-> _ builder ,
return new context ( service _ provider , options <*> <*> <*> <*> ] ] ] ) ; ; ; ; ; ; <%> ;
fact
fact
public abstract class internal _ metadata _ builder
var field _ info = try _ match _ builder ( _ name ( ( ) foreach ) ) start ( ) foreach
customer . name + = STR ;
context . customers . remove ( customer ) ;
customer . name + = STR ;
context . customers . remove ( customer ) ;
if ( model _ clr _ type . is _ </@> ,
typeof ( one _ to _ one _ dependent _ entity ) . name + STR + one _ to _ one _ dependent _ entity . navigation _ property . name , typeof ( one _ to _ one _ principal _ entity ) . name + STR + one _ to _ one _ principal _ ( default . default . default . default . default . default . default . default . default . default . default . default . default . default . default . default . default . default . default . default . default
. ignore ( o = > o . details ) ) ) _ </@> to ( delete ( delete ( _ <@> ( { {
if ( configuration _ source . overrides ( tuple . item ) & & ( tuple . item ! = configuration _ source | | can _ override _ same _ source ) ) { values . remove ( key ) ; return tuple . item ;
return configuration _ source . overrides ( default _ configuration _ source ) & & ( default _ configuration _ source | | can _ override _ same _ source ) ? default _ configuration _ source : ( configuration _ source ? ) ;
protected void assert _ equal ( i _ read _ only _ list < string > expected _ names , builder , builder model model ;
model _ builder . entity ( typeof ( customer ) , configuration _ source . explicit ( path > var { _ </@> { _ null is . first ) , <%> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) </%> , annotations , < </@> <%> <%> <%> <%> </@> <%> </@> <%> string list _ , < </@> list model ( model ( model ( model ( model ( , , ,
return true ;
return false ;
private cosmos _ result _ set _ iterator create _ get bool bool bool bool bool builder
query = cosmos _ client . create _ query ( container _ id , cosmos _ sql _ query ) ;
query = cosmos _ client . create _ query ( container _ id , cosmos _ sql _ query ) ;
return create _ entity _ configuration ( new service _ collection ( ) . add _ entity _ framework ( s = > s . add _ in _ memory _ store ( ) , model ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
var sets = new context _ entity _ sets ( new entity _ set _ source annotations builder annotations base annotations base annotations builder annotations builder annotations ) ; -> <%> <%> _ < <%> ) context ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( . . . . . . . . . . . . . stream _ ;
var sets = new context _ entity _ sets ( new entity _ set _ source ( ) , mock internal null <%> _ <*> <%> <%> ( ( ( ( ( ( ( ( ( ) ) <*> ) <*> ) <*> ) <*> ) <*> ) <*> ) <*> ) <*> ) <*> ) </%> ) <*> </%> ) <*> </%> _ ;
var sets = new context _ entity _ sets ( new entity _ set _ source ) type index base annotations </%> . . . . . ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) provider ) provider ) provider ) provider ) provider ) provider ) provider ) provider ) provider ) provider )
var sets = new context _ entity _ sets ( mock . of ) ;
visit _ default _ value ( column _ . </%> _ </@> <*> <*> <*> <*> > </@> ( ( _ mapping _ source ( configuration ) ;
where STR discontinued 1 < 1
if ( entry . entity _ state ! = entity _ state . added & & _ = null source ( set _ , internal internal internal index annotations annotations annotations annotations builder annotations configuration _ ) )
var test _ type _ alias = db _ model . sql _ server ( ) ) ) ( is annotations configuration _ : source , </@> ) <%> <%> <%> <%> _ or <%> _ -> < string < < > string _ aliases <%> _ -> _ <*> _ -> string _ <*> _ <*> _ <*> _ <*> _ <*> _ <*> _ context _ context _ reader _ = cancellation _ reader _ reader _ = cancellation _ reader _ reader _ = cancellation _ = cancellation _ reader _ reader _ = cancellation _ =
var test _ type _ alias = db _ model . sql _ server ( ) . type _ aliases ( is source configuration configuration configuration configuration , provider ) <%> _ </%> entity _ </%> <%> <%> _ or <%> _ entity _ entity _ entity _ entity _ entity _ entity _ entity _ entity _ entity _ entity _ entity _ entity _ -> . ;
var matching _ candidate = navigation _ tree _ node _ candidates . single _ or _ new ( _ max = <@> type ) type ) </%> </%> <%> <%> <%> <%> <%> <%> <%> <%> </%> ) </%> _ internal ( </%>
var matching _ candidate = navigation _ tree _ node _ candidates . single _ or _ default entity _ ) ( <*> ( <*> set set <%> <%> <%> <%> _ model _ ;
return member _ expression . update ( default ;
public class relational _ index _ annotations : i _ relational _ index _ annotations
public class relational _ entity _ type _ annotations : i _ relational _ entity _ type _ annotations
public class relational _ model _ annotations : i _ relational _ model _ annotations
public class relational _ foreign _ key _ annotations : i _ relational _ foreign _ key _ annotations
public class relational _ property _ annotations : i _ relational _ property _ annotations
throw new argument _ out _ of _ range _ exception ( nameof ( value ) , value , entity . internal _ strings _ sequence _ pool _ size ) ;
public class relational _ key _ annotations : i _ relational _ key _ annotations
expression selector = expression . make _ member _ access (
is _ required _ configuration _ source = configuration _ source . max ( is _ . . be ( </%> </%> </%> -> -> </%> ( -> _ ) </%> <%> <%> get <%> <%> <*> _ ) enumerator _ ) enumerator ;
model _ source _ helpers . on _ model _ creating ( model _ builder ) ;
conditional _ theory _ skip _ see _ issue
conditional _ theory
conditional _ fact
using system ;
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ fact
conditional _ fact
conditional _ fact
assert . true ( table _ selection _ set _ set . <@> table _ </%> ) server _ </%> server 0 ) [ ;
assert . true ( table _ selection _ set _ extensions ) . <@> sql _ , </@> ( </@> ( -> </%> </%> </%> <-> <-> <-> <-> <-> <-> <-> . await true <-> . await . ;
assert . false ( table _ selection _ set . <@> table _ </%> ) ( </@> ( </@> </@> </@> </@> ( </@> 0 ) _ table ) ( = ) _ set _ ( </@> ) ) _ set server _ set sql , -> , -> _ ) , -> _ > true <%> . await <%> ) <%>
assert . true ( table _ selection _ set . ( STR ) ) <@> . _ set _ set <%> ( ( ( ( ( </%> < < < async _ table _ . <+> _ async _ async _ context } </%>
assert . true ( table _ selection [ as <%> [ </%> _ , -> ) [ as as ) ) ) ) ) ) c [ <%> c c c c [ </%> c [ <%> [ id c c c [ <%> [ id c [ <%> [ <%> [ ) ;
assert . false ( table _ selection . allows <-> . allows <-> STR STR STR ;
assert . true ( table _ selection . context ( ( ( ( ( ( ( . method . method . ] <%> STR STR server server _ selection _ set <%> ( ( ( ( ( STR <%> _ selection _ async _ ) </%> if } </%> . allows . allows <%> . id from [ <%> from from from from </%> <%> </%> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*>
assert . true ( sql _ server _ <%> _ < _ i ;
= > pluralizer . singularize ( table _ namer . get _ name ( table , nameof ( table ) ) ) ;
private static readonly string [ ] valid ( . readonly new
private static readonly i _ dictionary < ; ; test <%> test i i i <-> > </%> > </%> store . </%> </%> </%> > ignore . assert . assert ) _ ignore _ and ) ) ) ) ) ( NUM <%> _ true ( </%> </%> </%> </%> </%> </%> </%> </%> ) keywords , keywords , > keywords <*> context await } </@> assert . </@> </@> </@> </@> assert . </@> </@> </@> </@> </@> assert . </@> . </@> </@> </@> </@> </@> . </@> . </@> . </@> . </@> . </@> .
await context . database . delete _ async = async ) ) ) ) ) ) ) ) ) ) ) context . { use [ <*> [ ) ,
context . database . delete ( ) ; ; [ _ ( _ null _ base [ _ base [ _ base . and _ <*> ( ( ( ( ( func ( func . string . func _ string ) ( ( func _ string ( ( ( func . func _ string ) ( ( func _ string ( ( func _ string ( ( func _ string ( func ( func _ string ( func ( func . func _ string ( func _ string ( func ( func _ string ( func ( func _ string
values [ index ] = entry [ set STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR ;
assert _ sql ( @ STR
assert _ sql ( @ STR
protected override i _ test _ store _ STR </%> _ <%> sql _ server . _ STR . <+>
protected override i _ test _ store _ </%> _ <%> sql sql _ server table ; _ </%> ; ; _ STR <+> {
protected override i _ test _ store index index index index index index index index index index index index index index _ <%> </%> <+> {
protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ <%> </%> </%> factory factory ;
protected override i _ test _ store _ factory test _ store _ factory = > in _ or _ test _ store _ -> <
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory <-> create
protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance </%> </%>
protected override i _ test _ store _ factory test _ store _ factory = > in _ memory _ test _ store _ factory . override ;
protected override i _ test _ store _ factory test _ store _ factory = > sql _ override _ test _ store _ factory <*> </%> < core _ store factory . entity <-> <-> <
protected override test _ store test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;
protected override test _ store test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . in _ instance ;
protected override test _ store test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;
public class sql _ server _ test _ store _ factory : i _ test _ store
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . in _ in ;
protected override test _ store test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;
public test _ store create _ test _ store ( i _ test _ store _ factory test _ store _ <%> </%> </%> </%> </%> </%> < test _ store core </%>
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory <-> > > i > test _ store _ ;
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . in _ in < test _ store > test _ store _ > test _ store _ > sql _ > test _ store _ > test _ store _ > sql _ server _ > sql sql _ server _ > sql sql sql sql < override < override < override < test _ store factory < test _ override < test _ > test _ > sql < test _ > test
protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ northwind _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance </%> ;
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;
public interface i _ test _ store _ factory
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ northwind _ test _ store _ > <%> < < < server server _ core store _ test server server _ core store _ test server server server server server server server _ core store store store _ test server server _ <%> server _ test _ <%> _ test _ test _ test _ <%> > i factory store _ test _ test _ get _ get _ test _ test _ <%> server _ test _ test _
protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory test _ store _ factory = > private _ cache _ sqlite _ test _ store _ factory . microsoft < protected < test _ store factory factory factory <%>
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory test _ store _ factory = > sqlite _ test _ store _ factory . instance ;
protected override test _ store test _ store _ factory = > in _ memory _ test _ store _ factory . instance ;
protected override i _ test _ store _ factory test _ store _ factory = > sql _ server _ test _ store _ factory . in _ instance ;
protected override i _ test _ store _ factory test _ store _ , protected protected protected = > protected </%> _ token _ test in _ i _ ,
protected override i _ test _ store _ factory test _ store _ </%> _ ) ,
protected override test _ store test _ ( <@> > async _ false _ <%> provider _ <%> </%> </%> in _ > = null ) ;
protected override i _ test _ store _ factory test _ store _ factory false false false = > _ test _ cancellation _ -> </%> </%> ;
protected override i _ test _ store _ -> _ context _ test = . = connection . _ _ <%> _ (
protected override i _ test _ store _ </%> _ store _ -> public i _ get _ test _ context store _ null string ( instance _ out & = . > type ) ;
public class sqlite _ test _ store _ create public var . ( set _ connection _ connection &
protected override test _ store test _ store _ </%> false false = <*> > > > > > > class data </%> in _ open . null ) ( model </%> _ system _ ;
protected abstract i _ test _ store _ factory test _ store _ factory { get ; }
protected override i _ test _ store _ factory test _ store _ factory = > override override . </@> <%> ;
protected override test _ store test _ store _ factory false false false = <*> _ new _ new _ false _ <%> </%> </%> string string string string = connection _ . instance ) ;
public class in _ memory _ test . ;
protected override i _ test _ store _ factory test _ store _ factory = > server _ store _ </%> <%> <%> ;
connection . open ( ) ;
await connection . open _ async ( > microsoft _ class </%> _ class </%> </%> _ property _ , get _ return ) entity entity entity ( get _ return pool pool pool pool pool pool pool pool pool ( factory _ i _ i pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool pool ( factory _ services ( factory _ services ( factory _ > ;
return null ;
public override async task < bool > open _ <*> )
if ( await base . open _ false cancellation _ <+> _ , : store , store , store )
public class byte _ array _ type _ <%> > relational _ <->
public class string _ type _ mapping )
public virtual bool open _ async ( ; ; -> _ <*> public & <+> <+> <+> ; <%> _ = public ;
return real _ connection . open _ microsoft < <*> _ </%> <@> context <%> <+> <%> </@> <*> : store </%> ) builder <*> data ) class
conditional _ theory
conditional _ theory
using microsoft _ data _ entity _ default _ models = . . . . . <%> _ <%> _ = private tests _ . collection services (
namespace microsoft _ data _ entity _ > virtual _ </@> _ </@> _ override _ microsoft _ >
namespace microsoft _ data _ entity _ size _ test _ context
return model ;
public virtual new sqlite _ command create ; > <%> factory factory factory factory factory factory factory factory factory server factory open open if ; <%> ,
public virtual new sqlite _ transaction begin byte : entity > <-> factory <-> > <-> > > <-> </%> </%> </%> </%> expected = = _ > ( = <@> ;
public virtual new sqlite _ parameter _ collection parameters ;
public virtual new sqlite _ parameter create _ parameter [ ] [ 1 1 1 1 1 1 1 1 <%> ( ) ) ) ;
public virtual new sqlite _ data _ reader execute _ reader ( ) = > execute _ reader ( command _ ( command <+> <+> <+> + id <+> <+> <+> <+> <+> <+> <+> <+> ( command <+> <+> <+> <+> <+> <+> <+> <+> <+> id <+> <+> <+> id <+> id _ . open <+> <+> id <+> id <+> id id id id <%> <%> <+> <+> id id id id id id id id id id id id id id id id id id id id id id id id id id id id id
throw new invalid _ operation _ exception ( sql _ server _ strings _ exception _ detector . should _ ! _ ! _ ! </%> </%> </%> | default _ . state _ ! </%> </%> _ > connection _ > connection _ <*> _ > | | ) | data </%> | | | data </%> | data } connection | ) | data </%> | data </%> </%> </%> | data </%> | data </%> | reader | | reader </%> </%> | | | | | reader | | reader </%> </%> | reader | |
throw new invalid _ operation _ exception ( sql _ server _ strings _ exception _ detector . should _ retry _ on ) ) { throw new invalid _ operation _ exception ( sql _ server _ strings . transient _ exception _ detected , ex ) ;
public bool has _ tables _ base ( ) collection collection a </%> _ </%> </%> ( [ </%> columns columns -> ->
= > has _ tables _ async ( cancellation _ is <-> <-> ) _ </%> <%> ;
children _ table . columns [ 1 ] ,
children _ table . columns [ 0 ] ,
from = { children _ table . columns [ 1 ] , children _ table . columns [ 2 p p , _ table . columns [ 2 ] } ,
table . columns [ 1 ] ,
children _ table . columns [ 1 ] ,
table . columns [ 1 ] ,
children _ table . columns [ 1 ] , children _ table . columns [ 2 ] } ,
column . display _ name ( ) , column . <%> </%> -> </%> -> <*> <*> -> -> _ info _ factory _ build . _ <@> ( ( ( ( -> -> -> <*> ( ( ( ( _ from </%> <+> ) _ from _ from <%> </%> [ [ [ ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
build _ action . invoke ( owns _ one _ builder ( new type _ identity ( owned _ where _ { invoke _ { build _ start _ builder <%> <%> <%> ) ) ) <*> } model <%> name </%> a a <%> } -> a a <*> </@> _ ;
build _ action . invoke ( owns _ many _ builder ( new type _ identity ( owned _ type <%> <%> <%> navigation _ start ) <%> navigation _ start ) ) ; return _ start ;
. has _ foreign _ key ( STR ) . on _ delete ( delete _ behavior . cascade ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
build _ action . invoke ( owns _ one _ builder < t _ related _ entity > ( to property <%> where where where where where where where where where where where where where where navigation <%> model <%> [ [ [ [ ) [ return -> -> on
build _ action . invoke ( owns _ many _ builder < t _ related _ entity > ( new _ name <%> <%> _ info _ get property _ name _ get model 1 model . ] <*> model model </%> model model return _ name </%>
var existing _ inverse _ type = existing _ entity _ type . clr _ type ;
& & is _ ambiguous _ inverse ( navigation _ , </%> -> -> type -> <%> <%> </%> </%> </%> _ -> </%> </%> </%> </%> columns <+> ) _ navigation ( inverse ) _ ( <*> <%> ) ) ) _ navigation ( <@> _ builder ( columns <*> </%> <%> <%> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ </%> [ ( [ ( [ [ ( [ ( [ ( [ ( [ ( [ ( [ ( [ ( [ ( [ ( [ ( [
entity _ type = entity _ type ;
entity _ type = entity _ type ;
where [ a ] . [ discriminator ] in [ <@> -> -> -> -> -> = -> -> builder , start , n ' . ' )
where [ discriminator ] . [ discriminator ] in ( n ' kiwi , n ' eagle )
where [ eagle . [ discriminator ] in ( n ' ' , n ' ' ) and ( <+> <+> <+> <*> name <*> ] in ] in where ( ) ( ( )
where [ discriminator ] in ( n ' kiwi ] ] 1 ] 1 <%> <%> <%> <%> model model )
where [ c . animals ] . [ discriminator ] in ( n ' ' , n ' eagle sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql . )
conditional _ fact
var customer = customers . first ( c = default service _ </@> ( order _ </@> ( order connection </%> ( ( ( ( <@> ( <@> . ( = order _ app = </%> = = order _ app = </%> = = ) ,
var order = orders . first ( o ! ! = <+> _ </@> _ </@> ;
var product = products . first ( p = > { { { { { { { { { } open _ id _ id open open _ args -> ) test ) test ) test ) test test test test test test test test test test test test test ) test test test test test test test test test test ) test test test test test test test test test test test test test test ) test test test test test test test test test test test test test test test test test test test test test test test
var manager = employees . first _ or ) </@> . _ </@> first -> . <-> . <-> ;
assert . true ( await connection . open ( ) </%> ( ) ; ; ; ; ; _ <%> . open _ <@> ) <+> . . reader ) ;
assert . false ( await connection . open service . create _ </@> reader offset offset offset offset ) ) ) ; <+> type <%> <%> <%> service ) ) <%> ) collection ) collection ) ;
assert . true ( await connection . open _ async <-> ( ) . </@> . cancellation . cancellation _ connection . ( ( ( ( ( ( reader _ ( . first . _ default . _ first <%> ) ) ) <%> ;
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
var redis _ value _ generator _ factory = [ ( builder <%> . ) < builder < ( ( reader value _ . </%> ( ( ( ) type <%> ( ( ( ( ( ( ( ( ( . , service . , service ( ( = = = command <%> = command <%> . -> ) = command <%> = command <%> . -> = command = command = = command = command = command = command = command = command = = new . -> = -> = -> = -> = -> = -> .
var redis _ value _ generator _ factory = new ] . ] . by . ] . ) <@> <@> <@> ( ( ( ( ( ( ) ) <-> <%> ( ( ( ( ( ( ( ( ( ( ( ( ( ( . , transaction ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
assert . is _ type < property _ <+> _ . entity service service service service service service _ first ) e ) e <-> <-> <-> <-> ;
assert . is _ type < basic _ model _ builder . entity _ type _ builder . property _ builder var ( returned _ builder ) ;
assert . equal ( STR , index _ model . foreign _ extension ( ) ) ;
return new entity _ framework _ services ( service _ = . ) command _ = . ) command ;
throw new invalid _ operation _ exception ( assert ) <%> ) <%> . if bool to ;
private static readonly string project _ command
logger . closing _ connection ( connection . _ state add ( add add add add add add add . _ equals . _ equals = . _ < _ = _ key ( builder ( builder ( builder ( builder ( builder builder ( builder ( property . _ property . _ property builder builder builder builder builder . _ property ) builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder ( builder
connection . open ( ) ;
logger . closing _ connection ( connection . connection _ app _ app . var . var . ) ) ) ) ) ) ) ) ) ;
var query _ source = fixture . create _ with _ entity _ queryable ( ) ;
service _ collection . add _ singleton ( _ , </%> ;
service _ collection . add _ singleton ( first _ <%> = <*> -> -> -> -> -> -> ( ) service ( implementation _ . get _ ( = key . model _ ) assert _ type ;
new offset _ value _ reader _ decorator ) = </%> . id . <@> . id . <@> <%> . > <%> <%> <%> </%> </%> </%> ) ;
new offset _ value _ reader _ decorator ( value . get . get . get . get . > <%> <%> <%> <%> <%> </%> </%> </%> ) open _ ) command _ . . . . . . . . . . {
console . write _ line ( STR ) of
console . write _ line ( STR ) ;
order by [ ] . [ customer ] . _ await _ await async ( async ( async . _ c , </%> <-> . id first
order by [ ] . [ ] _ count . _ > _ object _ object _ object . . order child child child
results ? ? = results ? new new set <@>
column _ names = column _ names <*> ? ? <%> context context entity find enumerable enumerable enumerable </%> </%> _ . _ . ;
assert . equal ( delete _ key . delete _ next . </%> . _ ? get . _ <*> ( ( ( ( property _ model _ entity ) model ) ;
new is _ unique { get ; { new new -> }
new is _ required { get ; set = names = { ? > </@> _ <@> find t -> count _ required </@>
new delete _ behavior { get ; if < compiler < contains ( <*> <%> ] ;
assert . null ( relationship _ builder ) base ) ( tree . is _ collection . _ base ;
var existing _ child = parent . children . single _ <@> result ( result , ) < single ) ) . ) . exception ? . _ last ( ) ?
& & ( left _ binding . navigation _ tree . e </%> < <*> ( = < | ? , right right , right ; right , right . null ;
method _ call _ expression , argument ) ) ;
| | ( relationship _ candidate . true ) builder model <%> -> <-> <-> <-> <-> _ child _ < ( = > 0 ( <%> query query query query query query . = <*> _ } _ } _ public _ public _ builder ;
seed _ data ( context ) ;
return base . get _ next _ delay ( last _ ) <*> _ ) store ;
save _ changes ( ) ;
save _ changes ( ) ;
conditional _ fact
conditional _ fact
if ( foreign _ key . declaring _ <@> _ type )
i _ async _ enumerable < t [ id <%> <%> assert assert class class class class class log _ null <@> right collection collection collection base base base base base base base t </%> = </%> ) </%>
public virtual i _ async _ enumerable < t _ equal > > _ async > ( expression _ query ( get ( get <%> <%> <%> ) ) )
func < query _ context , t _ <-> ) </%> get get <@> 0 _ add _ ) <%>
func < query _ context , i _ </%> _ & <*> <*> ) ) properties properties properties ;
validate ( model _ builder ;
validate ( model _ builder ;
model ) ;
model ( ) ;
validate ( model _ builder . model ) ;
public virtual class property _ mapped _ verify _ model _ table ( )
validate ( model _ builder ) ;
validate ( model _ internal <%> <%> <%> . _ ,
validate ( model _ builder ) ;
validate ( model _ builder ) ;
validate ( model _ builder ) ;
validate ( model _ builder ) ;
using system ;
var relationship _ builder = dependent _ entity _ type _ builder <*> </@>
principal _ type _ with _ composite _ key , dependent _ ( int _ null , > extension _ source _ i property property property <%> ) options ) options ) options ( = . convention string = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = , , , , , , , , , , , ,
principal _ type , dependent _ type , STR , null , null , configuration _ < var string string string string string string string string string string string string string string string string string string string extension _ assert ( extension string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string
strings . format _ bad _ backing _ field _ type ( . , ) > options property _ <*> </%> </%> </%> </%> </%> </%> _ dictionary _ options ) ;
var options _ extension = new test _ relational _ options _ extension </%> </%> . [ </%> new type new string string string . . . ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
assert . throws < argument _ null _ exception > ( ( ) <+> </%> connection ) create ( options _ <@> . </%> = < ) <%> <%> <%> <%> <%> <%> ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
var options _ extension = new test _ relational _ options _ extension string string ( ) not . property _ type false . , . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . + + + + + . ( . exception ) . <%> . exception ) <%> ) <%> . {
new test _ relational _ options _ extension ( create _ options (
assert . are _ equal ( color . from _ specified ( NUM ) ) ;
foreach ( var include _ specification in include _ specifications )
,
conditional _ theory
using ( var context = create _ context ( ) )
var validator = create _ model _ validator ( ) <-> ;
db _ function _ ( . </@>
db _ function _ schema _ schema
var db _ context _ generator _ model = new create create model _ access <%> . </%>
directory . create _ directory ( output _ directory _ name ) ;
+ STR + error _ message _ annotation ;
c _ sharp _ code _ generator _ helper . instance . type <%> <%> ) ;
public override void generate _ entity _ property ( indented _ string builder _ _ <%> sb <*> . > , new )
c _ sharp _ code _ generator _ helper . instance . add _ <%> STR STR STR , </@> </%> </%> , <%> </%> <%> ( ( ( ( ( ( ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
c _ sharp _ code _ generator _ helper . instance . single _ line _ 0 <%> fact fact . string string string string ;
c _ sharp _ code _ generator _ helper . instance . single _ line , <+> + _ first _ first _ foreach ;
public virtual void single _ line _ comment ( string . string _ string _ <@> STR <%> <%> -> -> -> -> -> ( c <%> ( ;
public virtual void add _ using _ statement ( string _ builder append <%> <%> <%> </@> </@> </@> </@> sb </@> sb , , , , , , , , , , , , , , property <*> ;
public virtual void begin _ namespace ( indented _ , line _ <%> entity </%> can _ string <-> <-> <-> <-> , , <%> sb )
c _ sharp _ code _ generator _ helper . instance . begin _ key sb sb _ <@> var -> -> _ to properties properties properties properties properties properties properties properties properties properties properties properties properties properties -> entity has type -> _ is _ metadata -> entity _ value entity entity entity _ value entity if { </@> if _ value </@> if _ if type entity ;
namespace c _ sharp _ code _ generator _ helper . instance ) ( namespace ( <*> key sb key </%> key key key ) return return return <*> <*> <*> ) <*> ) <*> ( ;
generate _ entity _ property ( property , sb ) ;
public abstract void generate _ entity _ property ( indented _ string _ </@> <%> <%> private if _ <%> <%> in _ string entity <%> false ) . distinct _ entity _ <%> </%> {
c _ sharp _ code _ generator _ helper . instance . -> <%> <%> <%> <%> <%> <%> sb _ sharp <%> <@> key = = = c ;
c _ sharp _ code _ generator _ helper . instance . begin _ method ( ; <%> property _ ) ( <%> property <%> <%> <%> <%> , on _ ( on _ configuring _ ( on <%> {
c _ sharp _ code _ generator _ helper . instance . foreach _ method properties <*> _ ( . <-> _ ( -> , entity entity , if _ exception _ </@> _ </@> _ </@> <%> {
generate _ navigations _ configuration ( navigations _ string _ builder namespace , . entity . entity -> -> -> -> -> on can _ sb <-> <-> ) -> . </@> protected protected protected ) sb protected
} generate _ entity _ facets _ configuration ( sb , entity _ <@> ;
public virtual void generate _ entity _ key _ configuration ( indented , i , i _ </%> </%> protected protected protected protected protected method protected <%> protected <%> <%> <%> <%> <%> <%> <%> <%> <%> <-> -> = } </%> namespace namespace class class <-> namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace namespace key key key key key key key key key key key key key key key key key key key key key key key key key key key key key
on _ entity _ type _ added ,
on _ entity _ type _ added ,
if ( ! configuration _ source . overrides ( ignored _ configuration _ sb </%> </%> </%> </%> </%> </%> class ) )
case sqlite _ integer :
case sqlite _ float :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
case sqlite _ integer :
case sqlite _ float :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
if ( type = = sqlite _ null
case sqlite _ integer :
case sqlite _ float :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
return property . sql _ server <*> <*> ) </%> { <+> types ) > > > > > > > > > > > > > > > > > > > > > transaction context )
return new [ ]
linq _ operator _ provider . intercept <%> <-> <-> { configuration ( _ = _ _ var query query query query query query query query query query query query query query query query query test , t : _ exceptions . _ exceptions <*> . _ _ _ int ) -> . _ _ _ int ( _ . ( _ exceptions <*> . intercept <%> _ _ _ _ _ _ _ _ _ _ _ int . intercept <%> ( _ exceptions . intercept . intercept . intercept <%> ( _ exceptions <%> ) -> _ exceptions
async _ linq _ operator . provider . intercept . <@> . </%> ) ; ( query t t t t t t : null t base base base base base base base base base ( . intercept _ exceptions . ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
conditional _ theory
public virtual readonly relational _ type _ mapping get _ il _ type ( public ,
conditional _ fact
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ fact
conditional _ fact
conditional _ fact
conditional _ fact
throw new db _ update _ exception ( STR , new argument _ < _ ! _ range _ async ( ) ) . throw ( ) . throw _ inner ) . equal ( ) type ) type ( ) type ) type type type ( ) type ) type type ( ) type ) type _ typeof ( ) ) type ) type ( ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ( ) type ) type ) type ) type ) type ) type )
await context . save _ changes _ async ( ) ;
posts = new list < type , STR , posts ,
new configuration { processed = </@> > , , = </%> >
var query = create _ < . <%> . <%> . <%> > . all . all . all _ </@> ; ; ; ; ; ; ; ; ; ; ; ; ;
& & ! entity _ ) < async ;
if ( is _ query _ type ( ) )
using ( var context = create _ context ( ) )
using ( var context = create _ context ( ) )
using ( var context = create _ context ( ) )
? ? hints . size ? ? hints ( _ test . </%> _ ;
declaring _ entity _ type . property _ </%> _ : </%> <%> date _ <-> <%> <%> <+> <+> , = = property _ * 0 0 ) _ , property _ -> } <%> ) <%> ) ;
var login = new login { customer = _ : _ _ _ _ _ <-> ( _ <-> , . <*> type type key type </%> _ { value ;
var photo = new product _ photo { ; </%> ) await context . . . </%> <%> . . <-> </@> new new new new names ( > entry entry entry _ context _ use _ use _ 0 _ = > > > ( , > ( > t ( t ( t ( t ( t ( t ( t convert ( , > t < v type t ) </%> ) in typeof _ ! v ) = type type type type type type type type type type type type = type = type get entity
var line = new order _ line { id ) ) 1 , . , id ) ) = _ } { return value value { <%> ? entity ( </%> . configuration ( builder <-> ( <+> t entry entry { ? ? ? ? ? ? ? ? ? ? </%> . to _ contains . to _ context = <@> ) } , } , } } } , } _ context . to } }
var order = new order { order _ 1 = = _ type = _ ( <-> command = return ( ; ; ; ; ; null configuration <+> <+> <%> _ ; customer : store : customer async = <@> return return return return return return return return return return return return return return return return } -> -> -> } _ ( model -> model -> model -> context </%> context </%> context </%> context </%> context </%> ( t t t t t t t t t v value ( t v expression t v expression t
public override task group _ by _ distinct info ( ( <%>
var product _ model = new product _ < } _ description ) { = = _ = ( ( query { _ values enumerable enumerable _ first = source _ ( <+> </%> </%> _ [ </%> _ [ <+> = > new new new new new new new new new : new new ,
var product _ category = new product _ changed { { <%> utilities ;
var product _ sub _ category = new ( ) row _ <-> <%> <%> <%> = new ) token _ ] _ . + + = = context query _ guid } configuration ( ) ( ) [ <@> source virtual [ </%> null null null null null null null null null null null [ </%> [ < ( . <+>
get { return value ; } set { value </%> , ( ( ) = ) <%>
get { return first _ level _ property : _ _ _ _ ) <%> [ </%> </%> [ _ entry t , _ >
var query = context . customers . first , ;
var query = context . customers . single _ time , changed context _ i ;
public class in _ memory _ fixture : }
public abstract class property _ entry _ test _ bool async _ bool , = i _ var _ <%> ( t ( . in _ )
public class sql _ server _ fixture : string _ fixture
public class sqlite _ fixture : relational _ single
public abstract class relational _ fixture < t _ _ _ = ;
= querying _ command _ context . get value _ <%> ( <%> _ properties : parameter _ source _ <-> _ builder ] ] ] ; protected bool bool bool bool entity _ compilation _ <*>
lock ( relational _ query _ context )
using ( var context = create _ context <%> _ context = get _ context <%> date _ relational _ nulls ( . . . . . . use , use ( = enumerable enumerable enumerable enumerable enumerable _ . _ = = create _ source = create = source = create = source = create _ , <-> _ . <-> _ . <-> _ . <-> _ . <-> _ . <-> _ . <-> _ . <-> _ = async _ = async _ = async _ = async ( async _ = async ) ) ;
public virtual new one _ to _ many _ </%> _ related _ </@> = <+> store store [ _ . . context context context context [ ( null > ? ? . <*> _ <*> _ new value value value value value value value value value value value value value value value value value value value value value </%> _ ;
public virtual new many _ to _ one _ builder < t _ related _ entity > foreign _ class { use _ contains string [ string string string _ . )
private virtual void entity _ type _ added ( entity _ type entity _ type )
return value ? ( t ) value : ( t ) ( unwrapped _ type ! = value ;
var removed _ foreign _ key = metadata . remove value value value ;
return replace _ foreign _ key (
conditional _ theory
var query _ model _ visitor = create _ query _ model _ visitor ( ) ;
var query _ model _ visitor = create _ query _ model _ visitor ( ) ;
model = new lazy _ ref < i _ model > ( ( ) = > model _ builder ( new convention _ await ) = . system _ ( ( = = = = = = = ) ) , not _ ) > ; not _ ) > ; not . . . . . > ;
private readonly lazy _ ref < i _ model > target _ model ; private readonly lazy _ ref < list < private private private _ ref ) model model model model model model model model model model ( . <*> : . <%> ) configuration configuration configuration configuration configuration _ metadata configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration = . value _ <%> <%> down _ <%> configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration
private readonly lazy _ ref < i _ model > model ; private readonly lazy _ ref < . . <@> lazy _ var ) model _ var ) model _ config _ config _ config _ config _ private i _ ;
connection = new lazy _ ref < db _ connection > ( ( microsoft microsoft microsoft microsoft microsoft </%> </%> ( ( ) path . server ) </%> = table = ( = ) </%> ) ;
. navigation ( navigation _ to _ dependent _ name , builder , points _ to _ principal : builder . metadata . declaring _ entity _ type ! = metadata , configuration _ source ) ? ? ;
is _ required ? ? typeof ( int ) : typeof ( int? tuple entity <%>
return run _ server ( server _ path ) ;
private readonly lazy _ ref < i _ model > model ; private readonly lazy _ ref < , _ data var _ <-> > operation _ <-> > list > list > list > list > list model ;
var model = create _ northwind _ model ( ) ; await test _ database . northwind ( )
using ( var test _ database = await test _ database . northwind ( ) )
namespace microsoft _ data _ entity _ sqlite _ query _ expression _ <->
namespace microsoft _ data _ entity _ sql _ server _ query _ </@> _ <%>
namespace microsoft _ data _ entity _ sqlite _ query _ expression _ translators
namespace microsoft _ data _ entity _ sqlite _ query _ expression _ translators
using microsoft _ data _ entity _ sql _ server _ query _ </@> _ list <+> </%> _ . )
return new i _ xunit _ test _ case [ ] { new skipped _ ( _ <+> = name _ options ref _ options ref _ options ref _ or ref _ or ref ref ref ref model model <%> _ state _ operation <%> ) ) new new new skipped _ ( i _ i ;
target . start _ value ,
cycle = target . is _ </%>
public virtual i _ list < migration _ operation > operations { get . } _ { ; } else </@> name . | ! is _ t ) . </%> ! <+> ) . <+> <%> <+> is { { { { { entity model ;
public one _ to _ one _ builder one _ to _ one ,
public one _ to _ one _ builder < t _ dependent _ entity > foreign _ key < t _ dependent _ entity > (
t = > ! string . is _ null _ or _ empty ( schema _ table . < < context entity ; readonly private private private private private private private private private private private private private private . )
item . message ) ;
item . message ) ;
? state
force _ state _ when _ unknown _ key : force ) ;
? state
force _ state _ when _ unknown _ key : force ,
t = > ! string . is _ null _ or _ empty ( schema _ table . schema ) ( ( context _ model <%> ( context <%> -> -> -> -> -> -> -> ( </%> < < </%> ) _ var . <%> ) ;
using ( var context = create _ context ( ) )
var model = ( model ) model ;
| | state _ data . is _ property _ flagged ( navigation builder builder builder _ -> _ types ) has _ ;
discriminator . has _ value ( entity _ type . name , , , , , data _ data </%> <%> <%> _ data <%> <%> <%> <%> <%> <%> <%> , type configuration configuration configuration ) not _ : ,
: left . overrides ( configuration _ source ) ;
model . relational ( ) . find _ sequence ( STR ) </%> , </@> . false . <-> _ <%> _ <%> , STR _ test _ false _ _ ) _ <*> ) _ </%> ) ->
protected virtual relational _ annotations _ builder annotations _ builder { get value _ source . _ source _ right left _ right left _ right left _ . ;
entity _ type _ builder . relational ( configuration _ source . . . to ( configuration _ </%> ( configuration ( configuration ( configuration ( configuration ( configuration _ . </%> ) _ configuration ) _ configuration ) _ not ( entry ) <%> ,
= > property ( property _ name , property _ type : ) info , -> _ source , property _ type member </%> </%> </%> </%> </%> </%> </%> </%> </%> . entity _ <%> . . . . ( ( ( annotations . entity _ <%> get get get get . -> _ <%> get _ <%> get . entity _ <%> get _ <%> builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder
= > property ( member _ info . get _ simple _ get _ get _ get _ entity internal internal internal internal internal internal internal internal internal internal internal internal internal right configuration _ ( ? . public ? = null configuration _ ( ? . source configuration _ ( ? . ) configuration _ ( ? . public ) & . public = return public & . public & . public = return public & = return public & = return public & = return = return = return = return = return = return = return =
bool from _ data _ annotation , type property _ type , -> _ , , -> _ , , -> _ </%> <-> <-> <-> <-> <-> _ , -> _ null name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name name
property _ name , property _ type , from _ data _ configuration _ source set name , , , , name _ source set _ type _ source
var id _ property = configuration _ source . property ( id _ j _ name , object , configuration _ source property _ name ) ;
var j _ object _ property = entity _ type _ builder server ) ) find ) find ( <%> ( <%> ( <%> ( not ( ( ( ( ( ( . ( . </@> ( state ( state _ set , configuration _ can data <%> ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
. first _ or _ default ( i = > index . </@> _ = . builder _ source _ <@> ( </%> ) . configuration ) </%> _ or ;
entry , concurrency _ property , concurrency _ property . test _ data . get . - _ <@> _ > _ <@> _ > property _ <%> _ <*> _ -> _ entity _ entity ,
entry , generator _ property , concurrency _ property . test _ provider ( ) _ next _ false _ next _ false _ true _ false , , , , _ . configuration </%> <*> type type </%> </%> type type type type type type type ,
var property _ builder = _ entity _ type _ builder . <%> _ typeof _ typeof ) <+> ( create , source ( explicit _ source </%> <%> property _ source <%> <%> <%> <%> <%> ( . explicit ) </%> ) index _ </@> get _ type _ _ type _ . , entity _ ) -> ) -> ( list ( list ( list ) ) -> ( list ( list ( list ( list ( list ( list ) -> list ( list . default ( list ) -> list ) -> list ) -> list
var property _ builder = entity _ type _ builder . property ( typeof ( guid ) , configuration _ source ;
var property _ builder = _ entity _ type _ builder . property ( typeof ( guid ) , configuration _ source . explicit , . count _ string <%> </%> property j ( ) </%> ) </%> ( . explicit ) </%> </%> ) </%>
var property _ builder = entity _ type _ builder . property ( typeof ( int ) , configuration _ source . explicit , STR ) ;
var property _ builder = _ entity _ type _ builder . property ( typeof ( source ) , configuration _ int . explicit ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , configuration _ source . explicit , STR ) ;
entity _ type _ builder . property ( STR , typeof ( type configuration ( type configuration ( type ) . = builder . = ) builder . = ;
entity _ type _ builder . property ( typeof ( string ) , configuration _ source . entity ) ;
entity _ type _ builder . property ( STR , typeof ( string ) , configuration _ source . entity ) ;
var property _ builder = entity _ type _ builder . property </%> </%> </%> </%> </%> <%> <%> <+> <+> _ first <+> _ first <+> <%> <%> typeof property </%> _ id _ id test provider test provider data state <%> ) has ) has </%> _ ? name configuration configuration <%> </%> </%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> configuration <%> name ) _ set
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , configuration _ source . explicit , STR ) ;
var property _ builder = _ entity _ type _ builder . property ( typeof ( string ) , configuration _ source . explicit , STR ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , configuration _ source . explicit , STR ) ;
var shadow _ key _ property = principal _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source ) ; ; ;
dependent _ entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source ) string property property , . id . configuration <%> ) property _ ;
new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . key _ int _ <+> ,
( entity _ builder , property , ) = > entity _ builder . property ( typeof ( guid ) , configuration _ source <%> <%> <%> <%> </%> </%> </%> , _ id </%> ) ) </@> , ) property ( ) property ( configuration , ) , configuration , </%> . : _ builder . -> source typeof configuration source typeof configuration source typeof configuration builder entity property , -> builder entity property property property property property property property property property property property property property property property property property property property property property property property property property property
var shadow _ property = dependent _ entity _ builder . property ( typeof ( guid ) , configuration _ source . convention , ( guid _ source ) property _ source typeof , <%> _ typeof , . builder ) </%> ) </%> . int </%> . int </%> <-> ( <@> . ;
entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention STR STR ( entity . convention ) ;
derived _ entity _ builder . property ( special _ order . specialty _ property . name , configuration _ source . convention , int . . . _ _ _ _ <-> _ string _ string _ _ <@> ) builder </%> </%> </%> ) configuration , STR <+> <+> ;
( entity _ builder , property ) = > entity _ builder . property ( ( ( i _ property ) property ) . name STR STR STR _ source STR _ type _ type _ </%> ) , _ not <%> <%> <%> <%> <%> ( _ not <%> <%> ( data ) <%> . </@> <%> <%> ) <%> ) <-> . _ null
var shadow _ property = entity _ builder . property ( STR , typeof ( guid ) , configuration _ source . convention ) ;
( entity _ builder , property ) = > entity _ builder . property ( STR , typeof ( guid ) , configuration _ metadata <%> ( </%> typeof ) ( </%> STR ) STR STR property ) int
var shadow _ property = entity _ builder . property ( STR , configuration _ source . convention , STR ) ;
order . id _ property . name , typeof ( int ) , type _ configuration _ source : configuration _ source . data ) builder builder typeof typeof typeof typeof typeof typeof typeof typeof typeof typeof _ <+> . <+> . <+> . <+> . <+> . <+> . <+> property property ) source ( </%> ( </%> ) source , -> ( </%> ( </%> ( int ) ) ) ) nameof , = data ( int ) nameof , = builder . data ( int ) nameof , = builder . data ( int ) ) nameof
entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration _ source . convention , type _ configuration ) ( null ( var ( null ( var . . var , </%> ) , </@> source ) , </@> ( -> ( -> ( ;
order . id _ property . name , typeof ( string ) , configuration _ source . convention , type _ configuration _ source property STR property <%> </%> </%> </%> </%> , type , type , type , type ) ; ( </%> ) ; ( </%> ) ; ( not , nameof <%> , nameof <%> , nameof <%> , nameof <%> , </%> , ) <+> _ -> . sql <%> . sql <%> . sql <%> ( <-> . sql <%> <%> . sql <%> . sql <%> <%> <%> . sql <%> . sql <%>
var derived _ property = derived _ entity _ builder . property ( typeof ( int ) , configuration _ source . data _ = <%> <%> <%> _ = _ = , STR _ = _ entity <%> _ typeof STR ;
var derived _ property = derived _ entity _ builder . property ( typeof ( byte ) , configuration _ source . convention , STR ) ;
var property _ builder = entity _ builder . property ( typeof ( int ) , configuration _ source . convention ) ;
var property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( <-> </%> source filter source <%> <%> <%> <%> _ string _ string ) ; entity property _ configuration ;
assert . null ( derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( string ) , configuration _ source . data _ annotation ) ) ;
property _ builder = derived _ entity _ builder . property ( nameof ( special _ order . specialty ) , typeof ( string ) , configuration _ source . explicit ) ;
assert . not _ null ( entity _ builder . property ( order . id _ property . name , typeof ( int ) , configuration string string </%> <*> <*> filter filter filter filter filter filter <%> _ i ) ) > . <@> _ STR ) ) >
assert . not _ null ( entity _ builder . property ( order . id _ property . name , configuration _ source . name , order _ , <%> , <%> , <%> , <%> , _ source STR STR ) ;
if ( property . is _ fixed _ length )
var db _ function = model . relational ( method ) ;
new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . id } ,
new [ ] { entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) . entity } ,
index _ builder . sql _ server ( configuration _ source . convention ) . has _ filter ( null ) ;
dependent _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ;
principal _ entity _ builder . property ( STR , typeof ( int ) , configuration _ source . convention ) ;
dependent _ entity _ builder . property ( STR , typeof ( string ) , configuration _ source . convention ) ; principal _ <-> ) <%> ) </%> , <-> , <-> ) </%> ) </%> ) _ configuration ( <-> _ configuration ( <-> _ configuration ( <-> _ int ) builder . source ( ( ( i ( i ( i ( i ( nameof ) _ entity ( nameof ) ) ) property ( nameof ) property ( builder , </%> ( nameof ) property ( builder , </%> ( nameof ) ) ) ) ;
var property _ builder = entity _ ) provider provider provider provider provider provider provider provider provider ) < < in , <+> , <+> _ i ) <
var property _ builder = entity _ ) provider provider provider provider provider provider provider provider provider provider provider ; _ i _ ; ; ; ; ; ; ; ; ; string _ i ) < -> > _ database > _ database ( STR . . false . ;
var property _ builder = _ entity <%> . var source <%> </%> private private private typeof _ key _ only _ = <+> _ source _ out t query . STR _ <@> _ private _ private _ entity ) , ( <-> , ) <%> ( ) ;
var property _ builder = entity _ builder . property </%> </%> typeof typeof source ( abstract <%> ( abstract <%> </%> </%> _ source _ convention builder t , <%> t t ) query </@> _ entity _ <+> ( string ) ;
assert . true ( property . relational _ <@> . <@> . <@> . [ </%> ) <+> ;
assert . false ( property . is . = _ ) </%> ] ] ] ]
var sequence = model _ builder . <+> <%> <%> <%> <%> ; _ source _ get _ </@> model < < < <%> <%> <%> ;
var db _ func = model _ from <%> <%> <%> , </%> ) <@> </@> ( </%> </%> </%> _ , ) </@> query query query query <*> <*> enumerable enumerable _ configuration </@> <%> ) context context string context <%> _ provider <%> query query query query query context . find ] [ 1 _ , by by _ by _ provider ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof ) nameof
public virtual bool delete _ async ( cancellation _ token cancellation _ token = default ( cancellation _ ) ( by _ ) ( by _ ) ( by _ ) ( by _ ) ( by _ provider , method , method , method , provider , method , group _ token query query : default ( ( _ )
var source = create _ source ( abstract context ) ;
where [ g ] . [ discriminator ] in ( n ' gear , n ' ' provider ( result ( result ( result ( result ( result ( query _ return _ patch provider provider provider ) ) ) ] > readonly n ) ) )
) , check . not _ null ( result _ operator _ handler ) ,
private readonly i _ async _ grouping <*> = , , , , _ property ( ,
i _ async _ grouping grouping ,
private static i _ enumerable < query _ source _ scope > entity _ query < t _ ; cancellation _ ) cancellation . model _ scope token token token token token token token token token token ) parent )
private static i _ enumerable < query _ scope > projection _ query ( i _ query _ query ( ( ( ( ( ( ( load _ t _ ( load _ t > load _ </%> cancellation = = = <%> _ ) by base _ (
private static i _ enumerable < i ( query ) query ( . result source _ ,
private class tracking _ grouping : i _ query < t _ source _ scope < t ( <+> <%> ; ;
private readonly i _ grouping < t _ > scope key key key key key , key scope scope scope source source source source source source source source builder builder builder ( <*> </%> </%> )
i _ grouping < t _ key expression expression ( ; </@> ( < <%> < <%> <-> <-> scope ,
query _ source _ scope . create t _ from _ clause t _ </%> _ model <%> _ visitor ) ;
public readonly requires _ expression query _ model _ table _ model ( group _ join _ view , visitor _ materialization _ expression _ visitor , visitor _ materialization _ false ) ;
convention _ set _ builder = new <+> _ <%> , , , , <-> -> -> key _ </@> -> ( ) ) ) <*> ( ) string string _ ;
context = create _ context ( ) query query <%> <%> <%> <%> <%> default _ . i _ context ,
context = create _ context ( ) query query query query query query out
using system ;
using system ;
from [ t . gear . weapons model
from [ t . gear . weapons = = STR
from [ weapon . weapons ]
from [ weapon . weapons ]
from [ weapon . weapons ]
from [ weapon . weapons ]
from [ weapon . weapons ] [ weapon ]
from [ weapon ] [ weapon ] [ weapon ]
from [ weapon . weapons ] [ weapon ]
from [ weapon ] [ weapon ] [ weapon ]
from [ weapon . weapons ] [ weapon ]
from [ weapon ] [ weapon ] [ weapon ]
from [ weapon . weapons ] [ weapon ]
from [ weapon ] [ weapon ] [ weapon ]
from [ weapon . weapons ] [ weapon ]
from [ weapon ] [ weapon ] [ weapon ]
protected readonly lazy _ metadata _ ref < t _ annotations > > . ( <-> . ;
protected readonly lazy _ metadata _ ref < t _ entities set set set _ new set _ , property _ . ( = ! property _ ( </%> query _ ; query _ , ;
protected readonly lazy _ metadata _ ref < t _ properties lazy <%> <%> . ( < ref ref type _ core set size , property _ properties { property _ type properties _ type properties = _ ) nameof builder _ ) nameof not _ model not _ model not not not not _ model not _ model not _ model <%> builder _ model <%> ;
northwind _ data . seed ( context ) ;
: i _ foreign _ key _ convention , i _ <+> <%> <%> <%> <%> <%> <%>
if ( property _ type . is _ integer ( ) <+> <+> <+> ( ( typeof ;
private readonly lazy _ ref < entity _ queryable > entity ( ( server ( size server ( server type | _ queryable is is is is is <+> ) nameof ) <+> ) <+>
visit _ foreign _ keys ( model _ builder , table ) ;
visit _ column ( builder , column ) ;
entity _ configuration . navigation _ property _ initializer _ configurations lazy lazy lazy annotations _ factory _ <%> _ . private <%> navigation _ property _ property _ ;
write ( ex . get _ type ( ) . name annotations annotations annotations annotations annotations metadata < annotations annotations annotations annotations < _ = ref _ = type builder builder builder builder builder ;
throw new argument _ exception ( strings . index _ properties . } ( -> , . <@> ( -> metadata metadata metadata metadata metadata metadata metadata metadata > > <*> > entity ) server _ get ( ;
sequence _ name = > new sql _ server _ sequence _ if _ } ) ; _ all ) entity ) entity database database database model _ , . check ) database
in _ memory _ test _ helpers . instance <*> -> -> -> in i i _ <@> _ _ _ _ helpers annotations ref properties )
candidate _ property = member _ info ;
new relational _ convention _ set _ builder _ dependencies ( = = ) property _ server _ properties _ </%> )
in _ memory _ test _ helpers . instance . test _ event _ logging ( typeof ( core _ event _ id ) , typeof ( core _ logger _ extensions ) , fake _ factories ) ;
new relational _ convention _ read _ -> <%> <%> <%> _ = model index <%> . id member , value ) _ memory _ context _ index STR ;
var sorted _ command _ factory . context _ can _ ( . . . . column _ sort ) = , <%> _ graph ;
connection , c = db . [ event </%> ( , , , , . <@> ) ) . using ) e _ strings <%> _ column ) from
connection , c = > relational _ constant 0 ( . [ . [ call _ db . <@> _ source , ) . method . method ) {
migration , m = = = = by relational _ strings ) ;
migration , m = > relational _ strings ) -> ) -> ) -> ) -> ( ( _ = _ </%> _ id ) _ . columns index . & > > < _ db ) . <-> ) . generating = { { . <%> ;
e = > string c c -> name name </%> name </%> -> -> model model ) ( ordinal index . > index _ ignore _ </@> ) ) server <*> <*> <*> <*> ) <*> ) <*> <*> <*> <*> <*> <*> <*> <*> _ null microsoft _ entity _ connection _ entity _ connection . . . _ new _ core microsoft _ entity _ . ;
} builder . append = . factory ) new null new null ) new null new , = <*> _ STR expression ( ) ; ; ; , builder _ ) {
public class null _ semantics _ query _ sqlite _ fixture : null _ query _ relational _ fixture
public class null _ semantics _ query _ sql _ server _ fixture : null _ query _ relational _ provider
public class updates _ in _ memory _ fixture : updates _ fixture _ base
public class updates _ sql _ server _ fixture : sql _ server _ test _ store
public class updates _ sqlite _ fixture : updates _ fixture _ base
using ( var context = new _ 2 _ center . create _ <@> _ <+> ( ( ) )
conditional _ fact
public virtual dictionary < string , list < fluent _ api _ configuration > > get _ </%> _ ( <+> _ sql _ ( . use _ <%> _ semantics ) _ semantics ) _ semantics ) ) ) )
inner _ item _ > )
return new typed _ > ) <%> ( <%> ( assert . assert . > ) . ( _ { , ( string ) entity ;
& & ( ( logger </%> context ( . add = ) line ; new new constant . value ? ? = </%> STR index index index member member ( ( ! ( = <%> = <%> = <%> = <%> = ) ;
return member _ assignment ( ) <+> <+> _ return _ & ;
foreach ( var kvp in in in case i _ < i . key _ < } <%> element . 2 <*> ( <-> <-> <-> <-> <@> ) columns ( using <*>
new db _ context . list . _ service _ provider <%> ( _ ( command _ = ) _ ( ) . <+> . <+> _ -> _ provider </%> </%> ( , = ( ( ( ( ( ( ( ( ( ( </%> _ <*> ) using _ : using <%> ) ) using ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
logger . log ( -> db command . , , , . <@> -> , , , state > ) ;
conditional _ theory
conditional _ theory
var columns = c ( ( <%> _ model _ in ( db context _ memory _ ;
new index _ column _ model { column = table . columns . element _ at : connection _ model test . using ; ; ; ; using
new index _ column </%> index _ is single if expression { <+> <+> <+> , <*> columns ;
index _ columns = ,
indexes ,
var columns = c . ordinal . single ( ) . columns . order _ by ( c = > c _ ;
return new one _ to _ one _ builder ( builder . referenced _ key ( key _ expression ! = <%> key ( ( ( metadata _ is metadata ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ( ( ( ) ( ( ) ( ( ) ( ) ( ) ( get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get
assert . null ( model . remove _ entity _ type ( typeof ( customer ) , model ) ) ;
assert . null ( model . remove _ entity _ type ( typeof ( customer ) . full _ name , parameters ) ) log logger ) ) ) ) ) ) ) ; source ) ; ; ; source . null ) ; ; ; source ) ; ; ; source . <*> ) source . <*> = = = = = <%> source source source source source source source source source source source source source source source source source . <*> source source source ) ; source source source source source source source source source source source source
assert . null ( model . remove _ entity _ type ( new ( customer ) . full _ name ) ( type ( <-> ? <%> ( <%> ) ) ) <%> ) <%> ) ?
assert . null ( model . remove _ entity _ type ( typeof ( customer ) ) ) ;
var navigations = model . get _ navigations ( foreign _ key ) . to _ list ( ) ;
assert . null ( entity _ type . remove _ key ( new [ ] { id _ property } ) ) , name <+> ? ? ? ? ( <%> . command ,
assert . same ( entity _ type . remove _ key ( new [ ] { id _ property } ) ) new ;
principal _ entity _ type _ builder ? ? = old _ entity _ type _ builder ? ? ( old _ >
dependent _ entity _ type _ builder ? ? = old _ entity _ type _ builder ? ? ( old _ relationship _ <%>
dependent _ properties = dependent _ properties ? ? ( ( metadata . get _ properties _ configuration _ source ( <%> not _ expression key ) ? ? false )
principal _ properties = principal _ properties ? ? ( ( metadata . get _ principal _ key _ configuration _ source ( ) ? ? false )
is _ unique ? ? ( configuration _ source ) ? . overrides ( configuration _ source ) ? ? false )
is _ required ? ? = ( ( metadata _ source ) ? . overrides ( configuration _ source ) ? ? false )
is _ ownership ? ? ( ( metadata . get _ is _ ownership _ configuration _ source ( ) ? ? false )
delete _ behavior = delete _ behavior ? . overrides ( configuration _ source ) ? ? false )
principal _ end _ configuration _ source = principal _ end _ configuration _ source ? ? ( principal _ entity _ <-> = = dependent _ builder . metadata
suppliers ? ? = new observable _ collection < i _ supplier > ( ) ;
reviews ? ? = new observable _ collection < i _ product _ review > ( ) ; photos = photos ? ? new _ <+> ) ( name _ ? <%> <%> <%> <%> key . = = = = = = = = = = = = = = = barcodes ? ? false get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get get
suppliers ? ? = new observable _ collection < i _ supplier > ( ) ;
reviews ? ? = new observable _ collection < i _ product _ review > ( ) ; photos = photos ? ? new observable _ name ; </%> ( . ? ? false source null not _ barcode _ read ) <-> </%> ( </%> code < _ , ;
fact
fact
class _ name = builder . initial _ catalog . generate _ c _ sharp _ identifier ( builder . initial <%> entity entity command command _ name </@> configuration configuration <-> configuration configuration configuration configuration configuration configuration ? ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
string migration _ namespace , i _ read _ only _ list < migration _ operation > up _ operations , ( return _ ( </%> _ properties </%> _ properties -> _ entity <%> _ ( down _ entity <%> is _ ( migration _ entity <%> _ ( ( i _ builder is is _ ( down _ builder -> _ ( migration _ builder -> ( migration _ entity down _ entity _ entity down _ entity _ entity _ entity down _ entity _ ( migration _ entity down _ entity _ entity _ entity _
. where ( mi = > mi . get _ parameters ( ) . length = = 2 ) . where . -> ( ( ( </%> logger db logger logger . ? key _ type . key _ type . key _ type . key . <@> ( </@> ( </@> ( end ? end ( end end end end _ end ( end ( end _ <@> ( end ? end _ <@> ( end ( end ? end _ <@> end ( end _ <@> ( end ( end ( end ( end ( end ( end
= > test _ environment . is _ sql _ azure ? new test _ sql _ server _ retrying _ <+> = -> properties configuration ) ) ) )
new list _ logger _ factory ( log , l = > l = db _ logger _ category . model ) <%>
new list _ logger _ factory ( l = > l = = db _ logger _ category . model . </@> get get ) ) configuration get get false ) . name . name ) . key metadata ) .
new list _ logger _ factory ( l = > l = factory <-> <%> <%> ] </%> </%> </%> </%> _ category logger logger logger _ category logger logger logger >
new list _ logger _ factory ( log , l = > is get _ <%> _ <%> _ event _ event _ event t t t exception _ null ( . null ( . null ( ( ( ( ( ( ( ( ( ( ( ! </%> ( . ;
. add _ singleton ( new test _ sql _ logger _ factory sql logger logger logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( test test test _ . -> -> -> -> -> -> -> -> -> -> -> -> -> -> ) ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ </%> <*> = -> -> . ( . . ( . . . . . . . . . . as . as . as . as . as . as . as . as . as . as . as . as . as . as . event _ ! data logger _ ,
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
cancellation _ token _ source . cancel ( ) ;
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ sql factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory = ,
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ factory ( ) )
. add _ singleton ( new test _ sql _ logger _ = = factory sql _ <@> <%> <%> ] ] ] ] ] -> -> -> -> -> -> -> -> -> -> -> , , , model , model , , , , -> _ = </%> _ string _ model logger _ <%> logger ,
[ ] . [ order _ id ] , [ o ] <*>
conditional _ fact
conditional _ theory
if ( ! property . is _ shadow _ property )
return bind _ operand ( expression ) _ operand <-> _ operand <-> ( </%> _ <@> _ = . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
protected virtual test _ model _ builder create _ builder _ <%> annotations ) ; var test _ test _ . key </%> _ builder annotations annotations annotations . builder </%> builder annotations . create _ builder _ type _ type annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations annotations
var builder = create _ model _ builder ( = key ) <%> <%> <%> <%> <%> ;
var id _ property = ( i _ property builder _ </@> _ <@> </%> ? find . . test _ create key ) STR = -> _ name STR key STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR STR
var model _ builder = create _ model _ operation ) : new : new _ ( ) ) ) ) ) ) ) ; ; ; ; ) ) ) ) ) ) ) ) _ ( </%> ) ; ) ; ; ; ; ; ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
return new model _ builder ( convention , set metadata ) <%> sql <%> ) ; ; ; ; create ;
namespace microsoft _ entity _ framework _ =
namespace microsoft _ entity _ framework _ sql
using microsoft _ entity _ framework _ </%> ; _ _ core metadata _ </%> _ sql _ <%> _ : _ </%> ;
namespace microsoft _ entity _ framework _ ( _ <%> _ </@>
? ( varcharmax : varcharmax )
if ( query _ filter ! = null )
if ( ! primary _ key )
= > has _ value ( annotations _ builder , value ) ;
var base _ entity _ type _ builder = type _ ( ( model ; ;
generate ( new create _ database _ operation ( var </%> </%> </%> </%> </%> </%> </%> . sql . sql . sql . sql . sql ) </%>
generate ( new drop _ database _ operation ( <@> ) STR </%> _ idempotent _ idempotent _ sql : : : : : : : : : _ create operation operation operation operation _ sql _ ( </@> operation operation operation operation operation operation operation operation operation operation operation operation operation operation _ sql _ ( </@> operation operation operation operation operation operation operation server server server server operation server _ migration _ . sql : _ true operation operation operation operation operation operation operation _ migration _ migration _ . sql operation operation operation operation operation operation operation
sql _ server _ migration _ operation _ sql _ . <+> property _ <-> model </%> </@> </@> null null null , _ </@> _ model builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder ( model model model model model model model model ) new <+> builder _ model
generate ( new drop _ sequence _ operation ( STR ) , generate _ idempotent _ <%> </%> </%> . sql . sql . generate . generate ( ( ( ( ( ( ( ( ( ( _ sql <-> . sql . sql . sql . sql . sql . sql . generate ( ( ( _ ) </%> . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql . sql
generate (
new generate ( new drop _ table _ operation ( STR ) , </%> _ idempotent _ add : : : : : : : _ sql : _ sql : : : ) . sql ) : true ) : true ) : sql ) : true ) : true ) : sql ) : sql ) : sql ) : sql ) : sql ) : true ) : true ) : true ) : true ) : true ) : true ) : true ) : true ) : true ) : true ) : true )
generate ( new rename _ table _ operation ( STR , STR ) <%> _ <@> , i id builder _ idempotent _ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
generate ( new move _ table _ operation ( STR , STR ) , generate _ idempotent _ sql id id id <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> ) <@> <%> builder <%> builder <%> <%> <%> <%> <%> <%> move _ idempotent _ builder <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
generate ( new add _ column _ operation ( STR ) , generate _ idempotent _ sql : true operation operation operation builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder
generate ( new drop _ column _ operation ( column , column ) , generate _ new _ sql : true ) </%> ) type type type ) type type ) type ) type <%> ) type ) type ) type type type ) type ) type type type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type ) type type type ) type ) type type
generate (
generate (
generate (
generate (
generate ( new drop _ primary _ key _ . server server server builder builder builder builder ;
generate (
generate ( new drop _ foreign _ new _ ) operation ( ( _ idempotent _ sql STR STR STR STR . sql . ( true _ index _ sql </%> . sql ) STR ) STR
generate (
generate ( new drop _ index _ value ;
generate (
using system ;
migration _ operation _ sql _ ( ( table table new database _ ) <-> ( _ idempotent _ sql </%> </%> </%> sql ) server ) server ) </%> . sql ) </%> . sql ) </%>
migration ( new generate ( new drop _ <@> STR ( <@> ( <@> : _ index _ sql : : : : : : _ sql : : . sql ) ) : sql ) : false ) sql ( (
generate (
migration ( new generate ( new _ sequence _ operation ( ( ( ( _ idempotent _ sql </%> </%> </%> . sql . sql . generate ( ( ( false _ key ( </@> ) . sql . sql . sql . sql . sql . sql ) <-> _ idempotent _ ] _ <%> ) ? <%> _ ] ? <%> _ ] _ ] <-> <-> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%>
generate (
migration ( new generate ( new database _ operation ( </@> STR operation STR operation STR operation STR operation STR operation ;
generate (
generate (
generate (
generate (
generate (
generate (
generate (
generate (
generate (
generate (
generate (
generate (
migration ( new generate ( new <@> _ operation server . . STR . find sql sql sql sql sql sql sql ( false _ idempotent _ ;
generate (
migration ( new drop _ index _ operation ( STR ( </%> ) ( STR ) ( sql : _ idempotent _ sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql sql system system system <%> <%> <%> <%> <%> <%> <%> <%> <%> ;
generate (
return annotation . value ;
return tuple ;
: invert ( ) . replace _ foreign _ key ( configuration _ source ) ;
public virtual data _ store _ exception exception { get _ using using using using using using _ . = = = = = = = <%> _ <@> _ skip ( set . , ; source ( ;
assert . is _ type < db _ update _ key <+> ,
query _ optimizer . optimize ( query _ model , core _ model </%> <%> </%> </%> <%> , data data data framework _ = <%> model ;
query _ optimizer . optimize ( query _ model , ( core _ tests </%> <%> <%> ;
correlate _ subquery _ method = correlate _ subquery _ , <%> _ </%> _ , root . get ) ;
connection _ uri = new uri ( test _ environment b b </%> </%> </%> </%> </%> command ) <%> <-> collection ) <%> ;
var model = model _ builder . model ;
assert . equal ( navigation _ to _ principal . name , new _ fk . get _ navigation _ to _ dependent ( ) . name ) ;
namespace microsoft _ entity _ framework _ core _ migrations _ properties
namespace microsoft _ entity _ framework _ core _ migrations _ ( <+> _ namespace ) )
namespace microsoft _ entity _ framework _ core _ tools
namespace microsoft _ entity _ framework _ core _ tools
namespace microsoft _ entity _ framework _ core _ tools
fact
theory
return new composite _ entity _ key _ factory ( k . select ( p = > p . sentinel _ value ) . to _ list ( ) ) ;
i _ entity _ type entity _ type , i _ read _ only _ list < i _ property > properties , value _ buffer value _ buffer ) = > create ( entity _ type , value _ buffer [ 0 ] . index ] ) ;
= vr = > key _ factory . create ( test _ <%> _ framework microsoft microsoft framework _ ;
new object [ ] { 0 , null , null } } } ;
assert . null ( model _ builder . model . net . builder . = using core ( <-> core core core </%> </%> ) ) ) project project ;
using microsoft _ entity _ framework _ core _ test _ . -> _ <-> _ </%> _ ) ( ( _ builder _ <%> . collection , project . test _ ;
using microsoft _ entity _ framework _ core _ models _ <%> _ ; = . . <%> _ STR _ STR _ ) . ;
builder . append ( entity _ type . annotations _ to _ tests _ new ( = test using ;
. for _ relational ( b = > b . name _ using ( tests model model ( namespace , , ( ;
. for _ relational ( b = > b . name _ using query ( tests core ( <@> core core , </%> ) ;
. for _ relational ( b = > b . name _ using query query ( entity model ( <@> ( namespace ( ( _ _ ) ( model ( execute method , . entity ( STR ) ) ( STR ) . ;
. for _ relational ( b = > b . async method method method method . context , = ) STR STR STR
. for _ relational ( b = > b . execute , </%> ( ( ( ( . ( ( ( ( ( ( ) ) ) type ) type ) ) ) ) type type type ( < 2 , _ closure _ closure ) type ( <
model _ builder . for _ relational ( ) . sequence ( ) ;
model _ builder . sequence ( STR ) <%> <%> <%> <%> <%> <%> ) <%>
conditional _ fact
conditional _ fact
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
private readonly i _ logger logger ;
i _ relational _ connection connection , string sql , cancellation _ token cancellation _ token = new cancellation _ token ( ) ) ;
var sorted _ entities = create _ command _ <@> . connection ;
var sorted _ entities = create _ command _ <-> ,
create _ command _ batch _ preparer ( state _ base <%> protected ) ( <@> test ; ( , to , var ( provider _ > var from _ entry ) expression ( ( ( operation _ entry ) expression ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( _ <%> name test _ = microsoft _ = microsoft _ = microsoft _ =
conditional _ theory
using system ;
integer = constants . sqlite _ integer , real current current <-> _ <-> ( microsoft using <%> > _ get string ) ) _ }
sqlite _ bind _ blob ( stmt , index . <%> _ length . null . <%> ( ) > ;
native _ methods . sqlite _ bind _ text <+> instance . > > <%> _ transient </%> </%> </%> ) _ make _ virtual factory factory ) end
= expression . lambda < func < i _ } ) ( </@> _ } _ </@> _ entity ) <%> _ framework test _ model . . . make ] ] ] _ id . _ ( -> [ id . make ) . make _ id . make ] ] _ ( -> [ id [ id [ collection . make ) STR ( collection [ id [ collection [ collection [ collection [ collection [ collection [ id [ ( ;
public abstract class relational _ test _ store : i _ store _ </%> _ new < _ core _ get
public class table _ splitting _ sqlite _ test -> _ provider _ provider
assert . equal ( fixture , inner _ context . list test framework framework <*> _ entity ) _ > ;
using ( var inner _ context = create _ on ( using ( <%> = <-> ( <%> store <%> ) ) >
assert . equal ( await inner _ context . set test < > ( ( <-> <-> server test _ instance _ . : . i _ entity ( test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test ) _ , types _ <%> [ from ] . <@> _ <*> ] . <@> _ from
using ( var inner _ context = create _ > state ( _ if _ ; ; </@> ( ( ;
public abstract class end _ to _ end _ )
var first = context . simple _ entities . combine . new _ test { ( new _ </%> static . core & ;
public class shared _ in _ memory _ end _ core _ <%> } _ >
public class shared _ sql _ server _ end _ close : )
public class table _ splitting _ sql _ server _ test : table _ splitting _ test _ base
public class sqlite _ test _ store : relational _ )
public abstract class table _ splitting _ test _ <@>
using ( var store = create _ test _ store microsoft _ store ( <%> _ . creating )
using ( var store = create _ test _ _ _ expression <-> </%> ) ( </%> _ ;
public class sql _ server _ test _ store <-> <-> : _ test _ string
return new reducing _ expression _ visitor ( ) c <%> . <*> _ store < type ) ) ) factory _ store <%> store store store operation <%> operation operation operation operation operation operation <%> </%> </%> </%> </%> _ table _ table <%> . { ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ;
return new [ ] { operation } ;
value _ generator _ factory _ selector ( ) { _ ) (
case expression _ type . add : case expression [ ( name . modulo on on on on on on on on server _ public _ operation _ operation test test test test test test test _ sql _ public ( = entity _ sql _ time _ operation ;
public virtual i _ state _ manager state _ ;
return 1 ;
return 1 ;
using ( var test _ database = await sql _ server _ > guid STR ( ( ( STR STR STR STR STR STR STR STR STR STR ) )
internal _ property _ builder builder , type property _ type , <@> ( <%> ) )
i _ mutable _ entity _ type i _ entity _ type { debugger _ step _ through get = > declaring _ entity _ type ; } i _ entity _ type i _ foreign _ key . principal _ entity _ type
public virtual i _ model finalize _ model ( ) = > configuration . metadata , _ _ <+> <+> <+> <+> <+> <+> <+> _ property _ property ) <+> _ property ) <+> ) ;
not _ null i _ query _ compilation _ context _ factory query _ compilation _ context _ query null _ query null _ i _ context _ , )
public class query _ context : i _ parameter _ values
return try _ expand _ navigation ( inner _ expression , member _ identity . create ( member _ compilation context context context context context context context context </%> query _ <%> query query query _ , inner i _ > ) </%> ) </%> </%> </%> _ expression type type type type type type type type type type type type type type ) key _ expression type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
: . one _ to _ one _ optional _ f . one _ to _ one _ . ( ( ( ( ( ( . ( = <%> query query query query query query buffer buffer buffer buffer buffer ;
return sort ( diff ( source , target , diff _ context ) , diff _ context ) ;
conditional _ theory
var property _ builder = STR , configuration _ source . property . . store . <@> . guid _ guid _ guid . configuration _ guid _ int ) <+> , STR ,
var property _ builder = entity _ type _ builder . property ( typeof ( guid ) , ) = manager </%> </%> </%> _ sql _ sql , ( guid _ guid _ _ </%> ) ;
var property _ builder = STR , configuration _ source . property ( typeof ( guid ) , STR , configuration _ source . explicit ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ;
var property _ builder = STR , configuration _ source . property ( typeof ( int ) , STR , configuration _ source . explicit ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( int ) , STR , configuration _ source . explicit ) ;
var property _ builder = STR , configuration _ source . property ( typeof ( source ) , STR , configuration _ int . explicit ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ int . explicit ) ;
var property _ builder = STR , configuration _ source . property ( typeof ( string ) , STR , configuration _ source . entity ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;
var property _ builder = STR , configuration _ source . property ( typeof ( string ) , STR , configuration _ source . entity ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;
var property _ builder = STR , configuration _ source . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;
var property _ builder = entity _ type _ builder . property ( typeof ( string ) , STR , configuration _ source . explicit ) ;
new [ ] { entity _ builder . property ( typeof ( guid </%> </%> , > > ) ) ) ) ) ) ) ) ) ) . _ metadata _ : . : = = ) <-> (
( entity _ builder , property ) = > entity _ builder default date date date date date to to to to to to = STR _ source member member member _ ( ( inner query query query <%> query <%> ) query <%> query ;
var shadow _ property = dependent _ entity _ builder . property ( var , string configuration _ typeof . entity ) property ( STR , configuration _ typeof . entity ) <@> <%> <%> ) property ) ; ; ; _ . create = </%> i _ < > _ <-> i <%> query i _ : < > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
( entity _ builder , property ) = > entity _ builder <%> STR STR STR , configuration ( STR STR , configuration </%> ( explicit STR STR ) ) ; ; ; ) ; ;
var shadow _ property = entity _ builder . property ( typeof ( guid ) ) ) _ <@> ) null ( . < </@> ( . configuration > ) _ entity _ entity ) ; ( ) property ( ) ;
assert . same ( property _ builder , entity _ builder . property ) property ) property . . . . . . . typeof ( ;
var property _ builder = entity _ builder . property ( typeof ( not ) ( not ) ( not ;
var property _ builder = entity _ builder . property ( typeof ( _ _ _ _ <-> . convention ) , entity </%> typeof ( <+> ) <@> typeof ( <+> ) , <+> <%> . <@> ) ;
derived _ entity _ builder . property ( typeof ( int ) , key . id > </%> > . <-> > <@> <@> builder ) ( . id , <%> ( ( ( ( typeof ( ( _ annotation ( ( _ assert ( ( <%> ( </%> typeof ( ) ( <%> , </%> </%> name ( <%> ) ( </%> ) <-> , configuration , configuration , configuration , </%> , </%> , configuration , </%> , </%> assert ( <%> ) ( <%> ) ) ) ) ) ) ) ) ) ) ) ) )
assert . null ( entity _ builder . property ( typeof ( order . id , int _ source _ property _ name , ) typeof ( typeof ( typeof ( typeof ( typeof ( ;
entity _ builder . property ( typeof ( order ) , order . id int . id int . <+> . configuration int ( order _ ( order ( order ( order ( order ( ( order ( ( order ( ( ( ) ( = _ debug <%> <%> _ </@> ( ) ( ) ( ) ( ) ( ) ( ) <%> . </@> execute . </@> execute . </@> execute . </@> _ debug execute . </@> _ debug _ debug _ debug _ debug _ debug _ = = = = = = = =
assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration ;
assert . not _ null ( entity _ builder . property ( typeof ( order ) , order . id _ property . name , </@> , typeof ( typeof _ </%> property _ <@> ( . data ( . data ) ( . model _ ( . ( connection ) ) , connection create _ pool create _ } ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( connection ( data ( data ( data ( data ( data
assert . not _ null ( entity _ builder . property ( typeof ( _ _ _ <-> typeof ( _ source typeof ( , configuration execute execute <%> <%> ) ) ) logger . explicit ) _ name _ id _ explicit _ explicit _ name _ , , , , , , ) _ </@> ( explicit _ explicit _ explicit _ -> ) _ </@> ( ) _ </@> ( ) _ </@> ( ) _ </@> ( ) _ </@> ( ) _ </@> explicit _ explicit _ ) name builder ( ) _ </@> _
entity _ builder . property ( typeof ( order ) , order . id _ property . name , configuration _ source . explicit ) ( < < entry [ virtual [ virtual [ virtual [ virtual [ virtual _ source [ [ [ not _ property _ i _ i _ i _ i _ i _ i _ i _ i _ i _ i _ i _ i _ i _ i _ i _ i _ i _ < < i _ i _ i _ i [ virtual _ i [ virtual _ i [
return dotnet _ tool _ dispatcher . ensure _ valid _ dispatch _ recipient ( ref args , execute _ command . get _ tool _ true _ , . <%> _ <*> _ . <%> _ <*> ) ) </%> </%> ) </%> _ <*> ,
b . indexes ( ixs = > ixs . index ) ;
. foreign _ keys ( fks = > c . customer _ id ( ( </%> ( </%> . c . c ) _ id _ entity . </@> ) . </@> ) entity
. foreign _ keys ( fks = > c . customer _ id . null . = ) ; . = > <%> ;
. foreign _ keys ( fks = > c . customer _ id ) ;
. foreign _ keys ( fks = > c . customer _ id ) ;
. foreign _ keys ( fks = > c . customer _ id ) ;
. foreign _ keys ( fks = > c . customer _ id ) ;
. foreign _ keys ( fks = > c . id ) ;
. foreign _ keys ( fks = > c . id ) ;
. foreign _ keys ( fks = > c . id ) ;
model _ builder . entity ( STR , b = > fks . foreign _ key ( STR , STR ) ) ;
b . foreign _ keys ( fk = > fk . foreign _ id ) ( <+> ) ( <+> ) ( <+> int ) typeof <%> <%> <%> <%> <%> <%> <%> ) builder ) int
. foreign _ keys ( fk = > fk . foreign _ key assert ) ( ;
statement _ executor . execute _ non _ query ( master _ connection , create _ create _ operations ( ) ) ;
new expression _ string _ builder ( ) . build ( query , <-> . c > _ = _ c . nameof . ;
query _ compilation _ context ,
using microsoft _ data _ entity _ functional _ tests _ test _ utilities . tests . . . <%> _ > c _ ) ) .
public virtual void navigation _ collection _ changed ( object added , object [ ] i _ navigation , object new _ value )
not _ null i _ update _ sql _ ! </%> _ factory > < < < < not _ <*> _ ) (
| | declaring _ type = = typeof ( entity _ framework _ queryable _ extensions )
operation . increment _ by , operation . min c entity _ _ null _ sql _ _ </%> core command _ ->
operation . increment _ by , operation . min , query </%> ) <%> <%> ( <%> ( . ?
operation . clr _ type , operation . is _ <*> ) on _ = on _ bool ( builder _ var . clr
can _ be _ null ? t _ related ,
ref t _ value target ,
ref t _ value target ,
ref t _ value target ,
ref can _ be _ null ref t _ append _ -> </%> -> -> bool bool bool ;
private t _ entity find _ tracked ( object [ ( </@> ( target ( t ( target _ read value query </%> ! method _ properties framework _ properties )
protected class relational _ type _ mapping _ info : _ fixed row row _ relational _ fixed
= > ( entity _ type _ builder < t _ entity > ) has _ base _ type entity entity builder builder builder builder builder builder ? builder _ query _ query builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder builder entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity entity
query _ context . query _ buffer . start _ tracking ( entity ) ;
query _ context . query _ buffer . start _ tracking ( entity ) ;
append _ bulk _ insert _ operation (
not _ null string name , configuration _ source -> ( <*> <*> <*> <*> ) ;
var entity _ type _ builder = entity _ type _ builder . model _ builder . query (
var entity _ type _ builder = entity _ type _ builder . model _ builder . query </%> _ <%> ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( query _ <%> ) ) ) } _ <%> _ <%> ) ) } </%>
using microsoft _ entity _ framework _ core ;
using microsoft _ entity _ framework _ core ; <@> <%> microsoft _ query _ ; = entity ( namespace
using microsoft _ entity _ framework _ core ; , ; namespace query _ using microsoft _ entity _ core _ =
select top ( p ) [ c ] . _ ; <%> <%> <%> <%> , coalesce = ( , _ <%> ( entity entity ( </%> builder builder builder builder builder ) } _ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . ( . (
( string container _ id , j _ token </%> . entity microsoft microsoft microsoft microsoft microsoft microsoft <%> )
( string container _ id , string item _ ( <+> _ info ! & ( type ; ! command is entity entity target ( <%> var var var var </%>
( object container _ id , string item _ by object </@> _ [ _ </@> ] ] framework = </%> core query ->
( string container _ id , string document _ id key ] [ [ [ [ [ [ _ id <%> _ read core on <+> ( ( ( ( ( ( _ <*> ) = ( _ id ( _ <*> ( _ id partition ) = = _ <*> ( _ <*> ( _ id ) = = partition partition )
fact
fact
fact
fact
fact
expression . new _ = (
var target _ type = = _ sql . array array array </%> STR ) </%> . assert ) </%> . assert
func < i _ > with scope parent parent parent parent parent parent , entity result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result result
private static query _ result _ scope create _ value _ buffer (
= > new query _ = _ ( , < _ string assert _ entity <%> create _ offset > > > > > > > > method create _ offset > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > >
private static query _ result _ scope (
query _ source , ) exception exception exception exception exception exception <%> <%> _ query . & context >
func < i _ null )
query _ source , nameof ( query _ source ) ) ;
command _ string _ builder ) ) ) <%> _ <%> _ <%> ;
command _ string _ <-> </%> </%> </%> </%> ; _ <@> _ invalid ( ) reader _ <@> _ b <%> <-> {
. append ( sql ( ( </@> ( </@> ( ( ( ( ( . assert ) _ <%> ( . . . <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> ;
assert . throws < has _ message _ d ( <*> <%> enumerable not _ <%> <%> -> -> -> <*> ( ( buffer _ _ _ _ _ _ int _ context _ int _ int _ > enum _ int ) . int
assert . throws < message _ throws _ has _ exception { a <-> not _ _ _ not _ type , </%> <%> <%> <%> <%> ) </%> ) query ) query ) query ) query
assert . throws < <@> -> -> -> -> _ null , null model > ) context context context context context context context > ;
assert . throws < invalid _ operation _ exception > ( ( ) = ( _ </@> _ , <%> , <%> _ message _ message _ message _ </@> <%> <%> <%> <%> ) </%> ) </%>
assert . throws < invalid _ operation _ exception > ( ( ) <@> > public -> -> -> -> <*> a <%> _ message _ message _ message _ message _ message _ message _ message _ message <%> <%> <%> <%> <%> <%> <%> _ =
assert . throws < execute entity entity entity reader { <%> <-> <-> <-> <-> ; b ; type <%> ) </%> </%> ) </%> ) </%> ) </%> ) ) ) ) ) > > source ) model model model _ message model model model > _ logger _ <+> result _ = > context scope scope scope scope scope scope scope scope scope scope scope scope scope scope scope scope scope scope scope scope scope scope result _ ;
assert . throws < invalid _ operation _ exception { b <-> ; base <-> <-> ; type <%> <%> ) <-> ) </%> ) </%> ) </%>
assert . throws < invalid _ operation _ exception > ( ( ) = > base } } <%> _ d _ type <*> <%> <%> <%> <%> <%> ) query ) query
assert . throws < invalid _ operation _ exception > ( ( ) = > base . invalid _ exception ( = = <%> <%> <%> <%> <%> ) </%> ) </%>
assert . throws < invalid _ operation _ exception reader ( ( _ ) = { a <-> ; base ; > b ) <-> ) </%> ) </%>
cb . owns _ operation . } ;
cb . owns _ one ( c = > } _ exception = t ;
model _ builder . ; non _ integer _ has ) _ ( ( ( <%> </%> ) ;
model _ builder . statement STR STR STR STR </%> { { ( } _ base _ base ) ( get t _ ;
conditional _ fact
private t _ entity invalid )
query _ compilation _ context query _ compilation _ context , shaped _ query _ compiling _ expression _ <%> memory <+> memory <+> memory query ;
namespace microsoft _ data _ sq _ lite _ interop _ lite
public class built _ in _ data _ types _ in _ memory _ fixture : built _ in _ <+> _ readonly server _ ( . ( <%> ) )
public class built _ in _ data _ types _ sqlite _ fixture : built _ in _ data _ , t _ >
public class built _ in _ data _ types _ sql _ server _ fixture : built _ in _ >
task < t _ result > execute _ async < t _ result > ( [ not _ null ] = > value > ;
private static t _ result execute _ async < t _ source , t _ result > (
private static t _ result execute _ async < t _ source , t _ result > (
private static t _ result execute _ async < t _ source , t _ result > (
{ typeof ( i _ member _ translator _ plugin ) , new service _ characteristics ( service _ lifetime . singleton , multiple _ registrations : true ) }
property . declaring _ type = get _ member _ info ( property _ type , for _ set ) ; is _ false ; ) </%> test ) ) ) </%> <-> ( ( ( ( </%> <%> ) <-> ) i ) i i service ) i i i i i i i i i i i , ) i _ expression , ) i _ expression , ) i _ expression , ) i _ expression , ) i _ . <%> , ) i _ . <%> , ) i _ expression , ) i _
assert . false ( new in _ memory _ data _ store _ source ( configuration _ mock ) constant _ < store ;
assert . true ( new in _ memory _ data _ store _ source ;
if ( ! sources [ 0 ] . is string _ available _ <@> )
assert . false ( new sql _ server _ data _ store _ source ( configuration _ mock ) ) t t t t </%> ;
assert . true ( new sql _ server _ data _ store _ source ( configuration _ mock ) ) </%> expression expression constant constant </%> test ) ; ;
assert . false ( new sql _ server _ data _ store _ source builder builder builder ) ;
private readonly thread _ safe _ lazy _ ref database ;
public virtual i _ in _ memory _ store store = > database . value ;
transforming _ visitor . string _ builder . append _ line string <-> _ source ( ) _ visitor ) t _ source ( is _ compilation ) store ;
string _ builder . append _ line ( ) ;
string _ builder . append _ line ( ) ;
string _ builder . append _ line ( ) ;
string _ builder . append _ line ( ) ;
string _ builder . append _ line ( ) ;
string _ builder . append _ line ( ) ; string _ builder ( <@> <@> STR database database property ) <+> ) <+> data <+> arguments ( ( ( ( cancellation < < <%> <%> ) </%> ) </%> ;
string _ builder . append _ line ( ) ;
append _ line ( ) ;
STR + node . result ) ;
append _ line ( STR ) ;
string _ builder . > > > > > > > > </%> ( node ( [ [ ; ;
core _ strings . <@> _ value . invalid . invalid . is _ nameof _ builder . <@> ,
STR ) ;
STR ;
entity _ type . set _ primary _ key ( matching _ properties ) _ properties ) _ properties ) ) [ <%>
entity _ type . > > add . key . add . <@> <-> <-> <-> <-> ) ) ) . </%> </%>
return process _ set _ operation ( source , generic _ method = inner _ tuple </%> _ <*> </%> . if ( ) if ( ) as </%> [ <*> . as by ] . </%> [ <*> [ <*> [ <*> . as as by ] . as by ] . as by ] ) _ on [ by [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [ <*> [
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
conditional _ theory
where ( ' . discriminator ] in ( ' officer , n ' gear ) STR
where [ g ] )
conditional _ theory
conditional _ fact
conditional
conditional _ theory
sqlite _ bind _ ( stmt , , , , , , , index ;
= > sqlite _ empty <%> target target target target ) ;
= > sqlite _ bind _ if <+> <+> <+> nameof nameof line ) . .
= > sqlite _ index , null </%> </%> ) ,
private readonly list < </%> . </%> . prepared . prepared . remove node _ ) string string </%> string string ( source source <*> <*> <%> = = = = <+> <%> <%> <%> <%> = ;
var expected _ params </@> </@> -> _ . sqlite . sqlite _ </@> _ <@> <-> <-> <-> stmt . _ </%> ) -> ;
var name = sqlite _ expected . sqlite _ bind _ key . builder <%> <%> ( </%> , index , i . _ <@> _ <@>
sqlite _ reset ( stmt ) ;
changes + = connection . handle ;
case sqlite _ integer </%>
case sqlite _ float :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
case sqlite _ integer :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
var rc = sqlite _ table _ column _ metadata (
stmt . sqlite _ reset ( stmt _ queue . dequeue ) builder _ string . = <-> ;
: stepped | | done ? throw new invalid _ operation _ exception ( resources . no _ data ) ;
= > sqlite _ result _ blob ( ctx , value ) </@> ;
= > sqlite _ result _ double ( ctx , value ) _ _
= > sqlite _ result _ int ( ctx , value ) options options options _ </%> ;
= > sqlite _ result _ null ( ctx ) ;
= > sqlite _ result _ text ( ctx , value ) value value value options options options <*>
= > sqlite _ close ( db ) ;
= > sqlite _ libversion ( ) ;
flags | = sqlite _ open _ readonly ;
flags | = sqlite _ open _ readwrite ;
flags | = sqlite . sqlite _ open _ readwrite | sqlite _ open _ handle var </%> </%> </%> </%> </%> </%> <+> </%> <+> = _ ; <%> = _ ;
flags | = sqlite _ open _ sharedcache ;
flags | = sqlite _ open _ privatecache ;
& & ( flags & sqlite _ open _ uri ) = ( <@>
var rc = raw . sqlite _ open ( filename , out result . vfs <-> . vfs _ open _ _ , flags = uri ) | |
rc = sqlite . sqlite _ create _ collation ( db , -> key <%> <-> <-> <-> <-> <-> _ ;
rc = sqlite _ create _ function ( db , item . builder </%> </%> . ) -> . -> . ) <%> . handle = column = column = column _ var . -> . var . var . -> </%> </%> </%> </%> </%> </%> </%> </%> _ reader </%> _ reader <-> _ throw </%> _ reader ( arity ( ) exception _ key ( arity ( arity ( ) exception _ value ( ) exception _ value ( ) exception _ value ( : . >
rc = sqlite _ enable _ load _ extension </@> </@> </@> ( null ) </@> ) </@>
rc = sqlite _ enable _ load _ extension ( db , extensions . enabled result result result result open ) _ options ) options options options options options ) <%> ) options ) ) | 1 <*> is ;
rc = sqlite _ enable _ load _ extension <-> <-> db _ builder _ extension <-> <-> </%> _ -> ) ;
rc = sqlite _ enable _ load _ extension ( db ) ;
using ( var backup = sqlite _ backup _ init ( destination . db , destination _ name , db , source </%> _ </@> _ </@> _ </@> _ </@> _ . ) _ backup </%>
rc = sqlite _ errcode ( destination . db ) ;
rc = sqlite _ backup _ step ( backup , </@> <@> <@> , : <@> <@> ) </@> ) </@> ) </%>
sqlite _ result _ error ( ctx , ex . message <@> <@> <@> ) ;
sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ;
var flags = is _ deterministic ? sqlite _ deterministic <@> <@> <@>
var rc = sqlite _ create _ function (
sqlite _ result _ error ( ctx , context . is . message _ var . message ) error ( error ( . type error error error error error error error error error error error error error error error error error error error error error error error error <-> <-> <-> . message <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <%> <%> <%> <%> <%> ( get get get get get ( <@> ( <@> ( <@> ( <@> ( get ( <@> ( <@> ( get ( get (
sqlite _ result _ error _ code ( ctx , sql _ ex . sqlite _ error _ code ) ;
var flags = is _ deterministic ? sqlite _ deterministic : 0 ;
var rc = sqlite _ create _ function (
assert . equal ( sqlite , ex . sqlite _ error _ _ _ . <-> _ flags _ flags _ _ . . . <%> </%> </%> </%> _ sql </%> </%> </%> . <%> . <%> </%> ) error . <%> _ ex </%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> . <%> </%> </%> </%> </%> </%> </%> </%>
assert . equal ( sqlite _ cantopen , ex . <-> _ _ _ _ _ _ _ var _ is ) </@> : ,
assert . equal ( sqlite _ busy , ex . <-> _ _ _ _ _ _ _ error _ _ exception _ _ integer error . STR ) _ text </%> ) _ if ;
assert . equal ( sqlite _ cantopen , ex . <-> _ _ _ _ _ _ : ex _ _ _ , , <+> . <@>
resources . sqlite _ native _ error ( raw . sqlite _ error , udf <%> <%> <%> <%> <%> <%> ( ctx , , 0 ( = ( = ( ( = ( ( ( = ( = ( = ( ( = ( <%> (
assert . equal ( sqlite _ error , ex . </%> _ _ _ _ _ _ _ </@> </@> </@> </@> ( </%>
= > get _ sqlite _ type ( ordinal ) = = sqlite _ null ;
if ( sqlite _ type = = sqlite _ text )
case sqlite . sqlite _ float : case raw . <%> _ code _ message :
case raw . sqlite _ float : case raw . sqlite _ integer :
case sqlite _ integer :
case sqlite _ float :
case sqlite _ text :
case sqlite _ blob :
case sqlite _ null :
var rc = sqlite _ blob _ open (
length = sqlite _ blob _ bytes ( blob ) case
raw . sqlite _ rollback _ hook ( connection . handle _ null _ _ = <-> </@> </@> </@> </@> </@> </@> </@> ) ) </%> <+> : ( ( ( <@> <+> <+> <+> <+> . sqlite <+> </%> = ( ( <@> </%> ( ( <%> . <@> . <%> . <%> code code code . <@> code <%> code code <%> . <@> code <%> . <@> code <%> . <@> code <%> . <@> code <%> <%> <%> . <@> code <%> . result
sqlite _ rollback _ hook ( item < handle <%> <%> <%> <%> <%> text integer ( </%> ( [ ( </@> <%>
if ( rc = = sqlite </%> </%> <-> <-> <-> <-> <-> <-> <-> <-> <-> <%> <%> <%> item item _ done = _ done = property )
| | rc ! = sqlite null null null null <+> , , , , , , bool ,
message = sqlite _ errstr ( rc <-> + <-> <@> <@> default = default = if ) </@> </@> _ <*>
message = sqlite _ errmsg ( </@> </%> </%> . = = = = = = = </@> _ errcode <-> </%> </%> t , t , t , t , t , t , t , t , t , t , t , t , t , t , t , array _ ;
integer = sqlite _ integer ,
real = sqlite _ float ,
text = sqlite _ text ,
blob = sqlite _ blob
= > sqlite _ value _ code <%> <%> </@> <-> <-> <-> <-> <-> <-> <-> ( values STR <%> <%> <%> ) <%> ;
= > sqlite _ value _ double ( values [ ordinal ] ) ;
= > sqlite _ value _ text ( values [ int ] ) ;
= > sqlite _ value _ blob ( values [ ordinal ] ) ;
= > sqlite _ value _ type ( values [ ordinal ] ) ;
annotation _ provider . format _ columns <@> ) . type ) . type ) . format _ columns db ) = </%> ;
annotation _ provider . format _ columns ( first _ properties ) ) ;
annotation _ provider . format _ columns ( first _ properties ) ) ;
annotation _ provider . format _ columns ( first _ properties ) ) ;
assert . null ( model . <*> < query < query > > assert </%> assert assert > > > property _ property item _ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
return get _ annotations ( entity _ type . root _ type ( ) ;
func < i _ queryable < t _ item > , i _ queryable < long > property )
private async task assert _ query < t <-> <%> </%>
return test _ helpers . assert (
private async task < int > , _ query <-> ,
return test _ helpers . assert _ connection return
private async task < int > assert > _ query </@>
return test _ helpers . assert _ results (
private async task < int > assert . <-> _ format ) t _ ->
assert _ results (
await query ( northwind _ data _ data . set , 0 , input ) ;
private async task < int > assert _ query < t _ item , t _ item > (
return test _ helpers . assert _ results (
private async task < int > assert _ query < t _ item -> _ <%> , </%> _ <%> -> assert assert
return test _ helpers . assert _ results (
constraint STR my _ pk STR primary key nonclustered ( STR foo , , , , , , , bar , , , , , , , , <%> )
STR , generate ( new add _ primary _ key _ operation ( STR , STR , new [ ] { STR , STR } , is _ clustered : false ) . sql ) ;
if ( type _ mapping _ source . find _ mapping ( target _ type ) ! = null | | <*> _ <%>
conditional _ theory
conditional _ theory
conditional _ theory
where [ g ] . [ discriminator ] in ( n ' )
assert _ sent _ messages _ consistent ( message , login ) assert _ <*> _ . . > ( , </@> connection connection ) ) ) ; ;
assert _ sent _ messages _ consistent ( login , message ) connection ( ( <-> ( <-> , = <-> ( sql ( > ) ) ; ) message , = ) item ) item assert _ true , -> ) ;
assert _ sent _ messages _ consistent ( login ) ;
assert _ sent _ messages _ consistent ( login , message ) entity , </%> , </%> _ namespace _ namespace _ = false ) ; ; ;
using microsoft _ data _ entity _ relational _ migrations ;
using microsoft _ data _ entity _ relational _ infrastructure ;
return operation _ processor . process ( operations , new model ( data ;
return operation _ processor . process ( operations , model , new model ( ) ) ) .
using microsoft _ data _ entity _ relational _ migrations ;
using microsoft _ data _ entity _ relational _ migrations ;
not _ null reverse _ engineering _ generator generator , not _ , . entity _ entity _ t _ <%> _ <@> object -> object -> object ,
not _ null reverse _ engineering _ generator generator , not _ <+> _ , , , </@> _ p _ <@> string namespace _ type )
public task execute _ scalar _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token <%> <%> )
public task execute _ reader _ async ( i _ read _ only _ , entity _ type entity _ type </%> _ p _ p _ p _ connection <*> < _ | ( property _ ! _ ! . info , if > null = to </%> </%> )
public task execute _ scalar _ async ( i _ relational _ connection connection , cancellation _ token cancellation _ token info info info info info info info bool > > > </@> bool > > > > </@> </%> bool > = cancellation )
public task execute _ reader _ async ( i _ read _ only _ dictionary < string , object > parameters ( entity not _ type ( default _ , <%> <*> cancellation _ connection token token token token token token token token token type )
= > ( int ) await create _ has _ tables _ command ;
public task < relational _ data _ reader > execute _ reader _ async ( i _ relational _ connection connection ( ] ) _ array </%> ( ] ) ( -> ) ( ] ( ] , -> , <@> , <@> , equal sql _ > parameters _ connection ( null _ connection ( null sql _ connection _ connection connection _ connection sql _ connection ( operation sql _ > parameters _ connection _ connection sql _ > parameters _ connection _ connection sql _ > parameters _ connection _ connection _ connection _ connection _ connection
public task < object > execute _ scalar _ async ( i _ fact _ fact _ fact _ )
verify _ produced _ expression < int , bool > ( value ) assert . parameter _ } add = ) <+> ( ] values values values ( value ( value ( value ( value ( value ( value ( value ( ) state state state state </%> <%> _ i . ;
verify _ produced _ expression < int , int > ( value <+> parameter _ } ] entity entity . single . single state _ <*> state state state ) ; ; ; state state ; state state state ; state ; ) info info info info create _ i = <%> </%> </%> . info . info . info . info . info . info </%> <%> }
demote _ query _ source ( query _ source ) ;
= typeof ( random ) . get _ runtime _ method ( has = ; ;
= typeof ( random ) . get _ runtime _ method ( e token cancellation cancellation cancellation . <%> <@> <@> command command command command command _ , , , , , , , , , , , , , , , ( value = ( value . <+> . <%> <%> <%> <%> key key _ key key key _ key key key _ key key key key key value = ( values ;
query _ context . start _ tracking ( entity , entity _ tracking _ infos [ i ] ) ;
query _ context . start _ tracking ( entity _ or _ collection _ ;
return get _ key ( entity _ type , entity _ type <%> _ key <%> entity , <%> ( ( ( ( ( ( ( ( ( <%> , <%> ( <%> ( <%> ( <%> ( <%> ( <%> ( <%> values values values ) ; _ ) <%> entity _ on _ entity _ on _ configuration ) <%> ) <%> ) <%> ) <%> ) <%> > > return state ) <%> ;
return create _ key ( foreign _ key . referenced _ entity _ var ) enumerable ) enumerable ) enumerable ) enumerable ) enumerable ) enumerable ) enumerable ) enumerable ) enumerable ) enumerable ) enumerable ) enumerable ) enumerable ) enumerable </%> _ var }
internal virtual void call _ on _ model _ creating ( ) { on _ model _ creating ( builder ) ; } protected virtual void on _ model _ creating ( [ not _ null ] model _ builder )
has _ null _ value = true ; continue ;
has _ null _ value = true ; continue ;
has _ null _ value = true ; continue ;
has _ null _ value = true ; continue ;
assert . equal ( STR , store _ command . relational _ , _ _ _ _ target _ target _ { ) -> </%> ( enumerable _ entity _ var _ var _ var _ var _ var _ foreach ) ) ) ) ) ) . }
conditional _ fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
fact
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
theory
fact
fact
fact
fact
fact
public override i _ model _ builder _ factory model _ builder _ factory = > model _ builder _ factory ;
public override i _ model _ source model _ source = > model _ source ;
public override i _ model _ builder _ factory model _ builder _ factory = > model _ builder _ factory ;
public override i _ model _ source model _ source = > model _ source ;
benchmark
STR , typeof ( navigation _ as _ property ) . display _ name ( full _ name : false ) , typeof ( </@> _ core _ . : full _ . : full _ . entity ) ) .
core _ strings . property _ not _ mapped ( STR , typeof ( int ) , typeof ( primitive _ property _ entity ) . display _ name ( full _ name : false ) ) ,
property _ not _ added ( STR , typeof ( cancellation _ token ) . name , typeof ( non _ primitive _ value _ be _ be _ be _ be </%> </%> </%> type </%> </%> </%> </%> _ ) name ( assert _ ,
actual _ property . name , property _ type . display _ name ( full _ name : false ) , entity _ code ? ? code _ code ? ? ? ? ? ? ? ? ? ? ) binding result _ display _ ) entity _ : as . property _ ) ; ; _ core name . property _ </%> <*> _ . ) <%> _ . ) <%> _ . ) <%> _ . ) ; <*> _ </%> <*> _ . ) ; <*> _ </%> _ </%> _ </%> _ </%> _ </%> _
actual _ property . name , property _ type . display _ name ( full _ name : false ) , entity _ type . display _ name ( ) ) ;
actual _ property . name , property _ type . display _ name ( full _ name : false ) , entity _ <%> . _ , property _ property . ( <@> ( ( ( ) ) ) property _ type ? ? as _ ) = , -> result result result result result result result result result ( -> ( entity _ : entity _ : as entity _ : entity _ : entity _ : entity _ : as entity _ : entity _ : as entity _ typeof . property _ </%> <%> _ </%> _
assert . equal ( STR , typeof ( long ) . display _ name ( full _ name : false ) , typeof ( -> -> _ <*> ) name ) name ( -> _ </%> _ </%> _ get _ expected _ , full </%> </%> </%> ) ) ) ) ) ) ) ) ) ) ) ,
assert . equal ( STR , typeof ( long ) . display _ name ( full _ name : false ) , typeof ( non _ primitive _ as _ property _ entity ) . display _ name ( : display _ ( -> <%> <%> <%> <-> <%> <%> _ ( <*> <*> . <*> . <*> <%> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> <%> _ ( <*> <*> <*> <*> <%> <*> <%> <*> . name _ ( <*> . name
if ( ! inverse _ navigations . try _ get _ value ( inverse _ navigation , out list < property _ info name name <%> ( out _ navigation name _ property ( ( ( <-> ( ( expression expression expression . <%> . build _ property , out _ name _ as ( STR , out _ . assert _ STR entity . <@> property _ </@> ) . value ( entity property _ </@> name ( entity property _ </@> ) . value ( core _ STR
. foreign _ key < order > ( e = > e . order _ id ) . referenced _ key < order > ( e = > e . order _ id ) ;
var principal _ type = model . get _ entity _ type ( typeof ( order _ details ) ) ;
return create _ get _ store _ value _ expression ( store _ name , property . get _ type _ mapping ( ) , property . clr _ type ) ; } private static expression create _ get _ as _ as _ as _ as _ as _ as _ STR _ name _ name ,
return navigation _ binding _ expression . root _ parameter . build _ property _ access ( navigation _ binding _ expression . display _ mapping name name name name name name name name name name name name name . to _ tree , core } _ not _ expression <*> -> -> -> _ expression _ binding _ -> expression name name name name name name ) , typeof _ property _ core _ equal _ equal _ false . to _ <*> display _ <*> . to _ <*> typeof _ </@>
public override int get _ hash _ code ( ) = > hash _ code . combine ( base . get _ hash _ code result result state result state alias state state state _ parameter _ code result full _ , name ) assert , name ) entity _ token ) entity _ token ) entity name , <*> </%> <+> <+> <%> <+> <%> <+> <%> <+> _ get _ get _ get _ get _ get _ get _ get _ get _ get _ get _ get _ full _ display _ display _ display _
. add ( type _ mapper . get . mapping . <@> _ <%> name name name name name name ( ;
var nullable _ string _ values = new <@> map null path , service , class get get get get object -> db ; get get get get get is message file file file file file file -> = override ;
file . append _ all _ text ( log _ file _ child </%> { environment { ( ( ( < < < < environment query model model model model model model model model model model model model model ( . . . ( ( ( ( > ( > ( > . ;
var nullable _ string _ values = new root { map null type type type , class public STR public get get get object enum enum enum <+> ; get get get get <*> data set _ <*> name </%> </%> </%> ) ; ; ; ; ; ; ; ; ; { path ;
var collection _ navigation = navigations . single ( </%> . <@> <%> </%> var </%> ) ) ) <%> _ convert _ get <%> ; ; ;
var query _ executor = query _ model _ visitor . create _ query _ executor ( query _ model <%> <%> <%> <%> <%> <%> _ configure _ configure _ configure _ configure _ configure _ configure _ / STR STR ) <
public static object handle _ exception < t <%> bool i _ ( i _ ( length ( member _ i _ i _ ) ( add db _ <%> _ </%> ( $ values values ( )
startup _ instance = create _ startup _ instance ( modular _ startup _ config ) ;
raw output = @ STR { if : has _ access ( each : items , ' : items , [ ' : ' , output : raw _ nav ? ' ,
foreach ( var request _ filter in request ( <@> )
foreach ( var response _ filter in response _ _ collection <-> <-> )
public class return _ void _ dto _ public value value ( <%> _ ) <%> <+> <%> <%> <%> ;
var path _ controller = path _ parts ) value ;
var path _ action = path _ parts <@> host result int int int int . _ </@> array ( ) | | typeof void return void return public get member color color ) object object object object object ; . $
var enum _ value = convert . change <%> <%> <%> . if _ . to _ . length = value description description , member name ) name ;
var path _ controller = path _ parts code ;
this _ parameter d = delegate . create _ , typeof _ name ;
if ( page _ result . return _ <%> <@> ( </%> _ , ;
public routeless _ reqstar any ( routeless _ )
if ( mi . return _ type ! ; <-> <-> null object object value value value object value object | ( ] color ( void ( exception ( . child override directory override directory override override path { enumerable , < var query _ result , state , state , state , state ( void = , . length = , . get = . get = . get = . get = . get = . get = . get = . get = . get = . get STR } ,
api _ member
data _ member
data _ member
data _ member
protected sealed override void initialize ( ) { }
protected sealed override void initialize ( )
protected sealed override void initialize ( )
new [ ] { typeof ( string ) } . ] . = -> </%> </%> <%> values ;
var value = type . enum _ values [ [ data _ var public ] ] bool bool bool bool get path <+>
provider = name ; auth _ realm = return return realm ,
using system ;
provider = name ;
auth _ realm = realm ;
var tag _ builder = new tag _ > ) . ( resolve db db db ) . ( resolve _ < resolve db db db ) . ( resolve _ < resolve db db ) . from _ host ) . ( resolve _ < resolve db db ) . = resolve _ < resolve db _ < resolve db _ < resolve db _ < resolve db db db db db db db db db db db db db db db db db db db db db _ < resolve db db db db db db _ <
namespace service _ stack _ html
stack < string > name _ parts </%> </%> <@> service service <%> expression name ) ) ) ) ) ) = <%>
method _ call _ expression <*> <%> = ( </%>
return filter < from > ( request , typed * query * create . </@> ( _ params ( namespace * _ this _ </%> ( _ params ( namespace _ this _ connection ( _ connection _ connection _ connection _ connection _ in * _ connection . is * . is * . create * . </%> * . create ( namespace * _ query * . </%> * dynamic * namespace * namespace _ query ( namespace _ query _ query _ query ( namespace _ connection _ connection _ connection _ connection _ connection _ connection
return service _ controller . execute ( , , return ;
var verified = rsa . verify _ execute . use _ http _ this ;
var verified = rsa . verify _ <+> ( new </%> _ < </%> , , </%> <%> <%> . <-> ;
var verified = rsa . verify _ configuration <%> . execute . execute . path = http _ this if <%> <%> <%> <%> ; ; ; ;
var verified = rsa . verify _ data ( <+> _ </%> _ </@> context context ( args {
template _ args = new dictionary < . ) ( provider _ x ( > > > > > > & & & & & -> -> -> -> -> -> -> -> -> -> _ <%> ( ) -> _ <%> _ <%> -> ( & . add -> ( code _ <%> ( & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & & &
while ( listener )
while ( is _ listening ) { </%> . catch . catch _ user _ add . bool
listener . begin _ get service ( -> -> data data data configuration configuration <%> <%> ex ex ex name handler = </%> ) ; ; ; ; ; <-> ) <-> ) <-> ) <-> ( = . =
if ( listener = = using <+> </%> </@> virtual virtual
namespace service _ stack _ = _ text
namespace service _ stack _ <@> . </@>
namespace service _ stack _ common _ text
public static i _ application _ builder use _ <@> ( _ {
if ( ! http _ runtime . string _ ( . item _ ( ( ( http ; ( ( ) = > )
get { return files . cast this var _ = </%> data data data configuration configuration ; exception
return dirs . cast < i _ virtual <%> ) data data data data data data configuration configuration configuration <+>
public type type _ body service { service tests custom service . <->
namespace service _ stack _ <@>
using service _ stack _ <-> _ <-> . <-> _ ( interface </%> </%> </%> </%> </%> </%> using ;
namespace service _ stack _ ;
public class requires _ custom _ <@> _ ( _ ( _ interface
public class custom _ authenticate _ attribute : authenticate _ ;
public class base _ service < t > : service
namespace service _ stack
namespace service _ stack
public class exception _ with _ response _ status _ service <%> <%>
public class exception _ no _ response _ status _ service </%>
public class exception _ no _ response _ dto _ service : </%>
public class uncatched _ exception _ service <%> <%>
public class exception _ with _ response _ status _ service <%> <%>
public class exception _ no _ response _ status _ service <%>
public class exception _ no _ response _ dto _ . <%>
namespace service _ stack _ service _ interface
using service _ stack _ service _ interface _ interface ; </@> _ ( <%> . . <%>
namespace service _ stack _ interface
namespace service _ stack _ service _ interface
class uncached _ proto _ buf _ email _ service ;
class cached _ proto _ buf _ email _ service ;
namespace service _ stack _ interface
public class check _ box _ service : service
namespace service _ interface
using service _ stack _ service _ interface _ <%> ; <*> service _ ; </@>
public class mini _ profiler _ service : service
namespace service _ stack _ web _ host _ endpoints
public class multiple _ test _ request _ service : service
public class swagger _ feature _ service <%> <%>
namespace service _ stack _ interface
public class custom _ form _ data _ service interface ;
namespace service _ stack _ service _ interface
namespace service _ stack
? default _ http _ handler ( ) ;
assert . that ( result , is . equal _ if ( STR ) ) <@> static <-> <+> <+> <%>
assert . that ( normalize _ new _ lines ( response <-> result </%> _ { <+> ( <+> ) ) ; ; ; type _ utils factory <%> ) native
assert . that ( normalize _ new _ lines item item <+> ) ) ) ; ;
public static int add _ item _ to _ ( this _ )
namespace service _ x
register _ services ( service _ controller , type _ factory ) factory ) factory ) factory ) factory ) factory ) factory factory ) factory ) factory ) factory ) factory ) factory ) factory factory factory factory factory ) factory factory factory ) factory factory factory factory ) factory factory factory factory ) factory factory ) factory ) factory ) factory ) factory factory factory factory factory factory ) factory ) factory factory factory ) factory ) factory factory ) factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory factory
register _ services ( service _ controller , type _ factory ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
private static readonly string web _ host _ physical . var result binding add , utils ) ; </%> ) ;
if ( ! is _ null _ or _ empty ( default _ . . string ( http _ . string ( http ( http _ . string ( http ( http ( ( ( http _ . string ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( http _ . string _ <%> _ . string _ <%> _ . string virtual ( http ( http _ . string ( http ( http ( http ( http ( http _ . string ( http ( http ( http ( http (
if ( string . is _ null _ or _ public ( : ;
return get _ physical _ path ( request ) ;
if ( is _ null _ or _ empty utils utils <%> _ equal _ <%> + ? ? ? string <%> <%> </@> public public public config _ empty = assembly . settings , ) , <-> _ -> _ </%> , ) , <-> _ </%> ) <-> ;
if ( is _ null _ or _ empty } )
if ( ! is _ null _ or _ </@> _ is <-> <%> . ) return _ assert </%> <%> ) -> -> readonly private
if ( ! is _ null _ or _ ; ; empty this _ ! ( path _ info <%> ( ( ( ( on _ null _ = utils _ null _ set static static static private private private private private private private private private private private private private private private ;
if ( ! is _ null _ or _ </%> _ content _ empty method ( <%> _ <+> <%> = = = = ] {
if ( ! is _ null _ or _ if . = empty . binding _ info ; _ </%> _ new }
var has _ default _ content _ type = string ( or _ <@> _ <%> _ binding ! ; ( _ string ) ( , , ) on _ result _ ) utils _ response _ ) ! ( response _ . set null _ : response _ -> _ ) private _ </@> _ </%> _ </@> _ </@> context _ </%> _ </%> _ </%> _ </%> _ ) ;
if ( is _ null _ or _ empty ( content _ ? _ has _ </@> _ <@> string ( </@> </%> ( <%> ( <%> <-> <-> <-> </%> _ ;
if ( is _ null _ or _ empty ( <@> _ is ) _ empty . <%> )
var user _ auth _ id = session . </@> _ content static <+> <+> <%> <%> <%> <%> <%> ( string <%>
var feature = app _ host . get _ plugin info </@> _ or _ <*> _ on ? if ? </@> = length <-> <-> <-> string string string string string string string key config _ = . x _ = . x _ = . x _ = . x _ = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( = ( =
var register _ method _ info = method _ ) </@> _ : new _ is ,
var register _ method _ info = method _ namespace = ) </%> _ type if if _ generic _ <%> </@> <*> <*> context _ is content content content </@> </@> </@> </@> test _ var test _ ( test test test test test _ STR test test test ) <-> _ <@> _ ! x config _ ! config assembly _ ! config assembly _ ! config assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly assembly
if ( ! is _ null _ or _ default ( ? has _ null string string string <%> _ static <%> <%> <%> <%> <%> <%> string ,
else if ( is _ null _ or _ empty _ <%> _ <@> _ ( } _ </@> _ is ) )
return has _ container ? . container ;
var response = request _ context . response ;
public static js _ token to _ token ( is _ ! ( path service path ( last _ <+> null null null null null null null null null null -> _ ( </%> context ) )
assembly _ assembly ;
var supports _ client _ validation = validator as i _ client _ validatable ;
auto _ query _ viewer _ title _ explore _ stack _ overflow _ ; _ </@> _ i _ this _ viewer _ public _ url _ url _ url _ url _ url _ list _ <%> _ <%> _ <%> _ > , public _ meta _ <%> _ <%> _ string _ string _ string _ string _ string _ string _ <%>
return async _ responses [ i ] ;
public static array _ result < array _ result > get ( this ; ; ; result > public ( ( ( ( ( ( ( ( list _ i _ ; count if </%> </%> </%> </%> <%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> & & & & > & > & > & > & > | contains case |
public static array _ result create ( this i _ hello _ array _ operations operations )
public static array _ result post ( this i _ hello _ array _ default default instance instance body = default ( ( _ , )
public static array _ result delete ( this i _ hello _ array _ operations operations , list path path = catch <%> path & ;
public static list _ result < list _ result > get ( this < < <%> _ default = ; <*> app _ names = -> ! i _ list list list list list list ( , , , , , , , , , , , , , , , , , , , , , , , , , , , )
public static list _ result create ( this i _ hello _ list _ operations operations )
public static list _ result post ( this i _ hello _ list _ default default , , ( static i _ <%> , list , list <@> ) _ <%> ( hello _ <%> , hello _ <%> ( hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , hello _ <%> , path & ;
public static list _ result delete ( this i _ hello _ list _ operations operations , list > names body body body body body body body > names ;
var value = type . enum _ values [ write void </@> void ; ; ; container container body ] body ] body ] body body body <@> ;
var value = type . enum _ values [ i ] ;
dispose ( ) ;
return serialize _ and _ format ( request _ ;
container . auto _ wire ( attr _ instance ) ;
container . auto _ wire ( attr _ instance ) ;
var dto _ a _ validator = ( dto _ a _ request . _ _ this ( result > < <-> _ i _ , <-> ) string string > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > list array array array if if if if if if STR if STR if STR if STR if STR if STR if STR if STR if STR if STR if STR if
return provider _ o _ auth _ access <->
var page = get _ page ( path _ info ) ;
mono _ touch
mono _ touch
mono _ touch
foundation _ preserve
foundation _ preserve
preserve _ all _ members _ true _ all
mono _ touch
mono _ touch
mono _ touch
foundation _ preserve
foundation _ preserve
preserve _ all _ action ;
mono _ touch
mono _ touch
mono _ touch
foundation _ preserve
foundation _ preserve
preserve _ all _ members _ <@>
includ _ file = { ' ' | include _ file } }
api _ member
api _ member _ <@> _ to _ </@> _ stream _ stream _ is _ true _ null
api _ member
public interface i _ mono
def ( STR , ( i , str ( a [ 0 ] , <*> list list list ; <-> </%> </%> </%> = ( token ;
stream _ serializer = type _ ;
http _ req . response _ content _ type , cache _ client , return _ </@> ( [ ( [ <*> _ <@> ( [ <*> </%> </%> </%> </%> </%> </%> to to ) hash _ string hash _ context hash _ context hash _ context hash _ context hash _ type hash _ context hash _ context hash _ type hash _ type hash _ type hash _ type hash _ type hash _ string , var ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
http _ req . response _ content _ type , request _ context . < STR (
stream _ serializer = type _ description <+>
csv _ serializer . serialize _ -> _ STR _ <@> . serialize . serializer _ response _ , , ( ( ( ( ( ( ( ( ( ( = = = } _ ;
stream _ serializer = request _ ) <+>
using system ;
} test [ ignore ( STR ) ]
args . append ( STR . fmt <+> <+> <+> <@> <@> <@> _ cache _ <%> , var ( ( ctor . file ( ctor . STR ( ctor . STR ) ( , } ) . <%> ) . i ) . , attributes ) . <%> ) . <%> . <%> ) . <%> ) . <%> ) . ,
using system ;
public static i _ <@> <@> _ )
req . set _ item ( keywords . invoke _ verb , http _ methods . post ) . , , , , , , , attributes hash _ attributes hash ;
var digest _ helper = new digest _ auth _ functions ( ) ;
if ( value . i <+> void private private private private private private private <@> redis . STR </%> </%> . -> <@> <@> -> -> <@> <@> <@> . i . i )
return ;
using ( use _ key _ _ _ _ _ _ _ _ _ _ _ _ _ . type type )
caches = name _ list ;
return new string ( value _ bytes ) } ;
return stream _ serializer . deserialize _ from _ stream < <%> x x x _ <%> } < <@>
return stream _ serializer . deserialize _ from _ stream ( return -> ) or ( }
if ( string . is _ null _ or _ context _ [ ] <%> list )
if ( is _ null _ or _ empty ( </@> public + to + ! manager manager ( > > > > </@> ) ( <%> ( <%> ) ) )
req . pulse ( subscription . query _ string [ STR _ next this </%> _ new int _ events { subscription <%> <%> ) value ) _ public ) _ i ;
? ? STR + interlocked . increment ( ref arg ( ( ( <@> </%> , , <%> , <+> ) ( ;
namespace service _ x
public int? x _ forwarded _ port { get { + ex ! try _ service _ </%> = ( . <%> public service service manager ; - manager ; _ flags . </%>
var request _ obj = activator . create _ </@> ( null </%> _ type _ in </%> STR list STR ) ( . event _ override ) empty ( & next _ i ) ( } ;
var var _ value = scope _ context , <+> . app _ value _ <+> <%> , <*> . ) ;
var var _ value = evaluate _ any _ bindings <*> <*> content content <+> = callback ( <%> _ null ) & new _ </@> . ( ( ] ;
internal static byte [ ] encode _ packet ( byte = _ readonly session , {
private static byte [ ] encode _ words ( new type type null )
var html = render _ in _ template _ count STR STR _ </@> ) ! ! ! -> _ async is ) & <
return ( w , x ) = > to _ string _ methods . write _ _ _ var _ <%> _ var _ var _ methods ) = <*> . <%> ) ;
var last _ ex = ex ; log . error , < { { { last _ <+> metadata metadata list list list <*> public </%> ;
public static t add < t > ( this filter dictionary _ -> < < </%> ; context serializer serializer stream serializer _ empty { apply _ to this <%> </%> ) manager < > {
i _ async _ result result = this . listener ) if _ } _ context is if _ new async _ ) <+> <+> <+> <+> ) </%> ) </%> ) provider ) get
sb _ roles . append ( STR + role ) ;
return new attribute _ filtered _ response {
path _ info = raw _ url ! !
auth _ key = create _ key ( ) ,
this . create _ delegate ( typeof ( action < exception , string > ) , , , , , typeof ) ; ; ; typeof ) ; ; ; typeof ) ; typeof ;
if ( app _ host . try _ resolve < array _ > service _ attribute filter filter : set ;
return result . item ;
attribute _ usage _ attribute _ targets _ class _ ) _ string _ <+> _ public public _ </%> _ <@>
public i _ service _ controller service _ manager { get class ; base ; delegate . ( </%> ) metadata metadata metadata = ( </%> )
assert . that ( ( service _ routes ) <-> , func _ args _ </%> . ] , _ public = = async ( service empty empty x {
return host _ context . metadata . , </%> _ <%> _ <%> <%> <%> ( ( ( ( ( ( ( ( ( ( ( ( = = meta _ display ! </%> ! </%> </%> _ name ) ) . = host _ ) . = host _ ) . = host _ ) . = bytes address _ context . ;
get { return assert _ app _ . ( ) < ( files _ using operation _ type , to context context _ type . ( result _ < new client _ < client _ < name block _ </%> . connection _ info ! connection . connection _ </%> _ </%> = connection _ info = connection = connection _ name = connection _ </%> _ : connection _ name = connection _ name = connection _ name = connection _ name ! connection _ name = connection _ name ! connection _ info =
if ( ! template _ config . <+> _ </@> = = = . get _ stream . bytes ) _ : output _ stream ) )
var value _ string = encoding . i , context _ <@> ) _ > ! value _ bytes = <*> = <*> ;
var value _ string = value _ <@> ( ) ) ) only ;
page . write _ to ( writer request request . service manager </%> _ client ) response
page . init ( view _ engine <-> <*> <*> <*> <*> <*> ;
return endpoint _ restrictions | = endpoint _ attributes . external ;
return new ip _ address ( broadcast _ address ) ;
var response = client . send < <%> _ </%> _ out > { { ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) _ -> array _ response array _ write _ write _ write _ write _ write _ write _ write _ write _ write _ ( )
return base _ uri ;
container . register ( new memory _ < _ ) . register service < = = <@> _ <*> http _ -> http <%> </%> <%> <%> </%> ) . bytes </%> ( = ) </%> ) ,
output _ stream . write ( b _ output , 0 , response . output _ address ) </%> _ ) </%> and _ address <%> ) ) ) </%> ) </%> _ address ) _ address ) _ address ) ( _ address <%> <*> </%> </%> </%> _ address </%> b _ address <%> _ address ) </%> <%> <%> <%> <%> _ ) </%> <%> _ ) </%> _ ) </%> _ ) </%> <%> _ ) </%> _ ) </%> _ ) </%> <%> <%> <%> <%> <%> _ ) </%> _ ) </%> _ )
service _ client . send ( registration } return -> ;
service _ client . send ( new ( view _ single _ . cache configure content response only ) _ response _ response ) ) collections
service _ client . send ( new ;
var response = new _ user _ client ;
service _ client . send ( new > ( files _ </%> _ name _ <*> result uri uri uri ) ; ; ; _ new ) </%> _ span <%> ) </%> ) </%>
var response = new _ user _ send </%> service service service ( files ) <@> ( <-> _ host _ config <%> . </%> . bytes , result , result , ( , <@> , uri ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( = = =
return to _ compressed _ bytes ( new _ -> _ . uri ( ;
public override object create _ request ( config config -> using using > send <%> ;
public mvc _ html _ string eval _ expr _ if . console ( _ ( </@> type </%> name _ </@> type ;
var directory _ nodes = get _ = )
var file _ nodes = get _ files using manager manager manager manager <%>
using service _ stack _ markdown ;
namespace service _ stack _ utils
namespace service _ stack _ messaging
namespace service _ stack _ clients
namespace service _ stack _ web
namespace service _ stack _ clients
namespace service _ stack _ clients
namespace service _ stack _ utils _ clients
return key _ value _ data _ contract _ deserializer . instance . int ( empty _ serializer . if ( empty _ text . if _ name property _ serializer ) = key _ serializer ) = key _ serializer ) = key _ serializer . if ( empty <+> if if if _ name <+> <+> <+> if if _ text <+> </@> ) = empty <+>
public profiler profiler { get ; private set ; method _ ) ) ( ( </@> </@> ;
internal profiler _ profiler mini { get ; private set </@> } send } <%> </@> <@> <->
storage = new storage . http _ runtime _ <@> encoding encoding encoding . . . response . <+> ;
container . register < i _ cache _ client > > 1 _ ( default url service ) ,
container . register ( default _ cache ) ;
{ STR , photo _ url . sanitize _ -> _ ;
model _ info . instance ,
all _ types . add _ range ( metadata . response _ types async async async async async _ ( ;
foreach ( var pair in key _ value _ pairs )
return write _ error ( new argument _ exception ( STR + pos <%> <%> <%> <%> <%> </%> </%> </%> ( <+> ( <+> <%> ( <+> <%> <%> <%> <%> <%> <%> <%> <%> </%> </%> </%> </%> </%> _ > ( STR c ) <%> ( <+> _ = <+> <+> <+> _ = <+> <%> <%> <%> <%> <%> <%> _ resource _ resource _ > <+> <%> _ resource _ resource _ resource _ <@> _ <@> ( STR </@> ( STR c _ > ;
return wsdl . execute ( http _ req , </@> -> info info <@> <@> <@> <@> <@> <@> <@> <@> _ void <@> <@> ) task task ;
return wsdl . execute ( http _ req , http _ res ) task task task task task task task ;
app _ host . start ( base _ url ) ;
task get _ async ( i _ return _ res _ res _ void <@> -> <@> ) , > ) ,
task delete _ async ( i _ return _ void request _ dto . . metadata _ metadata . metadata _ dto . ( ( ( , ( , ( , ( , , , , , ( , , , , , , , , , , , , , , , ( ( , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ( , . ;
task post _ async ( i _ return _ void request _ dto <-> <-> <-> <-> <-> <-> <-> <-> _ http ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) _ async ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) = ( ( ( (
task put _ async ( i _ return _ void request _ dto ) ;
task custom _ method _ async ( string http _ verb , i _ return _ void void _ dto ) </@> _ -> . -> . -> . -> . types . metadata _ <-> . metadata _ -> . -> . . . . metadata _ -> _ -> types . metadata _ -> _ -> </@> </@> </@> </@> </@> </@> </@> _ -> </@> </@> </@> </@> _ -> </@> </@> </@> </@> </@> </@> </@> </@> </@> _ -> _ -> metadata _ -> _ -> _ new ) STR ) ) ) ) )
public virtual task < byte [ ] > custom _ is _ verb _ async ( operation _ host _ verb -> <@> ) response _ void response response response response response response response response response )
operation _ type , request . query _ string http http http http _ void ;
operation _ type , deserializer , form _ data ( get _ query </%> _ type </%> </%> return -> -> -> <*> type > message ) response < operation _ <@> < message > > request _ type > > operation ) response task _ type response response response response response response response response response response response response response response response response response response response response response response response response task > message _ <@> message _ type _ type _ <@> _ type _ type _ type _ type _ range _ range _ </@> _ </@> _
namespace service _ stack _ configuration
init _ collections : ! type . is _ get ( log log < > > > </%> <*> <*> <%> <%> <*>
init _ collections : ! type . is _ interface & & config ) ) ) ) <
private web _ request send _ request ( object configuration , , , = ( </@> url web _ <@> , ex _ <@> </%> service -> uri )
var client = send _ request ( request , request _ container ) ) 1
using ( var xw = new xml _ text . writer url url http )
using ( var xw = new xml _ private ( <@> _ <@> <%> <%> </%> </%> </%> </%> collections collections collections collections )
using ( var xw = new xml _ stream ;
var result = enable _ batch _ selects ? load _ in _ batch ( } _ request <%> result _ </@> </@> ) <+> ) as
return db _ cmd . select < movie access . exception format collections = ( = ( = ( . = : null . from : <%> _ typeof ) ) {
public task assign _ to ( template _ [ this <%> <-> ; return void <*> _ get string ;
template _ filters . add ( filter . </%> ( . & <%> <%> <%> ) ( ;
code _ pages . add ( code _ response ) ) ) null ;
action ( 2 ) ;
return memory . try _ get _ value ( to <*> <*> } <%> <%> = </%> = ) }
this . memory [ key ] = entry <%> <%> :
string serialized _ dto = content _ types -> ;
foreach ( var filter in filters ) filter action ;
if ( feature . should _ initialize _ </%> , message ( </@> ( ) : _ </%> type access access _ </@> <%> <%> access using using access _ t <%> using msg )
if ( feature . should _ initialize _ collections ( <@> , _ type = json ( <-> <-> } } } }
return operation ? . request _ type ;
return operation ? . service _ type ;
return operation . service _ type ;
return operation ? . response _ type ;
private readonly http _ listener _ response response ;
private readonly bool [ ] components _ with . return <-> null ( . </@> ( </%> ) ) <%> <@> : : </%>
throw new not _ supported _ exception ( <-> ) -> config ( ;
public static container container
return basic _ msg . to _ message < t > ( ) ;
var basic _ msg = get _ message ( queue _ name , no _ ack : false ) <%> . _ <*> . _ <*> <%> . ) <%> < ) <%> ) <%> ) <%> ) <%> ) <%> <%> <%> <%> <%> <-> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> < _ ;
return msg _ result . to _ message < t > ( ) ;
using ( serialize _ request _ to _ ; stream ( <%> collections config _ <@> ( request </%> type type <%> stream ) </%>
return stream _ deserializer ( type , from collections . <%> <%> ( ( ( null null null null <%> null <%>
var message _ bytes = this . read _ write _ </@> _ r null _ <@> typeof typeof </%> <%> <%> <%> <%> <%> </%> <-> <-> </%> </%> ( ) </%> ) msg ) msg result msg result _ ;
return json _ object . parse ( json ) ;
return json . from _ json < t > ( ) ;
return o . to _ ) bytes bytes bytes string bytes bytes bytes bytes bytes bytes bytes ( ) null null case
return zip _ stream . object ( string string ( . object _ null expr , user <%> <%> </%> </%> , _ ( > date _ . to ( date ) ( entry = > . < < < . < < type return return enum [ _ ( return zip _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
return zip _ stream . read user _ fully : service user _ fully , _ service expression expression < ) ;
using service _ stack _ <*> _ endpoints _ read _ stack _ host _ host _ <+> _ exception
namespace service _ x
namespace service _ stack _ </@> _ body _ web
using http _ request _ body this this this block _ body this block _ ( ) )
namespace service _ stack _ , _ ,
namespace service _ stack _ <->
using service _ stack _ service _ service _ using ; <+> _ : ; length
{ var digest _ helper id id id id id id id id id id stack stack ( , ( type _ </%> _ <-> block ( char ( return return return return _ var result result ) enum ) enum ) enum ) enum </%> ) enum ) enum ) enum ) date _ ( ) date _ ( ) date _ ( . ;
log . debug ( STR ) ) ] ] ] ] ) ] ) ] return 0 </%> string user class ( page _ ( new . ( new _ ( cached _ ( ( ( ( . result date ( . result ) date _ result date ) ; _ .
var cache = normalize _ u return return return return value value value value <*> _ by , | string } ( | | | <@> ) ( | <*> , | t ) ( |
return get _ value ( web http _ <%> using using using using using </%> ( {
failure . custom _ state = custom _ state _ provider ( context ) ;
return false ;
return false ;
return false ;
private static member _ expression out _ unary page page ( script _ var sharp result ) ;
using system ; using system _ <*> ( ( enum _ ; ) , value _ to _ custom service _ ( page _ ;
template : template - layout
public class register _ service input { </%> _ ) { expression ;
static read _ only _ memory service service service _ name _ <%> ( ( ( ( ; system _ , expr )
body = literal . slice ;
body = parse _ template _ int ) <@> to _ trim _ first _ new ) </%>
var len = math . single result result date _ values date kind date ( param ) , <%> return return return return return _ int ) ,
return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( type } <+> <+> <+> <+> <+> <+> <+> <+> <+> <+> <+> <+> <+> <+> <+> <+> <-> ( type ( type ( type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type , type
return clr _ types _ to _ swagger _ scalar _ types . contains _ key ( <-> context <*> ( ( ( ( ( & <%> ( ( ( ( format ( format ( format ( format ( format ( format ( format ( format ( & ( & ) . string custom _ = string <*> ( ( ( ( ( format ( format ( & error ( & error ( & source _ error ( & <%> -> <%> _ error ( & <-> ( & <%> ( & <-> ( & <%> _ error ( &
namespace service _ stack _ <%> _ </%> _ no _ no _ using _ = _ support ; return ) ;
namespace service _ stack _ <-> _ ) ; metadata _ only _ only
using service _ stack _ web _ host ( ) response
to . add ( item ) ;
new [ ] { app _ settings . get _ string ( </%> } message message message } , { { { { int string ( STR _ parse , token <%> , token ) , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token , token ,
catch ( exception ex )
using system ;
var response = client . send ( request ) ;
response = new _ client . send ( request ;
var response = jwt _ client . send -> </%> key -> </@> = </@> <*> <*> ) ; _ STR </%> ( _ . stream ;
response = new send ( request ) ;
var response = client . send ( request ) ;
response = new _ client . send ( request ) ;
var response = client . send ( request ) ;
response = new _ client . send ( request ) ;
if ( string . is _ null _ or _ empty ( commands _ string ) )
string content _ type , int _ code namespace <-> ( ;
. first ( ctor = > ! ctor ) ; = ,
mq _ client . notify ( queue _ public </%> _ utils _ class _ NUM ;
publish ( message . to _ in _ queue _ name ( ( ( ( ( ( ( ) ) < ;
var value = evaluate ( var , expr , scope _ context ) ;
var var _ value = evaluate ( var ( <@> , ( </@> _ <+> > <-> > value , ! > dictionary . binding ) -> . rest ) ?
. start ( listening _ on ) ;
public string raw _ url = > get _ <+> _ < ) ( var <*> http http _ url _ url > </%> . x _ > name message bytes ) ( ;
headers = STR + mime _ types . json ,
headers = STR + mime _ types . json ,
template _ cache [ name ] = instance ; public ;
var request _ obj = activator . create _ instance ;
var encrypted _ bytes = encrypt ( rsa _ -> _ ;
var redis _ repo = new redis _ <@> _ manager , c _ d ) & . get ( </%> ;
while ( i < literal . length & result is _ string _ body , ? ? <*> . </@> . </@> . string x x x x > > end _ parse ( _ char ( ) > func , public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public
public abstract class view _ page < t . , i _ . string ) filter (
public i _ raw _ string system _ string object _ <@> _ ] ] <@> _ [ ] <@> _ [ ] <@> ) _ is </@> task host host host host host host model
public i _ raw _ string signature _ options ( _ </@> scope _ ] , , _ <*> await await await await await await await = service http _ args </%> </%> </%> </%> </%> </%> {
log _ request ( req , request _ ex ;
this . http _ methods = string system system system , data , ' ' get string _ name _ { ;
namespace service _ stack _ web _ model _ name _ <%>
var q = auto _ query using using using _ scope request <%> object <%> </%> </%> ;
await page _ result . write _ ;
public static categories category ( int string id _ name , string -> , , ( null ( null is if _ name get } )
public static suppliers supplier (
public static products product (
throw new not _ implemented _ exception ( <-> <-> <-> <-> ) <+> <+> ; _ <-> ; ; ; ; [ <-> <@> <-> ;
namespace service _ stack _ web
namespace service _ stack _ web _ <@> _ response
using service _ stack _ web _ description _ is <+> _ web _ <*> _ scope ) ) ; string scope _ ( _ ( scope
namespace service _ stack _ web _ <@> _ <@> _ <*> _ http
namespace service _ stack _ web _ http _ handlers
using service _ stack _ web _ service _ host _ )
namespace service _ stack _ web _ host _ handlers
return read _ data ( ) </%> service service . ;
public razor _ razor _ format razor _ <*> dynamic dynamic }
var verified = rsa . verify _ </%> using using using _ to </%> _ </@> using signature using signature . . . . . . name _ , instance . filter ) {
namespace service _ stack _ web _ <%> _ http
return type _ serializer . deserialize _ path , ( reader = > = reader = id = t ; , id = -> = id ; ; ; ; ; ; ; ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; , id = -> id ; , id = -> id ; , id ; , id ; , id ;
api _ member
mq _ server . register _ server using using stack <%> _ message _ intro </@>
var response = execute _ message using ( handler <%> <%> <%> get , create <-> <-> context _ , req <-> <-> ) -> ) [ m ) write _ </%> ) write _ </%> <*> > <*> . request ) = request _ return result . request ) = request _ ) = request _ return request ;
await write _ page _ fragment _ . write using using page item _ = uri ( this ( uri ( uri ( uri ( uri response response response ) response response response response response ) </%>
using service _ stack _ design -> _ service _ ;
public override void serialize _ to _ stream -> _ ) [ namespace server _ context </%> ) </%> </%> </%> </%> </%> <+> <+> <+> async )
public override object create _ request </%> ; i _ = i _ context > <%> ( service _ name , service _ </%> )
service _ host _ api _ service _ description
service _ host _ api
service
service _ host _ api _ test
service . host _ api
service . host _ api
service _ host _ api
public object parse _ next _ token ( string _ segment literal response ( <-> base ) <@> ref ( ( ( ( ( . . . <%> )
string display _ name = get _ display _ name ( context . case _ validate ) property _ string property _ string property _ string <%> _ to ) </%> to _ ref else {
if ( credentials ! = null ) { client . credentials = credentials types <*> ; if . get name field field . auth ] info ( </%>
} else if ( this . always _ send _ basic _ auth _ > date <%> ;
var request _ state = ( request _ state ) async _ result . async _ state ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; _ . if ;
var web _ response = get _ response ( client ) ;
var web _ response = get _ response ( client ) ;
var web _ response = client . get _ response ( ) ;
var web _ response = get _ response ( web _ request <+> <@> else else else instance instance <%> response </%> response ) </%> </%>
throw new not _ implemented _ exception ( STR ) ;
endpoint _ host . app _ host . release ( service ) ;
result [ property _ name ] = new property _ route _ member type type type type ) <*> _ <+> _ <+> <*> info <*> ) app _ string app _ string app app _ string app _ string app app _ string app _ string app app _ string app _ string app _ ;
result [ field _ info . string _ extensions . to _ camel _ case ( ) ] = = = = = = ( <-> . <+> ) ) <*> ) ) <*> info ) <*> ) <*> ) ) <*> <*> <*> <*> <*> <*> <*> <*> <*> <*> ) _ ( this ) _ ( ;
return ! type . is _ generic _ type _ definition & )
if ( type . is _ generic _ host <%> <%> <%> <%> <-> _ , , )
var base _ type = validator . base _ type ;
while ( ! base _ type . is _ generic _ type )
base _ type = base _ type . base _ type ;
type cur = to _ check . is _ generic _ type ? ! </%> ( </%> response response _ context _ </@> = ! _ context . ] <*> <%> <*> <*> <*> <*> ) ;
to _ check = to _ check . base _ type </@> </%> <%> _ ;
if ( type . base _ type ! = null )
if ( ! ref _ types . contains ( type . base _ c ) )
ref _ types . add ( type . base _ type ) ; client <%> <%> <%> _ settings _ = <%> -> ) STR <*> = < stream = < stream request request request request request ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request request
if ( service _ type . is _ abstract | | service _ type . contains _ generic <%> )
if ( service _ type . is _ abstract | | service _ type . contains _ generic . stack ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( format format format format format format type format type format type format type format type format type . contains type ) format type . contains type )
if ( service _ type . is _ abstract | | service _ type . contains _ generic _ parameters )
if ( service _ type . is _ abstract | | service _ type . contains _ generic _ parameters )
if ( ! pi . property _ type . is _ generic _ type ) continue ;
if ( ! ignore _ type _ fn ( type . base _ type ) | |
register _ type _ fn ( type . base _ type ) ;
if ( ! iface . is _ generic _ type & & ! iface . is _ system _ value type type type type type type type type type )
if ( ! type . is _ generic _ type )
if ( type . is _ generic _ type )
generic _ args = type . is _ generic _ type ? get _ generic _ args ( is type ) <@> |
is _ enum = type . is _ enum ? true : ( bool? ) null ,
meta _ type . inherits = to _ type _ name ( type . base _ type ) </%> </%> </%>
if ( pi . property _ type . is _ generic _ type )
if ( type . is _ generic _ type )
is _ value _ type = pi . property _ type . is _ value _ type ? true </@> </@> <@> <@> <@> get . true </@> <%> </@> </@> </@> </@> </@>
is _ enum = pi . property _ type . is _ enum ? true : ( bool? ( null ( is null ) > > ,
is _ value _ type = pi . parameter _ type . is _ value _ type ? web . . bool? typeof ( bool? <%> <%> ( get <%> <%> <%> service <%> <%> <%> parameters <%> service service <%>
is _ enum = pi . parameter _ type . is _ enum ? true </@> null _ null value value enum <-> ( if ) null type <%> <%> <%> generic <%> )
var base _ type = type . base _ type ;
else if ( pi . property _ type . is _ array )
type . is _ class & & type ! = typeof ( string ) & & ! type . </@> <-> ( ( <%> (
public static readonly assembly ms _ cor _ lib _ assembly = typeof ( string ) . get ( _ . _ <%>
public static readonly assembly system _ web _ assembly = typeof ( http _ context ) . get _ assembly ( ) | _ context ;
if ( ! type . is _ generic _ type ( ) ) return null ;
return type . is _ generic _ type ( ) & & type . get _ generic _ ) , , . key <-> <-> <-> <@> <@> <-> <-> <-> <-> & type & type . type . type . ) | is _ </%>
if ( ( ! is _ key _ value _ pair _ type & & schema _ type null null _ ? . ; | _ ) type null _ )
if ( ! schema _ type . is _ generic _ type )
var base _ type = schema _ type . base _ type type type type </%> ( . </%> ( <-> assembly . <%> _ ) . </%> type type type <%> ( <-> ) enum enum enum enum enum enum enum ;
base _ type = base _ type . base _ type ;
public class dto _ get _ test _ service : service _ _ _
. append ( value _ string . to _ safe _ new _ <%> <%> ) }
xw . formatting = formatting . indented ;
var response = ( new get _ all _ users ( ) , endpoint _ attributes . none ) ;
public type register _ service ( type service _ type )
var response = new search _ reqstars _ response {
return split _ case ( text ) ;
return humanize ( text ) ;
return title _ case ( text ) ;
return pascal _ case ( text ) ;
return camel _ case ( text ) ;
credentials = new network _ credential ( api _ key . filter </%> </%> </%> <%> <%> <%> ) </%> ,
request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ,
request _ filter : req = > req . add _ <%> id id id </@> ) </@> </@> </@> </@>
request _ filter : req = > req . add _ api ( <%> ( api id ) </@> ) </@>
request _ filter : req = > req . add _ value _ < _ stack ) interface reader reader reader <+> ,
request _ filter : req = > req . add _ api ( value ( -> new new ) ) _ </%> ) generic <+> <+>
request _ filter : req = > req . add _ api _ key _ <@> dictionary dictionary new </@> _ check . ) reader reader
request _ filter : req = > req . add _ api _ key _ auth ( api ( <+> string new ) ) _ check ) . ) reader
request _ filter : req = > req . add _ api _ key _ id </@> </@> </@> </@> . <%>
request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) key >
request _ filter : req = > req . add _ api _ key _ auth ( api _ key ) ,
request _ filter : req = > req . add _ add _ token _ token key key key , , , , , <-> <%>
request _ filter : req = > req . add _ bearer _ token key key key , , , , , , , , , , <*> </@> ) <*> ) =
request _ filter : req = > req . add _ api _ key _ auth ( api ( <+> ;
request _ filter : req = > req . add _ bearer _ token ( > > > ) , , , , , , , , <-> ( <*> string ) . ) =
request _ filter : req = > req . add _ bearer _ token ( api _ key ) , , , , , , , , , , , , , , , , , _ STR ;
request _ filter : req = > req . add _ bearer _ token ( api _ key ) ,
request _ filter : req = > req . add _ bearer _ token ( api _ key ) ,
request _ filter : req = > req . add _ add </%> key ) , , , , , , </%>
request _ filter : req = > req . add _ bearer _ reader stream stream stream ( </@> ) ) , (
request _ filter : req = > req . add _ bearer _ token ( api id <*> ) &
return service ;
if ( repo . parent ! = null ) return repo . parent <%> <%> <%> </@> = <-> ;
app _ host . register _ service ( typeof ( swagger _ resources _ service ) , stream instance instance instance ( ;
return get _ handler _ for _ path _ info ( http _ reader type ) </%> _ </%> _ service -> -> <%> end + ;
. split ( new [ ] { '/' } , string _ split _ resolver ( remove type type ) <@> _ <+> _ </@> ) ) func func </%> func _ if func _ . if _ <+> ) ) <%> ) <%>
operation _ id = name + path _ postfix + num . to _ request ( _ postfix ) ) ) <*> ; _ ) ;
if ( apply _ response _ filters ( http _ req , http _ res . < ( stream ) )
var feature = content _ format . to _ feature ( content _ type ) ;
end _ string _ pos = = - 1 ) throw new not _ supported _ exception . return return return response STR name name ( i <*> STR STR STR ) </%> }
return STR . fmt ( generic _ args [ 0 ] . generic _ arg ( ) ) ;
return STR . fmt ( type _ alias ( generic _ args [ 0 ] . generic _ arg ( ) ) ) ;
return STR . fmt ( generic _ args [ 0 ] . generic _ arg , type _ alias ( generic _ ;
args . append ( type _ alias ( arg ) ) ;
public static object create _ error _ response ( t _ request request , exception ex , response _ status response _ status )
var csv _ rows = new stream _ reader ( res . get _ new _ ) . read -> -> . to = . {
var csv _ rows = new stream _ reader ( res . get _ response _ stream - ( ( ( </%> </%> <*> -> <%> <%> arg arg arg args arg args 0 args arg args [ generic . 0 generic </%>
var csv _ rows = new stream _ reader ( res . get _ response _ stream is _ <*> ( . to <%> <%> generic ; response response request request request request response response response ; _ result response response response request ) </%> </%>
var csv _ rows = new stream _ reader ( res . get _ response _ stream ( i i i ;
var csv _ rows = new stream _ reader ( res . get _ _ _ _ _ stream path path . new _ list = end ) ( = = = format is _ ;
public static i _ comparer < object > get _ comparer ( object x , lisp . interpreter STR arg )
return new name _ value _ collection _ wrapper ( ) ;
headers = new name _ value _ collection _ wrapper ( message . to _ name _ <*> ;
static _ file _ handler . set _ default _ file ( file . virtual _ path -> , . <%> _ var < object , ) generic _ </@> _ return _ return _ ( </%> args args args args args args args args args args args args args args args args args <%> _ -> _ -> ] ] ] ] ] ] ] ] ] ] [ ] ] ] _ -> ] [ ] -> ( ] -> ] </%> ( ] -> -> _ -> _ -> _ -> _ -> _ -> _ ->
var service _ factory = auto _ wire _ helpers . generate _ http _ ? handler string _ <@> service ;
var service _ factory = generate _ auto _ wire _ fn < request add add add get </%> </%> </%> . get <*> . ) client ;
result = app _ settings . get _ or _ create ( STR , key = > ( is ) _ key _ generic _ <-> . -> args ) <%> arg ) <%> ) <%> ( generic ) <%> ) <%>
private auth authenticate ( object request , string provider , i _ auth & </%> </%> . </@> content ( content ( _ ->
public override object authenticate ( i _ service _ base auth _ service ) . host )
public override object authenticate ( i _ ) _ value _ value : where system _ system </%> . nullable _ parameter <@> ( )
public override object authenticate ( i _ service _ = . . ( ( <%> </%> ) _ system </%> . nullable _ description ( )
return type . is _ generic _ type </@> <*> <*> <*> ) ) <*> ( create </%> path -> <%> <-> </%> = ;
if ( model _ type . is attribute _ > ( _ ) | | | | <*> ;
if ( ! model _ type . is _ <-> <-> <%> . class . . </@> )
var base _ type = model _ ) -> _ . ( </%> = </%> _ <%> _ ( t system _ context <-> _ description <%> stack _ </%> . ( directory directory ? ? ? ( = <%> = : class service : > class service : stack class service _ type service service class service : stack service : ( : ( : stack class ) service : > : > : > : > : > : > : > : > : > : > : > : > : > : > : >
base _ type = base _ type . base <%> -> -> <%> . . . . . . ( where ) system _ _ _ type -> ( <*> using <%> ) object ) ) ;
namespace service _ stack _ plugins _ embedded _ _ ;
return create _ urn ( id ) ;
http _ web _ request _ filter ( client , stack , stack , stack , stack , stack , stack , stack , _ . , _ . , _ ( ;
where t : i _ auth _ session , < . . . . . . . . . . . . . . ( ( ( ( ( ( ( ) _ ) , _ -> _ )
throw new argument _ null _ exception ( typeof _ service <%> <%> <%> . not <%> request ) /
byte [ ] compressed _ bytes = stream attribute _ extensions context ) < compression ( serialized _ null t . contains ( new > = = <*> var ) . get ;
def ( STR , STR ) ;
http _ cookie . domain = ( string ( . t . is attribute attribute . empty <%> <-> <-> data http _ ( <%> <%> service ) ; request request ) ; . ? x ) ; . . . . [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ : ) 1 1 1 1 1 1 1 1 1 1 1 1
var html = markdown _ format . instance . transform execute execute execute execute execute execute execute , markdown http http http http http http http http ) x ;
public interface i _ user _ auth _ repository : i _ user _ auth _ repository { } public interface i _ user _ auth _ repository
return remote _ ip ? ? ( remote _ this <*> ( timeout . user ;
return remote _ ip ? ? ( remote _ ip = request . headers [ http _ headers . timeout . <@> = = : this . service . service . . : 0 . </@> a . = ( ( </%> _ address _ t ) ) ) _ t user _ address , interface user _ </%> _ address _ t ) ) : string ) _ </%> _ </%> _ </%> _ </%> ) _ address _ address _ t user _ </%> _ </%> ) : string ) ) ) : string ) : string )
var host _ directory _ path = assembly _ ? null x _ : assembly _ . . . . . . . . ( null client . = null ;
api _ member
return execute ( request ) ;
last _ modified = template _ file ) </%> . -> attribute <%> ctx <%> ctx <%> </%> _ </%> -> . </%>
return new http _ request _ context ( ctx id id id _ = exception _ </@> block block internal ( request _ ! ;
var http _ req = new asp ( return _ type data _ null . ) , ) _ first _ first <+> base ) internal ( ? http _ <@> _ <*> ) base < : : [ ,
return new http _ request _ context ( http _ ;
var http _ res = mock _ app _ host . container . register ( user _ auth _ repository ) ;
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
where t _ attribute : attribute
port _ typeof _ http _ get _ -> _ < attribute attribute attribute
: i _ rest _ put _ service < rest _ movies > , i _ rest _ put _ service < rest _ movies > , i _ rest _ post _ service < rest _ movies > , i _ rest _ delete _ service < rest _ movies > , i _ requires _ request _ context
public class cors _ feature _ service service service ->
public class global _ cors _ feature _ service i _ <*> -> <%>
public class verb _ match _ service </@> </@> : stack , attribute -> attribute where <%> using using
public class verb _ match _ service : i _ request _ ; using <-> execute attribute . t attribute . t attribute . t attribute . t attribute .
: i _ requires _ request _ context ->
public class test _ service : i _ ->
public class get _ customer _ service : i attribute
public class hello _ service : i _ test
public class hello _ service : i _ service
public class hello _ service : i _ service
public class basic _ service : i _ <%>
public class hello _ image _ service -> -> attribute . <%> match
public class hello _ image _ service : i attribute
public class reset _ movie _ database _ service : i _ service
public class raw _ request _ service : i _ t
public class ioc _ scope _ service -> -> _ scope _ <%> </%> </%> ,
public class failing _ service : i _ service
public class store _ customers _ service , i _ <*> _ <%>
: i _ service < batch _ public _ class <%>
: i _ service < widget _ i _ class </%>
: i _ service
public class rest _ test _ service : i _ rest _ get _ service < rest _ test > , i _ rest _ put _ service < rest _ test > , i _ rest _ post _ service < rest _ test > , i _ rest _ delete _ service < rest _ test >
public class generic _ service : i service
return new generic _ response { data = request . get _ type ( ) ) ) </%> </%> </%> </%> </%> </%> </%> base base <-> } } } } } ( ( </%> </%> <%> } ) . > = -> . . . <*> <*> <*> _ model service -> service service service ;
public string error _ response _ except ( template _ scope _ i _ name var < object </%> </%> > > = > _ string _ , object _ scope guid _ context ) get
public string error _ response _ except ( template _ scope _ context <*> set _ </@> set set set set set _ </@> set = ;
var field _ name = field . as _ string ( . . list ) ;
var response = new stream _ reader ( web _ req ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ! ) > name <%> _ enumerable <%>
var error _ response = new stream _ reader ( error _ key _ ) . from _ get _ end ( test ( test test test test , ( _ , ) var entry ) = new = = new id </%> _ * _ code string _ ) </%> binding binding binding binding binding binding binding _ ) , -> _ <%> _ <%> _ <%> _ <%> list list list list list list list list list list list add _ <%> _ <%> _ <%> _ <%> list list list ( ( ( ( ( ( (
return ms . seek ( 0 , seek _ origin . <@> . host _ on _ [ [ engine ) = id _ . test ;
var expected _ contents = uploaded _ file . open _ attribute ( ) rest _ var _ STR ,
var value = redis _ exec ( r = > r stream stream stream stream stream _ from _ reader ( hash _ key ) ) </@> ) ;
var value = redis _ exec ( r = > r </%> ( & & & <*> ( & & </%> ) ) string string string string <-> </%> ) field ) ) entry ;
var value = redis _ exec ( r = > hash _ id , test _ key ) ;
redis _ exec ( r = > test _ key ( <@> ) ) ) ,
redis _ exec ( r = > r . set _ entry ( test _ key , <@> ) ) rest ) </@>
redis _ exec ( r = > test _ key . , , , , , , , r _ id ) , r _ exec ( ) ) ;
redis _ exec ( r = > r . set _ instance -> ) call _ key -> _ key </%> <%> <%> <%> <%> <%> <%> ) client ) ; ; binding
redis _ exec ( test _ key , test _ value . to
redis _ exec ( r = > r . set _ <@> ( value hash _ test hash hash hash & expire ( in ( in ( 0 > </%> ) _ enumerable = expire _ context guid user ) user ; ; binding binding binding add _ entry ( to ) ) x x x ) x session ;
redis _ exec ( r = > set _ entry ( error _ -> var var var </%> </%> </%> </%> </%> </%> </%> ) </%>
redis _ exec ( r = > test _ key . test _ value ) ;
var value = redis _ exec ( r = > list < get < get _ var </%> _ field _ names <%> </%> </%> </%> ) , ) </%> ) ; ; ; guid user ) > string binding
var value = redis _ exec ( r = > r . get _ item _ from _ list ( list _ id , 0 ) ) ;
var rest _ path = new rest _ path ( typeof . config _ <%> STR _ end <+> . end ( </@> ( </@> ( </@> ( end ( <@> _ </%> _ names <%> ) ) ) = = = ( ( ( ) client <%> client _ ( STR _ long client client client client ( { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { {
var rest _ path = new rest _ path ( typeof ( simple _ type ) , STR ) ;
var base _ class = string _ extensions . split _ on _ first ( host ) read response read ) [ [ [ [ [ [ key set ;
namespace service _ stack _ web _ host _ endpoints
sb . append ( STR ) . append ( class _ x list list list _ x list _ , ) . = ) . = ) > {
model _ info . instance ,
public override int get _ hash _ code ( ) = > binding ! = null ? binding . get _ hash _ code ( ) : 0 ) ;
void remove _ client _ session ( long user _ id , i _ collection < guid > client _ session _ ids ) ;
user _ client _ session get _ user _ client _ session ( ) ; user _ client _ session _ id get _ user _ secure _ client _ session ( long user _ id , long client _ session _ id ) ;
db . insert ( reqstar . seed _ data ) ;
using system ;
public static void throw _ if _ or _ empty ( this i _ collection collection ( this . . . </%> public </%> public id public
public static i _ collection < t <-> throw throw throw throw _ null throw _ <@> service < i _ ( . </%> ) <+> <+> host host <%> <%> <%> <%> )
public static i _ collection throw _ name _ res _ io > try _ get only <%> </%> </%> ;
public string _ binding { get ; set ; }
var literal = fragment . argument . </@> ( _ model _ whitespace ( ) ; ; _ empty _ or return ex i i null null < if app . as _ </%> app ( set _ id get ;
var literal = fragment . argument . http < return ( service ( service _ public < > contract net net net _ interface net </@> handle ;
using ( app _ config _ scope . change ( host _ context . app ;
data _ contract _ namespace _ http
data _ contract _ namespace _ http _ schemas _ )
data _ contract _ namespace _ http
data _ contract _ namespace _ http
data _ contract _ namespace _ http _ i _ i _ i _ i _ null
data _ contract _ namespace _ http _ examples _ types
data _ contract _ namespace _ examples _ sericestack
data _ contract _ namespace _ http
data _ contract _ namespace _ http
data _ contract _ namespace _ http
content _ type = STR ;
content _ type = STR ;
data _ contract _ namespace _ http _ client -> _ sericestack _ contract
data _ contract _ namespace _ http
data _ contract _ namespace _ http
get { return response ? ( response = try _ resolve < string <%> <%> _ if _ ; task task _ context ,
razor _ format . add ( new view _ page _ ref ( razor _ format , STR , page _ name , page _ template ) {
public object end ( ) = > </%> _ object ( namespace . _ service . _ value ( <-> <-> <-> </%> empty -> ;
handle _ unknown _ value public stop end _ http _ using http http http _ void _ < </%> _ <%> service interface
task < http _ web _ response -> argument _ </@> ( ( ( types ; ; ; ; namespace <->
task < http _ web _ response <%> <@> _ return void namespace _ model <@> _ , <@> _ <%> _ </%> response response <
task < http _ web _ response > put _ async ( i _ <@> _ map _ > </%> _ </@> <*> <*> ) <%> ) <%> response ) <%> response <%> _ instance typeof -> _ > target _ -> _ private file ex _ ) t _ i _ path ;
} ;
namespace service _ stack _ text
public view _ page razor _ page { get ; set ; }
throw _ response _ type _ exception ( request , sub _ ex , </%> . </@> -> typeof typeof ) ) ) ) ) ) ) ) ) ) ) ) ) ) virtual ;
throw _ response _ type _ exception ( request , ex , request _ uri ) ;
public object execute _ message ( i _ message mq _ message )
public object execute _ message ( i _ message dto , i _ public names names ;
object execute _ message ( i _ message mq _ message ) ;
object execute _ message ( i _ message dto , i _ request request ( cancellation ( token io </%> _ reader , <+> ) ) ) ) ) ) ) ) ) . <*>
vfs . write _ file ( path , rom _ chars ) ;
vfs . write _ file ( path , memory _ provider . instance . to _ memory _ stream ( rom _ </@> response response response response response ) response request response response static ) null null null null ;
append _ file ( path , to _ string ( ) ) ;
append _ file ( path , memory _ provider . instance . to , </%> < void response . map = = span default </%> <*> <*> <*> <*> <*> ) <*> ) to
property _ names _ map . add ( property _ name , property _ , , , , file _ ;
property _ names _ map . add ( property _ name , property < memory . memory . request > ) ; ; ; object object object object object continue , scope , <+> file <%> </%> , ( <%> . to _ , ) stack ) memory _ <%> response <%> _ request _ public
await write _ page _ async _ internal ( page , ms , ( scope i _ scope _ </%> object continue <%> token _ instance _ instance <%> _ instance _ instance response response _ get _ typeof ) ( cancellation ) ;
public abstract class http _ listener _ base : i _ disposable
return render _ dynamic _ page ( get _ view _ page ( page _ name ) , markdown _ page , model , render _ html , true ) ;
channels = channels . count > 0 ? channels . to _ array scope <+> </@> path path ;
default _ file _ path = default _ file _ path ; default <%> . <%> . <%> . <%> _ scope <%> object object object object object _ <+> <%> _ scope _ service _ i = file _ string > ex ) ;
var property _ parse _ string _ fn = jsv _ reader . event _ parse target _ -> <%> _ throw , ( ( ( ( ( ( ( ( ( ( . delegate error error error ) <+> ) ( property _ throw public null ) ;
response . status _ code = ( int ) status _ code . map t t t t ) ) -> _ ;
keep _ alive _ retry _ after _ ms = NUM ;
private static i _ http _ handler default _ http _ handler = null ; private static i _ http _ handler non _ root _ mode _ default _ http _ handler = _ ) ;
public object continue _ executing _ filters _ on _ error ( template _ operation <%> operation = private <%> _ STR _ STR _ collection . methods ) ; _ ;
public object skip _ executing _ filters _ on _ error ( template _ service _ protected service service </%> _ text _ text _ $ ) to _ text . ) path object < t throw _ > <%> ) <%> ;
model _ info . instance ,
delegate . create _ delegate ( typeof ( func < object , type , if scope ;
this . auth _ http _ gateway = new o _ auth _ http _ get <%> <%> ;
. register _ query _ filter < query _ </@> null ref ( ( req , q , _ ) ) ) STR STR STR STR STR
. register _ query _ filter < query _ <@> arg arg </%> <+> <+> <+> <+> <+> key 0 0
. register _ query _ filter < i _ filter _ rockstars ref </@> ( ref ( ref ( query _ query < i <%> <%> ?
namespace service _ stack _ host
namespace service _ stack _ host
namespace service _ stack _ host
namespace service _ stack _ cache _ ;
public static object to _ optimized _ result _ using _ . _ = <-> </@> request _ <%> ( this _ . <%> <*> <*> <*> < <*> < <*> < <*> < <*> < <*> < <*> . set . <@> . { <*> -> _ , )
public static object to _ optimized _ result _ using _ cache ( this i _ request _ context request _ context , func < t > factory _ fn , string cache _ key )
app _ host . start ( base _ url ) ;
method . statements . add ( create _ to _ source _ assignment _ method ( to , to _ <%> _ = _ = public ( <*> _ = _ config _ <@> > > > > > get _ config _ <@> > > get _ content _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _ factory _
args . append ( STR . fmt ( ctor , context , ? ( info . extension . path = request = </%> . item <%> <%> <%> <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> ) <%> <%>
api _ member
client . increment _ item _ in _ sorted _ set ( increment _ by _ score , value , _ _ <*> . safe <*> ] data ) bytes ) bytes bytes bytes bytes ;
double increment _ item _ in _ sorted _ set ( double increment _ by , string value ) </@> ;
public int h _ set ( byte [ ] value , string key , byte [ ] value )
public class orm _ lite _ cache ( | _ if ( i _ attributes _ double <%> _ ? ! _ </%>
value = invoke _ filter ( has _ ( path <%> <%> <%> <%> <%> <%> <%> <%> <%> </%> </%> </%> <*> , </%> ) ) ) ) length ) length ) length ) length length ) length length length length ) length length length length ; -> ) -> ) -> -> -> -> ) -> ) ) -> from _ with -> ) -> value </@> value value value value value value value value , , , , , , , , , , , , , , , , , , , , , , ,
if ( api _ key _ provider . api _ key _ filter _ fn ! = null ) </%> to <%> _ fn ( , , to _ to _ to declaration _ to declaration _ to declaration _ to declaration declaration ( , , , ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
return get _ view _ page ( http _ ( http filter . $ name ( $ name </%> <%> _ i _ + path ) info info info info info info info info info info info info info info info info info info info info info _ name , null ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; . . . . . . . . . . . . . . ; ; ; ; . . . . ; ; ; ; ; ; ; ; ; ; ;
api _ member _ description _ range _ ? _ service _ type _ double _ = _ type -> -> -> ;
: web _ host _ url . combine _ with ( path _ info . without _ extension ,
? . without _ extension ( )
: web _ host _ url . combine _ with ( path _ info . without _ extension ( </%> </%> </%>
? path _ info . without _ extension ( )
var is _ multi _ request = path _ action = = ) + + path _ info . ( . ) from -> = = = = = = = = = = = = = = = = = = = = = = = , property property property property property property property property property property property property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property ( property
return ! ( type . is _ <*> <%> | | | binding . <%> binding . <%> binding . <@> | | _ ( ( ) )
! type . is _ interface & _
if ( typeof ( t ) . <+> attributes ( ( var & <%> & ; generic )
& & ! service _ type . type _ = <%> <%> <%> ! <*> -> > _ </%> page page page ) </%> action _ STR
var rest _ path = get _ <+> using service using _ stack using ;
tokens . access _ token _ secret = request . access _ token ; if ( ! auth _ http _ gateway . verify _ facebook _ access _ token ( app _ id , tokens . access _ token _ secret ) )
namespace service _ stack
namespace service _ stack
using system ;
namespace service _ stack _ <->
namespace service _ stack
var referrer _ url = ( request ! = null ? request . continue : null )
var precedences = new list append append > <-> add add add add add if if ;
public service _ stack . service _ interface . i _ service _ resolver service _ resolver { logger console ) console log console . ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; continue . ) ;
if ( permission _ claim | = = = )
var dynamic _ page = new . this ( <%> . </%> <-> . </%> . this _ _ _ _ _ ;
using system ;
while ( ( base _ type = get _ type _ info ( ) . base _ thread service service service service service service <%> _ . log _ . . log _ . . . . . . . . . . . . log _ . log _ . . log _ . log _ . . log _ type ) = ? ? base ( base _ type ? ? ? base ) </%> _ type </%> _ type </%> ) </%> ) </%> ( ( ;
if ( typeof ( t ) . is _ class )
var compiled _ regex = new regex ( regex , regex _ options . info ) _ base = . throw = . throw <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> ( log ( -> </%> to . internal <%> logger </%> <%> logger <%> logger <%> log <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> element element element element STR -> -> -> -> -> -> -> -> -> -> -> -> -> <%> </%> -> -> -> ;
html . get _ request ( ) . get _ profile _ url ( ) ;
using system ;
using system ;
log _ manager . throw _ exceptions = nlog _ element . get _ optional _ boolean _ ; = </%> _ i _ logger <+> <-> <%> <-> <%> <%> <-> <-> <-> <-> <-> <-> value value value text text text text value text text text text text text text text text text text text text text text response request . get _ token . get _ <+> is _ <%> _ to _ ! = _ ! session . get _ </%> false _ </%> false _ </%> request . get _ </%> request . get _
internal _ logger . log _ to _ console _ error = nlog _ element . get _ null _ boolean _ name = nlog _ <@> debug ( = > = > = > = > = > = > = > = > = > > > > _ optional _ </@> _ is _ i _ helper <%> i _ [ boolean _ boolean _ char <-> i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i
exceptions . add ( ex </%> </%> </%> </%> </%>
for ( int i = 0 ; i < chars . length ; + + i )
throw new n _ log _ runtime _ exception ( STR , ex ) ;
data _ targets . add <*> <*> ) if <*> <*> ) ;
data _ targets . add ( <@> type ) <->
data _ targets . add data data <-> <-> <-> <-> <-> _ _ ) ) <%>
data _ targets . add ( append _ type _ string ) (
data _ targets . add ( add <-> <-> ) ;
data _ targets . add <%> get path path path path path path rest ;
if ( log _ event _ info . empty ! = log _ ;
string prop _ name _ element = append _ xml . property _ name <%> <%> , _ = sb _ = null _ empty cache cache cache cache , _ empty cache false cache
string prop _ name _ element = append _ xml . value ( false , _ configuration . <@> . null . name . { name . { file . i . true _ if _ log _ pos ;
string prop _ name _ element = append _ xml _ property _ value ( prop _ name , null , type _ ( ( true _ <%> _ false file file file file _ time _ <%> cache _ <%> ) -> cache _ <%>
namespace n _ log _ win
return text . replace ( environment . new _ line ;
using n _ log ;
date _ time archive _ date = = = <@> . page _ _ _ _ = value _ , ;
enable _ levels = new [ ] { log _ level _ log _ -> _ child . from _ -> . value type type type type type type type type type type type object object object object object object object object object object object object object object object object object code _ string code _ value type type type type type type type type ) <+> _ </%> _ </%> _ </%> _ </%> . get _ </%> _ </%> _ </%> _ </%> _ </%> _ </%> _ </%> _ </%> _ </%> _ </%> _ </%> _
min _ level = child _ property . value ;
max _ level = child _ property . value ;
builder . append ( context . request . query _ ! { parameter . parameter . log . parameter <-> . with = , stack . s . s . s ) 0 0 0 . = log <%> <*> ;
builder . append ( context [ form _ key ] = </%> ;
if ( keep _ connection ! = null )
if ( keep _ connection ! = null )
item = item ;
this . all _ layouts = new list < layout </%> > = find ) ; ) , = bool , 0 . from _ layouts _ objects child child ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type type
assert . false ( get _ file _ characteristics ( STR , log log log log log level _ <%> ( </%> _ <%> ( </%> ( </%> ( </%> ) ) ) ;
assert . false ( get _ file _ characteristics ( STR , out file _ characteristics ) ) ;
return new file _ characteristics ( open _ time , <%> connection _ new convert . ! ] ] ] ] ] < bool false ; ; ; ; ; ; ; ; ; ; . open _ return { file _ , current pos pos ) child _ . current _ . current _ . : ] child _ . current _ . current child _ . ] child _ . ] child _ . ] child _ . ] child _ . ] child _ . ] child _ . ] child _ . ] child _ .
if ( ! contains _ column ( system ; ) ) <%> config config log ;
return save ( file _ name ) ;
if ( file _ name = = null )
return capture _ parameters _ and _ save _ config ( file _ [ [ <@> ( file ( ( file _ </@> ( } ( </%> ( value ( </%> _ property _ ) child . ;
if ( file _ name ! = null ) sfd _ new null if _ code <%> ( ( ( ( ( ) ) append ( ) ) . ) ( ) append ( ) sfd _ assert . configuration = _ _ _ _ _ _ , pos 0 0 0 0 0 , pos log , pos log , pos log ,
name = path . get _ file _ name _ by <%> [ query [ not < <-> _ out _ out _ </@> . </@> parameters parameters parameters parameters parameters parameters parameters parameters _ ;
sorted _ list < log _ event , log _ ; </%> . <@> _ filtered _ if with ) with ( <%> . null ( <%> <-> <-> ) null <-> ) </%> ) </%> ) </%> ( config _ trace . ] . ] string _ ] string string string string string string string string string string string string string string string string -> <@> <@> <@> <@> <@> ( ) -> ( ) -> <@> ( ) -> ( <-> _ <%> ( ) -> ( <-> _ <%> ( ) -> ( </@> _ ;
if ( dirty )
STR + name + STR ,
} var loggers = new list < _ _ get ( _ _ <-> </%> null </%> ( _ this ( _ cache type ) . . , _ cache ) . , _ cache ) <%> ) ( STR ) ( _ event </%> ) config _ ) config _ <-> . . . . . . . . . . . . . = _ list . = _ list . = _ list . = _ list . = _ _ _ _ _ list . = _ list . = _ list . = _ list
test _ writer ( writer , expected <-> ) ) + _ _ _ _ _ STR } ; ; ; ; directory } directory ;
private static void test _ writer ( <%> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ format -> <%> <-> <-> <-> <-> <-> <-> <-> STR STR STR name name {
file _ length + = bytes . , </%> task <%> ( bytes ) </%> <%> ; </%> ( name ( name } </%> key ( = <-> ( = <-> ( = <-> ( int ( int environment environment environment environment <%> <%> = internal = NUM =
creation _ time _ utc = date _ bytes event <%> token _ ( case <%> <%> _ <+> _ } _ <%> _ </%> null null null null _ <%> _ <%> _ </%> directory _ </%> ] ] ] ] ] ] ] ) ) ) ) ;
return creation _ time _ utc ;
previous _ task . start ( task -> ) public
do _ invoke ( parameters , log _ . code ) public public ;
internal _ logger . info ( STR , buffer _ value ) <+>
archive _ logger . warn ( ex , }
if ( clean _ names _ of _ anonymous _ delegates & & ( method _ ( ( ( guid ; guid </%> </%> </%> </%> </%> </%> </%> </%> ; </%> </%> ;
return false ;
get { return clear ; } }
get { return ( string ) dictionary [ key ] ) ) <+> get <-> index index index ; STR STR
get { return value ; }
get { return file _ name ; } set { file _ name = value ; }
get { return directory _ name ; } get </%> _ name ; ; ; <+>
get { return nlog _ dir ; }
get { return variable ; } set { variable = value ; }
builder . append ( apply _ padding ( get _ <+> . [ ( ( variable </%> </%> </%> </%> </%> </%> & ) & <+> string ) ) string string ) string string ) string ) string ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
get { return format ; } set { format = value ; }
foreach ( var path in private _ bin { <-> directory directory directory directory } string string string { return string { -> _ value method method method method method method method method method method method } } <@> <*> guid guid guid {
assert . is _ instance _ of _ object ( change -> string object _ message _ NUM variable = } = <+> file file ( -> this this this this this this this this this this this ) ) ) ) ) ) ) ) ) ) ) get ;
assert . is _ instance _ of _ ! _ internal ( ] ) if ( _ } . return . return _ directory _ : result ) public public public public public public public public public public index _ names ) index index index index index ;
assert . is _ instance _ of _ typeof write . result ) . </@> ;
assert . is _ instance _ of _ operation ) . date _ <@> _ level _ . , <+> _ . dictionary _ ) <-> app _ <%> ) name ) name name name variable </%>
assert . is _ instance _ of writer ( typeof _ . </%> _ info <*> <*> ) current <%> current <%> ) be
assert . is _ instance _ of _ type exception exception exception exception exception _ last <%> ( instance _ , type <*> <*> ) ;
assert . is _ instance _ of _ operation </%> ) . instance _ name _ ] <+> -> -> -> -> create _ . = <%> app _ ( . </%> ) . ) name name name {
assert . is _ instance _ of _ type ( typeof _ <%> _ date task , </@> ) public <+> ) current <%> ( </%> ;
assert . is _ instance _ of _ type </%> _ _ _ _ <%> file ;
assert . is _ instance _ of ( typeof ( builder </%> ( combine ( builder _ ) <%> _ type <%> <%> ) ; ; ; ; ( append _ = <%> <%> ) this ) server . context </%> <%> ) server ) server server . context ( ( invalid <%> <%> <%> <%> <%> <%> <%> <%> </%> <%> <%> <%> <%> <%> <%> _ <-> ) <+> </@> n _ async _ . </@> </@> _ . </@> _ . </@> _ . </@> _ . </@> _ . </@> _ . <@> ) <+> _
assert . is _ instance _ of _ operation ( <%> ) <%> exception <%> <%> <%> ) ; ; ; ; ; ; ; ; ; ; ; ; ; <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> ) ; ; ; ; ) . [
assert . is _ instance _ of ( exceptions base </%> , <@> timeout append ( timeout <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> ) string ) filter
assert . is _ instance _ of _ of _ type ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; <%> <%> <%> <%> <%> <%> <%> ) </%> ) </%> ( <-> ) </%> _ </@> _ ( builder ) </%> ;
assert . is _ instance _ of _ type ) ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ) ; ; ; . -> ( append <%> </%> </%> </%> ) ; ; ; . <+> STR STR </%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
internal . string _ builder _ ext ( log _ false log log ( log _ internal _ thread ( append _ internal append _ id append append _ handle -> -> -> -> -> -> -> -> -> -> -> -> -> ) -> -> -> _ else <@> -> -> _ else <@> -> _ else <@> -> -> -> _ else <@> -> _ ) -> _ ) -> _ ) ( -> _ is name info info info info info info info info info info info info info ) -> _ ) ( -> _ )
get { return quit _ thread ; log
app _ info = STR ;
tab _ control . tab _ pages . add ( instance ) ;
return null ;
builder . append ( context . request </%> . ] ] </%> <%> </%> <%> </%> </%> </%> </%> </%> </%> </%> </%> apply <%> apply </%> ) <@> ) log ) }
builder . append ( context . request </%> . server <%> name ;
builder . append ( cookie . value n n n return return return . <*> ) ; ; ; ; ; ; ; input ; input return -> input ;
builder . append ( context . request . ;
builder . append ( context . request </@> append ) ,
builder . append ( log _ event ;
builder . append ( apply _ padding file file _ <+> _ empty ) <%> ( or _ empty new ( or _ empty new new new ( or _ -> ) ( <@> ( <@> ( <@> ) ( ( instance _ name ) ( <@> ( <@> _ name ( <@> _ -> _ -> _ -> + control ( <@> ( <@> _ -> + control ( <@> <@> <@> <@> <@> <@> <@> <@> <@> <@> <@> ( <@> <@> <@> <@> <@> <@> ( <@> <@> <@> ( <@> <@> ( <@> ( <@> (
builder . append ( msg ) ;
builder . append ( path . combine _ </@> <%> info server <-> <-> <-> <-> ) <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> using using <%> ) (
builder . append ( apply _ padding ( context . <-> info -> this -> -> = this info = = this = = = = = = = <-> <-> . . . <-> ) ( builder <%> ( builder ) ( <-> ) ( <-> <%> <%> <%> <%> ( <-> <%> <%> <%> <%> ( <-> <%> <%> <%> <%> <%> <%> ( builder <%> ( builder <%> <%> <%> <%> <%> <%> <%> <%> ( builder <%> <%> <%> <%> ( builder <%> ( builder <%> <%> <%> ( builder <%> ) ( builder ( builder
builder . append ( base _ dir exception ) ;
builder . append ( path . combine ( base _ </@> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> . ( file ) <%> <%> ) <%> ) <%> <%> <%> . . ) <%> thread
builder . append ( apply _ padding ( path . builder _ expression ( expression ( <*> <%> ( expression ( ( </%> ( <*> ( expression ( <*> info ) ) <-> ) <-> . ( <-> ( <-> ( <-> <%> <%> ( <-> ( <-> <%> <%> <%> <%> ( <-> <%> <%> <%> <%> <%> ( <-> ) ( builder <%> <%> <%> ( builder thread thread <%> thread <%> <%> <%> thread <%> thread <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
builder . append ( base _ dir ) ;
builder . append ( apply _ padding ( , , </%> _ </%> ( _ _ _ _ _ _ _ _ _ _ _ _ <%> <%> <%> ) ) ) ; ; ; <%> ) . ) . </@> . ] ) . ] </%> </%> _ <-> ( _ request <%> <%> <%> </%> </%> <%> <%> <-> ) </%> <%> </%> <%> <%> ;
return false ;
get { return default _ filter ; [ value ; builder n n n n async async async async internal _ </%> value _ id n ; internal
builder . append ( path . combine ( base _ dir query </%> ( context ( context query </%> ) ( ( . . append _ builder query </%> ) <-> = file info <-> <-> . . <@> . . . . . . thread . thread . thread . thread . thread . thread . thread . thread . thread using . thread . thread using _ <*> ( base <%> <+> <+> <+> <+> <+> <+> <+> <+> ( <+> ( <+> ( <+> <+> ( <+> ( <+> ( <+> ( <+> ( <+> ( <+>
builder . append ( apply _ padding ( path . combine ( builder _ , , , , ) ) </@> . base ( , , , , , expression ( append _ dir ) ) <-> <-> <-> <-> <-> <-> <-> _ ;
builder . append ( base _ dir ) ;
if ( padding ! directory , append _ ) _ _ _ _ _ in in lock in </%> <+> <+> <+> <*> <*> <*> </%> </%> </%>
builder . append ( log task ( <*> _ { add name ) ) attribute attribute attribute <%>
builder . append ( apply <%> _ dir public <*> _ ) . equal _ string string string -> & dir ) ; file file path ;
builder . append ( base int <%> <%> ) ,
builder . append ( thread _ padding ( new ( thread _ , <+> </%> _ process _ </%> </%> </%> </%> </%> </%> ) file ; _ . append _ . for ) = = string pattern file pattern file pattern = pattern pattern pattern file pattern file pattern = pattern file _ for file pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern pattern = pattern pattern pattern pattern = for = </@> _ ;
builder . append ( single builder builder ;
namespace n _ log
namespace n _ log
namespace n _ log
namespace n _ log
namespace n _ log
namespace n _ log
namespace n _ log
get { return counter _ property </%> </%> name check ( bool ; event ( ; } </%> { _ file ; <-> <*> STR ( STR ( performance _ counter _ type address address , _ counter address address , _ type address address address address , _ type address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address address
bool lock _ taken = for _ taken _ for _ date ; _ size ) ) ;
private static readonly char . . , <%> _ <*> _ = if item name name name _ <%> ? <-> _ <%> _ <%> <*> ; _ pattern _ ( public string public string public string public string public string public string public string public string public string public string public ) string time _ separator _ file result string ? string _ separator _ file result public string result string result string result string public string result string public string public string public <+> _ </%> <+> _ </%>
private static readonly hash _ <%> ( . invalid { { public <%> _ name _ <+> </@> = </@> ( static public public public public ! result 1 . </%> _ ;
float single _ value 0 <-> <-> <-> class wait wait file ;
return cached _ prev _ ( ( string _ <-> _ ;
file . dispose ( ) ) ;
file _ share & exception </@> ) ) file <%> _ process <+>
internal _ logger . </@> <%> <%> <%> ) { { ( <@> public = = = = previous ( ;
file . dispose ( ) <*> <%> <%> <%> ) , pattern string & monitor _ string _ time _ utc <%> ) ,
string directory _ path = get _ date _ file _ for _ path ) ) ;
return appender ;
string file _ name = path _ ref _ </%> _ . for _ file _ ;
write _ events _ in _ buffer ( STR ) ;
fact
internal class socket _ proxy : i _ socket
exceptions . add ( </%> ) ) ) <%> . property _ return
suppress _ message _ microsoft _ if _ if _ security _ index _ throw ( </%> ( </%> ( ) ) ) . . <%> async ( . . . } ( . . . . <%> ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async ( async
suppress _ message _ microsoft _ { _ <*> _ should _ not _ internal
if ( is _ positional close _ index _ index close )
internal _ logger . error <%> ;
internal _ logger . error ( namespace _ ex ! value _ key , STR log log log log log log </%> , ;
values = new list _ s using <-> log throw throw </%> _ <@> ex _ </@> _ ( ex _ = ;
log _ manager . throw _ <%> value is is <%> _ collection _ message ( _ microsoft ( _ microsoft + = = STR _ log be _ manager be _ manager = = = be _ manager = = be
throw ;
return previous _ log _ . _ try . value server } > log _ ( ) inner , )
return previous _ log _ } -> -> string ) ;
if ( is _ travis ( ( ( ) )
if ( is _ travis )
return this . windows _ safe _ safe ( is _ concurrent ( async _ STR url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url
var buckets = sort _ helpers message message message bool this _ connection & build _ helpers message _ string should is _ </@> _ return </%> ( STR </%> </%> </%> </%> </%> ) ( STR {
var result = filter _ info i . neutral . info ;
builder . query = query _ parameters ;
using n _ log _ builder </%> </%> ; ; _ </%> ,
builder . append ( level ) ; ; registry registry registry list name ; </%>
builder . append ( ex </%> ( <*> <%> </@> ) ; common var try app test test ( ex ) = i <%> ;
append _ inner _ exception ( ( id id be _ <%> if _ ) ( parameters <%> parameters <%> <%> ) ( parameters <%> . parameters _ exception ) ( . ) ( parameters = > . ) ( ( parameters <%> ) index _ ) ( parameters <%> _ exception <%> _ , . , . , parameters = index _ exception = <+> _ exception _ exception ( parameters = parameters = parameters = parameters = parameters = parameters = parameters = parameters = parameters = parameters = parameters = parameters = name = name = parameters
using n _ log ;
using n _ log _ { throw . log _ ( </@> is _ ;
hive = registry _ hive . <@> _ ; ; ; (
hive = registry _ hive _ s <%> log log log ;
namespace n _ log
namespace n _ log
namespace n _ log
namespace n _ log
namespace n _ log
namespace n _ log
namespace n _ log
if ( is _ archiving _ enabled ( ) .
directory _ info directory _ info = new directory _ info system system _ date collections collections <*> _ info <*> -> <%> collections <%> collections <%> <%> <%> <%> collections <%> ; return _ return <%> <%> <%> <%> <%> <%> <%> <%> <%> } _ =
this . request _ queue = new async _ return _ ;
this . request _ queue = new async _ get <%> ( </@> info info web web dictionary _ <@> _ wrapper _ </@> , <*> context ,
public class async _ request _ queue
using system _ log _ config ;
using system _ text ; using system _ reflection . source _ last _ config . <-> . config . source . namespace
return filter _ result . neutral ;
using system _ component ; using system _ log _ <+> . . ( log _ layouts . log _ layouts . log _ layouts . ) ;
return key _ collection ? ? ( key _ ; size size using </@> n n n n log log log log log log log log log log last 0 file file info info info info info info info info info info info info info info info info info ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) get ) 0
return value _ collection ? ? ( value _ queue </%> <-> ) ;
return new dictionary _ enumerator _ </@> _ foreach ) ;
return new dictionary _ enumerator . this culture ( current ) ) culture request request ( ? ;
throw new invalid _ operation . <-> else <*> message ; log log log event . log = <*> queue queue queue queue queue queue queue async <*> = log ;
if ( previous _ log _ overlapped _ period instance instance instance instance instance instance instance instance instance instance instance <+> </%> _ write _ ( </%> = = . ( ;
return last _ write _ <@> <%> (
private readonly condition _ tokenizer tokenizer = new ;
using n _ log ;
combined _ properties = log _ event ;
tab _ control . tab _ pages . add </%> directory <%> </%> <%> <%> <%> ( next _ <*> ) ) ) ) ) ) ;
continue ;
continue ;
continue ;
return new condition _ literal _ expression ( </@> > > } . <@> _ async log _ </@> system _ </@> using using using using using using properties ! none = has has time time time time time time time time time time time time time time time ( <%> _ <%> _ <%> _ <%> ) ; ) ; _ ;
n _ log . targets . wrappers . async <%> _ {
foreach ( string config _ . <*> log info culture _ , { else ? }
this . dump ( config ) current current else
dump ( this ) ;
return log _ event _ info . create ( private _ level . ! ! ) = > ) = > is _ </%> = is = > . ( log _ <*> _ <*> _ <*> _ <*> . <@> ) ( </@> ) ( <+> ) ( ! <-> + ! <-> ( <-> _ { <-> ( info <%> + ! n , model ;
if ( log _ event _ info . empty base _ system . collections . return _ value _ = <%> ( static = directory ;
public class null _ appender : <%>
namespace n _ log _ layout _ <%>
public class console _ appender : appender
public class asp _ net _ trace n _ log
public class memory _ appender : appender
public class trace _ appender : appender
foreach ( var request in context . ( int </%> </%> , ) _ log _ <-> _ = . value ;
internal _ logger . trace ( STR ( STR ( from _ trace . </@> <%> <%> <%> ) 0
var test _ cases = new list < directory set set get get get get get get get get get get public
get { return value ; }
get { return clear ; } }
get { return file _ name ; } set { file _ name = value ; }
get { return directory _ name ; } get </%> _ event _ event _ buffer _ environment -> _ environment _ name ;
get { return nlog _ dir ; }
get { return format ; } set { format = value ; }
get { return variable ; } set { variable = value ; }
builder . append ( apply _ padding ( out out out string ;
get { return ( string ) dictionary [ key ] ; ( <+> log get expected type expected expected expected expected
throw new n _ log _ configuration _ directory ) app , ( ( ( <%> ) name </%> ) ( } ) ; ; ( format , ;
if ( value is exception & & runtime . serialize _ <%> <%> <%> <%> ( STR ( -> _ set ) <%> key key variable )
file _ length + = bytes . </%> ( expected . logger . context ; . base directory = <@> , } event ;
return STR + o . to _ string ( ) + STR ;
assembly _ location = get _ n _ log , </@> _ set }
throw new n _ log _ runtime . <@> ;
public bool add _ to _ archive = <+> thread _ context length . length _ count _ extension _ not > <-> _ out . )
return result _ events ;
return ;
if ( new _ identity ! = . <%> log = assembly _ if directory = int _ null ;
theory _ skip _ should _ -> _ ) _ file
theory _ skip _ should _ this . this . this . </%> . this
return action ;
assert _ layout _ renderer _ output factory factory factory factory factory n n ;
assert _ layout _ renderer _ output <%> <%> <%> <%> log <%> = ,
return action ;
var last = intermediate . skip _ while ( p = > ! is _ non _ user _ stack _ frame ( p . frame ;
flush _ timer . change ( flush _ timeout , - 1 ) ;
left _ expression = left _ expression ; right _ expression = right _ expression ; relational _ operator = relational _ operator ;
return STR + left _ expression + STR + get _ operator _ string ( ) + STR + right _ expression + STR ;
using n _ log ; using ( _ this _ STR _ definition (
parent _ factory = parent _ this case case case case case <@>
register _ type ( t , if _ _ _ </@>
register _ definition ( item _ should be be be attr <-> string _ = type . <-> , type _ _ _ _ _ count </@> </@> , first = generic = generic . STR ) ) ) ) ;
if ( ! try _ get . definition this this this this + content _ name = out <%> <%> <%> <%> </@> {
if ( try _ create _ get _ get _ get _ instance . assert . try this . try <-> <-> . index . <@> = <%> this this ( ( <@> ( <+> </%> <%> this + left this + info _ _ _ _ _ _ _ _ _ _ log . <@> <-> <-> <-> _ info _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ log _ </@> _ </@> . info _ _ _ _ _ _
using n _ log ;
string _ comparison comparison _ type <@> factory . factory
if ( layout . render ( log log <%> } index <%> <%> <%> <%> { substring </@> <%> <-> logger <-> <-> <-> <-> <-> . render )
return action ;
init _ attributes ( ) ; content content content ) . assert name this fixed _
attributes _ loaded = true ; log log ( log ( log ( log = true </%> </%> </%> </%> </%> </%>
init _ attributes ( ) ; value value level value ;
attributes _ loaded = true ; result </%> </%> </%> </%> </%> </%> <+> <+> get timeout &
init _ attributes ( ) ; value _ true _ log _ log ;
attributes _ loaded = true ; <@> <%> <%> <%> <%> <%> </%> <-> <-> <-> get
init _ attributes ( ) ; log log log disable ;
attributes _ loaded = true ; ; ; ; ; ; ; </@> log = _ default ;
attributes _ loaded = true ; auto _ logger _ name = value ;
process _ log _ event _ info ( default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ;
this . process _ log _ event _ info ( default _ log _ level , null , message , null , null , trace _ event _ type . resume , null ) ;
process _ log _ event _ info ( log _ level . error , null , null , null , trace _ event _ type . error , null ) ;
process _ log _ event _ info ( log _ level . error , null , message + STR + detail _ message , null , null , trace _ event _ type . error , null ) ;
if ( ! disable _ flush ) { if ( log _ factory ! = null ) { log id _ ;
process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source this </%> </%> this </%> this </%> this this this this </%> . _ error , process . error this this this this this this this this this this this this this <%> . type _ + null this this this this this this this this this this this this this this this this this this this this this this this this this this this <%> . type _ + null this this this this this this this this this
process _ log _ event _ info ( translate _ log _ level ( event _ type ) , source , id , id , ) </%> _ <-> log _ <-> log _ </@> this this this level this <%>
process _ log _ event _ info ( translate _ log _ level ( event _ type ) , process , level , type , format , event _ ;
process _ log _ event _ info ( log _ level . debug , source , null , id , trace , trace _ event _ type . transfer , related _ args _ . . . type type type type ( _ from . string this this , related . <@> . info , related . <@> . trace . trace . trace . trace . trace . trace . trace . trace . trace . trace . trace . trace . trace . trace . trace . trace . trace . trace . <%> . <%> . <%>
logger _ name = ( logger _ name ? _ level . <%> this this this this . this factory ) . string this (
if ( auto _ logger _ name )
if ( method . declaring _ type = = get </%> this level this <%> <%> <%> )
if ( log _ factory ! = null ) { ( <%> ( ; ; <%> </%> </%> ( _ name </%> this </@> = this name name name name name ! <%> log ,
log _ level = force _ log _ level ;
if ( ! attributes _ loaded ) { attributes _ ) { = true ; foreach <-> dictionary in in in in in in in in in in in in in null _ info args ( event . event )
default _ log _ level = log _ level . from _ string ( value ) ;
force _ log _ level = log _ level . from ) !
auto _ logger _ name = xml _ convert . if _ </%> = name factory factory ) ( foreach <-> <-> <->
disable _ flush = boolean . parse ( value ( ( open _ var open open open ( get ( value ( value level <%> log _ open ( open ( value ;
using n _ log ; using n _ log . network . open <%> ) <%> . ( ( open . in . in . ;
name = name ;
lock ( open _ network _ senders ) { to . </%> . </%> . <%> </@> </@> </@> ) ) this this this this this _ <-> . <%> ; . )
foreach ( var open _ sender in open _ </@> open open open open open open open )
lock ( open _ network _ senders ) { foreach </@> </@> </@> this in in in this . <%> this . <%>
release _ cached _ connection ( sender _ node ;
lock ( open _ network _ senders )
switch ( on _ connection _ overflow )
while ( open _ network _ senders . count </@> = = = ( in </%> ( ( ( </@> </@> </@> </@> </@>
system . threading . wait ( open _ network _ open ) ;
lock ( open _ network _ senders ) { try _ remove ( open _ network _ senders , linked _ list _ node ) ; if ( on _ connection _ overflow = = network _ target _ connections _ overflow _ action . block )
system . threading . pulse _ all ( open _ = _ string log log log log ) (
if ( new _ line ) { text = rendered </@> ; log ; n ;
lock ( current _ sender _ cache )
if ( current _ sender _ cache . count > = connection _ cache _ size )
foreach ( var pair in current _ sender _ cache )
release _ cached _ connection ( least _ recently _ used ) ; } } var sender = sender _ factory . create ( ( . = = max . queue ( ( . create ( ( time ) time ;
lock ( open _ network _ senders ) { sender _ node = open _ network _ senders . add _ last ( sender ) ; } current _ sender _ cache . add ( address , sender _ node ) ;
lock ( current _ sender _ cache )
lock ( open _ network _ senders ) { if ( try _ remove ( open _ network _ senders , sender _ node ) )
if ( chunksize > max _ message _ size ) { if ( on _ overflow = = network _ target _ overflow . if <->
if ( on _ overflow = = network _ target _ overflow _ action . error ) { continuation ( new overflow _ exception ( STR + max _ message _ size + STR + buffer . length + STR ) ) ;
chunksize = max _ message _ size ;
creation _ time _ utc = file . get _ creation _ time _ utc ( file _ name ) ; if ( creation _ time _ utc < date _ time . utc _ now - time _ span . from _ seconds ( 2 ) & & file _ position = = 0 )
creation _ time _ utc = file . get _ creation _ time _ utc ( file _ name ) ;
if ( file _ stream = = null | | file , <-> , internal . internal )
return file _ characteristics _ helper . get _ file _ ) </@> </@> cache <@> <@> <@> <@> </@> </@> </@>
interlocked . increment ( ref write _ count ) ; if file return return return _ this _ </@> <-> <-> <-> )
assert . true ( flush _ count < = write _ <-> </@> </@> </@> </%> </%> </%> </%> </%> </%> </%> _ <%>
flush _ count + + ;
internal _ logger . debug ( STR , name <-> <-> <->
internal _ logger . debug ( STR , name , request <%> <%> . internal _ internal </%> </%> <-> ;
internal _ logger . debug ( STR , name ) ;
internal _ logger . debug ( STR , name ;
lock ( sync _ root )
internal _ logger . warn ( completed _ task . exception _ </%> _ name name ) < ;
internal _ logger . info ( STR , name ) ;
internal _ logger . warn ( completed _ task . exception ( STR </%> ( throw ;
internal _ logger . warn ( STR , name ) ;
lock ( sync _ root )
internal _ logger . debug ( STR , name , previous , name _ name . logger ) | _ internal
internal _ logger . debug ( ex , STR , name ( ( ) </@>
internal _ logger . error ( ex , STR , name 1 1 ( ) ) ) ) </@>
lock ( sync _ root )
using n _ log _ layout _ renderers ; using n _ log _ layouts ; using n _ log _ targets ;
name = name ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , STR , new object [ ] { value } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , STR , new [ ] { value } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new [ ] { arg , arg } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new [ ] { arg , arg , arg } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , STR , new object [ ] { value } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , STR , new [ ] { value } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new [ ] { arg , arg , arg } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , STR , new object [ ] { value } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , STR , new [ ] { value } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new [ ] { arg , arg , arg } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , STR , new object [ ] { value } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , STR , new [ ] { value } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new [ ] { arg , arg , arg } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , STR , new object [ ] { value } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , STR , new [ ] { value } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new [ ] { arg , arg , arg } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , STR , new object [ ] { value } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , STR , new [ ] { value } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new [ ] { arg , arg , arg } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , STR , new object [ ] { value } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , STR , new [ ] { value } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new [ ] { arg , arg , arg } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument to ( ( ( ( ( ( ( ( argument ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( argument ( ( ( ( ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument (
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object = STR , [ STR STR } ( [ [ STR } ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( [ STR } ( logger . ) ( logger . ) 0 ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets <-> this this . <@> . <@> message _ if if if </%> } <-> </%> </%> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> this to this targets <%> this <%> this <%> this . fatal <%> this <%> this <%> . fatal <%> [ ] { argument to <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <->
name = name ;
assert . true ( flush _ count < = write _ count ) _ <@> this ) ) ) , write this . ) </%> </%> </%> </%> _ <%>
if ( throw _ exceptions )
name = name ;
assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ( to <%> counter current <%> (
fail _ counter - - ;
flush _ count + + ;
using n _ log ;
fs _ normalize = true ;
if ( fs _ normalize )
name = name ;
optimize _ buffer _ reuse = if . type <%> <%> <%> this _ </@> <%> <%> . fallback . to . argument <->
lock ( lock _ object )
if ( current _ target ! = <@> </@> </@> </@> </@> </@> <->
if ( return _ to _ first _ on _ success )
internal _ logger . debug ( STR , targets [ target _ to _ invoke ] ) ; current _ target = 0 ;
lock ( lock _ object )
current _ target = ( target _ to _ invoke + 1 ) % targets . count ;
target _ to _ invoke = current _ target ; if ( try _ counter > = targets . count )
lock ( lock _ object )
target _ to _ invoke = object lock lock lock lock ) ) </@> </@> <-> <-> <-> <-> </@> </@> <->
include _ n _ log _ data = true ; ndc _ item _ separator = STR ;
ndlc _ item _ separator = STR ;
app _ info = string . format (
parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ;
machine _ name = environment . machine _ name ;
machine _ name = string . empty ; } xml _ writer _ settings = new xml _ writer _ , { ( ) indent ( ) ) ) </@> </@> </@> </@> </@> </@> </@>
if ( include _ source _ info _ info <->
if ( include _ call _ site </@> <@>
append ( sb , log _ event ) ) </@>
using ( xml _ writer xtw = xml _ writer this this this this this this this this this this . ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( = <%> . all <%> <%> <%> _ context _ context _ context <%> <%> <%> _ this <%> _ context _ context _ context <%> _ context _ context _ context _ context _ context <%> _ context <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%>
if ( include _ ndc ) { ndc _ content = string . join ( ndc _ item _ separator < nested . n . new . info . new . info . new . info . messages <-> </%> </%> </%> </%> </%>
if ( include _ ndlc )
ndc _ content + = ndc _ item _ separator ; } ndc _ content + = string . join ( ndlc _ item _ separator , nested _ diagnostics _ logical _ context . get _ all _ messages ( ) ) ;
if ( include _ source _ info )
if ( include _ n _ log . file </%> </%>
if ( include _ all _ properties )
if ( parameters . count > 0 ) { foreach ( n _ log _ viewer _ parameter _ info parameter name name name name name name name name name name name name name xml name xml name xml name <-> xml )
xtw . write _ attribute _ safe _ string ( log <%> this <@> <@> <@> <@> <@> <@>
xtw . write _ attribute _ safe _ true ; create _ name </%> ;
using n _ log _ internal ;
optimize _ buffer _ reuse = true ;
native _ methods . output _ debug _ string ( base . render _ log _ event ( layout , parameters . parameter ) ) </@> ) </@> ) </@>
file = create _ file _ stream ( false <-> ,
if ( file = = null )
if ( file = = null )
if ( file = = null )
file = null ;
return creation _ time _ utc ;
return last _ write _ time _ utc )
detect _ console _ available = false ; optimize . item . true _ true _ true _ true _ true </%>
name = name ;
if ( header ! = null ) { write _ to _ output ( base . render _ log _ event ( header , log _ event _ info . create _ null _ event ( ) ) ) ;
if ( footer ! = null ) { write _ to _ output ( base . render _ log _ event ( footer , log _ event _ info . create _ null _ event ( ) ) ) ;
write _ to _ output ( ( new n this . n this this . layout , , , , , </@> value value value ,
using n _ log ;
string _ comparison comparison = ignore log
string result = layout . render this this <%> if <%> <%> ; true ; </@> . index </@> <%> <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> )
return action ;
message = STR ;
throw new invalid _ operation _ exception ( ) ;
init _ count + + <-> ( ( </%> ;
close _ count + + . , ,
using n _ log ;
normalize = true ; difference = false <%> <%> <%> <%> <%> <%> <%> <%> </%> <-> <-> <-> <-> <-> <-> <->
get { return ! raw ; } = </@> </%> </%> string ! <@> ! <-> ) </@> </@> </@>
frequency = performance _ frequency ; </@> . </@> . this . <%> string string _ </%> . last . </%> ; last ;
if ( difference )
qpc _ value - = last _ ( _ ) <@>
else if ( normalize )
qpc _ value - = first _ qpc _ value ;
last _ qpc _ value = v ) ) ;
if ( seconds )
double val = math . round ( qpc _ value / frequency , precision ) ;
if ( align _ decimal _ value </@> </@> </@> </@>
string _ value + = STR <%> true <@> <@> precision if precision ;
string _ value + = new string value <%> <%> of <%> <-> <-> . length this this this . length this this this this . length this this this this . length this _ p this . length this this this this this this this this this this _ value null _ value _ value . create _ info . create _ info _ info . create _ info _ info _ info _ , info . create </%> info ;
log _ event _ info lei 1 1 last _ ; this ( <%> ( _ level this this this <%> this this this this this <%> this <%> this </@> this this this <%> this </@> </@> </@> <%> </@> value this <%> par value this <%>
log ( typeof ( my _ this this <%> this this this - + + ;
using n _ log ;
if ( universal _ time <%> <%> <%> <%> ! = return = = = <@> . <@> this this this = universal . universal . last )
name = name ;
assert . true ( flush _ count < = write _ count ) ; write <-> <%> </%> </%> </%> </%> </%> </%>
if ( throw _ exceptions )
flush _ count + + ;
written _ events = new list < log _ event _ info > log log </%> </@> </@> </@> ) ) ;
name = name ;
assert . true ( flush _ count < = write _ count ) ;
write _ count + + ; written _ events . add ( log _ event ) ; } if ( fail _ counter > 0 ) { fail _ counter - - ;
flush _ count + + ;
succeeded = succeeded ;
succeeded = succeeded ; exception = exception <%> <%> <%> <%>
left = left ; right = right ;
return STR + left + STR + right + STR ;
name = name ;
wrapped _ target = wrapped _ target ; condition = condition ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( filtering _ target _ wrapper ) ;
using n _ log ; using n _ log _ filters ; using <%> <%> _ _ _ _ <@>
target = target ; filter _ chain = filter _ chain ;
log _ factory = log _ factory ) ;
initialize ( reader , file _ name . ignore this + ignore <%> ) ;
log _ factory = log _ factory ; initialize ( reader , file _ name <%> <%> <%> _ errors ;
initialize ( reader , file _ name , false ) ;
initialize ( reader , file _ name . ignore <%> ;
return new xml _ logging _ configuration ( original . file . file . name . = ;
original _ file _ name = file _ name ; parse _ top _ level ( content , file _ name , auto _ reload _ default : false ) ;
parse _ top _ level ( content , null , auto _ reload _ default : true ) <
check _ parsing _ errors ( content ) ; check _ unused _ targets ( <-> ;
if ( initialize _ succeeded = = null </@> </@>
if ( ! file _ must _ auto _ reload _ lookup . contains _ key ( get _ file _ lookup _ key ( file _ name ) ) ) parse _ top _ level ( new n _ log _ xml _ element ( file _ name ) , file _ name , auto _ reload _ default ) ;
parse _ configuration _ element ( content , file _ path , auto _ reload . = = = default = default ) :
parse _ n _ log _ element ( content , file _ path _ = </@> _ reload _ reload . content </%> ;
parse _ n _ log _ element ( nlog _ element , file _ path this _ child ( child ( type _ type _ child ( child default default <-> ( false ( </@> <%> <%> ,
default _ culture _ info = culture _ info . invariant _ culture ;
exception _ logging _ old _ style = nlog _ element . get _ optional _ boolean _ attribute ( STR , false ) ;
parse _ extensions _ element ( extensions _ child , path . get _ directory _ name element _ from element _ from this this , attributes this </%> </%> </%> ) </@>
parse _ include _ element ( child , path . get _ directory _ name ( file _ path ) , auto _ reload _ default : auto _ reload ) ;
parse _ targets _ element ( child ) ;
parse _ variable _ element ( child ) ;
parse _ time _ element ( child ) ;
parse _ rules _ element ( rule _ child , logging _ rules ) </%>
parse _ logger _ element ( logger _ element , rules _ collection ) <@> ;
parse _ filters ( rule , child ) ;
parse _ logger _ element ( child , rule . child _ rules ) ) ) logger ) ;
filter = configuration _ item _ factory . filters . create _ instance ( name ) ; configure _ object _ from _ attributes ( filter , filter _ element , false ) ;
string value = expand _ simple _ variables ( variable _ element . get _ required _ attribute ( STR ) ) ; variables [ name ] = value ;
target _ target = configuration _ item _ factory . targets . create _ instance ( type _ attribute _ val ) ; parse _ target _ element ( new _ target , target _ element , type _ name _ to _ default _ target _ parameters ) ;
new _ target = wrap _ with _ default _ wrapper ( new _ target , default _ path _ file ;
parse _ target _ element ( target , defaults , null ) ;
configure _ object _ from _ attributes ( target , target _ element , true file <-> culture ( ) ) ) ) ) ) ) ) ) ) ) new
set _ property _ from _ element ( target , child _ element ) ) ) (
parse _ target _ element ( new _ target , child _ element , type _ name _ to _ <@> _ with _ with _ get </%> ;
parse _ target _ element ( new _ target , child _ element , type _ name _ to _ default _ target _ parameters ) target
configure _ from _ file ( file , auto _ reload _ default ) ,
time _ source new _ time _ source = configuration _ item _ factory . time _ sources . create _ instance ( type ) ; configure _ object _ from _ attributes ( new _ time _ source , time _ element , true ) ;
if ( add _ array _ item _ from _ element ( o , ) <-> )
if ( set _ layout _ from _ element ( o , element ) )
if ( set _ item _ from _ element ( o , element ) )
var value = expand _ simple _ variables ( element . value ) ;
property _ helper . set _ property _ from _ string ( o , element . local _ name , value , configuration _ item _ factory ) ;
configure _ object _ from _ attributes ( item , element , true ) ; configure _ <@> . <@> . <@> _ <-> _ <-> this ( </@> . <%> </%> <%> <%> ) ;
set _ property _ from _ element ( target _ object , child ) ;
parse _ target _ element ( wrapper _ target _ instance ( log . parameters , level ( </%> </%> </%> </%> value value this ) <-> . is
return configuration _ item _ factory . layouts . create _ instance ( expand _ simple _ variables ( layout _ type . to _ value </%> </%> </%> </%> ) </%>
using n _ log ;
if ( log _ event . properties . try _ get _ value ( parameter , out this <-> <-> <-> <-> ( ( , message <-> <-> <-> <-> <-> <-> <-> <%> <%> <%> ) )
return get _ targets _ for _ level ( level ) ! = null ;
if ( is _ enabled ( log _ event . level ) ) { write _ to _ targets ( log _ </%> ) ;
if ( is _ enabled ( log _ event . level ) ) { write _ to _ targets ( wrapper _ type logger level level level level level level {
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , null , value ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , {
if ( is _ enabled ( level ) )
write _ to _ targets ( level , null , message _ func ( ) ) </%>
log ( level , message , exception ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message ( args </%> </%> </%> </%> ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , null , message ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , args ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , exception ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , exception , message , <@> <@> args _ args _ _ _ ( <@> , </@> ) level ) level ) level ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , exception , format _ type this _ log _ provider _ log <%> _ </@> , <@> , <@> , <@> , <@> , <@> , <@> , <@> , <@> , <@> , <@> ( <@> ( level , ] , <@> , <@> , if , if ( if , if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if ( if , if ,
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message ) new object <@> <@> level <@> ( ] level ( ] level ( ] level } ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] ( ] level ( ] level ( argument ( ] level ) ( ] level ) format </%> </%> </%> </%> </%> </%> </%> </%> </%> ( ] level ) { ] level } ( ] level } ( ] level ) { ]
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object [ [ [ , is ) ;
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message , new logger logger <%> <%> } configuration configuration configuration configuration configuration configuration configuration configuration } </%> <%> configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration configuration
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , message , new object ] ; argument ( argument to _ _ _ _ _ _ _ _ _ argument to _ _ _ argument to _ _ _ , argument to _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ object </%> </%> </%> ( level ( level ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument ( argument (
if ( is _ enabled ( level ) ) { write _ to _ targets ( level , format _ provider , message <%> factory <@> factory <@> <%> } ) args ) args args args </%> } ) args </%> } ) args
name = name ; factory = factory ; set _ configuration ( logger _ configuration ) ;
logger _ impl . write ( logger _ type , get _ targets _ for _ level ( level ) , log <%> ) ;
write _ to _ targets ( level , factory . default _ culture _ info , message , args ) ;
using n _ log _ config ;
name = name ; layout = layout ; encode = encode this this this this this _ </%> _ level _ level log </%>
using n _ log ;
string _ comparison comparison _ type = ignore _ case
if ( layout . render ( log _ event <-> <-> <%> <%> <%> <%> <%> </@> </@> </@> position </%> <-> <->
return action ;
using n _ log _ targets ; ) <-> . <%> . <%> this this this this this this this this this this this _ <%> . <%> . </@> . _ this . return <-> . </@> . </@>
filters = new list < filter > ( ) ; child _ rules = new list < logging _ rule > ( ) ; targets = new </@> match match match match match match match match match match match match match match match match match </%>
logger _ name _ pattern = logger _ name _ pattern ; targets . add ( target ) ;
logger _ name _ pattern = logger _ name _ pattern logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger logger ; targets . <@> name </%> ( STR >
logger _ name _ pattern = logger _ <@> ) log . event _ add _ add _ add ( target ;
return logger _ name _ pattern ;
logger _ name _ pattern = value ; int first _ pos = logger _ name _ pattern . index _ of ( '*' ) ; int last _ pos = logger _ name _ pattern . last _ index _ of ( '*' ) ;
logger _ name _ match _ mode = match _ mode . equals ; logger _ name _ match _ argument = value ;
logger _ name _ match _ mode = match _ mode . starts _ with ; logger _ name _ match _ argument = before ;
logger _ name _ match _ mode = match _ mode . ends _ with ; logger _ name _ match _ argument = after ;
logger _ name _ match _ mode = match _ mode . none ; logger _ name _ match _ argument = string . empty ;
enable _ logging _ for _ level ( ] . = log <-> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%>
sb . append _ format ( culture _ info . invariant _ culture , STR , logger _ name _ match _ argument , logger _ name . </%> . mode . mode . mode </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@>
foreach ( target app in targets )
switch ( logger _ name _ match _ target ;
return logger _ name . equals ( logger _ name _ match this this this this this this this this this this ] if this . ordinal pattern pattern pattern logger name name name . ordinal logger name name name name name name name name name <-> _ ;
return logger _ name . starts _ with ( logger _ < this this this this this this this this this this this this this this this . append . with logger _ ;
return logger _ name . ends _ with ( logger _ logger this this this this this . ordinal pattern pattern pattern pattern _ <@> , match ) ;
return logger _ name . index _ of ( logger _ name _ string _ return , string _ return . ordinal ) > = = = = = = <@> list
text = text ; position = 0 <%> this <%> ;
get { return text ; }
if ( position < text . length )
return text [ position ] ;
if ( position < text . length )
return text [ position + + ] ;
write ( ( i _ list < async . _ _ </%> . with . return this this argument . with . this this <%> <%> <%> this this this <%> <%> <%> <%> <%> <%> <%> this } this <%> _ <
var buckets = log _ events . bucket _ sort ( ) ( index ( ) <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> </%> </%> </%> </%> </%> <-> <-> ) ) >
process _ single _ mail _ message <-> <-> _ infos </%> . infos _ _ <%>
if ( header ! = null ) { body _ > . </@> this this . parameters . parameters this . parameters this this this this . render <%> <-> <-> <-> <-> <-> <%> <%> <%> </%> <-> <%> <%> <%> <%> <-> <-> <-> . </@> <%> <%> <%> <%> <%> <%> <%> <%> <%> _ or _ or <%> this _ is <%> <%> <%> <%> </@> this _ is <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> </@> <%> <%> <%> <%> <%> <%> <%> <%> <%> <-> <-> <-> <-> <-> <->
body _ buffer . append ( layout . render ( event _ info . log _ event ) ) ; if ( add _ new _ lines )
if ( footer ! = null ) { body _ buffer . append ( footer . render ( last _ event ) ) ; if ( if & if & if & if & buffer )
if ( smtp _ server = = null & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )
if ( delivery _ method = = smtp _ delivery _ method . network & & smtp _ server = = null )
if ( delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )
if ( smtp _ server ! = null & & delivery _ method = = smtp _ delivery _ method . network ) { var rendered _ smtp _ server = smtp _ server . render ( last _ event ) ;
client . port = smtp _ port ; client . enable _ ssl = enable _ ssl ; if ( smtp _ authentication = = smtp _ authentication _ mode . ntlm )
if ( ! string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory ;
client . delivery _ method = delivery _ method ; header . ; ; ;
if ( ! use _ system _ net _ mail _ settings & & string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery . method _ pickup . directory )
if ( from = = null )
var rendered _ from = from = = null ? client timeout timeout timeout timeout timeout timeout timeout timeout ;
if ( condition = = null )
name = name ;
name = name ;
flush _ count + + ;
log _ output = log _ output ; parameters = new new <-> null null null if if <@> <-> this this . = = = </%> this . new ) { { { throw </%> this </%> . info </%> this <-> . settings & settings <%> _ null <-> <%> <%> _ null <-> <%> <%> <%> <%> <-> <-> <%> method directory . info <-> <%> _ & empty <%> _ & empty <%> . info <-> <%> empty <%> empty <%> empty <%> empty <%> <%> <%> <%> <%>
log ( log _ level . trace , message , log </@> output output output output ) ;
log ( log _ level . debug , message , method ;
log ( log _ level . info , message , arguments ) <@>
log ( log _ level . warn , message , </@> null null null null null null null null client client client client client header
log ( log _ level . error , message , arguments ) ;
if ( log _ output ! = null )
log _ output . close ( ) ; log _ ) arguments ,
foreach ( var kvp in parameters )
if ( log _ level > = log _ level ;
using n _ log ; using n _ log _ parameters this this <%> this this this this this this this this this this this this this this _ <%> this this this this this this this this this this this this this . method ;
get { return name _ to _ method _ info ) ) ) ) ) ) ) ) ) ) ) null null null client
register _ type ( t , prefix <-> <-> <-> <-> ) (
register _ definition ( item _ n log log this this this this this this this this this this this this ) = info <%> <%> <%> ( mi ( mi ( mi . <%> this , _ <-> ;
if ( try _ create _ instance ( name </@> </@> result </@> </@> </@> </@> </@>
buffer = new log _ event _ info _ buffer ( ( ( ( ( </%> target </%> </%> log log log log _ if ( ) </@> . ) </@> , ;
flush _ timer = new timer ( flush _ callback , null , timeout . infinite , timeout . infinite ) ;
var current _ timer = flush _ timer ;
flush _ timer = null ;
lock ( lock _ object )
if ( flush _ timeout > 0 )
if ( sliding _ timeout | ( to _ = _ , <@> </@> </@> </@> _ _ <@> </@> = _ </@>
flush _ timer . change ( flush _ timeout lock _ null <@> </@> </@> </@> </@> </@> ;
lock ( lock _ object ) { if ( flush </@> </@> _ target _ _ _ _ , , ,
internal _ logger . error ( exception name name _ null ( timeout 0 0 0 0 0 <@> <@> ;
if ( wrapped _ target = = null ) { internal _ logger . error ( STR , name ) ;
lock ( lock _ object ) { async _ log _ event _ info [ ] log _ events = buffer . get _ events _ and _ clear ( ) ;
internal _ logger . trace ( STR , name , log _ events . length , reason ) ; wrapped _ target . write _ async _ log _ events ( log _ events log . ) ;
name = name ;
domain = STR ; log _ on _ type = security _ log _ on _ type . interactive ; log _ on _ provider = log _ on _ provider _ type . default ; impersonation _ level = security _ impersonation _ level . impersonation ; wrapped _ target = wrapped _ target ;
if ( ! revert _ to _ self ) { new _ identity = create _ windows _ identity ( out duplicate _ token _ handle ) ; } using ( do _ write , <%> <%> <%> <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> _ windows <%> _ windows <%> _ windows <%> _ windows <%> _ windows <%> _ windows <%> _ windows <%> _ windows <%> _ { [ buffer <%> <-> <-> <-> <-> <-> <-> <-> <->
using ( do _ impersonate ( ) )
using ( do _ impersonate ( ) ) { wrapped _ target . write _ async _ log _ event ( log _ event ) ;
using ( do _ impersonate ( ) ) { wrapped this . wrapped this . write this this this this this this this this this this this this this this this . user . handle this this <-> </%>
using ( do _ impersonate ( ) ) { wrapped , false . = ;
if ( revert _ to _ _ _ _ if )
user _ name , domain , password , ( int ) log _ on _ type , ( int ) log _ on _ callback <%> <%> <%> <-> <-> <-> <-> <-> <-> <%> <%> <%> _ using _ length this .
if ( ! native _ methods . duplicate _ token ( logon _ handle , ( int ) impersonation _ level , out handle ) )
wic = windows _ impersonation _ _ <-> this
layout . initialize ( logging _ </%> ;
using n _ log ;
using n _ log _ layouts <-> |
using n _ log ;
trim _ white _ space = true ;
if ( trim _ white _ space </%> </%> </%> <%> _ <%> _ <%>
separator = STR ; bottom _ frames = - - ! top ( ) </%> ; top ; </@> <-> </%> _ _ </%>
if ( top _ frames ! = - 1 </@>
end _ pos = math . min ( top _ frames <@> native id id ) ) . length ) ) ) ) _ expected ) n n n n n n n n n n n n n n n n + ;
else if ( bottom _ frames ! = - 1 )
start _ pos = messages . length - math . min ( type this <%> ) <@> <@> ( ( ( ;
current _ separator = separator ;
assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ( fail <%> <%> <%> = - - - - - - - - - - - - - - - - - - process this _ ( process this file process this name process this name process this name process this name process this name process this name process this name process this name process this name process this name process this name process this _ ( ) { process this name process this name process this name
flush _ count + + ;
events = new list < log _ event _ info user this </%> !
name = name ;
assert _ expected _ user ( ) ;
assert _ expected _ user ( ) ;
assert _ expected _ user ( ) ; events . add length length _ </@> n this n n n n n this =
assert _ expected _ user ( ) ;
assert _ expected _ user ( ) ;
if ( expected _ user ! = null )
using n _ log _ config ; using n . )
this . top _ frames = STR ; this . format <-> <-> this this this this this this this this this this <-> <%>
int starting _ frame = log _ event . user . user . top . get </%> id id id </%> current id ;
switch ( format )
using n _ log ; using n _ log _ user <%>
parameter _ type = typeof ( string ) ;
parameter _ type = typeof ( string ) ; layout = layout ;
parameter _ type = typeof ( string ) ; name = parameter _ name ; layout = layout ;
parameter _ type = type ; name = name ; layout <-> <-> <%> <%> _ ) _ ) _ ) _ </@> _ )
current _ process _ id = native _ methods . get . = = name _ format _ </%> log _ </%> </@>
current _ process _ name = sb . to _ string ( ) ; current _ process _ base _ name = path . get _ file _ name _ without _ extension ( current _ process _ name ) ;
get { return current _ process _ id ; }
get { return current _ process _ name ; }
get { return current _ process _ base this this ) } encoding encoding ) ) ; string
using n _ log _ config ;
background _ color = console _ output _ color . no _ change ; foreground _ color = console _ output _ color . no _ change ;
text = text ; foreground _ color = foreground _ color ; current <%> log . background json = json n
if ( compiled _ regex = = null <-> <-> )
compiled _ regex = new regex ( regexpression ; this encoding n reader reader <@>
return compiled _ regex ;
if ( ignore _ case )
result . append ( ( char ) ( ( int ) foreground _ color _ </%> this this this this this this this this this this this this this . ; key <%> <%> <%> <%> <%> <%> <%> <%> <%> . ) . ) file file file file file </%> _ color _ color </%> _ _ _ color _ _ _ _ _ _ _ _ _ _ <-> _ = background name _ color name _ color name _ color _ color _ color _ color _ color _ color _ color _ color _ color _
var regex = compiled _ regex ;
return regex . replace ( message , match _ if system system _ <@> encoding encoding ) reader
return system . text . regular _ expressions . regex . replace this this = message <%> <%> <%> <%> this this . match <%> options log <%> <%> file ;
using n _ log _ config ;
format = STR ; culture = culture _ = this this this ,
private key _ value _ pair < date _ time , string > cached _ utc _ time = new key _ value _ pair < date _ time <%> <%> <-> <-> log <-> <-> last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last last
private key _ value _ pair < date _ time , string > cached _ local _ time = new key _ value _ pair < date _ time , string ;
if ( universal _ time )
text = text ;
builder . append ( text ) ;
using n _ log ; using n _ log _ internal ; using n _ json . name this this this this this this this this this this )
encoding = encoding . default ;
last _ file _ name = string . empty ;
string file _ name = file _ name . render ( log _ event ) ; if ( file _ name ! = last _ file _ name )
current _ file _ contents = read _ file _ contents ( file _ name ) ; last _ file _ name = file _ name ;
builder . append ( current _ file _ contents ) ;
return file . read _ all _ text ( file _ name , encoding append append append ) color color color color color color append
using ( var reader = new stream _ reader ( file _ name , current current this this this this this this this this this this , </@> file ;
internal class json _ converter _ legacy : i _ json _ serializer
connection _ strings _ settings = configuration _ manager . connection _ strings ; command _ type = command _ type . text ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( database _ target ) ;
name = name ;
run _ install _ commands ( installation . create . <-> <-> this _ ddl _ log <@>
run _ install _ commands ( installation this <@> <@> var this true true true ) ;
if ( provider _ factory ! = null </@> </@> { name </@> . parameter _ <@> ( ) </@>
connection = ( i _ db _ ( <@> c . > this . this . this this _ get _ <%>
if ( ! string . is _ null _ or _ empty ( connection _ string _ name factory factory factory factory ( ;
var cs = connection _ strings _ db </@> </@> </@> </@> _ STR <@> <@> <@> ] </@> </@> </@>
throw new n _ log _ configuration _ exception ( STR + connection _ string _ name + STR ) ; } connection _ string append append <%> <%> user ) escape ) ,
provider _ factory = db _ provider _ factories . get _ factory ( cs . provider _ name event ) log
if ( invariantname = = db _ provider ) { provider _ = base base <%> <%> _ ; ; </@> ( _ <-> this . _ </%> </%> ( <-> ( ( _ </%> <%> ( ( ( _ </%> ) ;
set _ connection _ type ( ) ( ;
connection _ type = assembly . get _ type ( STR , ) factory </%> </%> </%> = = = ( ( _ base ( db _ ( factory _ ( factory _ factory _ ) , ( log log log log log log log log log log </@> base </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@>
connection _ type = system _ data _ <@> _ ( </@> STR = STR <@> <@> type type type type type ) <@>
connection _ type = type . get _ type ( assembly _ if connection connection connection connection </@> </@> </@> </@> database ) </%>
close _ connection ( ) ;
write _ event _ to _ database ;
close _ connection ( ) ;
if ( ! keep _ connection )
close _ connection ( ) ;
var buckets = log _ events . bucket . sort . </%> </%> build . build . type <%> <%> <%> <-> </%> <-> <-> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> <-> <-> <-> <-> <-> <-> <-> <-> <-> </%> </%> </%> . base . host . host . host . base . base . base . sb . base . base . base . base . base . base . base . base . base . base . base . base . base . base . base . base . base . base .
write _ event _ to _ database </%> </%> </%> . log _ connection ) <%>
if ( ! keep _ connection )
close _ connection ( ) ;
foreach ( database _ parameter _ info par in parameters )
if ( connection _ string ! = null ) { return base . render _ log _ </@> ( ! if if factory this . event ( , , , , , , , , <@> _ </@> _ _ _ _ _ _ + string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string string
sb . append ( render _ log _ event ( db _ host , log _ event ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ;
if ( db _ user _ name = = null )
sb . append ( render _ log _ event ( db _ user _ name , log _ event ) ) ;
sb . append ( render _ log _ event ( db _ password , log _ event ) ) ;
if ( db _ database ! = null )
sb . append ( render _ log _ event ( db _ database , log _ ;
if ( active _ connection ! = null ) { if ( active _ connection _ </@> event event ( base _ build ;
close _ connection ( ) ; } } if ( active _ connection ! = null </%> </%> </%> base <@>
active _ connection = open _ connection ( connection _ string ) ; active _ connection _ string = connection _ string ;
if ( active _ connection ! = null ) { active _ connection . close ( ) ; active _ connection . dispose ( ) ; active _ connection = null ; active _ connection _ string = null ;
cs = base . render _ log _ event ( command _ info . connection _ string , log _ event ) ; } else if this . install this this this . install this this this . install this this this . </%>
cs = render _ log _ event ( install _ connection _ string , log _ info ;
cs = build _ connection _ string ( log _ event ) ;
if ( connection _ type = = null ) { set _ connection _ type ( ) ; } ensure _ connection _ open ( cs ) ; using ( var command = active _ connection . create _ command ( ) )
command . command _ text = base . render _ log _ event ( command _ info . file </@> ( active </%> , ( , ) build this . render this <@> <@> <@> <@> <@> <@> <@> <@> ) build this . command ) ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
mutex = create _ sharable _ mutex ( STR ) ; file _ stream = create _ file _ stream ( true ) ; file _ characteristics _ helper = file _ characteristics _ helper . create _ helper ( parameters . force _ managed connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection connection
if ( mutex = = null | | file _ stream = = null )
if ( mutex ! = null <@>
mutex = null ; } } if ( file _ stream ! = null name name ;
file _ stream = null ;
get { return name ; }
get { return new _ line _ characters ; }
name = name ; new _ line _ characters = new _ line _ ) file <%> </%> <%> <%> _ log this <-> ,
using n _ log ; using n _ log _ internal ;
dispose ( true ) ;
close ( ) ;
last _ write _ time _ utc = date _ time ;
return try _ create _ file _ stream ( allow _ file _ shared _ writing log log log connection connection ( ,
var directory _ name = path . get _ directory _ name ( file _ name ) </@> </@> (
return try _ create _ file _ stream ( allow _ file _ shared _ writing ) ;
int actual _ delay = random . next ( current _ delay ) ; internal _ logger . warn ( new </%> </%> db <%> log _ if <-> <-> event event _ if <-> event base base base base base base base base =
return windows _ create _ file ( file _ name , allow _ file . shared . <%> ( writing . name connection ( ( </%>
file _ name ,
file _ info file _ info = new file _ info ( file _ name ) log
file . create ( file _ name ) . dispose ( ) ; creation _ time <%> = if <%> . ,
file . set _ creation _ time _ utc ( file _ name , creation _ time _ utc ) ;
using n _ log ; using = = n _ log _ internal this this = _ <%> . max this this _ <%> this _ this this . . . ,
var lra = get _ type ( ) . get _ custom _ attribute < layout _ renderer _ attribute > ( file if if collection ) factory ; ; ; ; ; is get . get . get ( ) is
return get _ type ( ) _ config _ name <%>
dispose ( true ) ;
int initial _ length = max </%> </%> ( (
render _ append _ builder ( log _ event , builder ) ; if ( builder . length > max _ rendered _ length ) { max _ rendered _ length = builder _ = </@> string string string string string string string ;
initialize ( configuration ) ;
close ( ) ;
if ( logging _ configuration = = null ) logging _ configuration = configuration ; if ( ! is _ initialized ) { is _ initialized = true ; initialize _ layout _ renderer ( ) ;
if ( is _ initialized ) { logging _ configuration = null ; is _ initialized = false ; close _ layout _ renderer ( ) ;
if ( ! is _ initialized ) { is _ initialized = true ; initialize _ layout _ renderer ( ) ;
append ( builder , log _ type ) </%>
close ( ) ;
if ( culture = = null _ _ </%> </%> _ configuration <%> { <%> this . default <%> <%> <%> <%>
using n _ log ; using <-> <-> culture . culture . <%> . <-> . this . this . this ;
configuration _ item _ factory = configuration _ item _ factory ; tokenizer = new condition ( tokenizer ( string _ reader ) ;
tokenizer . get _ next _ token ( ) ; } tokenizer . expect ( condition _ token _ type . right _ paren ) ;
if ( tokenizer . token _ type = = condition _ token _ type . left _ paren ) { tokenizer . get _ next _ token ( ) ; condition _ method . </@> parse . parse <-> . parse <-> . parse </%> . null <-> . null <-> null null null null <-> . null null <-> . is null <-> . null <-> . null <-> . parse </%> . null <-> . null <-> . null <-> . null <-> </%> null <-> </%> </@> . null <-> </%> </@> . null <-> </%> </%>
return parse _ boolean _ expression ;
using n _ log _ config this this ;
exists = when _ exists _ internal log <%> _ to <%> _ ;
using n _ log ; using <-> <-> <-> . <%> ;
counter _ type = performance _ counter _ type . number _ of _ items ; increment _ value = new simple _ layout ( STR ) ; instance _ name = string . token ( <%> . <%> <%> <%> <%> <%> _ if _ if </%> . = string . = string . = string . = string . = string this <-> <-> <-> <-> <-> <-> <-> close <-> <-> <-> <-> ;
name = name ;
counter _ creation _ data _ collection ccds = get _ counter _ creation _ data _ collection ( counters _ by _ category [ <-> , . name . type . type . type . type . type . type . type _ number ( ( this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this . this
if ( ! performance _ counter & <%> length length length ;
return performance _ counter _ category . ) this null null null null null null null null null null null <-> </%>
if ( perf _ counter ! = null </@> { </%> { </%> close </%> . close </%> ; ) <%> <-> <%> initialized <%> initialized <-> ; </%> <-> <-> <-> <-> _ false _ false _ false _ next ;
if ( ! initialized ) { initialized = true ; if ( auto _ create )
install ( context ) ;
perf _ counter = new performance _ counter ( category _ name , counter _ name , instance _ name , false ) ;
internal _ logger . error ( exception , STR , category _ name , counter _ name , instance _ name ) ;
return perf _ counter ! = config ( queue (
machine _ name = environment . log this this !
machine _ name = string . empty . <@>
builder . append ( machine _ name n n <->
using n _ log ; using <-> <-> <-> . <-> _ ( </%> . ( </%> _ </%> . </%> <%> this . <-> this _ this _ this _ </@> _ </@> this this this this this this this this this this this this . <%> . STR this . <%> . <%> . <%> . STR this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this
parameters = new list < method . is _ is _ parameter helper helper ( ( ( ( ( ( ( ) ( ( = ) _ this ! = _ </%> = _ </%> . <@> message . </%> . ( ( base base base . base . base . base base . base . base base base . base . base , base base base . base base base base base base . base . base . base , base . base . base . base , base . base . base , base . base . base
do _ invoke ( parameters , directory n n n n _ queue ( </@> . <-> ) </@> , <%>
var parameter _ value = render _ & encoding . console . layout , , & & _ _ _ _ method method ( <@>
using ( var target _ builder </@> = this = this . null _ = null . null </%> _ <%> . is <-> _ method : this . none this this this . internal ,
using n _ log ; using <-> this this . log . client <%> <%> <%> <%> <%> <%> <%> <%> . </%> this . = <-> this this this this this this this <%> . </@> this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this
message _ queue _ proxy = new ( ( null <%> this this this <%> this this </%> this </%> event this event event . ut <-> if <-> . log . if </%> . instance . instance <-> . output . output _ is _ if _ </%> <%> <%> <-> <-> <%> <-> <%> <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <%> <-> <%> & & & & & & & & & & & & & & & & & & & & & & empty <%> <-> <%> <-> <%>
name = name ;
if ( queue = = null method )
if ( create _ queue _ ( , <@> </%> </%> )
var msg = prepare _ message ( log _ event ) ; message _ queue _ proxy . send ( queue , msg ) (
if ( string . is _ ( host . host <-> <%> </@> </@> </@> . ) . ) _ , . <-> . label . value </%> . </%> </%> </%> </%> </%> <-> <-> <-> <-> <-> <-> <-> )
if ( smtp _ server = = , , string . console this this this . null this this . null & ! null ) this . smtp this this ( internal this ( to this , output , empty ) )
if ( delivery _ method = = context )
if ( delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory & & string . is _ null _ or _ empty ( pickup _ directory _ location ) )
if ( ! string . is _ null _ or _ empty ( pickup _ directory _ location ) & & delivery _ method = = smtp _ delivery _ method . specified _ pickup _ directory )
client . delivery _ method = ( & & empty & . . . . . . . . . . if ,
name = name ;
return console _ target _ helper . </@> . </@> . get this . <@> ; is ; pause ;
if ( console _ target _ <@> _ console . set _ ( true , _ check message message encoding encoding encoding ; pause . if & & pause . null & &
pause _ logging = false ;
if ( encoding ! = null & & _ pause ( pause <@> . output <@> <@> ) </@> </@> </@> </@> </@>
write _ to _ output ( lei , base . render _ log _ event ( header , lei ) ) ;
write _ to _ output ( lei , base . render _ log _ event ( footer , lei ) ) ;
write _ to _ output ( log _ event , base . render _ log _ event ( layout , log _ event ) ;
if ( word _ highlighting _ rules . count <%> ( <-> ( start ( word this . count this this this <%> <-> ( ) )
foreach ( console _ word _ highlighting _ rule hl in in in in in if . )
foreach ( console _ row _ <%> . </%> in <-> = = <%> _ <-> . rules . rules )
if ( use _ default _ true . true . = . get . </@> . rules _ rules </%> </%> </%> . > length . = = use . null <-> . base . base . base . base . base . highlighting _ buffer <%> <%> _ highlighting _ buffer <%> <%> _ count _ <@> _ count _ <@> _ count _ <@> _ highlighting _ buffer
foreground _ color = foreground _ color ; background this count count count - 1 this _ log <-> ) ) ) </%>
get { return background _ color name name name 1 1 count count _ <%>
get { return foreground _ color ; }
stack = stack ; previous _ count = previous ) ! ! ! ! ! </%> get get get _ ,
while ( stack . count > previous _ count )
var target _ attribute = get _ type ( </%> . _ custom . _ <@> ) ( this this this _ <%> <-> this this this this <-> <-> <-> <%> <%> <%> <%> <%> <%> = <%> <%> <%> ( <%> ) ( this <%> . _ log . _ log . _ <-> ) <%> . _ log . _ <-> ) ( this this this this this </%>
return get _ type ( ) _ if ) </%>
using n _ log ;
async _ continuation = async _ ( <%> <%> _ <@> ;
var cont = interlocked . exchange <%> <%> log <@> <@> return null - null </%> _
name = name ;
repeat _ count = repeat _ count ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( repeating . to . wrapper ) ,
optimize _ buffer _ reuse = async <%>
name = name ;
if ( header ! = null )
debugger . log ( log _ level . off . ordinal , string . empty , render _ log _ event ( header , log _ event _ info . create _ null _ event ( ) ) + STR ) ;
debugger . log ( log _ level . off . ordinal , string . empty , render _ log _ event ( footer , log _ event _ info . create _ null _ event ( ) ) + STR ) ;
if ( optimize _ buffer _ reuse )
log _ message = base . render _ log . ; target . ;
separator = STR ; bottom _ frames = - count <%> top _ <-> this <-> </%> </%> </%> </%> <%> </%> get
if ( top _ frames ! = - 1 )
end _ pos = math . min ( top error error ) 0
else if ( bottom _ frames ! = - ( ( ( ( _ = < ;
start _ pos = messages . length - math . min ) min . ! header ) header ) header
current _ separator = separator ;
last _ message = string . event <%> , , , optimize </%> </%> </%> </%> <-> <-> <-> <-> <-> <%>
name = name ;
counter + + ; last _ thread = = ( { layout , , , , , , , , , , , , , , , , , if ) _ </@> <@> <@> <@> <@> <@> <@> <@> <@> <@> <@> write write write write write write write write write write write write write write write write write write _ ) <-> ;
events = new list < log _ event _ info length > </%> </%>
name = name ;
events . add ( log _ event <-> = message ; if <%> </@> <-> _ if ; if <%> <->
name = name ;
assert . true ( flush _ <-> < log <%> <%> ) <%> log _ + ;
if ( throw _ exceptions )
name = name ;
assert . true ( flush _ count < = write _ count ) ; write _ count + + ; if ( fail _ counter > 0 )
fail _ counter - - ;
flush _ count + + ;
if ( variable ! = null </%> ) </%> </%>
var environment _ variable = environment . if . get . <@> . ;
if ( ! thread _ agnostic ) { ( log ( log <-> <%> <%> <%> <%> <%> <%> <%> <%>
if ( ! is _ initialized ) { initialize ( logging _ configuration ) ; } return get _ formatted _ message ( log _ event ) ;
if ( ! thread _ agnostic )
if ( ! is _ initialized <-> <-> <-> <%> <%> <-> _ configuration _ configuration <-> } <%> <%> </%> ! thread <-> <-> <-> <-> <-> <-> this this this _ < count <%> <%> <%> <%> <%> <%> )
cache _ layout _ result = <-> . <%> this this this this this this _ = assert . agnostic <@>
if ( ! thread _ agnostic </%> </%> = </%>
int initial _ length = max _ rendered + ;
if ( sb . length > max _ rendered _ length ) { max _ rendered _ length = sb . length ; } if ( cache _ layout . return )
initialize ( configuration ) ;
close ( ) ;
thread _ agnostic = object _ graph _ scanner _ list . all ( item = > item . get _ type ( ) . is _ defined ( typeof ( thread _ agnostic _ attribute ) , true ) ) ;
if ( is _ initialized ) { logging _ configuration = null ; is _ initialized = false ; close _ layout ( ) ;
current _ file _ length = ;
current _ file _ length = <%> <-> </@> </@> </@>
file = create _ file _ stream ( false ) ;
if ( file ! = null )
file = null ;
if ( file = = null )
return creation _ time _ utc ;
return last _ write _ time _ utc </%>
return current _ file _ length ;
if ( file = = null )
current _ file _ length + = count ; current . write file . write file . write </@> offset _ </@> event
using n _ log ;
action = filter _ result . neutral ;
return check ( log _ event </%> <-> <-> <->
using n _ log _ config ; using n <%> <%> <%> </%> </%> </%> </%> </%> <%> </%> ;
if ( class _ name )
if ( method _ name )
if ( file _ name )
if ( clean _ names _ of _ async _ continuations & & method . name = = STR & & type . declaring _ type ! = null & & type . name . starts _ with ( STR ) )
if ( clean _ names _ of _ anonymous _ on this this this this <%> . name . config this file file . if . if )
if ( class _ name )
if ( clean _ names _ of _ async _ continuations & & method . name = = STR & & type ? . declaring _ type ! = null & & type . name . starts _ with ( STR ) )
if ( clean _ names _ of _ anonymous _ delegates & & ( method _ name . starts _ with ( STR ) & & method _ name . contains ( STR ) & & method _ name . contains ( STR ( <%> ( <%> ( <%> = = = = type = type = = = = type = = type = = = type = = = = = = = = = type = =
using n _ log ;
request _ limit = request _ limit ; on . on log . using log . using log . file ( ) <%> <%> <%> <%> <%> <%> . = . = = info <%> . = . = . </@> . info = this _ </@> )
if ( log _ event _ info _ queue . count > = request _ limit )
switch ( on _ overflow )
while ( log _ event _ info _ queue . count > = request _ limit )
if ( on _ overflow = = async _ target _ wrapper _ overflow _ action . block )
result . add ( log _ event _ info _ queue . dequeue ( ) ) ; if ( on _ overflow = = async _ target _ wrapper _ overflow _ action . block )
if ( is _ authenticated )
separator = separator ;
if ( auth _ type )
separator = separator ;
if ( name )
name = name ; ordinal = ordinal <%> <%> <%> culture culture culture culture <%> other ( <-> <%> <%> <-> if </%> , </%> <-> <-> <-> <%> <%> <%> <%> <%> <%> <%> <%> ) <%> . </%> <%> <%> . </%> <%>
get { return name ; }
return name ;
return ordinal ;
return ordinal = = other . ordinal </@>
return other ! = null & & ordinal = = </@> . ;
return ordinal - level . this </%> this this </%>
name = name ;
if ( throw _ on _ initialize )
assert . equal ( 0 , in _ blocking _ operation ) ; initialize _ count + + ;
assert . equal ( 0 , in _ blocking _ operation ) ; close _ count + + ;
assert . equal ( 0 , in _ blocking _ operation ) ; flush _ count + + ;
assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;
assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;
assert . equal ( 0 , in _ blocking _ operation ) ; write _ count + + ;
lock ( sync _ root ) { in _ blocking _ operation + + ;
in _ blocking _ operation - - ;
using n _ log ; using n _ log _ layouts (
string msg = render _ inner ( log _ event ) ; builder . append ( transform ( msg ) ) ;
previous _ culture _ info = thread . current this . & </%> ;
thread . current _ thread . current _ culture = previous . ;
return ( t ) get _ logger ( name thread ( name ( <%> = this this this <%> <%> <%> <%>
return get _ logger ( frame . get _ method <%> <-> on <%> _ target _ list . lock this
using n _ log ; using n . <%> this _ culture . this . ) ;
targets = new list < target > ( targets ) ;
name = name ;
last _ log _ event = log . ;
events = new list < log _ event - info > </@> _ <%> ? ? ?
name = name ;
if ( throw _ exceptions - - > get <@> )
using n _ log ; </%> this this . <%> this this this this this this this this this this this this this this this . stack . <%> . this this this _ this _ <@>
space _ as _ plus = = = get . return true <@> <@>
log = new string _ writer <%> log <%> </%>
log = sender . log ; log . write _ line ( STR , address _ family , socket _ type , protocol _ type ) ;
return ( address _ family log log <%> n = <@> <-> <->
return STR + uri + ) ;
properties = new properties _ dictionary ( message this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this ;
level = level ; logger _ name = logger _ name ; message = message ; parameters = parameters ; format _ provider = format _ provider ; exception = exception ;
calc _ formatted _ message ( ) ;
get { return stack _ trace ! = null ; }
get { return this . stack _ trace . get _ frame <-> <-> this this this this this this this this this this this _ ; } return = log } = ; } </@> } </@> } } message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message message
return logger _ name . substring ( last _ dot + ; } } value = format = format = provider = provider )
get { return message ; }
message = value ;
get { return parameters ; }
parameters = value ;
get { return format _ provider ; }
if ( format _ provider ! = value ) { format _ _ _ _ _ _ _ ) ) )
get { return message _ formatter ; }
message _ formatter = value ? ? string _ format _ ) properties properties properties properties properties properties _ logger _ logger return value value </@>
if ( formatted _ message = = null ) { calc <%> <%> <%> <%> <%> ; } <%> <@> <@> <@>
if ( properties ! = null ) { return properties . <@> return return (
internal properties _ dictionary properties _ dictionary { get { return properties ; } set { properties = value ; } }
if ( properties = = null ) { interlocked . compare _ exchange ( ref properties , new properties _ dictionary ( ) , null ) ;
calc _ formatted _ message ( ) ;
return properties ;
var log _ message _ formatter = message _ formatter ? . target as i _ log _ message _ formatter ;
if ( properties ! = null & & properties . message <-> <-> count > { <-> = new <-> ( <-> ( <-> ) as
return new message _ template _ parameters = ( ( ( <-> , </%> string string string string string ) ) ) ) ) ( message ) buffer buffer ;
return STR + logger _ name + STR + level + _ _ _ ! ! ! count . sequence </@> . sequence </@>
stack _ trace = stack _ trace ; user _ stack _ frame _ number = user _ stack _ ) ;
if ( layout _ cache = = ; ;
lock ( layout _ cache ) { return if = message properties properties . ; ; ; ;
formatted _ message = message _ formatter = . ) </@>
formatted _ message = message ;
formatted _ message = null ;
calc _ formatted _ message ( ) <@>
if ( properties ! = null & ) to _ string this this this . <-> _ <-> _ <-> = count ; ; length length length number number number number buffer this buffer this buffer ( < ( < < < < < < < < < _ <-> ( < < < < < ) buffer this . ) { this . ) { this . ) buffer this . ) buffer this . ) buffer this . ) buffer this . ) ;
grow _ as _ needed = grow _ as _ needed ; buffer = new async _ log _ event _ info [ size ] ; grow _ limit = grow _ limit ; get _ pointer = 0 ; put _ pointer = 0 ;
if ( count > = buffer . length )
if ( grow _ as _ needed & & buffer . length < grow _ limit )
int cnt = count ;
count = 0 ; get _ pointer <@> </@> </@> put ; logger _ </@> _ </@> </%> </%> </%> </%> </%>
using n _ log _ config ;
return action ;
using n _ log ;
xml _ encode = true ;
return xml _ encode ? do _ </%> this this <-> <-> <-> </%> message = <%> = <%> </@> </@> </@> </@>
if ( value _ indexes ! = null </%> xml </%>
foreach ( int index in value _ indexes <-> <->
if ( value _ indexes ! = null </@> </@>
value _ indexes = new list < if </@> </@> _ ( ( ( ( ( ( ( ( <-> <-> <-> <%> <%> <-> </%> STR </%> _ </@> <-> ( ) </@> ( ) </@> . this . </%> </@>
using n _ log _ config ;
json _ encode = true ; escape . lock = _ unicode <->
if ( json _ encode )
var result = targets . default _ json this . _ string <-> <-> count count count count count <@> <@> ;
using n _ log ; using n _ text this this . this ;
exception _ separator = environment _ helper this this this this this this this this this this . new _ close option process process process process process connection </%> . command . command </%> . command </%>
if ( raw )
if ( with _ exception & this log log <@> </%> null . current </%> return return </@> <@> <@> <@>
builder . append ( exception _ connection ;
cached = true ; clear _ cache = clear _ cache _ option . on _ init | | . <%> . current _ base </%>
cached _ value = null ;
cached _ value = null ;
if ( cached )
if ( cached _ value = = null | | rendered _ cache _ key ! = new _ cache _ key )
cached _ value = base . render _ inner ( log _ event ) ; rendered _ cache _ key = new _ cache _ key ;
return cached _ value ;
assert . equal ( STR , null process process process process process process process process current this . dt <-> <-> <-> log <-> ( return <-> <%> <%> <%> <%> . = ) <%> ) |
assert . equal ( STR , get this _ helper this this this _ string log n </@> ) ; ) ; <%>
assert . equal ( STR , get _ connection _ string ( dt ) ) ;
assert . equal ( STR , get _ connection _ string ( dt ) ) ;
assert . equal ( STR , get <-> <-> <-> <-> <-> process <%> ( if this process <%> <%> <%> ) <%>
( ( mock _ db _ connection ) connection ) . add _ to _ log ( STR , param _ count ) ;
( ( mock _ db _ connection ) connection ) . add _ to _ log ( STR , command _ text ) ; if ( connection . </%> _ string key key key key key key key ( )
get { return parameter _ name <%> }
parameter _ name = value ;
get { return parameter _ value <%> } <%>
parameter _ value = value ;
current _ process _ id = <%> . get this this this ;
get { return current _ process = <@> </%> }
get _ process _ name ( ) ; return current _ process _ name ;
get _ process _ name ( ) ; return current _ process _ base _ name ;
if ( current _ process _ assert </%> </%> </%> event ! </%> <->
current _ process _ name = process . get _ current _ process ( ) . main _ module . file _ name ;
current _ process _ name = <@> this this this this _ </@> _ </@> ,
current _ process _ base _ name = path . get _ file _ name _ without _ extension ( current _ process . <%> ;
if ( throw _ exceptions )
using n _ log ; using n _ log _ internal this this . this this this this this this this this . type . <-> . <%> this this this this this this this this this this this this this this this this this this this this this this this this this this this this this . . . . . STR . ) ;
if ( full _ name )
using n _ log _ internal ;
string _ reader = string _ reader ; token _ type = condition _ token _ type this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this . = condition _ parse _ type ; char . </@> . </@> . </@> not . ) <%> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@> . <@>
string s = token _ value ;
if ( token _ type ! = token _ type ) { throw new condition _ parse _ exception ( STR + token _ type + STR + token _ type + STR + token _ value + STR ) ; } get _ next _ token ( ) ;
if ( token _ type ! = condition _ token _ type . keyword )
string s = token _ value ; get _ next _ token ( ) ;
if ( token _ type ! = condition _ token _ <@> . read </@> </@> </@> <@> </@> </@> )
if ( token _ type ! = condition _ token _ type this this this this this this this this . <@> . ;
return token _ type = = condition _ token _ type . =
return token _ type = = token _ type ;
if ( token _ type = = condition _ token _ type . end _ of _ input )
skip _ whitespace ( ) ; token _ position = token _ position ; int i = peek _ char token token token token token token ;
token _ type = condition _ token _ type . end _ of _ input ;
parse _ number ( ch ) ;
parse _ single _ quoted _ string ( ch ) ;
parse _ keyword ( ch ) ;
token _ value = ch . to _ string ( ) !
token _ type = tt ; token _ value = new string </%> </%> </%> <%> <%> </%> <-> <-> <-> <-> _ char <%> _ read <-> _ input </%> ) <%> _ input </%> ) <%> </%>
read _ char ( ) ; int next _ char = peek = _ _ _ _ token </%> reader ;
token _ type = condition _ token _ type . not _ equal ; token _ value = STR ; read _ char </@> char </@> char </@> char </@> char </@> ) char
token _ type = condition _ token _ type . less _ than _ or _ equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . less _ than ; token _ value = STR ;
read _ char ( ) ; int next _ char = peek _ char ( ) ;
token _ type = condition _ token _ type . greater _ than _ or _ equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . greater _ than ; token _ value = STR ;
read _ char ( ) ; int next _ char = peek _ char ( ) ;
token _ type = condition _ token _ type . not _ equal ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . not ; token _ value = STR ;
read _ char ( ) ; int next _ char = peek _ char ( ) ;
token _ type = condition _ token _ type . and ; token _ value = STR ; read _ char ( ) ;
read _ char ( ) ; int next _ char = peek _ char ( ) ;
token _ type = condition _ token _ type . or ; token _ value = STR ; read _ </@> </%> </%> </%> ( ) ( ) ) =
read _ char ( ) ; int next _ char = peek _ char ( ) ;
token _ type = condition _ token _ type . equal _ to ; token _ value = STR ; read _ char ( ) ; return true ; } token _ type = condition _ token _ type . equal _ to ; token _ value = STR ;
token _ type = condition _ token _ type . string ;
read _ char ( ) ; while ( ( i = peek _ char ( ) ) ! = - = <@>
sb . append ( ( char ) read _ char ( ) ) ;
if ( peek _ char ( ) = = ( int ) '\'' )
read _ char ( ) ;
token _ value = sb . to _ string ( ) ;
token _ type = condition _ token _ type . keyword ;
read _ char ( ) ; while ( ( i = peek _ char ( ) ) ! char _ </@> <%> </@> </@> <->
sb . append ( ( char ) read _ char ( ) ) ;
token _ value = sb . to _ string ( ) ;
token _ type = condition _ token _ type . number ;
read _ char ( ) ; while ( ( i = peek _ char ( ) ) ! = _ 1 )
sb . append ( ( char ) read _ char ( ) ) ;
token _ value = sb . to _ string ( </@> </@>
while ( ( ch = peek _ char ( ) this this this this this this this this this ( this this this <%> = char this this this this this this <%> this this this this <%> <%> <%> <%> <%> <%> <%> <%> <%> <->
read _ char ( ) ;
character = character ; token _ type = token _ ;
get { return x ; } set { x = token <%> _ _ _ _ _ token (
return action ;
string _ comparison comparison _ type = ignore _ case
if ( ! layout . render ( log _ event ) . equals ( compare _ to , ; ; read </%> </%>
return action ;
name = name ;
message _ limit = message _ limit ; interval = interval ; wrapped _ target = wrapped _ target ; optimize . buffer . buffer . buffer . buffer <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> char char char char char char char char char char char char </%> next . next . next char ( limiting . _ _ wrapper ( ( limiting ( limiting ( limiting ( limiting ( limiting . wrapper . wrapper . wrapper ( limiting . wrapper ( </%> . wrapper . wrapper . wrapper . wrapper .
if ( message _ limit < = </@> ;
if ( interval < = time <-> = message = time x <-> <-> <-> <-> <-> <-> <-> <-> )
if ( throw _ exceptions )
assert . true ( flush _ count < = ; ) ( ) ( ) + . ! + _ <-> </%> </%> </%> </%> </%>
flush _ count + + ;
open _ async ( null ) ;
invoke _ async ( on _ begin _ open , null , on _ end _ open , on <-> <-> <-> <-> , , , * user open <%> open <%> open <%> open <%> open <%> open <%> open open open <%> open
close _ async ( null ) ;
on _ end _ process _ log _ messages ; file _ ! _ log _ - =
return begin _ process _ log _ messages ( events ; callback ;
end _ process _ log _ messages ( result ( </@> ) ;
if ( process _ log _ messages _ completed )
process _ log _ messages _ completed ( this <%> . <@> . completed . event . event </%> _ = </%> </%> full . full _ state ) ) async close async . ) ) async close async . close . close . close . </@> ,
if ( open _ completed ! = null </%> </%> </%>
open _ completed ( this , new async _ this this this this this this . end </%> </%> <%> <%> . <@> this <%> <%> ) ( ( ( target ( target ( target ( user file this <%> file file file file this <%> ) ) </@> , <%> , <%> . user this . user this . user this . user _ user this , <%> . user _ user this . user , <%> , <%> . user , <%> , <%> . user , <%> , <%> , <%> . user , <%> , <%>
if ( close _ completed ! = open _ </%>
close _ completed ( this , new async _ completed & mono & <@> _ process <%> _ callback </%> this _ cancelled <%> <-> ;
name = name ;
if ( file _ appender _ cache ! = user _ <%> . check _ new _ error <@> ; ( ( auto . target . callback _ closing _ timer _ callback </@> </@>
cleanup _ initialized _ files ( time _ source . get this . full this . ) <@> file . file . file . file . add this this this this this this this this this this this . open on on on on on on <%> . target this . timeout . <@> this this this this . open this . open this this this . open this this this this . open this this this this this this this this this this this this this this this this this this this this this this this this this this
foreach ( var file in initialized _ files <@>
if ( discard _ all )
else if ( ! keep _ file _ open )
else if ( network _ writes )
else if ( concurrent _ writes )
if ( ! force _ mutex _ concurrent _ writes . . . </%> _ </%> . _ win . . . . log _ log files (
return archive _ above _ size ! = file . target . ) close . disabled close . disabled </@> </@> </@> </@> , , , ) <@> . none . none <@> <@> <@>
appender _ factory = get _ file _ appender _ factory ( ) ;
open _ file _ cache _ timeout * NUM , open _ file _ cache _ timeout * NUM ) ;
auto _ closing _ timer = null ;
file _ archive _ helper = null ;
var log _ file _ name = get _ full </%> </%> </%> ! ! ! size ( size async _ event async _ </@>
byte [ ] bytes = get _ bytes _ to _ write ( log _ event ) ;
if ( full _ file _ name = = null )
byte [ ] bytes = get _ bytes _ to _ write ( ev this this this this . var ( _ get _ get _ write </%> </%> </%> ) ( on _ get </%> ) . . . on _ event </%>
flush _ current _ file _ writes ( file _ name , first _ log _ event , ms . out get get . get _ files ( ( <%> ( <%> file file file _ writes </%> _ style <%> . file _ style file _ writes </%> _ log . first _ </@> _ log this . last this this . last . last . last _ 0 files files files files files files files files files files files files files files files files files files files files files files files files files files files files files _
write _ to _ file ( file _ name , bytes _ to _ write , initialized _ new _ <%> ) ) ) ) <@> . this _ this ) <->
builder . copy _ to _ stream ( work _ stream , encoding this . encoding . file ;
var cleanup _ archive _ files = file _ archive _ style . check _ archive _ cleanup ( archive _ file _ <%> <-> _ . . . . . . . archive _ files _ files ) ( . max _ file _ pattern </%> . name . name . name files files files files ( if _ files ( if _ files ( . if _ time _ time _ create _ time _ time _ time _ time _ time _ time _ time _ time _ time _ time _ time _ time _ time
if ( full _ archive _ file _ name = = null )
archive _ file = get _ archive _ file _ name ( file _ name , ev , upcoming _ write . size </@> </@> </@> </@> </@> </@> </@> </%> ) <@> ) <@>
var validated _ archive _ file = get _ archive _ file _ name ( file _ name , ev , max _ var _ size <%>
do _ auto _ archive ( archive _ file , ev , initialized _ new _ file ) ;
if ( archive _ above _ size = = archive _ above _ size _ disabled )
var should _ archive = length . value + upcoming _ write _ size > archive _ above _ ;
if ( archive _ every = = file _ archive _ period . byte </%> </%> </%> </%> </@> </@> <->
date _ time file _ create _ time = truncate _ archive _ time ( creation _ time _ source . value , archive _ every ) ; date _ time log _ event _ time = truncate _ archive _ time ( log _ event . time _ stamp , archive _ every ) ;
lock ( sync _ root ) { if ( ! is _ initialized )
date _ time expire _ time = open _ file _ cache _ timeout > 0 ? date _ time . utc _ now . add _ seconds ( - open _ file _ cache _ timeout ) : date _ time . min _ value ;
if ( replace _ file _ contents _ on _ each _ write ;
write _ header ( appender ) ;
if ( auto _ flush )
initialized _ files [ file _ name ] = now ; initialized _ files _ counter + + ;
if ( initialized _ files _ counter > = file _ target . initialized _ files _ counter _ max ) { initialized _ files _ counter = 0 ; cleanup _ initialized _ files ( ) ;
if ( ( is _ archiving ) | | ( ! write _ footer _ on _ archiving _ only ) ,
array _ segment < byte > footer _ bytes = get _ layout _ bytes ( footer ) ;
write _ to _ file ( file _ name , footer _ bytes , false ) ;
do _ auto _ archive ( file _ name , log _ event _ true </%> </%> </%> </%> = = <-> ) ,
if ( delete _ old _ file _ on _ startup )
if ( file _ archive _ mode _ factory . should _ delete _ old _ archives ( max _ archive . is ) )
if ( file _ archive _ style . attempt _ cleanup _ on _ initialize _ file ( archive _ file _ pattern file file file _ <%> ) _ <@> ) _ = name name name name name files files files files files files ( ( files ( file _ max _ max _ max _ create _ </%> </@> _ ) = </@> _ )
var cleanup _ archive _ files = file _ archive _ style . check _ archive _ cleanup ( archive _ ( . write _ . max _ <%> ;
array _ segment < byte > header . <%> . get _ layout _ this </%> </%> ; ; ; ; ( <-> this this this this this ) this this _ parameter </@> ) ) ) ) ;
array _ segment < byte > footer _ bytes = get . get . error ) </@> ) </@> </%>
if ( ! create _ dirs | </%> . first )
name = name ;
optimize _ buffer _ reuse = get _ type ( log ) ) ) ) typeof . </%> . <@> . randomize _ group _ target ) ;
lock ( random )
using n _ log ; using n _ bytes _ internal this this this this this this this this this this . this this this this this this this _ ) ;
return base . to _ string ( ) + STR + wrapped _ target + STR ;
name = name ;
optimize _ buffer _ reuse = get _ type ( ( ( method _ list _ = . method _ new </@> </@> </@> </@> </@> </@> </@> </@> </%> ) this this this this this this this this this _ target log . target . </%>
lock ( lock _ object )
selected _ target = current _ target ; current _ target = ( current _ target + 1 ) % . count ;
using n _ log ; using n ! _ _ this this . <@> ;
name = parameter _ name ; layout ) ) <-> . <%> <%> <%> <%> <%> log _ using log _ this bytes <%> </%> this . </%> this this this . this . <-> <%> _ log . </%>
using n _ log ; using n _ log ; using n _ log _ layouts ; using n _ log _ <%> _ return <-> <-> <-> <-> _ this _ _ ] this this this this this this ; _ = = = = log _ . ;
parameters = new list < method _ call _ parameter > > _ <@> _ parameter _ parameter </@> <@> <@> </@> </%> </@> </%> = <@> ;
name = name ;
write ( ( i _ list < async _ log _ , , info ) ) <@> { { { { { this } this } this } this { ( n . using } ;
if ( in _ call )
precalculate _ volatile _ layouts ( log _ events [ i ] . log _ event ) ; buffer . append ( log _ events [ i ] ) ;
var network _ log _ events = translate _ log _ events ( log _ events _ array ) ; send ( network _ log _ events , log _ events _ array , null ) ;
send _ buffered _ events ( async this this this </%> </%> _ continuation _ ! ;
if ( client _ id ! = null ) { this . this _ <%> </%> </%> . render </%> [ list list list _ new . ( ( </@> [ this _ to log <%> log log <%> log this </%> ) (
merge _ event _ properties ( ev <-> <-> <->
network _ log _ events . events [ i ] = = _ </%> ) </@> <%> <-> <-> <-> <-> this client this this this this this this <-> ;
if ( ! on _ send ( properties </@> </@> <-> <-> ;
internal _ logger . error ( e . error , </@> async log log < async < async < async < <%> ( </@> ( </@> ( ( [ ;
send _ buffered _ events ( null ) ;
in _ call = true ;
if ( string . is _ null . send . empty . <@> _ name n header _ > header header <->
if ( use _ binary _ encoding <->
client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , binding , new endpoint _ address ( endpoint _ address ) ) ;
client = new wcf _ log _ receiver _ client ( use _ one _ way _ contract , endpoint _ configuration _ name , new endpoint _ address ( endpoint _ address ) ) ;
return create _ wcf _ log _ from . configuration <-> </%>
lock ( sync _ root )
var network _ log _ events = translate _ log _ events ( buffered _ events ) ; send ( network _ log _ events , buffered _ events , flush _ continuation ) ;
in _ call = false ;
internal _ logger . error ( exception this <%> <%> <%> name 0 ) public
internal _ logger . error ( exception this this . name name </%> </%> </%> </%> </%> </%> ) ! ! this . </@>
var config = new logging _ configuration </%> ( </@> </@> </@> <-> ) ) ) n this n ) this s s s s s s s s s s s s n _ json . this _ </@> ) ) ) ) ) <%> <%> <%> <%> <%> <%> <%> <%> , client , , , , , , , , , , , , , , , , , <@> , ( , , , , <@> , <@> . <@> , , , , , , , , , , , , , , , ,
var config = new logging _ configuration ( </@> ) -> ) this
var config = new logging _ configuration ( </@> ) </@> </@> <@>
register _ items _ from _ assembly ( asm ) ;
get { return targets ; }
get { return filters ; }
return layout _ renderers ;
get { return layout _ renderers ; }
get { return layouts ; }
get { return ambient _ properties ; }
public n _ log . targets . i _ json _ serializer json . <-> assembly as this . ) ) ) from . )
get { return time _ sources ; exception
get { return condition _ methods ; }
register _ items _ from _ assembly <@> </%> <@> empty . </@> <@> <@> ( public public public public public public public public public public public public -> <%> <%> <%> <%> log . from . = , configuration _ </@> _ ;
foreach ( i _ factory f in all </%> _ <@> n this </%> </%> </%> n _ <@> </%>
foreach ( i _ factory f in all this this </%> this <-> </%> </%> </%> </%> </%> </%> n _ factories </%>
get { return x ; } set </%> <-> <-> <-> <-> value <%> config config <%> !
return STR + x ;
if ( padding ! = 0 )
if ( padding > 0 )
s = s . pad _ left ( return -> log -> log <-> n n n n n n n n n n n n n n n n n n n </@>
s = s . pad _ right ( - padding , pad _ character ) ;
int absolute _ padding = padding ;
if ( fixed _ length & & s . length > = if event event event event event value value value value value value value value value = this . </@>
if ( alignment _ on _ truncation = = <@> )
assert . equal ( get _ type <%> . { { { { { { { { fixed _ ( has _ ( ( ( ( ( </%> this . provider , logger <-> <-> <-> <-> <-> <-> <-> ) ; <-> . </%> . </%> . </%> <-> <-> <-> <-> . </%> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> . </%> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <->
name = name ;
max _ size = size ;
logs = new queue < string > ( max return ;
logs = null ;
if ( logs = = null )
if ( log _ event . has _ properties <-> <-> <-> this . try . try this </%> </%> </%> item item item ) ) ) _ )
var format _ provider = get _ format _ </%> ; culture <@> culture </@> </@> this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this
socket = new socket ( address _ log ( this <%> this this <%> <%> <%> ;
return socket ;
( ( i _ disposable ) socket <%> <%> _ dispose _ <%> ) ) ) ) ;
name = name ;
type target _ type = type . get _ type ( class _ name ) ;
method = target _ type . get _ method ( method _ name ) ; if ( method _ _ _ _ _ _ _ type _ _ this . type _ name ;
needed _ parameters = method . get _ parameters ) _ <@> value value value value value value ) ;
method = null ;
method = null ;
if ( method ! = null )
else if ( lhf = = null <@>
lhf = new layout _ with _ header this this this this this this this this this this this this this this this . <@> <@>
get { return is _ trace _ <@> } ; }
get { return is _ debug _ = = null </@>
get { return is _ info _ enabled ; max max
get { return is _ warn _ enabled ; } (
get { return is _ error _ enabled ; if if (
get { return is _ fatal _ enabled ; }
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , null , value ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , value ) ;
if ( is _ trace _ enabled )
write _ to _ targets ( log _ level . trace </%> </%> </%> . is <%> <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> ( ( <%> <%> this <%> ) <%> , format , ] <%> this <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> . if <%> . is . </@> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> ) , argument
trace ( message , exception ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , args ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , null , message ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , args ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , exception ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , message , null ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , args ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , exception , format _ provider , message , args ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled )
trace ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . trace , message , new object [ ] { argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ trace _ enabled ) { write _ to _ targets ( log _ level . trace , message , new object [ ] { argument , argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , null , value ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , value ) ;
if ( is _ debug _ enabled )
write _ to _ targets ( log _ level . func , null , null , null ( ) ) ;
debug ( message , exception ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , args ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , null , message ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , args ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , exception ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , message , null ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , message , args ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , exception , format _ provider , message , args ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled )
debug ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . debug , message , new object [ ] { argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , format _ provider , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ debug _ enabled ) { write _ to _ targets ( log _ level . debug , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , null , value ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , value ) ;
if ( is _ info _ enabled )
write _ to _ targets ( log _ level . is </%> </%> . if <%> <%> <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> ( ( , if <%> _ </%> ) ,
info ( message , exception ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , args ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , null , message ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , args ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , exception ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , message , null ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , message , args ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , exception , format _ provider , message , args ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled )
info ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . info , message , new object [ ] { argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ info _ enabled ) { write _ to _ targets ( log _ level . info , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , null , value ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , value ) ;
if ( is _ warn _ enabled )
write _ to _ targets ( log _ level . warn </%> </%> </%> . is <%> <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> ( ( , format . message <%> _ , format <%> _ </@> <%> ,
warn ( message , exception ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , args ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , null , message ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , args ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , exception ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , message , null ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , message , args ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , exception , format _ provider , message , args ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled )
warn ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . warn , message , new object [ ] { argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , format _ provider , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ warn _ enabled ) { write _ to _ targets ( log _ level . warn , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , null , value ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , value ) ;
if ( is _ error _ enabled )
write _ to _ targets ( log _ level . func , null , null , null ( ) ) ;
error ( message , exception ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , args ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , null , message ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , args ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , exception ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , message , null ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , message , args ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , exception , format _ provider , message , args ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled )
error ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . error , message , new object [ ] { argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ error _ enabled ) { write _ to _ targets ( log _ level . error , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , null , value ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , value ) ;
if ( is _ fatal _ enabled )
write _ to _ targets ( log _ level . if </%> </%> </%> . is <%> <%> <%> <-> <-> <-> <-> <-> <-> <-> <-> ( ( , if _ level _ log , if <%> this this this _ <-> ) ,
fatal ( message , exception ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , args ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , null , message ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , args ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , exception ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , message , null ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , message , args ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , exception , format _ provider , message , args ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled )
fatal ( message , exception _ candidate ) ;
write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument , argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , format _ provider , message , new object [ ] { argument , argument , argument } ) ;
if ( is _ fatal _ enabled ) { write _ to _ targets ( log _ level . fatal , message , new object [ ] { argument _ <-> } _ <-> } </%> } } , <-> to </%> to </%> to </%> to </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> argument _ </%> </%> </%> </@> </%> to </%> to </%>
return to _ event _ info ) ) <@> ;
implementation = implementation ;
get { return implementation ; }
return get _ enumerator ( ) </@>
wrapped = wrapped ;
get { return entry ; }
using n _ log ; using ;
parameters = new list < database _ parameter _ int . <@> <%> . ( + ; = = message <%> <%> this <%> <%> <%> this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this
using n _ log ;
address _ family = address _ ( ;
close _ socket ( continuation ) ;
var sock = socket ; socket <-> <-> <%> ;
args . completed + = socket _ operation _ ; </%> </%> remote <%> <%> <%> this this . endpoint )
socket _ operation _ completed ( ; ; ;
name = name ;
get { return max _ message this this <-> <-> <%>
max _ message _ length = n ; log ,
get { return max _ kilobytes ! if } _ } ; ; }
max _ kilobytes = value ;
event _ log . delete _ event _ <-> _ <-> name </@> machine . name . name . name <%> <%>
return event _ log . source . exists this </%> . <%> machine . name . name . name . name </@>
string message = base . render _ log _ event ( layout , log _ event ) ;
if ( message . length > max _ message </%> </%> = = = = = = = = this . args
message = message . substring ( 0 , max ) close ) close ) close ;
for ( int offset = 0 ; offset < </@> length length length length length length length length length = max & <%> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> </@> )
string chunk = message . substring ( offset , database . info n . info n n n n length offset length > offset <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <%> <%> <%> <%> ) <%> <%> <%> <%>
if ( entry _ type ! </@> n )
var value = base . render . <-> . render name , message . ) </%> <%> <%> <%> = log . <@>
event _ log _ instance . log = = <%> <-> <-> <-> </%> _ <%> _ <%> . ; ;
event _ log _ instance = new event _ log ( log , machine _ name , rendered _ source ) ; } if ( max _ kilobytes . has _ value )
return source ! = null ? base . render ( _ value null ;
machine _ name = machine _ name
machine _ name = machine _ name
process _ log _ messages ( log . events ( ( name . <%> this ;
if ( log _ factory ! = null ( > ( n ;
using n _ log ; using n . <%> this this ;
property = process _ info _ property . > ) ;
property _ info = typeof ( process ) . get _ property ( property . to _ string ( ) ) ; if ( property _ info = = null )
throw new argument _ exception ( STR + property _ info + STR ) ;
late _ bound _ property _ get = reflection _ helpers . create _ late _ bound _ method ( property _ info . get _ get _ method ( ) ) ; process = process . get _ current _ process ( ) ;
if ( process ! = null )
process . close ( ) ; process = null ;
if ( late _ bound _ property _ , , </@> )
var value = late _ bound _ property _ get ( process <-> <-> <-> <-> <@> ; find _ formatted _ ) < ) ) < ) < </@> <%> _ to ;
using n _ log _ config ;
culture = culture _ info . invariant _ ( uppercase event _ count name ( true null </@> </@> </%>
if ( uppercase )
culture _ info culture = culture ;
using n _ log ; using n _ this _ this . <-> this this . <%> . <%> . : targets _ <-> this this this this this this this this this this . > _ this _ this _ > _ > _ this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this
logging _ rules = new list < name _ rule this base process < _ info > . _ rules > ;
initialize _ all ( ) ;
config _ items = object _ graph _ scanner . find _ reachable _ objects < object exception exception exception exception STR STR STR _ info STR _ info . new this STR _ info ) = roots . to this ) = </%> this . <->
internal _ logger . info ( STR , </@> _ <@> ; foreach foreach bound <-> )
validate _ config ( ) ;
initialize _ all ( ) ;
logs = new list < string > ( items items _ buffer event log </@> ) <-> process ( true ;
name = name ;
logs . add ( base . render _ ; this _ config ( ! </@> log ( value value value value ( layout = <@> ) ) ) if
if ( ignore _ case )
if ( whole _ words )
regex = new regex ( regex _ string , regex _ options ) ;
text = text ; replace _ group _ name _ <%> <%> . ( ( <%> . <%> _ ) <%> _ with . <%> <%> _ with . with . with . with . with . ,
optimize _ buffer _ reuse = true ;
name = name ;
if ( format _ message )
render _ log _ event ( layout , log ;
using n _ log ;
var web _ request = web _ request <-> <-> this this <-> this <-> ) ( this <%> <%> <%> ) ( this ) ( ( address <%> <%> <%> ) <%> ) <%> ) ( log <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> ) _
sent _ messages = new list < message > _ event ;
queue _ exists _ called = true ; is <@> <%> <%> <%> <%> <-> <-> <-> <->
queue _ created = true ;
increment = 1 ; value = <%> </%> <-> ;
if ( sequence ! = null )
v = get _ next _ sequence _ value ( sequence . render ( log _ options ( ; ; ; ;
v = value ; value + = increment ;
if ( user _ name )
if ( domain )
get { return lock _ object ( }
if ( is _ initialized )
lock ( sync _ root ) { return is _ all </@> </@> !
lock ( sync _ root )
bool was _ initialized = is _ initialized ; initialize + return return <@> _ _ (
close ( ) ;
dispose ( true ) ;
lock ( sync _ root ) { if <%> <%> <%> <%> is this this <->
flush _ async ( async _ is <@> <-> ! _ <@>
if ( all _ layouts _ are _ thread _ )
lock ( sync _ root ) { if ( </@> </@> is ( is (
if ( all _ layouts ! = null ) { if ( optimize _ buffer _ reuse ) { using ( var target _ builder = reusable _ layout _ builder . allocate ( ) )
foreach ( layout layout in all _ layouts )
foreach ( layout layout in all _ layouts <-> ;
var target _ attribute = get _ type ( ) . ) . ) this this this this this this this this this this this this this this this this . </@> </%> </%> ) if
return target _ attribute . name + STR + ( name if if if ) _ ( null { null { if { if { if { if { ) . )
if ( ! is _ initialized ) { lock ( sync )
if ( initialize _ exception ! = null ) { lock <-> <-> <@> <@> . continuation <-> . continuation <-> <%> <%> init <%> init <%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%>
write _ async _ thread _ safe ( wrapped _ log . if ) </@> ( ( ( ( <%> ) configuration
if ( ! is _ initialized ) { write ( sync <-> <-> <%> <%> <-> <-> <-> <->
if ( initialize _ exception ! = null ) { lock _ _ sync sync ; root ;
log _ events [ i ] . continuation ( create _ init ; exception _ is ( ) ) configuration </@>
if ( optimize _ buffer _ reuse )
write _ async _ thread _ safe ( wrapped _ events _ _ !
lock ( sync _ root ) { logging _ configuration = ) target attribute attribute STR STR STR STR STR attribute attribute attribute
initialize _ target ( ) ; initialize _ exception = null _ _ _ _ </%> </%> </%> </%> </%> </%> </%> </%>
initialize _ exception = exception ;
is _ initialized = true ;
lock ( sync _ root ) { logging _ configuration = null exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception exception ! & [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ current <%> <%> ( = + current <%> <%> <%> <%> <%> <%> <%> ; ; ; ; ; ; ; ; ; ; ; ; ; & ! current <%> <%> <%> <%> <%> <%> <%> <%> <%>
if ( initialize _ exception = = null )
close _ target ( ) ;
lock ( sync _ root ) { if <%> <%> <%> safe <-> <%> <%> <%>
write ( log _ event ) ;
write ( log _ events [ i ] <-> ) _
lock ( sync _ root ) { if <%> <%> <%> <%> is <-> <-> <->
async _ log _ event _ info [ ] log _ events _ array = optimize _ buffer _ reuse ? null : log _ events as async _ log _ event _ info [ ] ; if ( ! optimize . ( </@> . ; & & <%> . events . null if & <%> . events . ;
write ( log _ events _ array ) </@>
write ( log _ events ) ;
if ( process _ exit _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . process _ exit + = on _ process _ exit ;
process _ exit _ event + = value ;
process _ exit _ event - = value ;
if ( process _ exit _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . process _ exit - = on _ process _ exit ;
if ( domain _ unload _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . domain _ unload + = on _ domain _ unload ;
domain _ unload _ event + = value ;
domain _ unload _ event - = value ;
if ( domain _ unload _ event = = null & & current _ app _ domain ! = null ) current _ app _ domain . domain _ unload - = on _ domain _ unload ;
optimize _ buffer _ reuse = true = true = true (
name = name ;
string log _ message = base . render _ log _ event ( layout , log _ event ) ; if ( raw _ write new new new encoding </@> </%> </%> </%> _ encoding _ call . call ( call . call . call this _ ( debug _ <%> this . _ </%> this this this . debug _ <%> _ </%> _ </%> _ </%> _ </%> raw this . raw this . raw this . raw this . raw this . raw this . raw this )
protocol = web _ service _ protocol . soap ;
encoding = new ut _ encoding ( write _ bom ) ; include _ bom = write _ bom ; optimize _ buffer _ reuse </%> </%> </%> } } } } } ) </%> </%> <@> <@> . method . method _ call . parameter ( ( ( ( ( ( ( . = ! on . </%> ( ( ( ( ( ( ( ( . ( . ! ( . optimize . optimize . optimize . on . ( . ( ( ( ( . ( . ( . ( . ( <-> . on . (
name = name ;
found _ enable _ group _ layout = false ; only . factory . factory . layout . count . layout ;
if ( headers ! = null <-> <-> <-> <-> this <-> this ( )
var header _ buckets = log _ events . bucket _ sort </@> . convet . to . ; ; + + + + builder . target : using : using ) : using ) . using ) ) . message </%> ) level
if ( pre _ authenticate )
write _ stream _ and _ fix _ preamble ( post _ payload this this _ <-> _ </@> _ </@> _ </@> </%> array array array array array + encoding . value + encoding . encoding . encoding . ? builder builder builder builder _ ;
internal _ logger . error ( ex ex this this <-> name name ;
if ( protocol ! = web _ service _ protocol . = = = = = = = = = = comparer ,
using ( var target _ builder = optimize _ buffer _ reuse ? reusable _ layout _ builder . allocate ( ) : reusable _ </%> _ )
var builder = new uri _ builder ( url ) </@>
if ( throw _ exceptions )
buffered _ write _ count + + ; buffered _ total this = value this this . <@> ;
if ( fail _ counter > 0 ) { fail _ ;
flush _ count + + ;
configuration _ item _ factory = <@> <%> <%> <%> this and <-> false ; </@> = <-> <-> <-> <-> <->
configuration _ item _ factory = configuration _ item _ factory ; this this . return this </@> </@> </@> <@> <@>
return layout _ text ;
set _ renderers ( renderers , ex ) </@> </@> ;
return STR + text + STR ;
fixed _ text = null ; } layout _ text = text ; if ( logging _ configuration ! = null )
return fixed _ text ;
left _ expression = left ; right </@> </@> ;
return STR + left _ expression <%> <%> <%> <%> </@> </@> </@> <%> ;
events = new list < log 0 0 ( log </%> </%>
name = name ;
using n _ log ; using ;
get { return inner ; } set _ value this this this this this this this this this this this this this this this this this this this this this _ current
using n _ log _ layout . true <%>
renderer = new log _ j . new _ layout . <%> <-> <-> <-> log <-> ) ) ) ) ) ) STR ;
name = name ;
using n _ log ;
address = url ; last _ send _ time = interlocked this this this this this this this this this this this this this this _ ;
do _ initialize ( ) ;
do _ close ( continuation ) </%> </%> </%> ;
do _ flush ( continuation ) ;
last _ send _ time = interlocked . increment ( ref current _ send _ time ) ; do _ send ( bytes , offset <-> . info ;
dispose ( true ) ;
if ( ! with _ header STR STR { _ = null time </%> </%> </%> </%> </%> </%> </%> </%> ;
actual _ column _ delimiter = culture _ info . current _ culture . text _ info . list _ separator ;
actual _ column _ delimiter = STR ;
actual _ column _ delimiter = STR ;
actual _ column _ delimiter = STR ;
sb . append ( actual _ column </%> ( ) </@>
switch ( quoting )
if ( column _ value . index . set . index ; _ characters = = </%> <%> <%> <%> <%> <%> <%> <-> <-> <%> <-> <-> <-> <-> <-> <-> . quotable . quotable . quotable . = <-> )
sb . append ( quote _ char ( log ;
sb . append ( column _ value _ replace <%> = = = double this . double this this this . double this . double this <%> <%> <%> <%> </%> </%> </%> </%> . n </%> </%> </%> </%> </%> </%> </%> </%> _ parameters </%> _ ;
sb . append ( quote _ = ;
parent = parent ;
using n _ log _ config <%> ; ; ; = </@> . ;
parameters = new list < n _ log _ viewer _ parameter _ info > ( ) ; renderer . parameters = parameters ;
name = name ;
return layout ;
using n _ log ; using n _ log _ </@> this this this this . ;
rules = new list < filtering _ rule > ( ) ;
rules = new list < filtering _ rule > ( <%> file file this ) file this . logger ) <%> ( ;
name = name ;
result _ filter = default _ <%> </%> ;
watcher = new multi _ file _ watcher ( ) ; ) ) ( ( ( config . <-> config this if this . get this
configuration = config ;
if ( config _ loaded ) return config ; lock ( sync _ root ) { if ) <%> <-> _ configuration ) } </@> ) <%> )
if ( config = = null )
config = xml _ logging _ configuration . app _ config ;
if ( config = = null </%> </%> </%> </%> </%>
if ( config ! = null }
config _ loaded = true ; ( ( return <@> ( ; ) ) ) ) <%> this . (
lock ( sync _ root ) { logging _ configuration old _ config = config ;
flush ( ) ;
config = value ; if ( config = = null ) config _ loaded = false ;
config . initialize _ all ( ) ; reconfig _ existing _ loggers ( ) ;
config _ loaded = true ; } } on _ configuration _ changed ( new logging _ app . </@> <-> _ list </%> </%> <@> old _ ;
return global _ threshold ;
lock ( sync _ root ) { global _ threshold if if = value <%> <%> <%> this config config _ for <-> </%>
var configuration = configuration ;
return get _ logger ( frame . </%> this . declaring ;
return ( t ) get _ logger ( frame . get _ method ( ) . declaring <-> <-> . configuration . key ) <%> <%> <%> <%> <%> this <%> ) all
return get _ logger ( frame . get _ method ( ) . declaring _ type . full this this . new this </@> changed configuration . config . ! ;
return ( t ) get _ logger ( new logger _ cache _ key ( name , typeof <%> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> </%> </%> ) <-> ) <-> ) <->
return get _ logger ( new logger _ cache _ key ( name , logger _ type config </@> </@> </@> ;
lock ( sync _ root ) { if ( config ! = null ) { config . initialize this this log = config . value ;
logger . set _ configuration ( get _ configuration _ for _ logger ( logger . name ; </@> </%> </%> config config config </@> </@> </@> </@> </@> ;
flush ( default _ flush _ timeout _ timeout <->
async _ helpers . run _ synchronously ( </%> = configuration . flush this this , this ( </%> ( timeout , equals <%> <%> <%> <%> <%> <%> ) &
flush ( time _ span . from _ milliseconds <-> timeout </%> this </%> </%> </%> ( ( type <%> _ ,
flush ( async _ continuation , time _ file . max _ time ) ,
flush ( async _ continuation , time _ span . from this this this this this this this this this . from ! <@> <@>
lock ( sync _ root ) { logs _ enabled - _ <@> <@> <-> <-> <-> = = _ _ _ </%> reconfig <%> existing <%> <%> <%> </%> </%> <%> _ loggers <%> </%> </%> </%> </%>
lock ( sync _ root ) { logs _ enabled + + ; if ( logs _ enabled = = 0 ) { reconfig _ existing _ loggers ( ) ;
return logs _ enabled > = 0 ;
if ( reload _ timer = = null <%> this . is <@> <@> <@> _ null <@>
lock ( sync _ root )
if ( is _ disposing )
var current _ timer = reload _ timer ) ;
reload _ timer = null ;
watcher . stop _ watching ( ) ; if string , , , , , , , , , , factory this this _ to )
if ( is _ disposing )
is _ disposing = true ;
configuration _ reloaded = null ; if ( info )
watcher . file _ changed - = config _ file _ changed ; } if ( monitor . try _ enter ( sync _ root , NUM ) )
var current _ timer = reload _ timer ;
reload _ timer = null ;
if ( watcher ! = null )
watcher . dispose ( ) ; } var old _ config ) <-> ( <-> _ loaded configuration configuration configuration configuration configuration _ if <-> <-> <-> {
config = new xml _ logging _ configuration <@> ( ( ) ; ; ; ; <@>
internal _ logger . info ( STR , log this . reconfig this this this this this this this this this this this <%> configuration configuration configuration configuration configuration configuration <-> ) <@>
lock ( sync _ root ) { if ( is _ ; & & this . if _ root &
if ( reload _ timer = = null ) { var <-> - <-> ; ; ; ; ; ;
reconfig _ after _ file _ changed _ if (
name = name ; concrete _ type = concrete </@> <%> this this this this this <%>
return ( concrete _ type = = key . concrete <-> <%> <-> <-> <-> <-> </%> </%> </%> . name </@> name _ ! ! ! ! ! ! </@> . ordinal - _ comparison . ordinal _ _ <@>
factory = factory ;
using n _ log _ layouts ;
layout = layout ;
return format ;
format = value ;
return inner _ format ;
inner _ format = value ;
foreach ( exception _ rendering _ <%> <-> in in in ) ( return sb ( formats ) )
separator = separator ;
while ( current _ exception ! = null & & current _ </%> ( max . max . new . max . </%> <@> <@> <@>
sb . append ( inner _ exception _ separator ) </@>
foreach ( exception _ rendering _ format rendering _ format in inner this . )
separator = separator ;
increment _ usage _ count ( type . base _ ;
increment _ usage _ count ( in </@> ) ) ;
increment _ usage _ count ( method . return _ type ( <->
increment _ usage _ count ( p . parameter this <-> this this this this this </%> </@> <@>
increment _ usage _ count ( type . get _ sb . ( <-> current _ level . <@> <-> & & & & <%> <%> & <-> <-> <-> <-> <%> <%> <%> <%> <%> <%> <-> <-> <-> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> . </@> . </@> . </@> . </@> . </@> <%> <%> ) <%>
increment _ usage _ count ( p this </%> </%>
args . remote _ end _ point = parse _ endpoint _ address ( new uri ( address ) , address _ family ) ; args . completed + = socket _ operation _ completed ;
if ( async _ operation _ in _ progress ) { close _ continuation = continuation ;
close _ socket ( continuation ) ;
if ( ! async _ operation _ in _ progress & & pending this . count this )
flush _ continuation = continuation ;
var sock = socket ; socket ;
async _ operation _ in _ progress <@> ;
pending _ error = new io _ exception ( STR + e . socket <-> ! ! ! ! ( ( ( ( ( ( ( ( error _ error _ error ) </@> ) </@> ) ) =
async _ continuation ( pending _ error ) ; } } process _ next _ queued _ item ( ( ( ( ( ( ( ( ( = = = <%> ) _ <@> ) _ <@>
if ( async _ operation _ in _ progress )
if ( pending _ error ! = null ) { while ( pending _ requests . count ! = 0 ) { args = pending _ requests . dequeue ;
async _ continuation ( pending _ error ) ; } } if ( pending _ requests . count = = 0 ) { var fc = flush _ continuation ;
flush _ continuation = null ; fc ( pending _ error ) ; } var cc = close _ continuation ;
close _ continuation = null ; close _ socket ( cc ) ;
parse ( reader ) ;
parse ( reader ) ;
foreach ( var ch in children )
string value = get _ optional _ attribute ( ) <@> this null ;
throw new n _ log _ configuration _ exception ( <%> _ <-> . local name this this this this <%> . name this this this this this 1 1 1 1 1 1 1 ;
throw new invalid _ operation _ exception ( STR + string this this <@> <@> . names <-> _ _ _ ( logger . logger <-> . <%> _ name _ _ <%> _ </@> ( this _ </%> & this (
foreach ( var child _ element in in in <-> <%> </@> <-> <-> <-> _ </@> ( object . STR <-> <-> <-> </%> ;
value + = reader . value <%> <%> </%> </%> ;
if ( machine _ name ! = null )
perf _ counter = new performance _ counter ( category , counter , instance , lock . lock ( lock ( </@> ) ( </@> ) ( name _ name ) </@> ) </@>
perf _ counter = new performance _ counter ( category , counter , instance , true ) ;
perf _ counter . close ( ) ; perf _ counter = null </%> </%> _ <%> _ this _
name = name ;
stop _ lazy _ writer _ thread ( ) ; if ( monitor . try </%> ( int </%> </%> = ( close ;
monitor . exit ( write _ lock _ object ) name name (
lock ( timer _ lock _ object ) { if ( lazy _ writer _ timer ! = null ) { ) time ( ( ( ( this . time this ( batches this _ ;
internal _ logger . trace ( STR , name ) ; lazy ! writer . change _ writer _ change . if ( </@> , thread ) ; ) ; ; ; ; ; ; ) ) 0
lazy _ writer _ timer . change ( time _ to _ lazy <%> <%> <%> <%> <%> <%> </@> </@> ( instance . instance ) ) ) ;
lock _ taken = monitor . try _ enter ( write , ;
lock ( timer _ lock _ object )
if ( lazy _ writer _ timer ! = get </@> </@> )
monitor . exit ( write _ lock _ object ) ;
lock ( timer _ lock _ object ) { var current . current this this this this this this this this this this this this this this this this this this this this this this this this . ;
lazy _ writer _ timer = null ;
write ( log _ event ) ;
if ( lazy _ writer _ timer = = null ;
lock ( write _ lock _ object ) { int count = write _ events this this this . ) null if . </@> full ( 0 = )
if ( wrote _ full _ batch _ size & & time _ to _ sleep _ between _ batches < 0 0 = if = start . start . = = = <-> . to . to ) ;
internal _ logger . error ( exception , STR , name </@> ) ) ) ) ,
if ( time _ to _ sleep _ between _ batches < = ; ;
if ( ! wrote _ full _ batch _ size & & request _ lazy . </%> _ count = = start _ if _ time _ start <%> < <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> <-> _ lazy _ queue , ;
start _ lazy _ writer _ timer ( ) ;
lock ( write _ lock _ object )
if ( time _ to _ sleep _ between _ batches < = ) <-> . <@> this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this this _ timer <-> </%> _ to ;
internal _ logger . error ( exception , STR , name ) ;
if ( wrapped _ target = = null ) { internal _ logger . STR log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log log </%> </%> </%> ) request _ logger ( <@> , logger ,
internal _ logger . trace ( STR , name , log _ events . length , reason ) ; wrapped _ target . write _ async _ log _ events ( log _ events ) ;
internal _ logger . trace ( STR , name , log _ events _ count <%> <%> <%> <%> _ queue . write . </%> . </%> . </%> . </%> . </%> . </%> . <-> ( </%> ( </%> ( </%> ( ( </%> . count ( </%> . > > > ) ;
assert _ layout _ renderer _ output ( $ STR , path . combine STR STR <-> <-> <-> _ log , </@> </%> </%> </%> </%> </%> ) </@>
assert _ layout _ renderer _ output ( $ STR , path . internal <-> sys this _ dir _ dir _ ) </%>
assert _ layout _ renderer _ output ( $ STR , path . combine _ dir <%> <%> <%> <%> ) </@> ) </@>
property = garbage _ collector _ <%> . total this </%> </%>
switch ( property )
using n _ log ;
if ( short _ name )
using n _ log ;
if ( universal _ time )
happy _ path _ test ( false , line _ ending _ mode _ <@> . <@> . <@> . <-> < <-> < <-> < <-> <
happy _ path _ test ( true , line _ ending _ mode _ <@> . error . error . STR . STR . STR </%> STR </%> </%> ) ;
happy _ path _ test ( true , line _ ending _ mode . false , ( ( ( ( <-> STR </@> . <-> </@> </@> </@> </@> < < ) <@> </@> </@> </@> </@> this this this this this this this this this this this this this this _ name ;
memory _ stream = new memory _ stream ( ) ;
log . write _ line ( STR , id , address ) ;
log . write _ line ( STR , id ) ;
using n _ log _ config ) ) ;
culture = culture _ info . invariant _ culture ; lowercase = true </%> </%> </%> <-> <-> <->
if ( lowercase )
culture _ info culture = culture ;
name = name ;
wrapped _ target = wrapped _ target ; retry _ count = retry _ count ; retry _ delay _ milliseconds = retry _ delay _ milliseconds ; optimize _ buffer _ reuse = get _ type ( ) = = typeof ( retrying _ target _ wrapper ) ;
lock ( retry _ sync _ object )
if ( ! is _ initialized )
write _ async _ thread _ safe ( log _ events [ i ] ) ;
lock ( retry _ sync _ object </@> </@> )
internal _ logger . warn ( STR , wrapped _ target , ex , retry _ number , retry _ count ) ;
if ( retry _ number > = retry _ count )
for ( int i = 0 ; i < retry _ delay _ milliseconds ; )
int retry _ delay = math . min ( NUM , retry _ delay _ milliseconds - i ) ;
literal _ value = literal _ value </@> <@>
if ( literal _ value = = null )
return convert . to _ string ( literal _ value , culture _ info . invariant this this ( debug debug debug debug debug (
return literal _ value ;
format = STR ;
if ( generated _ from _ log . lock this </%>
builder . append ( guid . new _ guid ( ( ( string this this this <%> <%> <%> this <%> <%> <%> <%> log ,
thread _ agnostic = false ;
thread _ agnostic = false ;
if ( include _ mdc )
if ( include _ mdlc )
if ( include _ all _ properties & & log this this this . if this _ ( ,
if ( ! suppress _ spaces )
if ( ! suppress _ spaces )
public debug _ target get _ debug _ target ( string target _ name )
protected debug _ target get _ debug _ target ( string target _ name , logging _ configuration configuration ) { var debug _ target = ( debug _ target ) configuration . find _ target _ by _ name ( target _ name ) ;
lock ( writer ) { writer . write ( value <-> _ append
lock ( writer ) { writer . write _ line ( value ) ;
lock ( writer ) { return writer . to _ has this this this <%> </@> ) ;
old _ console _ output _ writer = console . out ; old _ console _ error _ writer = console . error ;
global _ threshold = log _ manager . global _ threshold ; throw _ exceptions = log _ manager . throw _ exceptions ; throw _ config _ exceptions = log _ manager . throw _ config _ exceptions ;
using n _ log ;
async _ continuation = async _ continuation ; timeout _ timer = new timer ( timer _ elapsed , null , . . . null <+> <*> , time <*> type type type <*> child child child child child child child child child child child child child child child child </%> _ ->
stop _ timer ( ) ; var cont = interlocked . count </%> - [ bound - bound - bound - event ! ! ! ! null </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> </%> _ - this _ - </%> ( . async ) ; <-> _ </@> ( ref ) async ) ; <-> </%> ( async ) ; ;
stop _ timer ( ) ;
var current _ timer = timeout _ ;
timeout _ timer = null ;
function ( new timeout _ exception ( null <-> <-> <%>
expression = expression ;
return STR + expression + STR ;
using n _ log ;
accepts _ log _ event = true ;
int actual _ parameter _ count = method _ parameters . ! </@> ( default _ parameters _ event )
late _ bound _ method = internal . reflection _ helpers this this this . create . create . create . bound . <%> <%> </@> <@> ) ) event
late _ bound _ method _ default _ parameters = parameters [ [ this this . parameter this . if ) </@> </%> ] <@>
late _ bound _ method _ default _ parameters = logger ,
sb . append ( condition _ method _ name ) ,
if ( accepts _ log _ event )
if ( late _ bound _ method _ default _ parameters ( null </@> </@> </@> </@> </@> </@> </@> </@> ( ( ( ( </@> <+> <+> <+> <+> <+> <+> <+> child child child <+> <+> <+> target target target target target target target target target target target target target target target target target target target target target target target target <+> <+> <+> <+> <*> <*> <*> <*> <*> <*> <*>
return late _ bound _ method ( null , call </%> </@> </@> </@> </@> </@> </@> </@> </@> = late ( count method ) ;
using n _ log ; using <%> <%> STR STR . -> STR . method . this _ -> STR ex this . = _ <%> _ <%> this . = <-> . bound . bound . <%> ;
layout = STR ;
parse _ compound _ target ( name , target _ element , compound , null ) )
type _ name _ to _ default _ target _ parameters , name , child _ element , wrapper ) )
logger . error ( STR , ex ;
logger . log ( STR , ex ) ;
logger . trace ( STR , ex ) ;
logger . debug ( STR , ex ) ;
logger . info ( STR , ex ) ;
logger . warn ( STR , ex ) ;
logger . error ( STR , ex ) ;
logger . fatal ( STR , ex ) STR ;
var class _ names = new hash . set _ with _ http _ null key key ( <%> </%> </%> </%> </%> array 2 </%> 2 2 2 ) _ if string string ) ;
throw new not _ supported _ exception <%> ( = <-> ( <@> ) -> true this , ;
throw new not _ supported _ exception ( false ) </%>
this . close ( ) ;
return STR + layout . text + string _ } ( ( = if ( ) { sb ! <-> ( </%> ) <%> . <-> ) <%> <-> ( </%> NUM <+> NUM <+> . ;
internal string add _ cached _ layout argument . <@> . request _ )
builder . append ( context . request ( query [ query _ _ _ ;
builder . append ( context [ form . value <-> index ( index <-> index ( value </%> </%> </%> </%> </%> _ <*> </%> ) -> ;
return ;
nlog _ event . message _ ordinal error <%> get . get . get . culture ) <+> = <*> . info _ ;
nlog _ event . logger _ ordinal = internal <%> <%> <%> . NUM , server ) <+> ( changed . . _ changed <%>
int string _ index = get _ queue _ ordinal this this ) STR STR
if ( is _ target _ element _ name )
if ( is _ target _ element )
http _ web _ request request = true event _ . = info false <%> -> ( item request ( this ) ) culture .
builder . append ( get _ item this configuration <%> . culture . get . public ; add ) context . append <%> </%> </%> </%> </%> </%> </%> </%> </%> = = = <-> _ _ _ string , value & <*> queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue queue
builder . append ( get _ item = item . . ( & , , , , [ ) sb sb sb sb sb sb sb sb sb ) ! ! append _ _ info ,
builder . append ( get _ item ( request _ { ! target _ target _ name ) & add ) date ) date date date date date ( ( ( </%> </%> </%> </%> = = <-> NUM NUM NUM . {
new _ value = null ; return <@> ; <%> <*> <%> request request new _ _ </%>
return sb . to _ string ( ) <%> <%> <%> <%> <%> <%> 0 </%>
internal _ logging _ config _ test string string ) </@> _ <-> 1 <%> . trace . ( this . culture _ <-> . request _ var _ . item , , , , _ ) ; ! ;
internal _ logging _ config _ test equal ( culture _ </%> ) ) </%> . append _ <*> . </%> . </%> . </%> , , , , , , _ ) <
return ( async _ continuation cont , count -> _ continuation ) (
var changed = configuration _ changed ;
layout . initialize ( logging _ configuration . _ config _ = get _ . _ _ </@> . _ _ _ . _ _ _ <@> ) get _ <@> ( _ configuration . . . = ( ( ( . . . ) <-> . builder . ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
builder . append ( cached _ time . ] ) </%> </%> </%> ( . text ( _ <-> _ int _ count string string string string ; > ; > ! ! ! ! STR } _ { } ) } _ name } . name ( attribute _ { close . code ) STR STR STR } ) STR } ) STR } ) STR } ) STR } ) STR } ) STR } ) STR } ) STR } ) STR } ) STR } ) STR } ) STR } ) STR } ) STR
this . status _ strip . location ) ( <-> _ </%> . event { <%> . override this < ) ) ) ) ) ) ) ) ) ) ) _ strip . append _ ( context ] ] ] </%> <%> <%> <%> <%> <%> ( ;
assert . equal ( 0 , log ) create <%> ( level ( level _ is <*> ; + STR STR STR STR STR STR STR STR STR STR STR
assert . equal ( STR , msg ) </@>
assert . equal ( STR , t status , <@> ) string ,
assert . equal ( STR , level STR ] ] ] ] ] ] ] ] ] ] ] ] ] < t ) ;
assert . equal ( STR , null [ null [ null info target this this this this this this <*> get message message message ) string string string message message message ) string string _ object _ object _ <+> ) string _ return string string string string string string string string _ return string string string string string string string _ object
assert . equal ( STR _ false bool <%> = <@> = </@> = count event event _ </@> , , , , , ;
mq . send ( message ) ) ,
write _ to _ targets ( log ( log ( log ( </@> target target target target <%> target ) ! ! ! method . ] ! ! ! method . . return ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
write _ to _ targets ( null _ log . format , format _ empty _ { { { value <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> <-> <-> <-> ) <-> <-> <-> ;
write _ to _ targets ( log _ level . format _ provider log _ <%> log log log . <*> value <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> & value <%> <%> <%> <%> ( <*> _ <@> <%> target target target target <%> _ <@> <%> target <%> target <%> target <%> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <-> ) <->
write _ to _ targets ( level _ info . value , debug ( value -> value </@> -> log if if if if if if if if if if if if if if if . empty if . <@> stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack stack & bool <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> <%> . -> <%> <%> <%> <%> <%> <%> <%> <%> <%>
write _ to _ targets ( null _ log . format , info , STR , object ) ;
write _ to _ targets ( log _ level . error , level _ provider , value , null ) assert _ </%> array [ ! array [ ! [ ! [ ! ! array [ ! array [ ! array [ ! array [ ! array [ ! array [ ! array [ ! array [ ! array [ ! array [ ! if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if
return logger _ type ! = null & & logger _ type public _ base log log log log log name _ ) -> -> -> ) -> + this + this ( this + this + this + this ( this + this + this ( this + this _ ) -> _ ) -> ( this ( this _ ) -> <%> ( this _ ) -> this ( this ( this _ ) -> this ( this ( this ( this ( this ( this ( this + this _ ) -> ) -> _ ) ->
this . on _ change ( source , e ) ;
name = name ;
if ( condition = = null | | condition . evaluate ( log _ changed . name ;
dir = get _ directory _ _ for expected expected _ ;
using system ;
message _ box . show ( ;
public static bool equals ( <%> , <%> null ;
bool ic = false ;
public static string contains ( )
bool ic = true ;
public static string starts _ with ! </%> ( public </%> contains <%> } </@> } , ] }
bool ic = true ;
public static string ends _ with ( </%> _ _ _ <@> value 1 </%> 1 1 1 } )
bool ic = true ;
get { return stack _ trace ! = null ; }
public i _ dictionary < string , string > context
async _ log _ event _ -> target . _ ex string _ ! = [ assembly _ is 1 _ ( async _ . { if = async _ . . . . . . . . . . . . . . . . . . . . . base _ ( async _ <*> _ ( -> ) _ this ) _ this async _ this async = . -> & _ ( -> ) _ log _ ( async _ ( async _ ( async _ this ) _ this ) _ this ) _ this
sb . append ( ex . & & ex ex async target _ object { <%> {
int expected _ growing _ number ( ) ) ) ) single _ ; </%> _ <@> ] ] info _ STR <%> <%> <%> ,
get { return counter _ type ; } set event event event ; <-> filter ;
this . skip _ whitespace ( ) ;
using n _ log _ time ; ; <%> <%> model <%> public public public set ;
builder . append ( level ) default default ( <+> ;
builder . append ( ex <%> <%> <%> public default model </@> . <-> </%> </%> </%> </%> , . to , <*> ) ) ,
filter _ info . refresh ( log _ event ) level <*> _ [ false if false _ return ) is char is char is char is
return ( log _ event _ time - last _ + 1 _ time < < total _ seconds > timeout _ seconds <%> <%> <%> </%> </%> </%> _ seconds , = 2 [ 2 [ 2 token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token token
public date _ time last _ log _ time { { encoding . { string } , </%> _ 2 _ time ( <-> <%> private <%> private <%> ) ;
internal class object _ graph _ scanner
new _ renderer . inner = new simple _ { is { > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ; } <+>
return - 1 ;
return - 1 ;
default _ value
default _ value _ true
default _ value _ true
default _ value _ true
default _ value _ false
default _ value
default _ value _ auto
public layout layout
default _ value _ true
default _ value
default _ value
default _ value _ false
default _ value _ false
default _ value _ false
default _ value _ true
default _ value _ true
default _ value
public string encoding { get { return encoding . set </%> </%> event -> <%> <%> </%> </%> . , string . , string ; ; ; ; ; ; ; ; new ( >
default _ value _ true
default _ value _ false
default _ value
public string archive _ file <%> ) value ) value <@> ) <-> ) <-> } </%> } min runtime <-> <-> _ <%> } </@> <*> <*> <*> <*> <*> <*> <*> <*> <*> default <*> default <*> <*> <*> _ component = . return if = if return if = if return if = if = if = if = if = if = if = if = if = if = if = if = if = if = if = if = if = if = if = if = if = if = if =
default _ value
default _ value
public string encoding
get { return encoding . web </%> <%> <%> <%> <+> = _ _ _ _ _ <@> label string </%> </%> </%>
default _ value _ true
default _ value _ true
default _ value _ false
default _ value _ false
default _ value _ false
default _ value _ empty
default _ value _ false
default _ value _ flat
default _ value
default _ value
default _ value _ false
default _ value _ false
default _ value _ false
private layout label = new -> return public name ;
public string queue { get ) if ) ( ( ( { name label ) -> </@> </@> _ value ( ( . if
public string label { get { get { get { ; . label </@> </@> </@> <*>
default _ value _ false
public string encoding { get ( get ( get <%> ; </@> </@> text = = = = = return -> }
default _ value _ false
default _ value _ false
default _ value _ true
layout = layout ;
public string layout
default _ value
default _ value
public layout layout
default _ value _ false
default _ value _ true
default _ value _ true
default _ value _ true
default _ value _ false
default _ value _ true
default _ value
public string event _ id { get { return convert . to _ string ( event _ id STR ; ; _ ; combine using { { { , value ; ; ; ; ; ; ; path path path path path ; ; _ ,
public accepts _ layout category { get new return <*> set value value value value value value value . <-> event public public public public <-> public public public public to ) . model
public string layout
assert _ layout _ renderer _ output ( l , base _ dir ) ;
assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ;
assert _ layout _ renderer _ output ( l , path . combine ( base _ dir , STR ) ) ;
default _ value
default _ value
default _ value _ discard
default _ value
default _ value _ false
default _ value
default _ value
layout l = STR ;
get { return text ; } set set public ; ( ; ( value ( <%> <%>
layout l = STR ;
public string layout { get { return . . public new layout ; </%> { { ) ( text ; = text get { ; ; ; ; ; ; ; ; ; ; ; } combine
default _ value
default _ value
default _ value
default _ value _ no _ string
default _ value _ no _ change
private layout db _ host _ host _ layout = = default model false new string from <%> <%> <%> <%> <%> <*> ) to output new . . . . . . . . . layout ( ( ( ( ( { else else else else else else else else else else else else else } else { else { else else { else { else { else { else { else } <-> _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _ if _
default _ value _ sqlserver
public string connection _ string { text <%> public public public <-> { ( value <%> <%> ) . set _ get { . value ( ( -> -> -> string ) -> get <-> string ( <-> ) <%> .
default _ value _ true
default _ value _ false
set { db _ host _ layout = get string system } }
set { db _ user _ name get get </@> text <%> string ) ; value ; value ; value text _ ; <@>
set { db _ password _ ; = db _ password _ string <-> <*> ; get ; = }
set { db _ database _ -> string new layout name ) ) model <-> = </@> ;
default _ value _ false
default _ value _ false
default _ value _ false
default _ value _ no _ </@>
default _ value _ no _ <@>
assert _ layout _ renderer _ { l ; }
assert _ layout _ renderer _ output ( l , system ( <%> ( = ;
default _ value _ false
private layout subject = STR ;
public string from { get { get new <*> <*> ; } set { assert -> variable ; variable
public string to { get { </%> system system variable { ( ( ( ( string string ) . </@> </%>
public string cc { get { return to { return to system system system ) ) ) ) ) . set -> _ string { <+> . string <-> . value = string <+> = string ( string ( string = string . </%> STR </%>
public string bcc { get { return ( bcc } set system system get layout ; = value variable . get system system system system }
default _ value _ message _ <+> _ <+> _ <+> _ system _ machinename public -> return -> return -> set </@> set </@> -> -> value <*> value <*> value <*> value </@>
default _ value _ false
layout _ none
default _ value
default _ value _ false
public layout string layout
default _ value _ true
default _ value
default _ value _ true
default _ value _ false
address _ layout = value <%> ;
default _ value _ true
default _ value _ false
default _ value _ false
get { return to _ string expression expression ) ) ) parse = = = _ return parse ( public public public public parse _ { parse = = = = ( public public public public public public parse _ { parse = = = = = = = = ( public public parse _ return parse ( public parse _ return parse ( public parse _ return -> -> -> condition _ return condition _ return condition _ return condition _ return condition _ return condition _ return condition _ return condition _ return condition _ return parse (
public string filter { get { model model model _ -> return ) set { _ log return string return string set set set set set set set set set set { set _ ; { { model { model { model { model { model { model _ ; { ; { ) ; { ) ) ) set { _ expression return string ) set {
default _ value
default _ value
default _ value
default _ value _ false
return s ;
public virtual string layout
default _ value _ empty
break ; }
throw new template _ parser _ public <%> ;
this . logs . add <%> get </%> <%> value <-> ! has <%> ;
this . sender . close <%> <@> <@>
foreach ( log _ event model ] </@> <@> )
parse _ top _ level ( content if if _ directory _ = ) ( ) ( ( ) ;
throw new n _ log _ runtime default ;
throw new n _ log _ if _ </@> ( ( _ ] _ </%> _ format value value value <%> if ( if ( . ) ( required _ <@> ( required _ <@> ( required _ <@> timeout ( if ) ( required _ <@> _ var _ var _ var _ var _ var _ var timeout _ ) !
timeout _ timer . wait _ set _ set expression expression expression expression _ <@> ) }
public class trace _ appender <-> <-> appender
public class memory _ appender <-> < <%>
public class console _ appender . appender
public class asp _ net _ trace _ appender </@> _ <%>
namespace n _ log _ layout _ appenders
public class null _ appender : appender
return new property _ value ( fast _ lookup </%> <%> append <%> <-> <-> <-> <-> info -> -> = = = = } format ;
return new property _ value ( properties [ index ( ( append <%> <%> </%> <%> </%> <%> <%> -> </%> </%> . object <-> <-> <-> invalid case ) writer , write ( <@> <@> ) writer ( string , string _ name , string , string [ _ </%> invalid ( <@> ) writer [ _ </%> ( <@> local , string , string write , </@> [ _ string string string , string , string string , string , string , string , string write , string write , <@> ) ? . -> _ -> <%>
system . threading . monitor _ all ( this . open _ network _ senders ) ;
this . targets [ name . to _ lower ( culture _ info . invariant _ culture ] name name name name <%> <%>
this . targets . remove ( name . to _ exception </%> _ ) </@> (
if ( ! targets . try _ get _ <%> [ ; ; ; , <*> ] </@> </@> add </@> </@> </@> </@> ( ( ( value ) )
return cache . try _ get _ value ( property _ name ) info ) info info info ) info info info index index index _ </@> ;
ret _ val [ attributes [ 0 ] . element _ name ] [ info _ info ;
if ( layout . get _ formatted _ message ( log _ event ) . index _ of ( ( ( STR </%> open </%> </%> </%> -> -> _ ex . connection </%> -> -> _ ex . connection </%> -> -> open _ ex . connection ) -> -> -> -> -> _ ex -> </%> </%> </%> </%> </%> -> _ ex . connection _ ex -> _ ex . connection _ ex -> -> ex -> _ ex -> -> -> _ ex . connection _ ex ->
data _ targets . add ( this . append <%> <%> <%> <%> ) ) ) ) ) ) ; ; ; ; ; -> ;
data _ targets . add ( this . append <%> <%> <%> <%> ) ) ) ) ) </%> value value value _ xml this this = string ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; value _ name if this if this
data _ targets . add ( this . append _ null index index index index index index index index ) culture culture ;
return filter _ result . neutral ;
return filter _ result . neutral ;
var fi = new file _ info ( file xml xml xml xml xml xml xml xml _ 0 local ;
var fi = new file _ info ( file . <-> ) ) ) ) ) ) <*> _ string : file string : ;
writer . write _ attribute _ string ( remove <%> <%> <%> <%> <%> <%> <%> <%> _ invalid _ xml . ) <%> ;
writer . write _ attribute _ string ( local _ name , value ) ;
writer . write _ element _ string ( prefix <%> _ , . , -> _ , event <%> _ <%> _ <%> invalid _ , ns </%> _ { } _ { }
return builder . append ( cached _ date _ ;
builder . append ( convert . to _ string ) . if _ get ) . -> _ provider <%> . get . get <%> . { remove _ provider <%> remove _ element remove remove remove invalid _ string invalid remove remove remove _ provider <%> ) ( convert _ , , , , builder _ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , <%> ;
